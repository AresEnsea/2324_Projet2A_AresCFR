
main_board_code_2223.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e620  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  0800e7f0  0800e7f0  0001e7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f058  0800f058  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f058  0800f058  0001f058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f060  0800f060  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f060  0800f060  0001f060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f064  0800f064  0001f064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f068  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018b8  200001e8  0800f250  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001aa0  0800f250  00021aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ee0  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a25  00000000  00000000  0003513b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00038b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de1  00000000  00000000  00039d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b81  00000000  00000000  0003ab61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a346  00000000  00000000  000606e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d413d  00000000  00000000  0007aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f40  00000000  00000000  0014eb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00154aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e7d8 	.word	0x0800e7d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800e7d8 	.word	0x0800e7d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	200d      	movs	r0, #13
 8000fac:	f001 fdc1 	bl	8002b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000fb0:	200d      	movs	r0, #13
 8000fb2:	f001 fdda 	bl	8002b6a <HAL_NVIC_EnableIRQ>

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a47      	ldr	r2, [pc, #284]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b45      	ldr	r3, [pc, #276]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b41      	ldr	r3, [pc, #260]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a40      	ldr	r2, [pc, #256]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a39      	ldr	r2, [pc, #228]	; (8001100 <MX_GPIO_Init+0x13c>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a32      	ldr	r2, [pc, #200]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f640 0107 	movw	r1, #2055	; 0x807
 8001050:	482c      	ldr	r0, [pc, #176]	; (8001104 <MX_GPIO_Init+0x140>)
 8001052:	f002 fb53 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	482b      	ldr	r0, [pc, #172]	; (8001108 <MX_GPIO_Init+0x144>)
 800105c:	f002 fb4e 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEAM_LED_GPIO_Port, TEAM_LED_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001066:	4829      	ldr	r0, [pc, #164]	; (800110c <MX_GPIO_Init+0x148>)
 8001068:	f002 fb48 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin;
 800106c:	f640 0307 	movw	r3, #2055	; 0x807
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	481f      	ldr	r0, [pc, #124]	; (8001104 <MX_GPIO_Init+0x140>)
 8001086:	f002 f98d 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800108a:	2320      	movs	r3, #32
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4819      	ldr	r0, [pc, #100]	; (8001108 <MX_GPIO_Init+0x144>)
 80010a2:	f002 f97f 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_Pin;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WIFI_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <MX_GPIO_Init+0x148>)
 80010ba:	f002 f973 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_Pin;
 80010be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <MX_GPIO_Init+0x140>)
 80010d4:	f002 f966 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEAM_LED_Pin;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEAM_LED_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <MX_GPIO_Init+0x148>)
 80010f2:	f002 f957 	bl	80033a4 <HAL_GPIO_Init>

}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40020800 	.word	0x40020800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400

08001110 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e00b      	b.n	800113a <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	1c4b      	adds	r3, r1, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	2201      	movs	r2, #1
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <_write+0x3c>)
 8001130:	f004 fb29 	bl	8005786 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	dbef      	blt.n	8001122 <_write+0x12>
	}
	return len;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000055c 	.word	0x2000055c

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f001 fb7b 	bl	8002850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 fa35 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f7ff ff31 	bl	8000fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001162:	f7ff ff0f 	bl	8000f84 <MX_DMA_Init>
  MX_TIM1_Init();
 8001166:	f000 fc2d 	bl	80019c4 <MX_TIM1_Init>
  MX_TIM8_Init();
 800116a:	f000 fe2b 	bl	8001dc4 <MX_TIM8_Init>
  MX_TIM11_Init();
 800116e:	f000 fec9 	bl	8001f04 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001172:	f000 fccd 	bl	8001b10 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001176:	f000 fdef 	bl	8001d58 <MX_TIM7_Init>
  MX_TIM2_Init();
 800117a:	f000 fc7b 	bl	8001a74 <MX_TIM2_Init>
  MX_TIM6_Init();
 800117e:	f000 fdb5 	bl	8001cec <MX_TIM6_Init>
  MX_TIM4_Init();
 8001182:	f000 fd19 	bl	8001bb8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001186:	f001 f933 	bl	80023f0 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800118a:	f000 fd61 	bl	8001c50 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 800118e:	f001 f959 	bl	8002444 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8001192:	f001 f8af 	bl	80022f4 <MX_UART4_Init>
  MX_UART5_Init();
 8001196:	f001 f8d7 	bl	8002348 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800119a:	f001 f8ff 	bl	800239c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800119e:	48b1      	ldr	r0, [pc, #708]	; (8001464 <main+0x314>)
 80011a0:	f003 f94e 	bl	8004440 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80011a4:	48b0      	ldr	r0, [pc, #704]	; (8001468 <main+0x318>)
 80011a6:	f003 f94b 	bl	8004440 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80011aa:	48b0      	ldr	r0, [pc, #704]	; (800146c <main+0x31c>)
 80011ac:	f003 f9b0 	bl	8004510 <HAL_TIM_Base_Start_IT>

  printf("Initializing propulsion system...");
 80011b0:	48af      	ldr	r0, [pc, #700]	; (8001470 <main+0x320>)
 80011b2:	f009 f8bd 	bl	800a330 <iprintf>
  propulsion_initialize();
 80011b6:	f007 f8d7 	bl	8008368 <propulsion_initialize>
  propulsion_disableMotors();
 80011ba:	f007 f91d 	bl	80083f8 <propulsion_disableMotors>
  avoidance_initialize();
 80011be:	f005 fd05 	bl	8006bcc <avoidance_initialize>
  HAL_Delay(200);
 80011c2:	20c8      	movs	r0, #200	; 0xc8
 80011c4:	f001 fbb6 	bl	8002934 <HAL_Delay>
  printf(" Done.\r\n");
 80011c8:	48aa      	ldr	r0, [pc, #680]	; (8001474 <main+0x324>)
 80011ca:	f009 f917 	bl	800a3fc <puts>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  printf("Initializing strategy...");
 80011ce:	48aa      	ldr	r0, [pc, #680]	; (8001478 <main+0x328>)
 80011d0:	f009 f8ae 	bl	800a330 <iprintf>
  Strategy* strategy = strategy_initialize();
 80011d4:	f008 f89e 	bl	8009314 <strategy_initialize>
 80011d8:	6238      	str	r0, [r7, #32]
  int curveIndex = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
  int onSiteActionIndex = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  int onMoveActionIndex = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  robot.waitingForOnSiteAction = false;
 80011e6:	4ba5      	ldr	r3, [pc, #660]	; (800147c <main+0x32c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  robot.waitingForOnMoveAction = false;
 80011ec:	4ba3      	ldr	r3, [pc, #652]	; (800147c <main+0x32c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
  robot.team = YELLOW;
 80011f2:	4ba2      	ldr	r3, [pc, #648]	; (800147c <main+0x32c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  float t = 0;
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_Delay(200);
 8001200:	20c8      	movs	r0, #200	; 0xc8
 8001202:	f001 fb97 	bl	8002934 <HAL_Delay>
  printf(" Done.\r\n");
 8001206:	489b      	ldr	r0, [pc, #620]	; (8001474 <main+0x324>)
 8001208:	f009 f8f8 	bl	800a3fc <puts>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  printf("Initializing lidar...");
 800120c:	489c      	ldr	r0, [pc, #624]	; (8001480 <main+0x330>)
 800120e:	f009 f88f 	bl	800a330 <iprintf>
  lidar_initialize();
 8001212:	f006 fd0b 	bl	8007c2c <lidar_initialize>
  HAL_Delay(200);
 8001216:	20c8      	movs	r0, #200	; 0xc8
 8001218:	f001 fb8c 	bl	8002934 <HAL_Delay>
  printf(" Done.\r\n");
 800121c:	4895      	ldr	r0, [pc, #596]	; (8001474 <main+0x324>)
 800121e:	f009 f8ed 	bl	800a3fc <puts>

  bool waitingForMatchStart = true;
 8001222:	2301      	movs	r3, #1
 8001224:	627b      	str	r3, [r7, #36]	; 0x24

  printf("Waiting for start...\r\n");
 8001226:	4897      	ldr	r0, [pc, #604]	; (8001484 <main+0x334>)
 8001228:	f009 f8e8 	bl	800a3fc <puts>
  while (waitingForMatchStart) {
 800122c:	e017      	b.n	800125e <main+0x10e>
	  waitingForMatchStart = HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	4895      	ldr	r0, [pc, #596]	; (8001488 <main+0x338>)
 8001234:	f002 fa4a 	bl	80036cc <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_GPIO_WritePin(TEAM_LED_GPIO_Port, TEAM_LED_Pin, robot.team == PURPLE);
 800123c:	4b8f      	ldr	r3, [pc, #572]	; (800147c <main+0x32c>)
 800123e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001242:	2b01      	cmp	r3, #1
 8001244:	bf0c      	ite	eq
 8001246:	2301      	moveq	r3, #1
 8001248:	2300      	movne	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001252:	488e      	ldr	r0, [pc, #568]	; (800148c <main+0x33c>)
 8001254:	f002 fa52 	bl	80036fc <HAL_GPIO_WritePin>

	  HAL_Delay(50);
 8001258:	2032      	movs	r0, #50	; 0x32
 800125a:	f001 fb6b 	bl	8002934 <HAL_Delay>
  while (waitingForMatchStart) {
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e4      	bne.n	800122e <main+0xde>
  }
  propulsion_enableMotors();
 8001264:	f007 f8b8 	bl	80083d8 <propulsion_enableMotors>

  printf("Initializing odometry...");
 8001268:	4889      	ldr	r0, [pc, #548]	; (8001490 <main+0x340>)
 800126a:	f009 f861 	bl	800a330 <iprintf>
  Vector2 start = strategy->path[0]->p1;
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127c:	e883 0003 	stmia.w	r3, {r0, r1}
  Vector2 startTangent = strategy->path[0]->p2;
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	3208      	adds	r2, #8
 800128a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128e:	e883 0003 	stmia.w	r3, {r0, r1}
  float startAngle = vector2_angle(vector2_diff(startTangent, start));
 8001292:	ed97 6a03 	vldr	s12, [r7, #12]
 8001296:	edd7 6a04 	vldr	s13, [r7, #16]
 800129a:	ed97 7a01 	vldr	s14, [r7, #4]
 800129e:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a2:	eeb0 1a46 	vmov.f32	s2, s12
 80012a6:	eef0 1a66 	vmov.f32	s3, s13
 80012aa:	eeb0 0a47 	vmov.f32	s0, s14
 80012ae:	eef0 0a67 	vmov.f32	s1, s15
 80012b2:	f008 f9f3 	bl	800969c <vector2_diff>
 80012b6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ba:	eef0 7a60 	vmov.f32	s15, s1
 80012be:	ed87 7a05 	vstr	s14, [r7, #20]
 80012c2:	edc7 7a06 	vstr	s15, [r7, #24]
 80012c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80012ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80012ce:	eeb0 0a47 	vmov.f32	s0, s14
 80012d2:	eef0 0a67 	vmov.f32	s1, s15
 80012d6:	f008 f97e 	bl	80095d6 <vector2_angle>
 80012da:	ed87 0a07 	vstr	s0, [r7, #28]
  odometry_setPosition(start.x, start.y);
 80012de:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80012e6:	eef0 0a47 	vmov.f32	s1, s14
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	f006 fff5 	bl	80082dc <odometry_setPosition>
  odometry_setAngle(startAngle);
 80012f2:	ed97 0a07 	vldr	s0, [r7, #28]
 80012f6:	f007 f807 	bl	8008308 <odometry_setAngle>
  robot.measuredSpeed = 0;
 80012fa:	4b60      	ldr	r3, [pc, #384]	; (800147c <main+0x32c>)
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  odometry_startKalman();
 8001302:	f007 f811 	bl	8008328 <odometry_startKalman>
  HAL_Delay(200);
 8001306:	20c8      	movs	r0, #200	; 0xc8
 8001308:	f001 fb14 	bl	8002934 <HAL_Delay>
  printf(" Done.\r\n");
 800130c:	4859      	ldr	r0, [pc, #356]	; (8001474 <main+0x324>)
 800130e:	f009 f875 	bl	800a3fc <puts>

  printf("Go!\r\n");
 8001312:	4860      	ldr	r0, [pc, #384]	; (8001494 <main+0x344>)
 8001314:	f009 f872 	bl	800a3fc <puts>

  //odometry_setPosition(0, 0);
  //odometry_setAngle(0);

  HAL_UART_Receive_DMA(&huart4, &lidarBuf[0], 3);//HAL_UART_Receive_IT(&huart4, &lidarData, 1);
 8001318:	2203      	movs	r2, #3
 800131a:	495f      	ldr	r1, [pc, #380]	; (8001498 <main+0x348>)
 800131c:	485f      	ldr	r0, [pc, #380]	; (800149c <main+0x34c>)
 800131e:	f004 faf4 	bl	800590a <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &armData, 1);
 8001322:	2201      	movs	r2, #1
 8001324:	495e      	ldr	r1, [pc, #376]	; (80014a0 <main+0x350>)
 8001326:	485f      	ldr	r0, [pc, #380]	; (80014a4 <main+0x354>)
 8001328:	f004 fabf 	bl	80058aa <HAL_UART_Receive_IT>
	  }

	  HAL_Delay(100);
  }*/

  while (onSiteActionIndex < strategy->onSiteActionsLengths[0]) {
 800132c:	e026      	b.n	800137c <main+0x22c>
	  uint8_t action = strategy->onSiteActions[0][onSiteActionIndex];
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	70fb      	strb	r3, [r7, #3]
	  serial_send(&action, 1, 6);
 800133c:	1cfb      	adds	r3, r7, #3
 800133e:	2206      	movs	r2, #6
 8001340:	2101      	movs	r1, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f007 fed0 	bl	80090e8 <serial_send>
	  robot.waitingForOnSiteAction = true;
 8001348:	4b4c      	ldr	r3, [pc, #304]	; (800147c <main+0x32c>)
 800134a:	2201      	movs	r2, #1
 800134c:	621a      	str	r2, [r3, #32]

	  printf("Waiting for 0xFF...\r\n");
 800134e:	4856      	ldr	r0, [pc, #344]	; (80014a8 <main+0x358>)
 8001350:	f009 f854 	bl	800a3fc <puts>
	  printf("%d\r\n", robot.waitingForOnSiteAction);
 8001354:	4b49      	ldr	r3, [pc, #292]	; (800147c <main+0x32c>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4619      	mov	r1, r3
 800135a:	4854      	ldr	r0, [pc, #336]	; (80014ac <main+0x35c>)
 800135c:	f008 ffe8 	bl	800a330 <iprintf>
	  while (robot.waitingForOnSiteAction) {}
 8001360:	bf00      	nop
 8001362:	4b46      	ldr	r3, [pc, #280]	; (800147c <main+0x32c>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1fb      	bne.n	8001362 <main+0x212>
	  printf("%d\r\n", robot.waitingForOnSiteAction);
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <main+0x32c>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4619      	mov	r1, r3
 8001370:	484e      	ldr	r0, [pc, #312]	; (80014ac <main+0x35c>)
 8001372:	f008 ffdd 	bl	800a330 <iprintf>
	  onSiteActionIndex++;
 8001376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001378:	3301      	adds	r3, #1
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  while (onSiteActionIndex < strategy->onSiteActionsLengths[0]) {
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001384:	429a      	cmp	r2, r3
 8001386:	dbd2      	blt.n	800132e <main+0x1de>
  }

  printf("About to move...\r\n");
 8001388:	4849      	ldr	r0, [pc, #292]	; (80014b0 <main+0x360>)
 800138a:	f009 f837 	bl	800a3fc <puts>

  while (1) {
	  if (onMoveActionIndex < strategy->onMoveActionsLengths[curveIndex]
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800139c:	429a      	cmp	r2, r3
 800139e:	da1a      	bge.n	80013d6 <main+0x286>
              && !robot.waitingForOnMoveAction
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <main+0x32c>)
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d116      	bne.n	80013d6 <main+0x286>
			  && !robot.waitingForOnSiteAction) {
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <main+0x32c>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d112      	bne.n	80013d6 <main+0x286>
		  uint8_t action = strategy->onMoveActions[curveIndex][onMoveActionIndex];
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	695a      	ldr	r2, [r3, #20]
 80013b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	70bb      	strb	r3, [r7, #2]
		  serial_send(&action, 1, 6);
 80013c4:	1cbb      	adds	r3, r7, #2
 80013c6:	2206      	movs	r2, #6
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f007 fe8c 	bl	80090e8 <serial_send>
		  robot.waitingForOnMoveAction = true;
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <main+0x32c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  avoidance_update(t, strategy->directions[curveIndex]);
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013dc:	4413      	add	r3, r2
 80013de:	f993 3000 	ldrsb.w	r3, [r3]
 80013e2:	4618      	mov	r0, r3
 80013e4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80013e8:	f005 fc0e 	bl	8006c08 <avoidance_update>

	  if (avoidanceState == PATH_CLEAR && curveIndex < strategy->length) {
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <main+0x364>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d129      	bne.n	8001448 <main+0x2f8>
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013fa:	429a      	cmp	r2, r3
 80013fc:	da24      	bge.n	8001448 <main+0x2f8>
		  t = propulsion_followBezier(
				  strategy->path[curveIndex],
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8001408:	6818      	ldr	r0, [r3, #0]
				  strategy->directions[curveIndex],
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001410:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8001412:	f993 1000 	ldrsb.w	r1, [r3]
				  strategy->speeds[curveIndex],
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8001420:	edd3 7a00 	vldr	s15, [r3]
				  strategy->speeds[curveIndex+1],
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142a:	3301      	adds	r3, #1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8001430:	ed93 7a00 	vldr	s14, [r3]
 8001434:	2200      	movs	r2, #0
 8001436:	eef0 0a47 	vmov.f32	s1, s14
 800143a:	eeb0 0a67 	vmov.f32	s0, s15
 800143e:	f007 fcdb 	bl	8008df8 <propulsion_followBezier>
 8001442:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
 8001446:	e061      	b.n	800150c <main+0x3bc>
				  false
		  );
	  } else if (avoidanceState == PATH_OBSTRUCTED) {
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <main+0x364>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d135      	bne.n	80014bc <main+0x36c>
		  propulsion_setSpeeds(0, 0, 0);
 8001450:	ed9f 1a19 	vldr	s2, [pc, #100]	; 80014b8 <main+0x368>
 8001454:	eddf 0a18 	vldr	s1, [pc, #96]	; 80014b8 <main+0x368>
 8001458:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80014b8 <main+0x368>
 800145c:	f006 ffdc 	bl	8008418 <propulsion_setSpeeds>
 8001460:	e054      	b.n	800150c <main+0x3bc>
 8001462:	bf00      	nop
 8001464:	20000208 	.word	0x20000208
 8001468:	20000298 	.word	0x20000298
 800146c:	20000328 	.word	0x20000328
 8001470:	0800e7f0 	.word	0x0800e7f0
 8001474:	0800e814 	.word	0x0800e814
 8001478:	0800e81c 	.word	0x0800e81c
 800147c:	20000d38 	.word	0x20000d38
 8001480:	0800e838 	.word	0x0800e838
 8001484:	0800e850 	.word	0x0800e850
 8001488:	40020800 	.word	0x40020800
 800148c:	40020400 	.word	0x40020400
 8001490:	0800e868 	.word	0x0800e868
 8001494:	0800e884 	.word	0x0800e884
 8001498:	20000d90 	.word	0x20000d90
 800149c:	20000490 	.word	0x20000490
 80014a0:	20000d8c 	.word	0x20000d8c
 80014a4:	200005a0 	.word	0x200005a0
 80014a8:	0800e88c 	.word	0x0800e88c
 80014ac:	0800e8a4 	.word	0x0800e8a4
 80014b0:	0800e8ac 	.word	0x0800e8ac
 80014b4:	20000648 	.word	0x20000648
 80014b8:	00000000 	.word	0x00000000
	  } else if (avoidanceState == BACKTRACKING) {
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <main+0x468>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d123      	bne.n	800150c <main+0x3bc>
		  t = propulsion_followBezier(
				  strategy->path[curveIndex],
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80014ce:	6818      	ldr	r0, [r3, #0]
				  strategy->directions[curveIndex],
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80014d8:	f993 1000 	ldrsb.w	r1, [r3]
				  strategy->speeds[curveIndex],
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80014e6:	edd3 7a00 	vldr	s15, [r3]
				  strategy->speeds[curveIndex+1],
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f0:	3301      	adds	r3, #1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80014f6:	ed93 7a00 	vldr	s14, [r3]
 80014fa:	2201      	movs	r2, #1
 80014fc:	eef0 0a47 	vmov.f32	s1, s14
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	f007 fc78 	bl	8008df8 <propulsion_followBezier>
 8001508:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
				  true
		  );
	  }

	  if (t > 0.99 && !robot.waitingForOnMoveAction) {
 800150c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800150e:	f7ff f83b 	bl	8000588 <__aeabi_f2d>
 8001512:	a327      	add	r3, pc, #156	; (adr r3, 80015b0 <main+0x460>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff fb1e 	bl	8000b58 <__aeabi_dcmpgt>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d037      	beq.n	8001592 <main+0x442>
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <main+0x46c>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	2b00      	cmp	r3, #0
 8001528:	d133      	bne.n	8001592 <main+0x442>
	      curveIndex = (curveIndex + 1);// % strategy->length;
 800152a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152c:	3301      	adds	r3, #1
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
	      onSiteActionIndex = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
	      while (onSiteActionIndex < strategy->onSiteActionsLengths[curveIndex]) {
 8001534:	e022      	b.n	800157c <main+0x42c>
	    	  uint8_t action = strategy->onSiteActions[curveIndex][onSiteActionIndex];
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	707b      	strb	r3, [r7, #1]
	    	  serial_send(&action, 1, 6);
 800154a:	1c7b      	adds	r3, r7, #1
 800154c:	2206      	movs	r2, #6
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f007 fdc9 	bl	80090e8 <serial_send>
	    	  robot.waitingForOnSiteAction = true;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <main+0x46c>)
 8001558:	2201      	movs	r2, #1
 800155a:	621a      	str	r2, [r3, #32]

	    	  while (robot.waitingForOnSiteAction) {
 800155c:	e007      	b.n	800156e <main+0x41e>
	    		  propulsion_setSpeeds(0, 0, 0);
 800155e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80015c0 <main+0x470>
 8001562:	eddf 0a17 	vldr	s1, [pc, #92]	; 80015c0 <main+0x470>
 8001566:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80015c0 <main+0x470>
 800156a:	f006 ff55 	bl	8008418 <propulsion_setSpeeds>
	    	  while (robot.waitingForOnSiteAction) {
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <main+0x46c>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f3      	bne.n	800155e <main+0x40e>
	    	  }
	    	  onSiteActionIndex++;
 8001576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001578:	3301      	adds	r3, #1
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
	      while (onSiteActionIndex < strategy->onSiteActionsLengths[curveIndex]) {
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	699a      	ldr	r2, [r3, #24]
 8001580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800158a:	429a      	cmp	r2, r3
 800158c:	dbd3      	blt.n	8001536 <main+0x3e6>
	      }
	      onMoveActionIndex = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  if (curveIndex == strategy->length) {
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001598:	429a      	cmp	r2, r3
 800159a:	d000      	beq.n	800159e <main+0x44e>
	  if (onMoveActionIndex < strategy->onMoveActionsLengths[curveIndex]
 800159c:	e6f7      	b.n	800138e <main+0x23e>
		  break;
 800159e:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  propulsion_disableMotors();
 80015a0:	f006 ff2a 	bl	80083f8 <propulsion_disableMotors>
  printf("Finished.\r\n");
 80015a4:	4807      	ldr	r0, [pc, #28]	; (80015c4 <main+0x474>)
 80015a6:	f008 ff29 	bl	800a3fc <puts>

  while (1) {
 80015aa:	e7fe      	b.n	80015aa <main+0x45a>
 80015ac:	f3af 8000 	nop.w
 80015b0:	7ae147ae 	.word	0x7ae147ae
 80015b4:	3fefae14 	.word	0x3fefae14
 80015b8:	20000648 	.word	0x20000648
 80015bc:	20000d38 	.word	0x20000d38
 80015c0:	00000000 	.word	0x00000000
 80015c4:	0800e8c0 	.word	0x0800e8c0

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	; 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2234      	movs	r2, #52	; 0x34
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f008 fff0 	bl	800a5bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <SystemClock_Config+0xe0>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a2c      	ldr	r2, [pc, #176]	; (80016a8 <SystemClock_Config+0xe0>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <SystemClock_Config+0xe0>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <SystemClock_Config+0xe4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a26      	ldr	r2, [pc, #152]	; (80016ac <SystemClock_Config+0xe4>)
 8001612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <SystemClock_Config+0xe4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162c:	2310      	movs	r3, #16
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001634:	2300      	movs	r3, #0
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001638:	2310      	movs	r3, #16
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800163c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001640:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001646:	2302      	movs	r3, #2
 8001648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800164a:	2302      	movs	r3, #2
 800164c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fc06 	bl	8003e64 <HAL_RCC_OscConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800165e:	f000 f827 	bl	80016b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001662:	f002 f865 	bl	8003730 <HAL_PWREx_EnableOverDrive>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800166c:	f000 f820 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001670:	230f      	movs	r3, #15
 8001672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001674:	2302      	movs	r3, #2
 8001676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800167c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	2105      	movs	r1, #5
 800168e:	4618      	mov	r0, r3
 8001690:	f002 f89e 	bl	80037d0 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800169a:	f000 f809 	bl	80016b0 <Error_Handler>
  }
}
 800169e:	bf00      	nop
 80016a0:	3750      	adds	r7, #80	; 0x50
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("A runtime error occurred.\r\n");
 80016b8:	4801      	ldr	r0, [pc, #4]	; (80016c0 <Error_Handler+0x10>)
 80016ba:	f008 fe9f 	bl	800a3fc <puts>
  while (1) {
 80016be:	e7fe      	b.n	80016be <Error_Handler+0xe>
 80016c0:	0800e8cc 	.word	0x0800e8cc

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>
	...

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("A hard fault occurred.\r\n");
 8001720:	4801      	ldr	r0, [pc, #4]	; (8001728 <HardFault_Handler+0xc>)
 8001722:	f008 fe6b 	bl	800a3fc <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <HardFault_Handler+0xa>
 8001728:	0800e8e8 	.word	0x0800e8e8

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  printf("A memory management fault occurred.\r\n");
 8001730:	4801      	ldr	r0, [pc, #4]	; (8001738 <MemManage_Handler+0xc>)
 8001732:	f008 fe63 	bl	800a3fc <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <MemManage_Handler+0xa>
 8001738:	0800e900 	.word	0x0800e900

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <BusFault_Handler+0x4>

08001742 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <UsageFault_Handler+0x4>

08001748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001776:	f001 f8bd 	bl	80028f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA1_Stream2_IRQHandler+0x10>)
 8001786:	f001 fba3 	bl	8002ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200005e4 	.word	0x200005e4

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f003 f8f1 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000250 	.word	0x20000250

080017a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM4_IRQHandler+0x10>)
 80017ae:	f003 f8e7 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002e0 	.word	0x200002e0

080017bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <USART1_IRQHandler+0x10>)
 80017c2:	f004 f8d3 	bl	800596c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000518 	.word	0x20000518

080017d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  //propulsion_updatePosition(0.01);
  //lidar_incrementTime(10);
  odometry_updatePosition();
 80017d4:	f006 fc1c 	bl	8008010 <odometry_updatePosition>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM5_IRQHandler+0x14>)
 80017da:	f003 f8d1 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000328 	.word	0x20000328

080017e8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <UART4_IRQHandler+0x10>)
 80017ee:	f004 f8bd 	bl	800596c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000490 	.word	0x20000490

080017fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <UART5_IRQHandler+0x10>)
 8001802:	f004 f8b3 	bl	800596c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200004d4 	.word	0x200004d4

08001810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM6_DAC_IRQHandler+0x10>)
 8001816:	f003 f8b3 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000370 	.word	0x20000370

08001824 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM7_IRQHandler+0x10>)
 800182a:	f003 f8a9 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200003b8 	.word	0x200003b8

08001838 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <USART6_IRQHandler+0x10>)
 800183e:	f004 f895 	bl	800596c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200005a0 	.word	0x200005a0

0800184c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	return 1;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_kill>:

int _kill(int pid, int sig)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001866:	f008 ff0b 	bl	800a680 <__errno>
 800186a:	4603      	mov	r3, r0
 800186c:	2216      	movs	r2, #22
 800186e:	601a      	str	r2, [r3, #0]
	return -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_exit>:

void _exit (int status)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ffe7 	bl	800185c <_kill>
	while (1) {}		/* Make sure we hang here */
 800188e:	e7fe      	b.n	800188e <_exit+0x12>

08001890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
	}

return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	return -1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f2:	605a      	str	r2, [r3, #4]
	return 0;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_isatty>:

int _isatty(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
	return 1;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f008 fe8c 	bl	800a680 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20020000 	.word	0x20020000
 8001994:	00000400 	.word	0x00000400
 8001998:	20000204 	.word	0x20000204
 800199c:	20001aa0 	.word	0x20001aa0

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f008 fdf2 	bl	800a5bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <MX_TIM1_Init+0xa8>)
 80019e2:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <MX_TIM1_Init+0xac>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <MX_TIM1_Init+0xa8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <MX_TIM1_Init+0xa8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_TIM1_Init+0xa8>)
 80019f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <MX_TIM1_Init+0xa8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_TIM1_Init+0xa8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MX_TIM1_Init+0xa8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a14:	2301      	movs	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a1c:	230a      	movs	r3, #10
 8001a1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a24:	2301      	movs	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <MX_TIM1_Init+0xa8>)
 8001a38:	f002 fefc 	bl	8004834 <HAL_TIM_Encoder_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a42:	f7ff fe35 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_TIM1_Init+0xa8>)
 8001a54:	f003 fd68 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a5e:	f7ff fe27 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	3730      	adds	r7, #48	; 0x30
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000208 	.word	0x20000208
 8001a70:	40010000 	.word	0x40010000

08001a74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <MX_TIM2_Init+0x98>)
 8001a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_TIM2_Init+0x98>)
 8001a9a:	f640 227e 	movw	r2, #2686	; 0xa7e
 8001a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_TIM2_Init+0x98>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_TIM2_Init+0x98>)
 8001aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_TIM2_Init+0x98>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <MX_TIM2_Init+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aba:	4814      	ldr	r0, [pc, #80]	; (8001b0c <MX_TIM2_Init+0x98>)
 8001abc:	f002 fc70 	bl	80043a0 <HAL_TIM_Base_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ac6:	f7ff fdf3 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ace:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad0:	f107 0308 	add.w	r3, r7, #8
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_TIM2_Init+0x98>)
 8001ad8:	f003 f91c 	bl	8004d14 <HAL_TIM_ConfigClockSource>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ae2:	f7ff fde5 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aee:	463b      	mov	r3, r7
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_TIM2_Init+0x98>)
 8001af4:	f003 fd18 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001afe:	f7ff fdd7 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000250 	.word	0x20000250

08001b10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f008 fd4c 	bl	800a5bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <MX_TIM3_Init+0xa4>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b52:	2303      	movs	r3, #3
 8001b54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b76:	f107 030c 	add.w	r3, r7, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b7e:	f002 fe59 	bl	8004834 <HAL_TIM_Encoder_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b88:	f7ff fd92 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_TIM3_Init+0xa0>)
 8001b9a:	f003 fcc5 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ba4:	f7ff fd84 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	; 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000298 	.word	0x20000298
 8001bb4:	40000400 	.word	0x40000400

08001bb8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <MX_TIM4_Init+0x90>)
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <MX_TIM4_Init+0x94>)
 8001bd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <MX_TIM4_Init+0x90>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <MX_TIM4_Init+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <MX_TIM4_Init+0x90>)
 8001be8:	225a      	movs	r2, #90	; 0x5a
 8001bea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <MX_TIM4_Init+0x90>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_TIM4_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bf8:	4813      	ldr	r0, [pc, #76]	; (8001c48 <MX_TIM4_Init+0x90>)
 8001bfa:	f002 fbd1 	bl	80043a0 <HAL_TIM_Base_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001c04:	f7ff fd54 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c0e:	f107 0308 	add.w	r3, r7, #8
 8001c12:	4619      	mov	r1, r3
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <MX_TIM4_Init+0x90>)
 8001c16:	f003 f87d 	bl	8004d14 <HAL_TIM_ConfigClockSource>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001c20:	f7ff fd46 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_TIM4_Init+0x90>)
 8001c32:	f003 fc79 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001c3c:	f7ff fd38 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200002e0 	.word	0x200002e0
 8001c4c:	40000800 	.word	0x40000800

08001c50 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <MX_TIM5_Init+0x90>)
 8001c6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <MX_TIM5_Init+0x94>)
 8001c70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_TIM5_Init+0x90>)
 8001c74:	2209      	movs	r2, #9
 8001c76:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_TIM5_Init+0x90>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9000000*ODOMETRY_REFRESH;
 8001c7e:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <MX_TIM5_Init+0x90>)
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <MX_TIM5_Init+0x98>)
 8001c82:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <MX_TIM5_Init+0x90>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_TIM5_Init+0x90>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c90:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <MX_TIM5_Init+0x90>)
 8001c92:	f002 fb85 	bl	80043a0 <HAL_TIM_Base_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8001c9c:	f7ff fd08 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4619      	mov	r1, r3
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <MX_TIM5_Init+0x90>)
 8001cae:	f003 f831 	bl	8004d14 <HAL_TIM_ConfigClockSource>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8001cb8:	f7ff fcfa 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_TIM5_Init+0x90>)
 8001cca:	f003 fc2d 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8001cd4:	f7ff fcec 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000328 	.word	0x20000328
 8001ce4:	40000c00 	.word	0x40000c00
 8001ce8:	00015f90 	.word	0x00015f90

08001cec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_TIM6_Init+0x64>)
 8001cfc:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <MX_TIM6_Init+0x68>)
 8001cfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <MX_TIM6_Init+0x64>)
 8001d02:	f242 3227 	movw	r2, #8999	; 0x2327
 8001d06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_TIM6_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <MX_TIM6_Init+0x64>)
 8001d10:	2263      	movs	r2, #99	; 0x63
 8001d12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_TIM6_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d1a:	480d      	ldr	r0, [pc, #52]	; (8001d50 <MX_TIM6_Init+0x64>)
 8001d1c:	f002 fb40 	bl	80043a0 <HAL_TIM_Base_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d26:	f7ff fcc3 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	4619      	mov	r1, r3
 8001d36:	4806      	ldr	r0, [pc, #24]	; (8001d50 <MX_TIM6_Init+0x64>)
 8001d38:	f003 fbf6 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d42:	f7ff fcb5 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000370 	.word	0x20000370
 8001d54:	40001000 	.word	0x40001000

08001d58 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_TIM7_Init+0x64>)
 8001d68:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <MX_TIM7_Init+0x68>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <MX_TIM7_Init+0x64>)
 8001d6e:	f242 3227 	movw	r2, #8999	; 0x2327
 8001d72:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <MX_TIM7_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_TIM7_Init+0x64>)
 8001d7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d80:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <MX_TIM7_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d88:	480c      	ldr	r0, [pc, #48]	; (8001dbc <MX_TIM7_Init+0x64>)
 8001d8a:	f002 fb09 	bl	80043a0 <HAL_TIM_Base_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001d94:	f7ff fc8c 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001da0:	463b      	mov	r3, r7
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_TIM7_Init+0x64>)
 8001da6:	f003 fbbf 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001db0:	f7ff fc7e 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200003b8 	.word	0x200003b8
 8001dc0:	40001400 	.word	0x40001400

08001dc4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b096      	sub	sp, #88	; 0x58
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]
 8001df2:	615a      	str	r2, [r3, #20]
 8001df4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2220      	movs	r2, #32
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f008 fbdd 	bl	800a5bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e02:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e04:	4a3e      	ldr	r2, [pc, #248]	; (8001f00 <MX_TIM8_Init+0x13c>)
 8001e06:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8001e08:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e0a:	22b3      	movs	r2, #179	; 0xb3
 8001e0c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001e14:	4b39      	ldr	r3, [pc, #228]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e1a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b37      	ldr	r3, [pc, #220]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e28:	4b34      	ldr	r3, [pc, #208]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e2e:	4833      	ldr	r0, [pc, #204]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e30:	f002 fab6 	bl	80043a0 <HAL_TIM_Base_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001e3a:	f7ff fc39 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e48:	4619      	mov	r1, r3
 8001e4a:	482c      	ldr	r0, [pc, #176]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e4c:	f002 ff62 	bl	8004d14 <HAL_TIM_ConfigClockSource>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001e56:	f7ff fc2b 	bl	80016b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e5a:	4828      	ldr	r0, [pc, #160]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e5c:	f002 fbc8 	bl	80045f0 <HAL_TIM_PWM_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001e66:	f7ff fc23 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e76:	4619      	mov	r1, r3
 8001e78:	4820      	ldr	r0, [pc, #128]	; (8001efc <MX_TIM8_Init+0x138>)
 8001e7a:	f003 fb55 	bl	8005528 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001e84:	f7ff fc14 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e88:	2360      	movs	r3, #96	; 0x60
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001e8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4814      	ldr	r0, [pc, #80]	; (8001efc <MX_TIM8_Init+0x138>)
 8001eac:	f002 fe70 	bl	8004b90 <HAL_TIM_PWM_ConfigChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001eb6:	f7ff fbfb 	bl	80016b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	4619      	mov	r1, r3
 8001edc:	4807      	ldr	r0, [pc, #28]	; (8001efc <MX_TIM8_Init+0x138>)
 8001ede:	f003 fb9f 	bl	8005620 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001ee8:	f7ff fbe2 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001eec:	4803      	ldr	r0, [pc, #12]	; (8001efc <MX_TIM8_Init+0x138>)
 8001eee:	f000 f99d 	bl	800222c <HAL_TIM_MspPostInit>

}
 8001ef2:	bf00      	nop
 8001ef4:	3758      	adds	r7, #88	; 0x58
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000400 	.word	0x20000400
 8001f00:	40010400 	.word	0x40010400

08001f04 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
 8001f18:	615a      	str	r2, [r3, #20]
 8001f1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f1e:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <MX_TIM11_Init+0x98>)
 8001f20:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f24:	22b3      	movs	r2, #179	; 0xb3
 8001f26:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f34:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f42:	4815      	ldr	r0, [pc, #84]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f44:	f002 fa2c 	bl	80043a0 <HAL_TIM_Base_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001f4e:	f7ff fbaf 	bl	80016b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001f52:	4811      	ldr	r0, [pc, #68]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f54:	f002 fb4c 	bl	80045f0 <HAL_TIM_PWM_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001f5e:	f7ff fba7 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f62:	2360      	movs	r3, #96	; 0x60
 8001f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4807      	ldr	r0, [pc, #28]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f7a:	f002 fe09 	bl	8004b90 <HAL_TIM_PWM_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001f84:	f7ff fb94 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <MX_TIM11_Init+0x94>)
 8001f8a:	f000 f94f 	bl	800222c <HAL_TIM_MspPostInit>

}
 8001f8e:	bf00      	nop
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000448 	.word	0x20000448
 8001f9c:	40014800 	.word	0x40014800

08001fa0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a32      	ldr	r2, [pc, #200]	; (8002088 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d12d      	bne.n	800201e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a30      	ldr	r2, [pc, #192]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a29      	ldr	r2, [pc, #164]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = R_ENCODER_A_Pin|R_ENCODER_B_Pin;
 8001ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800200c:	2301      	movs	r3, #1
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	481e      	ldr	r0, [pc, #120]	; (8002090 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002018:	f001 f9c4 	bl	80033a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800201c:	e030      	b.n	8002080 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d12b      	bne.n	8002080 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a16      	ldr	r2, [pc, #88]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_TIM_Encoder_MspInit+0xec>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_ENCODER_A_Pin|L_ENCODER_B_Pin;
 8002060:	23c0      	movs	r3, #192	; 0xc0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002070:	2302      	movs	r3, #2
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <HAL_TIM_Encoder_MspInit+0xf0>)
 800207c:	f001 f992 	bl	80033a4 <HAL_GPIO_Init>
}
 8002080:	bf00      	nop
 8002082:	3730      	adds	r7, #48	; 0x30
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40010000 	.word	0x40010000
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000
 8002094:	40000400 	.word	0x40000400

08002098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a8:	d116      	bne.n	80020d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	4b58      	ldr	r3, [pc, #352]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a57      	ldr	r2, [pc, #348]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b55      	ldr	r3, [pc, #340]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	201c      	movs	r0, #28
 80020cc:	f000 fd31 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d0:	201c      	movs	r0, #28
 80020d2:	f000 fd4a 	bl	8002b6a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80020d6:	e096      	b.n	8002206 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a4d      	ldr	r2, [pc, #308]	; (8002214 <HAL_TIM_Base_MspInit+0x17c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d116      	bne.n	8002110 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
 80020e6:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	201e      	movs	r0, #30
 8002104:	f000 fd15 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002108:	201e      	movs	r0, #30
 800210a:	f000 fd2e 	bl	8002b6a <HAL_NVIC_EnableIRQ>
}
 800210e:	e07a      	b.n	8002206 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a40      	ldr	r2, [pc, #256]	; (8002218 <HAL_TIM_Base_MspInit+0x180>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d116      	bne.n	8002148 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a3b      	ldr	r2, [pc, #236]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	2032      	movs	r0, #50	; 0x32
 800213c:	f000 fcf9 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002140:	2032      	movs	r0, #50	; 0x32
 8002142:	f000 fd12 	bl	8002b6a <HAL_NVIC_EnableIRQ>
}
 8002146:	e05e      	b.n	8002206 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a33      	ldr	r2, [pc, #204]	; (800221c <HAL_TIM_Base_MspInit+0x184>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d116      	bne.n	8002180 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	2036      	movs	r0, #54	; 0x36
 8002174:	f000 fcdd 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002178:	2036      	movs	r0, #54	; 0x36
 800217a:	f000 fcf6 	bl	8002b6a <HAL_NVIC_EnableIRQ>
}
 800217e:	e042      	b.n	8002206 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM7)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a26      	ldr	r2, [pc, #152]	; (8002220 <HAL_TIM_Base_MspInit+0x188>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d116      	bne.n	80021b8 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 8002194:	f043 0320 	orr.w	r3, r3, #32
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2102      	movs	r1, #2
 80021aa:	2037      	movs	r0, #55	; 0x37
 80021ac:	f000 fcc1 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021b0:	2037      	movs	r0, #55	; 0x37
 80021b2:	f000 fcda 	bl	8002b6a <HAL_NVIC_EnableIRQ>
}
 80021b6:	e026      	b.n	8002206 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM8)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_TIM_Base_MspInit+0x18c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
}
 80021de:	e012      	b.n	8002206 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM11)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_TIM_Base_MspInit+0x190>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10d      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a07      	ldr	r2, [pc, #28]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_TIM_Base_MspInit+0x178>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40000800 	.word	0x40000800
 8002218:	40000c00 	.word	0x40000c00
 800221c:	40001000 	.word	0x40001000
 8002220:	40001400 	.word	0x40001400
 8002224:	40010400 	.word	0x40010400
 8002228:	40014800 	.word	0x40014800

0800222c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <HAL_TIM_MspPostInit+0xb4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d11f      	bne.n	800228e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_TIM_MspPostInit+0xb8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <HAL_TIM_MspPostInit+0xb8>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <HAL_TIM_MspPostInit+0xb8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800226a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800227c:	2303      	movs	r3, #3
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4818      	ldr	r0, [pc, #96]	; (80022e8 <HAL_TIM_MspPostInit+0xbc>)
 8002288:	f001 f88c 	bl	80033a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800228c:	e023      	b.n	80022d6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_TIM_MspPostInit+0xc0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d11e      	bne.n	80022d6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_TIM_MspPostInit+0xb8>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_TIM_MspPostInit+0xb8>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	6313      	str	r3, [r2, #48]	; 0x30
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_TIM_MspPostInit+0xb8>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80022c6:	2303      	movs	r3, #3
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	4807      	ldr	r0, [pc, #28]	; (80022f0 <HAL_TIM_MspPostInit+0xc4>)
 80022d2:	f001 f867 	bl	80033a4 <HAL_GPIO_Init>
}
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	; 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40010400 	.word	0x40010400
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40014800 	.word	0x40014800
 80022f0:	40020400 	.word	0x40020400

080022f4 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <MX_UART4_Init+0x4c>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <MX_UART4_Init+0x50>)
 80022fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <MX_UART4_Init+0x4c>)
 8002300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002304:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <MX_UART4_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_UART4_Init+0x4c>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <MX_UART4_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <MX_UART4_Init+0x4c>)
 800231a:	220c      	movs	r2, #12
 800231c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <MX_UART4_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <MX_UART4_Init+0x4c>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <MX_UART4_Init+0x4c>)
 800232c:	f003 f9de 	bl	80056ec <HAL_UART_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002336:	f7ff f9bb 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000490 	.word	0x20000490
 8002344:	40004c00 	.word	0x40004c00

08002348 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_UART5_Init+0x4c>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <MX_UART5_Init+0x50>)
 8002350:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <MX_UART5_Init+0x4c>)
 8002354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002358:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_UART5_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_UART5_Init+0x4c>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <MX_UART5_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_UART5_Init+0x4c>)
 800236e:	220c      	movs	r2, #12
 8002370:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <MX_UART5_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_UART5_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_UART5_Init+0x4c>)
 8002380:	f003 f9b4 	bl	80056ec <HAL_UART_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800238a:	f7ff f991 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200004d4 	.word	0x200004d4
 8002398:	40005000 	.word	0x40005000

0800239c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023a0:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <MX_USART1_UART_Init+0x48>)
 80023a2:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <MX_USART1_UART_Init+0x4c>)
 80023a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <MX_USART1_UART_Init+0x48>)
 80023a8:	4a10      	ldr	r2, [pc, #64]	; (80023ec <MX_USART1_UART_Init+0x50>)
 80023aa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <MX_USART1_UART_Init+0x48>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <MX_USART1_UART_Init+0x48>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <MX_USART1_UART_Init+0x48>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <MX_USART1_UART_Init+0x48>)
 80023c0:	220c      	movs	r2, #12
 80023c2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c4:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <MX_USART1_UART_Init+0x48>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <MX_USART1_UART_Init+0x48>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023d0:	4804      	ldr	r0, [pc, #16]	; (80023e4 <MX_USART1_UART_Init+0x48>)
 80023d2:	f003 f98b 	bl	80056ec <HAL_UART_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80023dc:	f7ff f968 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000518 	.word	0x20000518
 80023e8:	40011000 	.word	0x40011000
 80023ec:	001e8480 	.word	0x001e8480

080023f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_USART2_UART_Init+0x4c>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <MX_USART2_UART_Init+0x50>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <MX_USART2_UART_Init+0x4c>)
 80023fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_USART2_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_USART2_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_USART2_UART_Init+0x4c>)
 8002428:	f003 f960 	bl	80056ec <HAL_UART_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002432:	f7ff f93d 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000055c 	.word	0x2000055c
 8002440:	40004400 	.word	0x40004400

08002444 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_USART6_UART_Init+0x4c>)
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <MX_USART6_UART_Init+0x50>)
 800244c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <MX_USART6_UART_Init+0x4c>)
 8002450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002454:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <MX_USART6_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <MX_USART6_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <MX_USART6_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <MX_USART6_UART_Init+0x4c>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <MX_USART6_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <MX_USART6_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_USART6_UART_Init+0x4c>)
 800247c:	f003 f936 	bl	80056ec <HAL_UART_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002486:	f7ff f913 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200005a0 	.word	0x200005a0
 8002494:	40011400 	.word	0x40011400

08002498 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b094      	sub	sp, #80	; 0x50
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4aa4      	ldr	r2, [pc, #656]	; (8002748 <HAL_UART_MspInit+0x2b0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d162      	bne.n	8002580 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024be:	4ba3      	ldr	r3, [pc, #652]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4aa2      	ldr	r2, [pc, #648]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80024c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
 80024da:	4b9c      	ldr	r3, [pc, #624]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a9b      	ldr	r2, [pc, #620]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b99      	ldr	r3, [pc, #612]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024f2:	2303      	movs	r3, #3
 80024f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002502:	2308      	movs	r3, #8
 8002504:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800250a:	4619      	mov	r1, r3
 800250c:	4890      	ldr	r0, [pc, #576]	; (8002750 <HAL_UART_MspInit+0x2b8>)
 800250e:	f000 ff49 	bl	80033a4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002512:	4b90      	ldr	r3, [pc, #576]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 8002514:	4a90      	ldr	r2, [pc, #576]	; (8002758 <HAL_UART_MspInit+0x2c0>)
 8002516:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002518:	4b8e      	ldr	r3, [pc, #568]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 800251a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800251e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002520:	4b8c      	ldr	r3, [pc, #560]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002526:	4b8b      	ldr	r3, [pc, #556]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 8002528:	2200      	movs	r2, #0
 800252a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800252c:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 800252e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002532:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002534:	4b87      	ldr	r3, [pc, #540]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 8002536:	2200      	movs	r2, #0
 8002538:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800253a:	4b86      	ldr	r3, [pc, #536]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002540:	4b84      	ldr	r3, [pc, #528]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002546:	4b83      	ldr	r3, [pc, #524]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800254c:	4b81      	ldr	r3, [pc, #516]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 800254e:	2200      	movs	r2, #0
 8002550:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002552:	4880      	ldr	r0, [pc, #512]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 8002554:	f000 fb24 	bl	8002ba0 <HAL_DMA_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800255e:	f7ff f8a7 	bl	80016b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a7b      	ldr	r2, [pc, #492]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 8002566:	639a      	str	r2, [r3, #56]	; 0x38
 8002568:	4a7a      	ldr	r2, [pc, #488]	; (8002754 <HAL_UART_MspInit+0x2bc>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	2034      	movs	r0, #52	; 0x34
 8002574:	f000 fadd 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002578:	2034      	movs	r0, #52	; 0x34
 800257a:	f000 faf6 	bl	8002b6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800257e:	e132      	b.n	80027e6 <HAL_UART_MspInit+0x34e>
  else if(uartHandle->Instance==UART5)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a75      	ldr	r2, [pc, #468]	; (800275c <HAL_UART_MspInit+0x2c4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d153      	bne.n	8002632 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_UART5_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
 800258e:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_UART_MspInit+0x2b4>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a6e      	ldr	r2, [pc, #440]	; (800274c <HAL_UART_MspInit+0x2b4>)
 8002594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b6c      	ldr	r3, [pc, #432]	; (800274c <HAL_UART_MspInit+0x2b4>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025aa:	4b68      	ldr	r3, [pc, #416]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a67      	ldr	r2, [pc, #412]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c6:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a60      	ldr	r2, [pc, #384]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80025cc:	f043 0308 	orr.w	r3, r3, #8
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80025f0:	2308      	movs	r3, #8
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025f8:	4619      	mov	r1, r3
 80025fa:	4859      	ldr	r0, [pc, #356]	; (8002760 <HAL_UART_MspInit+0x2c8>)
 80025fc:	f000 fed2 	bl	80033a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002600:	2304      	movs	r3, #4
 8002602:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260c:	2303      	movs	r3, #3
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002610:	2308      	movs	r3, #8
 8002612:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002614:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002618:	4619      	mov	r1, r3
 800261a:	4852      	ldr	r0, [pc, #328]	; (8002764 <HAL_UART_MspInit+0x2cc>)
 800261c:	f000 fec2 	bl	80033a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	2035      	movs	r0, #53	; 0x35
 8002626:	f000 fa84 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800262a:	2035      	movs	r0, #53	; 0x35
 800262c:	f000 fa9d 	bl	8002b6a <HAL_NVIC_EnableIRQ>
}
 8002630:	e0d9      	b.n	80027e6 <HAL_UART_MspInit+0x34e>
  else if(uartHandle->Instance==USART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a4c      	ldr	r2, [pc, #304]	; (8002768 <HAL_UART_MspInit+0x2d0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d153      	bne.n	80026e4 <HAL_UART_MspInit+0x24c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
 8002640:	4b42      	ldr	r3, [pc, #264]	; (800274c <HAL_UART_MspInit+0x2b4>)
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	4a41      	ldr	r2, [pc, #260]	; (800274c <HAL_UART_MspInit+0x2b4>)
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	6453      	str	r3, [r2, #68]	; 0x44
 800264c:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_UART_MspInit+0x2b4>)
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_UART_MspInit+0x2b4>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	4a3a      	ldr	r2, [pc, #232]	; (800274c <HAL_UART_MspInit+0x2b4>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6313      	str	r3, [r2, #48]	; 0x30
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_UART_MspInit+0x2b4>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	4b34      	ldr	r3, [pc, #208]	; (800274c <HAL_UART_MspInit+0x2b4>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4a33      	ldr	r2, [pc, #204]	; (800274c <HAL_UART_MspInit+0x2b4>)
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	6313      	str	r3, [r2, #48]	; 0x30
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_UART_MspInit+0x2b4>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026a2:	2307      	movs	r3, #7
 80026a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026aa:	4619      	mov	r1, r3
 80026ac:	4828      	ldr	r0, [pc, #160]	; (8002750 <HAL_UART_MspInit+0x2b8>)
 80026ae:	f000 fe79 	bl	80033a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026b2:	2340      	movs	r3, #64	; 0x40
 80026b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026c2:	2307      	movs	r3, #7
 80026c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026ca:	4619      	mov	r1, r3
 80026cc:	4827      	ldr	r0, [pc, #156]	; (800276c <HAL_UART_MspInit+0x2d4>)
 80026ce:	f000 fe69 	bl	80033a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	2025      	movs	r0, #37	; 0x25
 80026d8:	f000 fa2b 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026dc:	2025      	movs	r0, #37	; 0x25
 80026de:	f000 fa44 	bl	8002b6a <HAL_NVIC_EnableIRQ>
}
 80026e2:	e080      	b.n	80027e6 <HAL_UART_MspInit+0x34e>
  else if(uartHandle->Instance==USART2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_UART_MspInit+0x2d8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d142      	bne.n	8002774 <HAL_UART_MspInit+0x2dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_UART_MspInit+0x2b4>)
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_UART_MspInit+0x2b4>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_UART_MspInit+0x2b4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <HAL_UART_MspInit+0x2b4>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_UART_MspInit+0x2b4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002726:	230c      	movs	r3, #12
 8002728:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002736:	2307      	movs	r3, #7
 8002738:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800273e:	4619      	mov	r1, r3
 8002740:	4803      	ldr	r0, [pc, #12]	; (8002750 <HAL_UART_MspInit+0x2b8>)
 8002742:	f000 fe2f 	bl	80033a4 <HAL_GPIO_Init>
}
 8002746:	e04e      	b.n	80027e6 <HAL_UART_MspInit+0x34e>
 8002748:	40004c00 	.word	0x40004c00
 800274c:	40023800 	.word	0x40023800
 8002750:	40020000 	.word	0x40020000
 8002754:	200005e4 	.word	0x200005e4
 8002758:	40026040 	.word	0x40026040
 800275c:	40005000 	.word	0x40005000
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40011000 	.word	0x40011000
 800276c:	40020400 	.word	0x40020400
 8002770:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART6)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_UART_MspInit+0x358>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d133      	bne.n	80027e6 <HAL_UART_MspInit+0x34e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <HAL_UART_MspInit+0x35c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <HAL_UART_MspInit+0x35c>)
 8002788:	f043 0320 	orr.w	r3, r3, #32
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_UART_MspInit+0x35c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_UART_MspInit+0x35c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_UART_MspInit+0x35c>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_UART_MspInit+0x35c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027b6:	23c0      	movs	r3, #192	; 0xc0
 80027b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027c6:	2308      	movs	r3, #8
 80027c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027ce:	4619      	mov	r1, r3
 80027d0:	4809      	ldr	r0, [pc, #36]	; (80027f8 <HAL_UART_MspInit+0x360>)
 80027d2:	f000 fde7 	bl	80033a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2047      	movs	r0, #71	; 0x47
 80027dc:	f000 f9a9 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027e0:	2047      	movs	r0, #71	; 0x47
 80027e2:	f000 f9c2 	bl	8002b6a <HAL_NVIC_EnableIRQ>
}
 80027e6:	bf00      	nop
 80027e8:	3750      	adds	r7, #80	; 0x50
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40011400 	.word	0x40011400
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020800 	.word	0x40020800

080027fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002834 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002800:	480d      	ldr	r0, [pc, #52]	; (8002838 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002802:	490e      	ldr	r1, [pc, #56]	; (800283c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002818:	4c0b      	ldr	r4, [pc, #44]	; (8002848 <LoopFillZerobss+0x26>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002826:	f7ff f8bb 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800282a:	f007 ff2f 	bl	800a68c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282e:	f7fe fc8f 	bl	8001150 <main>
  bx  lr    
 8002832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800283c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002840:	0800f068 	.word	0x0800f068
  ldr r2, =_sbss
 8002844:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002848:	20001aa0 	.word	0x20001aa0

0800284c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC_IRQHandler>
	...

08002850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_Init+0x40>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <HAL_Init+0x40>)
 800285a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_Init+0x40>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_Init+0x40>)
 8002866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800286a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800286c:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_Init+0x40>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a07      	ldr	r2, [pc, #28]	; (8002890 <HAL_Init+0x40>)
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002878:	2003      	movs	r0, #3
 800287a:	f000 f94f 	bl	8002b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800287e:	2000      	movs	r0, #0
 8002880:	f000 f808 	bl	8002894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002884:	f7fe ff1e 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023c00 	.word	0x40023c00

08002894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_InitTick+0x54>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x58>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f967 	bl	8002b86 <HAL_SYSTICK_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e00e      	b.n	80028e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b0f      	cmp	r3, #15
 80028c6:	d80a      	bhi.n	80028de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c8:	2200      	movs	r2, #0
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f000 f92f 	bl	8002b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d4:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <HAL_InitTick+0x5c>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000000 	.word	0x20000000
 80028ec:	20000008 	.word	0x20000008
 80028f0:	20000004 	.word	0x20000004

080028f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_IncTick+0x20>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x24>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4413      	add	r3, r2
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_IncTick+0x24>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000008 	.word	0x20000008
 8002918:	20000644 	.word	0x20000644

0800291c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_GetTick+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000644 	.word	0x20000644

08002934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7ff ffee 	bl	800291c <HAL_GetTick>
 8002940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d005      	beq.n	800295a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_Delay+0x44>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4413      	add	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800295a:	bf00      	nop
 800295c:	f7ff ffde 	bl	800291c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	429a      	cmp	r2, r3
 800296a:	d8f7      	bhi.n	800295c <HAL_Delay+0x28>
  {
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000008 	.word	0x20000008

0800297c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002998:	4013      	ands	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <__NVIC_GetPriorityGrouping+0x18>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	f003 0307 	and.w	r3, r3, #7
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	db0b      	blt.n	8002a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	4907      	ldr	r1, [pc, #28]	; (8002a18 <__NVIC_EnableIRQ+0x38>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2001      	movs	r0, #1
 8002a02:	fa00 f202 	lsl.w	r2, r0, r2
 8002a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000e100 	.word	0xe000e100

08002a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	db0a      	blt.n	8002a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	490c      	ldr	r1, [pc, #48]	; (8002a68 <__NVIC_SetPriority+0x4c>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	0112      	lsls	r2, r2, #4
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a44:	e00a      	b.n	8002a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4908      	ldr	r1, [pc, #32]	; (8002a6c <__NVIC_SetPriority+0x50>)
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	3b04      	subs	r3, #4
 8002a54:	0112      	lsls	r2, r2, #4
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	440b      	add	r3, r1
 8002a5a:	761a      	strb	r2, [r3, #24]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000e100 	.word	0xe000e100
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f1c3 0307 	rsb	r3, r3, #7
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	bf28      	it	cs
 8002a8e:	2304      	movcs	r3, #4
 8002a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3304      	adds	r3, #4
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d902      	bls.n	8002aa0 <NVIC_EncodePriority+0x30>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3b03      	subs	r3, #3
 8002a9e:	e000      	b.n	8002aa2 <NVIC_EncodePriority+0x32>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	43d9      	mvns	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	4313      	orrs	r3, r2
         );
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3724      	adds	r7, #36	; 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae8:	d301      	bcc.n	8002aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00f      	b.n	8002b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <SysTick_Config+0x40>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af6:	210f      	movs	r1, #15
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295
 8002afc:	f7ff ff8e 	bl	8002a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <SysTick_Config+0x40>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b06:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <SysTick_Config+0x40>)
 8002b08:	2207      	movs	r2, #7
 8002b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff29 	bl	800297c <__NVIC_SetPriorityGrouping>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b44:	f7ff ff3e 	bl	80029c4 <__NVIC_GetPriorityGrouping>
 8002b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff8e 	bl	8002a70 <NVIC_EncodePriority>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff5d 	bl	8002a1c <__NVIC_SetPriority>
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff31 	bl	80029e0 <__NVIC_EnableIRQ>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ffa2 	bl	8002ad8 <SysTick_Config>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff feb6 	bl	800291c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e099      	b.n	8002cf0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bdc:	e00f      	b.n	8002bfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bde:	f7ff fe9d 	bl	800291c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d908      	bls.n	8002bfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e078      	b.n	8002cf0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1e8      	bne.n	8002bde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_DMA_Init+0x158>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d107      	bne.n	8002c68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4313      	orrs	r3, r2
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f023 0307 	bic.w	r3, r3, #7
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d117      	bne.n	8002cc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fb01 	bl	80032ac <DMA_CheckFifoParam>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2240      	movs	r2, #64	; 0x40
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e016      	b.n	8002cf0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fab8 	bl	8003240 <DMA_CalcBaseAndBitshift>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	223f      	movs	r2, #63	; 0x3f
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	f010803f 	.word	0xf010803f

08002cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_DMA_Start_IT+0x26>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e040      	b.n	8002da4 <HAL_DMA_Start_IT+0xa8>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d12f      	bne.n	8002d96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fa4a 	bl	80031e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	223f      	movs	r2, #63	; 0x3f
 8002d56:	409a      	lsls	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0216 	orr.w	r2, r2, #22
 8002d6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0208 	orr.w	r2, r2, #8
 8002d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e005      	b.n	8002da2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dba:	f7ff fdaf 	bl	800291c <HAL_GetTick>
 8002dbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d008      	beq.n	8002dde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e052      	b.n	8002e84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0216 	bic.w	r2, r2, #22
 8002dec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <HAL_DMA_Abort+0x62>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0208 	bic.w	r2, r2, #8
 8002e1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2e:	e013      	b.n	8002e58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e30:	f7ff fd74 	bl	800291c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d90c      	bls.n	8002e58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2203      	movs	r2, #3
 8002e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e015      	b.n	8002e84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e4      	bne.n	8002e30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	223f      	movs	r2, #63	; 0x3f
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d004      	beq.n	8002eaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e00c      	b.n	8002ec4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002edc:	4b8e      	ldr	r3, [pc, #568]	; (8003118 <HAL_DMA_IRQHandler+0x248>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a8e      	ldr	r2, [pc, #568]	; (800311c <HAL_DMA_IRQHandler+0x24c>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	2208      	movs	r2, #8
 8002efc:	409a      	lsls	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01a      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	2208      	movs	r2, #8
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	2201      	movs	r2, #1
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d012      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5e:	2201      	movs	r2, #1
 8002f60:	409a      	lsls	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f043 0202 	orr.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2204      	movs	r2, #4
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d012      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2204      	movs	r2, #4
 8002f96:	409a      	lsls	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	2210      	movs	r2, #16
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d043      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d03c      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	2210      	movs	r2, #16
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d018      	beq.n	8003012 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d024      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
 8002ffe:	e01f      	b.n	8003040 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01b      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	e016      	b.n	8003040 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0208 	bic.w	r2, r2, #8
 800302e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	2220      	movs	r2, #32
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 808f 	beq.w	8003170 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8087 	beq.w	8003170 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2220      	movs	r2, #32
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b05      	cmp	r3, #5
 8003078:	d136      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0216 	bic.w	r2, r2, #22
 8003088:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <HAL_DMA_IRQHandler+0x1da>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0208 	bic.w	r2, r2, #8
 80030b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	223f      	movs	r2, #63	; 0x3f
 80030c0:	409a      	lsls	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d07e      	beq.n	80031dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
        }
        return;
 80030e6:	e079      	b.n	80031dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01d      	beq.n	8003132 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10d      	bne.n	8003120 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	2b00      	cmp	r3, #0
 800310a:	d031      	beq.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
 8003114:	e02c      	b.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
 8003116:	bf00      	nop
 8003118:	20000000 	.word	0x20000000
 800311c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d023      	beq.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
 8003130:	e01e      	b.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10f      	bne.n	8003160 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0210 	bic.w	r2, r2, #16
 800314e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	2b00      	cmp	r3, #0
 8003176:	d032      	beq.n	80031de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d022      	beq.n	80031ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2205      	movs	r2, #5
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	3301      	adds	r3, #1
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d307      	bcc.n	80031b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f2      	bne.n	800319c <HAL_DMA_IRQHandler+0x2cc>
 80031b6:	e000      	b.n	80031ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	4798      	blx	r3
 80031da:	e000      	b.n	80031de <HAL_DMA_IRQHandler+0x30e>
        return;
 80031dc:	bf00      	nop
    }
  }
}
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003200:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d108      	bne.n	8003224 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003222:	e007      	b.n	8003234 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	3b10      	subs	r3, #16
 8003250:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <DMA_CalcBaseAndBitshift+0x68>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d909      	bls.n	8003282 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	659a      	str	r2, [r3, #88]	; 0x58
 8003280:	e007      	b.n	8003292 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	aaaaaaab 	.word	0xaaaaaaab
 80032a8:	0800ea54 	.word	0x0800ea54

080032ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d11f      	bne.n	8003306 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d856      	bhi.n	800337a <DMA_CheckFifoParam+0xce>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <DMA_CheckFifoParam+0x28>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	080032e5 	.word	0x080032e5
 80032d8:	080032f7 	.word	0x080032f7
 80032dc:	080032e5 	.word	0x080032e5
 80032e0:	0800337b 	.word	0x0800337b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d046      	beq.n	800337e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f4:	e043      	b.n	800337e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032fe:	d140      	bne.n	8003382 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003304:	e03d      	b.n	8003382 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330e:	d121      	bne.n	8003354 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d837      	bhi.n	8003386 <DMA_CheckFifoParam+0xda>
 8003316:	a201      	add	r2, pc, #4	; (adr r2, 800331c <DMA_CheckFifoParam+0x70>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	0800332d 	.word	0x0800332d
 8003320:	08003333 	.word	0x08003333
 8003324:	0800332d 	.word	0x0800332d
 8003328:	08003345 	.word	0x08003345
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	e030      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d025      	beq.n	800338a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003342:	e022      	b.n	800338a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800334c:	d11f      	bne.n	800338e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003352:	e01c      	b.n	800338e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d903      	bls.n	8003362 <DMA_CheckFifoParam+0xb6>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d003      	beq.n	8003368 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003360:	e018      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      break;
 8003366:	e015      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e00b      	b.n	8003392 <DMA_CheckFifoParam+0xe6>
      break;
 800337a:	bf00      	nop
 800337c:	e00a      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
 8003380:	e008      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
 8003384:	e006      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 8003386:	bf00      	nop
 8003388:	e004      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;   
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 8003392:	bf00      	nop
    }
  } 
  
  return status; 
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop

080033a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e165      	b.n	800368c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c0:	2201      	movs	r2, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	429a      	cmp	r2, r3
 80033da:	f040 8154 	bne.w	8003686 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d005      	beq.n	80033f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d130      	bne.n	8003458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800342c:	2201      	movs	r2, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0201 	and.w	r2, r3, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b03      	cmp	r3, #3
 8003462:	d017      	beq.n	8003494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d123      	bne.n	80034e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	220f      	movs	r2, #15
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	08da      	lsrs	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3208      	adds	r2, #8
 80034e2:	69b9      	ldr	r1, [r7, #24]
 80034e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80ae 	beq.w	8003686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b5d      	ldr	r3, [pc, #372]	; (80036a4 <HAL_GPIO_Init+0x300>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	4a5c      	ldr	r2, [pc, #368]	; (80036a4 <HAL_GPIO_Init+0x300>)
 8003534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003538:	6453      	str	r3, [r2, #68]	; 0x44
 800353a:	4b5a      	ldr	r3, [pc, #360]	; (80036a4 <HAL_GPIO_Init+0x300>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003546:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_GPIO_Init+0x304>)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4f      	ldr	r2, [pc, #316]	; (80036ac <HAL_GPIO_Init+0x308>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d025      	beq.n	80035be <HAL_GPIO_Init+0x21a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4e      	ldr	r2, [pc, #312]	; (80036b0 <HAL_GPIO_Init+0x30c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01f      	beq.n	80035ba <HAL_GPIO_Init+0x216>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4d      	ldr	r2, [pc, #308]	; (80036b4 <HAL_GPIO_Init+0x310>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d019      	beq.n	80035b6 <HAL_GPIO_Init+0x212>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4c      	ldr	r2, [pc, #304]	; (80036b8 <HAL_GPIO_Init+0x314>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_GPIO_Init+0x20e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4b      	ldr	r2, [pc, #300]	; (80036bc <HAL_GPIO_Init+0x318>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00d      	beq.n	80035ae <HAL_GPIO_Init+0x20a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <HAL_GPIO_Init+0x31c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <HAL_GPIO_Init+0x206>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a49      	ldr	r2, [pc, #292]	; (80036c4 <HAL_GPIO_Init+0x320>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_GPIO_Init+0x202>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e00c      	b.n	80035c0 <HAL_GPIO_Init+0x21c>
 80035a6:	2307      	movs	r3, #7
 80035a8:	e00a      	b.n	80035c0 <HAL_GPIO_Init+0x21c>
 80035aa:	2305      	movs	r3, #5
 80035ac:	e008      	b.n	80035c0 <HAL_GPIO_Init+0x21c>
 80035ae:	2304      	movs	r3, #4
 80035b0:	e006      	b.n	80035c0 <HAL_GPIO_Init+0x21c>
 80035b2:	2303      	movs	r3, #3
 80035b4:	e004      	b.n	80035c0 <HAL_GPIO_Init+0x21c>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e002      	b.n	80035c0 <HAL_GPIO_Init+0x21c>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_GPIO_Init+0x21c>
 80035be:	2300      	movs	r3, #0
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	f002 0203 	and.w	r2, r2, #3
 80035c6:	0092      	lsls	r2, r2, #2
 80035c8:	4093      	lsls	r3, r2
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d0:	4935      	ldr	r1, [pc, #212]	; (80036a8 <HAL_GPIO_Init+0x304>)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	089b      	lsrs	r3, r3, #2
 80035d6:	3302      	adds	r3, #2
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035de:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_GPIO_Init+0x324>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003602:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_GPIO_Init+0x324>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_GPIO_Init+0x324>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800362c:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <HAL_GPIO_Init+0x324>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_GPIO_Init+0x324>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003656:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_GPIO_Init+0x324>)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_GPIO_Init+0x324>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003680:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <HAL_GPIO_Init+0x324>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3301      	adds	r3, #1
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b0f      	cmp	r3, #15
 8003690:	f67f ae96 	bls.w	80033c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40013800 	.word	0x40013800
 80036ac:	40020000 	.word	0x40020000
 80036b0:	40020400 	.word	0x40020400
 80036b4:	40020800 	.word	0x40020800
 80036b8:	40020c00 	.word	0x40020c00
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40021400 	.word	0x40021400
 80036c4:	40021800 	.word	0x40021800
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e001      	b.n	80036ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003718:	e003      	b.n	8003722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	619a      	str	r2, [r3, #24]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003748:	6413      	str	r3, [r2, #64]	; 0x40
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800375c:	f7ff f8de 	bl	800291c <HAL_GetTick>
 8003760:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003762:	e009      	b.n	8003778 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003764:	f7ff f8da 	bl	800291c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003772:	d901      	bls.n	8003778 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e01f      	b.n	80037b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d1ee      	bne.n	8003764 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800378c:	f7ff f8c6 	bl	800291c <HAL_GetTick>
 8003790:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003792:	e009      	b.n	80037a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003794:	f7ff f8c2 	bl	800291c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a2:	d901      	bls.n	80037a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e007      	b.n	80037b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037b4:	d1ee      	bne.n	8003794 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40023800 	.word	0x40023800
 80037c4:	420e0040 	.word	0x420e0040
 80037c8:	40007000 	.word	0x40007000
 80037cc:	420e0044 	.word	0x420e0044

080037d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0cc      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b68      	ldr	r3, [pc, #416]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d90c      	bls.n	800380c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b65      	ldr	r3, [pc, #404]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b63      	ldr	r3, [pc, #396]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0b8      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003824:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a58      	ldr	r2, [pc, #352]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800382e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800383c:	4b53      	ldr	r3, [pc, #332]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a52      	ldr	r2, [pc, #328]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	494d      	ldr	r1, [pc, #308]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d044      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d119      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d003      	beq.n	800388e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	4b3f      	ldr	r3, [pc, #252]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389e:	4b3b      	ldr	r3, [pc, #236]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e067      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ae:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f023 0203 	bic.w	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4934      	ldr	r1, [pc, #208]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c0:	f7ff f82c 	bl	800291c <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	e00a      	b.n	80038de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c8:	f7ff f828 	bl	800291c <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04f      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 020c 	and.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1eb      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d20c      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b20      	ldr	r3, [pc, #128]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e032      	b.n	800397e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4916      	ldr	r1, [pc, #88]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	490e      	ldr	r1, [pc, #56]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003956:	f000 f855 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 800395a:	4602      	mov	r2, r0
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	490a      	ldr	r1, [pc, #40]	; (8003990 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	5ccb      	ldrb	r3, [r1, r3]
 800396a:	fa22 f303 	lsr.w	r3, r2, r3
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe ff8c 	bl	8002894 <HAL_InitTick>

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40023c00 	.word	0x40023c00
 800398c:	40023800 	.word	0x40023800
 8003990:	0800ea3c 	.word	0x0800ea3c
 8003994:	20000000 	.word	0x20000000
 8003998:	20000004 	.word	0x20000004

0800399c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000000 	.word	0x20000000

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b8:	f7ff fff0 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	0800ea4c 	.word	0x0800ea4c

080039dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039e0:	f7ff ffdc 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0b5b      	lsrs	r3, r3, #13
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	0800ea4c 	.word	0x0800ea4c

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a08:	b0ae      	sub	sp, #184	; 0xb8
 8003a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a2a:	4bcb      	ldr	r3, [pc, #812]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	f200 8206 	bhi.w	8003e44 <HAL_RCC_GetSysClockFreq+0x440>
 8003a38:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003e45 	.word	0x08003e45
 8003a48:	08003e45 	.word	0x08003e45
 8003a4c:	08003e45 	.word	0x08003e45
 8003a50:	08003a7d 	.word	0x08003a7d
 8003a54:	08003e45 	.word	0x08003e45
 8003a58:	08003e45 	.word	0x08003e45
 8003a5c:	08003e45 	.word	0x08003e45
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003e45 	.word	0x08003e45
 8003a68:	08003e45 	.word	0x08003e45
 8003a6c:	08003e45 	.word	0x08003e45
 8003a70:	08003c75 	.word	0x08003c75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4bb9      	ldr	r3, [pc, #740]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x358>)
 8003a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003a7a:	e1e7      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7c:	4bb8      	ldr	r3, [pc, #736]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a82:	e1e3      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a84:	4bb4      	ldr	r3, [pc, #720]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a90:	4bb1      	ldr	r3, [pc, #708]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d071      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9c:	4bae      	ldr	r3, [pc, #696]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003aa8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003abe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	462b      	mov	r3, r5
 8003ac6:	f04f 0000 	mov.w	r0, #0
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	0159      	lsls	r1, r3, #5
 8003ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad4:	0150      	lsls	r0, r2, #5
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4621      	mov	r1, r4
 8003adc:	1a51      	subs	r1, r2, r1
 8003ade:	6439      	str	r1, [r7, #64]	; 0x40
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003af4:	4649      	mov	r1, r9
 8003af6:	018b      	lsls	r3, r1, #6
 8003af8:	4641      	mov	r1, r8
 8003afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003afe:	4641      	mov	r1, r8
 8003b00:	018a      	lsls	r2, r1, #6
 8003b02:	4641      	mov	r1, r8
 8003b04:	1a51      	subs	r1, r2, r1
 8003b06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b08:	4649      	mov	r1, r9
 8003b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	00cb      	lsls	r3, r1, #3
 8003b20:	4641      	mov	r1, r8
 8003b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b26:	4641      	mov	r1, r8
 8003b28:	00ca      	lsls	r2, r1, #3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4622      	mov	r2, r4
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
 8003b36:	462b      	mov	r3, r5
 8003b38:	460a      	mov	r2, r1
 8003b3a:	eb42 0303 	adc.w	r3, r2, r3
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	024b      	lsls	r3, r1, #9
 8003b50:	4621      	mov	r1, r4
 8003b52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b56:	4621      	mov	r1, r4
 8003b58:	024a      	lsls	r2, r1, #9
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003b70:	f7fd f88a 	bl	8000c88 <__aeabi_uldivmod>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4613      	mov	r3, r2
 8003b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b7e:	e067      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b80:	4b75      	ldr	r3, [pc, #468]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	0159      	lsls	r1, r3, #5
 8003bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb4:	0150      	lsls	r0, r2, #5
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4621      	mov	r1, r4
 8003bbc:	1a51      	subs	r1, r2, r1
 8003bbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	018b      	lsls	r3, r1, #6
 8003bd8:	4641      	mov	r1, r8
 8003bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bde:	4641      	mov	r1, r8
 8003be0:	018a      	lsls	r2, r1, #6
 8003be2:	4641      	mov	r1, r8
 8003be4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003be8:	4649      	mov	r1, r9
 8003bea:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c02:	4692      	mov	sl, r2
 8003c04:	469b      	mov	fp, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	eb1a 0303 	adds.w	r3, sl, r3
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	462b      	mov	r3, r5
 8003c10:	eb4b 0303 	adc.w	r3, fp, r3
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c22:	4629      	mov	r1, r5
 8003c24:	028b      	lsls	r3, r1, #10
 8003c26:	4621      	mov	r1, r4
 8003c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	028a      	lsls	r2, r1, #10
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c38:	2200      	movs	r2, #0
 8003c3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c3c:	677a      	str	r2, [r7, #116]	; 0x74
 8003c3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c42:	f7fd f821 	bl	8000c88 <__aeabi_uldivmod>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c50:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c72:	e0eb      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c74:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c80:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d06b      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8c:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	2200      	movs	r2, #0
 8003c94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ca4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ca8:	4622      	mov	r2, r4
 8003caa:	462b      	mov	r3, r5
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	0159      	lsls	r1, r3, #5
 8003cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cba:	0150      	lsls	r0, r2, #5
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	1a51      	subs	r1, r2, r1
 8003cc4:	61b9      	str	r1, [r7, #24]
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003cda:	4659      	mov	r1, fp
 8003cdc:	018b      	lsls	r3, r1, #6
 8003cde:	4651      	mov	r1, sl
 8003ce0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	018a      	lsls	r2, r1, #6
 8003ce8:	4651      	mov	r1, sl
 8003cea:	ebb2 0801 	subs.w	r8, r2, r1
 8003cee:	4659      	mov	r1, fp
 8003cf0:	eb63 0901 	sbc.w	r9, r3, r1
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d08:	4690      	mov	r8, r2
 8003d0a:	4699      	mov	r9, r3
 8003d0c:	4623      	mov	r3, r4
 8003d0e:	eb18 0303 	adds.w	r3, r8, r3
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	462b      	mov	r3, r5
 8003d16:	eb49 0303 	adc.w	r3, r9, r3
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d28:	4629      	mov	r1, r5
 8003d2a:	024b      	lsls	r3, r1, #9
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d32:	4621      	mov	r1, r4
 8003d34:	024a      	lsls	r2, r1, #9
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d3e:	2200      	movs	r2, #0
 8003d40:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d48:	f7fc ff9e 	bl	8000c88 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4613      	mov	r3, r2
 8003d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d56:	e065      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x420>
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d64:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x458>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	099b      	lsrs	r3, r3, #6
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	4611      	mov	r1, r2
 8003d70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d74:	653b      	str	r3, [r7, #80]	; 0x50
 8003d76:	2300      	movs	r3, #0
 8003d78:	657b      	str	r3, [r7, #84]	; 0x54
 8003d7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d7e:	4642      	mov	r2, r8
 8003d80:	464b      	mov	r3, r9
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	0159      	lsls	r1, r3, #5
 8003d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d90:	0150      	lsls	r0, r2, #5
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4641      	mov	r1, r8
 8003d98:	1a51      	subs	r1, r2, r1
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003db0:	4659      	mov	r1, fp
 8003db2:	018b      	lsls	r3, r1, #6
 8003db4:	4651      	mov	r1, sl
 8003db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dba:	4651      	mov	r1, sl
 8003dbc:	018a      	lsls	r2, r1, #6
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	1a54      	subs	r4, r2, r1
 8003dc2:	4659      	mov	r1, fp
 8003dc4:	eb63 0501 	sbc.w	r5, r3, r1
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	00eb      	lsls	r3, r5, #3
 8003dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd6:	00e2      	lsls	r2, r4, #3
 8003dd8:	4614      	mov	r4, r2
 8003dda:	461d      	mov	r5, r3
 8003ddc:	4643      	mov	r3, r8
 8003dde:	18e3      	adds	r3, r4, r3
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	464b      	mov	r3, r9
 8003de4:	eb45 0303 	adc.w	r3, r5, r3
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003df6:	4629      	mov	r1, r5
 8003df8:	028b      	lsls	r3, r1, #10
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e00:	4621      	mov	r1, r4
 8003e02:	028a      	lsls	r2, r1, #10
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e10:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e16:	f7fc ff37 	bl	8000c88 <__aeabi_uldivmod>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4613      	mov	r3, r2
 8003e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e24:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x458>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0f1b      	lsrs	r3, r3, #28
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e42:	e003      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	37b8      	adds	r7, #184	; 0xb8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	00f42400 	.word	0x00f42400

08003e64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e28d      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8083 	beq.w	8003f8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e84:	4b94      	ldr	r3, [pc, #592]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d019      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e90:	4b91      	ldr	r3, [pc, #580]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e9c:	4b8e      	ldr	r3, [pc, #568]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eaa:	4b8b      	ldr	r3, [pc, #556]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d112      	bne.n	8003edc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb6:	4b88      	ldr	r3, [pc, #544]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec4:	4b84      	ldr	r3, [pc, #528]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d05b      	beq.n	8003f88 <HAL_RCC_OscConfig+0x124>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d157      	bne.n	8003f88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e25a      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d106      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x90>
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7b      	ldr	r2, [pc, #492]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e01d      	b.n	8003f30 <HAL_RCC_OscConfig+0xcc>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0xb4>
 8003efe:	4b76      	ldr	r3, [pc, #472]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a75      	ldr	r2, [pc, #468]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b73      	ldr	r3, [pc, #460]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a72      	ldr	r2, [pc, #456]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0xcc>
 8003f18:	4b6f      	ldr	r3, [pc, #444]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b6c      	ldr	r3, [pc, #432]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6b      	ldr	r2, [pc, #428]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe fcf0 	bl	800291c <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fe fcec 	bl	800291c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e21f      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0xdc>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe fcdc 	bl	800291c <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fe fcd8 	bl	800291c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e20b      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	4b57      	ldr	r3, [pc, #348]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x104>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d06f      	beq.n	8004076 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f96:	4b50      	ldr	r3, [pc, #320]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d017      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fa2:	4b4d      	ldr	r3, [pc, #308]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d105      	bne.n	8003fba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fae:	4b4a      	ldr	r3, [pc, #296]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d11c      	bne.n	8004000 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b44      	ldr	r3, [pc, #272]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d116      	bne.n	8004000 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd2:	4b41      	ldr	r3, [pc, #260]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x186>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1d3      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fea:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4937      	ldr	r1, [pc, #220]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	e03a      	b.n	8004076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004008:	4b34      	ldr	r3, [pc, #208]	; (80040dc <HAL_RCC_OscConfig+0x278>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fe fc85 	bl	800291c <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004016:	f7fe fc81 	bl	800291c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e1b4      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004034:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4925      	ldr	r1, [pc, #148]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
 8004048:	e015      	b.n	8004076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404a:	4b24      	ldr	r3, [pc, #144]	; (80040dc <HAL_RCC_OscConfig+0x278>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fc64 	bl	800291c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004058:	f7fe fc60 	bl	800291c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e193      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d036      	beq.n	80040f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fe fc44 	bl	800291c <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004098:	f7fe fc40 	bl	800291c <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e173      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 80040ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x234>
 80040b6:	e01b      	b.n	80040f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_OscConfig+0x27c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fe fc2d 	bl	800291c <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	e00e      	b.n	80040e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fe fc29 	bl	800291c <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d907      	bls.n	80040e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e15c      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
 80040d8:	40023800 	.word	0x40023800
 80040dc:	42470000 	.word	0x42470000
 80040e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	4b8a      	ldr	r3, [pc, #552]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ea      	bne.n	80040c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8097 	beq.w	800422c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004102:	4b83      	ldr	r3, [pc, #524]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	4b7f      	ldr	r3, [pc, #508]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	4a7e      	ldr	r2, [pc, #504]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411c:	6413      	str	r3, [r2, #64]	; 0x40
 800411e:	4b7c      	ldr	r3, [pc, #496]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412e:	4b79      	ldr	r3, [pc, #484]	; (8004314 <HAL_RCC_OscConfig+0x4b0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d118      	bne.n	800416c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413a:	4b76      	ldr	r3, [pc, #472]	; (8004314 <HAL_RCC_OscConfig+0x4b0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a75      	ldr	r2, [pc, #468]	; (8004314 <HAL_RCC_OscConfig+0x4b0>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004146:	f7fe fbe9 	bl	800291c <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414e:	f7fe fbe5 	bl	800291c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e118      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	4b6c      	ldr	r3, [pc, #432]	; (8004314 <HAL_RCC_OscConfig+0x4b0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d106      	bne.n	8004182 <HAL_RCC_OscConfig+0x31e>
 8004174:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	4a65      	ldr	r2, [pc, #404]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
 8004180:	e01c      	b.n	80041bc <HAL_RCC_OscConfig+0x358>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x340>
 800418a:	4b61      	ldr	r3, [pc, #388]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a60      	ldr	r2, [pc, #384]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
 8004196:	4b5e      	ldr	r3, [pc, #376]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a5d      	ldr	r2, [pc, #372]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	e00b      	b.n	80041bc <HAL_RCC_OscConfig+0x358>
 80041a4:	4b5a      	ldr	r3, [pc, #360]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a59      	ldr	r2, [pc, #356]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	4b57      	ldr	r3, [pc, #348]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a56      	ldr	r2, [pc, #344]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041b6:	f023 0304 	bic.w	r3, r3, #4
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fe fbaa 	bl	800291c <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041cc:	f7fe fba6 	bl	800291c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e0d7      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e2:	4b4b      	ldr	r3, [pc, #300]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0ee      	beq.n	80041cc <HAL_RCC_OscConfig+0x368>
 80041ee:	e014      	b.n	800421a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe fb94 	bl	800291c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f6:	e00a      	b.n	800420e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fe fb90 	bl	800291c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e0c1      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	4b40      	ldr	r3, [pc, #256]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ee      	bne.n	80041f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	4a3a      	ldr	r2, [pc, #232]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800422a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80ad 	beq.w	8004390 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b08      	cmp	r3, #8
 8004240:	d060      	beq.n	8004304 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d145      	bne.n	80042d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424a:	4b33      	ldr	r3, [pc, #204]	; (8004318 <HAL_RCC_OscConfig+0x4b4>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fe fb64 	bl	800291c <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004258:	f7fe fb60 	bl	800291c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e093      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	4b29      	ldr	r3, [pc, #164]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	019b      	lsls	r3, r3, #6
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	3b01      	subs	r3, #1
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	071b      	lsls	r3, r3, #28
 80042a2:	491b      	ldr	r1, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a8:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <HAL_RCC_OscConfig+0x4b4>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fe fb35 	bl	800291c <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fe fb31 	bl	800291c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e064      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x452>
 80042d4:	e05c      	b.n	8004390 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <HAL_RCC_OscConfig+0x4b4>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe fb1e 	bl	800291c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fe fb1a 	bl	800291c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e04d      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x480>
 8004302:	e045      	b.n	8004390 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e040      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
 8004310:	40023800 	.word	0x40023800
 8004314:	40007000 	.word	0x40007000
 8004318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800431c:	4b1f      	ldr	r3, [pc, #124]	; (800439c <HAL_RCC_OscConfig+0x538>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d030      	beq.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d129      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d122      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004354:	4293      	cmp	r3, r2
 8004356:	d119      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	3b01      	subs	r3, #1
 8004366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d10f      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d107      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fd fe66 	bl	8002098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 fd92 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e046      	b.n	80044e6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <HAL_TIM_Base_Start+0xb4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004472:	d01d      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <HAL_TIM_Base_Start+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1e      	ldr	r2, [pc, #120]	; (80044fc <HAL_TIM_Base_Start+0xbc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <HAL_TIM_Base_Start+0xc0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <HAL_TIM_Base_Start+0xc4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_TIM_Base_Start+0xc8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a18      	ldr	r2, [pc, #96]	; (800450c <HAL_TIM_Base_Start+0xcc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d111      	bne.n	80044d4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d010      	beq.n	80044e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	e007      	b.n	80044e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40000c00 	.word	0x40000c00
 8004504:	40010400 	.word	0x40010400
 8004508:	40014000 	.word	0x40014000
 800450c:	40001800 	.word	0x40001800

08004510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d001      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e04e      	b.n	80045c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a23      	ldr	r2, [pc, #140]	; (80045d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004552:	d01d      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a18      	ldr	r2, [pc, #96]	; (80045ec <HAL_TIM_Base_Start_IT+0xdc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d111      	bne.n	80045b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d010      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b2:	e007      	b.n	80045c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40000c00 	.word	0x40000c00
 80045e4:	40010400 	.word	0x40010400
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40001800 	.word	0x40001800

080045f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e041      	b.n	8004686 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f839 	bl	800468e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fc6a 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_TIM_PWM_Start+0x24>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e022      	b.n	800470e <HAL_TIM_PWM_Start+0x6a>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d109      	bne.n	80046e2 <HAL_TIM_PWM_Start+0x3e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	bf14      	ite	ne
 80046da:	2301      	movne	r3, #1
 80046dc:	2300      	moveq	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	e015      	b.n	800470e <HAL_TIM_PWM_Start+0x6a>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d109      	bne.n	80046fc <HAL_TIM_PWM_Start+0x58>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e008      	b.n	800470e <HAL_TIM_PWM_Start+0x6a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e07c      	b.n	8004810 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_TIM_PWM_Start+0x82>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004724:	e013      	b.n	800474e <HAL_TIM_PWM_Start+0xaa>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b04      	cmp	r3, #4
 800472a:	d104      	bne.n	8004736 <HAL_TIM_PWM_Start+0x92>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004734:	e00b      	b.n	800474e <HAL_TIM_PWM_Start+0xaa>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d104      	bne.n	8004746 <HAL_TIM_PWM_Start+0xa2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004744:	e003      	b.n	800474e <HAL_TIM_PWM_Start+0xaa>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	6839      	ldr	r1, [r7, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fec0 	bl	80054dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2d      	ldr	r2, [pc, #180]	; (8004818 <HAL_TIM_PWM_Start+0x174>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIM_PWM_Start+0xcc>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2c      	ldr	r2, [pc, #176]	; (800481c <HAL_TIM_PWM_Start+0x178>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_TIM_PWM_Start+0xd0>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_TIM_PWM_Start+0xd2>
 8004774:	2300      	movs	r3, #0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a22      	ldr	r2, [pc, #136]	; (8004818 <HAL_TIM_PWM_Start+0x174>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d022      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479c:	d01d      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_TIM_PWM_Start+0x17c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_TIM_PWM_Start+0x180>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <HAL_TIM_PWM_Start+0x184>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a16      	ldr	r2, [pc, #88]	; (800481c <HAL_TIM_PWM_Start+0x178>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_TIM_PWM_Start+0x188>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIM_PWM_Start+0x136>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIM_PWM_Start+0x18c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d111      	bne.n	80047fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d010      	beq.n	800480e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fc:	e007      	b.n	800480e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40010000 	.word	0x40010000
 800481c:	40010400 	.word	0x40010400
 8004820:	40000400 	.word	0x40000400
 8004824:	40000800 	.word	0x40000800
 8004828:	40000c00 	.word	0x40000c00
 800482c:	40014000 	.word	0x40014000
 8004830:	40001800 	.word	0x40001800

08004834 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e097      	b.n	8004978 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fd fb9f 	bl	8001fa0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004878:	f023 0307 	bic.w	r3, r3, #7
 800487c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f000 fb3d 	bl	8004f08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	4313      	orrs	r3, r2
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048d4:	f023 030c 	bic.w	r3, r3, #12
 80048d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	4313      	orrs	r3, r2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	011a      	lsls	r2, r3, #4
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	031b      	lsls	r3, r3, #12
 8004904:	4313      	orrs	r3, r2
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	4313      	orrs	r3, r2
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa81 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fa73 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fa84 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0204 	mvn.w	r2, #4
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa57 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fa49 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fa5a 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0208 	mvn.w	r2, #8
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa2d 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fa1f 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fa30 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0210 	mvn.w	r2, #16
 8004aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2208      	movs	r2, #8
 8004aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa03 	bl	8004eca <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f9f5 	bl	8004eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fa06 	bl	8004ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0201 	mvn.w	r2, #1
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f9cf 	bl	8004ea2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d10e      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d107      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fdd4 	bl	80056d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f9cb 	bl	8004ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0220 	mvn.w	r2, #32
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fd9e 	bl	80056c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e0ae      	b.n	8004d0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	f200 809f 	bhi.w	8004cfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bbe:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004cfd 	.word	0x08004cfd
 8004bcc:	08004cfd 	.word	0x08004cfd
 8004bd0:	08004cfd 	.word	0x08004cfd
 8004bd4:	08004c39 	.word	0x08004c39
 8004bd8:	08004cfd 	.word	0x08004cfd
 8004bdc:	08004cfd 	.word	0x08004cfd
 8004be0:	08004cfd 	.word	0x08004cfd
 8004be4:	08004c7b 	.word	0x08004c7b
 8004be8:	08004cfd 	.word	0x08004cfd
 8004bec:	08004cfd 	.word	0x08004cfd
 8004bf0:	08004cfd 	.word	0x08004cfd
 8004bf4:	08004cbb 	.word	0x08004cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fa22 	bl	8005048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0208 	orr.w	r2, r2, #8
 8004c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0204 	bic.w	r2, r2, #4
 8004c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6999      	ldr	r1, [r3, #24]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	619a      	str	r2, [r3, #24]
      break;
 8004c36:	e064      	b.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fa72 	bl	8005128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6999      	ldr	r1, [r3, #24]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	021a      	lsls	r2, r3, #8
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	619a      	str	r2, [r3, #24]
      break;
 8004c78:	e043      	b.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fac7 	bl	8005214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0208 	orr.w	r2, r2, #8
 8004c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0204 	bic.w	r2, r2, #4
 8004ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69d9      	ldr	r1, [r3, #28]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	61da      	str	r2, [r3, #28]
      break;
 8004cb8:	e023      	b.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fb1b 	bl	80052fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	69d9      	ldr	r1, [r3, #28]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	021a      	lsls	r2, r3, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	61da      	str	r2, [r3, #28]
      break;
 8004cfa:	e002      	b.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8004d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIM_ConfigClockSource+0x1c>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e0b4      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x186>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d68:	d03e      	beq.n	8004de8 <HAL_TIM_ConfigClockSource+0xd4>
 8004d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6e:	f200 8087 	bhi.w	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	f000 8086 	beq.w	8004e86 <HAL_TIM_ConfigClockSource+0x172>
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d87f      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b70      	cmp	r3, #112	; 0x70
 8004d82:	d01a      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0xa6>
 8004d84:	2b70      	cmp	r3, #112	; 0x70
 8004d86:	d87b      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b60      	cmp	r3, #96	; 0x60
 8004d8a:	d050      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0x11a>
 8004d8c:	2b60      	cmp	r3, #96	; 0x60
 8004d8e:	d877      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b50      	cmp	r3, #80	; 0x50
 8004d92:	d03c      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0xfa>
 8004d94:	2b50      	cmp	r3, #80	; 0x50
 8004d96:	d873      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d058      	beq.n	8004e4e <HAL_TIM_ConfigClockSource+0x13a>
 8004d9c:	2b40      	cmp	r3, #64	; 0x40
 8004d9e:	d86f      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b30      	cmp	r3, #48	; 0x30
 8004da2:	d064      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15a>
 8004da4:	2b30      	cmp	r3, #48	; 0x30
 8004da6:	d86b      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d060      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15a>
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d867      	bhi.n	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d05c      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15a>
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d05a      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0x15a>
 8004db8:	e062      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6899      	ldr	r1, [r3, #8]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f000 fb67 	bl	800549c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ddc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	609a      	str	r2, [r3, #8]
      break;
 8004de6:	e04f      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f000 fb50 	bl	800549c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e0a:	609a      	str	r2, [r3, #8]
      break;
 8004e0c:	e03c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f000 fac4 	bl	80053a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2150      	movs	r1, #80	; 0x50
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fb1d 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004e2c:	e02c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f000 fae3 	bl	8005406 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2160      	movs	r1, #96	; 0x60
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fb0d 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004e4c:	e01c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6859      	ldr	r1, [r3, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f000 faa4 	bl	80053a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2140      	movs	r1, #64	; 0x40
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fafd 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004e6c:	e00c      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f000 faf4 	bl	8005466 <TIM_ITRx_SetConfig>
      break;
 8004e7e:	e003      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e000      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3c      	ldr	r2, [pc, #240]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3a      	ldr	r2, [pc, #232]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d027      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d023      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2b      	ldr	r2, [pc, #172]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a29      	ldr	r2, [pc, #164]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d017      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <TIM_Base_SetConfig+0x134>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <TIM_Base_SetConfig+0x138>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0c      	ldr	r2, [pc, #48]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40010000 	.word	0x40010000
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40010400 	.word	0x40010400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800
 800503c:	40001800 	.word	0x40001800
 8005040:	40001c00 	.word	0x40001c00
 8005044:	40002000 	.word	0x40002000

08005048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0201 	bic.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f023 0302 	bic.w	r3, r3, #2
 8005090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a20      	ldr	r2, [pc, #128]	; (8005120 <TIM_OC1_SetConfig+0xd8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC1_SetConfig+0x64>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <TIM_OC1_SetConfig+0xdc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d10c      	bne.n	80050c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f023 0308 	bic.w	r3, r3, #8
 80050b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f023 0304 	bic.w	r3, r3, #4
 80050c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a15      	ldr	r2, [pc, #84]	; (8005120 <TIM_OC1_SetConfig+0xd8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_OC1_SetConfig+0x8e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a14      	ldr	r2, [pc, #80]	; (8005124 <TIM_OC1_SetConfig+0xdc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d111      	bne.n	80050fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40010000 	.word	0x40010000
 8005124:	40010400 	.word	0x40010400

08005128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f023 0210 	bic.w	r2, r3, #16
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 0320 	bic.w	r3, r3, #32
 8005172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a22      	ldr	r2, [pc, #136]	; (800520c <TIM_OC2_SetConfig+0xe4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_OC2_SetConfig+0x68>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a21      	ldr	r2, [pc, #132]	; (8005210 <TIM_OC2_SetConfig+0xe8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10d      	bne.n	80051ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a17      	ldr	r2, [pc, #92]	; (800520c <TIM_OC2_SetConfig+0xe4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d003      	beq.n	80051bc <TIM_OC2_SetConfig+0x94>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a16      	ldr	r2, [pc, #88]	; (8005210 <TIM_OC2_SetConfig+0xe8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d113      	bne.n	80051e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40010400 	.word	0x40010400

08005214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0303 	bic.w	r3, r3, #3
 800524a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800525c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <TIM_OC3_SetConfig+0xe0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_OC3_SetConfig+0x66>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a20      	ldr	r2, [pc, #128]	; (80052f8 <TIM_OC3_SetConfig+0xe4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10d      	bne.n	8005296 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <TIM_OC3_SetConfig+0xe0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_OC3_SetConfig+0x92>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <TIM_OC3_SetConfig+0xe4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d113      	bne.n	80052ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	621a      	str	r2, [r3, #32]
}
 80052e8:	bf00      	nop
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40010400 	.word	0x40010400

080052fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	031b      	lsls	r3, r3, #12
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <TIM_OC4_SetConfig+0xa4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC4_SetConfig+0x68>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a11      	ldr	r2, [pc, #68]	; (80053a4 <TIM_OC4_SetConfig+0xa8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d109      	bne.n	8005378 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	019b      	lsls	r3, r3, #6
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40010400 	.word	0x40010400

080053a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 030a 	bic.w	r3, r3, #10
 80053e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005406:	b480      	push	{r7}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0210 	bic.w	r2, r3, #16
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	031b      	lsls	r3, r3, #12
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	f043 0307 	orr.w	r3, r3, #7
 8005488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	609a      	str	r2, [r3, #8]
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	431a      	orrs	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	609a      	str	r2, [r3, #8]
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	2201      	movs	r2, #1
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1a      	ldr	r2, [r3, #32]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	401a      	ands	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	fa01 f303 	lsl.w	r3, r1, r3
 8005514:	431a      	orrs	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800553c:	2302      	movs	r3, #2
 800553e:	e05a      	b.n	80055f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a21      	ldr	r2, [pc, #132]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d022      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d01d      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d018      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00e      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d10c      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40010400 	.word	0x40010400
 8005618:	40014000 	.word	0x40014000
 800561c:	40001800 	.word	0x40001800

08005620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005638:	2302      	movs	r3, #2
 800563a:	e03d      	b.n	80056b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e03f      	b.n	800577e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fc fec0 	bl	8002498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	; 0x24
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800572e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 ffd7 	bl	80066e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b08a      	sub	sp, #40	; 0x28
 800578a:	af02      	add	r7, sp, #8
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d17c      	bne.n	80058a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_UART_Transmit+0x2c>
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e075      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Transmit+0x3e>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e06e      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2221      	movs	r2, #33	; 0x21
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057da:	f7fd f89f 	bl	800291c <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f4:	d108      	bne.n	8005808 <HAL_UART_Transmit+0x82>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	e003      	b.n	8005810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005818:	e02a      	b.n	8005870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2200      	movs	r2, #0
 8005822:	2180      	movs	r1, #128	; 0x80
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fc51 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e036      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3302      	adds	r3, #2
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e007      	b.n	8005862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1cf      	bne.n	800581a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	2140      	movs	r1, #64	; 0x40
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fc21 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e006      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	e000      	b.n	80058a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
  }
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	4613      	mov	r3, r2
 80058b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d11d      	bne.n	8005900 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_UART_Receive_IT+0x26>
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e016      	b.n	8005902 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Receive_IT+0x38>
 80058de:	2302      	movs	r3, #2
 80058e0:	e00f      	b.n	8005902 <HAL_UART_Receive_IT+0x58>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058f0:	88fb      	ldrh	r3, [r7, #6]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fc56 	bl	80061a8 <UART_Start_Receive_IT>
 80058fc:	4603      	mov	r3, r0
 80058fe:	e000      	b.n	8005902 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
  }
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	4613      	mov	r3, r2
 8005916:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b20      	cmp	r3, #32
 8005922:	d11d      	bne.n	8005960 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_UART_Receive_DMA+0x26>
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e016      	b.n	8005962 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_UART_Receive_DMA+0x38>
 800593e:	2302      	movs	r3, #2
 8005940:	e00f      	b.n	8005962 <HAL_UART_Receive_DMA+0x58>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	461a      	mov	r2, r3
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fc64 	bl	8006224 <UART_Start_Receive_DMA>
 800595c:	4603      	mov	r3, r0
 800595e:	e000      	b.n	8005962 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
  }
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b0ba      	sub	sp, #232	; 0xe8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005998:	2300      	movs	r3, #0
 800599a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10f      	bne.n	80059d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_UART_IRQHandler+0x66>
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fdcf 	bl	800656e <UART_Receive_IT>
      return;
 80059d0:	e256      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80de 	beq.w	8005b98 <HAL_UART_IRQHandler+0x22c>
 80059dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80d1 	beq.w	8005b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <HAL_UART_IRQHandler+0xae>
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f043 0201 	orr.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_UART_IRQHandler+0xd2>
 8005a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f043 0202 	orr.w	r2, r3, #2
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_UART_IRQHandler+0xf6>
 8005a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f043 0204 	orr.w	r2, r3, #4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <HAL_UART_IRQHandler+0x126>
 8005a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f043 0208 	orr.w	r2, r3, #8
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 81ed 	beq.w	8005e76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_UART_IRQHandler+0x14e>
 8005aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fd5a 	bl	800656e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	bf0c      	ite	eq
 8005ac8:	2301      	moveq	r3, #1
 8005aca:	2300      	movne	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x17a>
 8005ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d04f      	beq.n	8005b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fc62 	bl	80063b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d141      	bne.n	8005b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3314      	adds	r3, #20
 8005b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3314      	adds	r3, #20
 8005b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1d9      	bne.n	8005afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d013      	beq.n	8005b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	4a7d      	ldr	r2, [pc, #500]	; (8005d48 <HAL_UART_IRQHandler+0x3dc>)
 8005b54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd f996 	bl	8002e8c <HAL_DMA_Abort_IT>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	e00e      	b.n	8005b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f99a 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	e00a      	b.n	8005b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f996 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e006      	b.n	8005b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f992 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b92:	e170      	b.n	8005e76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	bf00      	nop
    return;
 8005b96:	e16e      	b.n	8005e76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	f040 814a 	bne.w	8005e36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8143 	beq.w	8005e36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 813c 	beq.w	8005e36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60bb      	str	r3, [r7, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	f040 80b4 	bne.w	8005d4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8140 	beq.w	8005e7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c02:	429a      	cmp	r2, r3
 8005c04:	f080 8139 	bcs.w	8005e7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1a:	f000 8088 	beq.w	8005d2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1d9      	bne.n	8005c1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3314      	adds	r3, #20
 8005c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e1      	bne.n	8005c6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3314      	adds	r3, #20
 8005cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e3      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d10:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e3      	bne.n	8005cec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fd f83f 	bl	8002dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f8c0 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d44:	e099      	b.n	8005e7a <HAL_UART_IRQHandler+0x50e>
 8005d46:	bf00      	nop
 8005d48:	08006477 	.word	0x08006477
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 808b 	beq.w	8005e7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8086 	beq.w	8005e7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d96:	647a      	str	r2, [r7, #68]	; 0x44
 8005d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e3      	bne.n	8005d72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3314      	adds	r3, #20
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dce:	633a      	str	r2, [r7, #48]	; 0x30
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e3      	bne.n	8005daa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0310 	bic.w	r3, r3, #16
 8005e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e14:	61fa      	str	r2, [r7, #28]
 8005e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69b9      	ldr	r1, [r7, #24]
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	617b      	str	r3, [r7, #20]
   return(result);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e3      	bne.n	8005df0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f848 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e34:	e023      	b.n	8005e7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_UART_IRQHandler+0x4ea>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fb25 	bl	800649e <UART_Transmit_IT>
    return;
 8005e54:	e014      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00e      	beq.n	8005e80 <HAL_UART_IRQHandler+0x514>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fb65 	bl	800653e <UART_EndTransmit_IT>
    return;
 8005e74:	e004      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
    return;
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
      return;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <HAL_UART_IRQHandler+0x514>
      return;
 8005e7e:	bf00      	nop
  }
}
 8005e80:	37e8      	adds	r7, #232	; 0xe8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop

08005e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b09c      	sub	sp, #112	; 0x70
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d172      	bne.n	8005fde <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efa:	2200      	movs	r2, #0
 8005efc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e5      	bne.n	8005efe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3314      	adds	r3, #20
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	667b      	str	r3, [r7, #100]	; 0x64
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3314      	adds	r3, #20
 8005f50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f52:	647a      	str	r2, [r7, #68]	; 0x44
 8005f54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e5      	bne.n	8005f32 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	623b      	str	r3, [r7, #32]
   return(result);
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f86:	633a      	str	r2, [r7, #48]	; 0x30
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e5      	bne.n	8005f66 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d119      	bne.n	8005fde <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f023 0310 	bic.w	r3, r3, #16
 8005fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fca:	61fa      	str	r2, [r7, #28]
 8005fcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	69b9      	ldr	r1, [r7, #24]
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e5      	bne.n	8005faa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d106      	bne.n	8005ff4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fea:	4619      	mov	r1, r3
 8005fec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fee:	f7ff ff69 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ff2:	e002      	b.n	8005ffa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005ff4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ff6:	f003 f8f3 	bl	80091e0 <HAL_UART_RxCpltCallback>
}
 8005ffa:	bf00      	nop
 8005ffc:	3770      	adds	r7, #112	; 0x70
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	2b01      	cmp	r3, #1
 8006016:	d108      	bne.n	800602a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	b29b      	uxth	r3, r3
 8006020:	4619      	mov	r1, r3
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff ff4e 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006028:	e002      	b.n	8006030 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff ff36 	bl	8005e9c <HAL_UART_RxHalfCpltCallback>
}
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	bf0c      	ite	eq
 8006058:	2301      	moveq	r3, #1
 800605a:	2300      	movne	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b21      	cmp	r3, #33	; 0x21
 800606a:	d108      	bne.n	800607e <UART_DMAError+0x46>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006078:	68b8      	ldr	r0, [r7, #8]
 800607a:	f000 f971 	bl	8006360 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b22      	cmp	r3, #34	; 0x22
 800609e:	d108      	bne.n	80060b2 <UART_DMAError+0x7a>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2200      	movs	r2, #0
 80060aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060ac:	68b8      	ldr	r0, [r7, #8]
 80060ae:	f000 f97f 	bl	80063b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f043 0210 	orr.w	r2, r3, #16
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060be:	68b8      	ldr	r0, [r7, #8]
 80060c0:	f7ff fef6 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b090      	sub	sp, #64	; 0x40
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060dc:	e050      	b.n	8006180 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d04c      	beq.n	8006180 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0x30>
 80060ec:	f7fc fc16 	bl	800291c <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d241      	bcs.n	8006180 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800611c:	637a      	str	r2, [r7, #52]	; 0x34
 800611e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e5      	bne.n	80060fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3314      	adds	r3, #20
 8006136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	613b      	str	r3, [r7, #16]
   return(result);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	63bb      	str	r3, [r7, #56]	; 0x38
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3314      	adds	r3, #20
 800614e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006150:	623a      	str	r2, [r7, #32]
 8006152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	69f9      	ldr	r1, [r7, #28]
 8006156:	6a3a      	ldr	r2, [r7, #32]
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	61bb      	str	r3, [r7, #24]
   return(result);
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e5      	bne.n	8006130 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e00f      	b.n	80061a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4013      	ands	r3, r2
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	429a      	cmp	r2, r3
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	429a      	cmp	r2, r3
 800619c:	d09f      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3740      	adds	r7, #64	; 0x40
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2222      	movs	r2, #34	; 0x22
 80061d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f042 0201 	orr.w	r2, r2, #1
 8006204:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0220 	orr.w	r2, r2, #32
 8006214:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b098      	sub	sp, #96	; 0x60
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2222      	movs	r2, #34	; 0x22
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	4a40      	ldr	r2, [pc, #256]	; (8006354 <UART_Start_Receive_DMA+0x130>)
 8006252:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	4a3f      	ldr	r2, [pc, #252]	; (8006358 <UART_Start_Receive_DMA+0x134>)
 800625a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	4a3e      	ldr	r2, [pc, #248]	; (800635c <UART_Start_Receive_DMA+0x138>)
 8006262:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	2200      	movs	r2, #0
 800626a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800626c:	f107 0308 	add.w	r3, r7, #8
 8006270:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3304      	adds	r3, #4
 800627c:	4619      	mov	r1, r3
 800627e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	f7fc fd3a 	bl	8002cfc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006288:	2300      	movs	r3, #0
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d019      	beq.n	80062e2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	330c      	adds	r3, #12
 80062cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80062d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80062d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80062dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e5      	bne.n	80062ae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3314      	adds	r3, #20
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	657b      	str	r3, [r7, #84]	; 0x54
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3314      	adds	r3, #20
 8006300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006302:	63ba      	str	r2, [r7, #56]	; 0x38
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e5      	bne.n	80062e2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3314      	adds	r3, #20
 800631c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	617b      	str	r3, [r7, #20]
   return(result);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800632c:	653b      	str	r3, [r7, #80]	; 0x50
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3314      	adds	r3, #20
 8006334:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006336:	627a      	str	r2, [r7, #36]	; 0x24
 8006338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6a39      	ldr	r1, [r7, #32]
 800633c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	61fb      	str	r3, [r7, #28]
   return(result);
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e5      	bne.n	8006316 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3760      	adds	r7, #96	; 0x60
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	08005edd 	.word	0x08005edd
 8006358:	08006003 	.word	0x08006003
 800635c:	08006039 	.word	0x08006039

08006360 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b089      	sub	sp, #36	; 0x24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	60bb      	str	r3, [r7, #8]
   return(result);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	61ba      	str	r2, [r7, #24]
 800638a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6979      	ldr	r1, [r7, #20]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	613b      	str	r3, [r7, #16]
   return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e5      	bne.n	8006368 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80063a4:	bf00      	nop
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b095      	sub	sp, #84	; 0x54
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	330c      	adds	r3, #12
 80063d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063d8:	643a      	str	r2, [r7, #64]	; 0x40
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e5      	bne.n	80063b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3314      	adds	r3, #20
 80063f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	64bb      	str	r3, [r7, #72]	; 0x48
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3314      	adds	r3, #20
 800640a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800640c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	2b01      	cmp	r3, #1
 8006426:	d119      	bne.n	800645c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	330c      	adds	r3, #12
 800642e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	60bb      	str	r3, [r7, #8]
   return(result);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f023 0310 	bic.w	r3, r3, #16
 800643e:	647b      	str	r3, [r7, #68]	; 0x44
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	330c      	adds	r3, #12
 8006446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006448:	61ba      	str	r2, [r7, #24]
 800644a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6979      	ldr	r1, [r7, #20]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	613b      	str	r3, [r7, #16]
   return(result);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e5      	bne.n	8006428 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	631a      	str	r2, [r3, #48]	; 0x30
}
 800646a:	bf00      	nop
 800646c:	3754      	adds	r7, #84	; 0x54
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff fd0d 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b21      	cmp	r3, #33	; 0x21
 80064b0:	d13e      	bne.n	8006530 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ba:	d114      	bne.n	80064e6 <UART_Transmit_IT+0x48>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d110      	bne.n	80064e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	1c9a      	adds	r2, r3, #2
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	621a      	str	r2, [r3, #32]
 80064e4:	e008      	b.n	80064f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6211      	str	r1, [r2, #32]
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29b      	uxth	r3, r3
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4619      	mov	r1, r3
 8006506:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10f      	bne.n	800652c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800651a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800652a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	e000      	b.n	8006532 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006554:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff fc92 	bl	8005e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b08c      	sub	sp, #48	; 0x30
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b22      	cmp	r3, #34	; 0x22
 8006580:	f040 80ab 	bne.w	80066da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d117      	bne.n	80065be <UART_Receive_IT+0x50>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d113      	bne.n	80065be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	629a      	str	r2, [r3, #40]	; 0x28
 80065bc:	e026      	b.n	800660c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80065c4:	2300      	movs	r3, #0
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d0:	d007      	beq.n	80065e2 <UART_Receive_IT+0x74>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <UART_Receive_IT+0x82>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	e008      	b.n	8006602 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29b      	uxth	r3, r3
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4619      	mov	r1, r3
 800661a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800661c:	2b00      	cmp	r3, #0
 800661e:	d15a      	bne.n	80066d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0220 	bic.w	r2, r2, #32
 800662e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800663e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	2b01      	cmp	r3, #1
 800665e:	d135      	bne.n	80066cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	613b      	str	r3, [r7, #16]
   return(result);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f023 0310 	bic.w	r3, r3, #16
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	330c      	adds	r3, #12
 8006684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006686:	623a      	str	r2, [r7, #32]
 8006688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	69f9      	ldr	r1, [r7, #28]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	61bb      	str	r3, [r7, #24]
   return(result);
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d10a      	bne.n	80066be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fbfd 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
 80066ca:	e002      	b.n	80066d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f002 fd87 	bl	80091e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e002      	b.n	80066dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e000      	b.n	80066dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80066da:	2302      	movs	r3, #2
  }
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3730      	adds	r7, #48	; 0x30
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e8:	b0c0      	sub	sp, #256	; 0x100
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006700:	68d9      	ldr	r1, [r3, #12]
 8006702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	ea40 0301 	orr.w	r3, r0, r1
 800670c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	431a      	orrs	r2, r3
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	431a      	orrs	r2, r3
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800673c:	f021 010c 	bic.w	r1, r1, #12
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800674a:	430b      	orrs	r3, r1
 800674c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800674e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675e:	6999      	ldr	r1, [r3, #24]
 8006760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	ea40 0301 	orr.w	r3, r0, r1
 800676a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4b8f      	ldr	r3, [pc, #572]	; (80069b0 <UART_SetConfig+0x2cc>)
 8006774:	429a      	cmp	r2, r3
 8006776:	d005      	beq.n	8006784 <UART_SetConfig+0xa0>
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b8d      	ldr	r3, [pc, #564]	; (80069b4 <UART_SetConfig+0x2d0>)
 8006780:	429a      	cmp	r2, r3
 8006782:	d104      	bne.n	800678e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006784:	f7fd f92a 	bl	80039dc <HAL_RCC_GetPCLK2Freq>
 8006788:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800678c:	e003      	b.n	8006796 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800678e:	f7fd f911 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8006792:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067a0:	f040 810c 	bne.w	80069bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067b6:	4622      	mov	r2, r4
 80067b8:	462b      	mov	r3, r5
 80067ba:	1891      	adds	r1, r2, r2
 80067bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80067be:	415b      	adcs	r3, r3
 80067c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067c6:	4621      	mov	r1, r4
 80067c8:	eb12 0801 	adds.w	r8, r2, r1
 80067cc:	4629      	mov	r1, r5
 80067ce:	eb43 0901 	adc.w	r9, r3, r1
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067e6:	4690      	mov	r8, r2
 80067e8:	4699      	mov	r9, r3
 80067ea:	4623      	mov	r3, r4
 80067ec:	eb18 0303 	adds.w	r3, r8, r3
 80067f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067f4:	462b      	mov	r3, r5
 80067f6:	eb49 0303 	adc.w	r3, r9, r3
 80067fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800680a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800680e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006812:	460b      	mov	r3, r1
 8006814:	18db      	adds	r3, r3, r3
 8006816:	653b      	str	r3, [r7, #80]	; 0x50
 8006818:	4613      	mov	r3, r2
 800681a:	eb42 0303 	adc.w	r3, r2, r3
 800681e:	657b      	str	r3, [r7, #84]	; 0x54
 8006820:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006824:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006828:	f7fa fa2e 	bl	8000c88 <__aeabi_uldivmod>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4b61      	ldr	r3, [pc, #388]	; (80069b8 <UART_SetConfig+0x2d4>)
 8006832:	fba3 2302 	umull	r2, r3, r3, r2
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	011c      	lsls	r4, r3, #4
 800683a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683e:	2200      	movs	r2, #0
 8006840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006844:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006848:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800684c:	4642      	mov	r2, r8
 800684e:	464b      	mov	r3, r9
 8006850:	1891      	adds	r1, r2, r2
 8006852:	64b9      	str	r1, [r7, #72]	; 0x48
 8006854:	415b      	adcs	r3, r3
 8006856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006858:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800685c:	4641      	mov	r1, r8
 800685e:	eb12 0a01 	adds.w	sl, r2, r1
 8006862:	4649      	mov	r1, r9
 8006864:	eb43 0b01 	adc.w	fp, r3, r1
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006874:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800687c:	4692      	mov	sl, r2
 800687e:	469b      	mov	fp, r3
 8006880:	4643      	mov	r3, r8
 8006882:	eb1a 0303 	adds.w	r3, sl, r3
 8006886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800688a:	464b      	mov	r3, r9
 800688c:	eb4b 0303 	adc.w	r3, fp, r3
 8006890:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068a8:	460b      	mov	r3, r1
 80068aa:	18db      	adds	r3, r3, r3
 80068ac:	643b      	str	r3, [r7, #64]	; 0x40
 80068ae:	4613      	mov	r3, r2
 80068b0:	eb42 0303 	adc.w	r3, r2, r3
 80068b4:	647b      	str	r3, [r7, #68]	; 0x44
 80068b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068be:	f7fa f9e3 	bl	8000c88 <__aeabi_uldivmod>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4611      	mov	r1, r2
 80068c8:	4b3b      	ldr	r3, [pc, #236]	; (80069b8 <UART_SetConfig+0x2d4>)
 80068ca:	fba3 2301 	umull	r2, r3, r3, r1
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	2264      	movs	r2, #100	; 0x64
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
 80068d6:	1acb      	subs	r3, r1, r3
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068de:	4b36      	ldr	r3, [pc, #216]	; (80069b8 <UART_SetConfig+0x2d4>)
 80068e0:	fba3 2302 	umull	r2, r3, r3, r2
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068ec:	441c      	add	r4, r3
 80068ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006900:	4642      	mov	r2, r8
 8006902:	464b      	mov	r3, r9
 8006904:	1891      	adds	r1, r2, r2
 8006906:	63b9      	str	r1, [r7, #56]	; 0x38
 8006908:	415b      	adcs	r3, r3
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006910:	4641      	mov	r1, r8
 8006912:	1851      	adds	r1, r2, r1
 8006914:	6339      	str	r1, [r7, #48]	; 0x30
 8006916:	4649      	mov	r1, r9
 8006918:	414b      	adcs	r3, r1
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006928:	4659      	mov	r1, fp
 800692a:	00cb      	lsls	r3, r1, #3
 800692c:	4651      	mov	r1, sl
 800692e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006932:	4651      	mov	r1, sl
 8006934:	00ca      	lsls	r2, r1, #3
 8006936:	4610      	mov	r0, r2
 8006938:	4619      	mov	r1, r3
 800693a:	4603      	mov	r3, r0
 800693c:	4642      	mov	r2, r8
 800693e:	189b      	adds	r3, r3, r2
 8006940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006944:	464b      	mov	r3, r9
 8006946:	460a      	mov	r2, r1
 8006948:	eb42 0303 	adc.w	r3, r2, r3
 800694c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800695c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006964:	460b      	mov	r3, r1
 8006966:	18db      	adds	r3, r3, r3
 8006968:	62bb      	str	r3, [r7, #40]	; 0x28
 800696a:	4613      	mov	r3, r2
 800696c:	eb42 0303 	adc.w	r3, r2, r3
 8006970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006972:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006976:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800697a:	f7fa f985 	bl	8000c88 <__aeabi_uldivmod>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <UART_SetConfig+0x2d4>)
 8006984:	fba3 1302 	umull	r1, r3, r3, r2
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	2164      	movs	r1, #100	; 0x64
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	3332      	adds	r3, #50	; 0x32
 8006996:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <UART_SetConfig+0x2d4>)
 8006998:	fba2 2303 	umull	r2, r3, r2, r3
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	f003 0207 	and.w	r2, r3, #7
 80069a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4422      	add	r2, r4
 80069aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069ac:	e106      	b.n	8006bbc <UART_SetConfig+0x4d8>
 80069ae:	bf00      	nop
 80069b0:	40011000 	.word	0x40011000
 80069b4:	40011400 	.word	0x40011400
 80069b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c0:	2200      	movs	r2, #0
 80069c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069ce:	4642      	mov	r2, r8
 80069d0:	464b      	mov	r3, r9
 80069d2:	1891      	adds	r1, r2, r2
 80069d4:	6239      	str	r1, [r7, #32]
 80069d6:	415b      	adcs	r3, r3
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
 80069da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069de:	4641      	mov	r1, r8
 80069e0:	1854      	adds	r4, r2, r1
 80069e2:	4649      	mov	r1, r9
 80069e4:	eb43 0501 	adc.w	r5, r3, r1
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	00eb      	lsls	r3, r5, #3
 80069f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069f6:	00e2      	lsls	r2, r4, #3
 80069f8:	4614      	mov	r4, r2
 80069fa:	461d      	mov	r5, r3
 80069fc:	4643      	mov	r3, r8
 80069fe:	18e3      	adds	r3, r4, r3
 8006a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a04:	464b      	mov	r3, r9
 8006a06:	eb45 0303 	adc.w	r3, r5, r3
 8006a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	008b      	lsls	r3, r1, #2
 8006a2e:	4621      	mov	r1, r4
 8006a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a34:	4621      	mov	r1, r4
 8006a36:	008a      	lsls	r2, r1, #2
 8006a38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a3c:	f7fa f924 	bl	8000c88 <__aeabi_uldivmod>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4b60      	ldr	r3, [pc, #384]	; (8006bc8 <UART_SetConfig+0x4e4>)
 8006a46:	fba3 2302 	umull	r2, r3, r3, r2
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	011c      	lsls	r4, r3, #4
 8006a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a60:	4642      	mov	r2, r8
 8006a62:	464b      	mov	r3, r9
 8006a64:	1891      	adds	r1, r2, r2
 8006a66:	61b9      	str	r1, [r7, #24]
 8006a68:	415b      	adcs	r3, r3
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a70:	4641      	mov	r1, r8
 8006a72:	1851      	adds	r1, r2, r1
 8006a74:	6139      	str	r1, [r7, #16]
 8006a76:	4649      	mov	r1, r9
 8006a78:	414b      	adcs	r3, r1
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a88:	4659      	mov	r1, fp
 8006a8a:	00cb      	lsls	r3, r1, #3
 8006a8c:	4651      	mov	r1, sl
 8006a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a92:	4651      	mov	r1, sl
 8006a94:	00ca      	lsls	r2, r1, #3
 8006a96:	4610      	mov	r0, r2
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	189b      	adds	r3, r3, r2
 8006aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	460a      	mov	r2, r1
 8006aa8:	eb42 0303 	adc.w	r3, r2, r3
 8006aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ac8:	4649      	mov	r1, r9
 8006aca:	008b      	lsls	r3, r1, #2
 8006acc:	4641      	mov	r1, r8
 8006ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	008a      	lsls	r2, r1, #2
 8006ad6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ada:	f7fa f8d5 	bl	8000c88 <__aeabi_uldivmod>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4b38      	ldr	r3, [pc, #224]	; (8006bc8 <UART_SetConfig+0x4e4>)
 8006ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8006aea:	095b      	lsrs	r3, r3, #5
 8006aec:	2264      	movs	r2, #100	; 0x64
 8006aee:	fb02 f303 	mul.w	r3, r2, r3
 8006af2:	1acb      	subs	r3, r1, r3
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	3332      	adds	r3, #50	; 0x32
 8006af8:	4a33      	ldr	r2, [pc, #204]	; (8006bc8 <UART_SetConfig+0x4e4>)
 8006afa:	fba2 2303 	umull	r2, r3, r2, r3
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b04:	441c      	add	r4, r3
 8006b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	673b      	str	r3, [r7, #112]	; 0x70
 8006b0e:	677a      	str	r2, [r7, #116]	; 0x74
 8006b10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	1891      	adds	r1, r2, r2
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	415b      	adcs	r3, r3
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b24:	4641      	mov	r1, r8
 8006b26:	1851      	adds	r1, r2, r1
 8006b28:	6039      	str	r1, [r7, #0]
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	414b      	adcs	r3, r1
 8006b2e:	607b      	str	r3, [r7, #4]
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b3c:	4659      	mov	r1, fp
 8006b3e:	00cb      	lsls	r3, r1, #3
 8006b40:	4651      	mov	r1, sl
 8006b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b46:	4651      	mov	r1, sl
 8006b48:	00ca      	lsls	r2, r1, #3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	4642      	mov	r2, r8
 8006b52:	189b      	adds	r3, r3, r2
 8006b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b56:	464b      	mov	r3, r9
 8006b58:	460a      	mov	r2, r1
 8006b5a:	eb42 0303 	adc.w	r3, r2, r3
 8006b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	663b      	str	r3, [r7, #96]	; 0x60
 8006b6a:	667a      	str	r2, [r7, #100]	; 0x64
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b78:	4649      	mov	r1, r9
 8006b7a:	008b      	lsls	r3, r1, #2
 8006b7c:	4641      	mov	r1, r8
 8006b7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b82:	4641      	mov	r1, r8
 8006b84:	008a      	lsls	r2, r1, #2
 8006b86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b8a:	f7fa f87d 	bl	8000c88 <__aeabi_uldivmod>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <UART_SetConfig+0x4e4>)
 8006b94:	fba3 1302 	umull	r1, r3, r3, r2
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	2164      	movs	r1, #100	; 0x64
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	3332      	adds	r3, #50	; 0x32
 8006ba6:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <UART_SetConfig+0x4e4>)
 8006ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	f003 020f 	and.w	r2, r3, #15
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4422      	add	r2, r4
 8006bba:	609a      	str	r2, [r3, #8]
}
 8006bbc:	bf00      	nop
 8006bbe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bc8:	51eb851f 	.word	0x51eb851f

08006bcc <avoidance_initialize>:
AvoidanceState avoidanceState;
Bezier* avoidanceCurve;
float backtrackingAim;
float avoidanceSpeedFactor;

void avoidance_initialize() {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
	avoidanceState = PATH_CLEAR;
 8006bd0:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <avoidance_initialize+0x28>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	701a      	strb	r2, [r3, #0]
	avoidanceCurve = bezier_newEmpty();
 8006bd6:	f000 f923 	bl	8006e20 <bezier_newEmpty>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4a06      	ldr	r2, [pc, #24]	; (8006bf8 <avoidance_initialize+0x2c>)
 8006bde:	6013      	str	r3, [r2, #0]
	backtrackingAim = 0;
 8006be0:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <avoidance_initialize+0x30>)
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
	avoidanceSpeedFactor = 1;
 8006be8:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <avoidance_initialize+0x34>)
 8006bea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006bee:	601a      	str	r2, [r3, #0]
}
 8006bf0:	bf00      	nop
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000648 	.word	0x20000648
 8006bf8:	2000064c 	.word	0x2000064c
 8006bfc:	20000650 	.word	0x20000650
 8006c00:	20000654 	.word	0x20000654
 8006c04:	00000000 	.word	0x00000000

08006c08 <avoidance_update>:


void avoidance_update(float t, Direction dir) {
 8006c08:	b5b0      	push	{r4, r5, r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006c12:	4603      	mov	r3, r0
 8006c14:	70fb      	strb	r3, [r7, #3]
	int distance = lidar_getDistance(dir);
 8006c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 f828 	bl	8007c70 <lidar_getDistance>
 8006c20:	60f8      	str	r0, [r7, #12]
	if(distance == 0)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <avoidance_update+0x26>
		distance = 1000;
 8006c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c2c:	60fb      	str	r3, [r7, #12]

	if ((avoidanceState == PATH_CLEAR || avoidanceState == PATH_CROWDED) && distance < LIDAR_THRESHOLD) {
 8006c2e:	4b5a      	ldr	r3, [pc, #360]	; (8006d98 <avoidance_update+0x190>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <avoidance_update+0x36>
 8006c36:	4b58      	ldr	r3, [pc, #352]	; (8006d98 <avoidance_update+0x190>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d115      	bne.n	8006c6a <avoidance_update+0x62>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006c44:	da11      	bge.n	8006c6a <avoidance_update+0x62>
		avoidanceState = PATH_OBSTRUCTED;
 8006c46:	4b54      	ldr	r3, [pc, #336]	; (8006d98 <avoidance_update+0x190>)
 8006c48:	2202      	movs	r2, #2
 8006c4a:	701a      	strb	r2, [r3, #0]
		printf("Obstacle detected. Waiting 2s...\r\n");
 8006c4c:	4853      	ldr	r0, [pc, #332]	; (8006d9c <avoidance_update+0x194>)
 8006c4e:	f003 fbd5 	bl	800a3fc <puts>
		propulsion_setSpeeds(0, 0, 0);
 8006c52:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8006da0 <avoidance_update+0x198>
 8006c56:	eddf 0a52 	vldr	s1, [pc, #328]	; 8006da0 <avoidance_update+0x198>
 8006c5a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8006da0 <avoidance_update+0x198>
 8006c5e:	f001 fbdb 	bl	8008418 <propulsion_setSpeeds>
		HAL_Delay(2000);
 8006c62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c66:	f7fb fe65 	bl	8002934 <HAL_Delay>
	}

	if ((avoidanceState == PATH_CLEAR || avoidanceState == PATH_OBSTRUCTED) && distance > LIDAR_THRESHOLD && distance < LIDAR_MAX_DISTANCE) {
 8006c6a:	4b4b      	ldr	r3, [pc, #300]	; (8006d98 <avoidance_update+0x190>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <avoidance_update+0x72>
 8006c72:	4b49      	ldr	r3, [pc, #292]	; (8006d98 <avoidance_update+0x190>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d11a      	bne.n	8006cb0 <avoidance_update+0xa8>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006c80:	dd16      	ble.n	8006cb0 <avoidance_update+0xa8>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006c88:	da12      	bge.n	8006cb0 <avoidance_update+0xa8>
		avoidanceSpeedFactor = (distance - LIDAR_THRESHOLD) / (LIDAR_MAX_DISTANCE - LIDAR_THRESHOLD);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8006c90:	4a44      	ldr	r2, [pc, #272]	; (8006da4 <avoidance_update+0x19c>)
 8006c92:	fb82 1203 	smull	r1, r2, r2, r3
 8006c96:	1192      	asrs	r2, r2, #6
 8006c98:	17db      	asrs	r3, r3, #31
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	ee07 3a90 	vmov	s15, r3
 8006ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ca4:	4b40      	ldr	r3, [pc, #256]	; (8006da8 <avoidance_update+0x1a0>)
 8006ca6:	edc3 7a00 	vstr	s15, [r3]
		avoidanceState = PATH_CROWDED;
 8006caa:	4b3b      	ldr	r3, [pc, #236]	; (8006d98 <avoidance_update+0x190>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	701a      	strb	r2, [r3, #0]
	}

	if (avoidanceState == PATH_CROWDED && distance > LIDAR_MAX_DISTANCE) {
 8006cb0:	4b39      	ldr	r3, [pc, #228]	; (8006d98 <avoidance_update+0x190>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d106      	bne.n	8006cc6 <avoidance_update+0xbe>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006cbe:	dd02      	ble.n	8006cc6 <avoidance_update+0xbe>
		avoidanceState = PATH_CLEAR;
 8006cc0:	4b35      	ldr	r3, [pc, #212]	; (8006d98 <avoidance_update+0x190>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
	}

	if (avoidanceState == PATH_OBSTRUCTED && distance >= LIDAR_THRESHOLD) {
 8006cc6:	4b34      	ldr	r3, [pc, #208]	; (8006d98 <avoidance_update+0x190>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d109      	bne.n	8006ce2 <avoidance_update+0xda>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006cd4:	db05      	blt.n	8006ce2 <avoidance_update+0xda>
		avoidanceState = PATH_CLEAR;
 8006cd6:	4b30      	ldr	r3, [pc, #192]	; (8006d98 <avoidance_update+0x190>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
		printf("Path cleared.\r\n");
 8006cdc:	4833      	ldr	r0, [pc, #204]	; (8006dac <avoidance_update+0x1a4>)
 8006cde:	f003 fb8d 	bl	800a3fc <puts>
	}

	if (avoidanceState == PATH_OBSTRUCTED && distance < LIDAR_THRESHOLD) {
 8006ce2:	4b2d      	ldr	r3, [pc, #180]	; (8006d98 <avoidance_update+0x190>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d126      	bne.n	8006d38 <avoidance_update+0x130>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006cf0:	da22      	bge.n	8006d38 <avoidance_update+0x130>
		avoidanceState = BACKTRACKING;
 8006cf2:	4b29      	ldr	r3, [pc, #164]	; (8006d98 <avoidance_update+0x190>)
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	701a      	strb	r2, [r3, #0]
		printf("Backtracking...\r\n");
 8006cf8:	482d      	ldr	r0, [pc, #180]	; (8006db0 <avoidance_update+0x1a8>)
 8006cfa:	f003 fb7f 	bl	800a3fc <puts>
		backtrackingAim = t - 0.2;
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7f9 fc42 	bl	8000588 <__aeabi_f2d>
 8006d04:	a320      	add	r3, pc, #128	; (adr r3, 8006d88 <avoidance_update+0x180>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f7f9 fadd 	bl	80002c8 <__aeabi_dsub>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4610      	mov	r0, r2
 8006d14:	4619      	mov	r1, r3
 8006d16:	f7f9 ff67 	bl	8000be8 <__aeabi_d2f>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4a25      	ldr	r2, [pc, #148]	; (8006db4 <avoidance_update+0x1ac>)
 8006d1e:	6013      	str	r3, [r2, #0]
		if (backtrackingAim < 0) {
 8006d20:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <avoidance_update+0x1ac>)
 8006d22:	edd3 7a00 	vldr	s15, [r3]
 8006d26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d2e:	d503      	bpl.n	8006d38 <avoidance_update+0x130>
			backtrackingAim = 0;
 8006d30:	4b20      	ldr	r3, [pc, #128]	; (8006db4 <avoidance_update+0x1ac>)
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
		}
	}

	if (avoidanceState == BACKTRACKING && t <= backtrackingAim + 0.01) {
 8006d38:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <avoidance_update+0x190>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d11e      	bne.n	8006d7e <avoidance_update+0x176>
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7f9 fc21 	bl	8000588 <__aeabi_f2d>
 8006d46:	4604      	mov	r4, r0
 8006d48:	460d      	mov	r5, r1
 8006d4a:	4b1a      	ldr	r3, [pc, #104]	; (8006db4 <avoidance_update+0x1ac>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7f9 fc1a 	bl	8000588 <__aeabi_f2d>
 8006d54:	a30e      	add	r3, pc, #56	; (adr r3, 8006d90 <avoidance_update+0x188>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 fab7 	bl	80002cc <__adddf3>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 fee3 	bl	8000b30 <__aeabi_dcmple>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d100      	bne.n	8006d72 <avoidance_update+0x16a>
		avoidanceState = PATH_CLEAR;
		printf("Trying again...\r\n");
	}
}
 8006d70:	e005      	b.n	8006d7e <avoidance_update+0x176>
		avoidanceState = PATH_CLEAR;
 8006d72:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <avoidance_update+0x190>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
		printf("Trying again...\r\n");
 8006d78:	480f      	ldr	r0, [pc, #60]	; (8006db8 <avoidance_update+0x1b0>)
 8006d7a:	f003 fb3f 	bl	800a3fc <puts>
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bdb0      	pop	{r4, r5, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	9999999a 	.word	0x9999999a
 8006d8c:	3fc99999 	.word	0x3fc99999
 8006d90:	47ae147b 	.word	0x47ae147b
 8006d94:	3f847ae1 	.word	0x3f847ae1
 8006d98:	20000648 	.word	0x20000648
 8006d9c:	0800e928 	.word	0x0800e928
 8006da0:	00000000 	.word	0x00000000
 8006da4:	51eb851f 	.word	0x51eb851f
 8006da8:	20000654 	.word	0x20000654
 8006dac:	0800e94c 	.word	0x0800e94c
 8006db0:	0800e95c 	.word	0x0800e95c
 8006db4:	20000650 	.word	0x20000650
 8006db8:	0800e970 	.word	0x0800e970

08006dbc <bezier_new>:
#include "bezier.h"


Bezier* bezier_new(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08c      	sub	sp, #48	; 0x30
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006dc6:	edc7 0a08 	vstr	s1, [r7, #32]
 8006dca:	ed87 1a07 	vstr	s2, [r7, #28]
 8006dce:	edc7 1a06 	vstr	s3, [r7, #24]
 8006dd2:	ed87 2a05 	vstr	s4, [r7, #20]
 8006dd6:	edc7 2a04 	vstr	s5, [r7, #16]
 8006dda:	ed87 3a03 	vstr	s6, [r7, #12]
 8006dde:	edc7 3a02 	vstr	s7, [r7, #8]
 8006de2:	6078      	str	r0, [r7, #4]
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 8006de4:	2028      	movs	r0, #40	; 0x28
 8006de6:	f002 fcd9 	bl	800979c <malloc>
 8006dea:	4603      	mov	r3, r0
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    bezier_set(b, x1, y1, x2, y2, x3, y3, x4, y4, lutLength);
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	edd7 3a02 	vldr	s7, [r7, #8]
 8006df4:	ed97 3a03 	vldr	s6, [r7, #12]
 8006df8:	edd7 2a04 	vldr	s5, [r7, #16]
 8006dfc:	ed97 2a05 	vldr	s4, [r7, #20]
 8006e00:	edd7 1a06 	vldr	s3, [r7, #24]
 8006e04:	ed97 1a07 	vldr	s2, [r7, #28]
 8006e08:	edd7 0a08 	vldr	s1, [r7, #32]
 8006e0c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e12:	f000 f812 	bl	8006e3a <bezier_set>
    return b;
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3730      	adds	r7, #48	; 0x30
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <bezier_newEmpty>:


Bezier* bezier_newEmpty() {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 8006e26:	2028      	movs	r0, #40	; 0x28
 8006e28:	f002 fcb8 	bl	800979c <malloc>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	607b      	str	r3, [r7, #4]
    return b;
 8006e30:	687b      	ldr	r3, [r7, #4]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <bezier_set>:


void bezier_set(Bezier* b, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 8006e3a:	b590      	push	{r4, r7, lr}
 8006e3c:	b08f      	sub	sp, #60	; 0x3c
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6278      	str	r0, [r7, #36]	; 0x24
 8006e42:	ed87 0a08 	vstr	s0, [r7, #32]
 8006e46:	edc7 0a07 	vstr	s1, [r7, #28]
 8006e4a:	ed87 1a06 	vstr	s2, [r7, #24]
 8006e4e:	edc7 1a05 	vstr	s3, [r7, #20]
 8006e52:	ed87 2a04 	vstr	s4, [r7, #16]
 8006e56:	edc7 2a03 	vstr	s5, [r7, #12]
 8006e5a:	ed87 3a02 	vstr	s6, [r7, #8]
 8006e5e:	edc7 3a01 	vstr	s7, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
    b->p1 = vector2_new(x1, y1);
 8006e64:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006e66:	edd7 0a07 	vldr	s1, [r7, #28]
 8006e6a:	ed97 0a08 	vldr	s0, [r7, #32]
 8006e6e:	f002 fb5f 	bl	8009530 <vector2_new>
 8006e72:	eeb0 7a40 	vmov.f32	s14, s0
 8006e76:	eef0 7a60 	vmov.f32	s15, s1
 8006e7a:	ed84 7a00 	vstr	s14, [r4]
 8006e7e:	edc4 7a01 	vstr	s15, [r4, #4]
    b->p2 = vector2_new(x2, y2);
 8006e82:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006e84:	edd7 0a05 	vldr	s1, [r7, #20]
 8006e88:	ed97 0a06 	vldr	s0, [r7, #24]
 8006e8c:	f002 fb50 	bl	8009530 <vector2_new>
 8006e90:	eeb0 7a40 	vmov.f32	s14, s0
 8006e94:	eef0 7a60 	vmov.f32	s15, s1
 8006e98:	ed84 7a02 	vstr	s14, [r4, #8]
 8006e9c:	edc4 7a03 	vstr	s15, [r4, #12]
    b->p3 = vector2_new(x3, y3);
 8006ea0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006ea2:	edd7 0a03 	vldr	s1, [r7, #12]
 8006ea6:	ed97 0a04 	vldr	s0, [r7, #16]
 8006eaa:	f002 fb41 	bl	8009530 <vector2_new>
 8006eae:	eeb0 7a40 	vmov.f32	s14, s0
 8006eb2:	eef0 7a60 	vmov.f32	s15, s1
 8006eb6:	ed84 7a04 	vstr	s14, [r4, #16]
 8006eba:	edc4 7a05 	vstr	s15, [r4, #20]
    b->p4 = vector2_new(x4, y4);
 8006ebe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006ec0:	edd7 0a01 	vldr	s1, [r7, #4]
 8006ec4:	ed97 0a02 	vldr	s0, [r7, #8]
 8006ec8:	f002 fb32 	bl	8009530 <vector2_new>
 8006ecc:	eeb0 7a40 	vmov.f32	s14, s0
 8006ed0:	eef0 7a60 	vmov.f32	s15, s1
 8006ed4:	ed84 7a06 	vstr	s14, [r4, #24]
 8006ed8:	edc4 7a07 	vstr	s15, [r4, #28]
    b->lutLength = lutLength;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	625a      	str	r2, [r3, #36]	; 0x24
    b->lut = (Vector2*) malloc(sizeof(Vector2) * b->lutLength);
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f002 fc57 	bl	800979c <malloc>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	621a      	str	r2, [r3, #32]
    for (int i=0; i<b->lutLength; i++) {
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8006efa:	e02b      	b.n	8006f54 <bezier_set+0x11a>
        float t = (float) i/(b->lutLength-1);
 8006efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f18:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Vector2 eval = bezier_eval(b, t);
 8006f1c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8006f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f22:	f000 f821 	bl	8006f68 <bezier_eval>
 8006f26:	eeb0 7a40 	vmov.f32	s14, s0
 8006f2a:	eef0 7a60 	vmov.f32	s15, s1
 8006f2e:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8006f32:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        b->lut[i] = eval;
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	4413      	add	r3, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f4a:	e882 0003 	stmia.w	r2, {r0, r1}
    for (int i=0; i<b->lutLength; i++) {
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	3301      	adds	r3, #1
 8006f52:	637b      	str	r3, [r7, #52]	; 0x34
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	dbce      	blt.n	8006efc <bezier_set+0xc2>
    }
}
 8006f5e:	bf00      	nop
 8006f60:	bf00      	nop
 8006f62:	373c      	adds	r7, #60	; 0x3c
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd90      	pop	{r4, r7, pc}

08006f68 <bezier_eval>:
    vector2_display(b->p4);
    printf("}\r\n");
}


Vector2 bezier_eval(Bezier* b, float t) {
 8006f68:	b480      	push	{r7}
 8006f6a:	b08d      	sub	sp, #52	; 0x34
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8006f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = b->p1.x * u*u*u + b->p2.x * 3*u*u*t + b->p3.x * 3*u*t*t + b->p4.x * t*t*t;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	ed93 7a00 	vldr	s14, [r3]
 8006f8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f92:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	edd3 7a02 	vldr	s15, [r3, #8]
 8006fa8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8006fac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006fb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006fb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006fb8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006fbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	edd3 7a04 	vldr	s15, [r3, #16]
 8006fd2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8006fd6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006fda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006fde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006fe2:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fe6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006fea:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ff2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	edd3 6a06 	vldr	s13, [r3, #24]
 8006ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8007000:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007004:	edd7 7a02 	vldr	s15, [r7, #8]
 8007008:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800700c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007018:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = b->p1.y * u*u*u + b->p2.y * 3*u*u*t + b->p3.y * 3*u*t*t + b->p4.y * t*t*t;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007022:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800702a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800702e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007032:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007040:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007044:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007048:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800704c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007050:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007054:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007058:	edd7 7a02 	vldr	s15, [r7, #8]
 800705c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	edd3 7a05 	vldr	s15, [r3, #20]
 800706a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800706e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007072:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007076:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800707a:	edd7 7a02 	vldr	s15, [r7, #8]
 800707e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007082:	edd7 7a02 	vldr	s15, [r7, #8]
 8007086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800708a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	edd3 6a07 	vldr	s13, [r3, #28]
 8007094:	edd7 7a02 	vldr	s15, [r7, #8]
 8007098:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800709c:	edd7 7a02 	vldr	s15, [r7, #8]
 80070a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80070a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80070a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	61bb      	str	r3, [r7, #24]
    return eval;
 80070bc:	f107 031c 	add.w	r3, r7, #28
 80070c0:	f107 0214 	add.w	r2, r7, #20
 80070c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80070cc:	69fa      	ldr	r2, [r7, #28]
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	ee07 2a10 	vmov	s14, r2
 80070d4:	ee07 3a90 	vmov	s15, r3
}
 80070d8:	eeb0 0a47 	vmov.f32	s0, s14
 80070dc:	eef0 0a67 	vmov.f32	s1, s15
 80070e0:	3734      	adds	r7, #52	; 0x34
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <bezier_deriv1>:
    int i = round(t*(b->lutLength-1));
    return b->lut[i];
}


Vector2 bezier_deriv1(Bezier* b, float t) {
 80070ea:	b480      	push	{r7}
 80070ec:	b08d      	sub	sp, #52	; 0x34
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 80070f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80070fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007102:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p2.x - b->p1.x) * 3*u*u + (b->p3.x - b->p2.x) * 6*u*t + (b->p4.x - b->p3.x) * 3*t*t;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	ed93 7a02 	vldr	s14, [r3, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	edd3 7a00 	vldr	s15, [r3]
 8007112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007116:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800711a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800711e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007126:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800712a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	edd3 6a04 	vldr	s13, [r3, #16]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	edd3 7a02 	vldr	s15, [r3, #8]
 800713a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800713e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8007142:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007146:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800714a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800714e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007156:	ee37 7a27 	vadd.f32	s14, s14, s15
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	edd3 6a06 	vldr	s13, [r3, #24]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	edd3 7a04 	vldr	s15, [r3, #16]
 8007166:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800716a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800716e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007172:	edd7 7a02 	vldr	s15, [r7, #8]
 8007176:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800717a:	edd7 7a02 	vldr	s15, [r7, #8]
 800717e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007186:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p2.y - b->p1.y) * 3*u*u + (b->p3.y - b->p2.y) * 6*u*t + (b->p4.y - b->p3.y) * 3*t*t;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	ed93 7a03 	vldr	s14, [r3, #12]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	edd3 7a01 	vldr	s15, [r3, #4]
 8007196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800719a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800719e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80071a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80071ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	edd3 6a05 	vldr	s13, [r3, #20]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80071be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80071c2:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80071c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80071ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80071ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80071d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80071d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	edd3 6a07 	vldr	s13, [r3, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80071ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80071ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80071f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80071f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80071fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80071fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8007202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800720a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	61bb      	str	r3, [r7, #24]
    return eval;
 8007216:	f107 031c 	add.w	r3, r7, #28
 800721a:	f107 0214 	add.w	r2, r7, #20
 800721e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007222:	e883 0003 	stmia.w	r3, {r0, r1}
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	ee07 2a10 	vmov	s14, r2
 800722e:	ee07 3a90 	vmov	s15, r3
}
 8007232:	eeb0 0a47 	vmov.f32	s0, s14
 8007236:	eef0 0a67 	vmov.f32	s1, s15
 800723a:	3734      	adds	r7, #52	; 0x34
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <bezier_deriv2>:


Vector2 bezier_deriv2(Bezier* b, float t) {
 8007244:	b480      	push	{r7}
 8007246:	b08d      	sub	sp, #52	; 0x34
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8007250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007254:	edd7 7a02 	vldr	s15, [r7, #8]
 8007258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800725c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p3.x - 2*b->p2.x + b->p1.x) * 6*u + (b->p4.x - 2*b->p3.x + b->p2.x) * 6*t;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	ed93 7a04 	vldr	s14, [r3, #16]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	edd3 7a02 	vldr	s15, [r3, #8]
 800726c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	edd3 7a00 	vldr	s15, [r3]
 800727a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800727e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8007282:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007286:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800728a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	edd3 6a06 	vldr	s13, [r3, #24]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	edd3 7a04 	vldr	s15, [r3, #16]
 800729a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800729e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80072a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ac:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80072b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80072b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80072b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p3.y - 2*b->p2.y + b->p1.y) * 6*u + (b->p4.y - 2*b->p3.y + b->p2.y) * 6*t;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	ed93 7a05 	vldr	s14, [r3, #20]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80072d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80072d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	edd3 7a01 	vldr	s15, [r3, #4]
 80072de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072e2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80072e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80072ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80072ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	edd3 6a07 	vldr	s13, [r3, #28]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80072fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007302:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	edd3 7a03 	vldr	s15, [r3, #12]
 800730c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007310:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8007314:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007318:	edd7 7a02 	vldr	s15, [r7, #8]
 800731c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007324:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	61bb      	str	r3, [r7, #24]
    return eval;
 8007330:	f107 031c 	add.w	r3, r7, #28
 8007334:	f107 0214 	add.w	r2, r7, #20
 8007338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800733c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	ee07 2a10 	vmov	s14, r2
 8007348:	ee07 3a90 	vmov	s15, r3
}
 800734c:	eeb0 0a47 	vmov.f32	s0, s14
 8007350:	eef0 0a67 	vmov.f32	s1, s15
 8007354:	3734      	adds	r7, #52	; 0x34
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
	...

08007360 <bezier_curvature>:


float bezier_curvature(Bezier* b, float t) {
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	ed87 0a00 	vstr	s0, [r7]
    Vector2 diff1 = bezier_deriv1(b, t); // B'(t)
 800736c:	ed97 0a00 	vldr	s0, [r7]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff feba 	bl	80070ea <bezier_deriv1>
 8007376:	eeb0 7a40 	vmov.f32	s14, s0
 800737a:	eef0 7a60 	vmov.f32	s15, s1
 800737e:	ed87 7a04 	vstr	s14, [r7, #16]
 8007382:	edc7 7a05 	vstr	s15, [r7, #20]
    Vector2 diff2 = bezier_deriv2(b, t); // B''(t)
 8007386:	ed97 0a00 	vldr	s0, [r7]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff ff5a 	bl	8007244 <bezier_deriv2>
 8007390:	eeb0 7a40 	vmov.f32	s14, s0
 8007394:	eef0 7a60 	vmov.f32	s15, s1
 8007398:	ed87 7a02 	vstr	s14, [r7, #8]
 800739c:	edc7 7a03 	vstr	s15, [r7, #12]
    float num = vector2_cross(diff1, diff2);
 80073a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80073a4:	edd7 6a03 	vldr	s13, [r7, #12]
 80073a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80073ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80073b0:	eeb0 1a46 	vmov.f32	s2, s12
 80073b4:	eef0 1a66 	vmov.f32	s3, s13
 80073b8:	eeb0 0a47 	vmov.f32	s0, s14
 80073bc:	eef0 0a67 	vmov.f32	s1, s15
 80073c0:	f002 f9a6 	bl	8009710 <vector2_cross>
 80073c4:	ed87 0a07 	vstr	s0, [r7, #28]
    float den = vector2_norm(diff1);
 80073c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80073cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80073d0:	eeb0 0a47 	vmov.f32	s0, s14
 80073d4:	eef0 0a67 	vmov.f32	s1, s15
 80073d8:	f002 f8cc 	bl	8009574 <vector2_norm>
 80073dc:	ed87 0a06 	vstr	s0, [r7, #24]
    if (den == 0)
 80073e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80073e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80073e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ec:	d102      	bne.n	80073f4 <bezier_curvature+0x94>
        return INFINITY;
 80073ee:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800741c <bezier_curvature+0xbc>
 80073f2:	e00b      	b.n	800740c <bezier_curvature+0xac>
    return num/(den*den*den);
 80073f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80073f8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80073fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8007400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007404:	ed97 7a07 	vldr	s14, [r7, #28]
 8007408:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 800740c:	eef0 7a66 	vmov.f32	s15, s13
 8007410:	eeb0 0a67 	vmov.f32	s0, s15
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	7f800000 	.word	0x7f800000

08007420 <bezier_projectLut>:


float bezier_projectLut(Bezier* b, Vector2 p) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	; 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	eeb0 7a40 	vmov.f32	s14, s0
 800742c:	eef0 7a60 	vmov.f32	s15, s1
 8007430:	ed87 7a01 	vstr	s14, [r7, #4]
 8007434:	edc7 7a02 	vstr	s15, [r7, #8]
    float minDist = INFINITY;
 8007438:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
    float minIndex = 0;
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	623b      	str	r3, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 8007444:	2300      	movs	r3, #0
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	e02d      	b.n	80074a6 <bezier_projectLut+0x86>
        float dist = vector2_dist2(p, b->lut[i]);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1a      	ldr	r2, [r3, #32]
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	4413      	add	r3, r2
 8007454:	ed93 6a00 	vldr	s12, [r3]
 8007458:	edd3 6a01 	vldr	s13, [r3, #4]
 800745c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007460:	edd7 7a02 	vldr	s15, [r7, #8]
 8007464:	eeb0 1a46 	vmov.f32	s2, s12
 8007468:	eef0 1a66 	vmov.f32	s3, s13
 800746c:	eeb0 0a47 	vmov.f32	s0, s14
 8007470:	eef0 0a67 	vmov.f32	s1, s15
 8007474:	f002 f8da 	bl	800962c <vector2_dist2>
 8007478:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < minDist) {
 800747c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007480:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800748c:	d508      	bpl.n	80074a0 <bezier_projectLut+0x80>
            minDist = dist;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
            minIndex = i;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800749c:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	dbcc      	blt.n	800744a <bezier_projectLut+0x2a>
        }
    }
    float tLut = (float) minIndex/(b->lutLength-1);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	3b01      	subs	r3, #1
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074be:	edd7 6a08 	vldr	s13, [r7, #32]
 80074c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c6:	edc7 7a06 	vstr	s15, [r7, #24]
    return tLut;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	ee07 3a90 	vmov	s15, r3
}
 80074d0:	eeb0 0a67 	vmov.f32	s0, s15
 80074d4:	3728      	adds	r7, #40	; 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <bezier_project>:


float bezier_project(Bezier* b, Vector2 p, float precision) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	ed2d 8b02 	vpush	{d8}
 80074e2:	b08c      	sub	sp, #48	; 0x30
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	eeb0 7a40 	vmov.f32	s14, s0
 80074ec:	eef0 7a60 	vmov.f32	s15, s1
 80074f0:	ed87 1a00 	vstr	s2, [r7]
 80074f4:	ed87 7a01 	vstr	s14, [r7, #4]
 80074f8:	edc7 7a02 	vstr	s15, [r7, #8]
    float tLut = bezier_projectLut(b, p);
 80074fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8007500:	edd7 7a02 	vldr	s15, [r7, #8]
 8007504:	eeb0 0a47 	vmov.f32	s0, s14
 8007508:	eef0 0a67 	vmov.f32	s1, s15
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff ff87 	bl	8007420 <bezier_projectLut>
 8007512:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    float halfWidth = 1.0/(b->lutLength-1);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	3b01      	subs	r3, #1
 800751c:	4618      	mov	r0, r3
 800751e:	f7f9 f821 	bl	8000564 <__aeabi_i2d>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	f04f 0000 	mov.w	r0, #0
 800752a:	495b      	ldr	r1, [pc, #364]	; (8007698 <bezier_project+0x1bc>)
 800752c:	f7f9 f9ae 	bl	800088c <__aeabi_ddiv>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	f7f9 fb56 	bl	8000be8 <__aeabi_d2f>
 800753c:	4603      	mov	r3, r0
 800753e:	623b      	str	r3, [r7, #32]

    float t_a = tLut - halfWidth;
 8007540:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007544:	edd7 7a08 	vldr	s15, [r7, #32]
 8007548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800754c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t_a = (t_a<0)?0:t_a;
 8007550:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755c:	d502      	bpl.n	8007564 <bezier_project+0x88>
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	e000      	b.n	8007566 <bezier_project+0x8a>
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c

    float t_b = tLut + halfWidth;
 8007568:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800756c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007574:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t_b = (t_b>1)?1:t_b;
 8007578:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800757c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007588:	dd02      	ble.n	8007590 <bezier_project+0xb4>
 800758a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800758e:	e000      	b.n	8007592 <bezier_project+0xb6>
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28

    Vector2 p_a, p_b;

    while (t_b - t_a > precision) {
 8007594:	e05f      	b.n	8007656 <bezier_project+0x17a>
        p_a = bezier_eval(b, t_a);
 8007596:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff fce4 	bl	8006f68 <bezier_eval>
 80075a0:	eeb0 7a40 	vmov.f32	s14, s0
 80075a4:	eef0 7a60 	vmov.f32	s15, s1
 80075a8:	ed87 7a06 	vstr	s14, [r7, #24]
 80075ac:	edc7 7a07 	vstr	s15, [r7, #28]
        p_b = bezier_eval(b, t_b);
 80075b0:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff fcd7 	bl	8006f68 <bezier_eval>
 80075ba:	eeb0 7a40 	vmov.f32	s14, s0
 80075be:	eef0 7a60 	vmov.f32	s15, s1
 80075c2:	ed87 7a04 	vstr	s14, [r7, #16]
 80075c6:	edc7 7a05 	vstr	s15, [r7, #20]
        if (vector2_dist2(p, p_a) < vector2_dist2(p, p_b))
 80075ca:	ed97 6a06 	vldr	s12, [r7, #24]
 80075ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80075d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80075da:	eeb0 1a46 	vmov.f32	s2, s12
 80075de:	eef0 1a66 	vmov.f32	s3, s13
 80075e2:	eeb0 0a47 	vmov.f32	s0, s14
 80075e6:	eef0 0a67 	vmov.f32	s1, s15
 80075ea:	f002 f81f 	bl	800962c <vector2_dist2>
 80075ee:	eeb0 8a40 	vmov.f32	s16, s0
 80075f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80075f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80075fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80075fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8007602:	eeb0 1a46 	vmov.f32	s2, s12
 8007606:	eef0 1a66 	vmov.f32	s3, s13
 800760a:	eeb0 0a47 	vmov.f32	s0, s14
 800760e:	eef0 0a67 	vmov.f32	s1, s15
 8007612:	f002 f80b 	bl	800962c <vector2_dist2>
 8007616:	eef0 7a40 	vmov.f32	s15, s0
 800761a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007622:	d50c      	bpl.n	800763e <bezier_project+0x162>
            t_b = (t_a + t_b)/2;
 8007624:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007628:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800762c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007630:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007638:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800763c:	e00b      	b.n	8007656 <bezier_project+0x17a>
        else
            t_a = (t_a + t_b)/2;
 800763e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007642:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800764a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800764e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007652:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while (t_b - t_a > precision) {
 8007656:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800765a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800765e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007662:	ed97 7a00 	vldr	s14, [r7]
 8007666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800766a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766e:	d492      	bmi.n	8007596 <bezier_project+0xba>
    }
    return (t_a + t_b)/2;
 8007670:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007674:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800767c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007680:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007684:	eef0 7a66 	vmov.f32	s15, s13
}
 8007688:	eeb0 0a67 	vmov.f32	s0, s15
 800768c:	3730      	adds	r7, #48	; 0x30
 800768e:	46bd      	mov	sp, r7
 8007690:	ecbd 8b02 	vpop	{d8}
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	3ff00000 	.word	0x3ff00000

0800769c <Pcorr>:
float derivative[3] = {0.0,0.0,0.0};



float Pcorr(float Kp, float error)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80076a6:	edc7 0a00 	vstr	s1, [r7]
	return Kp*error;
 80076aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80076ae:	edd7 7a00 	vldr	s15, [r7]
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80076b6:	eeb0 0a67 	vmov.f32	s0, s15
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <Icorr>:

float Icorr(float Ki, float error, float * integral, float Ilim)
{
 80076c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	ed87 0a03 	vstr	s0, [r7, #12]
 80076d0:	edc7 0a02 	vstr	s1, [r7, #8]
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	ed87 1a00 	vstr	s2, [r7]
	*integral += error;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	ed93 7a00 	vldr	s14, [r3]
 80076e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80076e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	edc3 7a00 	vstr	s15, [r3]
	return (fabs(*integral) > Ilim/Ki?(Ilim*(*integral)/(Ki*fabs(*integral))):(*integral));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	edd3 7a00 	vldr	s15, [r3]
 80076f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80076f8:	ed97 6a00 	vldr	s12, [r7]
 80076fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8007700:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770c:	dd2e      	ble.n	800776c <Icorr+0xa8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	ed93 7a00 	vldr	s14, [r3]
 8007714:	edd7 7a00 	vldr	s15, [r7]
 8007718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771c:	ee17 0a90 	vmov	r0, s15
 8007720:	f7f8 ff32 	bl	8000588 <__aeabi_f2d>
 8007724:	4604      	mov	r4, r0
 8007726:	460d      	mov	r5, r1
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7f8 ff2d 	bl	8000588 <__aeabi_f2d>
 800772e:	4680      	mov	r8, r0
 8007730:	4689      	mov	r9, r1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	edd3 7a00 	vldr	s15, [r3]
 8007738:	eef0 7ae7 	vabs.f32	s15, s15
 800773c:	ee17 0a90 	vmov	r0, s15
 8007740:	f7f8 ff22 	bl	8000588 <__aeabi_f2d>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4640      	mov	r0, r8
 800774a:	4649      	mov	r1, r9
 800774c:	f7f8 ff74 	bl	8000638 <__aeabi_dmul>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4620      	mov	r0, r4
 8007756:	4629      	mov	r1, r5
 8007758:	f7f9 f898 	bl	800088c <__aeabi_ddiv>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4610      	mov	r0, r2
 8007762:	4619      	mov	r1, r3
 8007764:	f7f9 fa40 	bl	8000be8 <__aeabi_d2f>
 8007768:	4603      	mov	r3, r0
 800776a:	e001      	b.n	8007770 <Icorr+0xac>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	ee07 3a90 	vmov	s15, r3
}
 8007774:	eeb0 0a67 	vmov.f32	s0, s15
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007780 <deriv>:

float deriv(float a, float b, float dt)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	ed87 0a03 	vstr	s0, [r7, #12]
 800778a:	edc7 0a02 	vstr	s1, [r7, #8]
 800778e:	ed87 1a01 	vstr	s2, [r7, #4]
	return (b-a)/dt;
 8007792:	ed97 7a02 	vldr	s14, [r7, #8]
 8007796:	edd7 7a03 	vldr	s15, [r7, #12]
 800779a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800779e:	edd7 7a01 	vldr	s15, [r7, #4]
 80077a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80077a6:	eef0 7a66 	vmov.f32	s15, s13
}
 80077aa:	eeb0 0a67 	vmov.f32	s0, s15
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <Dcorr>:

float Dcorr(float * error, float Kd, float dt)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	ed2d 8b02 	vpush	{d8}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80077c8:	edc7 0a01 	vstr	s1, [r7, #4]
	dt = (dt == 0?0.0001:dt);
 80077cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80077d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80077d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d8:	d001      	beq.n	80077de <Dcorr+0x26>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	e000      	b.n	80077e0 <Dcorr+0x28>
 80077de:	4b25      	ldr	r3, [pc, #148]	; (8007874 <Dcorr+0xbc>)
 80077e0:	607b      	str	r3, [r7, #4]
	/*derivative[2] = derivative[1];
	derivative[1] = derivative[0];
	derivative[0] = deriv(error[0],error[1],dt);
	return Kd*(derivative[0]+derivative[1]+derivative[2])/3;*/
	return Kd*(deriv(error[0],error[1],dt)+deriv(error[1],error[2],dt)+deriv(error[0],error[2],dt))/3;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	edd3 7a00 	vldr	s15, [r3]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3304      	adds	r3, #4
 80077ec:	ed93 7a00 	vldr	s14, [r3]
 80077f0:	ed97 1a01 	vldr	s2, [r7, #4]
 80077f4:	eef0 0a47 	vmov.f32	s1, s14
 80077f8:	eeb0 0a67 	vmov.f32	s0, s15
 80077fc:	f7ff ffc0 	bl	8007780 <deriv>
 8007800:	eeb0 8a40 	vmov.f32	s16, s0
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3304      	adds	r3, #4
 8007808:	edd3 7a00 	vldr	s15, [r3]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3308      	adds	r3, #8
 8007810:	ed93 7a00 	vldr	s14, [r3]
 8007814:	ed97 1a01 	vldr	s2, [r7, #4]
 8007818:	eef0 0a47 	vmov.f32	s1, s14
 800781c:	eeb0 0a67 	vmov.f32	s0, s15
 8007820:	f7ff ffae 	bl	8007780 <deriv>
 8007824:	eef0 7a40 	vmov.f32	s15, s0
 8007828:	ee38 8a27 	vadd.f32	s16, s16, s15
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	edd3 7a00 	vldr	s15, [r3]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3308      	adds	r3, #8
 8007836:	ed93 7a00 	vldr	s14, [r3]
 800783a:	ed97 1a01 	vldr	s2, [r7, #4]
 800783e:	eef0 0a47 	vmov.f32	s1, s14
 8007842:	eeb0 0a67 	vmov.f32	s0, s15
 8007846:	f7ff ff9b 	bl	8007780 <deriv>
 800784a:	eef0 7a40 	vmov.f32	s15, s0
 800784e:	ee38 7a27 	vadd.f32	s14, s16, s15
 8007852:	edd7 7a02 	vldr	s15, [r7, #8]
 8007856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800785e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007862:	eef0 7a66 	vmov.f32	s15, s13
	//return Kd*deriv(error[0],error[1],dt);
}
 8007866:	eeb0 0a67 	vmov.f32	s0, s15
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	ecbd 8b02 	vpop	{d8}
 8007872:	bd80      	pop	{r7, pc}
 8007874:	38d1b717 	.word	0x38d1b717

08007878 <corrector>:
 * Ilim : Integral correction bounds
 * integral : integral value
 */

float corrector(float * error, float correction, float Kp, float Ki, float Kd, float Kf, float dt, float Ilim, float * integral)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	ed2d 8b02 	vpush	{d8}
 800787e:	b08a      	sub	sp, #40	; 0x28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6278      	str	r0, [r7, #36]	; 0x24
 8007884:	ed87 0a08 	vstr	s0, [r7, #32]
 8007888:	edc7 0a07 	vstr	s1, [r7, #28]
 800788c:	ed87 1a06 	vstr	s2, [r7, #24]
 8007890:	edc7 1a05 	vstr	s3, [r7, #20]
 8007894:	ed87 2a04 	vstr	s4, [r7, #16]
 8007898:	edc7 2a03 	vstr	s5, [r7, #12]
 800789c:	ed87 3a02 	vstr	s6, [r7, #8]
 80078a0:	6079      	str	r1, [r7, #4]
	return -Pcorr(Kp, error[0]) - Icorr(Ki, error[0], integral, Ilim) - Dcorr(error,Kd,dt) + Kf*(correction);
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	edd3 7a00 	vldr	s15, [r3]
 80078a8:	eef0 0a67 	vmov.f32	s1, s15
 80078ac:	ed97 0a07 	vldr	s0, [r7, #28]
 80078b0:	f7ff fef4 	bl	800769c <Pcorr>
 80078b4:	eef0 7a40 	vmov.f32	s15, s0
 80078b8:	eeb1 8a67 	vneg.f32	s16, s15
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	edd3 7a00 	vldr	s15, [r3]
 80078c2:	ed97 1a02 	vldr	s2, [r7, #8]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	eef0 0a67 	vmov.f32	s1, s15
 80078cc:	ed97 0a06 	vldr	s0, [r7, #24]
 80078d0:	f7ff fef8 	bl	80076c4 <Icorr>
 80078d4:	eef0 7a40 	vmov.f32	s15, s0
 80078d8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80078dc:	edd7 0a03 	vldr	s1, [r7, #12]
 80078e0:	ed97 0a05 	vldr	s0, [r7, #20]
 80078e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078e6:	f7ff ff67 	bl	80077b8 <Dcorr>
 80078ea:	eef0 7a40 	vmov.f32	s15, s0
 80078ee:	ee38 7a67 	vsub.f32	s14, s16, s15
 80078f2:	edd7 6a04 	vldr	s13, [r7, #16]
 80078f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80078fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8007902:	eeb0 0a67 	vmov.f32	s0, s15
 8007906:	3728      	adds	r7, #40	; 0x28
 8007908:	46bd      	mov	sp, r7
 800790a:	ecbd 8b02 	vpop	{d8}
 800790e:	bd80      	pop	{r7, pc}

08007910 <KalmanInit>:
 * stateInit = {x,v,a}: initial current state, strategy start point
 * stateFin = {x,v,a}: estimated future state (prior state for next iteration)
 * dt : time interval
 */
void KalmanInit(float * stateInit, float * stateFin, float dt)
{
 8007910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	ed87 0a01 	vstr	s0, [r7, #4]
	stateFin[0] = stateInit[0] + stateInit[1]*dt + stateInit[2]*pow(dt,2)/2;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	ed93 7a00 	vldr	s14, [r3]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3304      	adds	r3, #4
 800792a:	edd3 6a00 	vldr	s13, [r3]
 800792e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800793a:	ee17 0a90 	vmov	r0, s15
 800793e:	f7f8 fe23 	bl	8000588 <__aeabi_f2d>
 8007942:	4604      	mov	r4, r0
 8007944:	460d      	mov	r5, r1
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3308      	adds	r3, #8
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f7f8 fe1b 	bl	8000588 <__aeabi_f2d>
 8007952:	4680      	mov	r8, r0
 8007954:	4689      	mov	r9, r1
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7f8 fe16 	bl	8000588 <__aeabi_f2d>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80079e8 <KalmanInit+0xd8>
 8007964:	ec43 2b10 	vmov	d0, r2, r3
 8007968:	f004 fc48 	bl	800c1fc <pow>
 800796c:	ec53 2b10 	vmov	r2, r3, d0
 8007970:	4640      	mov	r0, r8
 8007972:	4649      	mov	r1, r9
 8007974:	f7f8 fe60 	bl	8000638 <__aeabi_dmul>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4610      	mov	r0, r2
 800797e:	4619      	mov	r1, r3
 8007980:	f04f 0200 	mov.w	r2, #0
 8007984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007988:	f7f8 ff80 	bl	800088c <__aeabi_ddiv>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	f7f8 fc9a 	bl	80002cc <__adddf3>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4610      	mov	r0, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	f7f9 f922 	bl	8000be8 <__aeabi_d2f>
 80079a4:	4602      	mov	r2, r0
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	601a      	str	r2, [r3, #0]
	stateFin[1] = stateInit[1] + stateInit[2]*dt;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3304      	adds	r3, #4
 80079ae:	ed93 7a00 	vldr	s14, [r3]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3308      	adds	r3, #8
 80079b6:	edd3 6a00 	vldr	s13, [r3]
 80079ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80079be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	3304      	adds	r3, #4
 80079c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079ca:	edc3 7a00 	vstr	s15, [r3]
	stateFin[2] = stateInit[2];
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	3308      	adds	r3, #8
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	6892      	ldr	r2, [r2, #8]
 80079d6:	601a      	str	r2, [r3, #0]
}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80079e2:	bf00      	nop
 80079e4:	f3af 8000 	nop.w
 80079e8:	00000000 	.word	0x00000000
 80079ec:	40000000 	.word	0x40000000

080079f0 <drv8825_initialize>:


void drv8825_initialize(Stepper *stepper, uint16_t enablePin,
                  GPIO_TypeDef* enableGPIO, uint16_t dirPin, 
                  GPIO_TypeDef *dirGPIO, TIM_HandleTypeDef *timer, 
                  uint8_t channel) {
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	607a      	str	r2, [r7, #4]
 80079fa:	461a      	mov	r2, r3
 80079fc:	460b      	mov	r3, r1
 80079fe:	817b      	strh	r3, [r7, #10]
 8007a00:	4613      	mov	r3, r2
 8007a02:	813b      	strh	r3, [r7, #8]
	stepper->enablePin = enablePin;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	897a      	ldrh	r2, [r7, #10]
 8007a08:	801a      	strh	r2, [r3, #0]
	stepper->enableGPIO = enableGPIO;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	605a      	str	r2, [r3, #4]

	stepper->dirPin = dirPin;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	893a      	ldrh	r2, [r7, #8]
 8007a14:	811a      	strh	r2, [r3, #8]
	stepper->dirGPIO = dirGPIO;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	60da      	str	r2, [r3, #12]

	stepper->timer = timer;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	611a      	str	r2, [r3, #16]
	stepper->channel = channel;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007a28:	751a      	strb	r2, [r3, #20]
}
 8007a2a:	bf00      	nop
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <drv8825_setDirection>:


void drv8825_setDirection(Stepper *stepper, StepperDirection direction) {
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(stepper->dirGPIO, stepper->dirPin, (uint8_t) direction);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68d8      	ldr	r0, [r3, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	891b      	ldrh	r3, [r3, #8]
 8007a4a:	78fa      	ldrb	r2, [r7, #3]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f7fb fe55 	bl	80036fc <HAL_GPIO_WritePin>
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <drv8825_enable>:


void drv8825_enable(Stepper *stepper) {
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6858      	ldr	r0, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f7fb fe45 	bl	80036fc <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin, 
		(uint8_t) ACTIVE
	);
}
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <drv8825_disable>:


void drv8825_disable(Stepper *stepper) {
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6858      	ldr	r0, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	f7fb fe35 	bl	80036fc <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin,
		(uint8_t) PASSIVE
	);
}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <drv8825_setPWMFrequency>:


void drv8825_setPWMFrequency(Stepper* stepper, uint16_t frequency) {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if (frequency != 0) {
 8007aa8:	887b      	ldrh	r3, [r7, #2]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00b      	beq.n	8007ac6 <drv8825_setPWMFrequency+0x2a>
		stepper->timer->Init.Prescaler = 179;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	22b3      	movs	r2, #179	; 0xb3
 8007ab4:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = (uint32_t)1000000/frequency;
 8007ab6:	887a      	ldrh	r2, [r7, #2]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	4945      	ldr	r1, [pc, #276]	; (8007bd4 <drv8825_setPWMFrequency+0x138>)
 8007abe:	fbb1 f2f2 	udiv	r2, r1, r2
 8007ac2:	60da      	str	r2, [r3, #12]
 8007ac4:	e009      	b.n	8007ada <drv8825_setPWMFrequency+0x3e>
	} else {
		stepper->timer->Init.Prescaler = 0xFFFE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ace:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = 0xFFFE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ad8:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(stepper->timer) != HAL_OK) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fc fc5e 	bl	80043a0 <HAL_TIM_Base_Init>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <drv8825_setPWMFrequency+0x52>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8007aea:	f7f9 fde1 	bl	80016b0 <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(stepper->timer) != HAL_OK) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fc fd7c 	bl	80045f0 <HAL_TIM_PWM_Init>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <drv8825_setPWMFrequency+0x66>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8007afe:	f7f9 fdd7 	bl	80016b0 <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(stepper->timer, stepper->channel);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691a      	ldr	r2, [r3, #16]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	7d1b      	ldrb	r3, [r3, #20]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	f7fc fdc9 	bl	80046a4 <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch (stepper->channel) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	7d1b      	ldrb	r3, [r3, #20]
 8007b16:	2b0c      	cmp	r3, #12
 8007b18:	d858      	bhi.n	8007bcc <drv8825_setPWMFrequency+0x130>
 8007b1a:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <drv8825_setPWMFrequency+0x84>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007b55 	.word	0x08007b55
 8007b24:	08007bcd 	.word	0x08007bcd
 8007b28:	08007bcd 	.word	0x08007bcd
 8007b2c:	08007bcd 	.word	0x08007bcd
 8007b30:	08007b73 	.word	0x08007b73
 8007b34:	08007bcd 	.word	0x08007bcd
 8007b38:	08007bcd 	.word	0x08007bcd
 8007b3c:	08007bcd 	.word	0x08007bcd
 8007b40:	08007b91 	.word	0x08007b91
 8007b44:	08007bcd 	.word	0x08007bcd
 8007b48:	08007bcd 	.word	0x08007bcd
 8007b4c:	08007bcd 	.word	0x08007bcd
 8007b50:	08007baf 	.word	0x08007baf
		case (TIM_CHANNEL_1):
			stepper->timer->Instance->CCR1 = (50*stepper->timer->Init.Period)/100;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2232      	movs	r2, #50	; 0x32
 8007b5c:	fb03 f202 	mul.w	r2, r3, r2
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	491c      	ldr	r1, [pc, #112]	; (8007bd8 <drv8825_setPWMFrequency+0x13c>)
 8007b68:	fba1 1202 	umull	r1, r2, r1, r2
 8007b6c:	0952      	lsrs	r2, r2, #5
 8007b6e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8007b70:	e02c      	b.n	8007bcc <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_2):
			stepper->timer->Instance->CCR2 = (50*stepper->timer->Init.Period)/100;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	2232      	movs	r2, #50	; 0x32
 8007b7a:	fb03 f202 	mul.w	r2, r3, r2
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4914      	ldr	r1, [pc, #80]	; (8007bd8 <drv8825_setPWMFrequency+0x13c>)
 8007b86:	fba1 1202 	umull	r1, r2, r1, r2
 8007b8a:	0952      	lsrs	r2, r2, #5
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8007b8e:	e01d      	b.n	8007bcc <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_3):
			stepper->timer->Instance->CCR3 = (50*stepper->timer->Init.Period)/100;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2232      	movs	r2, #50	; 0x32
 8007b98:	fb03 f202 	mul.w	r2, r3, r2
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	490d      	ldr	r1, [pc, #52]	; (8007bd8 <drv8825_setPWMFrequency+0x13c>)
 8007ba4:	fba1 1202 	umull	r1, r2, r1, r2
 8007ba8:	0952      	lsrs	r2, r2, #5
 8007baa:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8007bac:	e00e      	b.n	8007bcc <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_4):
			stepper->timer->Instance->CCR4 = (50*stepper->timer->Init.Period)/100;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2232      	movs	r2, #50	; 0x32
 8007bb6:	fb03 f202 	mul.w	r2, r3, r2
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4905      	ldr	r1, [pc, #20]	; (8007bd8 <drv8825_setPWMFrequency+0x13c>)
 8007bc2:	fba1 1202 	umull	r1, r2, r1, r2
 8007bc6:	0952      	lsrs	r2, r2, #5
 8007bc8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8007bca:	bf00      	nop
	}
}
 8007bcc:	bf00      	nop
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	000f4240 	.word	0x000f4240
 8007bd8:	51eb851f 	.word	0x51eb851f

08007bdc <drv8825_setRotationSpeed>:


void drv8825_setRotationSpeed(Stepper *stepper, float rpm) {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	ed87 0a00 	vstr	s0, [r7]
	uint16_t f = (rpm / 60) * STEPS_PER_REV * MICROSTEPS;
 8007be8:	ed97 7a00 	vldr	s14, [r7]
 8007bec:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8007c20 <drv8825_setRotationSpeed+0x44>
 8007bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007bf4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007c24 <drv8825_setRotationSpeed+0x48>
 8007bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bfc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007c28 <drv8825_setRotationSpeed+0x4c>
 8007c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c08:	ee17 3a90 	vmov	r3, s15
 8007c0c:	81fb      	strh	r3, [r7, #14]
	drv8825_setPWMFrequency(stepper, f);
 8007c0e:	89fb      	ldrh	r3, [r7, #14]
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff ff42 	bl	8007a9c <drv8825_setPWMFrequency>
}
 8007c18:	bf00      	nop
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	42700000 	.word	0x42700000
 8007c24:	43480000 	.word	0x43480000
 8007c28:	42000000 	.word	0x42000000

08007c2c <lidar_initialize>:
uint8_t lidar_distances[16];


// Le lidar est sur l'UART 4

void lidar_initialize() {
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
	for (int i=0; i<16; i++) {
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
 8007c36:	e00d      	b.n	8007c54 <lidar_initialize+0x28>
		lidar_distances[i] = 255;
 8007c38:	4a0b      	ldr	r2, [pc, #44]	; (8007c68 <lidar_initialize+0x3c>)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	22ff      	movs	r2, #255	; 0xff
 8007c40:	701a      	strb	r2, [r3, #0]
		lidar_timeSinceData[i] = LIDAR_TIMEOUT;
 8007c42:	4a0a      	ldr	r2, [pc, #40]	; (8007c6c <lidar_initialize+0x40>)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<16; i++) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3301      	adds	r3, #1
 8007c52:	607b      	str	r3, [r7, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	ddee      	ble.n	8007c38 <lidar_initialize+0xc>
	}
}
 8007c5a:	bf00      	nop
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	20000698 	.word	0x20000698
 8007c6c:	20000658 	.word	0x20000658

08007c70 <lidar_getDistance>:
	lidar_timeSinceData[index] = 0;*/
	//printf("%d -> %dcm\r\n", index, dist);

}

int lidar_getDistance(Direction dir) {
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	71fb      	strb	r3, [r7, #7]
	int minDist = 1000;
 8007c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c7e:	60fb      	str	r3, [r7, #12]
	readFrame();
 8007c80:	f000 f822 	bl	8007cc8 <readFrame>
				}
			}
			}*/


	for(int i = 0; i<maxMesure;i++){
 8007c84:	2300      	movs	r3, #0
 8007c86:	60bb      	str	r3, [r7, #8]
 8007c88:	e00f      	b.n	8007caa <lidar_getDistance+0x3a>
		if((int)distanceList[i] < minDist){
 8007c8a:	4a0d      	ldr	r2, [pc, #52]	; (8007cc0 <lidar_getDistance+0x50>)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c92:	461a      	mov	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4293      	cmp	r3, r2
 8007c98:	dd04      	ble.n	8007ca4 <lidar_getDistance+0x34>
			minDist = (int)distanceList[i];
 8007c9a:	4a09      	ldr	r2, [pc, #36]	; (8007cc0 <lidar_getDistance+0x50>)
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ca2:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<maxMesure;i++){
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60bb      	str	r3, [r7, #8]
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <lidar_getDistance+0x54>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	dbe9      	blt.n	8007c8a <lidar_getDistance+0x1a>
		}
	}

	return minDist;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	200006ac 	.word	0x200006ac
 8007cc4:	20000ced 	.word	0x20000ced

08007cc8 <readFrame>:
uint8_t NROI;			//Nbre de ROIs utilises
uint8_t maxMesure = 0; 	//Nbre de mesures stockees
uint8_t measuresSent; 		//Nbre de mesures annoncees


void readFrame(void){
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
	if(newDataset){
 8007cce:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <readFrame+0x5c>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d021      	beq.n	8007d1a <readFrame+0x52>
		/* On sauvegarde les index de debut et fin de trame car
		 * l'extraction des mesures peut prendre plus de temps que la reception de nouvelles*/
		uint16_t usedIndex = bufferIndex;
 8007cd6:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <readFrame+0x60>)
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	80fb      	strh	r3, [r7, #6]
		uint16_t usedStart = frameIndex;
 8007cdc:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <readFrame+0x64>)
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	80bb      	strh	r3, [r7, #4]

		// On ne lit pas les donnees si le debut de la trame n'est pas conforme
		if(setFrameIndex(&usedStart)){
 8007ce2:	1d3b      	adds	r3, r7, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 f92f 	bl	8007f48 <setFrameIndex>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d009      	beq.n	8007d04 <readFrame+0x3c>
			readHeader(usedStart);
 8007cf0:	88bb      	ldrh	r3, [r7, #4]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f81c 	bl	8007d30 <readHeader>
			readValue(usedIndex, usedStart);
 8007cf8:	88ba      	ldrh	r2, [r7, #4]
 8007cfa:	88fb      	ldrh	r3, [r7, #6]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 f844 	bl	8007d8c <readValue>
		}
		newDataset = 0;
 8007d04:	4b07      	ldr	r3, [pc, #28]	; (8007d24 <readFrame+0x5c>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]

		/*Pour eviter de remplir le buffer en entier.
		 * Situe ici pour eviter de perdre la position de fin de trame lors de l'etape de lecture des mesures*/
		if(bufferIndex >2000){
 8007d0a:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <readFrame+0x60>)
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007d12:	d902      	bls.n	8007d1a <readFrame+0x52>
			bufferIndex = 0;
 8007d14:	4b04      	ldr	r3, [pc, #16]	; (8007d28 <readFrame+0x60>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	200006a8 	.word	0x200006a8
 8007d28:	20001948 	.word	0x20001948
 8007d2c:	200006aa 	.word	0x200006aa

08007d30 <readHeader>:

void readHeader(uint16_t frameIndex){
 8007d30:	b480      	push	{r7}
 8007d32:	b089      	sub	sp, #36	; 0x24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	80fb      	strh	r3, [r7, #6]
	uint8_t value[20];

	// 1
	uint8_t ncaptActifs = lidarBuf[frameIndex];
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	4a10      	ldr	r2, [pc, #64]	; (8007d80 <readHeader+0x50>)
 8007d3e:	5cd3      	ldrb	r3, [r2, r3]
 8007d40:	77fb      	strb	r3, [r7, #31]

	// 2
	//Pour eviter les erreurs de lecture de trame ne lisant pas l'en-tete (255 ROIs fausse toutes
	if((ncaptActifs <= 0 || ncaptActifs >16) || (lidarBuf[frameIndex+1]>14)){
 8007d42:	7ffb      	ldrb	r3, [r7, #31]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d008      	beq.n	8007d5a <readHeader+0x2a>
 8007d48:	7ffb      	ldrb	r3, [r7, #31]
 8007d4a:	2b10      	cmp	r3, #16
 8007d4c:	d805      	bhi.n	8007d5a <readHeader+0x2a>
 8007d4e:	88fb      	ldrh	r3, [r7, #6]
 8007d50:	3301      	adds	r3, #1
 8007d52:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <readHeader+0x50>)
 8007d54:	5cd3      	ldrb	r3, [r2, r3]
 8007d56:	2b0e      	cmp	r3, #14
 8007d58:	d903      	bls.n	8007d62 <readHeader+0x32>
		NROI = DEFAULT_ROI;
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <readHeader+0x54>)
 8007d5c:	220d      	movs	r2, #13
 8007d5e:	701a      	strb	r2, [r3, #0]
 8007d60:	e002      	b.n	8007d68 <readHeader+0x38>
	}
	else{
		//NROI = buffer[frameIndex+1];
		NROI = DEFAULT_ROI; // Not the right value for debug purposes
 8007d62:	4b08      	ldr	r3, [pc, #32]	; (8007d84 <readHeader+0x54>)
 8007d64:	220d      	movs	r2, #13
 8007d66:	701a      	strb	r2, [r3, #0]
	}

	// 3
	measuresSent = lidarBuf[frameIndex+2];
 8007d68:	88fb      	ldrh	r3, [r7, #6]
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	4a04      	ldr	r2, [pc, #16]	; (8007d80 <readHeader+0x50>)
 8007d6e:	5cd2      	ldrb	r2, [r2, r3]
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <readHeader+0x58>)
 8007d72:	701a      	strb	r2, [r3, #0]
}
 8007d74:	bf00      	nop
 8007d76:	3724      	adds	r7, #36	; 0x24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	20000d90 	.word	0x20000d90
 8007d84:	20000cec 	.word	0x20000cec
 8007d88:	20000cee 	.word	0x20000cee

08007d8c <readValue>:

void readValue(uint16_t usedIndex, uint16_t frameIndex){
 8007d8c:	b480      	push	{r7}
 8007d8e:	b08d      	sub	sp, #52	; 0x34
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	460a      	mov	r2, r1
 8007d96:	80fb      	strh	r3, [r7, #6]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	80bb      	strh	r3, [r7, #4]

	// Variables
	int i = frameIndex + 3;// Debut des mesures apres l'en-tete
 8007d9c:	88bb      	ldrh	r3, [r7, #4]
 8007d9e:	3303      	adds	r3, #3
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t value[30];
	uint8_t nbreMes = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t Ncapteur; uint8_t indiceROI; uint16_t distance;

	/* Double verification pour eviter la lecture des 0x0 de la memoire par defaut en cas d'index defaillant.
	 * Peut etre enleve si on ajuste aussi usedIndex dans setFrameIndex()
	 * */
	while(i < (usedIndex - 3) && nbreMes < measuresSent){
 8007da8:	e043      	b.n	8007e32 <readValue+0xa6>
		//Selon le code du systeme de detection : "Pour que le premier element de la chaine de caracteres ne soit pas '\0'"
		// Donc il faut enlever l'offset sur buffer[i]
		indiceROI = (lidarBuf[i]-1)%NROI;
 8007daa:	4a2c      	ldr	r2, [pc, #176]	; (8007e5c <readValue+0xd0>)
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	4413      	add	r3, r2
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	4a2a      	ldr	r2, [pc, #168]	; (8007e60 <readValue+0xd4>)
 8007db6:	7812      	ldrb	r2, [r2, #0]
 8007db8:	fb93 f1f2 	sdiv	r1, r3, r2
 8007dbc:	fb01 f202 	mul.w	r2, r1, r2
 8007dc0:	1a9b      	subs	r3, r3, r2
 8007dc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		Ncapteur  = (lidarBuf[i]-1 -indiceROI)/NROI;
 8007dc6:	4a25      	ldr	r2, [pc, #148]	; (8007e5c <readValue+0xd0>)
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	4413      	add	r3, r2
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	1e5a      	subs	r2, r3, #1
 8007dd0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	4a22      	ldr	r2, [pc, #136]	; (8007e60 <readValue+0xd4>)
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dde:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		distance  = (lidarBuf[i+1]<<8) + lidarBuf[i+2];
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	3301      	adds	r3, #1
 8007de6:	4a1d      	ldr	r2, [pc, #116]	; (8007e5c <readValue+0xd0>)
 8007de8:	5cd3      	ldrb	r3, [r2, r3]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	3302      	adds	r3, #2
 8007df4:	4919      	ldr	r1, [pc, #100]	; (8007e5c <readValue+0xd0>)
 8007df6:	5ccb      	ldrb	r3, [r1, r3]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	4413      	add	r3, r2
 8007dfc:	84fb      	strh	r3, [r7, #38]	; 0x26

		// Ecriture memoire
		captorList[nbreMes]=Ncapteur; roiList[nbreMes]=indiceROI; distanceList[nbreMes]=distance;
 8007dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e02:	4918      	ldr	r1, [pc, #96]	; (8007e64 <readValue+0xd8>)
 8007e04:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8007e08:	54ca      	strb	r2, [r1, r3]
 8007e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e0e:	4916      	ldr	r1, [pc, #88]	; (8007e68 <readValue+0xdc>)
 8007e10:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8007e14:	54ca      	strb	r2, [r1, r3]
 8007e16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e1a:	4914      	ldr	r1, [pc, #80]	; (8007e6c <readValue+0xe0>)
 8007e1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007e1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		i += 3;
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	3303      	adds	r3, #3
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c
		nbreMes++;
 8007e28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(i < (usedIndex - 3) && nbreMes < measuresSent){
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	3b03      	subs	r3, #3
 8007e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	da05      	bge.n	8007e48 <readValue+0xbc>
 8007e3c:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <readValue+0xe4>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d3b0      	bcc.n	8007daa <readValue+0x1e>
	}
	maxMesure = nbreMes;
 8007e48:	4a0a      	ldr	r2, [pc, #40]	; (8007e74 <readValue+0xe8>)
 8007e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e4e:	7013      	strb	r3, [r2, #0]
}
 8007e50:	bf00      	nop
 8007e52:	3734      	adds	r7, #52	; 0x34
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	20000d90 	.word	0x20000d90
 8007e60:	20000cec 	.word	0x20000cec
 8007e64:	20000a94 	.word	0x20000a94
 8007e68:	20000bc0 	.word	0x20000bc0
 8007e6c:	200006ac 	.word	0x200006ac
 8007e70:	20000cee 	.word	0x20000cee
 8007e74:	20000ced 	.word	0x20000ced

08007e78 <frameStatus>:

void frameStatus(void){
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
	//End of Frame
	if(frameStarted && (bufferIndex >= 3) && DataAcquiered){
 8007e7c:	4b2c      	ldr	r3, [pc, #176]	; (8007f30 <frameStatus+0xb8>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d023      	beq.n	8007ecc <frameStatus+0x54>
 8007e84:	4b2b      	ldr	r3, [pc, #172]	; (8007f34 <frameStatus+0xbc>)
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d91f      	bls.n	8007ecc <frameStatus+0x54>
 8007e8c:	4b2a      	ldr	r3, [pc, #168]	; (8007f38 <frameStatus+0xc0>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01b      	beq.n	8007ecc <frameStatus+0x54>
		if((lidarBuf[bufferIndex - 3] == FRAME_BOUND) && (lidarBuf[bufferIndex - 2] == FRAME_BOUND) && (lidarBuf[bufferIndex - 1] == FRAME_BOUND)){
 8007e94:	4b27      	ldr	r3, [pc, #156]	; (8007f34 <frameStatus+0xbc>)
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	3b03      	subs	r3, #3
 8007e9a:	4a28      	ldr	r2, [pc, #160]	; (8007f3c <frameStatus+0xc4>)
 8007e9c:	5cd3      	ldrb	r3, [r2, r3]
 8007e9e:	2bff      	cmp	r3, #255	; 0xff
 8007ea0:	d13d      	bne.n	8007f1e <frameStatus+0xa6>
 8007ea2:	4b24      	ldr	r3, [pc, #144]	; (8007f34 <frameStatus+0xbc>)
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	3b02      	subs	r3, #2
 8007ea8:	4a24      	ldr	r2, [pc, #144]	; (8007f3c <frameStatus+0xc4>)
 8007eaa:	5cd3      	ldrb	r3, [r2, r3]
 8007eac:	2bff      	cmp	r3, #255	; 0xff
 8007eae:	d136      	bne.n	8007f1e <frameStatus+0xa6>
 8007eb0:	4b20      	ldr	r3, [pc, #128]	; (8007f34 <frameStatus+0xbc>)
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	4a21      	ldr	r2, [pc, #132]	; (8007f3c <frameStatus+0xc4>)
 8007eb8:	5cd3      	ldrb	r3, [r2, r3]
 8007eba:	2bff      	cmp	r3, #255	; 0xff
 8007ebc:	d12f      	bne.n	8007f1e <frameStatus+0xa6>
			frameStarted = 0;
 8007ebe:	4b1c      	ldr	r3, [pc, #112]	; (8007f30 <frameStatus+0xb8>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]

			newDataset = 1;
 8007ec4:	4b1e      	ldr	r3, [pc, #120]	; (8007f40 <frameStatus+0xc8>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	701a      	strb	r2, [r3, #0]
		if((lidarBuf[bufferIndex - 3] == FRAME_BOUND) && (lidarBuf[bufferIndex - 2] == FRAME_BOUND) && (lidarBuf[bufferIndex - 1] == FRAME_BOUND)){
 8007eca:	e028      	b.n	8007f1e <frameStatus+0xa6>
		}
	}
	//Start of Frame
	else if(!frameStarted && (bufferIndex >= 3) && DataAcquiered){
 8007ecc:	4b18      	ldr	r3, [pc, #96]	; (8007f30 <frameStatus+0xb8>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d125      	bne.n	8007f20 <frameStatus+0xa8>
 8007ed4:	4b17      	ldr	r3, [pc, #92]	; (8007f34 <frameStatus+0xbc>)
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d921      	bls.n	8007f20 <frameStatus+0xa8>
 8007edc:	4b16      	ldr	r3, [pc, #88]	; (8007f38 <frameStatus+0xc0>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01d      	beq.n	8007f20 <frameStatus+0xa8>
		if((lidarBuf[bufferIndex - 3] == FRAME_BOUND) && (lidarBuf[bufferIndex - 2] == FRAME_BOUND) && (lidarBuf[bufferIndex - 1] == FRAME_BOUND)){
 8007ee4:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <frameStatus+0xbc>)
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	3b03      	subs	r3, #3
 8007eea:	4a14      	ldr	r2, [pc, #80]	; (8007f3c <frameStatus+0xc4>)
 8007eec:	5cd3      	ldrb	r3, [r2, r3]
 8007eee:	2bff      	cmp	r3, #255	; 0xff
 8007ef0:	d116      	bne.n	8007f20 <frameStatus+0xa8>
 8007ef2:	4b10      	ldr	r3, [pc, #64]	; (8007f34 <frameStatus+0xbc>)
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	3b02      	subs	r3, #2
 8007ef8:	4a10      	ldr	r2, [pc, #64]	; (8007f3c <frameStatus+0xc4>)
 8007efa:	5cd3      	ldrb	r3, [r2, r3]
 8007efc:	2bff      	cmp	r3, #255	; 0xff
 8007efe:	d10f      	bne.n	8007f20 <frameStatus+0xa8>
 8007f00:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <frameStatus+0xbc>)
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	4a0d      	ldr	r2, [pc, #52]	; (8007f3c <frameStatus+0xc4>)
 8007f08:	5cd3      	ldrb	r3, [r2, r3]
 8007f0a:	2bff      	cmp	r3, #255	; 0xff
 8007f0c:	d108      	bne.n	8007f20 <frameStatus+0xa8>
			frameStarted = 1;
 8007f0e:	4b08      	ldr	r3, [pc, #32]	; (8007f30 <frameStatus+0xb8>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	701a      	strb	r2, [r3, #0]
			frameIndex = bufferIndex;
 8007f14:	4b07      	ldr	r3, [pc, #28]	; (8007f34 <frameStatus+0xbc>)
 8007f16:	881a      	ldrh	r2, [r3, #0]
 8007f18:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <frameStatus+0xcc>)
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	e000      	b.n	8007f20 <frameStatus+0xa8>
		if((lidarBuf[bufferIndex - 3] == FRAME_BOUND) && (lidarBuf[bufferIndex - 2] == FRAME_BOUND) && (lidarBuf[bufferIndex - 1] == FRAME_BOUND)){
 8007f1e:	bf00      	nop
			//frameIndex = 0;

		}
	}
	DataAcquiered = 0;
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <frameStatus+0xc0>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	701a      	strb	r2, [r3, #0]
}
 8007f26:	bf00      	nop
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	200006a9 	.word	0x200006a9
 8007f34:	20001948 	.word	0x20001948
 8007f38:	2000194a 	.word	0x2000194a
 8007f3c:	20000d90 	.word	0x20000d90
 8007f40:	200006a8 	.word	0x200006a8
 8007f44:	200006aa 	.word	0x200006aa

08007f48 <setFrameIndex>:

uint8_t setFrameIndex(uint16_t * frameIndex){
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
	uint16_t bound = *frameIndex;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	81fb      	strh	r3, [r7, #14]
	while(bound<3000){
 8007f56:	e01e      	b.n	8007f96 <setFrameIndex+0x4e>
		if((lidarBuf[bound - 3] == FRAME_BOUND)	//0xFF
 8007f58:	89fb      	ldrh	r3, [r7, #14]
 8007f5a:	3b03      	subs	r3, #3
 8007f5c:	4a14      	ldr	r2, [pc, #80]	; (8007fb0 <setFrameIndex+0x68>)
 8007f5e:	5cd3      	ldrb	r3, [r2, r3]
 8007f60:	2bff      	cmp	r3, #255	; 0xff
 8007f62:	d115      	bne.n	8007f90 <setFrameIndex+0x48>
		&& (lidarBuf[bound - 2] == FRAME_BOUND)	//0xFF
 8007f64:	89fb      	ldrh	r3, [r7, #14]
 8007f66:	3b02      	subs	r3, #2
 8007f68:	4a11      	ldr	r2, [pc, #68]	; (8007fb0 <setFrameIndex+0x68>)
 8007f6a:	5cd3      	ldrb	r3, [r2, r3]
 8007f6c:	2bff      	cmp	r3, #255	; 0xff
 8007f6e:	d10f      	bne.n	8007f90 <setFrameIndex+0x48>
		&& (lidarBuf[bound - 1] == FRAME_BOUND)	//0xFF
 8007f70:	89fb      	ldrh	r3, [r7, #14]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	4a0e      	ldr	r2, [pc, #56]	; (8007fb0 <setFrameIndex+0x68>)
 8007f76:	5cd3      	ldrb	r3, [r2, r3]
 8007f78:	2bff      	cmp	r3, #255	; 0xff
 8007f7a:	d109      	bne.n	8007f90 <setFrameIndex+0x48>
		&& (lidarBuf[bound - 0] != FRAME_BOUND)){	//NcaptActifs
 8007f7c:	89fb      	ldrh	r3, [r7, #14]
 8007f7e:	4a0c      	ldr	r2, [pc, #48]	; (8007fb0 <setFrameIndex+0x68>)
 8007f80:	5cd3      	ldrb	r3, [r2, r3]
 8007f82:	2bff      	cmp	r3, #255	; 0xff
 8007f84:	d004      	beq.n	8007f90 <setFrameIndex+0x48>

			*frameIndex = bound;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	89fa      	ldrh	r2, [r7, #14]
 8007f8a:	801a      	strh	r2, [r3, #0]
			return 1;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e008      	b.n	8007fa2 <setFrameIndex+0x5a>
		}
		else{
			bound++;
 8007f90:	89fb      	ldrh	r3, [r7, #14]
 8007f92:	3301      	adds	r3, #1
 8007f94:	81fb      	strh	r3, [r7, #14]
	while(bound<3000){
 8007f96:	89fb      	ldrh	r3, [r7, #14]
 8007f98:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d9db      	bls.n	8007f58 <setFrameIndex+0x10>
		}
	}
	return 0;
 8007fa0:	2300      	movs	r3, #0

}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20000d90 	.word	0x20000d90

08007fb4 <getRightEncoderCount>:
#include "odometry.h"


int16_t getRightEncoderCount() {
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
	int16_t count = (int16_t) R_ENCODER.Instance->CNT;
 8007fba:	4b08      	ldr	r3, [pc, #32]	; (8007fdc <getRightEncoderCount+0x28>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	80fb      	strh	r3, [r7, #6]
	R_ENCODER.Instance->CNT = 0;
 8007fc2:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <getRightEncoderCount+0x28>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8007fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000208 	.word	0x20000208

08007fe0 <getLeftEncoderCount>:


int16_t getLeftEncoderCount() {
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
	int16_t count = (int16_t) L_ENCODER.Instance->CNT;
 8007fe6:	4b08      	ldr	r3, [pc, #32]	; (8008008 <getLeftEncoderCount+0x28>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	80fb      	strh	r3, [r7, #6]
	L_ENCODER.Instance->CNT = 0;
 8007fee:	4b06      	ldr	r3, [pc, #24]	; (8008008 <getLeftEncoderCount+0x28>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 8007ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	20000298 	.word	0x20000298
 800800c:	00000000 	.word	0x00000000

08008010 <odometry_updatePosition>:
float XstateMes = 0;
float YstateMes = 0;
float rKalmanCoeff[3] = {0.8, 0.8, 0.005};
float alphaKalmanCoeff[3] = {0.8, 0.8, 0.2};

void odometry_updatePosition() {
 8008010:	b5b0      	push	{r4, r5, r7, lr}
 8008012:	b08e      	sub	sp, #56	; 0x38
 8008014:	af00      	add	r7, sp, #0
	float coeff = M_TWOPI * ODOMETRY_RADIUS / TICKS_PER_REV;
 8008016:	4bac      	ldr	r3, [pc, #688]	; (80082c8 <odometry_updatePosition+0x2b8>)
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
	float leftMov = getLeftEncoderCount() * coeff;
 800801a:	f7ff ffe1 	bl	8007fe0 <getLeftEncoderCount>
 800801e:	4603      	mov	r3, r0
 8008020:	ee07 3a90 	vmov	s15, r3
 8008024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008028:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800802c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008030:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float rightMov = getRightEncoderCount() * coeff;
 8008034:	f7ff ffbe 	bl	8007fb4 <getRightEncoderCount>
 8008038:	4603      	mov	r3, r0
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008042:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float dt = ODOMETRY_REFRESH;
 800804e:	4b9f      	ldr	r3, [pc, #636]	; (80082cc <odometry_updatePosition+0x2bc>)
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28
	float r =  (leftMov + rightMov)/2;
 8008052:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008056:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800805a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800805e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008066:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float alpha = (leftMov - rightMov)/ENTRAXE_ODOMETRY;
 800806a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800806e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008076:	ee17 0a90 	vmov	r0, s15
 800807a:	f7f8 fa85 	bl	8000588 <__aeabi_f2d>
 800807e:	a386      	add	r3, pc, #536	; (adr r3, 8008298 <odometry_updatePosition+0x288>)
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 fc02 	bl	800088c <__aeabi_ddiv>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4610      	mov	r0, r2
 800808e:	4619      	mov	r1, r3
 8008090:	f7f8 fdaa 	bl	8000be8 <__aeabi_d2f>
 8008094:	4603      	mov	r3, r0
 8008096:	623b      	str	r3, [r7, #32]
	float previousRState = YstateCurr[0];
 8008098:	4b8d      	ldr	r3, [pc, #564]	; (80082d0 <odometry_updatePosition+0x2c0>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	61fb      	str	r3, [r7, #28]
	float previousXState = XstateCurr[0];
 800809e:	4b8d      	ldr	r3, [pc, #564]	; (80082d4 <odometry_updatePosition+0x2c4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	61bb      	str	r3, [r7, #24]
	Kalman(XstateCurr, XstateFin, XstateMes, dt, alphaKalmanCoeff);
	alpha = XstateFin[0] - XstateCurr[0];
	//alpha = XstateCurr[0] - previousXState;*/


	float deltaX = r * cos(robot.angle + alpha/2);
 80080a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080a6:	f7f8 fa6f 	bl	8000588 <__aeabi_f2d>
 80080aa:	4604      	mov	r4, r0
 80080ac:	460d      	mov	r5, r1
 80080ae:	4b8a      	ldr	r3, [pc, #552]	; (80082d8 <odometry_updatePosition+0x2c8>)
 80080b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80080b4:	edd7 6a08 	vldr	s13, [r7, #32]
 80080b8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80080bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80080c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080c4:	ee17 0a90 	vmov	r0, s15
 80080c8:	f7f8 fa5e 	bl	8000588 <__aeabi_f2d>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	ec43 2b10 	vmov	d0, r2, r3
 80080d4:	f004 fad0 	bl	800c678 <cos>
 80080d8:	ec53 2b10 	vmov	r2, r3, d0
 80080dc:	4620      	mov	r0, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	f7f8 faaa 	bl	8000638 <__aeabi_dmul>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4610      	mov	r0, r2
 80080ea:	4619      	mov	r1, r3
 80080ec:	f7f8 fd7c 	bl	8000be8 <__aeabi_d2f>
 80080f0:	4603      	mov	r3, r0
 80080f2:	617b      	str	r3, [r7, #20]
	float deltaY = r * sin(robot.angle + alpha/2);
 80080f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080f6:	f7f8 fa47 	bl	8000588 <__aeabi_f2d>
 80080fa:	4604      	mov	r4, r0
 80080fc:	460d      	mov	r5, r1
 80080fe:	4b76      	ldr	r3, [pc, #472]	; (80082d8 <odometry_updatePosition+0x2c8>)
 8008100:	ed93 7a02 	vldr	s14, [r3, #8]
 8008104:	edd7 6a08 	vldr	s13, [r7, #32]
 8008108:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800810c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008114:	ee17 0a90 	vmov	r0, s15
 8008118:	f7f8 fa36 	bl	8000588 <__aeabi_f2d>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	ec43 2b10 	vmov	d0, r2, r3
 8008124:	f004 fb08 	bl	800c738 <sin>
 8008128:	ec53 2b10 	vmov	r2, r3, d0
 800812c:	4620      	mov	r0, r4
 800812e:	4629      	mov	r1, r5
 8008130:	f7f8 fa82 	bl	8000638 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	f7f8 fd54 	bl	8000be8 <__aeabi_d2f>
 8008140:	4603      	mov	r3, r0
 8008142:	613b      	str	r3, [r7, #16]


	robot.position.x += deltaX;
 8008144:	4b64      	ldr	r3, [pc, #400]	; (80082d8 <odometry_updatePosition+0x2c8>)
 8008146:	ed93 7a00 	vldr	s14, [r3]
 800814a:	edd7 7a05 	vldr	s15, [r7, #20]
 800814e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008152:	4b61      	ldr	r3, [pc, #388]	; (80082d8 <odometry_updatePosition+0x2c8>)
 8008154:	edc3 7a00 	vstr	s15, [r3]
	robot.position.y += deltaY;
 8008158:	4b5f      	ldr	r3, [pc, #380]	; (80082d8 <odometry_updatePosition+0x2c8>)
 800815a:	ed93 7a01 	vldr	s14, [r3, #4]
 800815e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008166:	4b5c      	ldr	r3, [pc, #368]	; (80082d8 <odometry_updatePosition+0x2c8>)
 8008168:	edc3 7a01 	vstr	s15, [r3, #4]
	//robot.angle = XstateCurr[0];
	robot.angle += alpha;
 800816c:	4b5a      	ldr	r3, [pc, #360]	; (80082d8 <odometry_updatePosition+0x2c8>)
 800816e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008172:	edd7 7a08 	vldr	s15, [r7, #32]
 8008176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800817a:	4b57      	ldr	r3, [pc, #348]	; (80082d8 <odometry_updatePosition+0x2c8>)
 800817c:	edc3 7a02 	vstr	s15, [r3, #8]
	if((deltaX != 0) && (deltaY != 0))
	{
		robot.angle += atanf(deltaX/deltaY);
	}*/

	float currentSpeed = vector2_norm(vector2_new(deltaX, deltaY)) / dt;
 8008180:	edd7 0a04 	vldr	s1, [r7, #16]
 8008184:	ed97 0a05 	vldr	s0, [r7, #20]
 8008188:	f001 f9d2 	bl	8009530 <vector2_new>
 800818c:	eeb0 7a40 	vmov.f32	s14, s0
 8008190:	eef0 7a60 	vmov.f32	s15, s1
 8008194:	ed87 7a01 	vstr	s14, [r7, #4]
 8008198:	edc7 7a02 	vstr	s15, [r7, #8]
 800819c:	ed97 7a01 	vldr	s14, [r7, #4]
 80081a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80081a4:	eeb0 0a47 	vmov.f32	s0, s14
 80081a8:	eef0 0a67 	vmov.f32	s1, s15
 80081ac:	f001 f9e2 	bl	8009574 <vector2_norm>
 80081b0:	eef0 6a40 	vmov.f32	s13, s0
 80081b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80081b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081bc:	edc7 7a03 	vstr	s15, [r7, #12]
	robot.measuredSpeed = robot.measuredSpeed*0.8 + currentSpeed*0.2;
 80081c0:	4b45      	ldr	r3, [pc, #276]	; (80082d8 <odometry_updatePosition+0x2c8>)
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7f8 f9df 	bl	8000588 <__aeabi_f2d>
 80081ca:	a335      	add	r3, pc, #212	; (adr r3, 80082a0 <odometry_updatePosition+0x290>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f7f8 fa32 	bl	8000638 <__aeabi_dmul>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4614      	mov	r4, r2
 80081da:	461d      	mov	r5, r3
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f7f8 f9d3 	bl	8000588 <__aeabi_f2d>
 80081e2:	a331      	add	r3, pc, #196	; (adr r3, 80082a8 <odometry_updatePosition+0x298>)
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	f7f8 fa26 	bl	8000638 <__aeabi_dmul>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4620      	mov	r0, r4
 80081f2:	4629      	mov	r1, r5
 80081f4:	f7f8 f86a 	bl	80002cc <__adddf3>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4610      	mov	r0, r2
 80081fe:	4619      	mov	r1, r3
 8008200:	f7f8 fcf2 	bl	8000be8 <__aeabi_d2f>
 8008204:	4603      	mov	r3, r0
 8008206:	4a34      	ldr	r2, [pc, #208]	; (80082d8 <odometry_updatePosition+0x2c8>)
 8008208:	61d3      	str	r3, [r2, #28]
	//robot.measuredSpeed = vector2_norm(vector2_new(deltaX, deltaY)) / dt;

	if (robot.angle > M_PI)
 800820a:	4b33      	ldr	r3, [pc, #204]	; (80082d8 <odometry_updatePosition+0x2c8>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	4618      	mov	r0, r3
 8008210:	f7f8 f9ba 	bl	8000588 <__aeabi_f2d>
 8008214:	a326      	add	r3, pc, #152	; (adr r3, 80082b0 <odometry_updatePosition+0x2a0>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f8 fc9d 	bl	8000b58 <__aeabi_dcmpgt>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d013      	beq.n	800824c <odometry_updatePosition+0x23c>
		robot.angle = robot.angle - M_TWOPI;
 8008224:	4b2c      	ldr	r3, [pc, #176]	; (80082d8 <odometry_updatePosition+0x2c8>)
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	4618      	mov	r0, r3
 800822a:	f7f8 f9ad 	bl	8000588 <__aeabi_f2d>
 800822e:	a322      	add	r3, pc, #136	; (adr r3, 80082b8 <odometry_updatePosition+0x2a8>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f7f8 f848 	bl	80002c8 <__aeabi_dsub>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4610      	mov	r0, r2
 800823e:	4619      	mov	r1, r3
 8008240:	f7f8 fcd2 	bl	8000be8 <__aeabi_d2f>
 8008244:	4603      	mov	r3, r0
 8008246:	4a24      	ldr	r2, [pc, #144]	; (80082d8 <odometry_updatePosition+0x2c8>)
 8008248:	6093      	str	r3, [r2, #8]
		robot.angle = robot.angle + M_TWOPI;


	DEBUG_ODOMETRY("x: %.1fmm, y: %.1fmm, speed: %.1fmm, angle: %.1fdeg\r\n", robot.position.x, robot.position.y, robot.measuredSpeed, robot.angle/2/M_PI*360);
	//DEBUG_ODOMETRY("x: %.1fmm, y: %.1fmm, angle: %.1fdeg, vitesseY: %.2fmm, accelX: %.2fmm, accelY: %.2fmm\r\n", robot.position.x, robot.position.y, robot.angle/2/M_PI*360, XstateCurr[1], YstateCurr[1], XstateCurr[2], YstateCurr[2]);
}
 800824a:	e020      	b.n	800828e <odometry_updatePosition+0x27e>
	else if (robot.angle < -M_PI)
 800824c:	4b22      	ldr	r3, [pc, #136]	; (80082d8 <odometry_updatePosition+0x2c8>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	4618      	mov	r0, r3
 8008252:	f7f8 f999 	bl	8000588 <__aeabi_f2d>
 8008256:	a31a      	add	r3, pc, #104	; (adr r3, 80082c0 <odometry_updatePosition+0x2b0>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f8 fc5e 	bl	8000b1c <__aeabi_dcmplt>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d100      	bne.n	8008268 <odometry_updatePosition+0x258>
}
 8008266:	e012      	b.n	800828e <odometry_updatePosition+0x27e>
		robot.angle = robot.angle + M_TWOPI;
 8008268:	4b1b      	ldr	r3, [pc, #108]	; (80082d8 <odometry_updatePosition+0x2c8>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	4618      	mov	r0, r3
 800826e:	f7f8 f98b 	bl	8000588 <__aeabi_f2d>
 8008272:	a311      	add	r3, pc, #68	; (adr r3, 80082b8 <odometry_updatePosition+0x2a8>)
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f7f8 f828 	bl	80002cc <__adddf3>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4610      	mov	r0, r2
 8008282:	4619      	mov	r1, r3
 8008284:	f7f8 fcb0 	bl	8000be8 <__aeabi_d2f>
 8008288:	4603      	mov	r3, r0
 800828a:	4a13      	ldr	r2, [pc, #76]	; (80082d8 <odometry_updatePosition+0x2c8>)
 800828c:	6093      	str	r3, [r2, #8]
}
 800828e:	bf00      	nop
 8008290:	3738      	adds	r7, #56	; 0x38
 8008292:	46bd      	mov	sp, r7
 8008294:	bdb0      	pop	{r4, r5, r7, pc}
 8008296:	bf00      	nop
 8008298:	66666666 	.word	0x66666666
 800829c:	40713e66 	.word	0x40713e66
 80082a0:	9999999a 	.word	0x9999999a
 80082a4:	3fe99999 	.word	0x3fe99999
 80082a8:	9999999a 	.word	0x9999999a
 80082ac:	3fc99999 	.word	0x3fc99999
 80082b0:	54442d18 	.word	0x54442d18
 80082b4:	400921fb 	.word	0x400921fb
 80082b8:	54442d18 	.word	0x54442d18
 80082bc:	401921fb 	.word	0x401921fb
 80082c0:	54442d18 	.word	0x54442d18
 80082c4:	c00921fb 	.word	0xc00921fb
 80082c8:	3ca35ce2 	.word	0x3ca35ce2
 80082cc:	3c23d70a 	.word	0x3c23d70a
 80082d0:	20000d14 	.word	0x20000d14
 80082d4:	20000d08 	.word	0x20000d08
 80082d8:	20000d38 	.word	0x20000d38

080082dc <odometry_setPosition>:


void odometry_setPosition(float x, float y) {
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80082e6:	edc7 0a00 	vstr	s1, [r7]
	robot.position.x = x;
 80082ea:	4a06      	ldr	r2, [pc, #24]	; (8008304 <odometry_setPosition+0x28>)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6013      	str	r3, [r2, #0]
	robot.position.y = y;
 80082f0:	4a04      	ldr	r2, [pc, #16]	; (8008304 <odometry_setPosition+0x28>)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	6053      	str	r3, [r2, #4]
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	20000d38 	.word	0x20000d38

08008308 <odometry_setAngle>:


void odometry_setAngle(float angle) {
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	ed87 0a01 	vstr	s0, [r7, #4]
	robot.angle = angle;
 8008312:	4a04      	ldr	r2, [pc, #16]	; (8008324 <odometry_setAngle+0x1c>)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6093      	str	r3, [r2, #8]
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	20000d38 	.word	0x20000d38

08008328 <odometry_startKalman>:

void odometry_startKalman()
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
	XstateInit[0] = robot.angle;
 800832c:	4b08      	ldr	r3, [pc, #32]	; (8008350 <odometry_startKalman+0x28>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	4a08      	ldr	r2, [pc, #32]	; (8008354 <odometry_startKalman+0x2c>)
 8008332:	6013      	str	r3, [r2, #0]

	KalmanInit(XstateInit,XstateFin,ODOMETRY_REFRESH);
 8008334:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008358 <odometry_startKalman+0x30>
 8008338:	4908      	ldr	r1, [pc, #32]	; (800835c <odometry_startKalman+0x34>)
 800833a:	4806      	ldr	r0, [pc, #24]	; (8008354 <odometry_startKalman+0x2c>)
 800833c:	f7ff fae8 	bl	8007910 <KalmanInit>
	KalmanInit(YstateInit,YstateFin,ODOMETRY_REFRESH);
 8008340:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8008358 <odometry_startKalman+0x30>
 8008344:	4906      	ldr	r1, [pc, #24]	; (8008360 <odometry_startKalman+0x38>)
 8008346:	4807      	ldr	r0, [pc, #28]	; (8008364 <odometry_startKalman+0x3c>)
 8008348:	f7ff fae2 	bl	8007910 <KalmanInit>
}
 800834c:	bf00      	nop
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20000d38 	.word	0x20000d38
 8008354:	20000cf0 	.word	0x20000cf0
 8008358:	3c23d70a 	.word	0x3c23d70a
 800835c:	20000d20 	.word	0x20000d20
 8008360:	20000d2c 	.word	0x20000d2c
 8008364:	20000cfc 	.word	0x20000cfc

08008368 <propulsion_initialize>:
float error2[3] = {0.0,0.0,0.0};
float t0 = 0.0;
float slowDownFactor = 0;
float speed = 0;

void propulsion_initialize() {
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af04      	add	r7, sp, #16
    robot.leftMotor = (Stepper*) malloc(sizeof(Stepper));
 800836e:	2018      	movs	r0, #24
 8008370:	f001 fa14 	bl	800979c <malloc>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
 8008378:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <propulsion_initialize+0x60>)
 800837a:	60da      	str	r2, [r3, #12]
    robot.rightMotor = (Stepper*) malloc(sizeof(Stepper));
 800837c:	2018      	movs	r0, #24
 800837e:	f001 fa0d 	bl	800979c <malloc>
 8008382:	4603      	mov	r3, r0
 8008384:	461a      	mov	r2, r3
 8008386:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <propulsion_initialize+0x60>)
 8008388:	615a      	str	r2, [r3, #20]

    drv8825_initialize(
 800838a:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <propulsion_initialize+0x60>)
 800838c:	68d8      	ldr	r0, [r3, #12]
 800838e:	2300      	movs	r3, #0
 8008390:	9302      	str	r3, [sp, #8]
 8008392:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <propulsion_initialize+0x64>)
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <propulsion_initialize+0x68>)
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	2304      	movs	r3, #4
 800839c:	4a0c      	ldr	r2, [pc, #48]	; (80083d0 <propulsion_initialize+0x68>)
 800839e:	2101      	movs	r1, #1
 80083a0:	f7ff fb26 	bl	80079f0 <drv8825_initialize>
        robot.leftMotor,
        L_MOTOR_EN_Pin, L_MOTOR_EN_GPIO_Port,
        L_MOTOR_DIR_Pin, L_MOTOR_DIR_GPIO_Port,
        &L_MOTOR_TIMER, TIM_CHANNEL_1
    );
    drv8825_initialize(
 80083a4:	4b08      	ldr	r3, [pc, #32]	; (80083c8 <propulsion_initialize+0x60>)
 80083a6:	6958      	ldr	r0, [r3, #20]
 80083a8:	230c      	movs	r3, #12
 80083aa:	9302      	str	r3, [sp, #8]
 80083ac:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <propulsion_initialize+0x6c>)
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <propulsion_initialize+0x68>)
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083b8:	4a05      	ldr	r2, [pc, #20]	; (80083d0 <propulsion_initialize+0x68>)
 80083ba:	2102      	movs	r1, #2
 80083bc:	f7ff fb18 	bl	80079f0 <drv8825_initialize>
        robot.rightMotor,
        R_MOTOR_EN_Pin, R_MOTOR_EN_GPIO_Port,
        R_MOTOR_DIR_Pin, R_MOTOR_DIR_GPIO_Port,
        &R_MOTOR_TIMER, TIM_CHANNEL_4
    );
}
 80083c0:	bf00      	nop
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20000d38 	.word	0x20000d38
 80083cc:	20000448 	.word	0x20000448
 80083d0:	40020800 	.word	0x40020800
 80083d4:	20000400 	.word	0x20000400

080083d8 <propulsion_enableMotors>:


void propulsion_enableMotors() {
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
    drv8825_enable(robot.leftMotor);
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <propulsion_enableMotors+0x1c>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff fb3a 	bl	8007a5a <drv8825_enable>
    drv8825_enable(robot.rightMotor);
 80083e6:	4b03      	ldr	r3, [pc, #12]	; (80083f4 <propulsion_enableMotors+0x1c>)
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff fb35 	bl	8007a5a <drv8825_enable>
}
 80083f0:	bf00      	nop
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	20000d38 	.word	0x20000d38

080083f8 <propulsion_disableMotors>:


void propulsion_disableMotors() {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
    drv8825_disable(robot.leftMotor);
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <propulsion_disableMotors+0x1c>)
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fb3a 	bl	8007a7a <drv8825_disable>
    drv8825_disable(robot.rightMotor);
 8008406:	4b03      	ldr	r3, [pc, #12]	; (8008414 <propulsion_disableMotors+0x1c>)
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff fb35 	bl	8007a7a <drv8825_disable>
}
 8008410:	bf00      	nop
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20000d38 	.word	0x20000d38

08008418 <propulsion_setSpeeds>:


void propulsion_setSpeeds(float left, float right, float k) {
 8008418:	b590      	push	{r4, r7, lr}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008422:	edc7 0a02 	vstr	s1, [r7, #8]
 8008426:	ed87 1a01 	vstr	s2, [r7, #4]

	float max_speed = MAX_MOTOR_SPEED*(1-atan(1000*fabs(k))*2/M_PI);
 800842a:	edd7 7a01 	vldr	s15, [r7, #4]
 800842e:	eef0 7ae7 	vabs.f32	s15, s15
 8008432:	ee17 0a90 	vmov	r0, s15
 8008436:	f7f8 f8a7 	bl	8000588 <__aeabi_f2d>
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	4b78      	ldr	r3, [pc, #480]	; (8008620 <propulsion_setSpeeds+0x208>)
 8008440:	f7f8 f8fa 	bl	8000638 <__aeabi_dmul>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	ec43 2b17 	vmov	d7, r2, r3
 800844c:	eeb0 0a47 	vmov.f32	s0, s14
 8008450:	eef0 0a67 	vmov.f32	s1, s15
 8008454:	f003 ff70 	bl	800c338 <atan>
 8008458:	ec51 0b10 	vmov	r0, r1, d0
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	f7f7 ff34 	bl	80002cc <__adddf3>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4610      	mov	r0, r2
 800846a:	4619      	mov	r1, r3
 800846c:	a368      	add	r3, pc, #416	; (adr r3, 8008610 <propulsion_setSpeeds+0x1f8>)
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	f7f8 fa0b 	bl	800088c <__aeabi_ddiv>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	f04f 0000 	mov.w	r0, #0
 800847e:	4969      	ldr	r1, [pc, #420]	; (8008624 <propulsion_setSpeeds+0x20c>)
 8008480:	f7f7 ff22 	bl	80002c8 <__aeabi_dsub>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4610      	mov	r0, r2
 800848a:	4619      	mov	r1, r3
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	4b63      	ldr	r3, [pc, #396]	; (8008620 <propulsion_setSpeeds+0x208>)
 8008492:	f7f8 f8d1 	bl	8000638 <__aeabi_dmul>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4610      	mov	r0, r2
 800849c:	4619      	mov	r1, r3
 800849e:	f7f8 fba3 	bl	8000be8 <__aeabi_d2f>
 80084a2:	4603      	mov	r3, r0
 80084a4:	617b      	str	r3, [r7, #20]
	if ((max_speed < 400) && (MAX_MOTOR_SPEED >= 400))
 80084a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80084aa:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8008628 <propulsion_setSpeeds+0x210>
 80084ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b6:	d501      	bpl.n	80084bc <propulsion_setSpeeds+0xa4>
		max_speed = 400;
 80084b8:	4b5c      	ldr	r3, [pc, #368]	; (800862c <propulsion_setSpeeds+0x214>)
 80084ba:	617b      	str	r3, [r7, #20]
	else if ((max_speed < 400) && (MAX_MOTOR_SPEED < 400))
		max_speed = MAX_MOTOR_SPEED;

    float greatestAbsoluteSpeed = fabs(fabs(left)>fabs(right)?left:right);
 80084bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80084c0:	eeb0 7ae7 	vabs.f32	s14, s15
 80084c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80084c8:	eef0 7ae7 	vabs.f32	s15, s15
 80084cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d4:	dd04      	ble.n	80084e0 <propulsion_setSpeeds+0xc8>
 80084d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80084da:	eef0 7ae7 	vabs.f32	s15, s15
 80084de:	e003      	b.n	80084e8 <propulsion_setSpeeds+0xd0>
 80084e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80084e4:	eef0 7ae7 	vabs.f32	s15, s15
 80084e8:	edc7 7a04 	vstr	s15, [r7, #16]

    if (greatestAbsoluteSpeed > max_speed) {
 80084ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80084f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80084f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fc:	dd17      	ble.n	800852e <propulsion_setSpeeds+0x116>
        left = left/greatestAbsoluteSpeed*max_speed;
 80084fe:	edd7 6a03 	vldr	s13, [r7, #12]
 8008502:	ed97 7a04 	vldr	s14, [r7, #16]
 8008506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800850a:	ed97 7a05 	vldr	s14, [r7, #20]
 800850e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008512:	edc7 7a03 	vstr	s15, [r7, #12]
        right = right/greatestAbsoluteSpeed*max_speed;
 8008516:	edd7 6a02 	vldr	s13, [r7, #8]
 800851a:	ed97 7a04 	vldr	s14, [r7, #16]
 800851e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008522:	ed97 7a05 	vldr	s14, [r7, #20]
 8008526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852a:	edc7 7a02 	vstr	s15, [r7, #8]
    }

    robot.leftSpeed = left;
 800852e:	4a40      	ldr	r2, [pc, #256]	; (8008630 <propulsion_setSpeeds+0x218>)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6113      	str	r3, [r2, #16]
    drv8825_setDirection(robot.leftMotor, (left < 0)?NEGATIVE:POSITIVE);
 8008534:	4b3e      	ldr	r3, [pc, #248]	; (8008630 <propulsion_setSpeeds+0x218>)
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	edd7 7a03 	vldr	s15, [r7, #12]
 800853c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008544:	bf4c      	ite	mi
 8008546:	2301      	movmi	r3, #1
 8008548:	2300      	movpl	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	f083 0301 	eor.w	r3, r3, #1
 8008550:	b2db      	uxtb	r3, r3
 8008552:	b2db      	uxtb	r3, r3
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f7ff fa6d 	bl	8007a36 <drv8825_setDirection>
    drv8825_setRotationSpeed(robot.leftMotor, 60 * fabsf(left) / (2*M_PI*WHEEL_RADIUS));
 800855c:	4b34      	ldr	r3, [pc, #208]	; (8008630 <propulsion_setSpeeds+0x218>)
 800855e:	68dc      	ldr	r4, [r3, #12]
 8008560:	edd7 7a03 	vldr	s15, [r7, #12]
 8008564:	eef0 7ae7 	vabs.f32	s15, s15
 8008568:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008634 <propulsion_setSpeeds+0x21c>
 800856c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008570:	ee17 0a90 	vmov	r0, s15
 8008574:	f7f8 f808 	bl	8000588 <__aeabi_f2d>
 8008578:	a327      	add	r3, pc, #156	; (adr r3, 8008618 <propulsion_setSpeeds+0x200>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f8 f985 	bl	800088c <__aeabi_ddiv>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4610      	mov	r0, r2
 8008588:	4619      	mov	r1, r3
 800858a:	f7f8 fb2d 	bl	8000be8 <__aeabi_d2f>
 800858e:	4603      	mov	r3, r0
 8008590:	ee00 3a10 	vmov	s0, r3
 8008594:	4620      	mov	r0, r4
 8008596:	f7ff fb21 	bl	8007bdc <drv8825_setRotationSpeed>

    robot.rightSpeed = right;
 800859a:	4a25      	ldr	r2, [pc, #148]	; (8008630 <propulsion_setSpeeds+0x218>)
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	6193      	str	r3, [r2, #24]
    drv8825_setDirection(robot.rightMotor, (right < 0)?NEGATIVE:POSITIVE);
 80085a0:	4b23      	ldr	r3, [pc, #140]	; (8008630 <propulsion_setSpeeds+0x218>)
 80085a2:	695a      	ldr	r2, [r3, #20]
 80085a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80085a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b0:	bf4c      	ite	mi
 80085b2:	2301      	movmi	r3, #1
 80085b4:	2300      	movpl	r3, #0
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f083 0301 	eor.w	r3, r3, #1
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	f7ff fa37 	bl	8007a36 <drv8825_setDirection>
    drv8825_setRotationSpeed(robot.rightMotor, 60 * fabsf(right) / (2*M_PI*WHEEL_RADIUS));
 80085c8:	4b19      	ldr	r3, [pc, #100]	; (8008630 <propulsion_setSpeeds+0x218>)
 80085ca:	695c      	ldr	r4, [r3, #20]
 80085cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80085d0:	eef0 7ae7 	vabs.f32	s15, s15
 80085d4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008634 <propulsion_setSpeeds+0x21c>
 80085d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085dc:	ee17 0a90 	vmov	r0, s15
 80085e0:	f7f7 ffd2 	bl	8000588 <__aeabi_f2d>
 80085e4:	a30c      	add	r3, pc, #48	; (adr r3, 8008618 <propulsion_setSpeeds+0x200>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f8 f94f 	bl	800088c <__aeabi_ddiv>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	4610      	mov	r0, r2
 80085f4:	4619      	mov	r1, r3
 80085f6:	f7f8 faf7 	bl	8000be8 <__aeabi_d2f>
 80085fa:	4603      	mov	r3, r0
 80085fc:	ee00 3a10 	vmov	s0, r3
 8008600:	4620      	mov	r0, r4
 8008602:	f7ff faeb 	bl	8007bdc <drv8825_setRotationSpeed>
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	bd90      	pop	{r4, r7, pc}
 800860e:	bf00      	nop
 8008610:	54442d18 	.word	0x54442d18
 8008614:	400921fb 	.word	0x400921fb
 8008618:	2955385e 	.word	0x2955385e
 800861c:	406f6a7a 	.word	0x406f6a7a
 8008620:	408f4000 	.word	0x408f4000
 8008624:	3ff00000 	.word	0x3ff00000
 8008628:	43c80000 	.word	0x43c80000
 800862c:	43c80000 	.word	0x43c80000
 8008630:	20000d38 	.word	0x20000d38
 8008634:	42700000 	.word	0x42700000

08008638 <getAngleError>:
    else if (robot.angle < -M_PI)
        robot.angle = robot.angle + M_TWOPI;
}


float getAngleError(Bezier* b, float t, Vector2 p, Direction dir) {
 8008638:	b5b0      	push	{r4, r5, r7, lr}
 800863a:	b08e      	sub	sp, #56	; 0x38
 800863c:	af00      	add	r7, sp, #0
 800863e:	6178      	str	r0, [r7, #20]
 8008640:	ed87 0a04 	vstr	s0, [r7, #16]
 8008644:	eeb0 7a60 	vmov.f32	s14, s1
 8008648:	eef0 7a41 	vmov.f32	s15, s2
 800864c:	460b      	mov	r3, r1
 800864e:	ed87 7a02 	vstr	s14, [r7, #8]
 8008652:	edc7 7a03 	vstr	s15, [r7, #12]
 8008656:	71fb      	strb	r3, [r7, #7]
    Vector2 tangent = bezier_deriv1(b, t);
 8008658:	ed97 0a04 	vldr	s0, [r7, #16]
 800865c:	6978      	ldr	r0, [r7, #20]
 800865e:	f7fe fd44 	bl	80070ea <bezier_deriv1>
 8008662:	eeb0 7a40 	vmov.f32	s14, s0
 8008666:	eef0 7a60 	vmov.f32	s15, s1
 800866a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800866e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    Vector2 displacement = vector2_diff(p, robot.position);
 8008672:	4b69      	ldr	r3, [pc, #420]	; (8008818 <getAngleError+0x1e0>)
 8008674:	ed93 6a00 	vldr	s12, [r3]
 8008678:	edd3 6a01 	vldr	s13, [r3, #4]
 800867c:	ed97 7a02 	vldr	s14, [r7, #8]
 8008680:	edd7 7a03 	vldr	s15, [r7, #12]
 8008684:	eeb0 1a46 	vmov.f32	s2, s12
 8008688:	eef0 1a66 	vmov.f32	s3, s13
 800868c:	eeb0 0a47 	vmov.f32	s0, s14
 8008690:	eef0 0a67 	vmov.f32	s1, s15
 8008694:	f001 f802 	bl	800969c <vector2_diff>
 8008698:	eeb0 7a40 	vmov.f32	s14, s0
 800869c:	eef0 7a60 	vmov.f32	s15, s1
 80086a0:	ed87 7a07 	vstr	s14, [r7, #28]
 80086a4:	edc7 7a08 	vstr	s15, [r7, #32]

    float sign = vector2_cross(displacement, tangent); // (vaut -1, 0 ou 1)
 80086a8:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80086ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80086b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80086b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80086b8:	eeb0 1a46 	vmov.f32	s2, s12
 80086bc:	eef0 1a66 	vmov.f32	s3, s13
 80086c0:	eeb0 0a47 	vmov.f32	s0, s14
 80086c4:	eef0 0a67 	vmov.f32	s1, s15
 80086c8:	f001 f822 	bl	8009710 <vector2_cross>
 80086cc:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    sign /= (sign != 0)?fabs(sign):1;
 80086d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80086d2:	f7f7 ff59 	bl	8000588 <__aeabi_f2d>
 80086d6:	4604      	mov	r4, r0
 80086d8:	460d      	mov	r5, r1
 80086da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80086de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80086e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e6:	d00a      	beq.n	80086fe <getAngleError+0xc6>
 80086e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80086ec:	eef0 7ae7 	vabs.f32	s15, s15
 80086f0:	ee17 0a90 	vmov	r0, s15
 80086f4:	f7f7 ff48 	bl	8000588 <__aeabi_f2d>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	e002      	b.n	8008704 <getAngleError+0xcc>
 80086fe:	f04f 0200 	mov.w	r2, #0
 8008702:	4b46      	ldr	r3, [pc, #280]	; (800881c <getAngleError+0x1e4>)
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	f7f8 f8c0 	bl	800088c <__aeabi_ddiv>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4610      	mov	r0, r2
 8008712:	4619      	mov	r1, r3
 8008714:	f7f8 fa68 	bl	8000be8 <__aeabi_d2f>
 8008718:	4603      	mov	r3, r0
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
    float signedDistance = sign * vector2_norm(displacement);
 800871c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008720:	edd7 7a08 	vldr	s15, [r7, #32]
 8008724:	eeb0 0a47 	vmov.f32	s0, s14
 8008728:	eef0 0a67 	vmov.f32	s1, s15
 800872c:	f000 ff22 	bl	8009574 <vector2_norm>
 8008730:	eeb0 7a40 	vmov.f32	s14, s0
 8008734:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800873c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    DEBUG_PROPULSION("dist: %.1fmm, ", signedDistance);
 8008740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008742:	f7f7 ff21 	bl	8000588 <__aeabi_f2d>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4835      	ldr	r0, [pc, #212]	; (8008820 <getAngleError+0x1e8>)
 800874c:	f001 fdf0 	bl	800a330 <iprintf>

    float angleError = (vector2_angle(tangent) - atan(signedDistance / 200.0))
 8008750:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008754:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008758:	eeb0 0a47 	vmov.f32	s0, s14
 800875c:	eef0 0a67 	vmov.f32	s1, s15
 8008760:	f000 ff39 	bl	80095d6 <vector2_angle>
 8008764:	ee10 3a10 	vmov	r3, s0
 8008768:	4618      	mov	r0, r3
 800876a:	f7f7 ff0d 	bl	8000588 <__aeabi_f2d>
 800876e:	4604      	mov	r4, r0
 8008770:	460d      	mov	r5, r1
 8008772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008774:	f7f7 ff08 	bl	8000588 <__aeabi_f2d>
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	4b29      	ldr	r3, [pc, #164]	; (8008824 <getAngleError+0x1ec>)
 800877e:	f7f8 f885 	bl	800088c <__aeabi_ddiv>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	ec43 2b17 	vmov	d7, r2, r3
 800878a:	eeb0 0a47 	vmov.f32	s0, s14
 800878e:	eef0 0a67 	vmov.f32	s1, s15
 8008792:	f003 fdd1 	bl	800c338 <atan>
 8008796:	ec53 2b10 	vmov	r2, r3, d0
 800879a:	4620      	mov	r0, r4
 800879c:	4629      	mov	r1, r5
 800879e:	f7f7 fd93 	bl	80002c8 <__aeabi_dsub>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4614      	mov	r4, r2
 80087a8:	461d      	mov	r5, r3
            - (robot.angle + (dir==BACKWARD?M_PI:0));
 80087aa:	4b1b      	ldr	r3, [pc, #108]	; (8008818 <getAngleError+0x1e0>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7f7 feea 	bl	8000588 <__aeabi_f2d>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80087bc:	f1b1 3fff 	cmp.w	r1, #4294967295
 80087c0:	d103      	bne.n	80087ca <getAngleError+0x192>
 80087c2:	a113      	add	r1, pc, #76	; (adr r1, 8008810 <getAngleError+0x1d8>)
 80087c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c8:	e003      	b.n	80087d2 <getAngleError+0x19a>
 80087ca:	f04f 0000 	mov.w	r0, #0
 80087ce:	f04f 0100 	mov.w	r1, #0
 80087d2:	f7f7 fd7b 	bl	80002cc <__adddf3>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f7 fd73 	bl	80002c8 <__aeabi_dsub>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
    float angleError = (vector2_angle(tangent) - atan(signedDistance / 200.0))
 80087e6:	4610      	mov	r0, r2
 80087e8:	4619      	mov	r1, r3
 80087ea:	f7f8 f9fd 	bl	8000be8 <__aeabi_d2f>
 80087ee:	4603      	mov	r3, r0
 80087f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    angleError = standardAngle(angleError); // (entre -pi et pi)
 80087f2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80087f6:	f000 fc2b 	bl	8009050 <standardAngle>
 80087fa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    return angleError;
 80087fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008800:	ee07 3a90 	vmov	s15, r3
}
 8008804:	eeb0 0a67 	vmov.f32	s0, s15
 8008808:	3738      	adds	r7, #56	; 0x38
 800880a:	46bd      	mov	sp, r7
 800880c:	bdb0      	pop	{r4, r5, r7, pc}
 800880e:	bf00      	nop
 8008810:	54442d18 	.word	0x54442d18
 8008814:	400921fb 	.word	0x400921fb
 8008818:	20000d38 	.word	0x20000d38
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	0800e984 	.word	0x0800e984
 8008824:	40690000 	.word	0x40690000

08008828 <getRobotSpeed>:


float getRobotSpeed(Bezier* b,float t, float angleError, Direction dir, float initialSpeed, float finalSpeed) {
 8008828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800882c:	ed2d 8b02 	vpush	{d8}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	6178      	str	r0, [r7, #20]
 8008836:	ed87 0a04 	vstr	s0, [r7, #16]
 800883a:	edc7 0a03 	vstr	s1, [r7, #12]
 800883e:	460b      	mov	r3, r1
 8008840:	ed87 1a01 	vstr	s2, [r7, #4]
 8008844:	edc7 1a00 	vstr	s3, [r7]
 8008848:	72fb      	strb	r3, [r7, #11]
	slowDownFactor = 1 - fabs(Pcorr(10, error[0]))/M_PI;
 800884a:	4bbd      	ldr	r3, [pc, #756]	; (8008b40 <getRobotSpeed+0x318>)
 800884c:	edd3 7a00 	vldr	s15, [r3]
 8008850:	eef0 0a67 	vmov.f32	s1, s15
 8008854:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8008858:	f7fe ff20 	bl	800769c <Pcorr>
 800885c:	eef0 7a40 	vmov.f32	s15, s0
 8008860:	eef0 7ae7 	vabs.f32	s15, s15
 8008864:	ee17 0a90 	vmov	r0, s15
 8008868:	f7f7 fe8e 	bl	8000588 <__aeabi_f2d>
 800886c:	a3ae      	add	r3, pc, #696	; (adr r3, 8008b28 <getRobotSpeed+0x300>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	f7f8 f80b 	bl	800088c <__aeabi_ddiv>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	f04f 0000 	mov.w	r0, #0
 800887e:	49b1      	ldr	r1, [pc, #708]	; (8008b44 <getRobotSpeed+0x31c>)
 8008880:	f7f7 fd22 	bl	80002c8 <__aeabi_dsub>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4610      	mov	r0, r2
 800888a:	4619      	mov	r1, r3
 800888c:	f7f8 f9ac 	bl	8000be8 <__aeabi_d2f>
 8008890:	4603      	mov	r3, r0
 8008892:	4aad      	ldr	r2, [pc, #692]	; (8008b48 <getRobotSpeed+0x320>)
 8008894:	6013      	str	r3, [r2, #0]
    slowDownFactor = 1 - fabs(Icorr(5,error[0], &angleErrorIntegral2,0.5)+Pcorr(4,error[0])+Dcorr(error,0.4*fabs(speed/1000),t-t0)-0.1*(1-slowDownFactor))/M_PI;
 8008896:	4baa      	ldr	r3, [pc, #680]	; (8008b40 <getRobotSpeed+0x318>)
 8008898:	edd3 7a00 	vldr	s15, [r3]
 800889c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80088a0:	48aa      	ldr	r0, [pc, #680]	; (8008b4c <getRobotSpeed+0x324>)
 80088a2:	eef0 0a67 	vmov.f32	s1, s15
 80088a6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80088aa:	f7fe ff0b 	bl	80076c4 <Icorr>
 80088ae:	eeb0 8a40 	vmov.f32	s16, s0
 80088b2:	4ba3      	ldr	r3, [pc, #652]	; (8008b40 <getRobotSpeed+0x318>)
 80088b4:	edd3 7a00 	vldr	s15, [r3]
 80088b8:	eef0 0a67 	vmov.f32	s1, s15
 80088bc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80088c0:	f7fe feec 	bl	800769c <Pcorr>
 80088c4:	eef0 7a40 	vmov.f32	s15, s0
 80088c8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80088cc:	4ba0      	ldr	r3, [pc, #640]	; (8008b50 <getRobotSpeed+0x328>)
 80088ce:	ed93 7a00 	vldr	s14, [r3]
 80088d2:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8008b54 <getRobotSpeed+0x32c>
 80088d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80088da:	eef0 7ae7 	vabs.f32	s15, s15
 80088de:	ee17 0a90 	vmov	r0, s15
 80088e2:	f7f7 fe51 	bl	8000588 <__aeabi_f2d>
 80088e6:	a392      	add	r3, pc, #584	; (adr r3, 8008b30 <getRobotSpeed+0x308>)
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	f7f7 fea4 	bl	8000638 <__aeabi_dmul>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4610      	mov	r0, r2
 80088f6:	4619      	mov	r1, r3
 80088f8:	f7f8 f976 	bl	8000be8 <__aeabi_d2f>
 80088fc:	4602      	mov	r2, r0
 80088fe:	4b96      	ldr	r3, [pc, #600]	; (8008b58 <getRobotSpeed+0x330>)
 8008900:	edd3 7a00 	vldr	s15, [r3]
 8008904:	ed97 7a04 	vldr	s14, [r7, #16]
 8008908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800890c:	eef0 0a67 	vmov.f32	s1, s15
 8008910:	ee00 2a10 	vmov	s0, r2
 8008914:	488a      	ldr	r0, [pc, #552]	; (8008b40 <getRobotSpeed+0x318>)
 8008916:	f7fe ff4f 	bl	80077b8 <Dcorr>
 800891a:	eef0 7a40 	vmov.f32	s15, s0
 800891e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008922:	ee17 0a90 	vmov	r0, s15
 8008926:	f7f7 fe2f 	bl	8000588 <__aeabi_f2d>
 800892a:	4680      	mov	r8, r0
 800892c:	4689      	mov	r9, r1
 800892e:	4b86      	ldr	r3, [pc, #536]	; (8008b48 <getRobotSpeed+0x320>)
 8008930:	edd3 7a00 	vldr	s15, [r3]
 8008934:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800893c:	ee17 0a90 	vmov	r0, s15
 8008940:	f7f7 fe22 	bl	8000588 <__aeabi_f2d>
 8008944:	a37c      	add	r3, pc, #496	; (adr r3, 8008b38 <getRobotSpeed+0x310>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fe75 	bl	8000638 <__aeabi_dmul>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4640      	mov	r0, r8
 8008954:	4649      	mov	r1, r9
 8008956:	f7f7 fcb7 	bl	80002c8 <__aeabi_dsub>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4614      	mov	r4, r2
 8008960:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008964:	a370      	add	r3, pc, #448	; (adr r3, 8008b28 <getRobotSpeed+0x300>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	4620      	mov	r0, r4
 800896c:	4629      	mov	r1, r5
 800896e:	f7f7 ff8d 	bl	800088c <__aeabi_ddiv>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	f04f 0000 	mov.w	r0, #0
 800897a:	4972      	ldr	r1, [pc, #456]	; (8008b44 <getRobotSpeed+0x31c>)
 800897c:	f7f7 fca4 	bl	80002c8 <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4610      	mov	r0, r2
 8008986:	4619      	mov	r1, r3
 8008988:	f7f8 f92e 	bl	8000be8 <__aeabi_d2f>
 800898c:	4603      	mov	r3, r0
 800898e:	4a6e      	ldr	r2, [pc, #440]	; (8008b48 <getRobotSpeed+0x320>)
 8008990:	6013      	str	r3, [r2, #0]
    angleErrorIntegral2 = (angleErrorIntegral2 > 1?1: angleErrorIntegral2);
 8008992:	4b6e      	ldr	r3, [pc, #440]	; (8008b4c <getRobotSpeed+0x324>)
 8008994:	edd3 7a00 	vldr	s15, [r3]
 8008998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800899c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a4:	dd02      	ble.n	80089ac <getRobotSpeed+0x184>
 80089a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80089aa:	e001      	b.n	80089b0 <getRobotSpeed+0x188>
 80089ac:	4b67      	ldr	r3, [pc, #412]	; (8008b4c <getRobotSpeed+0x324>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a66      	ldr	r2, [pc, #408]	; (8008b4c <getRobotSpeed+0x324>)
 80089b2:	6013      	str	r3, [r2, #0]
    slowDownFactor = slowDownFactor>0?slowDownFactor:0;
 80089b4:	4b64      	ldr	r3, [pc, #400]	; (8008b48 <getRobotSpeed+0x320>)
 80089b6:	edd3 7a00 	vldr	s15, [r3]
 80089ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c2:	dd02      	ble.n	80089ca <getRobotSpeed+0x1a2>
 80089c4:	4b60      	ldr	r3, [pc, #384]	; (8008b48 <getRobotSpeed+0x320>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	e001      	b.n	80089ce <getRobotSpeed+0x1a6>
 80089ca:	f04f 0300 	mov.w	r3, #0
 80089ce:	4a5e      	ldr	r2, [pc, #376]	; (8008b48 <getRobotSpeed+0x320>)
 80089d0:	6013      	str	r3, [r2, #0]

    /*float k = bezier_curvature(b,t);
    float turnFactor =(1-fabs(300*k) > 0.5?1-fabs(300*k):0.5);*/

    //speed = (dir==BACKWARD?-1:1) * slowDownFactor*turnFactor;
    speed = (dir==BACKWARD?-1:1) * slowDownFactor;
 80089d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80089d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089da:	d102      	bne.n	80089e2 <getRobotSpeed+0x1ba>
 80089dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80089e0:	e001      	b.n	80089e6 <getRobotSpeed+0x1be>
 80089e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089e6:	4b58      	ldr	r3, [pc, #352]	; (8008b48 <getRobotSpeed+0x320>)
 80089e8:	edd3 7a00 	vldr	s15, [r3]
 80089ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f0:	4b57      	ldr	r3, [pc, #348]	; (8008b50 <getRobotSpeed+0x328>)
 80089f2:	edc3 7a00 	vstr	s15, [r3]
    if (initialSpeed < 1 && finalSpeed < 1)
 80089f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80089fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a06:	d51f      	bpl.n	8008a48 <getRobotSpeed+0x220>
 8008a08:	edd7 7a00 	vldr	s15, [r7]
 8008a0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a18:	d516      	bpl.n	8008a48 <getRobotSpeed+0x220>
        speed *= 600*(1-t) + 20;
 8008a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a26:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8008b5c <getRobotSpeed+0x334>
 8008a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a2e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008a32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a36:	4b46      	ldr	r3, [pc, #280]	; (8008b50 <getRobotSpeed+0x328>)
 8008a38:	edd3 7a00 	vldr	s15, [r3]
 8008a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a40:	4b43      	ldr	r3, [pc, #268]	; (8008b50 <getRobotSpeed+0x328>)
 8008a42:	edc3 7a00 	vstr	s15, [r3]
 8008a46:	e01d      	b.n	8008a84 <getRobotSpeed+0x25c>
    else
        speed *= initialSpeed*(1-t) + finalSpeed*t + 50;
 8008a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a54:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a5c:	edd7 6a00 	vldr	s13, [r7]
 8008a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8008a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a6c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8008b60 <getRobotSpeed+0x338>
 8008a70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a74:	4b36      	ldr	r3, [pc, #216]	; (8008b50 <getRobotSpeed+0x328>)
 8008a76:	edd3 7a00 	vldr	s15, [r3]
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	4b34      	ldr	r3, [pc, #208]	; (8008b50 <getRobotSpeed+0x328>)
 8008a80:	edc3 7a00 	vstr	s15, [r3]

    // Limite les accelerations brutales
    if (fabs(speed) > robot.measuredSpeed + K_ACCEL)
 8008a84:	4b32      	ldr	r3, [pc, #200]	; (8008b50 <getRobotSpeed+0x328>)
 8008a86:	edd3 7a00 	vldr	s15, [r3]
 8008a8a:	eeb0 7ae7 	vabs.f32	s14, s15
 8008a8e:	4b35      	ldr	r3, [pc, #212]	; (8008b64 <getRobotSpeed+0x33c>)
 8008a90:	edd3 7a07 	vldr	s15, [r3, #28]
 8008a94:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa4:	dd33      	ble.n	8008b0e <getRobotSpeed+0x2e6>
        speed = (robot.measuredSpeed + K_ACCEL) * fabs(speed) / speed;
 8008aa6:	4b2f      	ldr	r3, [pc, #188]	; (8008b64 <getRobotSpeed+0x33c>)
 8008aa8:	edd3 7a07 	vldr	s15, [r3, #28]
 8008aac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008ab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ab4:	ee17 0a90 	vmov	r0, s15
 8008ab8:	f7f7 fd66 	bl	8000588 <__aeabi_f2d>
 8008abc:	4604      	mov	r4, r0
 8008abe:	460d      	mov	r5, r1
 8008ac0:	4b23      	ldr	r3, [pc, #140]	; (8008b50 <getRobotSpeed+0x328>)
 8008ac2:	edd3 7a00 	vldr	s15, [r3]
 8008ac6:	eef0 7ae7 	vabs.f32	s15, s15
 8008aca:	ee17 0a90 	vmov	r0, s15
 8008ace:	f7f7 fd5b 	bl	8000588 <__aeabi_f2d>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	f7f7 fdad 	bl	8000638 <__aeabi_dmul>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	4614      	mov	r4, r2
 8008ae4:	461d      	mov	r5, r3
 8008ae6:	4b1a      	ldr	r3, [pc, #104]	; (8008b50 <getRobotSpeed+0x328>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7f7 fd4c 	bl	8000588 <__aeabi_f2d>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4620      	mov	r0, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	f7f7 fec8 	bl	800088c <__aeabi_ddiv>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4610      	mov	r0, r2
 8008b02:	4619      	mov	r1, r3
 8008b04:	f7f8 f870 	bl	8000be8 <__aeabi_d2f>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	4a11      	ldr	r2, [pc, #68]	; (8008b50 <getRobotSpeed+0x328>)
 8008b0c:	6013      	str	r3, [r2, #0]

    return speed;
 8008b0e:	4b10      	ldr	r3, [pc, #64]	; (8008b50 <getRobotSpeed+0x328>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	ee07 3a90 	vmov	s15, r3
}
 8008b16:	eeb0 0a67 	vmov.f32	s0, s15
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	ecbd 8b02 	vpop	{d8}
 8008b22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008b26:	bf00      	nop
 8008b28:	54442d18 	.word	0x54442d18
 8008b2c:	400921fb 	.word	0x400921fb
 8008b30:	9999999a 	.word	0x9999999a
 8008b34:	3fd99999 	.word	0x3fd99999
 8008b38:	9999999a 	.word	0x9999999a
 8008b3c:	3fb99999 	.word	0x3fb99999
 8008b40:	20000d74 	.word	0x20000d74
 8008b44:	3ff00000 	.word	0x3ff00000
 8008b48:	20000d84 	.word	0x20000d84
 8008b4c:	20000d68 	.word	0x20000d68
 8008b50:	20000d88 	.word	0x20000d88
 8008b54:	447a0000 	.word	0x447a0000
 8008b58:	20000d80 	.word	0x20000d80
 8008b5c:	44160000 	.word	0x44160000
 8008b60:	42480000 	.word	0x42480000
 8008b64:	20000d38 	.word	0x20000d38

08008b68 <calculateMotorSpeeds>:


void calculateMotorSpeeds(float* leftSpeed, float* rightSpeed, Bezier* b, float t, Direction dir, float speed) {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6178      	str	r0, [r7, #20]
 8008b70:	6139      	str	r1, [r7, #16]
 8008b72:	60fa      	str	r2, [r7, #12]
 8008b74:	ed87 0a02 	vstr	s0, [r7, #8]
 8008b78:	edc7 0a00 	vstr	s1, [r7]
 8008b7c:	71fb      	strb	r3, [r7, #7]
    float k = bezier_curvature(b, t);
 8008b7e:	ed97 0a02 	vldr	s0, [r7, #8]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7fe fbec 	bl	8007360 <bezier_curvature>
 8008b88:	ed87 0a07 	vstr	s0, [r7, #28]
    //float speed2 = speed*(1-atan(1000*fabs(k))/M_PI);
    //speed2 = speed>400?speed2:speed;
    float speed2 = speed;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	61bb      	str	r3, [r7, #24]
    *leftSpeed = speed2 * (1 + dir*ENTRAXE_MOTOR*k/2);
 8008b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b94:	2292      	movs	r2, #146	; 0x92
 8008b96:	fb02 f303 	mul.w	r3, r2, r3
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ba2:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008baa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bba:	edd7 7a06 	vldr	s15, [r7, #24]
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	edc3 7a00 	vstr	s15, [r3]
    *rightSpeed = speed2 * (1 - dir*ENTRAXE_MOTOR*k/2);
 8008bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bcc:	2292      	movs	r2, #146	; 0x92
 8008bce:	fb02 f303 	mul.w	r3, r2, r3
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bda:	edd7 7a07 	vldr	s15, [r7, #28]
 8008bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008be2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bf2:	edd7 7a06 	vldr	s15, [r7, #24]
 8008bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	edc3 7a00 	vstr	s15, [r3]
}
 8008c00:	bf00      	nop
 8008c02:	3720      	adds	r7, #32
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <addCorrection>:


void addCorrection(float* leftSpeed, float* rightSpeed, float angleError, float * angleErrorIntegral, float * angleError0, float * correction, float speed, float dt) {
 8008c08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c0c:	ed2d 8b02 	vpush	{d8}
 8008c10:	b08c      	sub	sp, #48	; 0x30
 8008c12:	af04      	add	r7, sp, #16
 8008c14:	61f8      	str	r0, [r7, #28]
 8008c16:	61b9      	str	r1, [r7, #24]
 8008c18:	ed87 0a05 	vstr	s0, [r7, #20]
 8008c1c:	613a      	str	r2, [r7, #16]
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	edc7 0a02 	vstr	s1, [r7, #8]
 8008c24:	ed87 1a01 	vstr	s2, [r7, #4]
	*angleErrorIntegral = (abs(*angleErrorIntegral) > MAX_INTEGRAL_CORR/KI_ANGLE?(MAX_INTEGRAL_CORR*(*angleErrorIntegral)/(KI_ANGLE*abs(*angleErrorIntegral))):(*angleErrorIntegral));

	*correction = -angleError*KP_ANGLE - (*angleErrorIntegral)*KI_ANGLE - KD_ANGLE*pow(fabs(speed/KD_SPEED),2)*(angleError-(*angleError0))/0.0001 + KC_ANGLE*(*correction); // contre réaction

	*angleError0 = angleError;*/
	error[2] = error[1];
 8008c28:	4b69      	ldr	r3, [pc, #420]	; (8008dd0 <addCorrection+0x1c8>)
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	4a68      	ldr	r2, [pc, #416]	; (8008dd0 <addCorrection+0x1c8>)
 8008c2e:	6093      	str	r3, [r2, #8]
	error[1] = error[0];
 8008c30:	4b67      	ldr	r3, [pc, #412]	; (8008dd0 <addCorrection+0x1c8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a66      	ldr	r2, [pc, #408]	; (8008dd0 <addCorrection+0x1c8>)
 8008c36:	6053      	str	r3, [r2, #4]
	error[0] = angleError;
 8008c38:	4a65      	ldr	r2, [pc, #404]	; (8008dd0 <addCorrection+0x1c8>)
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	6013      	str	r3, [r2, #0]
	*correction = corrector(error, *correction, KP_ANGLE, KI_ANGLE, KD_ANGLE*sin(pow(fabs(speed/1000)*M_PI/2,1)), KC_ANGLE, dt,MAX_INTEGRAL_CORR,angleErrorIntegral);
 8008c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c40:	ed93 8a00 	vldr	s16, [r3]
 8008c44:	ed97 7a02 	vldr	s14, [r7, #8]
 8008c48:	eddf 6a62 	vldr	s13, [pc, #392]	; 8008dd4 <addCorrection+0x1cc>
 8008c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c50:	eef0 7ae7 	vabs.f32	s15, s15
 8008c54:	ee17 0a90 	vmov	r0, s15
 8008c58:	f7f7 fc96 	bl	8000588 <__aeabi_f2d>
 8008c5c:	a35a      	add	r3, pc, #360	; (adr r3, 8008dc8 <addCorrection+0x1c0>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7f7 fce9 	bl	8000638 <__aeabi_dmul>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f04f 0200 	mov.w	r2, #0
 8008c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c76:	f7f7 fe09 	bl	800088c <__aeabi_ddiv>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	ec43 2b17 	vmov	d7, r2, r3
 8008c82:	eeb0 0a47 	vmov.f32	s0, s14
 8008c86:	eef0 0a67 	vmov.f32	s1, s15
 8008c8a:	f003 fd55 	bl	800c738 <sin>
 8008c8e:	ec51 0b10 	vmov	r0, r1, d0
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	4b50      	ldr	r3, [pc, #320]	; (8008dd8 <addCorrection+0x1d0>)
 8008c98:	f7f7 fcce 	bl	8000638 <__aeabi_dmul>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f7f7 ffa0 	bl	8000be8 <__aeabi_d2f>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	6939      	ldr	r1, [r7, #16]
 8008cac:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8008ddc <addCorrection+0x1d4>
 8008cb0:	edd7 2a01 	vldr	s5, [r7, #4]
 8008cb4:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8008de0 <addCorrection+0x1d8>
 8008cb8:	ee01 3a90 	vmov	s3, r3
 8008cbc:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8008cc0:	eddf 0a48 	vldr	s1, [pc, #288]	; 8008de4 <addCorrection+0x1dc>
 8008cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8008cc8:	4841      	ldr	r0, [pc, #260]	; (8008dd0 <addCorrection+0x1c8>)
 8008cca:	f7fe fdd5 	bl	8007878 <corrector>
 8008cce:	eef0 7a40 	vmov.f32	s15, s0
 8008cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd4:	edc3 7a00 	vstr	s15, [r3]
    if (fabs(*correction) > MAX_CORRECTION) {
 8008cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cda:	edd3 7a00 	vldr	s15, [r3]
 8008cde:	eef0 7ae7 	vabs.f32	s15, s15
 8008ce2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8008de8 <addCorrection+0x1e0>
 8008ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cee:	dd25      	ble.n	8008d3c <addCorrection+0x134>
        *correction *= MAX_CORRECTION / fabs(*correction);
 8008cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7f7 fc47 	bl	8000588 <__aeabi_f2d>
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	460d      	mov	r5, r1
 8008cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d00:	edd3 7a00 	vldr	s15, [r3]
 8008d04:	eef0 7ae7 	vabs.f32	s15, s15
 8008d08:	ee17 0a90 	vmov	r0, s15
 8008d0c:	f7f7 fc3c 	bl	8000588 <__aeabi_f2d>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	f04f 0000 	mov.w	r0, #0
 8008d18:	4934      	ldr	r1, [pc, #208]	; (8008dec <addCorrection+0x1e4>)
 8008d1a:	f7f7 fdb7 	bl	800088c <__aeabi_ddiv>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4620      	mov	r0, r4
 8008d24:	4629      	mov	r1, r5
 8008d26:	f7f7 fc87 	bl	8000638 <__aeabi_dmul>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4610      	mov	r0, r2
 8008d30:	4619      	mov	r1, r3
 8008d32:	f7f7 ff59 	bl	8000be8 <__aeabi_d2f>
 8008d36:	4602      	mov	r2, r0
 8008d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d3a:	601a      	str	r2, [r3, #0]
    }

    DEBUG_PROPULSION("ProportionnalCorr: %.1fmm, IntegralCorr: %.1fmm, corr: %.1fmm\r\n",angleError*KP_ANGLE, (*angleErrorIntegral)*KI_ANGLE, *correction);
 8008d3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d40:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008de4 <addCorrection+0x1dc>
 8008d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d48:	ee17 0a90 	vmov	r0, s15
 8008d4c:	f7f7 fc1c 	bl	8000588 <__aeabi_f2d>
 8008d50:	4680      	mov	r8, r0
 8008d52:	4689      	mov	r9, r1
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	edd3 7a00 	vldr	s15, [r3]
 8008d5a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d62:	ee17 0a90 	vmov	r0, s15
 8008d66:	f7f7 fc0f 	bl	8000588 <__aeabi_f2d>
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f7 fc08 	bl	8000588 <__aeabi_f2d>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d80:	e9cd 4500 	strd	r4, r5, [sp]
 8008d84:	4642      	mov	r2, r8
 8008d86:	464b      	mov	r3, r9
 8008d88:	4819      	ldr	r0, [pc, #100]	; (8008df0 <addCorrection+0x1e8>)
 8008d8a:	f001 fad1 	bl	800a330 <iprintf>

    *leftSpeed -= *correction;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	ed93 7a00 	vldr	s14, [r3]
 8008d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d96:	edd3 7a00 	vldr	s15, [r3]
 8008d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	edc3 7a00 	vstr	s15, [r3]
    *rightSpeed += *correction;
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	ed93 7a00 	vldr	s14, [r3]
 8008daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dac:	edd3 7a00 	vldr	s15, [r3]
 8008db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	edc3 7a00 	vstr	s15, [r3]
}
 8008dba:	bf00      	nop
 8008dbc:	3720      	adds	r7, #32
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	ecbd 8b02 	vpop	{d8}
 8008dc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008dc8:	54442d18 	.word	0x54442d18
 8008dcc:	400921fb 	.word	0x400921fb
 8008dd0:	20000d74 	.word	0x20000d74
 8008dd4:	447a0000 	.word	0x447a0000
 8008dd8:	3fe80000 	.word	0x3fe80000
 8008ddc:	42960000 	.word	0x42960000
 8008de0:	3dcccccd 	.word	0x3dcccccd
 8008de4:	43fa0000 	.word	0x43fa0000
 8008de8:	42a00000 	.word	0x42a00000
 8008dec:	40540000 	.word	0x40540000
 8008df0:	0800e994 	.word	0x0800e994
 8008df4:	00000000 	.word	0x00000000

08008df8 <propulsion_followBezier>:


// C'est ici que la magie a lieu !
float propulsion_followBezier(Bezier* b, Direction dir, float initialSpeed, float finalSpeed, bool reverse) {
 8008df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dfc:	ed2d 8b02 	vpush	{d8}
 8008e00:	b0a0      	sub	sp, #128	; 0x80
 8008e02:	af0c      	add	r7, sp, #48	; 0x30
 8008e04:	6278      	str	r0, [r7, #36]	; 0x24
 8008e06:	460b      	mov	r3, r1
 8008e08:	ed87 0a07 	vstr	s0, [r7, #28]
 8008e0c:	edc7 0a06 	vstr	s1, [r7, #24]
 8008e10:	617a      	str	r2, [r7, #20]
 8008e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    float t = bezier_project(b, robot.position, 0.0001); // (entre 0 et 1)
 8008e16:	4b86      	ldr	r3, [pc, #536]	; (8009030 <propulsion_followBezier+0x238>)
 8008e18:	ed93 7a00 	vldr	s14, [r3]
 8008e1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008e20:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8009034 <propulsion_followBezier+0x23c>
 8008e24:	eeb0 0a47 	vmov.f32	s0, s14
 8008e28:	eef0 0a67 	vmov.f32	s1, s15
 8008e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e2e:	f7fe fb55 	bl	80074dc <bezier_project>
 8008e32:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
    float dt = t-t0;
 8008e36:	4b80      	ldr	r3, [pc, #512]	; (8009038 <propulsion_followBezier+0x240>)
 8008e38:	edd3 7a00 	vldr	s15, [r3]
 8008e3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e44:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float k = bezier_curvature(b,t);
 8008e48:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8008e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e4e:	f7fe fa87 	bl	8007360 <bezier_curvature>
 8008e52:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    Vector2 p = bezier_eval(b, t); // Point de la courbe le plus proche du robot
 8008e56:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8008e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e5c:	f7fe f884 	bl	8006f68 <bezier_eval>
 8008e60:	eeb0 7a40 	vmov.f32	s14, s0
 8008e64:	eef0 7a60 	vmov.f32	s15, s1
 8008e68:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8008e6c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    //DEBUG_PROPULSION("t: %.5f, x: %.1fmm, y: %.1fmm, a: %.1fdeg, ", t, robot.position.x, robot.position.y, robot.angle / M_PI / 2 * 360);

    // Erreur d'orientation
    float angleError = getAngleError(b, t, p, dir);
 8008e70:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008e74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008e78:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	eef0 0a47 	vmov.f32	s1, s14
 8008e82:	eeb0 1a67 	vmov.f32	s2, s15
 8008e86:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8008e8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e8c:	f7ff fbd4 	bl	8008638 <getAngleError>
 8008e90:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    DEBUG_PROPULSION("t: %.5f, x: %.1fmm, y: %.1fmm, speed: %.1fmm/s, a: %.1fdeg, a_err: %.1fdeg, k: %.10f ", t, robot.position.x, robot.position.y, robot.measuredSpeed, robot.angle / M_PI / 2 * 360, angleError / M_PI / 2 * 360, k);
 8008e94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008e96:	f7f7 fb77 	bl	8000588 <__aeabi_f2d>
 8008e9a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008e9e:	4b64      	ldr	r3, [pc, #400]	; (8009030 <propulsion_followBezier+0x238>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7f7 fb70 	bl	8000588 <__aeabi_f2d>
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	4689      	mov	r9, r1
 8008eac:	4b60      	ldr	r3, [pc, #384]	; (8009030 <propulsion_followBezier+0x238>)
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7f7 fb69 	bl	8000588 <__aeabi_f2d>
 8008eb6:	4682      	mov	sl, r0
 8008eb8:	468b      	mov	fp, r1
 8008eba:	4b5d      	ldr	r3, [pc, #372]	; (8009030 <propulsion_followBezier+0x238>)
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7f7 fb62 	bl	8000588 <__aeabi_f2d>
 8008ec4:	e9c7 0100 	strd	r0, r1, [r7]
 8008ec8:	4b59      	ldr	r3, [pc, #356]	; (8009030 <propulsion_followBezier+0x238>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f7 fb5b 	bl	8000588 <__aeabi_f2d>
 8008ed2:	a355      	add	r3, pc, #340	; (adr r3, 8009028 <propulsion_followBezier+0x230>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f7f7 fcd8 	bl	800088c <__aeabi_ddiv>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	f04f 0200 	mov.w	r2, #0
 8008ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008eec:	f7f7 fcce 	bl	800088c <__aeabi_ddiv>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	f04f 0200 	mov.w	r2, #0
 8008efc:	4b4f      	ldr	r3, [pc, #316]	; (800903c <propulsion_followBezier+0x244>)
 8008efe:	f7f7 fb9b 	bl	8000638 <__aeabi_dmul>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	ec43 2b18 	vmov	d8, r2, r3
 8008f0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008f0c:	f7f7 fb3c 	bl	8000588 <__aeabi_f2d>
 8008f10:	a345      	add	r3, pc, #276	; (adr r3, 8009028 <propulsion_followBezier+0x230>)
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 fcb9 	bl	800088c <__aeabi_ddiv>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4610      	mov	r0, r2
 8008f20:	4619      	mov	r1, r3
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f2a:	f7f7 fcaf 	bl	800088c <__aeabi_ddiv>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4610      	mov	r0, r2
 8008f34:	4619      	mov	r1, r3
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	4b40      	ldr	r3, [pc, #256]	; (800903c <propulsion_followBezier+0x244>)
 8008f3c:	f7f7 fb7c 	bl	8000638 <__aeabi_dmul>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4614      	mov	r4, r2
 8008f46:	461d      	mov	r5, r3
 8008f48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f4a:	f7f7 fb1d 	bl	8000588 <__aeabi_f2d>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008f56:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008f5a:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008f5e:	ed97 7b00 	vldr	d7, [r7]
 8008f62:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008f66:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8008f6a:	e9cd 8900 	strd	r8, r9, [sp]
 8008f6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f72:	4833      	ldr	r0, [pc, #204]	; (8009040 <propulsion_followBezier+0x248>)
 8008f74:	f001 f9dc 	bl	800a330 <iprintf>

    if (reverse) {
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <propulsion_followBezier+0x18c>
    	angleError = 0;
 8008f7e:	f04f 0300 	mov.w	r3, #0
 8008f82:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    // Vitesse globale du robot
    float speed = getRobotSpeed(b, t, angleError, dir, initialSpeed, finalSpeed);
 8008f84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008f88:	edd7 1a06 	vldr	s3, [r7, #24]
 8008f8c:	ed97 1a07 	vldr	s2, [r7, #28]
 8008f90:	4619      	mov	r1, r3
 8008f92:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8008f96:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8008f9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f9c:	f7ff fc44 	bl	8008828 <getRobotSpeed>
 8008fa0:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    if (reverse) {
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <propulsion_followBezier+0x1be>
    	speed *= -1;
 8008faa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008fae:	eef1 7a67 	vneg.f32	s15, s15
 8008fb2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    }

    float leftSpeed, rightSpeed;

    // Boucle ouverte
    calculateMotorSpeeds(&leftSpeed, &rightSpeed, b, t, dir, speed);
 8008fb6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008fba:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008fbe:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008fc2:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8008fc6:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8008fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fcc:	f7ff fdcc 	bl	8008b68 <calculateMotorSpeeds>

    // Boucle fermée
    addCorrection(&leftSpeed, &rightSpeed, angleError, &angleErrorIntegral, &angleError0, &correction, speed,dt);
 8008fd0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8008fd4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008fd8:	4b1a      	ldr	r3, [pc, #104]	; (8009044 <propulsion_followBezier+0x24c>)
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 8008fe0:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8008fe4:	4b18      	ldr	r3, [pc, #96]	; (8009048 <propulsion_followBezier+0x250>)
 8008fe6:	4a19      	ldr	r2, [pc, #100]	; (800904c <propulsion_followBezier+0x254>)
 8008fe8:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8008fec:	f7ff fe0c 	bl	8008c08 <addCorrection>

    // Commande des moteurs
    propulsion_setSpeeds(leftSpeed, rightSpeed, k);
 8008ff0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008ff4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008ff8:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 8008ffc:	eef0 0a47 	vmov.f32	s1, s14
 8009000:	eeb0 0a67 	vmov.f32	s0, s15
 8009004:	f7ff fa08 	bl	8008418 <propulsion_setSpeeds>
    t0 = t;
 8009008:	4a0b      	ldr	r2, [pc, #44]	; (8009038 <propulsion_followBezier+0x240>)
 800900a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800900c:	6013      	str	r3, [r2, #0]
    return t;
 800900e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009010:	ee07 3a90 	vmov	s15, r3
}
 8009014:	eeb0 0a67 	vmov.f32	s0, s15
 8009018:	3750      	adds	r7, #80	; 0x50
 800901a:	46bd      	mov	sp, r7
 800901c:	ecbd 8b02 	vpop	{d8}
 8009020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009024:	f3af 8000 	nop.w
 8009028:	54442d18 	.word	0x54442d18
 800902c:	400921fb 	.word	0x400921fb
 8009030:	20000d38 	.word	0x20000d38
 8009034:	38d1b717 	.word	0x38d1b717
 8009038:	20000d80 	.word	0x20000d80
 800903c:	40768000 	.word	0x40768000
 8009040:	0800e9d4 	.word	0x0800e9d4
 8009044:	20000d70 	.word	0x20000d70
 8009048:	20000d6c 	.word	0x20000d6c
 800904c:	20000d64 	.word	0x20000d64

08009050 <standardAngle>:


float standardAngle(float angle) {
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	ed87 0a01 	vstr	s0, [r7, #4]
    return fmod(fmod(angle + M_PI, M_TWOPI) + M_TWOPI, M_TWOPI) - M_PI;
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7f7 fa94 	bl	8000588 <__aeabi_f2d>
 8009060:	a31f      	add	r3, pc, #124	; (adr r3, 80090e0 <standardAngle+0x90>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	f7f7 f931 	bl	80002cc <__adddf3>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	ec43 2b17 	vmov	d7, r2, r3
 8009072:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80090d8 <standardAngle+0x88>
 8009076:	eeb0 0a47 	vmov.f32	s0, s14
 800907a:	eef0 0a67 	vmov.f32	s1, s15
 800907e:	f003 f88f 	bl	800c1a0 <fmod>
 8009082:	ec51 0b10 	vmov	r0, r1, d0
 8009086:	a314      	add	r3, pc, #80	; (adr r3, 80090d8 <standardAngle+0x88>)
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	f7f7 f91e 	bl	80002cc <__adddf3>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	ec43 2b17 	vmov	d7, r2, r3
 8009098:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80090d8 <standardAngle+0x88>
 800909c:	eeb0 0a47 	vmov.f32	s0, s14
 80090a0:	eef0 0a67 	vmov.f32	s1, s15
 80090a4:	f003 f87c 	bl	800c1a0 <fmod>
 80090a8:	ec51 0b10 	vmov	r0, r1, d0
 80090ac:	a30c      	add	r3, pc, #48	; (adr r3, 80090e0 <standardAngle+0x90>)
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	f7f7 f909 	bl	80002c8 <__aeabi_dsub>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4610      	mov	r0, r2
 80090bc:	4619      	mov	r1, r3
 80090be:	f7f7 fd93 	bl	8000be8 <__aeabi_d2f>
 80090c2:	4603      	mov	r3, r0
 80090c4:	ee07 3a90 	vmov	s15, r3
}
 80090c8:	eeb0 0a67 	vmov.f32	s0, s15
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	f3af 8000 	nop.w
 80090d8:	54442d18 	.word	0x54442d18
 80090dc:	401921fb 	.word	0x401921fb
 80090e0:	54442d18 	.word	0x54442d18
 80090e4:	400921fb 	.word	0x400921fb

080090e8 <serial_send>:

		}*/
	serial_send(&byte7No4,1,1);
}

int serial_send(uint8_t *ptr, int len, int uartPort) {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
	if (uartPort == 4)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d108      	bne.n	800910c <serial_send+0x24>
		HAL_UART_Transmit(&huart4, ptr, len, HAL_MAX_DELAY);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	481c      	ldr	r0, [pc, #112]	; (8009178 <serial_send+0x90>)
 8009106:	f7fc fb3e 	bl	8005786 <HAL_UART_Transmit>
 800910a:	e030      	b.n	800916e <serial_send+0x86>
	else if (uartPort == 5)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b05      	cmp	r3, #5
 8009110:	d108      	bne.n	8009124 <serial_send+0x3c>
		HAL_UART_Transmit(&huart5, ptr, len, HAL_MAX_DELAY);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	b29a      	uxth	r2, r3
 8009116:	f04f 33ff 	mov.w	r3, #4294967295
 800911a:	68f9      	ldr	r1, [r7, #12]
 800911c:	4817      	ldr	r0, [pc, #92]	; (800917c <serial_send+0x94>)
 800911e:	f7fc fb32 	bl	8005786 <HAL_UART_Transmit>
 8009122:	e024      	b.n	800916e <serial_send+0x86>
	else if (uartPort == 1){
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d108      	bne.n	800913c <serial_send+0x54>
		HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	b29a      	uxth	r2, r3
 800912e:	f04f 33ff 	mov.w	r3, #4294967295
 8009132:	68f9      	ldr	r1, [r7, #12]
 8009134:	4812      	ldr	r0, [pc, #72]	; (8009180 <serial_send+0x98>)
 8009136:	f7fc fb26 	bl	8005786 <HAL_UART_Transmit>
 800913a:	e018      	b.n	800916e <serial_send+0x86>
	}
	else if (uartPort == 6) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b06      	cmp	r3, #6
 8009140:	d115      	bne.n	800916e <serial_send+0x86>
		uint8_t action = *ptr;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	75fb      	strb	r3, [r7, #23]
		if(action == 0x69)
 8009148:	7dfb      	ldrb	r3, [r7, #23]
 800914a:	2b69      	cmp	r3, #105	; 0x69
 800914c:	d106      	bne.n	800915c <serial_send+0x74>
		{
			HAL_UART_Transmit(&huart6, "1021", 4, 1);
 800914e:	2301      	movs	r3, #1
 8009150:	2204      	movs	r2, #4
 8009152:	490c      	ldr	r1, [pc, #48]	; (8009184 <serial_send+0x9c>)
 8009154:	480c      	ldr	r0, [pc, #48]	; (8009188 <serial_send+0xa0>)
 8009156:	f7fc fb16 	bl	8005786 <HAL_UART_Transmit>
 800915a:	e008      	b.n	800916e <serial_send+0x86>
		}
		else if(action == 0x70)
 800915c:	7dfb      	ldrb	r3, [r7, #23]
 800915e:	2b70      	cmp	r3, #112	; 0x70
 8009160:	d105      	bne.n	800916e <serial_send+0x86>
		{
			HAL_UART_Transmit(&huart6, "1010", 4, 1);
 8009162:	2301      	movs	r3, #1
 8009164:	2204      	movs	r2, #4
 8009166:	4909      	ldr	r1, [pc, #36]	; (800918c <serial_send+0xa4>)
 8009168:	4807      	ldr	r0, [pc, #28]	; (8009188 <serial_send+0xa0>)
 800916a:	f7fc fb0c 	bl	8005786 <HAL_UART_Transmit>
			}
		}*/
		//HAL_UART_Transmit(&huart6, &action, len, HAL_MAX_DELAY);
		//printf("Sending %x\r\n", *ptr);
	}
	return len;
 800916e:	68bb      	ldr	r3, [r7, #8]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000490 	.word	0x20000490
 800917c:	200004d4 	.word	0x200004d4
 8009180:	20000518 	.word	0x20000518
 8009184:	0800ea2c 	.word	0x0800ea2c
 8009188:	200005a0 	.word	0x200005a0
 800918c:	0800ea34 	.word	0x0800ea34

08009190 <WifiUartTXActivation>:

void WifiUartTXActivation(){//activate USART1 as print port and enable ESP to send text
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
	wifiDataTX=0x7F;
 8009194:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <WifiUartTXActivation+0x20>)
 8009196:	227f      	movs	r2, #127	; 0x7f
 8009198:	701a      	strb	r2, [r3, #0]
	globalUSARTchange=1;
 800919a:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <WifiUartTXActivation+0x24>)
 800919c:	2201      	movs	r2, #1
 800919e:	701a      	strb	r2, [r3, #0]
	serial_send(&wifiDataTX, 1, 1);
 80091a0:	2201      	movs	r2, #1
 80091a2:	2101      	movs	r1, #1
 80091a4:	4802      	ldr	r0, [pc, #8]	; (80091b0 <WifiUartTXActivation+0x20>)
 80091a6:	f7ff ff9f 	bl	80090e8 <serial_send>
}
 80091aa:	bf00      	nop
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000d8f 	.word	0x20000d8f
 80091b4:	20000d8d 	.word	0x20000d8d

080091b8 <WifiUartTXDeactivation>:

void WifiUartTXDeactivation(){//deactivate USART1 as print port
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
	wifiDataTX=0x7E;
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <WifiUartTXDeactivation+0x20>)
 80091be:	227e      	movs	r2, #126	; 0x7e
 80091c0:	701a      	strb	r2, [r3, #0]
	globalUSARTchange=0;
 80091c2:	4b06      	ldr	r3, [pc, #24]	; (80091dc <WifiUartTXDeactivation+0x24>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	701a      	strb	r2, [r3, #0]
	serial_send(&wifiDataTX, 1, 1);
 80091c8:	2201      	movs	r2, #1
 80091ca:	2101      	movs	r1, #1
 80091cc:	4802      	ldr	r0, [pc, #8]	; (80091d8 <WifiUartTXDeactivation+0x20>)
 80091ce:	f7ff ff8b 	bl	80090e8 <serial_send>
}
 80091d2:	bf00      	nop
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000d8f 	.word	0x20000d8f
 80091dc:	20000d8d 	.word	0x20000d8d

080091e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a3e      	ldr	r2, [pc, #248]	; (80092e8 <HAL_UART_RxCpltCallback+0x108>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d114      	bne.n	800921c <HAL_UART_RxCpltCallback+0x3c>
		/*int id = lidarData >> 4;
		uint8_t dist = (lidarData & 0xF) << 2;
		lidar_updateDistance(id, dist);
		HAL_UART_Receive_IT(&huart4, &lidarData, 1);*/

		DataAcquiered = 1;
 80091f2:	4b3e      	ldr	r3, [pc, #248]	; (80092ec <HAL_UART_RxCpltCallback+0x10c>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]
		bufferIndex += 3;
 80091f8:	4b3d      	ldr	r3, [pc, #244]	; (80092f0 <HAL_UART_RxCpltCallback+0x110>)
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	3303      	adds	r3, #3
 80091fe:	b29a      	uxth	r2, r3
 8009200:	4b3b      	ldr	r3, [pc, #236]	; (80092f0 <HAL_UART_RxCpltCallback+0x110>)
 8009202:	801a      	strh	r2, [r3, #0]
		frameStatus();
 8009204:	f7fe fe38 	bl	8007e78 <frameStatus>
		HAL_UART_Receive_DMA(&huart4, &lidarBuf[bufferIndex], 3);
 8009208:	4b39      	ldr	r3, [pc, #228]	; (80092f0 <HAL_UART_RxCpltCallback+0x110>)
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	4b39      	ldr	r3, [pc, #228]	; (80092f4 <HAL_UART_RxCpltCallback+0x114>)
 8009210:	4413      	add	r3, r2
 8009212:	2203      	movs	r2, #3
 8009214:	4619      	mov	r1, r3
 8009216:	4838      	ldr	r0, [pc, #224]	; (80092f8 <HAL_UART_RxCpltCallback+0x118>)
 8009218:	f7fc fb77 	bl	800590a <HAL_UART_Receive_DMA>
			//printf("Arm: Continue.\r\n");
		}
		HAL_UART_Receive_IT(&huart6, &armData, 1);
	}*/

	if(huart->Instance == USART1){
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a36      	ldr	r2, [pc, #216]	; (80092fc <HAL_UART_RxCpltCallback+0x11c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d15c      	bne.n	80092e0 <HAL_UART_RxCpltCallback+0x100>
		static int byteCount=0;
		static uint32_t rec=0;
		if(wifiDataRX==0xC0 && byteCount<1){//ping the robot with the host and sendback a byte
 8009226:	4b36      	ldr	r3, [pc, #216]	; (8009300 <HAL_UART_RxCpltCallback+0x120>)
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	2bc0      	cmp	r3, #192	; 0xc0
 800922c:	d10c      	bne.n	8009248 <HAL_UART_RxCpltCallback+0x68>
 800922e:	4b35      	ldr	r3, [pc, #212]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	dc08      	bgt.n	8009248 <HAL_UART_RxCpltCallback+0x68>
			wifiDataTX=0x10;
 8009236:	4b34      	ldr	r3, [pc, #208]	; (8009308 <HAL_UART_RxCpltCallback+0x128>)
 8009238:	2210      	movs	r2, #16
 800923a:	701a      	strb	r2, [r3, #0]
			serial_send(&wifiDataTX,1,1);
 800923c:	2201      	movs	r2, #1
 800923e:	2101      	movs	r1, #1
 8009240:	4831      	ldr	r0, [pc, #196]	; (8009308 <HAL_UART_RxCpltCallback+0x128>)
 8009242:	f7ff ff51 	bl	80090e8 <serial_send>
 8009246:	e046      	b.n	80092d6 <HAL_UART_RxCpltCallback+0xf6>
		}
		else if(wifiDataRX==0xE0 && byteCount<1){//Activate 32 uint recieving mode
 8009248:	4b2d      	ldr	r3, [pc, #180]	; (8009300 <HAL_UART_RxCpltCallback+0x120>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2be0      	cmp	r3, #224	; 0xe0
 800924e:	d107      	bne.n	8009260 <HAL_UART_RxCpltCallback+0x80>
 8009250:	4b2c      	ldr	r3, [pc, #176]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	dc03      	bgt.n	8009260 <HAL_UART_RxCpltCallback+0x80>
			byteCount=1;
 8009258:	4b2a      	ldr	r3, [pc, #168]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 800925a:	2201      	movs	r2, #1
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e03a      	b.n	80092d6 <HAL_UART_RxCpltCallback+0xf6>
			//wifiDataTX=224+byteCount;
			//serial_send(&wifiDataTX,1,1);
		}
		else if(byteCount>0){//Handle byte parsing to make the 32 uint
 8009260:	4b28      	ldr	r3, [pc, #160]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd21      	ble.n	80092ac <HAL_UART_RxCpltCallback+0xcc>
			rec += (wifiDataRX & 0x7F) << (byteCount-1)*7;
 8009268:	4b25      	ldr	r3, [pc, #148]	; (8009300 <HAL_UART_RxCpltCallback+0x120>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8009270:	4b24      	ldr	r3, [pc, #144]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	1e5a      	subs	r2, r3, #1
 8009276:	4613      	mov	r3, r2
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	1a9b      	subs	r3, r3, r2
 800927c:	fa01 f303 	lsl.w	r3, r1, r3
 8009280:	461a      	mov	r2, r3
 8009282:	4b22      	ldr	r3, [pc, #136]	; (800930c <HAL_UART_RxCpltCallback+0x12c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4413      	add	r3, r2
 8009288:	4a20      	ldr	r2, [pc, #128]	; (800930c <HAL_UART_RxCpltCallback+0x12c>)
 800928a:	6013      	str	r3, [r2, #0]
			//wifiDataTX=224+byteCount+1;
			//serial_send(&wifiDataTX,1,1);
			byteCount++;
 800928c:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3301      	adds	r3, #1
 8009292:	4a1c      	ldr	r2, [pc, #112]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 8009294:	6013      	str	r3, [r2, #0]
			if(byteCount>5){
 8009296:	4b1b      	ldr	r3, [pc, #108]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b05      	cmp	r3, #5
 800929c:	dd1b      	ble.n	80092d6 <HAL_UART_RxCpltCallback+0xf6>
				byteCount=0;
 800929e:	4b19      	ldr	r3, [pc, #100]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]

				/*char buf[20];
				uint16_t size = snprintf(buf,20,"%3.3lu\r\n",rec);
				HAL_UART_Transmit(&huart2, buf, size, HAL_MAX_DELAY);*/
				rec=0;
 80092a4:	4b19      	ldr	r3, [pc, #100]	; (800930c <HAL_UART_RxCpltCallback+0x12c>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	e014      	b.n	80092d6 <HAL_UART_RxCpltCallback+0xf6>
			}
		}
		else if(wifiDataRX==0x8E && byteCount<1){//Deactivate the USART1 as print port
 80092ac:	4b14      	ldr	r3, [pc, #80]	; (8009300 <HAL_UART_RxCpltCallback+0x120>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b8e      	cmp	r3, #142	; 0x8e
 80092b2:	d106      	bne.n	80092c2 <HAL_UART_RxCpltCallback+0xe2>
 80092b4:	4b13      	ldr	r3, [pc, #76]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	dc02      	bgt.n	80092c2 <HAL_UART_RxCpltCallback+0xe2>
			WifiUartTXDeactivation();
 80092bc:	f7ff ff7c 	bl	80091b8 <WifiUartTXDeactivation>
 80092c0:	e009      	b.n	80092d6 <HAL_UART_RxCpltCallback+0xf6>
		}
		else if(wifiDataRX==0x8F && byteCount<1){//Deactivate the USART1 as print port
 80092c2:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <HAL_UART_RxCpltCallback+0x120>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b8f      	cmp	r3, #143	; 0x8f
 80092c8:	d105      	bne.n	80092d6 <HAL_UART_RxCpltCallback+0xf6>
 80092ca:	4b0e      	ldr	r3, [pc, #56]	; (8009304 <HAL_UART_RxCpltCallback+0x124>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	dc01      	bgt.n	80092d6 <HAL_UART_RxCpltCallback+0xf6>
			WifiUartTXActivation();
 80092d2:	f7ff ff5d 	bl	8009190 <WifiUartTXActivation>
		}
		HAL_UART_Receive_IT(&huart1, &wifiDataRX, 1);
 80092d6:	2201      	movs	r2, #1
 80092d8:	4909      	ldr	r1, [pc, #36]	; (8009300 <HAL_UART_RxCpltCallback+0x120>)
 80092da:	480d      	ldr	r0, [pc, #52]	; (8009310 <HAL_UART_RxCpltCallback+0x130>)
 80092dc:	f7fc fae5 	bl	80058aa <HAL_UART_Receive_IT>
	}
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40004c00 	.word	0x40004c00
 80092ec:	2000194a 	.word	0x2000194a
 80092f0:	20001948 	.word	0x20001948
 80092f4:	20000d90 	.word	0x20000d90
 80092f8:	20000490 	.word	0x20000490
 80092fc:	40011000 	.word	0x40011000
 8009300:	20000d8e 	.word	0x20000d8e
 8009304:	2000194c 	.word	0x2000194c
 8009308:	20000d8f 	.word	0x20000d8f
 800930c:	20001950 	.word	0x20001950
 8009310:	20000518 	.word	0x20000518

08009314 <strategy_initialize>:
#include "strategy.h"

Strategy* strategy_initialize() {
 8009314:	b590      	push	{r4, r7, lr}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
    Strategy* strategy = (Strategy*) malloc(sizeof(Strategy));
 800931a:	2020      	movs	r0, #32
 800931c:	f000 fa3e 	bl	800979c <malloc>
 8009320:	4603      	mov	r3, r0
 8009322:	607b      	str	r3, [r7, #4]
    strategy->length = 4;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2204      	movs	r2, #4
 8009328:	601a      	str	r2, [r3, #0]
    strategy->path = (Bezier**) malloc(sizeof(Bezier*) * strategy->length);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fa33 	bl	800979c <malloc>
 8009336:	4603      	mov	r3, r0
 8009338:	461a      	mov	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	605a      	str	r2, [r3, #4]

    strategy->directions = (Direction*) malloc(sizeof(Direction) * strategy->length);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fa2a 	bl	800979c <malloc>
 8009348:	4603      	mov	r3, r0
 800934a:	461a      	mov	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	609a      	str	r2, [r3, #8]
    strategy->speeds = (float*) calloc(strategy->length+1, sizeof(float));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3301      	adds	r3, #1
 8009356:	2104      	movs	r1, #4
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fa01 	bl	8009760 <calloc>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	60da      	str	r2, [r3, #12]

    strategy->onSiteActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3301      	adds	r3, #1
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fa14 	bl	800979c <malloc>
 8009374:	4603      	mov	r3, r0
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	611a      	str	r2, [r3, #16]
    strategy->onSiteActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3301      	adds	r3, #1
 8009382:	2104      	movs	r1, #4
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f9eb 	bl	8009760 <calloc>
 800938a:	4603      	mov	r3, r0
 800938c:	461a      	mov	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	619a      	str	r2, [r3, #24]
    strategy->onMoveActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3301      	adds	r3, #1
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f9fe 	bl	800979c <malloc>
 80093a0:	4603      	mov	r3, r0
 80093a2:	461a      	mov	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	615a      	str	r2, [r3, #20]
    strategy->onMoveActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3301      	adds	r3, #1
 80093ae:	2104      	movs	r1, #4
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 f9d5 	bl	8009760 <calloc>
 80093b6:	4603      	mov	r3, r0
 80093b8:	461a      	mov	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	61da      	str	r2, [r3, #28]

    strategy->path[0] = bezier_new(22.543, 929.527, 963.822, 910.623, 425.315, 1621.923, 1522.506, 1418.794, 30);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685c      	ldr	r4, [r3, #4]
 80093c2:	201e      	movs	r0, #30
 80093c4:	eddf 3a41 	vldr	s7, [pc, #260]	; 80094cc <strategy_initialize+0x1b8>
 80093c8:	ed9f 3a41 	vldr	s6, [pc, #260]	; 80094d0 <strategy_initialize+0x1bc>
 80093cc:	eddf 2a41 	vldr	s5, [pc, #260]	; 80094d4 <strategy_initialize+0x1c0>
 80093d0:	ed9f 2a41 	vldr	s4, [pc, #260]	; 80094d8 <strategy_initialize+0x1c4>
 80093d4:	eddf 1a41 	vldr	s3, [pc, #260]	; 80094dc <strategy_initialize+0x1c8>
 80093d8:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80094e0 <strategy_initialize+0x1cc>
 80093dc:	eddf 0a41 	vldr	s1, [pc, #260]	; 80094e4 <strategy_initialize+0x1d0>
 80093e0:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80094e8 <strategy_initialize+0x1d4>
 80093e4:	f7fd fcea 	bl	8006dbc <bezier_new>
 80093e8:	4603      	mov	r3, r0
 80093ea:	6023      	str	r3, [r4, #0]
    strategy->path[1] = bezier_new(1522.506, 1418.794, 2619.698, 1215.664, 2440.330, 864.588, 2283.916, 734.412, 30);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	1d1c      	adds	r4, r3, #4
 80093f2:	201e      	movs	r0, #30
 80093f4:	eddf 3a3d 	vldr	s7, [pc, #244]	; 80094ec <strategy_initialize+0x1d8>
 80093f8:	ed9f 3a3d 	vldr	s6, [pc, #244]	; 80094f0 <strategy_initialize+0x1dc>
 80093fc:	eddf 2a3d 	vldr	s5, [pc, #244]	; 80094f4 <strategy_initialize+0x1e0>
 8009400:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 80094f8 <strategy_initialize+0x1e4>
 8009404:	eddf 1a3d 	vldr	s3, [pc, #244]	; 80094fc <strategy_initialize+0x1e8>
 8009408:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8009500 <strategy_initialize+0x1ec>
 800940c:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80094cc <strategy_initialize+0x1b8>
 8009410:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80094d0 <strategy_initialize+0x1bc>
 8009414:	f7fd fcd2 	bl	8006dbc <bezier_new>
 8009418:	4603      	mov	r3, r0
 800941a:	6023      	str	r3, [r4, #0]
    strategy->path[2] = bezier_new(2283.916, 734.412, 2097.725, 902.032, 781.762, 934.436, 612.901, 934.752, 30);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f103 0408 	add.w	r4, r3, #8
 8009424:	201e      	movs	r0, #30
 8009426:	eddf 3a37 	vldr	s7, [pc, #220]	; 8009504 <strategy_initialize+0x1f0>
 800942a:	ed9f 3a37 	vldr	s6, [pc, #220]	; 8009508 <strategy_initialize+0x1f4>
 800942e:	eddf 2a37 	vldr	s5, [pc, #220]	; 800950c <strategy_initialize+0x1f8>
 8009432:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8009510 <strategy_initialize+0x1fc>
 8009436:	eddf 1a37 	vldr	s3, [pc, #220]	; 8009514 <strategy_initialize+0x200>
 800943a:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8009518 <strategy_initialize+0x204>
 800943e:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80094ec <strategy_initialize+0x1d8>
 8009442:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80094f0 <strategy_initialize+0x1dc>
 8009446:	f7fd fcb9 	bl	8006dbc <bezier_new>
 800944a:	4603      	mov	r3, r0
 800944c:	6023      	str	r3, [r4, #0]
    strategy->path[3] = bezier_new(612.901, 934.752, 444.039, 935.068, 22.518, 926.546, 22.518, 926.546, 30);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f103 040c 	add.w	r4, r3, #12
 8009456:	201e      	movs	r0, #30
 8009458:	eddf 3a30 	vldr	s7, [pc, #192]	; 800951c <strategy_initialize+0x208>
 800945c:	ed9f 3a30 	vldr	s6, [pc, #192]	; 8009520 <strategy_initialize+0x20c>
 8009460:	eddf 2a2e 	vldr	s5, [pc, #184]	; 800951c <strategy_initialize+0x208>
 8009464:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8009520 <strategy_initialize+0x20c>
 8009468:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8009524 <strategy_initialize+0x210>
 800946c:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8009528 <strategy_initialize+0x214>
 8009470:	eddf 0a24 	vldr	s1, [pc, #144]	; 8009504 <strategy_initialize+0x1f0>
 8009474:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8009508 <strategy_initialize+0x1f4>
 8009478:	f7fd fca0 	bl	8006dbc <bezier_new>
 800947c:	4603      	mov	r3, r0
 800947e:	6023      	str	r3, [r4, #0]

    strategy->directions[0] = FORWARD;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
    strategy->directions[1] = FORWARD;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	3301      	adds	r3, #1
 800948e:	2201      	movs	r2, #1
 8009490:	701a      	strb	r2, [r3, #0]
    strategy->directions[2] = BACKWARD;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	3302      	adds	r3, #2
 8009498:	22ff      	movs	r2, #255	; 0xff
 800949a:	701a      	strb	r2, [r3, #0]
    strategy->directions[3] = BACKWARD;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	3303      	adds	r3, #3
 80094a2:	22ff      	movs	r2, #255	; 0xff
 80094a4:	701a      	strb	r2, [r3, #0]

    strategy->speeds[0] = 1000;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	4a20      	ldr	r2, [pc, #128]	; (800952c <strategy_initialize+0x218>)
 80094ac:	601a      	str	r2, [r3, #0]
    strategy->speeds[1] = 1000;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	3304      	adds	r3, #4
 80094b4:	4a1d      	ldr	r2, [pc, #116]	; (800952c <strategy_initialize+0x218>)
 80094b6:	601a      	str	r2, [r3, #0]
    strategy->speeds[3] = 1000;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	330c      	adds	r3, #12
 80094be:	4a1b      	ldr	r2, [pc, #108]	; (800952c <strategy_initialize+0x218>)
 80094c0:	601a      	str	r2, [r3, #0]



    return strategy;
 80094c2:	687b      	ldr	r3, [r7, #4]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd90      	pop	{r4, r7, pc}
 80094cc:	44b15968 	.word	0x44b15968
 80094d0:	44be5031 	.word	0x44be5031
 80094d4:	44cabd89 	.word	0x44cabd89
 80094d8:	43d4a852 	.word	0x43d4a852
 80094dc:	4463a7df 	.word	0x4463a7df
 80094e0:	4470f49c 	.word	0x4470f49c
 80094e4:	446861ba 	.word	0x446861ba
 80094e8:	41b45810 	.word	0x41b45810
 80094ec:	44379a5e 	.word	0x44379a5e
 80094f0:	450ebea8 	.word	0x450ebea8
 80094f4:	445825a2 	.word	0x445825a2
 80094f8:	45188548 	.word	0x45188548
 80094fc:	4497f53f 	.word	0x4497f53f
 8009500:	4523bb2b 	.word	0x4523bb2b
 8009504:	4469b021 	.word	0x4469b021
 8009508:	441939aa 	.word	0x441939aa
 800950c:	44699be7 	.word	0x44699be7
 8009510:	444370c5 	.word	0x444370c5
 8009514:	4461820c 	.word	0x4461820c
 8009518:	45031b9a 	.word	0x45031b9a
 800951c:	4467a2f2 	.word	0x4467a2f2
 8009520:	41b424dd 	.word	0x41b424dd
 8009524:	4469c45a 	.word	0x4469c45a
 8009528:	43de04fe 	.word	0x43de04fe
 800952c:	447a0000 	.word	0x447a0000

08009530 <vector2_new>:
#include "vector2.h"


Vector2 vector2_new(float x, float y) {
 8009530:	b480      	push	{r7}
 8009532:	b089      	sub	sp, #36	; 0x24
 8009534:	af00      	add	r7, sp, #0
 8009536:	ed87 0a03 	vstr	s0, [r7, #12]
 800953a:	edc7 0a02 	vstr	s1, [r7, #8]
    Vector2 u = { x, y };
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	617b      	str	r3, [r7, #20]
    return u;
 8009546:	f107 0318 	add.w	r3, r7, #24
 800954a:	f107 0210 	add.w	r2, r7, #16
 800954e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009552:	e883 0003 	stmia.w	r3, {r0, r1}
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	ee07 2a10 	vmov	s14, r2
 800955e:	ee07 3a90 	vmov	s15, r3
}
 8009562:	eeb0 0a47 	vmov.f32	s0, s14
 8009566:	eef0 0a67 	vmov.f32	s1, s15
 800956a:	3724      	adds	r7, #36	; 0x24
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <vector2_norm>:
void vector2_display(Vector2 u) {
    printf("{ x: %f, y: %f }\r\n", u.x, u.y);
}


float vector2_norm(Vector2 u) {
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	eeb0 7a40 	vmov.f32	s14, s0
 800957e:	eef0 7a60 	vmov.f32	s15, s1
 8009582:	ed87 7a00 	vstr	s14, [r7]
 8009586:	edc7 7a01 	vstr	s15, [r7, #4]
    return sqrt(u.x*u.x + u.y*u.y);
 800958a:	ed97 7a00 	vldr	s14, [r7]
 800958e:	edd7 7a00 	vldr	s15, [r7]
 8009592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009596:	edd7 6a01 	vldr	s13, [r7, #4]
 800959a:	edd7 7a01 	vldr	s15, [r7, #4]
 800959e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095a6:	ee17 0a90 	vmov	r0, s15
 80095aa:	f7f6 ffed 	bl	8000588 <__aeabi_f2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	ec43 2b10 	vmov	d0, r2, r3
 80095b6:	f002 fe91 	bl	800c2dc <sqrt>
 80095ba:	ec53 2b10 	vmov	r2, r3, d0
 80095be:	4610      	mov	r0, r2
 80095c0:	4619      	mov	r1, r3
 80095c2:	f7f7 fb11 	bl	8000be8 <__aeabi_d2f>
 80095c6:	4603      	mov	r3, r0
 80095c8:	ee07 3a90 	vmov	s15, r3
}
 80095cc:	eeb0 0a67 	vmov.f32	s0, s15
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <vector2_angle>:


float vector2_angle(Vector2 u) {
 80095d6:	b5b0      	push	{r4, r5, r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	eeb0 7a40 	vmov.f32	s14, s0
 80095e0:	eef0 7a60 	vmov.f32	s15, s1
 80095e4:	ed87 7a00 	vstr	s14, [r7]
 80095e8:	edc7 7a01 	vstr	s15, [r7, #4]
    return atan2(u.y, u.x);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7f6 ffca 	bl	8000588 <__aeabi_f2d>
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7f6 ffc4 	bl	8000588 <__aeabi_f2d>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	ec43 2b11 	vmov	d1, r2, r3
 8009608:	ec45 4b10 	vmov	d0, r4, r5
 800960c:	f002 fdc6 	bl	800c19c <atan2>
 8009610:	ec53 2b10 	vmov	r2, r3, d0
 8009614:	4610      	mov	r0, r2
 8009616:	4619      	mov	r1, r3
 8009618:	f7f7 fae6 	bl	8000be8 <__aeabi_d2f>
 800961c:	4603      	mov	r3, r0
 800961e:	ee07 3a90 	vmov	s15, r3
}
 8009622:	eeb0 0a67 	vmov.f32	s0, s15
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bdb0      	pop	{r4, r5, r7, pc}

0800962c <vector2_dist2>:
    Vector2 diff = { v.x - u.x, v.y - u.y };
    return vector2_norm(diff);
}


float vector2_dist2(Vector2 u, Vector2 v) {
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	eeb0 6a40 	vmov.f32	s12, s0
 8009636:	eef0 6a60 	vmov.f32	s13, s1
 800963a:	eeb0 7a41 	vmov.f32	s14, s2
 800963e:	eef0 7a61 	vmov.f32	s15, s3
 8009642:	ed87 6a02 	vstr	s12, [r7, #8]
 8009646:	edc7 6a03 	vstr	s13, [r7, #12]
 800964a:	ed87 7a00 	vstr	s14, [r7]
 800964e:	edc7 7a01 	vstr	s15, [r7, #4]
    Vector2 diff = { v.x - u.x, v.y - u.y };
 8009652:	ed97 7a00 	vldr	s14, [r7]
 8009656:	edd7 7a02 	vldr	s15, [r7, #8]
 800965a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800965e:	edc7 7a04 	vstr	s15, [r7, #16]
 8009662:	ed97 7a01 	vldr	s14, [r7, #4]
 8009666:	edd7 7a03 	vldr	s15, [r7, #12]
 800966a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800966e:	edc7 7a05 	vstr	s15, [r7, #20]
    return diff.x*diff.x + diff.y*diff.y;
 8009672:	ed97 7a04 	vldr	s14, [r7, #16]
 8009676:	edd7 7a04 	vldr	s15, [r7, #16]
 800967a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800967e:	edd7 6a05 	vldr	s13, [r7, #20]
 8009682:	edd7 7a05 	vldr	s15, [r7, #20]
 8009686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800968a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800968e:	eeb0 0a67 	vmov.f32	s0, s15
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <vector2_diff>:
    Vector2 sum = { v.x + u.x, v.y + u.y };
    return sum;
}


Vector2 vector2_diff(Vector2 u, Vector2 v) {
 800969c:	b480      	push	{r7}
 800969e:	b08b      	sub	sp, #44	; 0x2c
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	eeb0 6a40 	vmov.f32	s12, s0
 80096a6:	eef0 6a60 	vmov.f32	s13, s1
 80096aa:	eeb0 7a41 	vmov.f32	s14, s2
 80096ae:	eef0 7a61 	vmov.f32	s15, s3
 80096b2:	ed87 6a04 	vstr	s12, [r7, #16]
 80096b6:	edc7 6a05 	vstr	s13, [r7, #20]
 80096ba:	ed87 7a02 	vstr	s14, [r7, #8]
 80096be:	edc7 7a03 	vstr	s15, [r7, #12]
    Vector2 diff = { u.x - v.x, u.y - v.y };
 80096c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80096c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096ce:	edc7 7a06 	vstr	s15, [r7, #24]
 80096d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80096d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80096da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096de:	edc7 7a07 	vstr	s15, [r7, #28]
    return diff;
 80096e2:	f107 0320 	add.w	r3, r7, #32
 80096e6:	f107 0218 	add.w	r2, r7, #24
 80096ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80096f2:	6a3a      	ldr	r2, [r7, #32]
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	ee07 2a10 	vmov	s14, r2
 80096fa:	ee07 3a90 	vmov	s15, r3
}
 80096fe:	eeb0 0a47 	vmov.f32	s0, s14
 8009702:	eef0 0a67 	vmov.f32	s1, s15
 8009706:	372c      	adds	r7, #44	; 0x2c
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <vector2_cross>:
float vector2_dot(Vector2 u, Vector2 v) {
    return u.x * v.x + u.y * v.y;
}


float vector2_cross(Vector2 u, Vector2 v) {
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	eeb0 6a40 	vmov.f32	s12, s0
 800971a:	eef0 6a60 	vmov.f32	s13, s1
 800971e:	eeb0 7a41 	vmov.f32	s14, s2
 8009722:	eef0 7a61 	vmov.f32	s15, s3
 8009726:	ed87 6a02 	vstr	s12, [r7, #8]
 800972a:	edc7 6a03 	vstr	s13, [r7, #12]
 800972e:	ed87 7a00 	vstr	s14, [r7]
 8009732:	edc7 7a01 	vstr	s15, [r7, #4]
    return u.x * v.y - u.y * v.x;
 8009736:	ed97 7a02 	vldr	s14, [r7, #8]
 800973a:	edd7 7a01 	vldr	s15, [r7, #4]
 800973e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009742:	edd7 6a03 	vldr	s13, [r7, #12]
 8009746:	edd7 7a00 	vldr	s15, [r7]
 800974a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800974e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8009752:	eeb0 0a67 	vmov.f32	s0, s15
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <calloc>:
 8009760:	4b02      	ldr	r3, [pc, #8]	; (800976c <calloc+0xc>)
 8009762:	460a      	mov	r2, r1
 8009764:	4601      	mov	r1, r0
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	f000 b802 	b.w	8009770 <_calloc_r>
 800976c:	20000064 	.word	0x20000064

08009770 <_calloc_r>:
 8009770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009772:	fba1 2402 	umull	r2, r4, r1, r2
 8009776:	b94c      	cbnz	r4, 800978c <_calloc_r+0x1c>
 8009778:	4611      	mov	r1, r2
 800977a:	9201      	str	r2, [sp, #4]
 800977c:	f000 f836 	bl	80097ec <_malloc_r>
 8009780:	9a01      	ldr	r2, [sp, #4]
 8009782:	4605      	mov	r5, r0
 8009784:	b930      	cbnz	r0, 8009794 <_calloc_r+0x24>
 8009786:	4628      	mov	r0, r5
 8009788:	b003      	add	sp, #12
 800978a:	bd30      	pop	{r4, r5, pc}
 800978c:	220c      	movs	r2, #12
 800978e:	6002      	str	r2, [r0, #0]
 8009790:	2500      	movs	r5, #0
 8009792:	e7f8      	b.n	8009786 <_calloc_r+0x16>
 8009794:	4621      	mov	r1, r4
 8009796:	f000 ff11 	bl	800a5bc <memset>
 800979a:	e7f4      	b.n	8009786 <_calloc_r+0x16>

0800979c <malloc>:
 800979c:	4b02      	ldr	r3, [pc, #8]	; (80097a8 <malloc+0xc>)
 800979e:	4601      	mov	r1, r0
 80097a0:	6818      	ldr	r0, [r3, #0]
 80097a2:	f000 b823 	b.w	80097ec <_malloc_r>
 80097a6:	bf00      	nop
 80097a8:	20000064 	.word	0x20000064

080097ac <sbrk_aligned>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	4e0e      	ldr	r6, [pc, #56]	; (80097e8 <sbrk_aligned+0x3c>)
 80097b0:	460c      	mov	r4, r1
 80097b2:	6831      	ldr	r1, [r6, #0]
 80097b4:	4605      	mov	r5, r0
 80097b6:	b911      	cbnz	r1, 80097be <sbrk_aligned+0x12>
 80097b8:	f000 ff40 	bl	800a63c <_sbrk_r>
 80097bc:	6030      	str	r0, [r6, #0]
 80097be:	4621      	mov	r1, r4
 80097c0:	4628      	mov	r0, r5
 80097c2:	f000 ff3b 	bl	800a63c <_sbrk_r>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	d00a      	beq.n	80097e0 <sbrk_aligned+0x34>
 80097ca:	1cc4      	adds	r4, r0, #3
 80097cc:	f024 0403 	bic.w	r4, r4, #3
 80097d0:	42a0      	cmp	r0, r4
 80097d2:	d007      	beq.n	80097e4 <sbrk_aligned+0x38>
 80097d4:	1a21      	subs	r1, r4, r0
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 ff30 	bl	800a63c <_sbrk_r>
 80097dc:	3001      	adds	r0, #1
 80097de:	d101      	bne.n	80097e4 <sbrk_aligned+0x38>
 80097e0:	f04f 34ff 	mov.w	r4, #4294967295
 80097e4:	4620      	mov	r0, r4
 80097e6:	bd70      	pop	{r4, r5, r6, pc}
 80097e8:	20001958 	.word	0x20001958

080097ec <_malloc_r>:
 80097ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f0:	1ccd      	adds	r5, r1, #3
 80097f2:	f025 0503 	bic.w	r5, r5, #3
 80097f6:	3508      	adds	r5, #8
 80097f8:	2d0c      	cmp	r5, #12
 80097fa:	bf38      	it	cc
 80097fc:	250c      	movcc	r5, #12
 80097fe:	2d00      	cmp	r5, #0
 8009800:	4607      	mov	r7, r0
 8009802:	db01      	blt.n	8009808 <_malloc_r+0x1c>
 8009804:	42a9      	cmp	r1, r5
 8009806:	d905      	bls.n	8009814 <_malloc_r+0x28>
 8009808:	230c      	movs	r3, #12
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	2600      	movs	r6, #0
 800980e:	4630      	mov	r0, r6
 8009810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80098e8 <_malloc_r+0xfc>
 8009818:	f000 f868 	bl	80098ec <__malloc_lock>
 800981c:	f8d8 3000 	ldr.w	r3, [r8]
 8009820:	461c      	mov	r4, r3
 8009822:	bb5c      	cbnz	r4, 800987c <_malloc_r+0x90>
 8009824:	4629      	mov	r1, r5
 8009826:	4638      	mov	r0, r7
 8009828:	f7ff ffc0 	bl	80097ac <sbrk_aligned>
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	4604      	mov	r4, r0
 8009830:	d155      	bne.n	80098de <_malloc_r+0xf2>
 8009832:	f8d8 4000 	ldr.w	r4, [r8]
 8009836:	4626      	mov	r6, r4
 8009838:	2e00      	cmp	r6, #0
 800983a:	d145      	bne.n	80098c8 <_malloc_r+0xdc>
 800983c:	2c00      	cmp	r4, #0
 800983e:	d048      	beq.n	80098d2 <_malloc_r+0xe6>
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	4631      	mov	r1, r6
 8009844:	4638      	mov	r0, r7
 8009846:	eb04 0903 	add.w	r9, r4, r3
 800984a:	f000 fef7 	bl	800a63c <_sbrk_r>
 800984e:	4581      	cmp	r9, r0
 8009850:	d13f      	bne.n	80098d2 <_malloc_r+0xe6>
 8009852:	6821      	ldr	r1, [r4, #0]
 8009854:	1a6d      	subs	r5, r5, r1
 8009856:	4629      	mov	r1, r5
 8009858:	4638      	mov	r0, r7
 800985a:	f7ff ffa7 	bl	80097ac <sbrk_aligned>
 800985e:	3001      	adds	r0, #1
 8009860:	d037      	beq.n	80098d2 <_malloc_r+0xe6>
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	442b      	add	r3, r5
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	f8d8 3000 	ldr.w	r3, [r8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d038      	beq.n	80098e2 <_malloc_r+0xf6>
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	42a2      	cmp	r2, r4
 8009874:	d12b      	bne.n	80098ce <_malloc_r+0xe2>
 8009876:	2200      	movs	r2, #0
 8009878:	605a      	str	r2, [r3, #4]
 800987a:	e00f      	b.n	800989c <_malloc_r+0xb0>
 800987c:	6822      	ldr	r2, [r4, #0]
 800987e:	1b52      	subs	r2, r2, r5
 8009880:	d41f      	bmi.n	80098c2 <_malloc_r+0xd6>
 8009882:	2a0b      	cmp	r2, #11
 8009884:	d917      	bls.n	80098b6 <_malloc_r+0xca>
 8009886:	1961      	adds	r1, r4, r5
 8009888:	42a3      	cmp	r3, r4
 800988a:	6025      	str	r5, [r4, #0]
 800988c:	bf18      	it	ne
 800988e:	6059      	strne	r1, [r3, #4]
 8009890:	6863      	ldr	r3, [r4, #4]
 8009892:	bf08      	it	eq
 8009894:	f8c8 1000 	streq.w	r1, [r8]
 8009898:	5162      	str	r2, [r4, r5]
 800989a:	604b      	str	r3, [r1, #4]
 800989c:	4638      	mov	r0, r7
 800989e:	f104 060b 	add.w	r6, r4, #11
 80098a2:	f000 f829 	bl	80098f8 <__malloc_unlock>
 80098a6:	f026 0607 	bic.w	r6, r6, #7
 80098aa:	1d23      	adds	r3, r4, #4
 80098ac:	1af2      	subs	r2, r6, r3
 80098ae:	d0ae      	beq.n	800980e <_malloc_r+0x22>
 80098b0:	1b9b      	subs	r3, r3, r6
 80098b2:	50a3      	str	r3, [r4, r2]
 80098b4:	e7ab      	b.n	800980e <_malloc_r+0x22>
 80098b6:	42a3      	cmp	r3, r4
 80098b8:	6862      	ldr	r2, [r4, #4]
 80098ba:	d1dd      	bne.n	8009878 <_malloc_r+0x8c>
 80098bc:	f8c8 2000 	str.w	r2, [r8]
 80098c0:	e7ec      	b.n	800989c <_malloc_r+0xb0>
 80098c2:	4623      	mov	r3, r4
 80098c4:	6864      	ldr	r4, [r4, #4]
 80098c6:	e7ac      	b.n	8009822 <_malloc_r+0x36>
 80098c8:	4634      	mov	r4, r6
 80098ca:	6876      	ldr	r6, [r6, #4]
 80098cc:	e7b4      	b.n	8009838 <_malloc_r+0x4c>
 80098ce:	4613      	mov	r3, r2
 80098d0:	e7cc      	b.n	800986c <_malloc_r+0x80>
 80098d2:	230c      	movs	r3, #12
 80098d4:	603b      	str	r3, [r7, #0]
 80098d6:	4638      	mov	r0, r7
 80098d8:	f000 f80e 	bl	80098f8 <__malloc_unlock>
 80098dc:	e797      	b.n	800980e <_malloc_r+0x22>
 80098de:	6025      	str	r5, [r4, #0]
 80098e0:	e7dc      	b.n	800989c <_malloc_r+0xb0>
 80098e2:	605b      	str	r3, [r3, #4]
 80098e4:	deff      	udf	#255	; 0xff
 80098e6:	bf00      	nop
 80098e8:	20001954 	.word	0x20001954

080098ec <__malloc_lock>:
 80098ec:	4801      	ldr	r0, [pc, #4]	; (80098f4 <__malloc_lock+0x8>)
 80098ee:	f000 bef1 	b.w	800a6d4 <__retarget_lock_acquire_recursive>
 80098f2:	bf00      	nop
 80098f4:	20001a9c 	.word	0x20001a9c

080098f8 <__malloc_unlock>:
 80098f8:	4801      	ldr	r0, [pc, #4]	; (8009900 <__malloc_unlock+0x8>)
 80098fa:	f000 beec 	b.w	800a6d6 <__retarget_lock_release_recursive>
 80098fe:	bf00      	nop
 8009900:	20001a9c 	.word	0x20001a9c

08009904 <__cvt>:
 8009904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	ec55 4b10 	vmov	r4, r5, d0
 800990c:	2d00      	cmp	r5, #0
 800990e:	460e      	mov	r6, r1
 8009910:	4619      	mov	r1, r3
 8009912:	462b      	mov	r3, r5
 8009914:	bfbb      	ittet	lt
 8009916:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800991a:	461d      	movlt	r5, r3
 800991c:	2300      	movge	r3, #0
 800991e:	232d      	movlt	r3, #45	; 0x2d
 8009920:	700b      	strb	r3, [r1, #0]
 8009922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009924:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009928:	4691      	mov	r9, r2
 800992a:	f023 0820 	bic.w	r8, r3, #32
 800992e:	bfbc      	itt	lt
 8009930:	4622      	movlt	r2, r4
 8009932:	4614      	movlt	r4, r2
 8009934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009938:	d005      	beq.n	8009946 <__cvt+0x42>
 800993a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800993e:	d100      	bne.n	8009942 <__cvt+0x3e>
 8009940:	3601      	adds	r6, #1
 8009942:	2102      	movs	r1, #2
 8009944:	e000      	b.n	8009948 <__cvt+0x44>
 8009946:	2103      	movs	r1, #3
 8009948:	ab03      	add	r3, sp, #12
 800994a:	9301      	str	r3, [sp, #4]
 800994c:	ab02      	add	r3, sp, #8
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	ec45 4b10 	vmov	d0, r4, r5
 8009954:	4653      	mov	r3, sl
 8009956:	4632      	mov	r2, r6
 8009958:	f000 ff46 	bl	800a7e8 <_dtoa_r>
 800995c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009960:	4607      	mov	r7, r0
 8009962:	d102      	bne.n	800996a <__cvt+0x66>
 8009964:	f019 0f01 	tst.w	r9, #1
 8009968:	d022      	beq.n	80099b0 <__cvt+0xac>
 800996a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800996e:	eb07 0906 	add.w	r9, r7, r6
 8009972:	d110      	bne.n	8009996 <__cvt+0x92>
 8009974:	783b      	ldrb	r3, [r7, #0]
 8009976:	2b30      	cmp	r3, #48	; 0x30
 8009978:	d10a      	bne.n	8009990 <__cvt+0x8c>
 800997a:	2200      	movs	r2, #0
 800997c:	2300      	movs	r3, #0
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f7f7 f8c1 	bl	8000b08 <__aeabi_dcmpeq>
 8009986:	b918      	cbnz	r0, 8009990 <__cvt+0x8c>
 8009988:	f1c6 0601 	rsb	r6, r6, #1
 800998c:	f8ca 6000 	str.w	r6, [sl]
 8009990:	f8da 3000 	ldr.w	r3, [sl]
 8009994:	4499      	add	r9, r3
 8009996:	2200      	movs	r2, #0
 8009998:	2300      	movs	r3, #0
 800999a:	4620      	mov	r0, r4
 800999c:	4629      	mov	r1, r5
 800999e:	f7f7 f8b3 	bl	8000b08 <__aeabi_dcmpeq>
 80099a2:	b108      	cbz	r0, 80099a8 <__cvt+0xa4>
 80099a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80099a8:	2230      	movs	r2, #48	; 0x30
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	454b      	cmp	r3, r9
 80099ae:	d307      	bcc.n	80099c0 <__cvt+0xbc>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099b4:	1bdb      	subs	r3, r3, r7
 80099b6:	4638      	mov	r0, r7
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	b004      	add	sp, #16
 80099bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c0:	1c59      	adds	r1, r3, #1
 80099c2:	9103      	str	r1, [sp, #12]
 80099c4:	701a      	strb	r2, [r3, #0]
 80099c6:	e7f0      	b.n	80099aa <__cvt+0xa6>

080099c8 <__exponent>:
 80099c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099ca:	4603      	mov	r3, r0
 80099cc:	2900      	cmp	r1, #0
 80099ce:	bfb8      	it	lt
 80099d0:	4249      	neglt	r1, r1
 80099d2:	f803 2b02 	strb.w	r2, [r3], #2
 80099d6:	bfb4      	ite	lt
 80099d8:	222d      	movlt	r2, #45	; 0x2d
 80099da:	222b      	movge	r2, #43	; 0x2b
 80099dc:	2909      	cmp	r1, #9
 80099de:	7042      	strb	r2, [r0, #1]
 80099e0:	dd2a      	ble.n	8009a38 <__exponent+0x70>
 80099e2:	f10d 0207 	add.w	r2, sp, #7
 80099e6:	4617      	mov	r7, r2
 80099e8:	260a      	movs	r6, #10
 80099ea:	4694      	mov	ip, r2
 80099ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80099f0:	fb06 1415 	mls	r4, r6, r5, r1
 80099f4:	3430      	adds	r4, #48	; 0x30
 80099f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80099fa:	460c      	mov	r4, r1
 80099fc:	2c63      	cmp	r4, #99	; 0x63
 80099fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8009a02:	4629      	mov	r1, r5
 8009a04:	dcf1      	bgt.n	80099ea <__exponent+0x22>
 8009a06:	3130      	adds	r1, #48	; 0x30
 8009a08:	f1ac 0402 	sub.w	r4, ip, #2
 8009a0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009a10:	1c41      	adds	r1, r0, #1
 8009a12:	4622      	mov	r2, r4
 8009a14:	42ba      	cmp	r2, r7
 8009a16:	d30a      	bcc.n	8009a2e <__exponent+0x66>
 8009a18:	f10d 0209 	add.w	r2, sp, #9
 8009a1c:	eba2 020c 	sub.w	r2, r2, ip
 8009a20:	42bc      	cmp	r4, r7
 8009a22:	bf88      	it	hi
 8009a24:	2200      	movhi	r2, #0
 8009a26:	4413      	add	r3, r2
 8009a28:	1a18      	subs	r0, r3, r0
 8009a2a:	b003      	add	sp, #12
 8009a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009a32:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009a36:	e7ed      	b.n	8009a14 <__exponent+0x4c>
 8009a38:	2330      	movs	r3, #48	; 0x30
 8009a3a:	3130      	adds	r1, #48	; 0x30
 8009a3c:	7083      	strb	r3, [r0, #2]
 8009a3e:	70c1      	strb	r1, [r0, #3]
 8009a40:	1d03      	adds	r3, r0, #4
 8009a42:	e7f1      	b.n	8009a28 <__exponent+0x60>

08009a44 <_printf_float>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	ed2d 8b02 	vpush	{d8}
 8009a4c:	b08d      	sub	sp, #52	; 0x34
 8009a4e:	460c      	mov	r4, r1
 8009a50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a54:	4616      	mov	r6, r2
 8009a56:	461f      	mov	r7, r3
 8009a58:	4605      	mov	r5, r0
 8009a5a:	f000 fdb7 	bl	800a5cc <_localeconv_r>
 8009a5e:	f8d0 a000 	ldr.w	sl, [r0]
 8009a62:	4650      	mov	r0, sl
 8009a64:	f7f6 fc24 	bl	80002b0 <strlen>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	9305      	str	r3, [sp, #20]
 8009a70:	f8d8 3000 	ldr.w	r3, [r8]
 8009a74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a78:	3307      	adds	r3, #7
 8009a7a:	f023 0307 	bic.w	r3, r3, #7
 8009a7e:	f103 0208 	add.w	r2, r3, #8
 8009a82:	f8c8 2000 	str.w	r2, [r8]
 8009a86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a8e:	9307      	str	r3, [sp, #28]
 8009a90:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a94:	ee08 0a10 	vmov	s16, r0
 8009a98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aa0:	4b9e      	ldr	r3, [pc, #632]	; (8009d1c <_printf_float+0x2d8>)
 8009aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa6:	f7f7 f861 	bl	8000b6c <__aeabi_dcmpun>
 8009aaa:	bb88      	cbnz	r0, 8009b10 <_printf_float+0xcc>
 8009aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ab0:	4b9a      	ldr	r3, [pc, #616]	; (8009d1c <_printf_float+0x2d8>)
 8009ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab6:	f7f7 f83b 	bl	8000b30 <__aeabi_dcmple>
 8009aba:	bb48      	cbnz	r0, 8009b10 <_printf_float+0xcc>
 8009abc:	2200      	movs	r2, #0
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4640      	mov	r0, r8
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	f7f7 f82a 	bl	8000b1c <__aeabi_dcmplt>
 8009ac8:	b110      	cbz	r0, 8009ad0 <_printf_float+0x8c>
 8009aca:	232d      	movs	r3, #45	; 0x2d
 8009acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ad0:	4a93      	ldr	r2, [pc, #588]	; (8009d20 <_printf_float+0x2dc>)
 8009ad2:	4b94      	ldr	r3, [pc, #592]	; (8009d24 <_printf_float+0x2e0>)
 8009ad4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ad8:	bf94      	ite	ls
 8009ada:	4690      	movls	r8, r2
 8009adc:	4698      	movhi	r8, r3
 8009ade:	2303      	movs	r3, #3
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	9b05      	ldr	r3, [sp, #20]
 8009ae4:	f023 0304 	bic.w	r3, r3, #4
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	f04f 0900 	mov.w	r9, #0
 8009aee:	9700      	str	r7, [sp, #0]
 8009af0:	4633      	mov	r3, r6
 8009af2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009af4:	4621      	mov	r1, r4
 8009af6:	4628      	mov	r0, r5
 8009af8:	f000 f9da 	bl	8009eb0 <_printf_common>
 8009afc:	3001      	adds	r0, #1
 8009afe:	f040 8090 	bne.w	8009c22 <_printf_float+0x1de>
 8009b02:	f04f 30ff 	mov.w	r0, #4294967295
 8009b06:	b00d      	add	sp, #52	; 0x34
 8009b08:	ecbd 8b02 	vpop	{d8}
 8009b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b10:	4642      	mov	r2, r8
 8009b12:	464b      	mov	r3, r9
 8009b14:	4640      	mov	r0, r8
 8009b16:	4649      	mov	r1, r9
 8009b18:	f7f7 f828 	bl	8000b6c <__aeabi_dcmpun>
 8009b1c:	b140      	cbz	r0, 8009b30 <_printf_float+0xec>
 8009b1e:	464b      	mov	r3, r9
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	bfbc      	itt	lt
 8009b24:	232d      	movlt	r3, #45	; 0x2d
 8009b26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b2a:	4a7f      	ldr	r2, [pc, #508]	; (8009d28 <_printf_float+0x2e4>)
 8009b2c:	4b7f      	ldr	r3, [pc, #508]	; (8009d2c <_printf_float+0x2e8>)
 8009b2e:	e7d1      	b.n	8009ad4 <_printf_float+0x90>
 8009b30:	6863      	ldr	r3, [r4, #4]
 8009b32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b36:	9206      	str	r2, [sp, #24]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	d13f      	bne.n	8009bbc <_printf_float+0x178>
 8009b3c:	2306      	movs	r3, #6
 8009b3e:	6063      	str	r3, [r4, #4]
 8009b40:	9b05      	ldr	r3, [sp, #20]
 8009b42:	6861      	ldr	r1, [r4, #4]
 8009b44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b48:	2300      	movs	r3, #0
 8009b4a:	9303      	str	r3, [sp, #12]
 8009b4c:	ab0a      	add	r3, sp, #40	; 0x28
 8009b4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b52:	ab09      	add	r3, sp, #36	; 0x24
 8009b54:	ec49 8b10 	vmov	d0, r8, r9
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	6022      	str	r2, [r4, #0]
 8009b5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b60:	4628      	mov	r0, r5
 8009b62:	f7ff fecf 	bl	8009904 <__cvt>
 8009b66:	9b06      	ldr	r3, [sp, #24]
 8009b68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b6a:	2b47      	cmp	r3, #71	; 0x47
 8009b6c:	4680      	mov	r8, r0
 8009b6e:	d108      	bne.n	8009b82 <_printf_float+0x13e>
 8009b70:	1cc8      	adds	r0, r1, #3
 8009b72:	db02      	blt.n	8009b7a <_printf_float+0x136>
 8009b74:	6863      	ldr	r3, [r4, #4]
 8009b76:	4299      	cmp	r1, r3
 8009b78:	dd41      	ble.n	8009bfe <_printf_float+0x1ba>
 8009b7a:	f1ab 0302 	sub.w	r3, fp, #2
 8009b7e:	fa5f fb83 	uxtb.w	fp, r3
 8009b82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b86:	d820      	bhi.n	8009bca <_printf_float+0x186>
 8009b88:	3901      	subs	r1, #1
 8009b8a:	465a      	mov	r2, fp
 8009b8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b90:	9109      	str	r1, [sp, #36]	; 0x24
 8009b92:	f7ff ff19 	bl	80099c8 <__exponent>
 8009b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b98:	1813      	adds	r3, r2, r0
 8009b9a:	2a01      	cmp	r2, #1
 8009b9c:	4681      	mov	r9, r0
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	dc02      	bgt.n	8009ba8 <_printf_float+0x164>
 8009ba2:	6822      	ldr	r2, [r4, #0]
 8009ba4:	07d2      	lsls	r2, r2, #31
 8009ba6:	d501      	bpl.n	8009bac <_printf_float+0x168>
 8009ba8:	3301      	adds	r3, #1
 8009baa:	6123      	str	r3, [r4, #16]
 8009bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d09c      	beq.n	8009aee <_printf_float+0xaa>
 8009bb4:	232d      	movs	r3, #45	; 0x2d
 8009bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bba:	e798      	b.n	8009aee <_printf_float+0xaa>
 8009bbc:	9a06      	ldr	r2, [sp, #24]
 8009bbe:	2a47      	cmp	r2, #71	; 0x47
 8009bc0:	d1be      	bne.n	8009b40 <_printf_float+0xfc>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1bc      	bne.n	8009b40 <_printf_float+0xfc>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e7b9      	b.n	8009b3e <_printf_float+0xfa>
 8009bca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009bce:	d118      	bne.n	8009c02 <_printf_float+0x1be>
 8009bd0:	2900      	cmp	r1, #0
 8009bd2:	6863      	ldr	r3, [r4, #4]
 8009bd4:	dd0b      	ble.n	8009bee <_printf_float+0x1aa>
 8009bd6:	6121      	str	r1, [r4, #16]
 8009bd8:	b913      	cbnz	r3, 8009be0 <_printf_float+0x19c>
 8009bda:	6822      	ldr	r2, [r4, #0]
 8009bdc:	07d0      	lsls	r0, r2, #31
 8009bde:	d502      	bpl.n	8009be6 <_printf_float+0x1a2>
 8009be0:	3301      	adds	r3, #1
 8009be2:	440b      	add	r3, r1
 8009be4:	6123      	str	r3, [r4, #16]
 8009be6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009be8:	f04f 0900 	mov.w	r9, #0
 8009bec:	e7de      	b.n	8009bac <_printf_float+0x168>
 8009bee:	b913      	cbnz	r3, 8009bf6 <_printf_float+0x1b2>
 8009bf0:	6822      	ldr	r2, [r4, #0]
 8009bf2:	07d2      	lsls	r2, r2, #31
 8009bf4:	d501      	bpl.n	8009bfa <_printf_float+0x1b6>
 8009bf6:	3302      	adds	r3, #2
 8009bf8:	e7f4      	b.n	8009be4 <_printf_float+0x1a0>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e7f2      	b.n	8009be4 <_printf_float+0x1a0>
 8009bfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c04:	4299      	cmp	r1, r3
 8009c06:	db05      	blt.n	8009c14 <_printf_float+0x1d0>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	6121      	str	r1, [r4, #16]
 8009c0c:	07d8      	lsls	r0, r3, #31
 8009c0e:	d5ea      	bpl.n	8009be6 <_printf_float+0x1a2>
 8009c10:	1c4b      	adds	r3, r1, #1
 8009c12:	e7e7      	b.n	8009be4 <_printf_float+0x1a0>
 8009c14:	2900      	cmp	r1, #0
 8009c16:	bfd4      	ite	le
 8009c18:	f1c1 0202 	rsble	r2, r1, #2
 8009c1c:	2201      	movgt	r2, #1
 8009c1e:	4413      	add	r3, r2
 8009c20:	e7e0      	b.n	8009be4 <_printf_float+0x1a0>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	055a      	lsls	r2, r3, #21
 8009c26:	d407      	bmi.n	8009c38 <_printf_float+0x1f4>
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	4642      	mov	r2, r8
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	d12c      	bne.n	8009c90 <_printf_float+0x24c>
 8009c36:	e764      	b.n	8009b02 <_printf_float+0xbe>
 8009c38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c3c:	f240 80e0 	bls.w	8009e00 <_printf_float+0x3bc>
 8009c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c44:	2200      	movs	r2, #0
 8009c46:	2300      	movs	r3, #0
 8009c48:	f7f6 ff5e 	bl	8000b08 <__aeabi_dcmpeq>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d034      	beq.n	8009cba <_printf_float+0x276>
 8009c50:	4a37      	ldr	r2, [pc, #220]	; (8009d30 <_printf_float+0x2ec>)
 8009c52:	2301      	movs	r3, #1
 8009c54:	4631      	mov	r1, r6
 8009c56:	4628      	mov	r0, r5
 8009c58:	47b8      	blx	r7
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	f43f af51 	beq.w	8009b02 <_printf_float+0xbe>
 8009c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c64:	429a      	cmp	r2, r3
 8009c66:	db02      	blt.n	8009c6e <_printf_float+0x22a>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	07d8      	lsls	r0, r3, #31
 8009c6c:	d510      	bpl.n	8009c90 <_printf_float+0x24c>
 8009c6e:	ee18 3a10 	vmov	r3, s16
 8009c72:	4652      	mov	r2, sl
 8009c74:	4631      	mov	r1, r6
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b8      	blx	r7
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	f43f af41 	beq.w	8009b02 <_printf_float+0xbe>
 8009c80:	f04f 0800 	mov.w	r8, #0
 8009c84:	f104 091a 	add.w	r9, r4, #26
 8009c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	4543      	cmp	r3, r8
 8009c8e:	dc09      	bgt.n	8009ca4 <_printf_float+0x260>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	079b      	lsls	r3, r3, #30
 8009c94:	f100 8107 	bmi.w	8009ea6 <_printf_float+0x462>
 8009c98:	68e0      	ldr	r0, [r4, #12]
 8009c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c9c:	4298      	cmp	r0, r3
 8009c9e:	bfb8      	it	lt
 8009ca0:	4618      	movlt	r0, r3
 8009ca2:	e730      	b.n	8009b06 <_printf_float+0xc2>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	464a      	mov	r2, r9
 8009ca8:	4631      	mov	r1, r6
 8009caa:	4628      	mov	r0, r5
 8009cac:	47b8      	blx	r7
 8009cae:	3001      	adds	r0, #1
 8009cb0:	f43f af27 	beq.w	8009b02 <_printf_float+0xbe>
 8009cb4:	f108 0801 	add.w	r8, r8, #1
 8009cb8:	e7e6      	b.n	8009c88 <_printf_float+0x244>
 8009cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	dc39      	bgt.n	8009d34 <_printf_float+0x2f0>
 8009cc0:	4a1b      	ldr	r2, [pc, #108]	; (8009d30 <_printf_float+0x2ec>)
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f43f af19 	beq.w	8009b02 <_printf_float+0xbe>
 8009cd0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	d102      	bne.n	8009cde <_printf_float+0x29a>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	07d9      	lsls	r1, r3, #31
 8009cdc:	d5d8      	bpl.n	8009c90 <_printf_float+0x24c>
 8009cde:	ee18 3a10 	vmov	r3, s16
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	f43f af09 	beq.w	8009b02 <_printf_float+0xbe>
 8009cf0:	f04f 0900 	mov.w	r9, #0
 8009cf4:	f104 0a1a 	add.w	sl, r4, #26
 8009cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfa:	425b      	negs	r3, r3
 8009cfc:	454b      	cmp	r3, r9
 8009cfe:	dc01      	bgt.n	8009d04 <_printf_float+0x2c0>
 8009d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d02:	e792      	b.n	8009c2a <_printf_float+0x1e6>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4652      	mov	r2, sl
 8009d08:	4631      	mov	r1, r6
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	47b8      	blx	r7
 8009d0e:	3001      	adds	r0, #1
 8009d10:	f43f aef7 	beq.w	8009b02 <_printf_float+0xbe>
 8009d14:	f109 0901 	add.w	r9, r9, #1
 8009d18:	e7ee      	b.n	8009cf8 <_printf_float+0x2b4>
 8009d1a:	bf00      	nop
 8009d1c:	7fefffff 	.word	0x7fefffff
 8009d20:	0800ea5c 	.word	0x0800ea5c
 8009d24:	0800ea60 	.word	0x0800ea60
 8009d28:	0800ea64 	.word	0x0800ea64
 8009d2c:	0800ea68 	.word	0x0800ea68
 8009d30:	0800ea6c 	.word	0x0800ea6c
 8009d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	bfa8      	it	ge
 8009d3c:	461a      	movge	r2, r3
 8009d3e:	2a00      	cmp	r2, #0
 8009d40:	4691      	mov	r9, r2
 8009d42:	dc37      	bgt.n	8009db4 <_printf_float+0x370>
 8009d44:	f04f 0b00 	mov.w	fp, #0
 8009d48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d4c:	f104 021a 	add.w	r2, r4, #26
 8009d50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d52:	9305      	str	r3, [sp, #20]
 8009d54:	eba3 0309 	sub.w	r3, r3, r9
 8009d58:	455b      	cmp	r3, fp
 8009d5a:	dc33      	bgt.n	8009dc4 <_printf_float+0x380>
 8009d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d60:	429a      	cmp	r2, r3
 8009d62:	db3b      	blt.n	8009ddc <_printf_float+0x398>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	07da      	lsls	r2, r3, #31
 8009d68:	d438      	bmi.n	8009ddc <_printf_float+0x398>
 8009d6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d6e:	eba2 0903 	sub.w	r9, r2, r3
 8009d72:	9b05      	ldr	r3, [sp, #20]
 8009d74:	1ad2      	subs	r2, r2, r3
 8009d76:	4591      	cmp	r9, r2
 8009d78:	bfa8      	it	ge
 8009d7a:	4691      	movge	r9, r2
 8009d7c:	f1b9 0f00 	cmp.w	r9, #0
 8009d80:	dc35      	bgt.n	8009dee <_printf_float+0x3aa>
 8009d82:	f04f 0800 	mov.w	r8, #0
 8009d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d8a:	f104 0a1a 	add.w	sl, r4, #26
 8009d8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d92:	1a9b      	subs	r3, r3, r2
 8009d94:	eba3 0309 	sub.w	r3, r3, r9
 8009d98:	4543      	cmp	r3, r8
 8009d9a:	f77f af79 	ble.w	8009c90 <_printf_float+0x24c>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4652      	mov	r2, sl
 8009da2:	4631      	mov	r1, r6
 8009da4:	4628      	mov	r0, r5
 8009da6:	47b8      	blx	r7
 8009da8:	3001      	adds	r0, #1
 8009daa:	f43f aeaa 	beq.w	8009b02 <_printf_float+0xbe>
 8009dae:	f108 0801 	add.w	r8, r8, #1
 8009db2:	e7ec      	b.n	8009d8e <_printf_float+0x34a>
 8009db4:	4613      	mov	r3, r2
 8009db6:	4631      	mov	r1, r6
 8009db8:	4642      	mov	r2, r8
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	d1c0      	bne.n	8009d44 <_printf_float+0x300>
 8009dc2:	e69e      	b.n	8009b02 <_printf_float+0xbe>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	4628      	mov	r0, r5
 8009dca:	9205      	str	r2, [sp, #20]
 8009dcc:	47b8      	blx	r7
 8009dce:	3001      	adds	r0, #1
 8009dd0:	f43f ae97 	beq.w	8009b02 <_printf_float+0xbe>
 8009dd4:	9a05      	ldr	r2, [sp, #20]
 8009dd6:	f10b 0b01 	add.w	fp, fp, #1
 8009dda:	e7b9      	b.n	8009d50 <_printf_float+0x30c>
 8009ddc:	ee18 3a10 	vmov	r3, s16
 8009de0:	4652      	mov	r2, sl
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b8      	blx	r7
 8009de8:	3001      	adds	r0, #1
 8009dea:	d1be      	bne.n	8009d6a <_printf_float+0x326>
 8009dec:	e689      	b.n	8009b02 <_printf_float+0xbe>
 8009dee:	9a05      	ldr	r2, [sp, #20]
 8009df0:	464b      	mov	r3, r9
 8009df2:	4442      	add	r2, r8
 8009df4:	4631      	mov	r1, r6
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d1c1      	bne.n	8009d82 <_printf_float+0x33e>
 8009dfe:	e680      	b.n	8009b02 <_printf_float+0xbe>
 8009e00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e02:	2a01      	cmp	r2, #1
 8009e04:	dc01      	bgt.n	8009e0a <_printf_float+0x3c6>
 8009e06:	07db      	lsls	r3, r3, #31
 8009e08:	d53a      	bpl.n	8009e80 <_printf_float+0x43c>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4642      	mov	r2, r8
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b8      	blx	r7
 8009e14:	3001      	adds	r0, #1
 8009e16:	f43f ae74 	beq.w	8009b02 <_printf_float+0xbe>
 8009e1a:	ee18 3a10 	vmov	r3, s16
 8009e1e:	4652      	mov	r2, sl
 8009e20:	4631      	mov	r1, r6
 8009e22:	4628      	mov	r0, r5
 8009e24:	47b8      	blx	r7
 8009e26:	3001      	adds	r0, #1
 8009e28:	f43f ae6b 	beq.w	8009b02 <_printf_float+0xbe>
 8009e2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e30:	2200      	movs	r2, #0
 8009e32:	2300      	movs	r3, #0
 8009e34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009e38:	f7f6 fe66 	bl	8000b08 <__aeabi_dcmpeq>
 8009e3c:	b9d8      	cbnz	r0, 8009e76 <_printf_float+0x432>
 8009e3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009e42:	f108 0201 	add.w	r2, r8, #1
 8009e46:	4631      	mov	r1, r6
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b8      	blx	r7
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d10e      	bne.n	8009e6e <_printf_float+0x42a>
 8009e50:	e657      	b.n	8009b02 <_printf_float+0xbe>
 8009e52:	2301      	movs	r3, #1
 8009e54:	4652      	mov	r2, sl
 8009e56:	4631      	mov	r1, r6
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b8      	blx	r7
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	f43f ae50 	beq.w	8009b02 <_printf_float+0xbe>
 8009e62:	f108 0801 	add.w	r8, r8, #1
 8009e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	4543      	cmp	r3, r8
 8009e6c:	dcf1      	bgt.n	8009e52 <_printf_float+0x40e>
 8009e6e:	464b      	mov	r3, r9
 8009e70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e74:	e6da      	b.n	8009c2c <_printf_float+0x1e8>
 8009e76:	f04f 0800 	mov.w	r8, #0
 8009e7a:	f104 0a1a 	add.w	sl, r4, #26
 8009e7e:	e7f2      	b.n	8009e66 <_printf_float+0x422>
 8009e80:	2301      	movs	r3, #1
 8009e82:	4642      	mov	r2, r8
 8009e84:	e7df      	b.n	8009e46 <_printf_float+0x402>
 8009e86:	2301      	movs	r3, #1
 8009e88:	464a      	mov	r2, r9
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	47b8      	blx	r7
 8009e90:	3001      	adds	r0, #1
 8009e92:	f43f ae36 	beq.w	8009b02 <_printf_float+0xbe>
 8009e96:	f108 0801 	add.w	r8, r8, #1
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e9e:	1a5b      	subs	r3, r3, r1
 8009ea0:	4543      	cmp	r3, r8
 8009ea2:	dcf0      	bgt.n	8009e86 <_printf_float+0x442>
 8009ea4:	e6f8      	b.n	8009c98 <_printf_float+0x254>
 8009ea6:	f04f 0800 	mov.w	r8, #0
 8009eaa:	f104 0919 	add.w	r9, r4, #25
 8009eae:	e7f4      	b.n	8009e9a <_printf_float+0x456>

08009eb0 <_printf_common>:
 8009eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb4:	4616      	mov	r6, r2
 8009eb6:	4699      	mov	r9, r3
 8009eb8:	688a      	ldr	r2, [r1, #8]
 8009eba:	690b      	ldr	r3, [r1, #16]
 8009ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	bfb8      	it	lt
 8009ec4:	4613      	movlt	r3, r2
 8009ec6:	6033      	str	r3, [r6, #0]
 8009ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ecc:	4607      	mov	r7, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	b10a      	cbz	r2, 8009ed6 <_printf_common+0x26>
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	6033      	str	r3, [r6, #0]
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	0699      	lsls	r1, r3, #26
 8009eda:	bf42      	ittt	mi
 8009edc:	6833      	ldrmi	r3, [r6, #0]
 8009ede:	3302      	addmi	r3, #2
 8009ee0:	6033      	strmi	r3, [r6, #0]
 8009ee2:	6825      	ldr	r5, [r4, #0]
 8009ee4:	f015 0506 	ands.w	r5, r5, #6
 8009ee8:	d106      	bne.n	8009ef8 <_printf_common+0x48>
 8009eea:	f104 0a19 	add.w	sl, r4, #25
 8009eee:	68e3      	ldr	r3, [r4, #12]
 8009ef0:	6832      	ldr	r2, [r6, #0]
 8009ef2:	1a9b      	subs	r3, r3, r2
 8009ef4:	42ab      	cmp	r3, r5
 8009ef6:	dc26      	bgt.n	8009f46 <_printf_common+0x96>
 8009ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009efc:	1e13      	subs	r3, r2, #0
 8009efe:	6822      	ldr	r2, [r4, #0]
 8009f00:	bf18      	it	ne
 8009f02:	2301      	movne	r3, #1
 8009f04:	0692      	lsls	r2, r2, #26
 8009f06:	d42b      	bmi.n	8009f60 <_printf_common+0xb0>
 8009f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	4638      	mov	r0, r7
 8009f10:	47c0      	blx	r8
 8009f12:	3001      	adds	r0, #1
 8009f14:	d01e      	beq.n	8009f54 <_printf_common+0xa4>
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	6922      	ldr	r2, [r4, #16]
 8009f1a:	f003 0306 	and.w	r3, r3, #6
 8009f1e:	2b04      	cmp	r3, #4
 8009f20:	bf02      	ittt	eq
 8009f22:	68e5      	ldreq	r5, [r4, #12]
 8009f24:	6833      	ldreq	r3, [r6, #0]
 8009f26:	1aed      	subeq	r5, r5, r3
 8009f28:	68a3      	ldr	r3, [r4, #8]
 8009f2a:	bf0c      	ite	eq
 8009f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f30:	2500      	movne	r5, #0
 8009f32:	4293      	cmp	r3, r2
 8009f34:	bfc4      	itt	gt
 8009f36:	1a9b      	subgt	r3, r3, r2
 8009f38:	18ed      	addgt	r5, r5, r3
 8009f3a:	2600      	movs	r6, #0
 8009f3c:	341a      	adds	r4, #26
 8009f3e:	42b5      	cmp	r5, r6
 8009f40:	d11a      	bne.n	8009f78 <_printf_common+0xc8>
 8009f42:	2000      	movs	r0, #0
 8009f44:	e008      	b.n	8009f58 <_printf_common+0xa8>
 8009f46:	2301      	movs	r3, #1
 8009f48:	4652      	mov	r2, sl
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	47c0      	blx	r8
 8009f50:	3001      	adds	r0, #1
 8009f52:	d103      	bne.n	8009f5c <_printf_common+0xac>
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295
 8009f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5c:	3501      	adds	r5, #1
 8009f5e:	e7c6      	b.n	8009eee <_printf_common+0x3e>
 8009f60:	18e1      	adds	r1, r4, r3
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	2030      	movs	r0, #48	; 0x30
 8009f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f6a:	4422      	add	r2, r4
 8009f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f74:	3302      	adds	r3, #2
 8009f76:	e7c7      	b.n	8009f08 <_printf_common+0x58>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	4622      	mov	r2, r4
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	4638      	mov	r0, r7
 8009f80:	47c0      	blx	r8
 8009f82:	3001      	adds	r0, #1
 8009f84:	d0e6      	beq.n	8009f54 <_printf_common+0xa4>
 8009f86:	3601      	adds	r6, #1
 8009f88:	e7d9      	b.n	8009f3e <_printf_common+0x8e>
	...

08009f8c <_printf_i>:
 8009f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f90:	7e0f      	ldrb	r7, [r1, #24]
 8009f92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f94:	2f78      	cmp	r7, #120	; 0x78
 8009f96:	4691      	mov	r9, r2
 8009f98:	4680      	mov	r8, r0
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	469a      	mov	sl, r3
 8009f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fa2:	d807      	bhi.n	8009fb4 <_printf_i+0x28>
 8009fa4:	2f62      	cmp	r7, #98	; 0x62
 8009fa6:	d80a      	bhi.n	8009fbe <_printf_i+0x32>
 8009fa8:	2f00      	cmp	r7, #0
 8009faa:	f000 80d4 	beq.w	800a156 <_printf_i+0x1ca>
 8009fae:	2f58      	cmp	r7, #88	; 0x58
 8009fb0:	f000 80c0 	beq.w	800a134 <_printf_i+0x1a8>
 8009fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fbc:	e03a      	b.n	800a034 <_printf_i+0xa8>
 8009fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fc2:	2b15      	cmp	r3, #21
 8009fc4:	d8f6      	bhi.n	8009fb4 <_printf_i+0x28>
 8009fc6:	a101      	add	r1, pc, #4	; (adr r1, 8009fcc <_printf_i+0x40>)
 8009fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fcc:	0800a025 	.word	0x0800a025
 8009fd0:	0800a039 	.word	0x0800a039
 8009fd4:	08009fb5 	.word	0x08009fb5
 8009fd8:	08009fb5 	.word	0x08009fb5
 8009fdc:	08009fb5 	.word	0x08009fb5
 8009fe0:	08009fb5 	.word	0x08009fb5
 8009fe4:	0800a039 	.word	0x0800a039
 8009fe8:	08009fb5 	.word	0x08009fb5
 8009fec:	08009fb5 	.word	0x08009fb5
 8009ff0:	08009fb5 	.word	0x08009fb5
 8009ff4:	08009fb5 	.word	0x08009fb5
 8009ff8:	0800a13d 	.word	0x0800a13d
 8009ffc:	0800a065 	.word	0x0800a065
 800a000:	0800a0f7 	.word	0x0800a0f7
 800a004:	08009fb5 	.word	0x08009fb5
 800a008:	08009fb5 	.word	0x08009fb5
 800a00c:	0800a15f 	.word	0x0800a15f
 800a010:	08009fb5 	.word	0x08009fb5
 800a014:	0800a065 	.word	0x0800a065
 800a018:	08009fb5 	.word	0x08009fb5
 800a01c:	08009fb5 	.word	0x08009fb5
 800a020:	0800a0ff 	.word	0x0800a0ff
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	1d1a      	adds	r2, r3, #4
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	602a      	str	r2, [r5, #0]
 800a02c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a034:	2301      	movs	r3, #1
 800a036:	e09f      	b.n	800a178 <_printf_i+0x1ec>
 800a038:	6820      	ldr	r0, [r4, #0]
 800a03a:	682b      	ldr	r3, [r5, #0]
 800a03c:	0607      	lsls	r7, r0, #24
 800a03e:	f103 0104 	add.w	r1, r3, #4
 800a042:	6029      	str	r1, [r5, #0]
 800a044:	d501      	bpl.n	800a04a <_printf_i+0xbe>
 800a046:	681e      	ldr	r6, [r3, #0]
 800a048:	e003      	b.n	800a052 <_printf_i+0xc6>
 800a04a:	0646      	lsls	r6, r0, #25
 800a04c:	d5fb      	bpl.n	800a046 <_printf_i+0xba>
 800a04e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a052:	2e00      	cmp	r6, #0
 800a054:	da03      	bge.n	800a05e <_printf_i+0xd2>
 800a056:	232d      	movs	r3, #45	; 0x2d
 800a058:	4276      	negs	r6, r6
 800a05a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a05e:	485a      	ldr	r0, [pc, #360]	; (800a1c8 <_printf_i+0x23c>)
 800a060:	230a      	movs	r3, #10
 800a062:	e012      	b.n	800a08a <_printf_i+0xfe>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	6820      	ldr	r0, [r4, #0]
 800a068:	1d19      	adds	r1, r3, #4
 800a06a:	6029      	str	r1, [r5, #0]
 800a06c:	0605      	lsls	r5, r0, #24
 800a06e:	d501      	bpl.n	800a074 <_printf_i+0xe8>
 800a070:	681e      	ldr	r6, [r3, #0]
 800a072:	e002      	b.n	800a07a <_printf_i+0xee>
 800a074:	0641      	lsls	r1, r0, #25
 800a076:	d5fb      	bpl.n	800a070 <_printf_i+0xe4>
 800a078:	881e      	ldrh	r6, [r3, #0]
 800a07a:	4853      	ldr	r0, [pc, #332]	; (800a1c8 <_printf_i+0x23c>)
 800a07c:	2f6f      	cmp	r7, #111	; 0x6f
 800a07e:	bf0c      	ite	eq
 800a080:	2308      	moveq	r3, #8
 800a082:	230a      	movne	r3, #10
 800a084:	2100      	movs	r1, #0
 800a086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a08a:	6865      	ldr	r5, [r4, #4]
 800a08c:	60a5      	str	r5, [r4, #8]
 800a08e:	2d00      	cmp	r5, #0
 800a090:	bfa2      	ittt	ge
 800a092:	6821      	ldrge	r1, [r4, #0]
 800a094:	f021 0104 	bicge.w	r1, r1, #4
 800a098:	6021      	strge	r1, [r4, #0]
 800a09a:	b90e      	cbnz	r6, 800a0a0 <_printf_i+0x114>
 800a09c:	2d00      	cmp	r5, #0
 800a09e:	d04b      	beq.n	800a138 <_printf_i+0x1ac>
 800a0a0:	4615      	mov	r5, r2
 800a0a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0a6:	fb03 6711 	mls	r7, r3, r1, r6
 800a0aa:	5dc7      	ldrb	r7, [r0, r7]
 800a0ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0b0:	4637      	mov	r7, r6
 800a0b2:	42bb      	cmp	r3, r7
 800a0b4:	460e      	mov	r6, r1
 800a0b6:	d9f4      	bls.n	800a0a2 <_printf_i+0x116>
 800a0b8:	2b08      	cmp	r3, #8
 800a0ba:	d10b      	bne.n	800a0d4 <_printf_i+0x148>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	07de      	lsls	r6, r3, #31
 800a0c0:	d508      	bpl.n	800a0d4 <_printf_i+0x148>
 800a0c2:	6923      	ldr	r3, [r4, #16]
 800a0c4:	6861      	ldr	r1, [r4, #4]
 800a0c6:	4299      	cmp	r1, r3
 800a0c8:	bfde      	ittt	le
 800a0ca:	2330      	movle	r3, #48	; 0x30
 800a0cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0d4:	1b52      	subs	r2, r2, r5
 800a0d6:	6122      	str	r2, [r4, #16]
 800a0d8:	f8cd a000 	str.w	sl, [sp]
 800a0dc:	464b      	mov	r3, r9
 800a0de:	aa03      	add	r2, sp, #12
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	f7ff fee4 	bl	8009eb0 <_printf_common>
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	d14a      	bne.n	800a182 <_printf_i+0x1f6>
 800a0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f0:	b004      	add	sp, #16
 800a0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	f043 0320 	orr.w	r3, r3, #32
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	4833      	ldr	r0, [pc, #204]	; (800a1cc <_printf_i+0x240>)
 800a100:	2778      	movs	r7, #120	; 0x78
 800a102:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	6829      	ldr	r1, [r5, #0]
 800a10a:	061f      	lsls	r7, r3, #24
 800a10c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a110:	d402      	bmi.n	800a118 <_printf_i+0x18c>
 800a112:	065f      	lsls	r7, r3, #25
 800a114:	bf48      	it	mi
 800a116:	b2b6      	uxthmi	r6, r6
 800a118:	07df      	lsls	r7, r3, #31
 800a11a:	bf48      	it	mi
 800a11c:	f043 0320 	orrmi.w	r3, r3, #32
 800a120:	6029      	str	r1, [r5, #0]
 800a122:	bf48      	it	mi
 800a124:	6023      	strmi	r3, [r4, #0]
 800a126:	b91e      	cbnz	r6, 800a130 <_printf_i+0x1a4>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	f023 0320 	bic.w	r3, r3, #32
 800a12e:	6023      	str	r3, [r4, #0]
 800a130:	2310      	movs	r3, #16
 800a132:	e7a7      	b.n	800a084 <_printf_i+0xf8>
 800a134:	4824      	ldr	r0, [pc, #144]	; (800a1c8 <_printf_i+0x23c>)
 800a136:	e7e4      	b.n	800a102 <_printf_i+0x176>
 800a138:	4615      	mov	r5, r2
 800a13a:	e7bd      	b.n	800a0b8 <_printf_i+0x12c>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	6826      	ldr	r6, [r4, #0]
 800a140:	6961      	ldr	r1, [r4, #20]
 800a142:	1d18      	adds	r0, r3, #4
 800a144:	6028      	str	r0, [r5, #0]
 800a146:	0635      	lsls	r5, r6, #24
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	d501      	bpl.n	800a150 <_printf_i+0x1c4>
 800a14c:	6019      	str	r1, [r3, #0]
 800a14e:	e002      	b.n	800a156 <_printf_i+0x1ca>
 800a150:	0670      	lsls	r0, r6, #25
 800a152:	d5fb      	bpl.n	800a14c <_printf_i+0x1c0>
 800a154:	8019      	strh	r1, [r3, #0]
 800a156:	2300      	movs	r3, #0
 800a158:	6123      	str	r3, [r4, #16]
 800a15a:	4615      	mov	r5, r2
 800a15c:	e7bc      	b.n	800a0d8 <_printf_i+0x14c>
 800a15e:	682b      	ldr	r3, [r5, #0]
 800a160:	1d1a      	adds	r2, r3, #4
 800a162:	602a      	str	r2, [r5, #0]
 800a164:	681d      	ldr	r5, [r3, #0]
 800a166:	6862      	ldr	r2, [r4, #4]
 800a168:	2100      	movs	r1, #0
 800a16a:	4628      	mov	r0, r5
 800a16c:	f7f6 f850 	bl	8000210 <memchr>
 800a170:	b108      	cbz	r0, 800a176 <_printf_i+0x1ea>
 800a172:	1b40      	subs	r0, r0, r5
 800a174:	6060      	str	r0, [r4, #4]
 800a176:	6863      	ldr	r3, [r4, #4]
 800a178:	6123      	str	r3, [r4, #16]
 800a17a:	2300      	movs	r3, #0
 800a17c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a180:	e7aa      	b.n	800a0d8 <_printf_i+0x14c>
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	462a      	mov	r2, r5
 800a186:	4649      	mov	r1, r9
 800a188:	4640      	mov	r0, r8
 800a18a:	47d0      	blx	sl
 800a18c:	3001      	adds	r0, #1
 800a18e:	d0ad      	beq.n	800a0ec <_printf_i+0x160>
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	079b      	lsls	r3, r3, #30
 800a194:	d413      	bmi.n	800a1be <_printf_i+0x232>
 800a196:	68e0      	ldr	r0, [r4, #12]
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	4298      	cmp	r0, r3
 800a19c:	bfb8      	it	lt
 800a19e:	4618      	movlt	r0, r3
 800a1a0:	e7a6      	b.n	800a0f0 <_printf_i+0x164>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	4632      	mov	r2, r6
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	47d0      	blx	sl
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d09d      	beq.n	800a0ec <_printf_i+0x160>
 800a1b0:	3501      	adds	r5, #1
 800a1b2:	68e3      	ldr	r3, [r4, #12]
 800a1b4:	9903      	ldr	r1, [sp, #12]
 800a1b6:	1a5b      	subs	r3, r3, r1
 800a1b8:	42ab      	cmp	r3, r5
 800a1ba:	dcf2      	bgt.n	800a1a2 <_printf_i+0x216>
 800a1bc:	e7eb      	b.n	800a196 <_printf_i+0x20a>
 800a1be:	2500      	movs	r5, #0
 800a1c0:	f104 0619 	add.w	r6, r4, #25
 800a1c4:	e7f5      	b.n	800a1b2 <_printf_i+0x226>
 800a1c6:	bf00      	nop
 800a1c8:	0800ea6e 	.word	0x0800ea6e
 800a1cc:	0800ea7f 	.word	0x0800ea7f

0800a1d0 <std>:
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	b510      	push	{r4, lr}
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a1da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1de:	6083      	str	r3, [r0, #8]
 800a1e0:	8181      	strh	r1, [r0, #12]
 800a1e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a1e4:	81c2      	strh	r2, [r0, #14]
 800a1e6:	6183      	str	r3, [r0, #24]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	2208      	movs	r2, #8
 800a1ec:	305c      	adds	r0, #92	; 0x5c
 800a1ee:	f000 f9e5 	bl	800a5bc <memset>
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <std+0x38>)
 800a1f4:	6263      	str	r3, [r4, #36]	; 0x24
 800a1f6:	4b05      	ldr	r3, [pc, #20]	; (800a20c <std+0x3c>)
 800a1f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1fa:	4b05      	ldr	r3, [pc, #20]	; (800a210 <std+0x40>)
 800a1fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1fe:	4b05      	ldr	r3, [pc, #20]	; (800a214 <std+0x44>)
 800a200:	6224      	str	r4, [r4, #32]
 800a202:	6323      	str	r3, [r4, #48]	; 0x30
 800a204:	bd10      	pop	{r4, pc}
 800a206:	bf00      	nop
 800a208:	0800a40d 	.word	0x0800a40d
 800a20c:	0800a42f 	.word	0x0800a42f
 800a210:	0800a467 	.word	0x0800a467
 800a214:	0800a48b 	.word	0x0800a48b

0800a218 <stdio_exit_handler>:
 800a218:	4a02      	ldr	r2, [pc, #8]	; (800a224 <stdio_exit_handler+0xc>)
 800a21a:	4903      	ldr	r1, [pc, #12]	; (800a228 <stdio_exit_handler+0x10>)
 800a21c:	4803      	ldr	r0, [pc, #12]	; (800a22c <stdio_exit_handler+0x14>)
 800a21e:	f000 b869 	b.w	800a2f4 <_fwalk_sglue>
 800a222:	bf00      	nop
 800a224:	2000000c 	.word	0x2000000c
 800a228:	0800bef1 	.word	0x0800bef1
 800a22c:	20000018 	.word	0x20000018

0800a230 <cleanup_stdio>:
 800a230:	6841      	ldr	r1, [r0, #4]
 800a232:	4b0c      	ldr	r3, [pc, #48]	; (800a264 <cleanup_stdio+0x34>)
 800a234:	4299      	cmp	r1, r3
 800a236:	b510      	push	{r4, lr}
 800a238:	4604      	mov	r4, r0
 800a23a:	d001      	beq.n	800a240 <cleanup_stdio+0x10>
 800a23c:	f001 fe58 	bl	800bef0 <_fflush_r>
 800a240:	68a1      	ldr	r1, [r4, #8]
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <cleanup_stdio+0x38>)
 800a244:	4299      	cmp	r1, r3
 800a246:	d002      	beq.n	800a24e <cleanup_stdio+0x1e>
 800a248:	4620      	mov	r0, r4
 800a24a:	f001 fe51 	bl	800bef0 <_fflush_r>
 800a24e:	68e1      	ldr	r1, [r4, #12]
 800a250:	4b06      	ldr	r3, [pc, #24]	; (800a26c <cleanup_stdio+0x3c>)
 800a252:	4299      	cmp	r1, r3
 800a254:	d004      	beq.n	800a260 <cleanup_stdio+0x30>
 800a256:	4620      	mov	r0, r4
 800a258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a25c:	f001 be48 	b.w	800bef0 <_fflush_r>
 800a260:	bd10      	pop	{r4, pc}
 800a262:	bf00      	nop
 800a264:	2000195c 	.word	0x2000195c
 800a268:	200019c4 	.word	0x200019c4
 800a26c:	20001a2c 	.word	0x20001a2c

0800a270 <global_stdio_init.part.0>:
 800a270:	b510      	push	{r4, lr}
 800a272:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <global_stdio_init.part.0+0x30>)
 800a274:	4c0b      	ldr	r4, [pc, #44]	; (800a2a4 <global_stdio_init.part.0+0x34>)
 800a276:	4a0c      	ldr	r2, [pc, #48]	; (800a2a8 <global_stdio_init.part.0+0x38>)
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	4620      	mov	r0, r4
 800a27c:	2200      	movs	r2, #0
 800a27e:	2104      	movs	r1, #4
 800a280:	f7ff ffa6 	bl	800a1d0 <std>
 800a284:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a288:	2201      	movs	r2, #1
 800a28a:	2109      	movs	r1, #9
 800a28c:	f7ff ffa0 	bl	800a1d0 <std>
 800a290:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a294:	2202      	movs	r2, #2
 800a296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a29a:	2112      	movs	r1, #18
 800a29c:	f7ff bf98 	b.w	800a1d0 <std>
 800a2a0:	20001a94 	.word	0x20001a94
 800a2a4:	2000195c 	.word	0x2000195c
 800a2a8:	0800a219 	.word	0x0800a219

0800a2ac <__sfp_lock_acquire>:
 800a2ac:	4801      	ldr	r0, [pc, #4]	; (800a2b4 <__sfp_lock_acquire+0x8>)
 800a2ae:	f000 ba11 	b.w	800a6d4 <__retarget_lock_acquire_recursive>
 800a2b2:	bf00      	nop
 800a2b4:	20001a9d 	.word	0x20001a9d

0800a2b8 <__sfp_lock_release>:
 800a2b8:	4801      	ldr	r0, [pc, #4]	; (800a2c0 <__sfp_lock_release+0x8>)
 800a2ba:	f000 ba0c 	b.w	800a6d6 <__retarget_lock_release_recursive>
 800a2be:	bf00      	nop
 800a2c0:	20001a9d 	.word	0x20001a9d

0800a2c4 <__sinit>:
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	f7ff fff0 	bl	800a2ac <__sfp_lock_acquire>
 800a2cc:	6a23      	ldr	r3, [r4, #32]
 800a2ce:	b11b      	cbz	r3, 800a2d8 <__sinit+0x14>
 800a2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d4:	f7ff bff0 	b.w	800a2b8 <__sfp_lock_release>
 800a2d8:	4b04      	ldr	r3, [pc, #16]	; (800a2ec <__sinit+0x28>)
 800a2da:	6223      	str	r3, [r4, #32]
 800a2dc:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <__sinit+0x2c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1f5      	bne.n	800a2d0 <__sinit+0xc>
 800a2e4:	f7ff ffc4 	bl	800a270 <global_stdio_init.part.0>
 800a2e8:	e7f2      	b.n	800a2d0 <__sinit+0xc>
 800a2ea:	bf00      	nop
 800a2ec:	0800a231 	.word	0x0800a231
 800a2f0:	20001a94 	.word	0x20001a94

0800a2f4 <_fwalk_sglue>:
 800a2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	4688      	mov	r8, r1
 800a2fc:	4614      	mov	r4, r2
 800a2fe:	2600      	movs	r6, #0
 800a300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a304:	f1b9 0901 	subs.w	r9, r9, #1
 800a308:	d505      	bpl.n	800a316 <_fwalk_sglue+0x22>
 800a30a:	6824      	ldr	r4, [r4, #0]
 800a30c:	2c00      	cmp	r4, #0
 800a30e:	d1f7      	bne.n	800a300 <_fwalk_sglue+0xc>
 800a310:	4630      	mov	r0, r6
 800a312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d907      	bls.n	800a32c <_fwalk_sglue+0x38>
 800a31c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a320:	3301      	adds	r3, #1
 800a322:	d003      	beq.n	800a32c <_fwalk_sglue+0x38>
 800a324:	4629      	mov	r1, r5
 800a326:	4638      	mov	r0, r7
 800a328:	47c0      	blx	r8
 800a32a:	4306      	orrs	r6, r0
 800a32c:	3568      	adds	r5, #104	; 0x68
 800a32e:	e7e9      	b.n	800a304 <_fwalk_sglue+0x10>

0800a330 <iprintf>:
 800a330:	b40f      	push	{r0, r1, r2, r3}
 800a332:	b507      	push	{r0, r1, r2, lr}
 800a334:	4906      	ldr	r1, [pc, #24]	; (800a350 <iprintf+0x20>)
 800a336:	ab04      	add	r3, sp, #16
 800a338:	6808      	ldr	r0, [r1, #0]
 800a33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33e:	6881      	ldr	r1, [r0, #8]
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	f001 fc35 	bl	800bbb0 <_vfiprintf_r>
 800a346:	b003      	add	sp, #12
 800a348:	f85d eb04 	ldr.w	lr, [sp], #4
 800a34c:	b004      	add	sp, #16
 800a34e:	4770      	bx	lr
 800a350:	20000064 	.word	0x20000064

0800a354 <_puts_r>:
 800a354:	6a03      	ldr	r3, [r0, #32]
 800a356:	b570      	push	{r4, r5, r6, lr}
 800a358:	6884      	ldr	r4, [r0, #8]
 800a35a:	4605      	mov	r5, r0
 800a35c:	460e      	mov	r6, r1
 800a35e:	b90b      	cbnz	r3, 800a364 <_puts_r+0x10>
 800a360:	f7ff ffb0 	bl	800a2c4 <__sinit>
 800a364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a366:	07db      	lsls	r3, r3, #31
 800a368:	d405      	bmi.n	800a376 <_puts_r+0x22>
 800a36a:	89a3      	ldrh	r3, [r4, #12]
 800a36c:	0598      	lsls	r0, r3, #22
 800a36e:	d402      	bmi.n	800a376 <_puts_r+0x22>
 800a370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a372:	f000 f9af 	bl	800a6d4 <__retarget_lock_acquire_recursive>
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	0719      	lsls	r1, r3, #28
 800a37a:	d513      	bpl.n	800a3a4 <_puts_r+0x50>
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	b18b      	cbz	r3, 800a3a4 <_puts_r+0x50>
 800a380:	3e01      	subs	r6, #1
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a388:	3b01      	subs	r3, #1
 800a38a:	60a3      	str	r3, [r4, #8]
 800a38c:	b9e9      	cbnz	r1, 800a3ca <_puts_r+0x76>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	da2e      	bge.n	800a3f0 <_puts_r+0x9c>
 800a392:	4622      	mov	r2, r4
 800a394:	210a      	movs	r1, #10
 800a396:	4628      	mov	r0, r5
 800a398:	f000 f87b 	bl	800a492 <__swbuf_r>
 800a39c:	3001      	adds	r0, #1
 800a39e:	d007      	beq.n	800a3b0 <_puts_r+0x5c>
 800a3a0:	250a      	movs	r5, #10
 800a3a2:	e007      	b.n	800a3b4 <_puts_r+0x60>
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 f8b0 	bl	800a50c <__swsetup_r>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	d0e7      	beq.n	800a380 <_puts_r+0x2c>
 800a3b0:	f04f 35ff 	mov.w	r5, #4294967295
 800a3b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3b6:	07da      	lsls	r2, r3, #31
 800a3b8:	d405      	bmi.n	800a3c6 <_puts_r+0x72>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	059b      	lsls	r3, r3, #22
 800a3be:	d402      	bmi.n	800a3c6 <_puts_r+0x72>
 800a3c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3c2:	f000 f988 	bl	800a6d6 <__retarget_lock_release_recursive>
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	da04      	bge.n	800a3d8 <_puts_r+0x84>
 800a3ce:	69a2      	ldr	r2, [r4, #24]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	dc06      	bgt.n	800a3e2 <_puts_r+0x8e>
 800a3d4:	290a      	cmp	r1, #10
 800a3d6:	d004      	beq.n	800a3e2 <_puts_r+0x8e>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	1c5a      	adds	r2, r3, #1
 800a3dc:	6022      	str	r2, [r4, #0]
 800a3de:	7019      	strb	r1, [r3, #0]
 800a3e0:	e7cf      	b.n	800a382 <_puts_r+0x2e>
 800a3e2:	4622      	mov	r2, r4
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f000 f854 	bl	800a492 <__swbuf_r>
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	d1c9      	bne.n	800a382 <_puts_r+0x2e>
 800a3ee:	e7df      	b.n	800a3b0 <_puts_r+0x5c>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	250a      	movs	r5, #10
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	6022      	str	r2, [r4, #0]
 800a3f8:	701d      	strb	r5, [r3, #0]
 800a3fa:	e7db      	b.n	800a3b4 <_puts_r+0x60>

0800a3fc <puts>:
 800a3fc:	4b02      	ldr	r3, [pc, #8]	; (800a408 <puts+0xc>)
 800a3fe:	4601      	mov	r1, r0
 800a400:	6818      	ldr	r0, [r3, #0]
 800a402:	f7ff bfa7 	b.w	800a354 <_puts_r>
 800a406:	bf00      	nop
 800a408:	20000064 	.word	0x20000064

0800a40c <__sread>:
 800a40c:	b510      	push	{r4, lr}
 800a40e:	460c      	mov	r4, r1
 800a410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a414:	f000 f900 	bl	800a618 <_read_r>
 800a418:	2800      	cmp	r0, #0
 800a41a:	bfab      	itete	ge
 800a41c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a41e:	89a3      	ldrhlt	r3, [r4, #12]
 800a420:	181b      	addge	r3, r3, r0
 800a422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a426:	bfac      	ite	ge
 800a428:	6563      	strge	r3, [r4, #84]	; 0x54
 800a42a:	81a3      	strhlt	r3, [r4, #12]
 800a42c:	bd10      	pop	{r4, pc}

0800a42e <__swrite>:
 800a42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a432:	461f      	mov	r7, r3
 800a434:	898b      	ldrh	r3, [r1, #12]
 800a436:	05db      	lsls	r3, r3, #23
 800a438:	4605      	mov	r5, r0
 800a43a:	460c      	mov	r4, r1
 800a43c:	4616      	mov	r6, r2
 800a43e:	d505      	bpl.n	800a44c <__swrite+0x1e>
 800a440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a444:	2302      	movs	r3, #2
 800a446:	2200      	movs	r2, #0
 800a448:	f000 f8d4 	bl	800a5f4 <_lseek_r>
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a456:	81a3      	strh	r3, [r4, #12]
 800a458:	4632      	mov	r2, r6
 800a45a:	463b      	mov	r3, r7
 800a45c:	4628      	mov	r0, r5
 800a45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a462:	f000 b8fb 	b.w	800a65c <_write_r>

0800a466 <__sseek>:
 800a466:	b510      	push	{r4, lr}
 800a468:	460c      	mov	r4, r1
 800a46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a46e:	f000 f8c1 	bl	800a5f4 <_lseek_r>
 800a472:	1c43      	adds	r3, r0, #1
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	bf15      	itete	ne
 800a478:	6560      	strne	r0, [r4, #84]	; 0x54
 800a47a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a47e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a482:	81a3      	strheq	r3, [r4, #12]
 800a484:	bf18      	it	ne
 800a486:	81a3      	strhne	r3, [r4, #12]
 800a488:	bd10      	pop	{r4, pc}

0800a48a <__sclose>:
 800a48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48e:	f000 b8a1 	b.w	800a5d4 <_close_r>

0800a492 <__swbuf_r>:
 800a492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a494:	460e      	mov	r6, r1
 800a496:	4614      	mov	r4, r2
 800a498:	4605      	mov	r5, r0
 800a49a:	b118      	cbz	r0, 800a4a4 <__swbuf_r+0x12>
 800a49c:	6a03      	ldr	r3, [r0, #32]
 800a49e:	b90b      	cbnz	r3, 800a4a4 <__swbuf_r+0x12>
 800a4a0:	f7ff ff10 	bl	800a2c4 <__sinit>
 800a4a4:	69a3      	ldr	r3, [r4, #24]
 800a4a6:	60a3      	str	r3, [r4, #8]
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	071a      	lsls	r2, r3, #28
 800a4ac:	d525      	bpl.n	800a4fa <__swbuf_r+0x68>
 800a4ae:	6923      	ldr	r3, [r4, #16]
 800a4b0:	b31b      	cbz	r3, 800a4fa <__swbuf_r+0x68>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	6922      	ldr	r2, [r4, #16]
 800a4b6:	1a98      	subs	r0, r3, r2
 800a4b8:	6963      	ldr	r3, [r4, #20]
 800a4ba:	b2f6      	uxtb	r6, r6
 800a4bc:	4283      	cmp	r3, r0
 800a4be:	4637      	mov	r7, r6
 800a4c0:	dc04      	bgt.n	800a4cc <__swbuf_r+0x3a>
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f001 fd13 	bl	800bef0 <_fflush_r>
 800a4ca:	b9e0      	cbnz	r0, 800a506 <__swbuf_r+0x74>
 800a4cc:	68a3      	ldr	r3, [r4, #8]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	60a3      	str	r3, [r4, #8]
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	6022      	str	r2, [r4, #0]
 800a4d8:	701e      	strb	r6, [r3, #0]
 800a4da:	6962      	ldr	r2, [r4, #20]
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d004      	beq.n	800a4ec <__swbuf_r+0x5a>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	07db      	lsls	r3, r3, #31
 800a4e6:	d506      	bpl.n	800a4f6 <__swbuf_r+0x64>
 800a4e8:	2e0a      	cmp	r6, #10
 800a4ea:	d104      	bne.n	800a4f6 <__swbuf_r+0x64>
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f001 fcfe 	bl	800bef0 <_fflush_r>
 800a4f4:	b938      	cbnz	r0, 800a506 <__swbuf_r+0x74>
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f000 f805 	bl	800a50c <__swsetup_r>
 800a502:	2800      	cmp	r0, #0
 800a504:	d0d5      	beq.n	800a4b2 <__swbuf_r+0x20>
 800a506:	f04f 37ff 	mov.w	r7, #4294967295
 800a50a:	e7f4      	b.n	800a4f6 <__swbuf_r+0x64>

0800a50c <__swsetup_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4b2a      	ldr	r3, [pc, #168]	; (800a5b8 <__swsetup_r+0xac>)
 800a510:	4605      	mov	r5, r0
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	460c      	mov	r4, r1
 800a516:	b118      	cbz	r0, 800a520 <__swsetup_r+0x14>
 800a518:	6a03      	ldr	r3, [r0, #32]
 800a51a:	b90b      	cbnz	r3, 800a520 <__swsetup_r+0x14>
 800a51c:	f7ff fed2 	bl	800a2c4 <__sinit>
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a526:	0718      	lsls	r0, r3, #28
 800a528:	d422      	bmi.n	800a570 <__swsetup_r+0x64>
 800a52a:	06d9      	lsls	r1, r3, #27
 800a52c:	d407      	bmi.n	800a53e <__swsetup_r+0x32>
 800a52e:	2309      	movs	r3, #9
 800a530:	602b      	str	r3, [r5, #0]
 800a532:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	f04f 30ff 	mov.w	r0, #4294967295
 800a53c:	e034      	b.n	800a5a8 <__swsetup_r+0x9c>
 800a53e:	0758      	lsls	r0, r3, #29
 800a540:	d512      	bpl.n	800a568 <__swsetup_r+0x5c>
 800a542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a544:	b141      	cbz	r1, 800a558 <__swsetup_r+0x4c>
 800a546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a54a:	4299      	cmp	r1, r3
 800a54c:	d002      	beq.n	800a554 <__swsetup_r+0x48>
 800a54e:	4628      	mov	r0, r5
 800a550:	f000 ff3c 	bl	800b3cc <_free_r>
 800a554:	2300      	movs	r3, #0
 800a556:	6363      	str	r3, [r4, #52]	; 0x34
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	2300      	movs	r3, #0
 800a562:	6063      	str	r3, [r4, #4]
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	6023      	str	r3, [r4, #0]
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	f043 0308 	orr.w	r3, r3, #8
 800a56e:	81a3      	strh	r3, [r4, #12]
 800a570:	6923      	ldr	r3, [r4, #16]
 800a572:	b94b      	cbnz	r3, 800a588 <__swsetup_r+0x7c>
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a57a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a57e:	d003      	beq.n	800a588 <__swsetup_r+0x7c>
 800a580:	4621      	mov	r1, r4
 800a582:	4628      	mov	r0, r5
 800a584:	f001 fd02 	bl	800bf8c <__smakebuf_r>
 800a588:	89a0      	ldrh	r0, [r4, #12]
 800a58a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a58e:	f010 0301 	ands.w	r3, r0, #1
 800a592:	d00a      	beq.n	800a5aa <__swsetup_r+0x9e>
 800a594:	2300      	movs	r3, #0
 800a596:	60a3      	str	r3, [r4, #8]
 800a598:	6963      	ldr	r3, [r4, #20]
 800a59a:	425b      	negs	r3, r3
 800a59c:	61a3      	str	r3, [r4, #24]
 800a59e:	6923      	ldr	r3, [r4, #16]
 800a5a0:	b943      	cbnz	r3, 800a5b4 <__swsetup_r+0xa8>
 800a5a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5a6:	d1c4      	bne.n	800a532 <__swsetup_r+0x26>
 800a5a8:	bd38      	pop	{r3, r4, r5, pc}
 800a5aa:	0781      	lsls	r1, r0, #30
 800a5ac:	bf58      	it	pl
 800a5ae:	6963      	ldrpl	r3, [r4, #20]
 800a5b0:	60a3      	str	r3, [r4, #8]
 800a5b2:	e7f4      	b.n	800a59e <__swsetup_r+0x92>
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	e7f7      	b.n	800a5a8 <__swsetup_r+0x9c>
 800a5b8:	20000064 	.word	0x20000064

0800a5bc <memset>:
 800a5bc:	4402      	add	r2, r0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d100      	bne.n	800a5c6 <memset+0xa>
 800a5c4:	4770      	bx	lr
 800a5c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ca:	e7f9      	b.n	800a5c0 <memset+0x4>

0800a5cc <_localeconv_r>:
 800a5cc:	4800      	ldr	r0, [pc, #0]	; (800a5d0 <_localeconv_r+0x4>)
 800a5ce:	4770      	bx	lr
 800a5d0:	20000158 	.word	0x20000158

0800a5d4 <_close_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d06      	ldr	r5, [pc, #24]	; (800a5f0 <_close_r+0x1c>)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	602b      	str	r3, [r5, #0]
 800a5e0:	f7f7 f973 	bl	80018ca <_close>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_close_r+0x1a>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_close_r+0x1a>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	20001a98 	.word	0x20001a98

0800a5f4 <_lseek_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d07      	ldr	r5, [pc, #28]	; (800a614 <_lseek_r+0x20>)
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	4608      	mov	r0, r1
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	2200      	movs	r2, #0
 800a600:	602a      	str	r2, [r5, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	f7f7 f988 	bl	8001918 <_lseek>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_lseek_r+0x1e>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_lseek_r+0x1e>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	20001a98 	.word	0x20001a98

0800a618 <_read_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d07      	ldr	r5, [pc, #28]	; (800a638 <_read_r+0x20>)
 800a61c:	4604      	mov	r4, r0
 800a61e:	4608      	mov	r0, r1
 800a620:	4611      	mov	r1, r2
 800a622:	2200      	movs	r2, #0
 800a624:	602a      	str	r2, [r5, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f7f7 f932 	bl	8001890 <_read>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_read_r+0x1e>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_read_r+0x1e>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	20001a98 	.word	0x20001a98

0800a63c <_sbrk_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4d06      	ldr	r5, [pc, #24]	; (800a658 <_sbrk_r+0x1c>)
 800a640:	2300      	movs	r3, #0
 800a642:	4604      	mov	r4, r0
 800a644:	4608      	mov	r0, r1
 800a646:	602b      	str	r3, [r5, #0]
 800a648:	f7f7 f974 	bl	8001934 <_sbrk>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_sbrk_r+0x1a>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_sbrk_r+0x1a>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20001a98 	.word	0x20001a98

0800a65c <_write_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4d07      	ldr	r5, [pc, #28]	; (800a67c <_write_r+0x20>)
 800a660:	4604      	mov	r4, r0
 800a662:	4608      	mov	r0, r1
 800a664:	4611      	mov	r1, r2
 800a666:	2200      	movs	r2, #0
 800a668:	602a      	str	r2, [r5, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f7f6 fd50 	bl	8001110 <_write>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_write_r+0x1e>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_write_r+0x1e>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20001a98 	.word	0x20001a98

0800a680 <__errno>:
 800a680:	4b01      	ldr	r3, [pc, #4]	; (800a688 <__errno+0x8>)
 800a682:	6818      	ldr	r0, [r3, #0]
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	20000064 	.word	0x20000064

0800a68c <__libc_init_array>:
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	4d0d      	ldr	r5, [pc, #52]	; (800a6c4 <__libc_init_array+0x38>)
 800a690:	4c0d      	ldr	r4, [pc, #52]	; (800a6c8 <__libc_init_array+0x3c>)
 800a692:	1b64      	subs	r4, r4, r5
 800a694:	10a4      	asrs	r4, r4, #2
 800a696:	2600      	movs	r6, #0
 800a698:	42a6      	cmp	r6, r4
 800a69a:	d109      	bne.n	800a6b0 <__libc_init_array+0x24>
 800a69c:	4d0b      	ldr	r5, [pc, #44]	; (800a6cc <__libc_init_array+0x40>)
 800a69e:	4c0c      	ldr	r4, [pc, #48]	; (800a6d0 <__libc_init_array+0x44>)
 800a6a0:	f004 f89a 	bl	800e7d8 <_init>
 800a6a4:	1b64      	subs	r4, r4, r5
 800a6a6:	10a4      	asrs	r4, r4, #2
 800a6a8:	2600      	movs	r6, #0
 800a6aa:	42a6      	cmp	r6, r4
 800a6ac:	d105      	bne.n	800a6ba <__libc_init_array+0x2e>
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
 800a6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b4:	4798      	blx	r3
 800a6b6:	3601      	adds	r6, #1
 800a6b8:	e7ee      	b.n	800a698 <__libc_init_array+0xc>
 800a6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6be:	4798      	blx	r3
 800a6c0:	3601      	adds	r6, #1
 800a6c2:	e7f2      	b.n	800a6aa <__libc_init_array+0x1e>
 800a6c4:	0800f060 	.word	0x0800f060
 800a6c8:	0800f060 	.word	0x0800f060
 800a6cc:	0800f060 	.word	0x0800f060
 800a6d0:	0800f064 	.word	0x0800f064

0800a6d4 <__retarget_lock_acquire_recursive>:
 800a6d4:	4770      	bx	lr

0800a6d6 <__retarget_lock_release_recursive>:
 800a6d6:	4770      	bx	lr

0800a6d8 <quorem>:
 800a6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	6903      	ldr	r3, [r0, #16]
 800a6de:	690c      	ldr	r4, [r1, #16]
 800a6e0:	42a3      	cmp	r3, r4
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	db7e      	blt.n	800a7e4 <quorem+0x10c>
 800a6e6:	3c01      	subs	r4, #1
 800a6e8:	f101 0814 	add.w	r8, r1, #20
 800a6ec:	f100 0514 	add.w	r5, r0, #20
 800a6f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6fe:	3301      	adds	r3, #1
 800a700:	429a      	cmp	r2, r3
 800a702:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a706:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a70a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a70e:	d331      	bcc.n	800a774 <quorem+0x9c>
 800a710:	f04f 0e00 	mov.w	lr, #0
 800a714:	4640      	mov	r0, r8
 800a716:	46ac      	mov	ip, r5
 800a718:	46f2      	mov	sl, lr
 800a71a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a71e:	b293      	uxth	r3, r2
 800a720:	fb06 e303 	mla	r3, r6, r3, lr
 800a724:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a728:	0c1a      	lsrs	r2, r3, #16
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	ebaa 0303 	sub.w	r3, sl, r3
 800a730:	f8dc a000 	ldr.w	sl, [ip]
 800a734:	fa13 f38a 	uxtah	r3, r3, sl
 800a738:	fb06 220e 	mla	r2, r6, lr, r2
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	9b00      	ldr	r3, [sp, #0]
 800a740:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a744:	b292      	uxth	r2, r2
 800a746:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a74a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a74e:	f8bd 3000 	ldrh.w	r3, [sp]
 800a752:	4581      	cmp	r9, r0
 800a754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a758:	f84c 3b04 	str.w	r3, [ip], #4
 800a75c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a760:	d2db      	bcs.n	800a71a <quorem+0x42>
 800a762:	f855 300b 	ldr.w	r3, [r5, fp]
 800a766:	b92b      	cbnz	r3, 800a774 <quorem+0x9c>
 800a768:	9b01      	ldr	r3, [sp, #4]
 800a76a:	3b04      	subs	r3, #4
 800a76c:	429d      	cmp	r5, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	d32c      	bcc.n	800a7cc <quorem+0xf4>
 800a772:	613c      	str	r4, [r7, #16]
 800a774:	4638      	mov	r0, r7
 800a776:	f001 f8f1 	bl	800b95c <__mcmp>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	db22      	blt.n	800a7c4 <quorem+0xec>
 800a77e:	3601      	adds	r6, #1
 800a780:	4629      	mov	r1, r5
 800a782:	2000      	movs	r0, #0
 800a784:	f858 2b04 	ldr.w	r2, [r8], #4
 800a788:	f8d1 c000 	ldr.w	ip, [r1]
 800a78c:	b293      	uxth	r3, r2
 800a78e:	1ac3      	subs	r3, r0, r3
 800a790:	0c12      	lsrs	r2, r2, #16
 800a792:	fa13 f38c 	uxtah	r3, r3, ip
 800a796:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a79a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7a4:	45c1      	cmp	r9, r8
 800a7a6:	f841 3b04 	str.w	r3, [r1], #4
 800a7aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7ae:	d2e9      	bcs.n	800a784 <quorem+0xac>
 800a7b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7b8:	b922      	cbnz	r2, 800a7c4 <quorem+0xec>
 800a7ba:	3b04      	subs	r3, #4
 800a7bc:	429d      	cmp	r5, r3
 800a7be:	461a      	mov	r2, r3
 800a7c0:	d30a      	bcc.n	800a7d8 <quorem+0x100>
 800a7c2:	613c      	str	r4, [r7, #16]
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	b003      	add	sp, #12
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	6812      	ldr	r2, [r2, #0]
 800a7ce:	3b04      	subs	r3, #4
 800a7d0:	2a00      	cmp	r2, #0
 800a7d2:	d1ce      	bne.n	800a772 <quorem+0x9a>
 800a7d4:	3c01      	subs	r4, #1
 800a7d6:	e7c9      	b.n	800a76c <quorem+0x94>
 800a7d8:	6812      	ldr	r2, [r2, #0]
 800a7da:	3b04      	subs	r3, #4
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	d1f0      	bne.n	800a7c2 <quorem+0xea>
 800a7e0:	3c01      	subs	r4, #1
 800a7e2:	e7eb      	b.n	800a7bc <quorem+0xe4>
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e7ee      	b.n	800a7c6 <quorem+0xee>

0800a7e8 <_dtoa_r>:
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	ed2d 8b04 	vpush	{d8-d9}
 800a7f0:	69c5      	ldr	r5, [r0, #28]
 800a7f2:	b093      	sub	sp, #76	; 0x4c
 800a7f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7f8:	ec57 6b10 	vmov	r6, r7, d0
 800a7fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a800:	9107      	str	r1, [sp, #28]
 800a802:	4604      	mov	r4, r0
 800a804:	920a      	str	r2, [sp, #40]	; 0x28
 800a806:	930d      	str	r3, [sp, #52]	; 0x34
 800a808:	b975      	cbnz	r5, 800a828 <_dtoa_r+0x40>
 800a80a:	2010      	movs	r0, #16
 800a80c:	f7fe ffc6 	bl	800979c <malloc>
 800a810:	4602      	mov	r2, r0
 800a812:	61e0      	str	r0, [r4, #28]
 800a814:	b920      	cbnz	r0, 800a820 <_dtoa_r+0x38>
 800a816:	4bae      	ldr	r3, [pc, #696]	; (800aad0 <_dtoa_r+0x2e8>)
 800a818:	21ef      	movs	r1, #239	; 0xef
 800a81a:	48ae      	ldr	r0, [pc, #696]	; (800aad4 <_dtoa_r+0x2ec>)
 800a81c:	f001 fc22 	bl	800c064 <__assert_func>
 800a820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a824:	6005      	str	r5, [r0, #0]
 800a826:	60c5      	str	r5, [r0, #12]
 800a828:	69e3      	ldr	r3, [r4, #28]
 800a82a:	6819      	ldr	r1, [r3, #0]
 800a82c:	b151      	cbz	r1, 800a844 <_dtoa_r+0x5c>
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	604a      	str	r2, [r1, #4]
 800a832:	2301      	movs	r3, #1
 800a834:	4093      	lsls	r3, r2
 800a836:	608b      	str	r3, [r1, #8]
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fe53 	bl	800b4e4 <_Bfree>
 800a83e:	69e3      	ldr	r3, [r4, #28]
 800a840:	2200      	movs	r2, #0
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	1e3b      	subs	r3, r7, #0
 800a846:	bfbb      	ittet	lt
 800a848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a84c:	9303      	strlt	r3, [sp, #12]
 800a84e:	2300      	movge	r3, #0
 800a850:	2201      	movlt	r2, #1
 800a852:	bfac      	ite	ge
 800a854:	f8c8 3000 	strge.w	r3, [r8]
 800a858:	f8c8 2000 	strlt.w	r2, [r8]
 800a85c:	4b9e      	ldr	r3, [pc, #632]	; (800aad8 <_dtoa_r+0x2f0>)
 800a85e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a862:	ea33 0308 	bics.w	r3, r3, r8
 800a866:	d11b      	bne.n	800a8a0 <_dtoa_r+0xb8>
 800a868:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a86a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a874:	4333      	orrs	r3, r6
 800a876:	f000 8593 	beq.w	800b3a0 <_dtoa_r+0xbb8>
 800a87a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a87c:	b963      	cbnz	r3, 800a898 <_dtoa_r+0xb0>
 800a87e:	4b97      	ldr	r3, [pc, #604]	; (800aadc <_dtoa_r+0x2f4>)
 800a880:	e027      	b.n	800a8d2 <_dtoa_r+0xea>
 800a882:	4b97      	ldr	r3, [pc, #604]	; (800aae0 <_dtoa_r+0x2f8>)
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	3308      	adds	r3, #8
 800a888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a88a:	6013      	str	r3, [r2, #0]
 800a88c:	9800      	ldr	r0, [sp, #0]
 800a88e:	b013      	add	sp, #76	; 0x4c
 800a890:	ecbd 8b04 	vpop	{d8-d9}
 800a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a898:	4b90      	ldr	r3, [pc, #576]	; (800aadc <_dtoa_r+0x2f4>)
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	3303      	adds	r3, #3
 800a89e:	e7f3      	b.n	800a888 <_dtoa_r+0xa0>
 800a8a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	ec51 0b17 	vmov	r0, r1, d7
 800a8aa:	eeb0 8a47 	vmov.f32	s16, s14
 800a8ae:	eef0 8a67 	vmov.f32	s17, s15
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f7f6 f928 	bl	8000b08 <__aeabi_dcmpeq>
 800a8b8:	4681      	mov	r9, r0
 800a8ba:	b160      	cbz	r0, 800a8d6 <_dtoa_r+0xee>
 800a8bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8be:	2301      	movs	r3, #1
 800a8c0:	6013      	str	r3, [r2, #0]
 800a8c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 8568 	beq.w	800b39a <_dtoa_r+0xbb2>
 800a8ca:	4b86      	ldr	r3, [pc, #536]	; (800aae4 <_dtoa_r+0x2fc>)
 800a8cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8ce:	6013      	str	r3, [r2, #0]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	e7da      	b.n	800a88c <_dtoa_r+0xa4>
 800a8d6:	aa10      	add	r2, sp, #64	; 0x40
 800a8d8:	a911      	add	r1, sp, #68	; 0x44
 800a8da:	4620      	mov	r0, r4
 800a8dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a8e0:	eef0 0a68 	vmov.f32	s1, s17
 800a8e4:	f001 f8e0 	bl	800baa8 <__d2b>
 800a8e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a8ec:	4682      	mov	sl, r0
 800a8ee:	2d00      	cmp	r5, #0
 800a8f0:	d07f      	beq.n	800a9f2 <_dtoa_r+0x20a>
 800a8f2:	ee18 3a90 	vmov	r3, s17
 800a8f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a8fe:	ec51 0b18 	vmov	r0, r1, d8
 800a902:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a906:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a90a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a90e:	4619      	mov	r1, r3
 800a910:	2200      	movs	r2, #0
 800a912:	4b75      	ldr	r3, [pc, #468]	; (800aae8 <_dtoa_r+0x300>)
 800a914:	f7f5 fcd8 	bl	80002c8 <__aeabi_dsub>
 800a918:	a367      	add	r3, pc, #412	; (adr r3, 800aab8 <_dtoa_r+0x2d0>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fe8b 	bl	8000638 <__aeabi_dmul>
 800a922:	a367      	add	r3, pc, #412	; (adr r3, 800aac0 <_dtoa_r+0x2d8>)
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	f7f5 fcd0 	bl	80002cc <__adddf3>
 800a92c:	4606      	mov	r6, r0
 800a92e:	4628      	mov	r0, r5
 800a930:	460f      	mov	r7, r1
 800a932:	f7f5 fe17 	bl	8000564 <__aeabi_i2d>
 800a936:	a364      	add	r3, pc, #400	; (adr r3, 800aac8 <_dtoa_r+0x2e0>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f5 fe7c 	bl	8000638 <__aeabi_dmul>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4630      	mov	r0, r6
 800a946:	4639      	mov	r1, r7
 800a948:	f7f5 fcc0 	bl	80002cc <__adddf3>
 800a94c:	4606      	mov	r6, r0
 800a94e:	460f      	mov	r7, r1
 800a950:	f7f6 f922 	bl	8000b98 <__aeabi_d2iz>
 800a954:	2200      	movs	r2, #0
 800a956:	4683      	mov	fp, r0
 800a958:	2300      	movs	r3, #0
 800a95a:	4630      	mov	r0, r6
 800a95c:	4639      	mov	r1, r7
 800a95e:	f7f6 f8dd 	bl	8000b1c <__aeabi_dcmplt>
 800a962:	b148      	cbz	r0, 800a978 <_dtoa_r+0x190>
 800a964:	4658      	mov	r0, fp
 800a966:	f7f5 fdfd 	bl	8000564 <__aeabi_i2d>
 800a96a:	4632      	mov	r2, r6
 800a96c:	463b      	mov	r3, r7
 800a96e:	f7f6 f8cb 	bl	8000b08 <__aeabi_dcmpeq>
 800a972:	b908      	cbnz	r0, 800a978 <_dtoa_r+0x190>
 800a974:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a978:	f1bb 0f16 	cmp.w	fp, #22
 800a97c:	d857      	bhi.n	800aa2e <_dtoa_r+0x246>
 800a97e:	4b5b      	ldr	r3, [pc, #364]	; (800aaec <_dtoa_r+0x304>)
 800a980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	ec51 0b18 	vmov	r0, r1, d8
 800a98c:	f7f6 f8c6 	bl	8000b1c <__aeabi_dcmplt>
 800a990:	2800      	cmp	r0, #0
 800a992:	d04e      	beq.n	800aa32 <_dtoa_r+0x24a>
 800a994:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a998:	2300      	movs	r3, #0
 800a99a:	930c      	str	r3, [sp, #48]	; 0x30
 800a99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a99e:	1b5b      	subs	r3, r3, r5
 800a9a0:	1e5a      	subs	r2, r3, #1
 800a9a2:	bf45      	ittet	mi
 800a9a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a9a8:	9305      	strmi	r3, [sp, #20]
 800a9aa:	2300      	movpl	r3, #0
 800a9ac:	2300      	movmi	r3, #0
 800a9ae:	9206      	str	r2, [sp, #24]
 800a9b0:	bf54      	ite	pl
 800a9b2:	9305      	strpl	r3, [sp, #20]
 800a9b4:	9306      	strmi	r3, [sp, #24]
 800a9b6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ba:	db3c      	blt.n	800aa36 <_dtoa_r+0x24e>
 800a9bc:	9b06      	ldr	r3, [sp, #24]
 800a9be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a9c2:	445b      	add	r3, fp
 800a9c4:	9306      	str	r3, [sp, #24]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9308      	str	r3, [sp, #32]
 800a9ca:	9b07      	ldr	r3, [sp, #28]
 800a9cc:	2b09      	cmp	r3, #9
 800a9ce:	d868      	bhi.n	800aaa2 <_dtoa_r+0x2ba>
 800a9d0:	2b05      	cmp	r3, #5
 800a9d2:	bfc4      	itt	gt
 800a9d4:	3b04      	subgt	r3, #4
 800a9d6:	9307      	strgt	r3, [sp, #28]
 800a9d8:	9b07      	ldr	r3, [sp, #28]
 800a9da:	f1a3 0302 	sub.w	r3, r3, #2
 800a9de:	bfcc      	ite	gt
 800a9e0:	2500      	movgt	r5, #0
 800a9e2:	2501      	movle	r5, #1
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	f200 8085 	bhi.w	800aaf4 <_dtoa_r+0x30c>
 800a9ea:	e8df f003 	tbb	[pc, r3]
 800a9ee:	3b2e      	.short	0x3b2e
 800a9f0:	5839      	.short	0x5839
 800a9f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a9f6:	441d      	add	r5, r3
 800a9f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a9fc:	2b20      	cmp	r3, #32
 800a9fe:	bfc1      	itttt	gt
 800aa00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa04:	fa08 f803 	lslgt.w	r8, r8, r3
 800aa08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aa0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aa10:	bfd6      	itet	le
 800aa12:	f1c3 0320 	rsble	r3, r3, #32
 800aa16:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa1a:	fa06 f003 	lslle.w	r0, r6, r3
 800aa1e:	f7f5 fd91 	bl	8000544 <__aeabi_ui2d>
 800aa22:	2201      	movs	r2, #1
 800aa24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aa28:	3d01      	subs	r5, #1
 800aa2a:	920e      	str	r2, [sp, #56]	; 0x38
 800aa2c:	e76f      	b.n	800a90e <_dtoa_r+0x126>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e7b3      	b.n	800a99a <_dtoa_r+0x1b2>
 800aa32:	900c      	str	r0, [sp, #48]	; 0x30
 800aa34:	e7b2      	b.n	800a99c <_dtoa_r+0x1b4>
 800aa36:	9b05      	ldr	r3, [sp, #20]
 800aa38:	eba3 030b 	sub.w	r3, r3, fp
 800aa3c:	9305      	str	r3, [sp, #20]
 800aa3e:	f1cb 0300 	rsb	r3, fp, #0
 800aa42:	9308      	str	r3, [sp, #32]
 800aa44:	2300      	movs	r3, #0
 800aa46:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa48:	e7bf      	b.n	800a9ca <_dtoa_r+0x1e2>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dc52      	bgt.n	800aafa <_dtoa_r+0x312>
 800aa54:	2301      	movs	r3, #1
 800aa56:	9301      	str	r3, [sp, #4]
 800aa58:	9304      	str	r3, [sp, #16]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	920a      	str	r2, [sp, #40]	; 0x28
 800aa5e:	e00b      	b.n	800aa78 <_dtoa_r+0x290>
 800aa60:	2301      	movs	r3, #1
 800aa62:	e7f3      	b.n	800aa4c <_dtoa_r+0x264>
 800aa64:	2300      	movs	r3, #0
 800aa66:	9309      	str	r3, [sp, #36]	; 0x24
 800aa68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa6a:	445b      	add	r3, fp
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	9304      	str	r3, [sp, #16]
 800aa74:	bfb8      	it	lt
 800aa76:	2301      	movlt	r3, #1
 800aa78:	69e0      	ldr	r0, [r4, #28]
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	2204      	movs	r2, #4
 800aa7e:	f102 0614 	add.w	r6, r2, #20
 800aa82:	429e      	cmp	r6, r3
 800aa84:	d93d      	bls.n	800ab02 <_dtoa_r+0x31a>
 800aa86:	6041      	str	r1, [r0, #4]
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f000 fceb 	bl	800b464 <_Balloc>
 800aa8e:	9000      	str	r0, [sp, #0]
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d139      	bne.n	800ab08 <_dtoa_r+0x320>
 800aa94:	4b16      	ldr	r3, [pc, #88]	; (800aaf0 <_dtoa_r+0x308>)
 800aa96:	4602      	mov	r2, r0
 800aa98:	f240 11af 	movw	r1, #431	; 0x1af
 800aa9c:	e6bd      	b.n	800a81a <_dtoa_r+0x32>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e7e1      	b.n	800aa66 <_dtoa_r+0x27e>
 800aaa2:	2501      	movs	r5, #1
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	9307      	str	r3, [sp, #28]
 800aaa8:	9509      	str	r5, [sp, #36]	; 0x24
 800aaaa:	f04f 33ff 	mov.w	r3, #4294967295
 800aaae:	9301      	str	r3, [sp, #4]
 800aab0:	9304      	str	r3, [sp, #16]
 800aab2:	2200      	movs	r2, #0
 800aab4:	2312      	movs	r3, #18
 800aab6:	e7d1      	b.n	800aa5c <_dtoa_r+0x274>
 800aab8:	636f4361 	.word	0x636f4361
 800aabc:	3fd287a7 	.word	0x3fd287a7
 800aac0:	8b60c8b3 	.word	0x8b60c8b3
 800aac4:	3fc68a28 	.word	0x3fc68a28
 800aac8:	509f79fb 	.word	0x509f79fb
 800aacc:	3fd34413 	.word	0x3fd34413
 800aad0:	0800ea9d 	.word	0x0800ea9d
 800aad4:	0800eab4 	.word	0x0800eab4
 800aad8:	7ff00000 	.word	0x7ff00000
 800aadc:	0800ea99 	.word	0x0800ea99
 800aae0:	0800ea90 	.word	0x0800ea90
 800aae4:	0800ea6d 	.word	0x0800ea6d
 800aae8:	3ff80000 	.word	0x3ff80000
 800aaec:	0800eba0 	.word	0x0800eba0
 800aaf0:	0800eb0c 	.word	0x0800eb0c
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf8:	e7d7      	b.n	800aaaa <_dtoa_r+0x2c2>
 800aafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	9304      	str	r3, [sp, #16]
 800ab00:	e7ba      	b.n	800aa78 <_dtoa_r+0x290>
 800ab02:	3101      	adds	r1, #1
 800ab04:	0052      	lsls	r2, r2, #1
 800ab06:	e7ba      	b.n	800aa7e <_dtoa_r+0x296>
 800ab08:	69e3      	ldr	r3, [r4, #28]
 800ab0a:	9a00      	ldr	r2, [sp, #0]
 800ab0c:	601a      	str	r2, [r3, #0]
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	2b0e      	cmp	r3, #14
 800ab12:	f200 80a8 	bhi.w	800ac66 <_dtoa_r+0x47e>
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	f000 80a5 	beq.w	800ac66 <_dtoa_r+0x47e>
 800ab1c:	f1bb 0f00 	cmp.w	fp, #0
 800ab20:	dd38      	ble.n	800ab94 <_dtoa_r+0x3ac>
 800ab22:	4bc0      	ldr	r3, [pc, #768]	; (800ae24 <_dtoa_r+0x63c>)
 800ab24:	f00b 020f 	and.w	r2, fp, #15
 800ab28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ab30:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ab34:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ab38:	d019      	beq.n	800ab6e <_dtoa_r+0x386>
 800ab3a:	4bbb      	ldr	r3, [pc, #748]	; (800ae28 <_dtoa_r+0x640>)
 800ab3c:	ec51 0b18 	vmov	r0, r1, d8
 800ab40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab44:	f7f5 fea2 	bl	800088c <__aeabi_ddiv>
 800ab48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab4c:	f008 080f 	and.w	r8, r8, #15
 800ab50:	2503      	movs	r5, #3
 800ab52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ae28 <_dtoa_r+0x640>
 800ab56:	f1b8 0f00 	cmp.w	r8, #0
 800ab5a:	d10a      	bne.n	800ab72 <_dtoa_r+0x38a>
 800ab5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab60:	4632      	mov	r2, r6
 800ab62:	463b      	mov	r3, r7
 800ab64:	f7f5 fe92 	bl	800088c <__aeabi_ddiv>
 800ab68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab6c:	e02b      	b.n	800abc6 <_dtoa_r+0x3de>
 800ab6e:	2502      	movs	r5, #2
 800ab70:	e7ef      	b.n	800ab52 <_dtoa_r+0x36a>
 800ab72:	f018 0f01 	tst.w	r8, #1
 800ab76:	d008      	beq.n	800ab8a <_dtoa_r+0x3a2>
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab80:	f7f5 fd5a 	bl	8000638 <__aeabi_dmul>
 800ab84:	3501      	adds	r5, #1
 800ab86:	4606      	mov	r6, r0
 800ab88:	460f      	mov	r7, r1
 800ab8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab8e:	f109 0908 	add.w	r9, r9, #8
 800ab92:	e7e0      	b.n	800ab56 <_dtoa_r+0x36e>
 800ab94:	f000 809f 	beq.w	800acd6 <_dtoa_r+0x4ee>
 800ab98:	f1cb 0600 	rsb	r6, fp, #0
 800ab9c:	4ba1      	ldr	r3, [pc, #644]	; (800ae24 <_dtoa_r+0x63c>)
 800ab9e:	4fa2      	ldr	r7, [pc, #648]	; (800ae28 <_dtoa_r+0x640>)
 800aba0:	f006 020f 	and.w	r2, r6, #15
 800aba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	ec51 0b18 	vmov	r0, r1, d8
 800abb0:	f7f5 fd42 	bl	8000638 <__aeabi_dmul>
 800abb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abb8:	1136      	asrs	r6, r6, #4
 800abba:	2300      	movs	r3, #0
 800abbc:	2502      	movs	r5, #2
 800abbe:	2e00      	cmp	r6, #0
 800abc0:	d17e      	bne.n	800acc0 <_dtoa_r+0x4d8>
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1d0      	bne.n	800ab68 <_dtoa_r+0x380>
 800abc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 8084 	beq.w	800acda <_dtoa_r+0x4f2>
 800abd2:	4b96      	ldr	r3, [pc, #600]	; (800ae2c <_dtoa_r+0x644>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	4640      	mov	r0, r8
 800abd8:	4649      	mov	r1, r9
 800abda:	f7f5 ff9f 	bl	8000b1c <__aeabi_dcmplt>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d07b      	beq.n	800acda <_dtoa_r+0x4f2>
 800abe2:	9b04      	ldr	r3, [sp, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d078      	beq.n	800acda <_dtoa_r+0x4f2>
 800abe8:	9b01      	ldr	r3, [sp, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	dd39      	ble.n	800ac62 <_dtoa_r+0x47a>
 800abee:	4b90      	ldr	r3, [pc, #576]	; (800ae30 <_dtoa_r+0x648>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	f7f5 fd1f 	bl	8000638 <__aeabi_dmul>
 800abfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abfe:	9e01      	ldr	r6, [sp, #4]
 800ac00:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ac04:	3501      	adds	r5, #1
 800ac06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f7f5 fcaa 	bl	8000564 <__aeabi_i2d>
 800ac10:	4642      	mov	r2, r8
 800ac12:	464b      	mov	r3, r9
 800ac14:	f7f5 fd10 	bl	8000638 <__aeabi_dmul>
 800ac18:	4b86      	ldr	r3, [pc, #536]	; (800ae34 <_dtoa_r+0x64c>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f7f5 fb56 	bl	80002cc <__adddf3>
 800ac20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac28:	9303      	str	r3, [sp, #12]
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	d158      	bne.n	800ace0 <_dtoa_r+0x4f8>
 800ac2e:	4b82      	ldr	r3, [pc, #520]	; (800ae38 <_dtoa_r+0x650>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	4640      	mov	r0, r8
 800ac34:	4649      	mov	r1, r9
 800ac36:	f7f5 fb47 	bl	80002c8 <__aeabi_dsub>
 800ac3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac3e:	4680      	mov	r8, r0
 800ac40:	4689      	mov	r9, r1
 800ac42:	f7f5 ff89 	bl	8000b58 <__aeabi_dcmpgt>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f040 8296 	bne.w	800b178 <_dtoa_r+0x990>
 800ac4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ac50:	4640      	mov	r0, r8
 800ac52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac56:	4649      	mov	r1, r9
 800ac58:	f7f5 ff60 	bl	8000b1c <__aeabi_dcmplt>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	f040 8289 	bne.w	800b174 <_dtoa_r+0x98c>
 800ac62:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f2c0 814e 	blt.w	800af0a <_dtoa_r+0x722>
 800ac6e:	f1bb 0f0e 	cmp.w	fp, #14
 800ac72:	f300 814a 	bgt.w	800af0a <_dtoa_r+0x722>
 800ac76:	4b6b      	ldr	r3, [pc, #428]	; (800ae24 <_dtoa_r+0x63c>)
 800ac78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f280 80dc 	bge.w	800ae40 <_dtoa_r+0x658>
 800ac88:	9b04      	ldr	r3, [sp, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f300 80d8 	bgt.w	800ae40 <_dtoa_r+0x658>
 800ac90:	f040 826f 	bne.w	800b172 <_dtoa_r+0x98a>
 800ac94:	4b68      	ldr	r3, [pc, #416]	; (800ae38 <_dtoa_r+0x650>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	4640      	mov	r0, r8
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	f7f5 fccc 	bl	8000638 <__aeabi_dmul>
 800aca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aca4:	f7f5 ff4e 	bl	8000b44 <__aeabi_dcmpge>
 800aca8:	9e04      	ldr	r6, [sp, #16]
 800acaa:	4637      	mov	r7, r6
 800acac:	2800      	cmp	r0, #0
 800acae:	f040 8245 	bne.w	800b13c <_dtoa_r+0x954>
 800acb2:	9d00      	ldr	r5, [sp, #0]
 800acb4:	2331      	movs	r3, #49	; 0x31
 800acb6:	f805 3b01 	strb.w	r3, [r5], #1
 800acba:	f10b 0b01 	add.w	fp, fp, #1
 800acbe:	e241      	b.n	800b144 <_dtoa_r+0x95c>
 800acc0:	07f2      	lsls	r2, r6, #31
 800acc2:	d505      	bpl.n	800acd0 <_dtoa_r+0x4e8>
 800acc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acc8:	f7f5 fcb6 	bl	8000638 <__aeabi_dmul>
 800accc:	3501      	adds	r5, #1
 800acce:	2301      	movs	r3, #1
 800acd0:	1076      	asrs	r6, r6, #1
 800acd2:	3708      	adds	r7, #8
 800acd4:	e773      	b.n	800abbe <_dtoa_r+0x3d6>
 800acd6:	2502      	movs	r5, #2
 800acd8:	e775      	b.n	800abc6 <_dtoa_r+0x3de>
 800acda:	9e04      	ldr	r6, [sp, #16]
 800acdc:	465f      	mov	r7, fp
 800acde:	e792      	b.n	800ac06 <_dtoa_r+0x41e>
 800ace0:	9900      	ldr	r1, [sp, #0]
 800ace2:	4b50      	ldr	r3, [pc, #320]	; (800ae24 <_dtoa_r+0x63c>)
 800ace4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ace8:	4431      	add	r1, r6
 800acea:	9102      	str	r1, [sp, #8]
 800acec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acee:	eeb0 9a47 	vmov.f32	s18, s14
 800acf2:	eef0 9a67 	vmov.f32	s19, s15
 800acf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800acfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acfe:	2900      	cmp	r1, #0
 800ad00:	d044      	beq.n	800ad8c <_dtoa_r+0x5a4>
 800ad02:	494e      	ldr	r1, [pc, #312]	; (800ae3c <_dtoa_r+0x654>)
 800ad04:	2000      	movs	r0, #0
 800ad06:	f7f5 fdc1 	bl	800088c <__aeabi_ddiv>
 800ad0a:	ec53 2b19 	vmov	r2, r3, d9
 800ad0e:	f7f5 fadb 	bl	80002c8 <__aeabi_dsub>
 800ad12:	9d00      	ldr	r5, [sp, #0]
 800ad14:	ec41 0b19 	vmov	d9, r0, r1
 800ad18:	4649      	mov	r1, r9
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	f7f5 ff3c 	bl	8000b98 <__aeabi_d2iz>
 800ad20:	4606      	mov	r6, r0
 800ad22:	f7f5 fc1f 	bl	8000564 <__aeabi_i2d>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4640      	mov	r0, r8
 800ad2c:	4649      	mov	r1, r9
 800ad2e:	f7f5 facb 	bl	80002c8 <__aeabi_dsub>
 800ad32:	3630      	adds	r6, #48	; 0x30
 800ad34:	f805 6b01 	strb.w	r6, [r5], #1
 800ad38:	ec53 2b19 	vmov	r2, r3, d9
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	4689      	mov	r9, r1
 800ad40:	f7f5 feec 	bl	8000b1c <__aeabi_dcmplt>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d164      	bne.n	800ae12 <_dtoa_r+0x62a>
 800ad48:	4642      	mov	r2, r8
 800ad4a:	464b      	mov	r3, r9
 800ad4c:	4937      	ldr	r1, [pc, #220]	; (800ae2c <_dtoa_r+0x644>)
 800ad4e:	2000      	movs	r0, #0
 800ad50:	f7f5 faba 	bl	80002c8 <__aeabi_dsub>
 800ad54:	ec53 2b19 	vmov	r2, r3, d9
 800ad58:	f7f5 fee0 	bl	8000b1c <__aeabi_dcmplt>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	f040 80b6 	bne.w	800aece <_dtoa_r+0x6e6>
 800ad62:	9b02      	ldr	r3, [sp, #8]
 800ad64:	429d      	cmp	r5, r3
 800ad66:	f43f af7c 	beq.w	800ac62 <_dtoa_r+0x47a>
 800ad6a:	4b31      	ldr	r3, [pc, #196]	; (800ae30 <_dtoa_r+0x648>)
 800ad6c:	ec51 0b19 	vmov	r0, r1, d9
 800ad70:	2200      	movs	r2, #0
 800ad72:	f7f5 fc61 	bl	8000638 <__aeabi_dmul>
 800ad76:	4b2e      	ldr	r3, [pc, #184]	; (800ae30 <_dtoa_r+0x648>)
 800ad78:	ec41 0b19 	vmov	d9, r0, r1
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	4640      	mov	r0, r8
 800ad80:	4649      	mov	r1, r9
 800ad82:	f7f5 fc59 	bl	8000638 <__aeabi_dmul>
 800ad86:	4680      	mov	r8, r0
 800ad88:	4689      	mov	r9, r1
 800ad8a:	e7c5      	b.n	800ad18 <_dtoa_r+0x530>
 800ad8c:	ec51 0b17 	vmov	r0, r1, d7
 800ad90:	f7f5 fc52 	bl	8000638 <__aeabi_dmul>
 800ad94:	9b02      	ldr	r3, [sp, #8]
 800ad96:	9d00      	ldr	r5, [sp, #0]
 800ad98:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad9a:	ec41 0b19 	vmov	d9, r0, r1
 800ad9e:	4649      	mov	r1, r9
 800ada0:	4640      	mov	r0, r8
 800ada2:	f7f5 fef9 	bl	8000b98 <__aeabi_d2iz>
 800ada6:	4606      	mov	r6, r0
 800ada8:	f7f5 fbdc 	bl	8000564 <__aeabi_i2d>
 800adac:	3630      	adds	r6, #48	; 0x30
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4640      	mov	r0, r8
 800adb4:	4649      	mov	r1, r9
 800adb6:	f7f5 fa87 	bl	80002c8 <__aeabi_dsub>
 800adba:	f805 6b01 	strb.w	r6, [r5], #1
 800adbe:	9b02      	ldr	r3, [sp, #8]
 800adc0:	429d      	cmp	r5, r3
 800adc2:	4680      	mov	r8, r0
 800adc4:	4689      	mov	r9, r1
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	d124      	bne.n	800ae16 <_dtoa_r+0x62e>
 800adcc:	4b1b      	ldr	r3, [pc, #108]	; (800ae3c <_dtoa_r+0x654>)
 800adce:	ec51 0b19 	vmov	r0, r1, d9
 800add2:	f7f5 fa7b 	bl	80002cc <__adddf3>
 800add6:	4602      	mov	r2, r0
 800add8:	460b      	mov	r3, r1
 800adda:	4640      	mov	r0, r8
 800addc:	4649      	mov	r1, r9
 800adde:	f7f5 febb 	bl	8000b58 <__aeabi_dcmpgt>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d173      	bne.n	800aece <_dtoa_r+0x6e6>
 800ade6:	ec53 2b19 	vmov	r2, r3, d9
 800adea:	4914      	ldr	r1, [pc, #80]	; (800ae3c <_dtoa_r+0x654>)
 800adec:	2000      	movs	r0, #0
 800adee:	f7f5 fa6b 	bl	80002c8 <__aeabi_dsub>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	4640      	mov	r0, r8
 800adf8:	4649      	mov	r1, r9
 800adfa:	f7f5 fe8f 	bl	8000b1c <__aeabi_dcmplt>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f43f af2f 	beq.w	800ac62 <_dtoa_r+0x47a>
 800ae04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae06:	1e6b      	subs	r3, r5, #1
 800ae08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae0e:	2b30      	cmp	r3, #48	; 0x30
 800ae10:	d0f8      	beq.n	800ae04 <_dtoa_r+0x61c>
 800ae12:	46bb      	mov	fp, r7
 800ae14:	e04a      	b.n	800aeac <_dtoa_r+0x6c4>
 800ae16:	4b06      	ldr	r3, [pc, #24]	; (800ae30 <_dtoa_r+0x648>)
 800ae18:	f7f5 fc0e 	bl	8000638 <__aeabi_dmul>
 800ae1c:	4680      	mov	r8, r0
 800ae1e:	4689      	mov	r9, r1
 800ae20:	e7bd      	b.n	800ad9e <_dtoa_r+0x5b6>
 800ae22:	bf00      	nop
 800ae24:	0800eba0 	.word	0x0800eba0
 800ae28:	0800eb78 	.word	0x0800eb78
 800ae2c:	3ff00000 	.word	0x3ff00000
 800ae30:	40240000 	.word	0x40240000
 800ae34:	401c0000 	.word	0x401c0000
 800ae38:	40140000 	.word	0x40140000
 800ae3c:	3fe00000 	.word	0x3fe00000
 800ae40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae44:	9d00      	ldr	r5, [sp, #0]
 800ae46:	4642      	mov	r2, r8
 800ae48:	464b      	mov	r3, r9
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	f7f5 fd1d 	bl	800088c <__aeabi_ddiv>
 800ae52:	f7f5 fea1 	bl	8000b98 <__aeabi_d2iz>
 800ae56:	9001      	str	r0, [sp, #4]
 800ae58:	f7f5 fb84 	bl	8000564 <__aeabi_i2d>
 800ae5c:	4642      	mov	r2, r8
 800ae5e:	464b      	mov	r3, r9
 800ae60:	f7f5 fbea 	bl	8000638 <__aeabi_dmul>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4630      	mov	r0, r6
 800ae6a:	4639      	mov	r1, r7
 800ae6c:	f7f5 fa2c 	bl	80002c8 <__aeabi_dsub>
 800ae70:	9e01      	ldr	r6, [sp, #4]
 800ae72:	9f04      	ldr	r7, [sp, #16]
 800ae74:	3630      	adds	r6, #48	; 0x30
 800ae76:	f805 6b01 	strb.w	r6, [r5], #1
 800ae7a:	9e00      	ldr	r6, [sp, #0]
 800ae7c:	1bae      	subs	r6, r5, r6
 800ae7e:	42b7      	cmp	r7, r6
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	d134      	bne.n	800aef0 <_dtoa_r+0x708>
 800ae86:	f7f5 fa21 	bl	80002cc <__adddf3>
 800ae8a:	4642      	mov	r2, r8
 800ae8c:	464b      	mov	r3, r9
 800ae8e:	4606      	mov	r6, r0
 800ae90:	460f      	mov	r7, r1
 800ae92:	f7f5 fe61 	bl	8000b58 <__aeabi_dcmpgt>
 800ae96:	b9c8      	cbnz	r0, 800aecc <_dtoa_r+0x6e4>
 800ae98:	4642      	mov	r2, r8
 800ae9a:	464b      	mov	r3, r9
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	4639      	mov	r1, r7
 800aea0:	f7f5 fe32 	bl	8000b08 <__aeabi_dcmpeq>
 800aea4:	b110      	cbz	r0, 800aeac <_dtoa_r+0x6c4>
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	07db      	lsls	r3, r3, #31
 800aeaa:	d40f      	bmi.n	800aecc <_dtoa_r+0x6e4>
 800aeac:	4651      	mov	r1, sl
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 fb18 	bl	800b4e4 <_Bfree>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aeb8:	702b      	strb	r3, [r5, #0]
 800aeba:	f10b 0301 	add.w	r3, fp, #1
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f43f ace2 	beq.w	800a88c <_dtoa_r+0xa4>
 800aec8:	601d      	str	r5, [r3, #0]
 800aeca:	e4df      	b.n	800a88c <_dtoa_r+0xa4>
 800aecc:	465f      	mov	r7, fp
 800aece:	462b      	mov	r3, r5
 800aed0:	461d      	mov	r5, r3
 800aed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aed6:	2a39      	cmp	r2, #57	; 0x39
 800aed8:	d106      	bne.n	800aee8 <_dtoa_r+0x700>
 800aeda:	9a00      	ldr	r2, [sp, #0]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d1f7      	bne.n	800aed0 <_dtoa_r+0x6e8>
 800aee0:	9900      	ldr	r1, [sp, #0]
 800aee2:	2230      	movs	r2, #48	; 0x30
 800aee4:	3701      	adds	r7, #1
 800aee6:	700a      	strb	r2, [r1, #0]
 800aee8:	781a      	ldrb	r2, [r3, #0]
 800aeea:	3201      	adds	r2, #1
 800aeec:	701a      	strb	r2, [r3, #0]
 800aeee:	e790      	b.n	800ae12 <_dtoa_r+0x62a>
 800aef0:	4ba3      	ldr	r3, [pc, #652]	; (800b180 <_dtoa_r+0x998>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	f7f5 fba0 	bl	8000638 <__aeabi_dmul>
 800aef8:	2200      	movs	r2, #0
 800aefa:	2300      	movs	r3, #0
 800aefc:	4606      	mov	r6, r0
 800aefe:	460f      	mov	r7, r1
 800af00:	f7f5 fe02 	bl	8000b08 <__aeabi_dcmpeq>
 800af04:	2800      	cmp	r0, #0
 800af06:	d09e      	beq.n	800ae46 <_dtoa_r+0x65e>
 800af08:	e7d0      	b.n	800aeac <_dtoa_r+0x6c4>
 800af0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af0c:	2a00      	cmp	r2, #0
 800af0e:	f000 80ca 	beq.w	800b0a6 <_dtoa_r+0x8be>
 800af12:	9a07      	ldr	r2, [sp, #28]
 800af14:	2a01      	cmp	r2, #1
 800af16:	f300 80ad 	bgt.w	800b074 <_dtoa_r+0x88c>
 800af1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af1c:	2a00      	cmp	r2, #0
 800af1e:	f000 80a5 	beq.w	800b06c <_dtoa_r+0x884>
 800af22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af26:	9e08      	ldr	r6, [sp, #32]
 800af28:	9d05      	ldr	r5, [sp, #20]
 800af2a:	9a05      	ldr	r2, [sp, #20]
 800af2c:	441a      	add	r2, r3
 800af2e:	9205      	str	r2, [sp, #20]
 800af30:	9a06      	ldr	r2, [sp, #24]
 800af32:	2101      	movs	r1, #1
 800af34:	441a      	add	r2, r3
 800af36:	4620      	mov	r0, r4
 800af38:	9206      	str	r2, [sp, #24]
 800af3a:	f000 fb89 	bl	800b650 <__i2b>
 800af3e:	4607      	mov	r7, r0
 800af40:	b165      	cbz	r5, 800af5c <_dtoa_r+0x774>
 800af42:	9b06      	ldr	r3, [sp, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	dd09      	ble.n	800af5c <_dtoa_r+0x774>
 800af48:	42ab      	cmp	r3, r5
 800af4a:	9a05      	ldr	r2, [sp, #20]
 800af4c:	bfa8      	it	ge
 800af4e:	462b      	movge	r3, r5
 800af50:	1ad2      	subs	r2, r2, r3
 800af52:	9205      	str	r2, [sp, #20]
 800af54:	9a06      	ldr	r2, [sp, #24]
 800af56:	1aed      	subs	r5, r5, r3
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	9306      	str	r3, [sp, #24]
 800af5c:	9b08      	ldr	r3, [sp, #32]
 800af5e:	b1f3      	cbz	r3, 800af9e <_dtoa_r+0x7b6>
 800af60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 80a3 	beq.w	800b0ae <_dtoa_r+0x8c6>
 800af68:	2e00      	cmp	r6, #0
 800af6a:	dd10      	ble.n	800af8e <_dtoa_r+0x7a6>
 800af6c:	4639      	mov	r1, r7
 800af6e:	4632      	mov	r2, r6
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fc2d 	bl	800b7d0 <__pow5mult>
 800af76:	4652      	mov	r2, sl
 800af78:	4601      	mov	r1, r0
 800af7a:	4607      	mov	r7, r0
 800af7c:	4620      	mov	r0, r4
 800af7e:	f000 fb7d 	bl	800b67c <__multiply>
 800af82:	4651      	mov	r1, sl
 800af84:	4680      	mov	r8, r0
 800af86:	4620      	mov	r0, r4
 800af88:	f000 faac 	bl	800b4e4 <_Bfree>
 800af8c:	46c2      	mov	sl, r8
 800af8e:	9b08      	ldr	r3, [sp, #32]
 800af90:	1b9a      	subs	r2, r3, r6
 800af92:	d004      	beq.n	800af9e <_dtoa_r+0x7b6>
 800af94:	4651      	mov	r1, sl
 800af96:	4620      	mov	r0, r4
 800af98:	f000 fc1a 	bl	800b7d0 <__pow5mult>
 800af9c:	4682      	mov	sl, r0
 800af9e:	2101      	movs	r1, #1
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 fb55 	bl	800b650 <__i2b>
 800afa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	4606      	mov	r6, r0
 800afac:	f340 8081 	ble.w	800b0b2 <_dtoa_r+0x8ca>
 800afb0:	461a      	mov	r2, r3
 800afb2:	4601      	mov	r1, r0
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 fc0b 	bl	800b7d0 <__pow5mult>
 800afba:	9b07      	ldr	r3, [sp, #28]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	4606      	mov	r6, r0
 800afc0:	dd7a      	ble.n	800b0b8 <_dtoa_r+0x8d0>
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	6933      	ldr	r3, [r6, #16]
 800afc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800afcc:	6918      	ldr	r0, [r3, #16]
 800afce:	f000 faf1 	bl	800b5b4 <__hi0bits>
 800afd2:	f1c0 0020 	rsb	r0, r0, #32
 800afd6:	9b06      	ldr	r3, [sp, #24]
 800afd8:	4418      	add	r0, r3
 800afda:	f010 001f 	ands.w	r0, r0, #31
 800afde:	f000 8094 	beq.w	800b10a <_dtoa_r+0x922>
 800afe2:	f1c0 0320 	rsb	r3, r0, #32
 800afe6:	2b04      	cmp	r3, #4
 800afe8:	f340 8085 	ble.w	800b0f6 <_dtoa_r+0x90e>
 800afec:	9b05      	ldr	r3, [sp, #20]
 800afee:	f1c0 001c 	rsb	r0, r0, #28
 800aff2:	4403      	add	r3, r0
 800aff4:	9305      	str	r3, [sp, #20]
 800aff6:	9b06      	ldr	r3, [sp, #24]
 800aff8:	4403      	add	r3, r0
 800affa:	4405      	add	r5, r0
 800affc:	9306      	str	r3, [sp, #24]
 800affe:	9b05      	ldr	r3, [sp, #20]
 800b000:	2b00      	cmp	r3, #0
 800b002:	dd05      	ble.n	800b010 <_dtoa_r+0x828>
 800b004:	4651      	mov	r1, sl
 800b006:	461a      	mov	r2, r3
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 fc3b 	bl	800b884 <__lshift>
 800b00e:	4682      	mov	sl, r0
 800b010:	9b06      	ldr	r3, [sp, #24]
 800b012:	2b00      	cmp	r3, #0
 800b014:	dd05      	ble.n	800b022 <_dtoa_r+0x83a>
 800b016:	4631      	mov	r1, r6
 800b018:	461a      	mov	r2, r3
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 fc32 	bl	800b884 <__lshift>
 800b020:	4606      	mov	r6, r0
 800b022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b024:	2b00      	cmp	r3, #0
 800b026:	d072      	beq.n	800b10e <_dtoa_r+0x926>
 800b028:	4631      	mov	r1, r6
 800b02a:	4650      	mov	r0, sl
 800b02c:	f000 fc96 	bl	800b95c <__mcmp>
 800b030:	2800      	cmp	r0, #0
 800b032:	da6c      	bge.n	800b10e <_dtoa_r+0x926>
 800b034:	2300      	movs	r3, #0
 800b036:	4651      	mov	r1, sl
 800b038:	220a      	movs	r2, #10
 800b03a:	4620      	mov	r0, r4
 800b03c:	f000 fa74 	bl	800b528 <__multadd>
 800b040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b042:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b046:	4682      	mov	sl, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f000 81b0 	beq.w	800b3ae <_dtoa_r+0xbc6>
 800b04e:	2300      	movs	r3, #0
 800b050:	4639      	mov	r1, r7
 800b052:	220a      	movs	r2, #10
 800b054:	4620      	mov	r0, r4
 800b056:	f000 fa67 	bl	800b528 <__multadd>
 800b05a:	9b01      	ldr	r3, [sp, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	4607      	mov	r7, r0
 800b060:	f300 8096 	bgt.w	800b190 <_dtoa_r+0x9a8>
 800b064:	9b07      	ldr	r3, [sp, #28]
 800b066:	2b02      	cmp	r3, #2
 800b068:	dc59      	bgt.n	800b11e <_dtoa_r+0x936>
 800b06a:	e091      	b.n	800b190 <_dtoa_r+0x9a8>
 800b06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b06e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b072:	e758      	b.n	800af26 <_dtoa_r+0x73e>
 800b074:	9b04      	ldr	r3, [sp, #16]
 800b076:	1e5e      	subs	r6, r3, #1
 800b078:	9b08      	ldr	r3, [sp, #32]
 800b07a:	42b3      	cmp	r3, r6
 800b07c:	bfbf      	itttt	lt
 800b07e:	9b08      	ldrlt	r3, [sp, #32]
 800b080:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b082:	9608      	strlt	r6, [sp, #32]
 800b084:	1af3      	sublt	r3, r6, r3
 800b086:	bfb4      	ite	lt
 800b088:	18d2      	addlt	r2, r2, r3
 800b08a:	1b9e      	subge	r6, r3, r6
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	bfbc      	itt	lt
 800b090:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b092:	2600      	movlt	r6, #0
 800b094:	2b00      	cmp	r3, #0
 800b096:	bfb7      	itett	lt
 800b098:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b09c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b0a0:	1a9d      	sublt	r5, r3, r2
 800b0a2:	2300      	movlt	r3, #0
 800b0a4:	e741      	b.n	800af2a <_dtoa_r+0x742>
 800b0a6:	9e08      	ldr	r6, [sp, #32]
 800b0a8:	9d05      	ldr	r5, [sp, #20]
 800b0aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b0ac:	e748      	b.n	800af40 <_dtoa_r+0x758>
 800b0ae:	9a08      	ldr	r2, [sp, #32]
 800b0b0:	e770      	b.n	800af94 <_dtoa_r+0x7ac>
 800b0b2:	9b07      	ldr	r3, [sp, #28]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	dc19      	bgt.n	800b0ec <_dtoa_r+0x904>
 800b0b8:	9b02      	ldr	r3, [sp, #8]
 800b0ba:	b9bb      	cbnz	r3, 800b0ec <_dtoa_r+0x904>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0c2:	b99b      	cbnz	r3, 800b0ec <_dtoa_r+0x904>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0ca:	0d1b      	lsrs	r3, r3, #20
 800b0cc:	051b      	lsls	r3, r3, #20
 800b0ce:	b183      	cbz	r3, 800b0f2 <_dtoa_r+0x90a>
 800b0d0:	9b05      	ldr	r3, [sp, #20]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	9b06      	ldr	r3, [sp, #24]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	9306      	str	r3, [sp, #24]
 800b0dc:	f04f 0801 	mov.w	r8, #1
 800b0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f47f af6f 	bne.w	800afc6 <_dtoa_r+0x7de>
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	e774      	b.n	800afd6 <_dtoa_r+0x7ee>
 800b0ec:	f04f 0800 	mov.w	r8, #0
 800b0f0:	e7f6      	b.n	800b0e0 <_dtoa_r+0x8f8>
 800b0f2:	4698      	mov	r8, r3
 800b0f4:	e7f4      	b.n	800b0e0 <_dtoa_r+0x8f8>
 800b0f6:	d082      	beq.n	800affe <_dtoa_r+0x816>
 800b0f8:	9a05      	ldr	r2, [sp, #20]
 800b0fa:	331c      	adds	r3, #28
 800b0fc:	441a      	add	r2, r3
 800b0fe:	9205      	str	r2, [sp, #20]
 800b100:	9a06      	ldr	r2, [sp, #24]
 800b102:	441a      	add	r2, r3
 800b104:	441d      	add	r5, r3
 800b106:	9206      	str	r2, [sp, #24]
 800b108:	e779      	b.n	800affe <_dtoa_r+0x816>
 800b10a:	4603      	mov	r3, r0
 800b10c:	e7f4      	b.n	800b0f8 <_dtoa_r+0x910>
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	dc37      	bgt.n	800b184 <_dtoa_r+0x99c>
 800b114:	9b07      	ldr	r3, [sp, #28]
 800b116:	2b02      	cmp	r3, #2
 800b118:	dd34      	ble.n	800b184 <_dtoa_r+0x99c>
 800b11a:	9b04      	ldr	r3, [sp, #16]
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	9b01      	ldr	r3, [sp, #4]
 800b120:	b963      	cbnz	r3, 800b13c <_dtoa_r+0x954>
 800b122:	4631      	mov	r1, r6
 800b124:	2205      	movs	r2, #5
 800b126:	4620      	mov	r0, r4
 800b128:	f000 f9fe 	bl	800b528 <__multadd>
 800b12c:	4601      	mov	r1, r0
 800b12e:	4606      	mov	r6, r0
 800b130:	4650      	mov	r0, sl
 800b132:	f000 fc13 	bl	800b95c <__mcmp>
 800b136:	2800      	cmp	r0, #0
 800b138:	f73f adbb 	bgt.w	800acb2 <_dtoa_r+0x4ca>
 800b13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b13e:	9d00      	ldr	r5, [sp, #0]
 800b140:	ea6f 0b03 	mvn.w	fp, r3
 800b144:	f04f 0800 	mov.w	r8, #0
 800b148:	4631      	mov	r1, r6
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 f9ca 	bl	800b4e4 <_Bfree>
 800b150:	2f00      	cmp	r7, #0
 800b152:	f43f aeab 	beq.w	800aeac <_dtoa_r+0x6c4>
 800b156:	f1b8 0f00 	cmp.w	r8, #0
 800b15a:	d005      	beq.n	800b168 <_dtoa_r+0x980>
 800b15c:	45b8      	cmp	r8, r7
 800b15e:	d003      	beq.n	800b168 <_dtoa_r+0x980>
 800b160:	4641      	mov	r1, r8
 800b162:	4620      	mov	r0, r4
 800b164:	f000 f9be 	bl	800b4e4 <_Bfree>
 800b168:	4639      	mov	r1, r7
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 f9ba 	bl	800b4e4 <_Bfree>
 800b170:	e69c      	b.n	800aeac <_dtoa_r+0x6c4>
 800b172:	2600      	movs	r6, #0
 800b174:	4637      	mov	r7, r6
 800b176:	e7e1      	b.n	800b13c <_dtoa_r+0x954>
 800b178:	46bb      	mov	fp, r7
 800b17a:	4637      	mov	r7, r6
 800b17c:	e599      	b.n	800acb2 <_dtoa_r+0x4ca>
 800b17e:	bf00      	nop
 800b180:	40240000 	.word	0x40240000
 800b184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 80c8 	beq.w	800b31c <_dtoa_r+0xb34>
 800b18c:	9b04      	ldr	r3, [sp, #16]
 800b18e:	9301      	str	r3, [sp, #4]
 800b190:	2d00      	cmp	r5, #0
 800b192:	dd05      	ble.n	800b1a0 <_dtoa_r+0x9b8>
 800b194:	4639      	mov	r1, r7
 800b196:	462a      	mov	r2, r5
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 fb73 	bl	800b884 <__lshift>
 800b19e:	4607      	mov	r7, r0
 800b1a0:	f1b8 0f00 	cmp.w	r8, #0
 800b1a4:	d05b      	beq.n	800b25e <_dtoa_r+0xa76>
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 f95b 	bl	800b464 <_Balloc>
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	b928      	cbnz	r0, 800b1be <_dtoa_r+0x9d6>
 800b1b2:	4b83      	ldr	r3, [pc, #524]	; (800b3c0 <_dtoa_r+0xbd8>)
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b1ba:	f7ff bb2e 	b.w	800a81a <_dtoa_r+0x32>
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	3202      	adds	r2, #2
 800b1c2:	0092      	lsls	r2, r2, #2
 800b1c4:	f107 010c 	add.w	r1, r7, #12
 800b1c8:	300c      	adds	r0, #12
 800b1ca:	f000 ff3d 	bl	800c048 <memcpy>
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 fb56 	bl	800b884 <__lshift>
 800b1d8:	9b00      	ldr	r3, [sp, #0]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	9304      	str	r3, [sp, #16]
 800b1de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	9308      	str	r3, [sp, #32]
 800b1e6:	9b02      	ldr	r3, [sp, #8]
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	46b8      	mov	r8, r7
 800b1ee:	9306      	str	r3, [sp, #24]
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	9b04      	ldr	r3, [sp, #16]
 800b1f4:	4631      	mov	r1, r6
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	4650      	mov	r0, sl
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	f7ff fa6c 	bl	800a6d8 <quorem>
 800b200:	4641      	mov	r1, r8
 800b202:	9002      	str	r0, [sp, #8]
 800b204:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b208:	4650      	mov	r0, sl
 800b20a:	f000 fba7 	bl	800b95c <__mcmp>
 800b20e:	463a      	mov	r2, r7
 800b210:	9005      	str	r0, [sp, #20]
 800b212:	4631      	mov	r1, r6
 800b214:	4620      	mov	r0, r4
 800b216:	f000 fbbd 	bl	800b994 <__mdiff>
 800b21a:	68c2      	ldr	r2, [r0, #12]
 800b21c:	4605      	mov	r5, r0
 800b21e:	bb02      	cbnz	r2, 800b262 <_dtoa_r+0xa7a>
 800b220:	4601      	mov	r1, r0
 800b222:	4650      	mov	r0, sl
 800b224:	f000 fb9a 	bl	800b95c <__mcmp>
 800b228:	4602      	mov	r2, r0
 800b22a:	4629      	mov	r1, r5
 800b22c:	4620      	mov	r0, r4
 800b22e:	9209      	str	r2, [sp, #36]	; 0x24
 800b230:	f000 f958 	bl	800b4e4 <_Bfree>
 800b234:	9b07      	ldr	r3, [sp, #28]
 800b236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b238:	9d04      	ldr	r5, [sp, #16]
 800b23a:	ea43 0102 	orr.w	r1, r3, r2
 800b23e:	9b06      	ldr	r3, [sp, #24]
 800b240:	4319      	orrs	r1, r3
 800b242:	d110      	bne.n	800b266 <_dtoa_r+0xa7e>
 800b244:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b248:	d029      	beq.n	800b29e <_dtoa_r+0xab6>
 800b24a:	9b05      	ldr	r3, [sp, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	dd02      	ble.n	800b256 <_dtoa_r+0xa6e>
 800b250:	9b02      	ldr	r3, [sp, #8]
 800b252:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b256:	9b01      	ldr	r3, [sp, #4]
 800b258:	f883 9000 	strb.w	r9, [r3]
 800b25c:	e774      	b.n	800b148 <_dtoa_r+0x960>
 800b25e:	4638      	mov	r0, r7
 800b260:	e7ba      	b.n	800b1d8 <_dtoa_r+0x9f0>
 800b262:	2201      	movs	r2, #1
 800b264:	e7e1      	b.n	800b22a <_dtoa_r+0xa42>
 800b266:	9b05      	ldr	r3, [sp, #20]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	db04      	blt.n	800b276 <_dtoa_r+0xa8e>
 800b26c:	9907      	ldr	r1, [sp, #28]
 800b26e:	430b      	orrs	r3, r1
 800b270:	9906      	ldr	r1, [sp, #24]
 800b272:	430b      	orrs	r3, r1
 800b274:	d120      	bne.n	800b2b8 <_dtoa_r+0xad0>
 800b276:	2a00      	cmp	r2, #0
 800b278:	dded      	ble.n	800b256 <_dtoa_r+0xa6e>
 800b27a:	4651      	mov	r1, sl
 800b27c:	2201      	movs	r2, #1
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fb00 	bl	800b884 <__lshift>
 800b284:	4631      	mov	r1, r6
 800b286:	4682      	mov	sl, r0
 800b288:	f000 fb68 	bl	800b95c <__mcmp>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	dc03      	bgt.n	800b298 <_dtoa_r+0xab0>
 800b290:	d1e1      	bne.n	800b256 <_dtoa_r+0xa6e>
 800b292:	f019 0f01 	tst.w	r9, #1
 800b296:	d0de      	beq.n	800b256 <_dtoa_r+0xa6e>
 800b298:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b29c:	d1d8      	bne.n	800b250 <_dtoa_r+0xa68>
 800b29e:	9a01      	ldr	r2, [sp, #4]
 800b2a0:	2339      	movs	r3, #57	; 0x39
 800b2a2:	7013      	strb	r3, [r2, #0]
 800b2a4:	462b      	mov	r3, r5
 800b2a6:	461d      	mov	r5, r3
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b2ae:	2a39      	cmp	r2, #57	; 0x39
 800b2b0:	d06c      	beq.n	800b38c <_dtoa_r+0xba4>
 800b2b2:	3201      	adds	r2, #1
 800b2b4:	701a      	strb	r2, [r3, #0]
 800b2b6:	e747      	b.n	800b148 <_dtoa_r+0x960>
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	dd07      	ble.n	800b2cc <_dtoa_r+0xae4>
 800b2bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2c0:	d0ed      	beq.n	800b29e <_dtoa_r+0xab6>
 800b2c2:	9a01      	ldr	r2, [sp, #4]
 800b2c4:	f109 0301 	add.w	r3, r9, #1
 800b2c8:	7013      	strb	r3, [r2, #0]
 800b2ca:	e73d      	b.n	800b148 <_dtoa_r+0x960>
 800b2cc:	9b04      	ldr	r3, [sp, #16]
 800b2ce:	9a08      	ldr	r2, [sp, #32]
 800b2d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d043      	beq.n	800b360 <_dtoa_r+0xb78>
 800b2d8:	4651      	mov	r1, sl
 800b2da:	2300      	movs	r3, #0
 800b2dc:	220a      	movs	r2, #10
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f000 f922 	bl	800b528 <__multadd>
 800b2e4:	45b8      	cmp	r8, r7
 800b2e6:	4682      	mov	sl, r0
 800b2e8:	f04f 0300 	mov.w	r3, #0
 800b2ec:	f04f 020a 	mov.w	r2, #10
 800b2f0:	4641      	mov	r1, r8
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	d107      	bne.n	800b306 <_dtoa_r+0xb1e>
 800b2f6:	f000 f917 	bl	800b528 <__multadd>
 800b2fa:	4680      	mov	r8, r0
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	9b04      	ldr	r3, [sp, #16]
 800b300:	3301      	adds	r3, #1
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	e775      	b.n	800b1f2 <_dtoa_r+0xa0a>
 800b306:	f000 f90f 	bl	800b528 <__multadd>
 800b30a:	4639      	mov	r1, r7
 800b30c:	4680      	mov	r8, r0
 800b30e:	2300      	movs	r3, #0
 800b310:	220a      	movs	r2, #10
 800b312:	4620      	mov	r0, r4
 800b314:	f000 f908 	bl	800b528 <__multadd>
 800b318:	4607      	mov	r7, r0
 800b31a:	e7f0      	b.n	800b2fe <_dtoa_r+0xb16>
 800b31c:	9b04      	ldr	r3, [sp, #16]
 800b31e:	9301      	str	r3, [sp, #4]
 800b320:	9d00      	ldr	r5, [sp, #0]
 800b322:	4631      	mov	r1, r6
 800b324:	4650      	mov	r0, sl
 800b326:	f7ff f9d7 	bl	800a6d8 <quorem>
 800b32a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b32e:	9b00      	ldr	r3, [sp, #0]
 800b330:	f805 9b01 	strb.w	r9, [r5], #1
 800b334:	1aea      	subs	r2, r5, r3
 800b336:	9b01      	ldr	r3, [sp, #4]
 800b338:	4293      	cmp	r3, r2
 800b33a:	dd07      	ble.n	800b34c <_dtoa_r+0xb64>
 800b33c:	4651      	mov	r1, sl
 800b33e:	2300      	movs	r3, #0
 800b340:	220a      	movs	r2, #10
 800b342:	4620      	mov	r0, r4
 800b344:	f000 f8f0 	bl	800b528 <__multadd>
 800b348:	4682      	mov	sl, r0
 800b34a:	e7ea      	b.n	800b322 <_dtoa_r+0xb3a>
 800b34c:	9b01      	ldr	r3, [sp, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	bfc8      	it	gt
 800b352:	461d      	movgt	r5, r3
 800b354:	9b00      	ldr	r3, [sp, #0]
 800b356:	bfd8      	it	le
 800b358:	2501      	movle	r5, #1
 800b35a:	441d      	add	r5, r3
 800b35c:	f04f 0800 	mov.w	r8, #0
 800b360:	4651      	mov	r1, sl
 800b362:	2201      	movs	r2, #1
 800b364:	4620      	mov	r0, r4
 800b366:	f000 fa8d 	bl	800b884 <__lshift>
 800b36a:	4631      	mov	r1, r6
 800b36c:	4682      	mov	sl, r0
 800b36e:	f000 faf5 	bl	800b95c <__mcmp>
 800b372:	2800      	cmp	r0, #0
 800b374:	dc96      	bgt.n	800b2a4 <_dtoa_r+0xabc>
 800b376:	d102      	bne.n	800b37e <_dtoa_r+0xb96>
 800b378:	f019 0f01 	tst.w	r9, #1
 800b37c:	d192      	bne.n	800b2a4 <_dtoa_r+0xabc>
 800b37e:	462b      	mov	r3, r5
 800b380:	461d      	mov	r5, r3
 800b382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b386:	2a30      	cmp	r2, #48	; 0x30
 800b388:	d0fa      	beq.n	800b380 <_dtoa_r+0xb98>
 800b38a:	e6dd      	b.n	800b148 <_dtoa_r+0x960>
 800b38c:	9a00      	ldr	r2, [sp, #0]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d189      	bne.n	800b2a6 <_dtoa_r+0xabe>
 800b392:	f10b 0b01 	add.w	fp, fp, #1
 800b396:	2331      	movs	r3, #49	; 0x31
 800b398:	e796      	b.n	800b2c8 <_dtoa_r+0xae0>
 800b39a:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <_dtoa_r+0xbdc>)
 800b39c:	f7ff ba99 	b.w	800a8d2 <_dtoa_r+0xea>
 800b3a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f47f aa6d 	bne.w	800a882 <_dtoa_r+0x9a>
 800b3a8:	4b07      	ldr	r3, [pc, #28]	; (800b3c8 <_dtoa_r+0xbe0>)
 800b3aa:	f7ff ba92 	b.w	800a8d2 <_dtoa_r+0xea>
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	dcb5      	bgt.n	800b320 <_dtoa_r+0xb38>
 800b3b4:	9b07      	ldr	r3, [sp, #28]
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	f73f aeb1 	bgt.w	800b11e <_dtoa_r+0x936>
 800b3bc:	e7b0      	b.n	800b320 <_dtoa_r+0xb38>
 800b3be:	bf00      	nop
 800b3c0:	0800eb0c 	.word	0x0800eb0c
 800b3c4:	0800ea6c 	.word	0x0800ea6c
 800b3c8:	0800ea90 	.word	0x0800ea90

0800b3cc <_free_r>:
 800b3cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ce:	2900      	cmp	r1, #0
 800b3d0:	d044      	beq.n	800b45c <_free_r+0x90>
 800b3d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d6:	9001      	str	r0, [sp, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f1a1 0404 	sub.w	r4, r1, #4
 800b3de:	bfb8      	it	lt
 800b3e0:	18e4      	addlt	r4, r4, r3
 800b3e2:	f7fe fa83 	bl	80098ec <__malloc_lock>
 800b3e6:	4a1e      	ldr	r2, [pc, #120]	; (800b460 <_free_r+0x94>)
 800b3e8:	9801      	ldr	r0, [sp, #4]
 800b3ea:	6813      	ldr	r3, [r2, #0]
 800b3ec:	b933      	cbnz	r3, 800b3fc <_free_r+0x30>
 800b3ee:	6063      	str	r3, [r4, #4]
 800b3f0:	6014      	str	r4, [r2, #0]
 800b3f2:	b003      	add	sp, #12
 800b3f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3f8:	f7fe ba7e 	b.w	80098f8 <__malloc_unlock>
 800b3fc:	42a3      	cmp	r3, r4
 800b3fe:	d908      	bls.n	800b412 <_free_r+0x46>
 800b400:	6825      	ldr	r5, [r4, #0]
 800b402:	1961      	adds	r1, r4, r5
 800b404:	428b      	cmp	r3, r1
 800b406:	bf01      	itttt	eq
 800b408:	6819      	ldreq	r1, [r3, #0]
 800b40a:	685b      	ldreq	r3, [r3, #4]
 800b40c:	1949      	addeq	r1, r1, r5
 800b40e:	6021      	streq	r1, [r4, #0]
 800b410:	e7ed      	b.n	800b3ee <_free_r+0x22>
 800b412:	461a      	mov	r2, r3
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	b10b      	cbz	r3, 800b41c <_free_r+0x50>
 800b418:	42a3      	cmp	r3, r4
 800b41a:	d9fa      	bls.n	800b412 <_free_r+0x46>
 800b41c:	6811      	ldr	r1, [r2, #0]
 800b41e:	1855      	adds	r5, r2, r1
 800b420:	42a5      	cmp	r5, r4
 800b422:	d10b      	bne.n	800b43c <_free_r+0x70>
 800b424:	6824      	ldr	r4, [r4, #0]
 800b426:	4421      	add	r1, r4
 800b428:	1854      	adds	r4, r2, r1
 800b42a:	42a3      	cmp	r3, r4
 800b42c:	6011      	str	r1, [r2, #0]
 800b42e:	d1e0      	bne.n	800b3f2 <_free_r+0x26>
 800b430:	681c      	ldr	r4, [r3, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	6053      	str	r3, [r2, #4]
 800b436:	440c      	add	r4, r1
 800b438:	6014      	str	r4, [r2, #0]
 800b43a:	e7da      	b.n	800b3f2 <_free_r+0x26>
 800b43c:	d902      	bls.n	800b444 <_free_r+0x78>
 800b43e:	230c      	movs	r3, #12
 800b440:	6003      	str	r3, [r0, #0]
 800b442:	e7d6      	b.n	800b3f2 <_free_r+0x26>
 800b444:	6825      	ldr	r5, [r4, #0]
 800b446:	1961      	adds	r1, r4, r5
 800b448:	428b      	cmp	r3, r1
 800b44a:	bf04      	itt	eq
 800b44c:	6819      	ldreq	r1, [r3, #0]
 800b44e:	685b      	ldreq	r3, [r3, #4]
 800b450:	6063      	str	r3, [r4, #4]
 800b452:	bf04      	itt	eq
 800b454:	1949      	addeq	r1, r1, r5
 800b456:	6021      	streq	r1, [r4, #0]
 800b458:	6054      	str	r4, [r2, #4]
 800b45a:	e7ca      	b.n	800b3f2 <_free_r+0x26>
 800b45c:	b003      	add	sp, #12
 800b45e:	bd30      	pop	{r4, r5, pc}
 800b460:	20001954 	.word	0x20001954

0800b464 <_Balloc>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	69c6      	ldr	r6, [r0, #28]
 800b468:	4604      	mov	r4, r0
 800b46a:	460d      	mov	r5, r1
 800b46c:	b976      	cbnz	r6, 800b48c <_Balloc+0x28>
 800b46e:	2010      	movs	r0, #16
 800b470:	f7fe f994 	bl	800979c <malloc>
 800b474:	4602      	mov	r2, r0
 800b476:	61e0      	str	r0, [r4, #28]
 800b478:	b920      	cbnz	r0, 800b484 <_Balloc+0x20>
 800b47a:	4b18      	ldr	r3, [pc, #96]	; (800b4dc <_Balloc+0x78>)
 800b47c:	4818      	ldr	r0, [pc, #96]	; (800b4e0 <_Balloc+0x7c>)
 800b47e:	216b      	movs	r1, #107	; 0x6b
 800b480:	f000 fdf0 	bl	800c064 <__assert_func>
 800b484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b488:	6006      	str	r6, [r0, #0]
 800b48a:	60c6      	str	r6, [r0, #12]
 800b48c:	69e6      	ldr	r6, [r4, #28]
 800b48e:	68f3      	ldr	r3, [r6, #12]
 800b490:	b183      	cbz	r3, 800b4b4 <_Balloc+0x50>
 800b492:	69e3      	ldr	r3, [r4, #28]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b49a:	b9b8      	cbnz	r0, 800b4cc <_Balloc+0x68>
 800b49c:	2101      	movs	r1, #1
 800b49e:	fa01 f605 	lsl.w	r6, r1, r5
 800b4a2:	1d72      	adds	r2, r6, #5
 800b4a4:	0092      	lsls	r2, r2, #2
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f7fe f962 	bl	8009770 <_calloc_r>
 800b4ac:	b160      	cbz	r0, 800b4c8 <_Balloc+0x64>
 800b4ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4b2:	e00e      	b.n	800b4d2 <_Balloc+0x6e>
 800b4b4:	2221      	movs	r2, #33	; 0x21
 800b4b6:	2104      	movs	r1, #4
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7fe f959 	bl	8009770 <_calloc_r>
 800b4be:	69e3      	ldr	r3, [r4, #28]
 800b4c0:	60f0      	str	r0, [r6, #12]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1e4      	bne.n	800b492 <_Balloc+0x2e>
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}
 800b4cc:	6802      	ldr	r2, [r0, #0]
 800b4ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4d8:	e7f7      	b.n	800b4ca <_Balloc+0x66>
 800b4da:	bf00      	nop
 800b4dc:	0800ea9d 	.word	0x0800ea9d
 800b4e0:	0800eb1d 	.word	0x0800eb1d

0800b4e4 <_Bfree>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	69c6      	ldr	r6, [r0, #28]
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	b976      	cbnz	r6, 800b50c <_Bfree+0x28>
 800b4ee:	2010      	movs	r0, #16
 800b4f0:	f7fe f954 	bl	800979c <malloc>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	61e8      	str	r0, [r5, #28]
 800b4f8:	b920      	cbnz	r0, 800b504 <_Bfree+0x20>
 800b4fa:	4b09      	ldr	r3, [pc, #36]	; (800b520 <_Bfree+0x3c>)
 800b4fc:	4809      	ldr	r0, [pc, #36]	; (800b524 <_Bfree+0x40>)
 800b4fe:	218f      	movs	r1, #143	; 0x8f
 800b500:	f000 fdb0 	bl	800c064 <__assert_func>
 800b504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b508:	6006      	str	r6, [r0, #0]
 800b50a:	60c6      	str	r6, [r0, #12]
 800b50c:	b13c      	cbz	r4, 800b51e <_Bfree+0x3a>
 800b50e:	69eb      	ldr	r3, [r5, #28]
 800b510:	6862      	ldr	r2, [r4, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b518:	6021      	str	r1, [r4, #0]
 800b51a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
 800b520:	0800ea9d 	.word	0x0800ea9d
 800b524:	0800eb1d 	.word	0x0800eb1d

0800b528 <__multadd>:
 800b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52c:	690d      	ldr	r5, [r1, #16]
 800b52e:	4607      	mov	r7, r0
 800b530:	460c      	mov	r4, r1
 800b532:	461e      	mov	r6, r3
 800b534:	f101 0c14 	add.w	ip, r1, #20
 800b538:	2000      	movs	r0, #0
 800b53a:	f8dc 3000 	ldr.w	r3, [ip]
 800b53e:	b299      	uxth	r1, r3
 800b540:	fb02 6101 	mla	r1, r2, r1, r6
 800b544:	0c1e      	lsrs	r6, r3, #16
 800b546:	0c0b      	lsrs	r3, r1, #16
 800b548:	fb02 3306 	mla	r3, r2, r6, r3
 800b54c:	b289      	uxth	r1, r1
 800b54e:	3001      	adds	r0, #1
 800b550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b554:	4285      	cmp	r5, r0
 800b556:	f84c 1b04 	str.w	r1, [ip], #4
 800b55a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b55e:	dcec      	bgt.n	800b53a <__multadd+0x12>
 800b560:	b30e      	cbz	r6, 800b5a6 <__multadd+0x7e>
 800b562:	68a3      	ldr	r3, [r4, #8]
 800b564:	42ab      	cmp	r3, r5
 800b566:	dc19      	bgt.n	800b59c <__multadd+0x74>
 800b568:	6861      	ldr	r1, [r4, #4]
 800b56a:	4638      	mov	r0, r7
 800b56c:	3101      	adds	r1, #1
 800b56e:	f7ff ff79 	bl	800b464 <_Balloc>
 800b572:	4680      	mov	r8, r0
 800b574:	b928      	cbnz	r0, 800b582 <__multadd+0x5a>
 800b576:	4602      	mov	r2, r0
 800b578:	4b0c      	ldr	r3, [pc, #48]	; (800b5ac <__multadd+0x84>)
 800b57a:	480d      	ldr	r0, [pc, #52]	; (800b5b0 <__multadd+0x88>)
 800b57c:	21ba      	movs	r1, #186	; 0xba
 800b57e:	f000 fd71 	bl	800c064 <__assert_func>
 800b582:	6922      	ldr	r2, [r4, #16]
 800b584:	3202      	adds	r2, #2
 800b586:	f104 010c 	add.w	r1, r4, #12
 800b58a:	0092      	lsls	r2, r2, #2
 800b58c:	300c      	adds	r0, #12
 800b58e:	f000 fd5b 	bl	800c048 <memcpy>
 800b592:	4621      	mov	r1, r4
 800b594:	4638      	mov	r0, r7
 800b596:	f7ff ffa5 	bl	800b4e4 <_Bfree>
 800b59a:	4644      	mov	r4, r8
 800b59c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5a0:	3501      	adds	r5, #1
 800b5a2:	615e      	str	r6, [r3, #20]
 800b5a4:	6125      	str	r5, [r4, #16]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ac:	0800eb0c 	.word	0x0800eb0c
 800b5b0:	0800eb1d 	.word	0x0800eb1d

0800b5b4 <__hi0bits>:
 800b5b4:	0c03      	lsrs	r3, r0, #16
 800b5b6:	041b      	lsls	r3, r3, #16
 800b5b8:	b9d3      	cbnz	r3, 800b5f0 <__hi0bits+0x3c>
 800b5ba:	0400      	lsls	r0, r0, #16
 800b5bc:	2310      	movs	r3, #16
 800b5be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b5c2:	bf04      	itt	eq
 800b5c4:	0200      	lsleq	r0, r0, #8
 800b5c6:	3308      	addeq	r3, #8
 800b5c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5cc:	bf04      	itt	eq
 800b5ce:	0100      	lsleq	r0, r0, #4
 800b5d0:	3304      	addeq	r3, #4
 800b5d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b5d6:	bf04      	itt	eq
 800b5d8:	0080      	lsleq	r0, r0, #2
 800b5da:	3302      	addeq	r3, #2
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	db05      	blt.n	800b5ec <__hi0bits+0x38>
 800b5e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b5e4:	f103 0301 	add.w	r3, r3, #1
 800b5e8:	bf08      	it	eq
 800b5ea:	2320      	moveq	r3, #32
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	4770      	bx	lr
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	e7e4      	b.n	800b5be <__hi0bits+0xa>

0800b5f4 <__lo0bits>:
 800b5f4:	6803      	ldr	r3, [r0, #0]
 800b5f6:	f013 0207 	ands.w	r2, r3, #7
 800b5fa:	d00c      	beq.n	800b616 <__lo0bits+0x22>
 800b5fc:	07d9      	lsls	r1, r3, #31
 800b5fe:	d422      	bmi.n	800b646 <__lo0bits+0x52>
 800b600:	079a      	lsls	r2, r3, #30
 800b602:	bf49      	itett	mi
 800b604:	085b      	lsrmi	r3, r3, #1
 800b606:	089b      	lsrpl	r3, r3, #2
 800b608:	6003      	strmi	r3, [r0, #0]
 800b60a:	2201      	movmi	r2, #1
 800b60c:	bf5c      	itt	pl
 800b60e:	6003      	strpl	r3, [r0, #0]
 800b610:	2202      	movpl	r2, #2
 800b612:	4610      	mov	r0, r2
 800b614:	4770      	bx	lr
 800b616:	b299      	uxth	r1, r3
 800b618:	b909      	cbnz	r1, 800b61e <__lo0bits+0x2a>
 800b61a:	0c1b      	lsrs	r3, r3, #16
 800b61c:	2210      	movs	r2, #16
 800b61e:	b2d9      	uxtb	r1, r3
 800b620:	b909      	cbnz	r1, 800b626 <__lo0bits+0x32>
 800b622:	3208      	adds	r2, #8
 800b624:	0a1b      	lsrs	r3, r3, #8
 800b626:	0719      	lsls	r1, r3, #28
 800b628:	bf04      	itt	eq
 800b62a:	091b      	lsreq	r3, r3, #4
 800b62c:	3204      	addeq	r2, #4
 800b62e:	0799      	lsls	r1, r3, #30
 800b630:	bf04      	itt	eq
 800b632:	089b      	lsreq	r3, r3, #2
 800b634:	3202      	addeq	r2, #2
 800b636:	07d9      	lsls	r1, r3, #31
 800b638:	d403      	bmi.n	800b642 <__lo0bits+0x4e>
 800b63a:	085b      	lsrs	r3, r3, #1
 800b63c:	f102 0201 	add.w	r2, r2, #1
 800b640:	d003      	beq.n	800b64a <__lo0bits+0x56>
 800b642:	6003      	str	r3, [r0, #0]
 800b644:	e7e5      	b.n	800b612 <__lo0bits+0x1e>
 800b646:	2200      	movs	r2, #0
 800b648:	e7e3      	b.n	800b612 <__lo0bits+0x1e>
 800b64a:	2220      	movs	r2, #32
 800b64c:	e7e1      	b.n	800b612 <__lo0bits+0x1e>
	...

0800b650 <__i2b>:
 800b650:	b510      	push	{r4, lr}
 800b652:	460c      	mov	r4, r1
 800b654:	2101      	movs	r1, #1
 800b656:	f7ff ff05 	bl	800b464 <_Balloc>
 800b65a:	4602      	mov	r2, r0
 800b65c:	b928      	cbnz	r0, 800b66a <__i2b+0x1a>
 800b65e:	4b05      	ldr	r3, [pc, #20]	; (800b674 <__i2b+0x24>)
 800b660:	4805      	ldr	r0, [pc, #20]	; (800b678 <__i2b+0x28>)
 800b662:	f240 1145 	movw	r1, #325	; 0x145
 800b666:	f000 fcfd 	bl	800c064 <__assert_func>
 800b66a:	2301      	movs	r3, #1
 800b66c:	6144      	str	r4, [r0, #20]
 800b66e:	6103      	str	r3, [r0, #16]
 800b670:	bd10      	pop	{r4, pc}
 800b672:	bf00      	nop
 800b674:	0800eb0c 	.word	0x0800eb0c
 800b678:	0800eb1d 	.word	0x0800eb1d

0800b67c <__multiply>:
 800b67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b680:	4691      	mov	r9, r2
 800b682:	690a      	ldr	r2, [r1, #16]
 800b684:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b688:	429a      	cmp	r2, r3
 800b68a:	bfb8      	it	lt
 800b68c:	460b      	movlt	r3, r1
 800b68e:	460c      	mov	r4, r1
 800b690:	bfbc      	itt	lt
 800b692:	464c      	movlt	r4, r9
 800b694:	4699      	movlt	r9, r3
 800b696:	6927      	ldr	r7, [r4, #16]
 800b698:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b69c:	68a3      	ldr	r3, [r4, #8]
 800b69e:	6861      	ldr	r1, [r4, #4]
 800b6a0:	eb07 060a 	add.w	r6, r7, sl
 800b6a4:	42b3      	cmp	r3, r6
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	bfb8      	it	lt
 800b6aa:	3101      	addlt	r1, #1
 800b6ac:	f7ff feda 	bl	800b464 <_Balloc>
 800b6b0:	b930      	cbnz	r0, 800b6c0 <__multiply+0x44>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	4b44      	ldr	r3, [pc, #272]	; (800b7c8 <__multiply+0x14c>)
 800b6b6:	4845      	ldr	r0, [pc, #276]	; (800b7cc <__multiply+0x150>)
 800b6b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b6bc:	f000 fcd2 	bl	800c064 <__assert_func>
 800b6c0:	f100 0514 	add.w	r5, r0, #20
 800b6c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	4543      	cmp	r3, r8
 800b6ce:	d321      	bcc.n	800b714 <__multiply+0x98>
 800b6d0:	f104 0314 	add.w	r3, r4, #20
 800b6d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b6d8:	f109 0314 	add.w	r3, r9, #20
 800b6dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b6e0:	9202      	str	r2, [sp, #8]
 800b6e2:	1b3a      	subs	r2, r7, r4
 800b6e4:	3a15      	subs	r2, #21
 800b6e6:	f022 0203 	bic.w	r2, r2, #3
 800b6ea:	3204      	adds	r2, #4
 800b6ec:	f104 0115 	add.w	r1, r4, #21
 800b6f0:	428f      	cmp	r7, r1
 800b6f2:	bf38      	it	cc
 800b6f4:	2204      	movcc	r2, #4
 800b6f6:	9201      	str	r2, [sp, #4]
 800b6f8:	9a02      	ldr	r2, [sp, #8]
 800b6fa:	9303      	str	r3, [sp, #12]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d80c      	bhi.n	800b71a <__multiply+0x9e>
 800b700:	2e00      	cmp	r6, #0
 800b702:	dd03      	ble.n	800b70c <__multiply+0x90>
 800b704:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d05b      	beq.n	800b7c4 <__multiply+0x148>
 800b70c:	6106      	str	r6, [r0, #16]
 800b70e:	b005      	add	sp, #20
 800b710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b714:	f843 2b04 	str.w	r2, [r3], #4
 800b718:	e7d8      	b.n	800b6cc <__multiply+0x50>
 800b71a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b71e:	f1ba 0f00 	cmp.w	sl, #0
 800b722:	d024      	beq.n	800b76e <__multiply+0xf2>
 800b724:	f104 0e14 	add.w	lr, r4, #20
 800b728:	46a9      	mov	r9, r5
 800b72a:	f04f 0c00 	mov.w	ip, #0
 800b72e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b732:	f8d9 1000 	ldr.w	r1, [r9]
 800b736:	fa1f fb82 	uxth.w	fp, r2
 800b73a:	b289      	uxth	r1, r1
 800b73c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b740:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b744:	f8d9 2000 	ldr.w	r2, [r9]
 800b748:	4461      	add	r1, ip
 800b74a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b74e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b752:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b756:	b289      	uxth	r1, r1
 800b758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b75c:	4577      	cmp	r7, lr
 800b75e:	f849 1b04 	str.w	r1, [r9], #4
 800b762:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b766:	d8e2      	bhi.n	800b72e <__multiply+0xb2>
 800b768:	9a01      	ldr	r2, [sp, #4]
 800b76a:	f845 c002 	str.w	ip, [r5, r2]
 800b76e:	9a03      	ldr	r2, [sp, #12]
 800b770:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b774:	3304      	adds	r3, #4
 800b776:	f1b9 0f00 	cmp.w	r9, #0
 800b77a:	d021      	beq.n	800b7c0 <__multiply+0x144>
 800b77c:	6829      	ldr	r1, [r5, #0]
 800b77e:	f104 0c14 	add.w	ip, r4, #20
 800b782:	46ae      	mov	lr, r5
 800b784:	f04f 0a00 	mov.w	sl, #0
 800b788:	f8bc b000 	ldrh.w	fp, [ip]
 800b78c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b790:	fb09 220b 	mla	r2, r9, fp, r2
 800b794:	4452      	add	r2, sl
 800b796:	b289      	uxth	r1, r1
 800b798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b79c:	f84e 1b04 	str.w	r1, [lr], #4
 800b7a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b7a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b7a8:	f8be 1000 	ldrh.w	r1, [lr]
 800b7ac:	fb09 110a 	mla	r1, r9, sl, r1
 800b7b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b7b4:	4567      	cmp	r7, ip
 800b7b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b7ba:	d8e5      	bhi.n	800b788 <__multiply+0x10c>
 800b7bc:	9a01      	ldr	r2, [sp, #4]
 800b7be:	50a9      	str	r1, [r5, r2]
 800b7c0:	3504      	adds	r5, #4
 800b7c2:	e799      	b.n	800b6f8 <__multiply+0x7c>
 800b7c4:	3e01      	subs	r6, #1
 800b7c6:	e79b      	b.n	800b700 <__multiply+0x84>
 800b7c8:	0800eb0c 	.word	0x0800eb0c
 800b7cc:	0800eb1d 	.word	0x0800eb1d

0800b7d0 <__pow5mult>:
 800b7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d4:	4615      	mov	r5, r2
 800b7d6:	f012 0203 	ands.w	r2, r2, #3
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460f      	mov	r7, r1
 800b7de:	d007      	beq.n	800b7f0 <__pow5mult+0x20>
 800b7e0:	4c25      	ldr	r4, [pc, #148]	; (800b878 <__pow5mult+0xa8>)
 800b7e2:	3a01      	subs	r2, #1
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7ea:	f7ff fe9d 	bl	800b528 <__multadd>
 800b7ee:	4607      	mov	r7, r0
 800b7f0:	10ad      	asrs	r5, r5, #2
 800b7f2:	d03d      	beq.n	800b870 <__pow5mult+0xa0>
 800b7f4:	69f4      	ldr	r4, [r6, #28]
 800b7f6:	b97c      	cbnz	r4, 800b818 <__pow5mult+0x48>
 800b7f8:	2010      	movs	r0, #16
 800b7fa:	f7fd ffcf 	bl	800979c <malloc>
 800b7fe:	4602      	mov	r2, r0
 800b800:	61f0      	str	r0, [r6, #28]
 800b802:	b928      	cbnz	r0, 800b810 <__pow5mult+0x40>
 800b804:	4b1d      	ldr	r3, [pc, #116]	; (800b87c <__pow5mult+0xac>)
 800b806:	481e      	ldr	r0, [pc, #120]	; (800b880 <__pow5mult+0xb0>)
 800b808:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b80c:	f000 fc2a 	bl	800c064 <__assert_func>
 800b810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b814:	6004      	str	r4, [r0, #0]
 800b816:	60c4      	str	r4, [r0, #12]
 800b818:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b81c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b820:	b94c      	cbnz	r4, 800b836 <__pow5mult+0x66>
 800b822:	f240 2171 	movw	r1, #625	; 0x271
 800b826:	4630      	mov	r0, r6
 800b828:	f7ff ff12 	bl	800b650 <__i2b>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b832:	4604      	mov	r4, r0
 800b834:	6003      	str	r3, [r0, #0]
 800b836:	f04f 0900 	mov.w	r9, #0
 800b83a:	07eb      	lsls	r3, r5, #31
 800b83c:	d50a      	bpl.n	800b854 <__pow5mult+0x84>
 800b83e:	4639      	mov	r1, r7
 800b840:	4622      	mov	r2, r4
 800b842:	4630      	mov	r0, r6
 800b844:	f7ff ff1a 	bl	800b67c <__multiply>
 800b848:	4639      	mov	r1, r7
 800b84a:	4680      	mov	r8, r0
 800b84c:	4630      	mov	r0, r6
 800b84e:	f7ff fe49 	bl	800b4e4 <_Bfree>
 800b852:	4647      	mov	r7, r8
 800b854:	106d      	asrs	r5, r5, #1
 800b856:	d00b      	beq.n	800b870 <__pow5mult+0xa0>
 800b858:	6820      	ldr	r0, [r4, #0]
 800b85a:	b938      	cbnz	r0, 800b86c <__pow5mult+0x9c>
 800b85c:	4622      	mov	r2, r4
 800b85e:	4621      	mov	r1, r4
 800b860:	4630      	mov	r0, r6
 800b862:	f7ff ff0b 	bl	800b67c <__multiply>
 800b866:	6020      	str	r0, [r4, #0]
 800b868:	f8c0 9000 	str.w	r9, [r0]
 800b86c:	4604      	mov	r4, r0
 800b86e:	e7e4      	b.n	800b83a <__pow5mult+0x6a>
 800b870:	4638      	mov	r0, r7
 800b872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b876:	bf00      	nop
 800b878:	0800ec68 	.word	0x0800ec68
 800b87c:	0800ea9d 	.word	0x0800ea9d
 800b880:	0800eb1d 	.word	0x0800eb1d

0800b884 <__lshift>:
 800b884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b888:	460c      	mov	r4, r1
 800b88a:	6849      	ldr	r1, [r1, #4]
 800b88c:	6923      	ldr	r3, [r4, #16]
 800b88e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	4607      	mov	r7, r0
 800b896:	4691      	mov	r9, r2
 800b898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b89c:	f108 0601 	add.w	r6, r8, #1
 800b8a0:	42b3      	cmp	r3, r6
 800b8a2:	db0b      	blt.n	800b8bc <__lshift+0x38>
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f7ff fddd 	bl	800b464 <_Balloc>
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	b948      	cbnz	r0, 800b8c2 <__lshift+0x3e>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	4b28      	ldr	r3, [pc, #160]	; (800b954 <__lshift+0xd0>)
 800b8b2:	4829      	ldr	r0, [pc, #164]	; (800b958 <__lshift+0xd4>)
 800b8b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b8b8:	f000 fbd4 	bl	800c064 <__assert_func>
 800b8bc:	3101      	adds	r1, #1
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	e7ee      	b.n	800b8a0 <__lshift+0x1c>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f100 0114 	add.w	r1, r0, #20
 800b8c8:	f100 0210 	add.w	r2, r0, #16
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	4553      	cmp	r3, sl
 800b8d0:	db33      	blt.n	800b93a <__lshift+0xb6>
 800b8d2:	6920      	ldr	r0, [r4, #16]
 800b8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8d8:	f104 0314 	add.w	r3, r4, #20
 800b8dc:	f019 091f 	ands.w	r9, r9, #31
 800b8e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8e8:	d02b      	beq.n	800b942 <__lshift+0xbe>
 800b8ea:	f1c9 0e20 	rsb	lr, r9, #32
 800b8ee:	468a      	mov	sl, r1
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	6818      	ldr	r0, [r3, #0]
 800b8f4:	fa00 f009 	lsl.w	r0, r0, r9
 800b8f8:	4310      	orrs	r0, r2
 800b8fa:	f84a 0b04 	str.w	r0, [sl], #4
 800b8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b902:	459c      	cmp	ip, r3
 800b904:	fa22 f20e 	lsr.w	r2, r2, lr
 800b908:	d8f3      	bhi.n	800b8f2 <__lshift+0x6e>
 800b90a:	ebac 0304 	sub.w	r3, ip, r4
 800b90e:	3b15      	subs	r3, #21
 800b910:	f023 0303 	bic.w	r3, r3, #3
 800b914:	3304      	adds	r3, #4
 800b916:	f104 0015 	add.w	r0, r4, #21
 800b91a:	4584      	cmp	ip, r0
 800b91c:	bf38      	it	cc
 800b91e:	2304      	movcc	r3, #4
 800b920:	50ca      	str	r2, [r1, r3]
 800b922:	b10a      	cbz	r2, 800b928 <__lshift+0xa4>
 800b924:	f108 0602 	add.w	r6, r8, #2
 800b928:	3e01      	subs	r6, #1
 800b92a:	4638      	mov	r0, r7
 800b92c:	612e      	str	r6, [r5, #16]
 800b92e:	4621      	mov	r1, r4
 800b930:	f7ff fdd8 	bl	800b4e4 <_Bfree>
 800b934:	4628      	mov	r0, r5
 800b936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b93e:	3301      	adds	r3, #1
 800b940:	e7c5      	b.n	800b8ce <__lshift+0x4a>
 800b942:	3904      	subs	r1, #4
 800b944:	f853 2b04 	ldr.w	r2, [r3], #4
 800b948:	f841 2f04 	str.w	r2, [r1, #4]!
 800b94c:	459c      	cmp	ip, r3
 800b94e:	d8f9      	bhi.n	800b944 <__lshift+0xc0>
 800b950:	e7ea      	b.n	800b928 <__lshift+0xa4>
 800b952:	bf00      	nop
 800b954:	0800eb0c 	.word	0x0800eb0c
 800b958:	0800eb1d 	.word	0x0800eb1d

0800b95c <__mcmp>:
 800b95c:	b530      	push	{r4, r5, lr}
 800b95e:	6902      	ldr	r2, [r0, #16]
 800b960:	690c      	ldr	r4, [r1, #16]
 800b962:	1b12      	subs	r2, r2, r4
 800b964:	d10e      	bne.n	800b984 <__mcmp+0x28>
 800b966:	f100 0314 	add.w	r3, r0, #20
 800b96a:	3114      	adds	r1, #20
 800b96c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b970:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b974:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b978:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b97c:	42a5      	cmp	r5, r4
 800b97e:	d003      	beq.n	800b988 <__mcmp+0x2c>
 800b980:	d305      	bcc.n	800b98e <__mcmp+0x32>
 800b982:	2201      	movs	r2, #1
 800b984:	4610      	mov	r0, r2
 800b986:	bd30      	pop	{r4, r5, pc}
 800b988:	4283      	cmp	r3, r0
 800b98a:	d3f3      	bcc.n	800b974 <__mcmp+0x18>
 800b98c:	e7fa      	b.n	800b984 <__mcmp+0x28>
 800b98e:	f04f 32ff 	mov.w	r2, #4294967295
 800b992:	e7f7      	b.n	800b984 <__mcmp+0x28>

0800b994 <__mdiff>:
 800b994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	460c      	mov	r4, r1
 800b99a:	4606      	mov	r6, r0
 800b99c:	4611      	mov	r1, r2
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4690      	mov	r8, r2
 800b9a2:	f7ff ffdb 	bl	800b95c <__mcmp>
 800b9a6:	1e05      	subs	r5, r0, #0
 800b9a8:	d110      	bne.n	800b9cc <__mdiff+0x38>
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f7ff fd59 	bl	800b464 <_Balloc>
 800b9b2:	b930      	cbnz	r0, 800b9c2 <__mdiff+0x2e>
 800b9b4:	4b3a      	ldr	r3, [pc, #232]	; (800baa0 <__mdiff+0x10c>)
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	f240 2137 	movw	r1, #567	; 0x237
 800b9bc:	4839      	ldr	r0, [pc, #228]	; (800baa4 <__mdiff+0x110>)
 800b9be:	f000 fb51 	bl	800c064 <__assert_func>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	bfa4      	itt	ge
 800b9ce:	4643      	movge	r3, r8
 800b9d0:	46a0      	movge	r8, r4
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b9d8:	bfa6      	itte	ge
 800b9da:	461c      	movge	r4, r3
 800b9dc:	2500      	movge	r5, #0
 800b9de:	2501      	movlt	r5, #1
 800b9e0:	f7ff fd40 	bl	800b464 <_Balloc>
 800b9e4:	b920      	cbnz	r0, 800b9f0 <__mdiff+0x5c>
 800b9e6:	4b2e      	ldr	r3, [pc, #184]	; (800baa0 <__mdiff+0x10c>)
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	f240 2145 	movw	r1, #581	; 0x245
 800b9ee:	e7e5      	b.n	800b9bc <__mdiff+0x28>
 800b9f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9f4:	6926      	ldr	r6, [r4, #16]
 800b9f6:	60c5      	str	r5, [r0, #12]
 800b9f8:	f104 0914 	add.w	r9, r4, #20
 800b9fc:	f108 0514 	add.w	r5, r8, #20
 800ba00:	f100 0e14 	add.w	lr, r0, #20
 800ba04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ba08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ba0c:	f108 0210 	add.w	r2, r8, #16
 800ba10:	46f2      	mov	sl, lr
 800ba12:	2100      	movs	r1, #0
 800ba14:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba1c:	fa11 f88b 	uxtah	r8, r1, fp
 800ba20:	b299      	uxth	r1, r3
 800ba22:	0c1b      	lsrs	r3, r3, #16
 800ba24:	eba8 0801 	sub.w	r8, r8, r1
 800ba28:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba2c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba30:	fa1f f888 	uxth.w	r8, r8
 800ba34:	1419      	asrs	r1, r3, #16
 800ba36:	454e      	cmp	r6, r9
 800ba38:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba3c:	f84a 3b04 	str.w	r3, [sl], #4
 800ba40:	d8e8      	bhi.n	800ba14 <__mdiff+0x80>
 800ba42:	1b33      	subs	r3, r6, r4
 800ba44:	3b15      	subs	r3, #21
 800ba46:	f023 0303 	bic.w	r3, r3, #3
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	3415      	adds	r4, #21
 800ba4e:	42a6      	cmp	r6, r4
 800ba50:	bf38      	it	cc
 800ba52:	2304      	movcc	r3, #4
 800ba54:	441d      	add	r5, r3
 800ba56:	4473      	add	r3, lr
 800ba58:	469e      	mov	lr, r3
 800ba5a:	462e      	mov	r6, r5
 800ba5c:	4566      	cmp	r6, ip
 800ba5e:	d30e      	bcc.n	800ba7e <__mdiff+0xea>
 800ba60:	f10c 0203 	add.w	r2, ip, #3
 800ba64:	1b52      	subs	r2, r2, r5
 800ba66:	f022 0203 	bic.w	r2, r2, #3
 800ba6a:	3d03      	subs	r5, #3
 800ba6c:	45ac      	cmp	ip, r5
 800ba6e:	bf38      	it	cc
 800ba70:	2200      	movcc	r2, #0
 800ba72:	4413      	add	r3, r2
 800ba74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba78:	b17a      	cbz	r2, 800ba9a <__mdiff+0x106>
 800ba7a:	6107      	str	r7, [r0, #16]
 800ba7c:	e7a4      	b.n	800b9c8 <__mdiff+0x34>
 800ba7e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba82:	fa11 f288 	uxtah	r2, r1, r8
 800ba86:	1414      	asrs	r4, r2, #16
 800ba88:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba8c:	b292      	uxth	r2, r2
 800ba8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba92:	f84e 2b04 	str.w	r2, [lr], #4
 800ba96:	1421      	asrs	r1, r4, #16
 800ba98:	e7e0      	b.n	800ba5c <__mdiff+0xc8>
 800ba9a:	3f01      	subs	r7, #1
 800ba9c:	e7ea      	b.n	800ba74 <__mdiff+0xe0>
 800ba9e:	bf00      	nop
 800baa0:	0800eb0c 	.word	0x0800eb0c
 800baa4:	0800eb1d 	.word	0x0800eb1d

0800baa8 <__d2b>:
 800baa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800baac:	460f      	mov	r7, r1
 800baae:	2101      	movs	r1, #1
 800bab0:	ec59 8b10 	vmov	r8, r9, d0
 800bab4:	4616      	mov	r6, r2
 800bab6:	f7ff fcd5 	bl	800b464 <_Balloc>
 800baba:	4604      	mov	r4, r0
 800babc:	b930      	cbnz	r0, 800bacc <__d2b+0x24>
 800babe:	4602      	mov	r2, r0
 800bac0:	4b24      	ldr	r3, [pc, #144]	; (800bb54 <__d2b+0xac>)
 800bac2:	4825      	ldr	r0, [pc, #148]	; (800bb58 <__d2b+0xb0>)
 800bac4:	f240 310f 	movw	r1, #783	; 0x30f
 800bac8:	f000 facc 	bl	800c064 <__assert_func>
 800bacc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bad4:	bb2d      	cbnz	r5, 800bb22 <__d2b+0x7a>
 800bad6:	9301      	str	r3, [sp, #4]
 800bad8:	f1b8 0300 	subs.w	r3, r8, #0
 800badc:	d026      	beq.n	800bb2c <__d2b+0x84>
 800bade:	4668      	mov	r0, sp
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	f7ff fd87 	bl	800b5f4 <__lo0bits>
 800bae6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800baea:	b1e8      	cbz	r0, 800bb28 <__d2b+0x80>
 800baec:	f1c0 0320 	rsb	r3, r0, #32
 800baf0:	fa02 f303 	lsl.w	r3, r2, r3
 800baf4:	430b      	orrs	r3, r1
 800baf6:	40c2      	lsrs	r2, r0
 800baf8:	6163      	str	r3, [r4, #20]
 800bafa:	9201      	str	r2, [sp, #4]
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	61a3      	str	r3, [r4, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bf14      	ite	ne
 800bb04:	2202      	movne	r2, #2
 800bb06:	2201      	moveq	r2, #1
 800bb08:	6122      	str	r2, [r4, #16]
 800bb0a:	b1bd      	cbz	r5, 800bb3c <__d2b+0x94>
 800bb0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb10:	4405      	add	r5, r0
 800bb12:	603d      	str	r5, [r7, #0]
 800bb14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb18:	6030      	str	r0, [r6, #0]
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	b003      	add	sp, #12
 800bb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb26:	e7d6      	b.n	800bad6 <__d2b+0x2e>
 800bb28:	6161      	str	r1, [r4, #20]
 800bb2a:	e7e7      	b.n	800bafc <__d2b+0x54>
 800bb2c:	a801      	add	r0, sp, #4
 800bb2e:	f7ff fd61 	bl	800b5f4 <__lo0bits>
 800bb32:	9b01      	ldr	r3, [sp, #4]
 800bb34:	6163      	str	r3, [r4, #20]
 800bb36:	3020      	adds	r0, #32
 800bb38:	2201      	movs	r2, #1
 800bb3a:	e7e5      	b.n	800bb08 <__d2b+0x60>
 800bb3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb44:	6038      	str	r0, [r7, #0]
 800bb46:	6918      	ldr	r0, [r3, #16]
 800bb48:	f7ff fd34 	bl	800b5b4 <__hi0bits>
 800bb4c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb50:	e7e2      	b.n	800bb18 <__d2b+0x70>
 800bb52:	bf00      	nop
 800bb54:	0800eb0c 	.word	0x0800eb0c
 800bb58:	0800eb1d 	.word	0x0800eb1d

0800bb5c <__sfputc_r>:
 800bb5c:	6893      	ldr	r3, [r2, #8]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	b410      	push	{r4}
 800bb64:	6093      	str	r3, [r2, #8]
 800bb66:	da08      	bge.n	800bb7a <__sfputc_r+0x1e>
 800bb68:	6994      	ldr	r4, [r2, #24]
 800bb6a:	42a3      	cmp	r3, r4
 800bb6c:	db01      	blt.n	800bb72 <__sfputc_r+0x16>
 800bb6e:	290a      	cmp	r1, #10
 800bb70:	d103      	bne.n	800bb7a <__sfputc_r+0x1e>
 800bb72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb76:	f7fe bc8c 	b.w	800a492 <__swbuf_r>
 800bb7a:	6813      	ldr	r3, [r2, #0]
 800bb7c:	1c58      	adds	r0, r3, #1
 800bb7e:	6010      	str	r0, [r2, #0]
 800bb80:	7019      	strb	r1, [r3, #0]
 800bb82:	4608      	mov	r0, r1
 800bb84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <__sfputs_r>:
 800bb8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	460f      	mov	r7, r1
 800bb90:	4614      	mov	r4, r2
 800bb92:	18d5      	adds	r5, r2, r3
 800bb94:	42ac      	cmp	r4, r5
 800bb96:	d101      	bne.n	800bb9c <__sfputs_r+0x12>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e007      	b.n	800bbac <__sfputs_r+0x22>
 800bb9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba0:	463a      	mov	r2, r7
 800bba2:	4630      	mov	r0, r6
 800bba4:	f7ff ffda 	bl	800bb5c <__sfputc_r>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d1f3      	bne.n	800bb94 <__sfputs_r+0xa>
 800bbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbb0 <_vfiprintf_r>:
 800bbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb4:	460d      	mov	r5, r1
 800bbb6:	b09d      	sub	sp, #116	; 0x74
 800bbb8:	4614      	mov	r4, r2
 800bbba:	4698      	mov	r8, r3
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	b118      	cbz	r0, 800bbc8 <_vfiprintf_r+0x18>
 800bbc0:	6a03      	ldr	r3, [r0, #32]
 800bbc2:	b90b      	cbnz	r3, 800bbc8 <_vfiprintf_r+0x18>
 800bbc4:	f7fe fb7e 	bl	800a2c4 <__sinit>
 800bbc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbca:	07d9      	lsls	r1, r3, #31
 800bbcc:	d405      	bmi.n	800bbda <_vfiprintf_r+0x2a>
 800bbce:	89ab      	ldrh	r3, [r5, #12]
 800bbd0:	059a      	lsls	r2, r3, #22
 800bbd2:	d402      	bmi.n	800bbda <_vfiprintf_r+0x2a>
 800bbd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbd6:	f7fe fd7d 	bl	800a6d4 <__retarget_lock_acquire_recursive>
 800bbda:	89ab      	ldrh	r3, [r5, #12]
 800bbdc:	071b      	lsls	r3, r3, #28
 800bbde:	d501      	bpl.n	800bbe4 <_vfiprintf_r+0x34>
 800bbe0:	692b      	ldr	r3, [r5, #16]
 800bbe2:	b99b      	cbnz	r3, 800bc0c <_vfiprintf_r+0x5c>
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f7fe fc90 	bl	800a50c <__swsetup_r>
 800bbec:	b170      	cbz	r0, 800bc0c <_vfiprintf_r+0x5c>
 800bbee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbf0:	07dc      	lsls	r4, r3, #31
 800bbf2:	d504      	bpl.n	800bbfe <_vfiprintf_r+0x4e>
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	b01d      	add	sp, #116	; 0x74
 800bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbfe:	89ab      	ldrh	r3, [r5, #12]
 800bc00:	0598      	lsls	r0, r3, #22
 800bc02:	d4f7      	bmi.n	800bbf4 <_vfiprintf_r+0x44>
 800bc04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc06:	f7fe fd66 	bl	800a6d6 <__retarget_lock_release_recursive>
 800bc0a:	e7f3      	b.n	800bbf4 <_vfiprintf_r+0x44>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc10:	2320      	movs	r3, #32
 800bc12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc16:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc1a:	2330      	movs	r3, #48	; 0x30
 800bc1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bdd0 <_vfiprintf_r+0x220>
 800bc20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc24:	f04f 0901 	mov.w	r9, #1
 800bc28:	4623      	mov	r3, r4
 800bc2a:	469a      	mov	sl, r3
 800bc2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc30:	b10a      	cbz	r2, 800bc36 <_vfiprintf_r+0x86>
 800bc32:	2a25      	cmp	r2, #37	; 0x25
 800bc34:	d1f9      	bne.n	800bc2a <_vfiprintf_r+0x7a>
 800bc36:	ebba 0b04 	subs.w	fp, sl, r4
 800bc3a:	d00b      	beq.n	800bc54 <_vfiprintf_r+0xa4>
 800bc3c:	465b      	mov	r3, fp
 800bc3e:	4622      	mov	r2, r4
 800bc40:	4629      	mov	r1, r5
 800bc42:	4630      	mov	r0, r6
 800bc44:	f7ff ffa1 	bl	800bb8a <__sfputs_r>
 800bc48:	3001      	adds	r0, #1
 800bc4a:	f000 80a9 	beq.w	800bda0 <_vfiprintf_r+0x1f0>
 800bc4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc50:	445a      	add	r2, fp
 800bc52:	9209      	str	r2, [sp, #36]	; 0x24
 800bc54:	f89a 3000 	ldrb.w	r3, [sl]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f000 80a1 	beq.w	800bda0 <_vfiprintf_r+0x1f0>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f04f 32ff 	mov.w	r2, #4294967295
 800bc64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc68:	f10a 0a01 	add.w	sl, sl, #1
 800bc6c:	9304      	str	r3, [sp, #16]
 800bc6e:	9307      	str	r3, [sp, #28]
 800bc70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc74:	931a      	str	r3, [sp, #104]	; 0x68
 800bc76:	4654      	mov	r4, sl
 800bc78:	2205      	movs	r2, #5
 800bc7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc7e:	4854      	ldr	r0, [pc, #336]	; (800bdd0 <_vfiprintf_r+0x220>)
 800bc80:	f7f4 fac6 	bl	8000210 <memchr>
 800bc84:	9a04      	ldr	r2, [sp, #16]
 800bc86:	b9d8      	cbnz	r0, 800bcc0 <_vfiprintf_r+0x110>
 800bc88:	06d1      	lsls	r1, r2, #27
 800bc8a:	bf44      	itt	mi
 800bc8c:	2320      	movmi	r3, #32
 800bc8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc92:	0713      	lsls	r3, r2, #28
 800bc94:	bf44      	itt	mi
 800bc96:	232b      	movmi	r3, #43	; 0x2b
 800bc98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc9c:	f89a 3000 	ldrb.w	r3, [sl]
 800bca0:	2b2a      	cmp	r3, #42	; 0x2a
 800bca2:	d015      	beq.n	800bcd0 <_vfiprintf_r+0x120>
 800bca4:	9a07      	ldr	r2, [sp, #28]
 800bca6:	4654      	mov	r4, sl
 800bca8:	2000      	movs	r0, #0
 800bcaa:	f04f 0c0a 	mov.w	ip, #10
 800bcae:	4621      	mov	r1, r4
 800bcb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcb4:	3b30      	subs	r3, #48	; 0x30
 800bcb6:	2b09      	cmp	r3, #9
 800bcb8:	d94d      	bls.n	800bd56 <_vfiprintf_r+0x1a6>
 800bcba:	b1b0      	cbz	r0, 800bcea <_vfiprintf_r+0x13a>
 800bcbc:	9207      	str	r2, [sp, #28]
 800bcbe:	e014      	b.n	800bcea <_vfiprintf_r+0x13a>
 800bcc0:	eba0 0308 	sub.w	r3, r0, r8
 800bcc4:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	9304      	str	r3, [sp, #16]
 800bccc:	46a2      	mov	sl, r4
 800bcce:	e7d2      	b.n	800bc76 <_vfiprintf_r+0xc6>
 800bcd0:	9b03      	ldr	r3, [sp, #12]
 800bcd2:	1d19      	adds	r1, r3, #4
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	9103      	str	r1, [sp, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	bfbb      	ittet	lt
 800bcdc:	425b      	neglt	r3, r3
 800bcde:	f042 0202 	orrlt.w	r2, r2, #2
 800bce2:	9307      	strge	r3, [sp, #28]
 800bce4:	9307      	strlt	r3, [sp, #28]
 800bce6:	bfb8      	it	lt
 800bce8:	9204      	strlt	r2, [sp, #16]
 800bcea:	7823      	ldrb	r3, [r4, #0]
 800bcec:	2b2e      	cmp	r3, #46	; 0x2e
 800bcee:	d10c      	bne.n	800bd0a <_vfiprintf_r+0x15a>
 800bcf0:	7863      	ldrb	r3, [r4, #1]
 800bcf2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcf4:	d134      	bne.n	800bd60 <_vfiprintf_r+0x1b0>
 800bcf6:	9b03      	ldr	r3, [sp, #12]
 800bcf8:	1d1a      	adds	r2, r3, #4
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	9203      	str	r2, [sp, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	bfb8      	it	lt
 800bd02:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd06:	3402      	adds	r4, #2
 800bd08:	9305      	str	r3, [sp, #20]
 800bd0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bde0 <_vfiprintf_r+0x230>
 800bd0e:	7821      	ldrb	r1, [r4, #0]
 800bd10:	2203      	movs	r2, #3
 800bd12:	4650      	mov	r0, sl
 800bd14:	f7f4 fa7c 	bl	8000210 <memchr>
 800bd18:	b138      	cbz	r0, 800bd2a <_vfiprintf_r+0x17a>
 800bd1a:	9b04      	ldr	r3, [sp, #16]
 800bd1c:	eba0 000a 	sub.w	r0, r0, sl
 800bd20:	2240      	movs	r2, #64	; 0x40
 800bd22:	4082      	lsls	r2, r0
 800bd24:	4313      	orrs	r3, r2
 800bd26:	3401      	adds	r4, #1
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2e:	4829      	ldr	r0, [pc, #164]	; (800bdd4 <_vfiprintf_r+0x224>)
 800bd30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd34:	2206      	movs	r2, #6
 800bd36:	f7f4 fa6b 	bl	8000210 <memchr>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d03f      	beq.n	800bdbe <_vfiprintf_r+0x20e>
 800bd3e:	4b26      	ldr	r3, [pc, #152]	; (800bdd8 <_vfiprintf_r+0x228>)
 800bd40:	bb1b      	cbnz	r3, 800bd8a <_vfiprintf_r+0x1da>
 800bd42:	9b03      	ldr	r3, [sp, #12]
 800bd44:	3307      	adds	r3, #7
 800bd46:	f023 0307 	bic.w	r3, r3, #7
 800bd4a:	3308      	adds	r3, #8
 800bd4c:	9303      	str	r3, [sp, #12]
 800bd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd50:	443b      	add	r3, r7
 800bd52:	9309      	str	r3, [sp, #36]	; 0x24
 800bd54:	e768      	b.n	800bc28 <_vfiprintf_r+0x78>
 800bd56:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	2001      	movs	r0, #1
 800bd5e:	e7a6      	b.n	800bcae <_vfiprintf_r+0xfe>
 800bd60:	2300      	movs	r3, #0
 800bd62:	3401      	adds	r4, #1
 800bd64:	9305      	str	r3, [sp, #20]
 800bd66:	4619      	mov	r1, r3
 800bd68:	f04f 0c0a 	mov.w	ip, #10
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd72:	3a30      	subs	r2, #48	; 0x30
 800bd74:	2a09      	cmp	r2, #9
 800bd76:	d903      	bls.n	800bd80 <_vfiprintf_r+0x1d0>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d0c6      	beq.n	800bd0a <_vfiprintf_r+0x15a>
 800bd7c:	9105      	str	r1, [sp, #20]
 800bd7e:	e7c4      	b.n	800bd0a <_vfiprintf_r+0x15a>
 800bd80:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd84:	4604      	mov	r4, r0
 800bd86:	2301      	movs	r3, #1
 800bd88:	e7f0      	b.n	800bd6c <_vfiprintf_r+0x1bc>
 800bd8a:	ab03      	add	r3, sp, #12
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	462a      	mov	r2, r5
 800bd90:	4b12      	ldr	r3, [pc, #72]	; (800bddc <_vfiprintf_r+0x22c>)
 800bd92:	a904      	add	r1, sp, #16
 800bd94:	4630      	mov	r0, r6
 800bd96:	f7fd fe55 	bl	8009a44 <_printf_float>
 800bd9a:	4607      	mov	r7, r0
 800bd9c:	1c78      	adds	r0, r7, #1
 800bd9e:	d1d6      	bne.n	800bd4e <_vfiprintf_r+0x19e>
 800bda0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bda2:	07d9      	lsls	r1, r3, #31
 800bda4:	d405      	bmi.n	800bdb2 <_vfiprintf_r+0x202>
 800bda6:	89ab      	ldrh	r3, [r5, #12]
 800bda8:	059a      	lsls	r2, r3, #22
 800bdaa:	d402      	bmi.n	800bdb2 <_vfiprintf_r+0x202>
 800bdac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdae:	f7fe fc92 	bl	800a6d6 <__retarget_lock_release_recursive>
 800bdb2:	89ab      	ldrh	r3, [r5, #12]
 800bdb4:	065b      	lsls	r3, r3, #25
 800bdb6:	f53f af1d 	bmi.w	800bbf4 <_vfiprintf_r+0x44>
 800bdba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdbc:	e71c      	b.n	800bbf8 <_vfiprintf_r+0x48>
 800bdbe:	ab03      	add	r3, sp, #12
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	462a      	mov	r2, r5
 800bdc4:	4b05      	ldr	r3, [pc, #20]	; (800bddc <_vfiprintf_r+0x22c>)
 800bdc6:	a904      	add	r1, sp, #16
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f7fe f8df 	bl	8009f8c <_printf_i>
 800bdce:	e7e4      	b.n	800bd9a <_vfiprintf_r+0x1ea>
 800bdd0:	0800ec74 	.word	0x0800ec74
 800bdd4:	0800ec7e 	.word	0x0800ec7e
 800bdd8:	08009a45 	.word	0x08009a45
 800bddc:	0800bb8b 	.word	0x0800bb8b
 800bde0:	0800ec7a 	.word	0x0800ec7a

0800bde4 <__sflush_r>:
 800bde4:	898a      	ldrh	r2, [r1, #12]
 800bde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdea:	4605      	mov	r5, r0
 800bdec:	0710      	lsls	r0, r2, #28
 800bdee:	460c      	mov	r4, r1
 800bdf0:	d458      	bmi.n	800bea4 <__sflush_r+0xc0>
 800bdf2:	684b      	ldr	r3, [r1, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	dc05      	bgt.n	800be04 <__sflush_r+0x20>
 800bdf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	dc02      	bgt.n	800be04 <__sflush_r+0x20>
 800bdfe:	2000      	movs	r0, #0
 800be00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be06:	2e00      	cmp	r6, #0
 800be08:	d0f9      	beq.n	800bdfe <__sflush_r+0x1a>
 800be0a:	2300      	movs	r3, #0
 800be0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be10:	682f      	ldr	r7, [r5, #0]
 800be12:	6a21      	ldr	r1, [r4, #32]
 800be14:	602b      	str	r3, [r5, #0]
 800be16:	d032      	beq.n	800be7e <__sflush_r+0x9a>
 800be18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	075a      	lsls	r2, r3, #29
 800be1e:	d505      	bpl.n	800be2c <__sflush_r+0x48>
 800be20:	6863      	ldr	r3, [r4, #4]
 800be22:	1ac0      	subs	r0, r0, r3
 800be24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be26:	b10b      	cbz	r3, 800be2c <__sflush_r+0x48>
 800be28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be2a:	1ac0      	subs	r0, r0, r3
 800be2c:	2300      	movs	r3, #0
 800be2e:	4602      	mov	r2, r0
 800be30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be32:	6a21      	ldr	r1, [r4, #32]
 800be34:	4628      	mov	r0, r5
 800be36:	47b0      	blx	r6
 800be38:	1c43      	adds	r3, r0, #1
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	d106      	bne.n	800be4c <__sflush_r+0x68>
 800be3e:	6829      	ldr	r1, [r5, #0]
 800be40:	291d      	cmp	r1, #29
 800be42:	d82b      	bhi.n	800be9c <__sflush_r+0xb8>
 800be44:	4a29      	ldr	r2, [pc, #164]	; (800beec <__sflush_r+0x108>)
 800be46:	410a      	asrs	r2, r1
 800be48:	07d6      	lsls	r6, r2, #31
 800be4a:	d427      	bmi.n	800be9c <__sflush_r+0xb8>
 800be4c:	2200      	movs	r2, #0
 800be4e:	6062      	str	r2, [r4, #4]
 800be50:	04d9      	lsls	r1, r3, #19
 800be52:	6922      	ldr	r2, [r4, #16]
 800be54:	6022      	str	r2, [r4, #0]
 800be56:	d504      	bpl.n	800be62 <__sflush_r+0x7e>
 800be58:	1c42      	adds	r2, r0, #1
 800be5a:	d101      	bne.n	800be60 <__sflush_r+0x7c>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b903      	cbnz	r3, 800be62 <__sflush_r+0x7e>
 800be60:	6560      	str	r0, [r4, #84]	; 0x54
 800be62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be64:	602f      	str	r7, [r5, #0]
 800be66:	2900      	cmp	r1, #0
 800be68:	d0c9      	beq.n	800bdfe <__sflush_r+0x1a>
 800be6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be6e:	4299      	cmp	r1, r3
 800be70:	d002      	beq.n	800be78 <__sflush_r+0x94>
 800be72:	4628      	mov	r0, r5
 800be74:	f7ff faaa 	bl	800b3cc <_free_r>
 800be78:	2000      	movs	r0, #0
 800be7a:	6360      	str	r0, [r4, #52]	; 0x34
 800be7c:	e7c0      	b.n	800be00 <__sflush_r+0x1c>
 800be7e:	2301      	movs	r3, #1
 800be80:	4628      	mov	r0, r5
 800be82:	47b0      	blx	r6
 800be84:	1c41      	adds	r1, r0, #1
 800be86:	d1c8      	bne.n	800be1a <__sflush_r+0x36>
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0c5      	beq.n	800be1a <__sflush_r+0x36>
 800be8e:	2b1d      	cmp	r3, #29
 800be90:	d001      	beq.n	800be96 <__sflush_r+0xb2>
 800be92:	2b16      	cmp	r3, #22
 800be94:	d101      	bne.n	800be9a <__sflush_r+0xb6>
 800be96:	602f      	str	r7, [r5, #0]
 800be98:	e7b1      	b.n	800bdfe <__sflush_r+0x1a>
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bea0:	81a3      	strh	r3, [r4, #12]
 800bea2:	e7ad      	b.n	800be00 <__sflush_r+0x1c>
 800bea4:	690f      	ldr	r7, [r1, #16]
 800bea6:	2f00      	cmp	r7, #0
 800bea8:	d0a9      	beq.n	800bdfe <__sflush_r+0x1a>
 800beaa:	0793      	lsls	r3, r2, #30
 800beac:	680e      	ldr	r6, [r1, #0]
 800beae:	bf08      	it	eq
 800beb0:	694b      	ldreq	r3, [r1, #20]
 800beb2:	600f      	str	r7, [r1, #0]
 800beb4:	bf18      	it	ne
 800beb6:	2300      	movne	r3, #0
 800beb8:	eba6 0807 	sub.w	r8, r6, r7
 800bebc:	608b      	str	r3, [r1, #8]
 800bebe:	f1b8 0f00 	cmp.w	r8, #0
 800bec2:	dd9c      	ble.n	800bdfe <__sflush_r+0x1a>
 800bec4:	6a21      	ldr	r1, [r4, #32]
 800bec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bec8:	4643      	mov	r3, r8
 800beca:	463a      	mov	r2, r7
 800becc:	4628      	mov	r0, r5
 800bece:	47b0      	blx	r6
 800bed0:	2800      	cmp	r0, #0
 800bed2:	dc06      	bgt.n	800bee2 <__sflush_r+0xfe>
 800bed4:	89a3      	ldrh	r3, [r4, #12]
 800bed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beda:	81a3      	strh	r3, [r4, #12]
 800bedc:	f04f 30ff 	mov.w	r0, #4294967295
 800bee0:	e78e      	b.n	800be00 <__sflush_r+0x1c>
 800bee2:	4407      	add	r7, r0
 800bee4:	eba8 0800 	sub.w	r8, r8, r0
 800bee8:	e7e9      	b.n	800bebe <__sflush_r+0xda>
 800beea:	bf00      	nop
 800beec:	dfbffffe 	.word	0xdfbffffe

0800bef0 <_fflush_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	690b      	ldr	r3, [r1, #16]
 800bef4:	4605      	mov	r5, r0
 800bef6:	460c      	mov	r4, r1
 800bef8:	b913      	cbnz	r3, 800bf00 <_fflush_r+0x10>
 800befa:	2500      	movs	r5, #0
 800befc:	4628      	mov	r0, r5
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	b118      	cbz	r0, 800bf0a <_fflush_r+0x1a>
 800bf02:	6a03      	ldr	r3, [r0, #32]
 800bf04:	b90b      	cbnz	r3, 800bf0a <_fflush_r+0x1a>
 800bf06:	f7fe f9dd 	bl	800a2c4 <__sinit>
 800bf0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d0f3      	beq.n	800befa <_fflush_r+0xa>
 800bf12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf14:	07d0      	lsls	r0, r2, #31
 800bf16:	d404      	bmi.n	800bf22 <_fflush_r+0x32>
 800bf18:	0599      	lsls	r1, r3, #22
 800bf1a:	d402      	bmi.n	800bf22 <_fflush_r+0x32>
 800bf1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf1e:	f7fe fbd9 	bl	800a6d4 <__retarget_lock_acquire_recursive>
 800bf22:	4628      	mov	r0, r5
 800bf24:	4621      	mov	r1, r4
 800bf26:	f7ff ff5d 	bl	800bde4 <__sflush_r>
 800bf2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf2c:	07da      	lsls	r2, r3, #31
 800bf2e:	4605      	mov	r5, r0
 800bf30:	d4e4      	bmi.n	800befc <_fflush_r+0xc>
 800bf32:	89a3      	ldrh	r3, [r4, #12]
 800bf34:	059b      	lsls	r3, r3, #22
 800bf36:	d4e1      	bmi.n	800befc <_fflush_r+0xc>
 800bf38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf3a:	f7fe fbcc 	bl	800a6d6 <__retarget_lock_release_recursive>
 800bf3e:	e7dd      	b.n	800befc <_fflush_r+0xc>

0800bf40 <__swhatbuf_r>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	460c      	mov	r4, r1
 800bf44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	b096      	sub	sp, #88	; 0x58
 800bf4c:	4615      	mov	r5, r2
 800bf4e:	461e      	mov	r6, r3
 800bf50:	da0d      	bge.n	800bf6e <__swhatbuf_r+0x2e>
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bf58:	f04f 0100 	mov.w	r1, #0
 800bf5c:	bf0c      	ite	eq
 800bf5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bf62:	2340      	movne	r3, #64	; 0x40
 800bf64:	2000      	movs	r0, #0
 800bf66:	6031      	str	r1, [r6, #0]
 800bf68:	602b      	str	r3, [r5, #0]
 800bf6a:	b016      	add	sp, #88	; 0x58
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
 800bf6e:	466a      	mov	r2, sp
 800bf70:	f000 f848 	bl	800c004 <_fstat_r>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	dbec      	blt.n	800bf52 <__swhatbuf_r+0x12>
 800bf78:	9901      	ldr	r1, [sp, #4]
 800bf7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bf7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bf82:	4259      	negs	r1, r3
 800bf84:	4159      	adcs	r1, r3
 800bf86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf8a:	e7eb      	b.n	800bf64 <__swhatbuf_r+0x24>

0800bf8c <__smakebuf_r>:
 800bf8c:	898b      	ldrh	r3, [r1, #12]
 800bf8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf90:	079d      	lsls	r5, r3, #30
 800bf92:	4606      	mov	r6, r0
 800bf94:	460c      	mov	r4, r1
 800bf96:	d507      	bpl.n	800bfa8 <__smakebuf_r+0x1c>
 800bf98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	6123      	str	r3, [r4, #16]
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	6163      	str	r3, [r4, #20]
 800bfa4:	b002      	add	sp, #8
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	ab01      	add	r3, sp, #4
 800bfaa:	466a      	mov	r2, sp
 800bfac:	f7ff ffc8 	bl	800bf40 <__swhatbuf_r>
 800bfb0:	9900      	ldr	r1, [sp, #0]
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f7fd fc19 	bl	80097ec <_malloc_r>
 800bfba:	b948      	cbnz	r0, 800bfd0 <__smakebuf_r+0x44>
 800bfbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc0:	059a      	lsls	r2, r3, #22
 800bfc2:	d4ef      	bmi.n	800bfa4 <__smakebuf_r+0x18>
 800bfc4:	f023 0303 	bic.w	r3, r3, #3
 800bfc8:	f043 0302 	orr.w	r3, r3, #2
 800bfcc:	81a3      	strh	r3, [r4, #12]
 800bfce:	e7e3      	b.n	800bf98 <__smakebuf_r+0xc>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	6020      	str	r0, [r4, #0]
 800bfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfd8:	81a3      	strh	r3, [r4, #12]
 800bfda:	9b00      	ldr	r3, [sp, #0]
 800bfdc:	6163      	str	r3, [r4, #20]
 800bfde:	9b01      	ldr	r3, [sp, #4]
 800bfe0:	6120      	str	r0, [r4, #16]
 800bfe2:	b15b      	cbz	r3, 800bffc <__smakebuf_r+0x70>
 800bfe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f000 f81d 	bl	800c028 <_isatty_r>
 800bfee:	b128      	cbz	r0, 800bffc <__smakebuf_r+0x70>
 800bff0:	89a3      	ldrh	r3, [r4, #12]
 800bff2:	f023 0303 	bic.w	r3, r3, #3
 800bff6:	f043 0301 	orr.w	r3, r3, #1
 800bffa:	81a3      	strh	r3, [r4, #12]
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	431d      	orrs	r5, r3
 800c000:	81a5      	strh	r5, [r4, #12]
 800c002:	e7cf      	b.n	800bfa4 <__smakebuf_r+0x18>

0800c004 <_fstat_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4d07      	ldr	r5, [pc, #28]	; (800c024 <_fstat_r+0x20>)
 800c008:	2300      	movs	r3, #0
 800c00a:	4604      	mov	r4, r0
 800c00c:	4608      	mov	r0, r1
 800c00e:	4611      	mov	r1, r2
 800c010:	602b      	str	r3, [r5, #0]
 800c012:	f7f5 fc66 	bl	80018e2 <_fstat>
 800c016:	1c43      	adds	r3, r0, #1
 800c018:	d102      	bne.n	800c020 <_fstat_r+0x1c>
 800c01a:	682b      	ldr	r3, [r5, #0]
 800c01c:	b103      	cbz	r3, 800c020 <_fstat_r+0x1c>
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	bd38      	pop	{r3, r4, r5, pc}
 800c022:	bf00      	nop
 800c024:	20001a98 	.word	0x20001a98

0800c028 <_isatty_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d06      	ldr	r5, [pc, #24]	; (800c044 <_isatty_r+0x1c>)
 800c02c:	2300      	movs	r3, #0
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f5 fc65 	bl	8001902 <_isatty>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_isatty_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_isatty_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	20001a98 	.word	0x20001a98

0800c048 <memcpy>:
 800c048:	440a      	add	r2, r1
 800c04a:	4291      	cmp	r1, r2
 800c04c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c050:	d100      	bne.n	800c054 <memcpy+0xc>
 800c052:	4770      	bx	lr
 800c054:	b510      	push	{r4, lr}
 800c056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c05a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c05e:	4291      	cmp	r1, r2
 800c060:	d1f9      	bne.n	800c056 <memcpy+0xe>
 800c062:	bd10      	pop	{r4, pc}

0800c064 <__assert_func>:
 800c064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c066:	4614      	mov	r4, r2
 800c068:	461a      	mov	r2, r3
 800c06a:	4b09      	ldr	r3, [pc, #36]	; (800c090 <__assert_func+0x2c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4605      	mov	r5, r0
 800c070:	68d8      	ldr	r0, [r3, #12]
 800c072:	b14c      	cbz	r4, 800c088 <__assert_func+0x24>
 800c074:	4b07      	ldr	r3, [pc, #28]	; (800c094 <__assert_func+0x30>)
 800c076:	9100      	str	r1, [sp, #0]
 800c078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c07c:	4906      	ldr	r1, [pc, #24]	; (800c098 <__assert_func+0x34>)
 800c07e:	462b      	mov	r3, r5
 800c080:	f000 f82e 	bl	800c0e0 <fiprintf>
 800c084:	f000 f83e 	bl	800c104 <abort>
 800c088:	4b04      	ldr	r3, [pc, #16]	; (800c09c <__assert_func+0x38>)
 800c08a:	461c      	mov	r4, r3
 800c08c:	e7f3      	b.n	800c076 <__assert_func+0x12>
 800c08e:	bf00      	nop
 800c090:	20000064 	.word	0x20000064
 800c094:	0800ec8f 	.word	0x0800ec8f
 800c098:	0800ec9c 	.word	0x0800ec9c
 800c09c:	0800ecca 	.word	0x0800ecca

0800c0a0 <__ascii_mbtowc>:
 800c0a0:	b082      	sub	sp, #8
 800c0a2:	b901      	cbnz	r1, 800c0a6 <__ascii_mbtowc+0x6>
 800c0a4:	a901      	add	r1, sp, #4
 800c0a6:	b142      	cbz	r2, 800c0ba <__ascii_mbtowc+0x1a>
 800c0a8:	b14b      	cbz	r3, 800c0be <__ascii_mbtowc+0x1e>
 800c0aa:	7813      	ldrb	r3, [r2, #0]
 800c0ac:	600b      	str	r3, [r1, #0]
 800c0ae:	7812      	ldrb	r2, [r2, #0]
 800c0b0:	1e10      	subs	r0, r2, #0
 800c0b2:	bf18      	it	ne
 800c0b4:	2001      	movne	r0, #1
 800c0b6:	b002      	add	sp, #8
 800c0b8:	4770      	bx	lr
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	e7fb      	b.n	800c0b6 <__ascii_mbtowc+0x16>
 800c0be:	f06f 0001 	mvn.w	r0, #1
 800c0c2:	e7f8      	b.n	800c0b6 <__ascii_mbtowc+0x16>

0800c0c4 <__ascii_wctomb>:
 800c0c4:	b149      	cbz	r1, 800c0da <__ascii_wctomb+0x16>
 800c0c6:	2aff      	cmp	r2, #255	; 0xff
 800c0c8:	bf85      	ittet	hi
 800c0ca:	238a      	movhi	r3, #138	; 0x8a
 800c0cc:	6003      	strhi	r3, [r0, #0]
 800c0ce:	700a      	strbls	r2, [r1, #0]
 800c0d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c0d4:	bf98      	it	ls
 800c0d6:	2001      	movls	r0, #1
 800c0d8:	4770      	bx	lr
 800c0da:	4608      	mov	r0, r1
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <fiprintf>:
 800c0e0:	b40e      	push	{r1, r2, r3}
 800c0e2:	b503      	push	{r0, r1, lr}
 800c0e4:	4601      	mov	r1, r0
 800c0e6:	ab03      	add	r3, sp, #12
 800c0e8:	4805      	ldr	r0, [pc, #20]	; (800c100 <fiprintf+0x20>)
 800c0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ee:	6800      	ldr	r0, [r0, #0]
 800c0f0:	9301      	str	r3, [sp, #4]
 800c0f2:	f7ff fd5d 	bl	800bbb0 <_vfiprintf_r>
 800c0f6:	b002      	add	sp, #8
 800c0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0fc:	b003      	add	sp, #12
 800c0fe:	4770      	bx	lr
 800c100:	20000064 	.word	0x20000064

0800c104 <abort>:
 800c104:	b508      	push	{r3, lr}
 800c106:	2006      	movs	r0, #6
 800c108:	f000 f82c 	bl	800c164 <raise>
 800c10c:	2001      	movs	r0, #1
 800c10e:	f7f5 fbb5 	bl	800187c <_exit>

0800c112 <_raise_r>:
 800c112:	291f      	cmp	r1, #31
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4604      	mov	r4, r0
 800c118:	460d      	mov	r5, r1
 800c11a:	d904      	bls.n	800c126 <_raise_r+0x14>
 800c11c:	2316      	movs	r3, #22
 800c11e:	6003      	str	r3, [r0, #0]
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	bd38      	pop	{r3, r4, r5, pc}
 800c126:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c128:	b112      	cbz	r2, 800c130 <_raise_r+0x1e>
 800c12a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c12e:	b94b      	cbnz	r3, 800c144 <_raise_r+0x32>
 800c130:	4620      	mov	r0, r4
 800c132:	f000 f831 	bl	800c198 <_getpid_r>
 800c136:	462a      	mov	r2, r5
 800c138:	4601      	mov	r1, r0
 800c13a:	4620      	mov	r0, r4
 800c13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c140:	f000 b818 	b.w	800c174 <_kill_r>
 800c144:	2b01      	cmp	r3, #1
 800c146:	d00a      	beq.n	800c15e <_raise_r+0x4c>
 800c148:	1c59      	adds	r1, r3, #1
 800c14a:	d103      	bne.n	800c154 <_raise_r+0x42>
 800c14c:	2316      	movs	r3, #22
 800c14e:	6003      	str	r3, [r0, #0]
 800c150:	2001      	movs	r0, #1
 800c152:	e7e7      	b.n	800c124 <_raise_r+0x12>
 800c154:	2400      	movs	r4, #0
 800c156:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c15a:	4628      	mov	r0, r5
 800c15c:	4798      	blx	r3
 800c15e:	2000      	movs	r0, #0
 800c160:	e7e0      	b.n	800c124 <_raise_r+0x12>
	...

0800c164 <raise>:
 800c164:	4b02      	ldr	r3, [pc, #8]	; (800c170 <raise+0xc>)
 800c166:	4601      	mov	r1, r0
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	f7ff bfd2 	b.w	800c112 <_raise_r>
 800c16e:	bf00      	nop
 800c170:	20000064 	.word	0x20000064

0800c174 <_kill_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	4d07      	ldr	r5, [pc, #28]	; (800c194 <_kill_r+0x20>)
 800c178:	2300      	movs	r3, #0
 800c17a:	4604      	mov	r4, r0
 800c17c:	4608      	mov	r0, r1
 800c17e:	4611      	mov	r1, r2
 800c180:	602b      	str	r3, [r5, #0]
 800c182:	f7f5 fb6b 	bl	800185c <_kill>
 800c186:	1c43      	adds	r3, r0, #1
 800c188:	d102      	bne.n	800c190 <_kill_r+0x1c>
 800c18a:	682b      	ldr	r3, [r5, #0]
 800c18c:	b103      	cbz	r3, 800c190 <_kill_r+0x1c>
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	bd38      	pop	{r3, r4, r5, pc}
 800c192:	bf00      	nop
 800c194:	20001a98 	.word	0x20001a98

0800c198 <_getpid_r>:
 800c198:	f7f5 bb58 	b.w	800184c <_getpid>

0800c19c <atan2>:
 800c19c:	f000 bd94 	b.w	800ccc8 <__ieee754_atan2>

0800c1a0 <fmod>:
 800c1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a2:	ed2d 8b02 	vpush	{d8}
 800c1a6:	ec57 6b10 	vmov	r6, r7, d0
 800c1aa:	ec55 4b11 	vmov	r4, r5, d1
 800c1ae:	f000 fe51 	bl	800ce54 <__ieee754_fmod>
 800c1b2:	4622      	mov	r2, r4
 800c1b4:	462b      	mov	r3, r5
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	eeb0 8a40 	vmov.f32	s16, s0
 800c1be:	eef0 8a60 	vmov.f32	s17, s1
 800c1c2:	f7f4 fcd3 	bl	8000b6c <__aeabi_dcmpun>
 800c1c6:	b990      	cbnz	r0, 800c1ee <fmod+0x4e>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 fc9a 	bl	8000b08 <__aeabi_dcmpeq>
 800c1d4:	b158      	cbz	r0, 800c1ee <fmod+0x4e>
 800c1d6:	f7fe fa53 	bl	800a680 <__errno>
 800c1da:	2321      	movs	r3, #33	; 0x21
 800c1dc:	6003      	str	r3, [r0, #0]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	f7f4 fb51 	bl	800088c <__aeabi_ddiv>
 800c1ea:	ec41 0b18 	vmov	d8, r0, r1
 800c1ee:	eeb0 0a48 	vmov.f32	s0, s16
 800c1f2:	eef0 0a68 	vmov.f32	s1, s17
 800c1f6:	ecbd 8b02 	vpop	{d8}
 800c1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1fc <pow>:
 800c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fe:	ed2d 8b02 	vpush	{d8}
 800c202:	eeb0 8a40 	vmov.f32	s16, s0
 800c206:	eef0 8a60 	vmov.f32	s17, s1
 800c20a:	ec55 4b11 	vmov	r4, r5, d1
 800c20e:	f000 ff2f 	bl	800d070 <__ieee754_pow>
 800c212:	4622      	mov	r2, r4
 800c214:	462b      	mov	r3, r5
 800c216:	4620      	mov	r0, r4
 800c218:	4629      	mov	r1, r5
 800c21a:	ec57 6b10 	vmov	r6, r7, d0
 800c21e:	f7f4 fca5 	bl	8000b6c <__aeabi_dcmpun>
 800c222:	2800      	cmp	r0, #0
 800c224:	d13b      	bne.n	800c29e <pow+0xa2>
 800c226:	ec51 0b18 	vmov	r0, r1, d8
 800c22a:	2200      	movs	r2, #0
 800c22c:	2300      	movs	r3, #0
 800c22e:	f7f4 fc6b 	bl	8000b08 <__aeabi_dcmpeq>
 800c232:	b1b8      	cbz	r0, 800c264 <pow+0x68>
 800c234:	2200      	movs	r2, #0
 800c236:	2300      	movs	r3, #0
 800c238:	4620      	mov	r0, r4
 800c23a:	4629      	mov	r1, r5
 800c23c:	f7f4 fc64 	bl	8000b08 <__aeabi_dcmpeq>
 800c240:	2800      	cmp	r0, #0
 800c242:	d146      	bne.n	800c2d2 <pow+0xd6>
 800c244:	ec45 4b10 	vmov	d0, r4, r5
 800c248:	f000 face 	bl	800c7e8 <finite>
 800c24c:	b338      	cbz	r0, 800c29e <pow+0xa2>
 800c24e:	2200      	movs	r2, #0
 800c250:	2300      	movs	r3, #0
 800c252:	4620      	mov	r0, r4
 800c254:	4629      	mov	r1, r5
 800c256:	f7f4 fc61 	bl	8000b1c <__aeabi_dcmplt>
 800c25a:	b300      	cbz	r0, 800c29e <pow+0xa2>
 800c25c:	f7fe fa10 	bl	800a680 <__errno>
 800c260:	2322      	movs	r3, #34	; 0x22
 800c262:	e01b      	b.n	800c29c <pow+0xa0>
 800c264:	ec47 6b10 	vmov	d0, r6, r7
 800c268:	f000 fabe 	bl	800c7e8 <finite>
 800c26c:	b9e0      	cbnz	r0, 800c2a8 <pow+0xac>
 800c26e:	eeb0 0a48 	vmov.f32	s0, s16
 800c272:	eef0 0a68 	vmov.f32	s1, s17
 800c276:	f000 fab7 	bl	800c7e8 <finite>
 800c27a:	b1a8      	cbz	r0, 800c2a8 <pow+0xac>
 800c27c:	ec45 4b10 	vmov	d0, r4, r5
 800c280:	f000 fab2 	bl	800c7e8 <finite>
 800c284:	b180      	cbz	r0, 800c2a8 <pow+0xac>
 800c286:	4632      	mov	r2, r6
 800c288:	463b      	mov	r3, r7
 800c28a:	4630      	mov	r0, r6
 800c28c:	4639      	mov	r1, r7
 800c28e:	f7f4 fc6d 	bl	8000b6c <__aeabi_dcmpun>
 800c292:	2800      	cmp	r0, #0
 800c294:	d0e2      	beq.n	800c25c <pow+0x60>
 800c296:	f7fe f9f3 	bl	800a680 <__errno>
 800c29a:	2321      	movs	r3, #33	; 0x21
 800c29c:	6003      	str	r3, [r0, #0]
 800c29e:	ecbd 8b02 	vpop	{d8}
 800c2a2:	ec47 6b10 	vmov	d0, r6, r7
 800c2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	f7f4 fc2a 	bl	8000b08 <__aeabi_dcmpeq>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d0f2      	beq.n	800c29e <pow+0xa2>
 800c2b8:	eeb0 0a48 	vmov.f32	s0, s16
 800c2bc:	eef0 0a68 	vmov.f32	s1, s17
 800c2c0:	f000 fa92 	bl	800c7e8 <finite>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d0ea      	beq.n	800c29e <pow+0xa2>
 800c2c8:	ec45 4b10 	vmov	d0, r4, r5
 800c2cc:	f000 fa8c 	bl	800c7e8 <finite>
 800c2d0:	e7c3      	b.n	800c25a <pow+0x5e>
 800c2d2:	4f01      	ldr	r7, [pc, #4]	; (800c2d8 <pow+0xdc>)
 800c2d4:	2600      	movs	r6, #0
 800c2d6:	e7e2      	b.n	800c29e <pow+0xa2>
 800c2d8:	3ff00000 	.word	0x3ff00000

0800c2dc <sqrt>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	ed2d 8b02 	vpush	{d8}
 800c2e2:	ec55 4b10 	vmov	r4, r5, d0
 800c2e6:	f000 fa8b 	bl	800c800 <__ieee754_sqrt>
 800c2ea:	4622      	mov	r2, r4
 800c2ec:	462b      	mov	r3, r5
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c2f6:	eef0 8a60 	vmov.f32	s17, s1
 800c2fa:	f7f4 fc37 	bl	8000b6c <__aeabi_dcmpun>
 800c2fe:	b990      	cbnz	r0, 800c326 <sqrt+0x4a>
 800c300:	2200      	movs	r2, #0
 800c302:	2300      	movs	r3, #0
 800c304:	4620      	mov	r0, r4
 800c306:	4629      	mov	r1, r5
 800c308:	f7f4 fc08 	bl	8000b1c <__aeabi_dcmplt>
 800c30c:	b158      	cbz	r0, 800c326 <sqrt+0x4a>
 800c30e:	f7fe f9b7 	bl	800a680 <__errno>
 800c312:	2321      	movs	r3, #33	; 0x21
 800c314:	6003      	str	r3, [r0, #0]
 800c316:	2200      	movs	r2, #0
 800c318:	2300      	movs	r3, #0
 800c31a:	4610      	mov	r0, r2
 800c31c:	4619      	mov	r1, r3
 800c31e:	f7f4 fab5 	bl	800088c <__aeabi_ddiv>
 800c322:	ec41 0b18 	vmov	d8, r0, r1
 800c326:	eeb0 0a48 	vmov.f32	s0, s16
 800c32a:	eef0 0a68 	vmov.f32	s1, s17
 800c32e:	ecbd 8b02 	vpop	{d8}
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	0000      	movs	r0, r0
	...

0800c338 <atan>:
 800c338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33c:	ec55 4b10 	vmov	r4, r5, d0
 800c340:	4bc3      	ldr	r3, [pc, #780]	; (800c650 <atan+0x318>)
 800c342:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c346:	429e      	cmp	r6, r3
 800c348:	46ab      	mov	fp, r5
 800c34a:	dd18      	ble.n	800c37e <atan+0x46>
 800c34c:	4bc1      	ldr	r3, [pc, #772]	; (800c654 <atan+0x31c>)
 800c34e:	429e      	cmp	r6, r3
 800c350:	dc01      	bgt.n	800c356 <atan+0x1e>
 800c352:	d109      	bne.n	800c368 <atan+0x30>
 800c354:	b144      	cbz	r4, 800c368 <atan+0x30>
 800c356:	4622      	mov	r2, r4
 800c358:	462b      	mov	r3, r5
 800c35a:	4620      	mov	r0, r4
 800c35c:	4629      	mov	r1, r5
 800c35e:	f7f3 ffb5 	bl	80002cc <__adddf3>
 800c362:	4604      	mov	r4, r0
 800c364:	460d      	mov	r5, r1
 800c366:	e006      	b.n	800c376 <atan+0x3e>
 800c368:	f1bb 0f00 	cmp.w	fp, #0
 800c36c:	f300 8131 	bgt.w	800c5d2 <atan+0x29a>
 800c370:	a59b      	add	r5, pc, #620	; (adr r5, 800c5e0 <atan+0x2a8>)
 800c372:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c376:	ec45 4b10 	vmov	d0, r4, r5
 800c37a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37e:	4bb6      	ldr	r3, [pc, #728]	; (800c658 <atan+0x320>)
 800c380:	429e      	cmp	r6, r3
 800c382:	dc14      	bgt.n	800c3ae <atan+0x76>
 800c384:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c388:	429e      	cmp	r6, r3
 800c38a:	dc0d      	bgt.n	800c3a8 <atan+0x70>
 800c38c:	a396      	add	r3, pc, #600	; (adr r3, 800c5e8 <atan+0x2b0>)
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	ee10 0a10 	vmov	r0, s0
 800c396:	4629      	mov	r1, r5
 800c398:	f7f3 ff98 	bl	80002cc <__adddf3>
 800c39c:	4baf      	ldr	r3, [pc, #700]	; (800c65c <atan+0x324>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f7f4 fbda 	bl	8000b58 <__aeabi_dcmpgt>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d1e6      	bne.n	800c376 <atan+0x3e>
 800c3a8:	f04f 3aff 	mov.w	sl, #4294967295
 800c3ac:	e02b      	b.n	800c406 <atan+0xce>
 800c3ae:	f000 f9b7 	bl	800c720 <fabs>
 800c3b2:	4bab      	ldr	r3, [pc, #684]	; (800c660 <atan+0x328>)
 800c3b4:	429e      	cmp	r6, r3
 800c3b6:	ec55 4b10 	vmov	r4, r5, d0
 800c3ba:	f300 80bf 	bgt.w	800c53c <atan+0x204>
 800c3be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c3c2:	429e      	cmp	r6, r3
 800c3c4:	f300 80a0 	bgt.w	800c508 <atan+0x1d0>
 800c3c8:	ee10 2a10 	vmov	r2, s0
 800c3cc:	ee10 0a10 	vmov	r0, s0
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	f7f3 ff7a 	bl	80002cc <__adddf3>
 800c3d8:	4ba0      	ldr	r3, [pc, #640]	; (800c65c <atan+0x324>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f7f3 ff74 	bl	80002c8 <__aeabi_dsub>
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	460f      	mov	r7, r1
 800c3e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	f7f3 ff6d 	bl	80002cc <__adddf3>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	f7f4 fa47 	bl	800088c <__aeabi_ddiv>
 800c3fe:	f04f 0a00 	mov.w	sl, #0
 800c402:	4604      	mov	r4, r0
 800c404:	460d      	mov	r5, r1
 800c406:	4622      	mov	r2, r4
 800c408:	462b      	mov	r3, r5
 800c40a:	4620      	mov	r0, r4
 800c40c:	4629      	mov	r1, r5
 800c40e:	f7f4 f913 	bl	8000638 <__aeabi_dmul>
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	4680      	mov	r8, r0
 800c418:	4689      	mov	r9, r1
 800c41a:	f7f4 f90d 	bl	8000638 <__aeabi_dmul>
 800c41e:	a374      	add	r3, pc, #464	; (adr r3, 800c5f0 <atan+0x2b8>)
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	4606      	mov	r6, r0
 800c426:	460f      	mov	r7, r1
 800c428:	f7f4 f906 	bl	8000638 <__aeabi_dmul>
 800c42c:	a372      	add	r3, pc, #456	; (adr r3, 800c5f8 <atan+0x2c0>)
 800c42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c432:	f7f3 ff4b 	bl	80002cc <__adddf3>
 800c436:	4632      	mov	r2, r6
 800c438:	463b      	mov	r3, r7
 800c43a:	f7f4 f8fd 	bl	8000638 <__aeabi_dmul>
 800c43e:	a370      	add	r3, pc, #448	; (adr r3, 800c600 <atan+0x2c8>)
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	f7f3 ff42 	bl	80002cc <__adddf3>
 800c448:	4632      	mov	r2, r6
 800c44a:	463b      	mov	r3, r7
 800c44c:	f7f4 f8f4 	bl	8000638 <__aeabi_dmul>
 800c450:	a36d      	add	r3, pc, #436	; (adr r3, 800c608 <atan+0x2d0>)
 800c452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c456:	f7f3 ff39 	bl	80002cc <__adddf3>
 800c45a:	4632      	mov	r2, r6
 800c45c:	463b      	mov	r3, r7
 800c45e:	f7f4 f8eb 	bl	8000638 <__aeabi_dmul>
 800c462:	a36b      	add	r3, pc, #428	; (adr r3, 800c610 <atan+0x2d8>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f7f3 ff30 	bl	80002cc <__adddf3>
 800c46c:	4632      	mov	r2, r6
 800c46e:	463b      	mov	r3, r7
 800c470:	f7f4 f8e2 	bl	8000638 <__aeabi_dmul>
 800c474:	a368      	add	r3, pc, #416	; (adr r3, 800c618 <atan+0x2e0>)
 800c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47a:	f7f3 ff27 	bl	80002cc <__adddf3>
 800c47e:	4642      	mov	r2, r8
 800c480:	464b      	mov	r3, r9
 800c482:	f7f4 f8d9 	bl	8000638 <__aeabi_dmul>
 800c486:	a366      	add	r3, pc, #408	; (adr r3, 800c620 <atan+0x2e8>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	4680      	mov	r8, r0
 800c48e:	4689      	mov	r9, r1
 800c490:	4630      	mov	r0, r6
 800c492:	4639      	mov	r1, r7
 800c494:	f7f4 f8d0 	bl	8000638 <__aeabi_dmul>
 800c498:	a363      	add	r3, pc, #396	; (adr r3, 800c628 <atan+0x2f0>)
 800c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49e:	f7f3 ff13 	bl	80002c8 <__aeabi_dsub>
 800c4a2:	4632      	mov	r2, r6
 800c4a4:	463b      	mov	r3, r7
 800c4a6:	f7f4 f8c7 	bl	8000638 <__aeabi_dmul>
 800c4aa:	a361      	add	r3, pc, #388	; (adr r3, 800c630 <atan+0x2f8>)
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	f7f3 ff0a 	bl	80002c8 <__aeabi_dsub>
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	463b      	mov	r3, r7
 800c4b8:	f7f4 f8be 	bl	8000638 <__aeabi_dmul>
 800c4bc:	a35e      	add	r3, pc, #376	; (adr r3, 800c638 <atan+0x300>)
 800c4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c2:	f7f3 ff01 	bl	80002c8 <__aeabi_dsub>
 800c4c6:	4632      	mov	r2, r6
 800c4c8:	463b      	mov	r3, r7
 800c4ca:	f7f4 f8b5 	bl	8000638 <__aeabi_dmul>
 800c4ce:	a35c      	add	r3, pc, #368	; (adr r3, 800c640 <atan+0x308>)
 800c4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d4:	f7f3 fef8 	bl	80002c8 <__aeabi_dsub>
 800c4d8:	4632      	mov	r2, r6
 800c4da:	463b      	mov	r3, r7
 800c4dc:	f7f4 f8ac 	bl	8000638 <__aeabi_dmul>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4640      	mov	r0, r8
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	f7f3 fef0 	bl	80002cc <__adddf3>
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	462b      	mov	r3, r5
 800c4f0:	f7f4 f8a2 	bl	8000638 <__aeabi_dmul>
 800c4f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	d14b      	bne.n	800c596 <atan+0x25e>
 800c4fe:	4620      	mov	r0, r4
 800c500:	4629      	mov	r1, r5
 800c502:	f7f3 fee1 	bl	80002c8 <__aeabi_dsub>
 800c506:	e72c      	b.n	800c362 <atan+0x2a>
 800c508:	ee10 0a10 	vmov	r0, s0
 800c50c:	4b53      	ldr	r3, [pc, #332]	; (800c65c <atan+0x324>)
 800c50e:	2200      	movs	r2, #0
 800c510:	4629      	mov	r1, r5
 800c512:	f7f3 fed9 	bl	80002c8 <__aeabi_dsub>
 800c516:	4b51      	ldr	r3, [pc, #324]	; (800c65c <atan+0x324>)
 800c518:	4606      	mov	r6, r0
 800c51a:	460f      	mov	r7, r1
 800c51c:	2200      	movs	r2, #0
 800c51e:	4620      	mov	r0, r4
 800c520:	4629      	mov	r1, r5
 800c522:	f7f3 fed3 	bl	80002cc <__adddf3>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	4630      	mov	r0, r6
 800c52c:	4639      	mov	r1, r7
 800c52e:	f7f4 f9ad 	bl	800088c <__aeabi_ddiv>
 800c532:	f04f 0a01 	mov.w	sl, #1
 800c536:	4604      	mov	r4, r0
 800c538:	460d      	mov	r5, r1
 800c53a:	e764      	b.n	800c406 <atan+0xce>
 800c53c:	4b49      	ldr	r3, [pc, #292]	; (800c664 <atan+0x32c>)
 800c53e:	429e      	cmp	r6, r3
 800c540:	da1d      	bge.n	800c57e <atan+0x246>
 800c542:	ee10 0a10 	vmov	r0, s0
 800c546:	4b48      	ldr	r3, [pc, #288]	; (800c668 <atan+0x330>)
 800c548:	2200      	movs	r2, #0
 800c54a:	4629      	mov	r1, r5
 800c54c:	f7f3 febc 	bl	80002c8 <__aeabi_dsub>
 800c550:	4b45      	ldr	r3, [pc, #276]	; (800c668 <atan+0x330>)
 800c552:	4606      	mov	r6, r0
 800c554:	460f      	mov	r7, r1
 800c556:	2200      	movs	r2, #0
 800c558:	4620      	mov	r0, r4
 800c55a:	4629      	mov	r1, r5
 800c55c:	f7f4 f86c 	bl	8000638 <__aeabi_dmul>
 800c560:	4b3e      	ldr	r3, [pc, #248]	; (800c65c <atan+0x324>)
 800c562:	2200      	movs	r2, #0
 800c564:	f7f3 feb2 	bl	80002cc <__adddf3>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4630      	mov	r0, r6
 800c56e:	4639      	mov	r1, r7
 800c570:	f7f4 f98c 	bl	800088c <__aeabi_ddiv>
 800c574:	f04f 0a02 	mov.w	sl, #2
 800c578:	4604      	mov	r4, r0
 800c57a:	460d      	mov	r5, r1
 800c57c:	e743      	b.n	800c406 <atan+0xce>
 800c57e:	462b      	mov	r3, r5
 800c580:	ee10 2a10 	vmov	r2, s0
 800c584:	4939      	ldr	r1, [pc, #228]	; (800c66c <atan+0x334>)
 800c586:	2000      	movs	r0, #0
 800c588:	f7f4 f980 	bl	800088c <__aeabi_ddiv>
 800c58c:	f04f 0a03 	mov.w	sl, #3
 800c590:	4604      	mov	r4, r0
 800c592:	460d      	mov	r5, r1
 800c594:	e737      	b.n	800c406 <atan+0xce>
 800c596:	4b36      	ldr	r3, [pc, #216]	; (800c670 <atan+0x338>)
 800c598:	4e36      	ldr	r6, [pc, #216]	; (800c674 <atan+0x33c>)
 800c59a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	f7f3 fe91 	bl	80002c8 <__aeabi_dsub>
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	462b      	mov	r3, r5
 800c5aa:	f7f3 fe8d 	bl	80002c8 <__aeabi_dsub>
 800c5ae:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c5ba:	f7f3 fe85 	bl	80002c8 <__aeabi_dsub>
 800c5be:	f1bb 0f00 	cmp.w	fp, #0
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	460d      	mov	r5, r1
 800c5c6:	f6bf aed6 	bge.w	800c376 <atan+0x3e>
 800c5ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5ce:	461d      	mov	r5, r3
 800c5d0:	e6d1      	b.n	800c376 <atan+0x3e>
 800c5d2:	a51d      	add	r5, pc, #116	; (adr r5, 800c648 <atan+0x310>)
 800c5d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c5d8:	e6cd      	b.n	800c376 <atan+0x3e>
 800c5da:	bf00      	nop
 800c5dc:	f3af 8000 	nop.w
 800c5e0:	54442d18 	.word	0x54442d18
 800c5e4:	bff921fb 	.word	0xbff921fb
 800c5e8:	8800759c 	.word	0x8800759c
 800c5ec:	7e37e43c 	.word	0x7e37e43c
 800c5f0:	e322da11 	.word	0xe322da11
 800c5f4:	3f90ad3a 	.word	0x3f90ad3a
 800c5f8:	24760deb 	.word	0x24760deb
 800c5fc:	3fa97b4b 	.word	0x3fa97b4b
 800c600:	a0d03d51 	.word	0xa0d03d51
 800c604:	3fb10d66 	.word	0x3fb10d66
 800c608:	c54c206e 	.word	0xc54c206e
 800c60c:	3fb745cd 	.word	0x3fb745cd
 800c610:	920083ff 	.word	0x920083ff
 800c614:	3fc24924 	.word	0x3fc24924
 800c618:	5555550d 	.word	0x5555550d
 800c61c:	3fd55555 	.word	0x3fd55555
 800c620:	2c6a6c2f 	.word	0x2c6a6c2f
 800c624:	bfa2b444 	.word	0xbfa2b444
 800c628:	52defd9a 	.word	0x52defd9a
 800c62c:	3fadde2d 	.word	0x3fadde2d
 800c630:	af749a6d 	.word	0xaf749a6d
 800c634:	3fb3b0f2 	.word	0x3fb3b0f2
 800c638:	fe231671 	.word	0xfe231671
 800c63c:	3fbc71c6 	.word	0x3fbc71c6
 800c640:	9998ebc4 	.word	0x9998ebc4
 800c644:	3fc99999 	.word	0x3fc99999
 800c648:	54442d18 	.word	0x54442d18
 800c64c:	3ff921fb 	.word	0x3ff921fb
 800c650:	440fffff 	.word	0x440fffff
 800c654:	7ff00000 	.word	0x7ff00000
 800c658:	3fdbffff 	.word	0x3fdbffff
 800c65c:	3ff00000 	.word	0x3ff00000
 800c660:	3ff2ffff 	.word	0x3ff2ffff
 800c664:	40038000 	.word	0x40038000
 800c668:	3ff80000 	.word	0x3ff80000
 800c66c:	bff00000 	.word	0xbff00000
 800c670:	0800edf0 	.word	0x0800edf0
 800c674:	0800edd0 	.word	0x0800edd0

0800c678 <cos>:
 800c678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c67a:	ec53 2b10 	vmov	r2, r3, d0
 800c67e:	4826      	ldr	r0, [pc, #152]	; (800c718 <cos+0xa0>)
 800c680:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c684:	4281      	cmp	r1, r0
 800c686:	dc06      	bgt.n	800c696 <cos+0x1e>
 800c688:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c710 <cos+0x98>
 800c68c:	b005      	add	sp, #20
 800c68e:	f85d eb04 	ldr.w	lr, [sp], #4
 800c692:	f000 b991 	b.w	800c9b8 <__kernel_cos>
 800c696:	4821      	ldr	r0, [pc, #132]	; (800c71c <cos+0xa4>)
 800c698:	4281      	cmp	r1, r0
 800c69a:	dd09      	ble.n	800c6b0 <cos+0x38>
 800c69c:	ee10 0a10 	vmov	r0, s0
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	f7f3 fe11 	bl	80002c8 <__aeabi_dsub>
 800c6a6:	ec41 0b10 	vmov	d0, r0, r1
 800c6aa:	b005      	add	sp, #20
 800c6ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6b0:	4668      	mov	r0, sp
 800c6b2:	f001 fa09 	bl	800dac8 <__ieee754_rem_pio2>
 800c6b6:	f000 0003 	and.w	r0, r0, #3
 800c6ba:	2801      	cmp	r0, #1
 800c6bc:	d00b      	beq.n	800c6d6 <cos+0x5e>
 800c6be:	2802      	cmp	r0, #2
 800c6c0:	d016      	beq.n	800c6f0 <cos+0x78>
 800c6c2:	b9e0      	cbnz	r0, 800c6fe <cos+0x86>
 800c6c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c6c8:	ed9d 0b00 	vldr	d0, [sp]
 800c6cc:	f000 f974 	bl	800c9b8 <__kernel_cos>
 800c6d0:	ec51 0b10 	vmov	r0, r1, d0
 800c6d4:	e7e7      	b.n	800c6a6 <cos+0x2e>
 800c6d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c6da:	ed9d 0b00 	vldr	d0, [sp]
 800c6de:	f000 fa33 	bl	800cb48 <__kernel_sin>
 800c6e2:	ec53 2b10 	vmov	r2, r3, d0
 800c6e6:	ee10 0a10 	vmov	r0, s0
 800c6ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c6ee:	e7da      	b.n	800c6a6 <cos+0x2e>
 800c6f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c6f4:	ed9d 0b00 	vldr	d0, [sp]
 800c6f8:	f000 f95e 	bl	800c9b8 <__kernel_cos>
 800c6fc:	e7f1      	b.n	800c6e2 <cos+0x6a>
 800c6fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c702:	ed9d 0b00 	vldr	d0, [sp]
 800c706:	2001      	movs	r0, #1
 800c708:	f000 fa1e 	bl	800cb48 <__kernel_sin>
 800c70c:	e7e0      	b.n	800c6d0 <cos+0x58>
 800c70e:	bf00      	nop
	...
 800c718:	3fe921fb 	.word	0x3fe921fb
 800c71c:	7fefffff 	.word	0x7fefffff

0800c720 <fabs>:
 800c720:	ec51 0b10 	vmov	r0, r1, d0
 800c724:	ee10 2a10 	vmov	r2, s0
 800c728:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c72c:	ec43 2b10 	vmov	d0, r2, r3
 800c730:	4770      	bx	lr
 800c732:	0000      	movs	r0, r0
 800c734:	0000      	movs	r0, r0
	...

0800c738 <sin>:
 800c738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c73a:	ec53 2b10 	vmov	r2, r3, d0
 800c73e:	4828      	ldr	r0, [pc, #160]	; (800c7e0 <sin+0xa8>)
 800c740:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c744:	4281      	cmp	r1, r0
 800c746:	dc07      	bgt.n	800c758 <sin+0x20>
 800c748:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c7d8 <sin+0xa0>
 800c74c:	2000      	movs	r0, #0
 800c74e:	b005      	add	sp, #20
 800c750:	f85d eb04 	ldr.w	lr, [sp], #4
 800c754:	f000 b9f8 	b.w	800cb48 <__kernel_sin>
 800c758:	4822      	ldr	r0, [pc, #136]	; (800c7e4 <sin+0xac>)
 800c75a:	4281      	cmp	r1, r0
 800c75c:	dd09      	ble.n	800c772 <sin+0x3a>
 800c75e:	ee10 0a10 	vmov	r0, s0
 800c762:	4619      	mov	r1, r3
 800c764:	f7f3 fdb0 	bl	80002c8 <__aeabi_dsub>
 800c768:	ec41 0b10 	vmov	d0, r0, r1
 800c76c:	b005      	add	sp, #20
 800c76e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c772:	4668      	mov	r0, sp
 800c774:	f001 f9a8 	bl	800dac8 <__ieee754_rem_pio2>
 800c778:	f000 0003 	and.w	r0, r0, #3
 800c77c:	2801      	cmp	r0, #1
 800c77e:	d00c      	beq.n	800c79a <sin+0x62>
 800c780:	2802      	cmp	r0, #2
 800c782:	d011      	beq.n	800c7a8 <sin+0x70>
 800c784:	b9f0      	cbnz	r0, 800c7c4 <sin+0x8c>
 800c786:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c78a:	ed9d 0b00 	vldr	d0, [sp]
 800c78e:	2001      	movs	r0, #1
 800c790:	f000 f9da 	bl	800cb48 <__kernel_sin>
 800c794:	ec51 0b10 	vmov	r0, r1, d0
 800c798:	e7e6      	b.n	800c768 <sin+0x30>
 800c79a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c79e:	ed9d 0b00 	vldr	d0, [sp]
 800c7a2:	f000 f909 	bl	800c9b8 <__kernel_cos>
 800c7a6:	e7f5      	b.n	800c794 <sin+0x5c>
 800c7a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7ac:	ed9d 0b00 	vldr	d0, [sp]
 800c7b0:	2001      	movs	r0, #1
 800c7b2:	f000 f9c9 	bl	800cb48 <__kernel_sin>
 800c7b6:	ec53 2b10 	vmov	r2, r3, d0
 800c7ba:	ee10 0a10 	vmov	r0, s0
 800c7be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7c2:	e7d1      	b.n	800c768 <sin+0x30>
 800c7c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7c8:	ed9d 0b00 	vldr	d0, [sp]
 800c7cc:	f000 f8f4 	bl	800c9b8 <__kernel_cos>
 800c7d0:	e7f1      	b.n	800c7b6 <sin+0x7e>
 800c7d2:	bf00      	nop
 800c7d4:	f3af 8000 	nop.w
	...
 800c7e0:	3fe921fb 	.word	0x3fe921fb
 800c7e4:	7fefffff 	.word	0x7fefffff

0800c7e8 <finite>:
 800c7e8:	b082      	sub	sp, #8
 800c7ea:	ed8d 0b00 	vstr	d0, [sp]
 800c7ee:	9801      	ldr	r0, [sp, #4]
 800c7f0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c7f4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c7f8:	0fc0      	lsrs	r0, r0, #31
 800c7fa:	b002      	add	sp, #8
 800c7fc:	4770      	bx	lr
	...

0800c800 <__ieee754_sqrt>:
 800c800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c804:	ec55 4b10 	vmov	r4, r5, d0
 800c808:	4e67      	ldr	r6, [pc, #412]	; (800c9a8 <__ieee754_sqrt+0x1a8>)
 800c80a:	43ae      	bics	r6, r5
 800c80c:	ee10 0a10 	vmov	r0, s0
 800c810:	ee10 2a10 	vmov	r2, s0
 800c814:	4629      	mov	r1, r5
 800c816:	462b      	mov	r3, r5
 800c818:	d10d      	bne.n	800c836 <__ieee754_sqrt+0x36>
 800c81a:	f7f3 ff0d 	bl	8000638 <__aeabi_dmul>
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4620      	mov	r0, r4
 800c824:	4629      	mov	r1, r5
 800c826:	f7f3 fd51 	bl	80002cc <__adddf3>
 800c82a:	4604      	mov	r4, r0
 800c82c:	460d      	mov	r5, r1
 800c82e:	ec45 4b10 	vmov	d0, r4, r5
 800c832:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c836:	2d00      	cmp	r5, #0
 800c838:	dc0b      	bgt.n	800c852 <__ieee754_sqrt+0x52>
 800c83a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c83e:	4326      	orrs	r6, r4
 800c840:	d0f5      	beq.n	800c82e <__ieee754_sqrt+0x2e>
 800c842:	b135      	cbz	r5, 800c852 <__ieee754_sqrt+0x52>
 800c844:	f7f3 fd40 	bl	80002c8 <__aeabi_dsub>
 800c848:	4602      	mov	r2, r0
 800c84a:	460b      	mov	r3, r1
 800c84c:	f7f4 f81e 	bl	800088c <__aeabi_ddiv>
 800c850:	e7eb      	b.n	800c82a <__ieee754_sqrt+0x2a>
 800c852:	1509      	asrs	r1, r1, #20
 800c854:	f000 808d 	beq.w	800c972 <__ieee754_sqrt+0x172>
 800c858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c85c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c864:	07c9      	lsls	r1, r1, #31
 800c866:	bf5c      	itt	pl
 800c868:	005b      	lslpl	r3, r3, #1
 800c86a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c86e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c872:	bf58      	it	pl
 800c874:	0052      	lslpl	r2, r2, #1
 800c876:	2500      	movs	r5, #0
 800c878:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c87c:	1076      	asrs	r6, r6, #1
 800c87e:	0052      	lsls	r2, r2, #1
 800c880:	f04f 0e16 	mov.w	lr, #22
 800c884:	46ac      	mov	ip, r5
 800c886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c88a:	eb0c 0001 	add.w	r0, ip, r1
 800c88e:	4298      	cmp	r0, r3
 800c890:	bfde      	ittt	le
 800c892:	1a1b      	suble	r3, r3, r0
 800c894:	eb00 0c01 	addle.w	ip, r0, r1
 800c898:	186d      	addle	r5, r5, r1
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	f1be 0e01 	subs.w	lr, lr, #1
 800c8a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c8a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c8a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c8ac:	d1ed      	bne.n	800c88a <__ieee754_sqrt+0x8a>
 800c8ae:	4674      	mov	r4, lr
 800c8b0:	2720      	movs	r7, #32
 800c8b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c8b6:	4563      	cmp	r3, ip
 800c8b8:	eb01 000e 	add.w	r0, r1, lr
 800c8bc:	dc02      	bgt.n	800c8c4 <__ieee754_sqrt+0xc4>
 800c8be:	d113      	bne.n	800c8e8 <__ieee754_sqrt+0xe8>
 800c8c0:	4290      	cmp	r0, r2
 800c8c2:	d811      	bhi.n	800c8e8 <__ieee754_sqrt+0xe8>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	eb00 0e01 	add.w	lr, r0, r1
 800c8ca:	da57      	bge.n	800c97c <__ieee754_sqrt+0x17c>
 800c8cc:	f1be 0f00 	cmp.w	lr, #0
 800c8d0:	db54      	blt.n	800c97c <__ieee754_sqrt+0x17c>
 800c8d2:	f10c 0801 	add.w	r8, ip, #1
 800c8d6:	eba3 030c 	sub.w	r3, r3, ip
 800c8da:	4290      	cmp	r0, r2
 800c8dc:	bf88      	it	hi
 800c8de:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c8e2:	1a12      	subs	r2, r2, r0
 800c8e4:	440c      	add	r4, r1
 800c8e6:	46c4      	mov	ip, r8
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	3f01      	subs	r7, #1
 800c8ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c8f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c8f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c8f8:	d1dd      	bne.n	800c8b6 <__ieee754_sqrt+0xb6>
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	d01b      	beq.n	800c936 <__ieee754_sqrt+0x136>
 800c8fe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c9ac <__ieee754_sqrt+0x1ac>
 800c902:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c9b0 <__ieee754_sqrt+0x1b0>
 800c906:	e9da 0100 	ldrd	r0, r1, [sl]
 800c90a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c90e:	f7f3 fcdb 	bl	80002c8 <__aeabi_dsub>
 800c912:	e9da 8900 	ldrd	r8, r9, [sl]
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	4640      	mov	r0, r8
 800c91c:	4649      	mov	r1, r9
 800c91e:	f7f4 f907 	bl	8000b30 <__aeabi_dcmple>
 800c922:	b140      	cbz	r0, 800c936 <__ieee754_sqrt+0x136>
 800c924:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c928:	e9da 0100 	ldrd	r0, r1, [sl]
 800c92c:	e9db 2300 	ldrd	r2, r3, [fp]
 800c930:	d126      	bne.n	800c980 <__ieee754_sqrt+0x180>
 800c932:	3501      	adds	r5, #1
 800c934:	463c      	mov	r4, r7
 800c936:	106a      	asrs	r2, r5, #1
 800c938:	0863      	lsrs	r3, r4, #1
 800c93a:	07e9      	lsls	r1, r5, #31
 800c93c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c940:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c944:	bf48      	it	mi
 800c946:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c94a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c94e:	461c      	mov	r4, r3
 800c950:	e76d      	b.n	800c82e <__ieee754_sqrt+0x2e>
 800c952:	0ad3      	lsrs	r3, r2, #11
 800c954:	3815      	subs	r0, #21
 800c956:	0552      	lsls	r2, r2, #21
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0fa      	beq.n	800c952 <__ieee754_sqrt+0x152>
 800c95c:	02dc      	lsls	r4, r3, #11
 800c95e:	d50a      	bpl.n	800c976 <__ieee754_sqrt+0x176>
 800c960:	f1c1 0420 	rsb	r4, r1, #32
 800c964:	fa22 f404 	lsr.w	r4, r2, r4
 800c968:	1e4d      	subs	r5, r1, #1
 800c96a:	408a      	lsls	r2, r1
 800c96c:	4323      	orrs	r3, r4
 800c96e:	1b41      	subs	r1, r0, r5
 800c970:	e772      	b.n	800c858 <__ieee754_sqrt+0x58>
 800c972:	4608      	mov	r0, r1
 800c974:	e7f0      	b.n	800c958 <__ieee754_sqrt+0x158>
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	3101      	adds	r1, #1
 800c97a:	e7ef      	b.n	800c95c <__ieee754_sqrt+0x15c>
 800c97c:	46e0      	mov	r8, ip
 800c97e:	e7aa      	b.n	800c8d6 <__ieee754_sqrt+0xd6>
 800c980:	f7f3 fca4 	bl	80002cc <__adddf3>
 800c984:	e9da 8900 	ldrd	r8, r9, [sl]
 800c988:	4602      	mov	r2, r0
 800c98a:	460b      	mov	r3, r1
 800c98c:	4640      	mov	r0, r8
 800c98e:	4649      	mov	r1, r9
 800c990:	f7f4 f8c4 	bl	8000b1c <__aeabi_dcmplt>
 800c994:	b120      	cbz	r0, 800c9a0 <__ieee754_sqrt+0x1a0>
 800c996:	1ca0      	adds	r0, r4, #2
 800c998:	bf08      	it	eq
 800c99a:	3501      	addeq	r5, #1
 800c99c:	3402      	adds	r4, #2
 800c99e:	e7ca      	b.n	800c936 <__ieee754_sqrt+0x136>
 800c9a0:	3401      	adds	r4, #1
 800c9a2:	f024 0401 	bic.w	r4, r4, #1
 800c9a6:	e7c6      	b.n	800c936 <__ieee754_sqrt+0x136>
 800c9a8:	7ff00000 	.word	0x7ff00000
 800c9ac:	200001d8 	.word	0x200001d8
 800c9b0:	200001e0 	.word	0x200001e0
 800c9b4:	00000000 	.word	0x00000000

0800c9b8 <__kernel_cos>:
 800c9b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9bc:	ec57 6b10 	vmov	r6, r7, d0
 800c9c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c9c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c9c8:	ed8d 1b00 	vstr	d1, [sp]
 800c9cc:	da07      	bge.n	800c9de <__kernel_cos+0x26>
 800c9ce:	ee10 0a10 	vmov	r0, s0
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f7f4 f8e0 	bl	8000b98 <__aeabi_d2iz>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f000 8088 	beq.w	800caee <__kernel_cos+0x136>
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	f7f3 fe27 	bl	8000638 <__aeabi_dmul>
 800c9ea:	4b51      	ldr	r3, [pc, #324]	; (800cb30 <__kernel_cos+0x178>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	460d      	mov	r5, r1
 800c9f2:	f7f3 fe21 	bl	8000638 <__aeabi_dmul>
 800c9f6:	a340      	add	r3, pc, #256	; (adr r3, 800caf8 <__kernel_cos+0x140>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	468b      	mov	fp, r1
 800ca00:	4620      	mov	r0, r4
 800ca02:	4629      	mov	r1, r5
 800ca04:	f7f3 fe18 	bl	8000638 <__aeabi_dmul>
 800ca08:	a33d      	add	r3, pc, #244	; (adr r3, 800cb00 <__kernel_cos+0x148>)
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	f7f3 fc5d 	bl	80002cc <__adddf3>
 800ca12:	4622      	mov	r2, r4
 800ca14:	462b      	mov	r3, r5
 800ca16:	f7f3 fe0f 	bl	8000638 <__aeabi_dmul>
 800ca1a:	a33b      	add	r3, pc, #236	; (adr r3, 800cb08 <__kernel_cos+0x150>)
 800ca1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca20:	f7f3 fc52 	bl	80002c8 <__aeabi_dsub>
 800ca24:	4622      	mov	r2, r4
 800ca26:	462b      	mov	r3, r5
 800ca28:	f7f3 fe06 	bl	8000638 <__aeabi_dmul>
 800ca2c:	a338      	add	r3, pc, #224	; (adr r3, 800cb10 <__kernel_cos+0x158>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	f7f3 fc4b 	bl	80002cc <__adddf3>
 800ca36:	4622      	mov	r2, r4
 800ca38:	462b      	mov	r3, r5
 800ca3a:	f7f3 fdfd 	bl	8000638 <__aeabi_dmul>
 800ca3e:	a336      	add	r3, pc, #216	; (adr r3, 800cb18 <__kernel_cos+0x160>)
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f7f3 fc40 	bl	80002c8 <__aeabi_dsub>
 800ca48:	4622      	mov	r2, r4
 800ca4a:	462b      	mov	r3, r5
 800ca4c:	f7f3 fdf4 	bl	8000638 <__aeabi_dmul>
 800ca50:	a333      	add	r3, pc, #204	; (adr r3, 800cb20 <__kernel_cos+0x168>)
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	f7f3 fc39 	bl	80002cc <__adddf3>
 800ca5a:	4622      	mov	r2, r4
 800ca5c:	462b      	mov	r3, r5
 800ca5e:	f7f3 fdeb 	bl	8000638 <__aeabi_dmul>
 800ca62:	4622      	mov	r2, r4
 800ca64:	462b      	mov	r3, r5
 800ca66:	f7f3 fde7 	bl	8000638 <__aeabi_dmul>
 800ca6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca6e:	4604      	mov	r4, r0
 800ca70:	460d      	mov	r5, r1
 800ca72:	4630      	mov	r0, r6
 800ca74:	4639      	mov	r1, r7
 800ca76:	f7f3 fddf 	bl	8000638 <__aeabi_dmul>
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	4629      	mov	r1, r5
 800ca80:	4620      	mov	r0, r4
 800ca82:	f7f3 fc21 	bl	80002c8 <__aeabi_dsub>
 800ca86:	4b2b      	ldr	r3, [pc, #172]	; (800cb34 <__kernel_cos+0x17c>)
 800ca88:	4598      	cmp	r8, r3
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	460f      	mov	r7, r1
 800ca8e:	dc10      	bgt.n	800cab2 <__kernel_cos+0xfa>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	4650      	mov	r0, sl
 800ca96:	4659      	mov	r1, fp
 800ca98:	f7f3 fc16 	bl	80002c8 <__aeabi_dsub>
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4926      	ldr	r1, [pc, #152]	; (800cb38 <__kernel_cos+0x180>)
 800caa0:	4602      	mov	r2, r0
 800caa2:	2000      	movs	r0, #0
 800caa4:	f7f3 fc10 	bl	80002c8 <__aeabi_dsub>
 800caa8:	ec41 0b10 	vmov	d0, r0, r1
 800caac:	b003      	add	sp, #12
 800caae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab2:	4b22      	ldr	r3, [pc, #136]	; (800cb3c <__kernel_cos+0x184>)
 800cab4:	4920      	ldr	r1, [pc, #128]	; (800cb38 <__kernel_cos+0x180>)
 800cab6:	4598      	cmp	r8, r3
 800cab8:	bfcc      	ite	gt
 800caba:	4d21      	ldrgt	r5, [pc, #132]	; (800cb40 <__kernel_cos+0x188>)
 800cabc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cac0:	2400      	movs	r4, #0
 800cac2:	4622      	mov	r2, r4
 800cac4:	462b      	mov	r3, r5
 800cac6:	2000      	movs	r0, #0
 800cac8:	f7f3 fbfe 	bl	80002c8 <__aeabi_dsub>
 800cacc:	4622      	mov	r2, r4
 800cace:	4680      	mov	r8, r0
 800cad0:	4689      	mov	r9, r1
 800cad2:	462b      	mov	r3, r5
 800cad4:	4650      	mov	r0, sl
 800cad6:	4659      	mov	r1, fp
 800cad8:	f7f3 fbf6 	bl	80002c8 <__aeabi_dsub>
 800cadc:	4632      	mov	r2, r6
 800cade:	463b      	mov	r3, r7
 800cae0:	f7f3 fbf2 	bl	80002c8 <__aeabi_dsub>
 800cae4:	4602      	mov	r2, r0
 800cae6:	460b      	mov	r3, r1
 800cae8:	4640      	mov	r0, r8
 800caea:	4649      	mov	r1, r9
 800caec:	e7da      	b.n	800caa4 <__kernel_cos+0xec>
 800caee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800cb28 <__kernel_cos+0x170>
 800caf2:	e7db      	b.n	800caac <__kernel_cos+0xf4>
 800caf4:	f3af 8000 	nop.w
 800caf8:	be8838d4 	.word	0xbe8838d4
 800cafc:	bda8fae9 	.word	0xbda8fae9
 800cb00:	bdb4b1c4 	.word	0xbdb4b1c4
 800cb04:	3e21ee9e 	.word	0x3e21ee9e
 800cb08:	809c52ad 	.word	0x809c52ad
 800cb0c:	3e927e4f 	.word	0x3e927e4f
 800cb10:	19cb1590 	.word	0x19cb1590
 800cb14:	3efa01a0 	.word	0x3efa01a0
 800cb18:	16c15177 	.word	0x16c15177
 800cb1c:	3f56c16c 	.word	0x3f56c16c
 800cb20:	5555554c 	.word	0x5555554c
 800cb24:	3fa55555 	.word	0x3fa55555
 800cb28:	00000000 	.word	0x00000000
 800cb2c:	3ff00000 	.word	0x3ff00000
 800cb30:	3fe00000 	.word	0x3fe00000
 800cb34:	3fd33332 	.word	0x3fd33332
 800cb38:	3ff00000 	.word	0x3ff00000
 800cb3c:	3fe90000 	.word	0x3fe90000
 800cb40:	3fd20000 	.word	0x3fd20000
 800cb44:	00000000 	.word	0x00000000

0800cb48 <__kernel_sin>:
 800cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4c:	ed2d 8b04 	vpush	{d8-d9}
 800cb50:	eeb0 8a41 	vmov.f32	s16, s2
 800cb54:	eef0 8a61 	vmov.f32	s17, s3
 800cb58:	ec55 4b10 	vmov	r4, r5, d0
 800cb5c:	b083      	sub	sp, #12
 800cb5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cb62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cb66:	9001      	str	r0, [sp, #4]
 800cb68:	da06      	bge.n	800cb78 <__kernel_sin+0x30>
 800cb6a:	ee10 0a10 	vmov	r0, s0
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f7f4 f812 	bl	8000b98 <__aeabi_d2iz>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d051      	beq.n	800cc1c <__kernel_sin+0xd4>
 800cb78:	4622      	mov	r2, r4
 800cb7a:	462b      	mov	r3, r5
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	f7f3 fd5a 	bl	8000638 <__aeabi_dmul>
 800cb84:	4682      	mov	sl, r0
 800cb86:	468b      	mov	fp, r1
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7f3 fd52 	bl	8000638 <__aeabi_dmul>
 800cb94:	a341      	add	r3, pc, #260	; (adr r3, 800cc9c <__kernel_sin+0x154>)
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	4680      	mov	r8, r0
 800cb9c:	4689      	mov	r9, r1
 800cb9e:	4650      	mov	r0, sl
 800cba0:	4659      	mov	r1, fp
 800cba2:	f7f3 fd49 	bl	8000638 <__aeabi_dmul>
 800cba6:	a33f      	add	r3, pc, #252	; (adr r3, 800cca4 <__kernel_sin+0x15c>)
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	f7f3 fb8c 	bl	80002c8 <__aeabi_dsub>
 800cbb0:	4652      	mov	r2, sl
 800cbb2:	465b      	mov	r3, fp
 800cbb4:	f7f3 fd40 	bl	8000638 <__aeabi_dmul>
 800cbb8:	a33c      	add	r3, pc, #240	; (adr r3, 800ccac <__kernel_sin+0x164>)
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	f7f3 fb85 	bl	80002cc <__adddf3>
 800cbc2:	4652      	mov	r2, sl
 800cbc4:	465b      	mov	r3, fp
 800cbc6:	f7f3 fd37 	bl	8000638 <__aeabi_dmul>
 800cbca:	a33a      	add	r3, pc, #232	; (adr r3, 800ccb4 <__kernel_sin+0x16c>)
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f7f3 fb7a 	bl	80002c8 <__aeabi_dsub>
 800cbd4:	4652      	mov	r2, sl
 800cbd6:	465b      	mov	r3, fp
 800cbd8:	f7f3 fd2e 	bl	8000638 <__aeabi_dmul>
 800cbdc:	a337      	add	r3, pc, #220	; (adr r3, 800ccbc <__kernel_sin+0x174>)
 800cbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe2:	f7f3 fb73 	bl	80002cc <__adddf3>
 800cbe6:	9b01      	ldr	r3, [sp, #4]
 800cbe8:	4606      	mov	r6, r0
 800cbea:	460f      	mov	r7, r1
 800cbec:	b9eb      	cbnz	r3, 800cc2a <__kernel_sin+0xe2>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	4650      	mov	r0, sl
 800cbf4:	4659      	mov	r1, fp
 800cbf6:	f7f3 fd1f 	bl	8000638 <__aeabi_dmul>
 800cbfa:	a325      	add	r3, pc, #148	; (adr r3, 800cc90 <__kernel_sin+0x148>)
 800cbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc00:	f7f3 fb62 	bl	80002c8 <__aeabi_dsub>
 800cc04:	4642      	mov	r2, r8
 800cc06:	464b      	mov	r3, r9
 800cc08:	f7f3 fd16 	bl	8000638 <__aeabi_dmul>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	460b      	mov	r3, r1
 800cc10:	4620      	mov	r0, r4
 800cc12:	4629      	mov	r1, r5
 800cc14:	f7f3 fb5a 	bl	80002cc <__adddf3>
 800cc18:	4604      	mov	r4, r0
 800cc1a:	460d      	mov	r5, r1
 800cc1c:	ec45 4b10 	vmov	d0, r4, r5
 800cc20:	b003      	add	sp, #12
 800cc22:	ecbd 8b04 	vpop	{d8-d9}
 800cc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2a:	4b1b      	ldr	r3, [pc, #108]	; (800cc98 <__kernel_sin+0x150>)
 800cc2c:	ec51 0b18 	vmov	r0, r1, d8
 800cc30:	2200      	movs	r2, #0
 800cc32:	f7f3 fd01 	bl	8000638 <__aeabi_dmul>
 800cc36:	4632      	mov	r2, r6
 800cc38:	ec41 0b19 	vmov	d9, r0, r1
 800cc3c:	463b      	mov	r3, r7
 800cc3e:	4640      	mov	r0, r8
 800cc40:	4649      	mov	r1, r9
 800cc42:	f7f3 fcf9 	bl	8000638 <__aeabi_dmul>
 800cc46:	4602      	mov	r2, r0
 800cc48:	460b      	mov	r3, r1
 800cc4a:	ec51 0b19 	vmov	r0, r1, d9
 800cc4e:	f7f3 fb3b 	bl	80002c8 <__aeabi_dsub>
 800cc52:	4652      	mov	r2, sl
 800cc54:	465b      	mov	r3, fp
 800cc56:	f7f3 fcef 	bl	8000638 <__aeabi_dmul>
 800cc5a:	ec53 2b18 	vmov	r2, r3, d8
 800cc5e:	f7f3 fb33 	bl	80002c8 <__aeabi_dsub>
 800cc62:	a30b      	add	r3, pc, #44	; (adr r3, 800cc90 <__kernel_sin+0x148>)
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	4606      	mov	r6, r0
 800cc6a:	460f      	mov	r7, r1
 800cc6c:	4640      	mov	r0, r8
 800cc6e:	4649      	mov	r1, r9
 800cc70:	f7f3 fce2 	bl	8000638 <__aeabi_dmul>
 800cc74:	4602      	mov	r2, r0
 800cc76:	460b      	mov	r3, r1
 800cc78:	4630      	mov	r0, r6
 800cc7a:	4639      	mov	r1, r7
 800cc7c:	f7f3 fb26 	bl	80002cc <__adddf3>
 800cc80:	4602      	mov	r2, r0
 800cc82:	460b      	mov	r3, r1
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f3 fb1e 	bl	80002c8 <__aeabi_dsub>
 800cc8c:	e7c4      	b.n	800cc18 <__kernel_sin+0xd0>
 800cc8e:	bf00      	nop
 800cc90:	55555549 	.word	0x55555549
 800cc94:	3fc55555 	.word	0x3fc55555
 800cc98:	3fe00000 	.word	0x3fe00000
 800cc9c:	5acfd57c 	.word	0x5acfd57c
 800cca0:	3de5d93a 	.word	0x3de5d93a
 800cca4:	8a2b9ceb 	.word	0x8a2b9ceb
 800cca8:	3e5ae5e6 	.word	0x3e5ae5e6
 800ccac:	57b1fe7d 	.word	0x57b1fe7d
 800ccb0:	3ec71de3 	.word	0x3ec71de3
 800ccb4:	19c161d5 	.word	0x19c161d5
 800ccb8:	3f2a01a0 	.word	0x3f2a01a0
 800ccbc:	1110f8a6 	.word	0x1110f8a6
 800ccc0:	3f811111 	.word	0x3f811111
 800ccc4:	00000000 	.word	0x00000000

0800ccc8 <__ieee754_atan2>:
 800ccc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cccc:	ec57 6b11 	vmov	r6, r7, d1
 800ccd0:	4273      	negs	r3, r6
 800ccd2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ce50 <__ieee754_atan2+0x188>
 800ccd6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ccda:	4333      	orrs	r3, r6
 800ccdc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cce0:	4543      	cmp	r3, r8
 800cce2:	ec51 0b10 	vmov	r0, r1, d0
 800cce6:	ee11 5a10 	vmov	r5, s2
 800ccea:	d80a      	bhi.n	800cd02 <__ieee754_atan2+0x3a>
 800ccec:	4244      	negs	r4, r0
 800ccee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccf2:	4304      	orrs	r4, r0
 800ccf4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ccf8:	4544      	cmp	r4, r8
 800ccfa:	ee10 9a10 	vmov	r9, s0
 800ccfe:	468e      	mov	lr, r1
 800cd00:	d907      	bls.n	800cd12 <__ieee754_atan2+0x4a>
 800cd02:	4632      	mov	r2, r6
 800cd04:	463b      	mov	r3, r7
 800cd06:	f7f3 fae1 	bl	80002cc <__adddf3>
 800cd0a:	ec41 0b10 	vmov	d0, r0, r1
 800cd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd12:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800cd16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd1a:	4334      	orrs	r4, r6
 800cd1c:	d103      	bne.n	800cd26 <__ieee754_atan2+0x5e>
 800cd1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd22:	f7ff bb09 	b.w	800c338 <atan>
 800cd26:	17bc      	asrs	r4, r7, #30
 800cd28:	f004 0402 	and.w	r4, r4, #2
 800cd2c:	ea53 0909 	orrs.w	r9, r3, r9
 800cd30:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cd34:	d107      	bne.n	800cd46 <__ieee754_atan2+0x7e>
 800cd36:	2c02      	cmp	r4, #2
 800cd38:	d05f      	beq.n	800cdfa <__ieee754_atan2+0x132>
 800cd3a:	2c03      	cmp	r4, #3
 800cd3c:	d1e5      	bne.n	800cd0a <__ieee754_atan2+0x42>
 800cd3e:	a140      	add	r1, pc, #256	; (adr r1, 800ce40 <__ieee754_atan2+0x178>)
 800cd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd44:	e7e1      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cd46:	4315      	orrs	r5, r2
 800cd48:	d106      	bne.n	800cd58 <__ieee754_atan2+0x90>
 800cd4a:	f1be 0f00 	cmp.w	lr, #0
 800cd4e:	da5f      	bge.n	800ce10 <__ieee754_atan2+0x148>
 800cd50:	a13d      	add	r1, pc, #244	; (adr r1, 800ce48 <__ieee754_atan2+0x180>)
 800cd52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd56:	e7d8      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cd58:	4542      	cmp	r2, r8
 800cd5a:	d10f      	bne.n	800cd7c <__ieee754_atan2+0xb4>
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cd62:	d107      	bne.n	800cd74 <__ieee754_atan2+0xac>
 800cd64:	2c02      	cmp	r4, #2
 800cd66:	d84c      	bhi.n	800ce02 <__ieee754_atan2+0x13a>
 800cd68:	4b33      	ldr	r3, [pc, #204]	; (800ce38 <__ieee754_atan2+0x170>)
 800cd6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd72:	e7ca      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cd74:	2c02      	cmp	r4, #2
 800cd76:	d848      	bhi.n	800ce0a <__ieee754_atan2+0x142>
 800cd78:	4b30      	ldr	r3, [pc, #192]	; (800ce3c <__ieee754_atan2+0x174>)
 800cd7a:	e7f6      	b.n	800cd6a <__ieee754_atan2+0xa2>
 800cd7c:	4543      	cmp	r3, r8
 800cd7e:	d0e4      	beq.n	800cd4a <__ieee754_atan2+0x82>
 800cd80:	1a9b      	subs	r3, r3, r2
 800cd82:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cd86:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cd8a:	da1e      	bge.n	800cdca <__ieee754_atan2+0x102>
 800cd8c:	2f00      	cmp	r7, #0
 800cd8e:	da01      	bge.n	800cd94 <__ieee754_atan2+0xcc>
 800cd90:	323c      	adds	r2, #60	; 0x3c
 800cd92:	db1e      	blt.n	800cdd2 <__ieee754_atan2+0x10a>
 800cd94:	4632      	mov	r2, r6
 800cd96:	463b      	mov	r3, r7
 800cd98:	f7f3 fd78 	bl	800088c <__aeabi_ddiv>
 800cd9c:	ec41 0b10 	vmov	d0, r0, r1
 800cda0:	f7ff fcbe 	bl	800c720 <fabs>
 800cda4:	f7ff fac8 	bl	800c338 <atan>
 800cda8:	ec51 0b10 	vmov	r0, r1, d0
 800cdac:	2c01      	cmp	r4, #1
 800cdae:	d013      	beq.n	800cdd8 <__ieee754_atan2+0x110>
 800cdb0:	2c02      	cmp	r4, #2
 800cdb2:	d015      	beq.n	800cde0 <__ieee754_atan2+0x118>
 800cdb4:	2c00      	cmp	r4, #0
 800cdb6:	d0a8      	beq.n	800cd0a <__ieee754_atan2+0x42>
 800cdb8:	a317      	add	r3, pc, #92	; (adr r3, 800ce18 <__ieee754_atan2+0x150>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	f7f3 fa83 	bl	80002c8 <__aeabi_dsub>
 800cdc2:	a317      	add	r3, pc, #92	; (adr r3, 800ce20 <__ieee754_atan2+0x158>)
 800cdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc8:	e014      	b.n	800cdf4 <__ieee754_atan2+0x12c>
 800cdca:	a117      	add	r1, pc, #92	; (adr r1, 800ce28 <__ieee754_atan2+0x160>)
 800cdcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdd0:	e7ec      	b.n	800cdac <__ieee754_atan2+0xe4>
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	e7e9      	b.n	800cdac <__ieee754_atan2+0xe4>
 800cdd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cddc:	4619      	mov	r1, r3
 800cdde:	e794      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cde0:	a30d      	add	r3, pc, #52	; (adr r3, 800ce18 <__ieee754_atan2+0x150>)
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	f7f3 fa6f 	bl	80002c8 <__aeabi_dsub>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	a10c      	add	r1, pc, #48	; (adr r1, 800ce20 <__ieee754_atan2+0x158>)
 800cdf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdf4:	f7f3 fa68 	bl	80002c8 <__aeabi_dsub>
 800cdf8:	e787      	b.n	800cd0a <__ieee754_atan2+0x42>
 800cdfa:	a109      	add	r1, pc, #36	; (adr r1, 800ce20 <__ieee754_atan2+0x158>)
 800cdfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce00:	e783      	b.n	800cd0a <__ieee754_atan2+0x42>
 800ce02:	a10b      	add	r1, pc, #44	; (adr r1, 800ce30 <__ieee754_atan2+0x168>)
 800ce04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce08:	e77f      	b.n	800cd0a <__ieee754_atan2+0x42>
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	e77c      	b.n	800cd0a <__ieee754_atan2+0x42>
 800ce10:	a105      	add	r1, pc, #20	; (adr r1, 800ce28 <__ieee754_atan2+0x160>)
 800ce12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce16:	e778      	b.n	800cd0a <__ieee754_atan2+0x42>
 800ce18:	33145c07 	.word	0x33145c07
 800ce1c:	3ca1a626 	.word	0x3ca1a626
 800ce20:	54442d18 	.word	0x54442d18
 800ce24:	400921fb 	.word	0x400921fb
 800ce28:	54442d18 	.word	0x54442d18
 800ce2c:	3ff921fb 	.word	0x3ff921fb
 800ce30:	54442d18 	.word	0x54442d18
 800ce34:	3fe921fb 	.word	0x3fe921fb
 800ce38:	0800ee10 	.word	0x0800ee10
 800ce3c:	0800ee28 	.word	0x0800ee28
 800ce40:	54442d18 	.word	0x54442d18
 800ce44:	c00921fb 	.word	0xc00921fb
 800ce48:	54442d18 	.word	0x54442d18
 800ce4c:	bff921fb 	.word	0xbff921fb
 800ce50:	7ff00000 	.word	0x7ff00000

0800ce54 <__ieee754_fmod>:
 800ce54:	ec53 2b11 	vmov	r2, r3, d1
 800ce58:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800ce5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce60:	ea5c 0402 	orrs.w	r4, ip, r2
 800ce64:	ec51 0b10 	vmov	r0, r1, d0
 800ce68:	ee11 7a10 	vmov	r7, s2
 800ce6c:	ee11 ea10 	vmov	lr, s2
 800ce70:	461e      	mov	r6, r3
 800ce72:	d00c      	beq.n	800ce8e <__ieee754_fmod+0x3a>
 800ce74:	4c78      	ldr	r4, [pc, #480]	; (800d058 <__ieee754_fmod+0x204>)
 800ce76:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ce7a:	45a0      	cmp	r8, r4
 800ce7c:	4689      	mov	r9, r1
 800ce7e:	dc06      	bgt.n	800ce8e <__ieee754_fmod+0x3a>
 800ce80:	4254      	negs	r4, r2
 800ce82:	4d76      	ldr	r5, [pc, #472]	; (800d05c <__ieee754_fmod+0x208>)
 800ce84:	4314      	orrs	r4, r2
 800ce86:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800ce8a:	42ac      	cmp	r4, r5
 800ce8c:	d909      	bls.n	800cea2 <__ieee754_fmod+0x4e>
 800ce8e:	f7f3 fbd3 	bl	8000638 <__aeabi_dmul>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	f7f3 fcf9 	bl	800088c <__aeabi_ddiv>
 800ce9a:	ec41 0b10 	vmov	d0, r0, r1
 800ce9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cea2:	45e0      	cmp	r8, ip
 800cea4:	ee10 aa10 	vmov	sl, s0
 800cea8:	ee10 4a10 	vmov	r4, s0
 800ceac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ceb0:	dc09      	bgt.n	800cec6 <__ieee754_fmod+0x72>
 800ceb2:	dbf2      	blt.n	800ce9a <__ieee754_fmod+0x46>
 800ceb4:	4290      	cmp	r0, r2
 800ceb6:	d3f0      	bcc.n	800ce9a <__ieee754_fmod+0x46>
 800ceb8:	d105      	bne.n	800cec6 <__ieee754_fmod+0x72>
 800ceba:	4b69      	ldr	r3, [pc, #420]	; (800d060 <__ieee754_fmod+0x20c>)
 800cebc:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800cec0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cec4:	e7e9      	b.n	800ce9a <__ieee754_fmod+0x46>
 800cec6:	4a65      	ldr	r2, [pc, #404]	; (800d05c <__ieee754_fmod+0x208>)
 800cec8:	ea19 0f02 	tst.w	r9, r2
 800cecc:	d148      	bne.n	800cf60 <__ieee754_fmod+0x10c>
 800cece:	f1b8 0f00 	cmp.w	r8, #0
 800ced2:	d13d      	bne.n	800cf50 <__ieee754_fmod+0xfc>
 800ced4:	4963      	ldr	r1, [pc, #396]	; (800d064 <__ieee754_fmod+0x210>)
 800ced6:	4653      	mov	r3, sl
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	dc36      	bgt.n	800cf4a <__ieee754_fmod+0xf6>
 800cedc:	4216      	tst	r6, r2
 800cede:	d14f      	bne.n	800cf80 <__ieee754_fmod+0x12c>
 800cee0:	f1bc 0f00 	cmp.w	ip, #0
 800cee4:	d144      	bne.n	800cf70 <__ieee754_fmod+0x11c>
 800cee6:	4a5f      	ldr	r2, [pc, #380]	; (800d064 <__ieee754_fmod+0x210>)
 800cee8:	463b      	mov	r3, r7
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	dc3d      	bgt.n	800cf6a <__ieee754_fmod+0x116>
 800ceee:	485e      	ldr	r0, [pc, #376]	; (800d068 <__ieee754_fmod+0x214>)
 800cef0:	4281      	cmp	r1, r0
 800cef2:	db4a      	blt.n	800cf8a <__ieee754_fmod+0x136>
 800cef4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cefc:	485a      	ldr	r0, [pc, #360]	; (800d068 <__ieee754_fmod+0x214>)
 800cefe:	4282      	cmp	r2, r0
 800cf00:	db57      	blt.n	800cfb2 <__ieee754_fmod+0x15e>
 800cf02:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cf06:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800cf0a:	1a89      	subs	r1, r1, r2
 800cf0c:	1b98      	subs	r0, r3, r6
 800cf0e:	eba4 070e 	sub.w	r7, r4, lr
 800cf12:	2900      	cmp	r1, #0
 800cf14:	d162      	bne.n	800cfdc <__ieee754_fmod+0x188>
 800cf16:	4574      	cmp	r4, lr
 800cf18:	bf38      	it	cc
 800cf1a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	bfa4      	itt	ge
 800cf22:	463c      	movge	r4, r7
 800cf24:	4603      	movge	r3, r0
 800cf26:	ea53 0104 	orrs.w	r1, r3, r4
 800cf2a:	d0c6      	beq.n	800ceba <__ieee754_fmod+0x66>
 800cf2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf30:	db69      	blt.n	800d006 <__ieee754_fmod+0x1b2>
 800cf32:	494d      	ldr	r1, [pc, #308]	; (800d068 <__ieee754_fmod+0x214>)
 800cf34:	428a      	cmp	r2, r1
 800cf36:	db6c      	blt.n	800d012 <__ieee754_fmod+0x1be>
 800cf38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cf3c:	432b      	orrs	r3, r5
 800cf3e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800cf42:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cf46:	4620      	mov	r0, r4
 800cf48:	e7a7      	b.n	800ce9a <__ieee754_fmod+0x46>
 800cf4a:	3901      	subs	r1, #1
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	e7c3      	b.n	800ced8 <__ieee754_fmod+0x84>
 800cf50:	4945      	ldr	r1, [pc, #276]	; (800d068 <__ieee754_fmod+0x214>)
 800cf52:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	ddc0      	ble.n	800cedc <__ieee754_fmod+0x88>
 800cf5a:	3901      	subs	r1, #1
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	e7fa      	b.n	800cf56 <__ieee754_fmod+0x102>
 800cf60:	ea4f 5128 	mov.w	r1, r8, asr #20
 800cf64:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cf68:	e7b8      	b.n	800cedc <__ieee754_fmod+0x88>
 800cf6a:	3a01      	subs	r2, #1
 800cf6c:	005b      	lsls	r3, r3, #1
 800cf6e:	e7bc      	b.n	800ceea <__ieee754_fmod+0x96>
 800cf70:	4a3d      	ldr	r2, [pc, #244]	; (800d068 <__ieee754_fmod+0x214>)
 800cf72:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	ddb9      	ble.n	800ceee <__ieee754_fmod+0x9a>
 800cf7a:	3a01      	subs	r2, #1
 800cf7c:	005b      	lsls	r3, r3, #1
 800cf7e:	e7fa      	b.n	800cf76 <__ieee754_fmod+0x122>
 800cf80:	ea4f 522c 	mov.w	r2, ip, asr #20
 800cf84:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cf88:	e7b1      	b.n	800ceee <__ieee754_fmod+0x9a>
 800cf8a:	1a40      	subs	r0, r0, r1
 800cf8c:	281f      	cmp	r0, #31
 800cf8e:	dc0a      	bgt.n	800cfa6 <__ieee754_fmod+0x152>
 800cf90:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800cf94:	fa08 f800 	lsl.w	r8, r8, r0
 800cf98:	fa2a f303 	lsr.w	r3, sl, r3
 800cf9c:	ea43 0308 	orr.w	r3, r3, r8
 800cfa0:	fa0a f400 	lsl.w	r4, sl, r0
 800cfa4:	e7aa      	b.n	800cefc <__ieee754_fmod+0xa8>
 800cfa6:	4b31      	ldr	r3, [pc, #196]	; (800d06c <__ieee754_fmod+0x218>)
 800cfa8:	1a5b      	subs	r3, r3, r1
 800cfaa:	fa0a f303 	lsl.w	r3, sl, r3
 800cfae:	2400      	movs	r4, #0
 800cfb0:	e7a4      	b.n	800cefc <__ieee754_fmod+0xa8>
 800cfb2:	1a80      	subs	r0, r0, r2
 800cfb4:	281f      	cmp	r0, #31
 800cfb6:	dc0a      	bgt.n	800cfce <__ieee754_fmod+0x17a>
 800cfb8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800cfbc:	fa0c fc00 	lsl.w	ip, ip, r0
 800cfc0:	fa27 f606 	lsr.w	r6, r7, r6
 800cfc4:	ea46 060c 	orr.w	r6, r6, ip
 800cfc8:	fa07 fe00 	lsl.w	lr, r7, r0
 800cfcc:	e79d      	b.n	800cf0a <__ieee754_fmod+0xb6>
 800cfce:	4e27      	ldr	r6, [pc, #156]	; (800d06c <__ieee754_fmod+0x218>)
 800cfd0:	1ab6      	subs	r6, r6, r2
 800cfd2:	fa07 f606 	lsl.w	r6, r7, r6
 800cfd6:	f04f 0e00 	mov.w	lr, #0
 800cfda:	e796      	b.n	800cf0a <__ieee754_fmod+0xb6>
 800cfdc:	4574      	cmp	r4, lr
 800cfde:	bf38      	it	cc
 800cfe0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	da05      	bge.n	800cff4 <__ieee754_fmod+0x1a0>
 800cfe8:	0fe0      	lsrs	r0, r4, #31
 800cfea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800cfee:	0064      	lsls	r4, r4, #1
 800cff0:	3901      	subs	r1, #1
 800cff2:	e78b      	b.n	800cf0c <__ieee754_fmod+0xb8>
 800cff4:	ea50 0307 	orrs.w	r3, r0, r7
 800cff8:	f43f af5f 	beq.w	800ceba <__ieee754_fmod+0x66>
 800cffc:	0ffb      	lsrs	r3, r7, #31
 800cffe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d002:	007c      	lsls	r4, r7, #1
 800d004:	e7f4      	b.n	800cff0 <__ieee754_fmod+0x19c>
 800d006:	0fe1      	lsrs	r1, r4, #31
 800d008:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d00c:	0064      	lsls	r4, r4, #1
 800d00e:	3a01      	subs	r2, #1
 800d010:	e78c      	b.n	800cf2c <__ieee754_fmod+0xd8>
 800d012:	1a89      	subs	r1, r1, r2
 800d014:	2914      	cmp	r1, #20
 800d016:	dc0a      	bgt.n	800d02e <__ieee754_fmod+0x1da>
 800d018:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d01c:	fa03 f202 	lsl.w	r2, r3, r2
 800d020:	40cc      	lsrs	r4, r1
 800d022:	4322      	orrs	r2, r4
 800d024:	410b      	asrs	r3, r1
 800d026:	ea43 0105 	orr.w	r1, r3, r5
 800d02a:	4610      	mov	r0, r2
 800d02c:	e735      	b.n	800ce9a <__ieee754_fmod+0x46>
 800d02e:	291f      	cmp	r1, #31
 800d030:	dc07      	bgt.n	800d042 <__ieee754_fmod+0x1ee>
 800d032:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d036:	40cc      	lsrs	r4, r1
 800d038:	fa03 f202 	lsl.w	r2, r3, r2
 800d03c:	4322      	orrs	r2, r4
 800d03e:	462b      	mov	r3, r5
 800d040:	e7f1      	b.n	800d026 <__ieee754_fmod+0x1d2>
 800d042:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d046:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d04a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d04e:	32e2      	adds	r2, #226	; 0xe2
 800d050:	fa43 f202 	asr.w	r2, r3, r2
 800d054:	e7f3      	b.n	800d03e <__ieee754_fmod+0x1ea>
 800d056:	bf00      	nop
 800d058:	7fefffff 	.word	0x7fefffff
 800d05c:	7ff00000 	.word	0x7ff00000
 800d060:	0800ee40 	.word	0x0800ee40
 800d064:	fffffbed 	.word	0xfffffbed
 800d068:	fffffc02 	.word	0xfffffc02
 800d06c:	fffffbe2 	.word	0xfffffbe2

0800d070 <__ieee754_pow>:
 800d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	ed2d 8b06 	vpush	{d8-d10}
 800d078:	b089      	sub	sp, #36	; 0x24
 800d07a:	ed8d 1b00 	vstr	d1, [sp]
 800d07e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d082:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d086:	ea58 0102 	orrs.w	r1, r8, r2
 800d08a:	ec57 6b10 	vmov	r6, r7, d0
 800d08e:	d115      	bne.n	800d0bc <__ieee754_pow+0x4c>
 800d090:	19b3      	adds	r3, r6, r6
 800d092:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d096:	4152      	adcs	r2, r2
 800d098:	4299      	cmp	r1, r3
 800d09a:	4b89      	ldr	r3, [pc, #548]	; (800d2c0 <__ieee754_pow+0x250>)
 800d09c:	4193      	sbcs	r3, r2
 800d09e:	f080 84d1 	bcs.w	800da44 <__ieee754_pow+0x9d4>
 800d0a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	f7f3 f90f 	bl	80002cc <__adddf3>
 800d0ae:	ec41 0b10 	vmov	d0, r0, r1
 800d0b2:	b009      	add	sp, #36	; 0x24
 800d0b4:	ecbd 8b06 	vpop	{d8-d10}
 800d0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0bc:	4b81      	ldr	r3, [pc, #516]	; (800d2c4 <__ieee754_pow+0x254>)
 800d0be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d0c2:	429c      	cmp	r4, r3
 800d0c4:	ee10 aa10 	vmov	sl, s0
 800d0c8:	463d      	mov	r5, r7
 800d0ca:	dc06      	bgt.n	800d0da <__ieee754_pow+0x6a>
 800d0cc:	d101      	bne.n	800d0d2 <__ieee754_pow+0x62>
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	d1e7      	bne.n	800d0a2 <__ieee754_pow+0x32>
 800d0d2:	4598      	cmp	r8, r3
 800d0d4:	dc01      	bgt.n	800d0da <__ieee754_pow+0x6a>
 800d0d6:	d10f      	bne.n	800d0f8 <__ieee754_pow+0x88>
 800d0d8:	b172      	cbz	r2, 800d0f8 <__ieee754_pow+0x88>
 800d0da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d0de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d0e2:	ea55 050a 	orrs.w	r5, r5, sl
 800d0e6:	d1dc      	bne.n	800d0a2 <__ieee754_pow+0x32>
 800d0e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d0ec:	18db      	adds	r3, r3, r3
 800d0ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d0f2:	4152      	adcs	r2, r2
 800d0f4:	429d      	cmp	r5, r3
 800d0f6:	e7d0      	b.n	800d09a <__ieee754_pow+0x2a>
 800d0f8:	2d00      	cmp	r5, #0
 800d0fa:	da3b      	bge.n	800d174 <__ieee754_pow+0x104>
 800d0fc:	4b72      	ldr	r3, [pc, #456]	; (800d2c8 <__ieee754_pow+0x258>)
 800d0fe:	4598      	cmp	r8, r3
 800d100:	dc51      	bgt.n	800d1a6 <__ieee754_pow+0x136>
 800d102:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d106:	4598      	cmp	r8, r3
 800d108:	f340 84ab 	ble.w	800da62 <__ieee754_pow+0x9f2>
 800d10c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d114:	2b14      	cmp	r3, #20
 800d116:	dd0f      	ble.n	800d138 <__ieee754_pow+0xc8>
 800d118:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d11c:	fa22 f103 	lsr.w	r1, r2, r3
 800d120:	fa01 f303 	lsl.w	r3, r1, r3
 800d124:	4293      	cmp	r3, r2
 800d126:	f040 849c 	bne.w	800da62 <__ieee754_pow+0x9f2>
 800d12a:	f001 0101 	and.w	r1, r1, #1
 800d12e:	f1c1 0302 	rsb	r3, r1, #2
 800d132:	9304      	str	r3, [sp, #16]
 800d134:	b182      	cbz	r2, 800d158 <__ieee754_pow+0xe8>
 800d136:	e05f      	b.n	800d1f8 <__ieee754_pow+0x188>
 800d138:	2a00      	cmp	r2, #0
 800d13a:	d15b      	bne.n	800d1f4 <__ieee754_pow+0x184>
 800d13c:	f1c3 0314 	rsb	r3, r3, #20
 800d140:	fa48 f103 	asr.w	r1, r8, r3
 800d144:	fa01 f303 	lsl.w	r3, r1, r3
 800d148:	4543      	cmp	r3, r8
 800d14a:	f040 8487 	bne.w	800da5c <__ieee754_pow+0x9ec>
 800d14e:	f001 0101 	and.w	r1, r1, #1
 800d152:	f1c1 0302 	rsb	r3, r1, #2
 800d156:	9304      	str	r3, [sp, #16]
 800d158:	4b5c      	ldr	r3, [pc, #368]	; (800d2cc <__ieee754_pow+0x25c>)
 800d15a:	4598      	cmp	r8, r3
 800d15c:	d132      	bne.n	800d1c4 <__ieee754_pow+0x154>
 800d15e:	f1b9 0f00 	cmp.w	r9, #0
 800d162:	f280 8477 	bge.w	800da54 <__ieee754_pow+0x9e4>
 800d166:	4959      	ldr	r1, [pc, #356]	; (800d2cc <__ieee754_pow+0x25c>)
 800d168:	4632      	mov	r2, r6
 800d16a:	463b      	mov	r3, r7
 800d16c:	2000      	movs	r0, #0
 800d16e:	f7f3 fb8d 	bl	800088c <__aeabi_ddiv>
 800d172:	e79c      	b.n	800d0ae <__ieee754_pow+0x3e>
 800d174:	2300      	movs	r3, #0
 800d176:	9304      	str	r3, [sp, #16]
 800d178:	2a00      	cmp	r2, #0
 800d17a:	d13d      	bne.n	800d1f8 <__ieee754_pow+0x188>
 800d17c:	4b51      	ldr	r3, [pc, #324]	; (800d2c4 <__ieee754_pow+0x254>)
 800d17e:	4598      	cmp	r8, r3
 800d180:	d1ea      	bne.n	800d158 <__ieee754_pow+0xe8>
 800d182:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d186:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d18a:	ea53 030a 	orrs.w	r3, r3, sl
 800d18e:	f000 8459 	beq.w	800da44 <__ieee754_pow+0x9d4>
 800d192:	4b4f      	ldr	r3, [pc, #316]	; (800d2d0 <__ieee754_pow+0x260>)
 800d194:	429c      	cmp	r4, r3
 800d196:	dd08      	ble.n	800d1aa <__ieee754_pow+0x13a>
 800d198:	f1b9 0f00 	cmp.w	r9, #0
 800d19c:	f2c0 8456 	blt.w	800da4c <__ieee754_pow+0x9dc>
 800d1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1a4:	e783      	b.n	800d0ae <__ieee754_pow+0x3e>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e7e5      	b.n	800d176 <__ieee754_pow+0x106>
 800d1aa:	f1b9 0f00 	cmp.w	r9, #0
 800d1ae:	f04f 0000 	mov.w	r0, #0
 800d1b2:	f04f 0100 	mov.w	r1, #0
 800d1b6:	f6bf af7a 	bge.w	800d0ae <__ieee754_pow+0x3e>
 800d1ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d1be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d1c2:	e774      	b.n	800d0ae <__ieee754_pow+0x3e>
 800d1c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d1c8:	d106      	bne.n	800d1d8 <__ieee754_pow+0x168>
 800d1ca:	4632      	mov	r2, r6
 800d1cc:	463b      	mov	r3, r7
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	4639      	mov	r1, r7
 800d1d2:	f7f3 fa31 	bl	8000638 <__aeabi_dmul>
 800d1d6:	e76a      	b.n	800d0ae <__ieee754_pow+0x3e>
 800d1d8:	4b3e      	ldr	r3, [pc, #248]	; (800d2d4 <__ieee754_pow+0x264>)
 800d1da:	4599      	cmp	r9, r3
 800d1dc:	d10c      	bne.n	800d1f8 <__ieee754_pow+0x188>
 800d1de:	2d00      	cmp	r5, #0
 800d1e0:	db0a      	blt.n	800d1f8 <__ieee754_pow+0x188>
 800d1e2:	ec47 6b10 	vmov	d0, r6, r7
 800d1e6:	b009      	add	sp, #36	; 0x24
 800d1e8:	ecbd 8b06 	vpop	{d8-d10}
 800d1ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	f7ff bb06 	b.w	800c800 <__ieee754_sqrt>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	9304      	str	r3, [sp, #16]
 800d1f8:	ec47 6b10 	vmov	d0, r6, r7
 800d1fc:	f7ff fa90 	bl	800c720 <fabs>
 800d200:	ec51 0b10 	vmov	r0, r1, d0
 800d204:	f1ba 0f00 	cmp.w	sl, #0
 800d208:	d129      	bne.n	800d25e <__ieee754_pow+0x1ee>
 800d20a:	b124      	cbz	r4, 800d216 <__ieee754_pow+0x1a6>
 800d20c:	4b2f      	ldr	r3, [pc, #188]	; (800d2cc <__ieee754_pow+0x25c>)
 800d20e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d212:	429a      	cmp	r2, r3
 800d214:	d123      	bne.n	800d25e <__ieee754_pow+0x1ee>
 800d216:	f1b9 0f00 	cmp.w	r9, #0
 800d21a:	da05      	bge.n	800d228 <__ieee754_pow+0x1b8>
 800d21c:	4602      	mov	r2, r0
 800d21e:	460b      	mov	r3, r1
 800d220:	2000      	movs	r0, #0
 800d222:	492a      	ldr	r1, [pc, #168]	; (800d2cc <__ieee754_pow+0x25c>)
 800d224:	f7f3 fb32 	bl	800088c <__aeabi_ddiv>
 800d228:	2d00      	cmp	r5, #0
 800d22a:	f6bf af40 	bge.w	800d0ae <__ieee754_pow+0x3e>
 800d22e:	9b04      	ldr	r3, [sp, #16]
 800d230:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d234:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d238:	431c      	orrs	r4, r3
 800d23a:	d108      	bne.n	800d24e <__ieee754_pow+0x1de>
 800d23c:	4602      	mov	r2, r0
 800d23e:	460b      	mov	r3, r1
 800d240:	4610      	mov	r0, r2
 800d242:	4619      	mov	r1, r3
 800d244:	f7f3 f840 	bl	80002c8 <__aeabi_dsub>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	e78f      	b.n	800d16e <__ieee754_pow+0xfe>
 800d24e:	9b04      	ldr	r3, [sp, #16]
 800d250:	2b01      	cmp	r3, #1
 800d252:	f47f af2c 	bne.w	800d0ae <__ieee754_pow+0x3e>
 800d256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d25a:	4619      	mov	r1, r3
 800d25c:	e727      	b.n	800d0ae <__ieee754_pow+0x3e>
 800d25e:	0feb      	lsrs	r3, r5, #31
 800d260:	3b01      	subs	r3, #1
 800d262:	9306      	str	r3, [sp, #24]
 800d264:	9a06      	ldr	r2, [sp, #24]
 800d266:	9b04      	ldr	r3, [sp, #16]
 800d268:	4313      	orrs	r3, r2
 800d26a:	d102      	bne.n	800d272 <__ieee754_pow+0x202>
 800d26c:	4632      	mov	r2, r6
 800d26e:	463b      	mov	r3, r7
 800d270:	e7e6      	b.n	800d240 <__ieee754_pow+0x1d0>
 800d272:	4b19      	ldr	r3, [pc, #100]	; (800d2d8 <__ieee754_pow+0x268>)
 800d274:	4598      	cmp	r8, r3
 800d276:	f340 80fb 	ble.w	800d470 <__ieee754_pow+0x400>
 800d27a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d27e:	4598      	cmp	r8, r3
 800d280:	4b13      	ldr	r3, [pc, #76]	; (800d2d0 <__ieee754_pow+0x260>)
 800d282:	dd0c      	ble.n	800d29e <__ieee754_pow+0x22e>
 800d284:	429c      	cmp	r4, r3
 800d286:	dc0f      	bgt.n	800d2a8 <__ieee754_pow+0x238>
 800d288:	f1b9 0f00 	cmp.w	r9, #0
 800d28c:	da0f      	bge.n	800d2ae <__ieee754_pow+0x23e>
 800d28e:	2000      	movs	r0, #0
 800d290:	b009      	add	sp, #36	; 0x24
 800d292:	ecbd 8b06 	vpop	{d8-d10}
 800d296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29a:	f000 bec2 	b.w	800e022 <__math_oflow>
 800d29e:	429c      	cmp	r4, r3
 800d2a0:	dbf2      	blt.n	800d288 <__ieee754_pow+0x218>
 800d2a2:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <__ieee754_pow+0x25c>)
 800d2a4:	429c      	cmp	r4, r3
 800d2a6:	dd19      	ble.n	800d2dc <__ieee754_pow+0x26c>
 800d2a8:	f1b9 0f00 	cmp.w	r9, #0
 800d2ac:	dcef      	bgt.n	800d28e <__ieee754_pow+0x21e>
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	b009      	add	sp, #36	; 0x24
 800d2b2:	ecbd 8b06 	vpop	{d8-d10}
 800d2b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ba:	f000 bea9 	b.w	800e010 <__math_uflow>
 800d2be:	bf00      	nop
 800d2c0:	fff00000 	.word	0xfff00000
 800d2c4:	7ff00000 	.word	0x7ff00000
 800d2c8:	433fffff 	.word	0x433fffff
 800d2cc:	3ff00000 	.word	0x3ff00000
 800d2d0:	3fefffff 	.word	0x3fefffff
 800d2d4:	3fe00000 	.word	0x3fe00000
 800d2d8:	41e00000 	.word	0x41e00000
 800d2dc:	4b60      	ldr	r3, [pc, #384]	; (800d460 <__ieee754_pow+0x3f0>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f7f2 fff2 	bl	80002c8 <__aeabi_dsub>
 800d2e4:	a354      	add	r3, pc, #336	; (adr r3, 800d438 <__ieee754_pow+0x3c8>)
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	460d      	mov	r5, r1
 800d2ee:	f7f3 f9a3 	bl	8000638 <__aeabi_dmul>
 800d2f2:	a353      	add	r3, pc, #332	; (adr r3, 800d440 <__ieee754_pow+0x3d0>)
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	4606      	mov	r6, r0
 800d2fa:	460f      	mov	r7, r1
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	4629      	mov	r1, r5
 800d300:	f7f3 f99a 	bl	8000638 <__aeabi_dmul>
 800d304:	4b57      	ldr	r3, [pc, #348]	; (800d464 <__ieee754_pow+0x3f4>)
 800d306:	4682      	mov	sl, r0
 800d308:	468b      	mov	fp, r1
 800d30a:	2200      	movs	r2, #0
 800d30c:	4620      	mov	r0, r4
 800d30e:	4629      	mov	r1, r5
 800d310:	f7f3 f992 	bl	8000638 <__aeabi_dmul>
 800d314:	4602      	mov	r2, r0
 800d316:	460b      	mov	r3, r1
 800d318:	a14b      	add	r1, pc, #300	; (adr r1, 800d448 <__ieee754_pow+0x3d8>)
 800d31a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d31e:	f7f2 ffd3 	bl	80002c8 <__aeabi_dsub>
 800d322:	4622      	mov	r2, r4
 800d324:	462b      	mov	r3, r5
 800d326:	f7f3 f987 	bl	8000638 <__aeabi_dmul>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	2000      	movs	r0, #0
 800d330:	494d      	ldr	r1, [pc, #308]	; (800d468 <__ieee754_pow+0x3f8>)
 800d332:	f7f2 ffc9 	bl	80002c8 <__aeabi_dsub>
 800d336:	4622      	mov	r2, r4
 800d338:	4680      	mov	r8, r0
 800d33a:	4689      	mov	r9, r1
 800d33c:	462b      	mov	r3, r5
 800d33e:	4620      	mov	r0, r4
 800d340:	4629      	mov	r1, r5
 800d342:	f7f3 f979 	bl	8000638 <__aeabi_dmul>
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	4640      	mov	r0, r8
 800d34c:	4649      	mov	r1, r9
 800d34e:	f7f3 f973 	bl	8000638 <__aeabi_dmul>
 800d352:	a33f      	add	r3, pc, #252	; (adr r3, 800d450 <__ieee754_pow+0x3e0>)
 800d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d358:	f7f3 f96e 	bl	8000638 <__aeabi_dmul>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	4650      	mov	r0, sl
 800d362:	4659      	mov	r1, fp
 800d364:	f7f2 ffb0 	bl	80002c8 <__aeabi_dsub>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4680      	mov	r8, r0
 800d36e:	4689      	mov	r9, r1
 800d370:	4630      	mov	r0, r6
 800d372:	4639      	mov	r1, r7
 800d374:	f7f2 ffaa 	bl	80002cc <__adddf3>
 800d378:	2000      	movs	r0, #0
 800d37a:	4632      	mov	r2, r6
 800d37c:	463b      	mov	r3, r7
 800d37e:	4604      	mov	r4, r0
 800d380:	460d      	mov	r5, r1
 800d382:	f7f2 ffa1 	bl	80002c8 <__aeabi_dsub>
 800d386:	4602      	mov	r2, r0
 800d388:	460b      	mov	r3, r1
 800d38a:	4640      	mov	r0, r8
 800d38c:	4649      	mov	r1, r9
 800d38e:	f7f2 ff9b 	bl	80002c8 <__aeabi_dsub>
 800d392:	9b04      	ldr	r3, [sp, #16]
 800d394:	9a06      	ldr	r2, [sp, #24]
 800d396:	3b01      	subs	r3, #1
 800d398:	4313      	orrs	r3, r2
 800d39a:	4682      	mov	sl, r0
 800d39c:	468b      	mov	fp, r1
 800d39e:	f040 81e7 	bne.w	800d770 <__ieee754_pow+0x700>
 800d3a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d458 <__ieee754_pow+0x3e8>
 800d3a6:	eeb0 8a47 	vmov.f32	s16, s14
 800d3aa:	eef0 8a67 	vmov.f32	s17, s15
 800d3ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d3b2:	2600      	movs	r6, #0
 800d3b4:	4632      	mov	r2, r6
 800d3b6:	463b      	mov	r3, r7
 800d3b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3bc:	f7f2 ff84 	bl	80002c8 <__aeabi_dsub>
 800d3c0:	4622      	mov	r2, r4
 800d3c2:	462b      	mov	r3, r5
 800d3c4:	f7f3 f938 	bl	8000638 <__aeabi_dmul>
 800d3c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3cc:	4680      	mov	r8, r0
 800d3ce:	4689      	mov	r9, r1
 800d3d0:	4650      	mov	r0, sl
 800d3d2:	4659      	mov	r1, fp
 800d3d4:	f7f3 f930 	bl	8000638 <__aeabi_dmul>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	460b      	mov	r3, r1
 800d3dc:	4640      	mov	r0, r8
 800d3de:	4649      	mov	r1, r9
 800d3e0:	f7f2 ff74 	bl	80002cc <__adddf3>
 800d3e4:	4632      	mov	r2, r6
 800d3e6:	463b      	mov	r3, r7
 800d3e8:	4680      	mov	r8, r0
 800d3ea:	4689      	mov	r9, r1
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	f7f3 f922 	bl	8000638 <__aeabi_dmul>
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	460d      	mov	r5, r1
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	4649      	mov	r1, r9
 800d3fe:	4640      	mov	r0, r8
 800d400:	f7f2 ff64 	bl	80002cc <__adddf3>
 800d404:	4b19      	ldr	r3, [pc, #100]	; (800d46c <__ieee754_pow+0x3fc>)
 800d406:	4299      	cmp	r1, r3
 800d408:	ec45 4b19 	vmov	d9, r4, r5
 800d40c:	4606      	mov	r6, r0
 800d40e:	460f      	mov	r7, r1
 800d410:	468b      	mov	fp, r1
 800d412:	f340 82f0 	ble.w	800d9f6 <__ieee754_pow+0x986>
 800d416:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d41a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d41e:	4303      	orrs	r3, r0
 800d420:	f000 81e4 	beq.w	800d7ec <__ieee754_pow+0x77c>
 800d424:	ec51 0b18 	vmov	r0, r1, d8
 800d428:	2200      	movs	r2, #0
 800d42a:	2300      	movs	r3, #0
 800d42c:	f7f3 fb76 	bl	8000b1c <__aeabi_dcmplt>
 800d430:	3800      	subs	r0, #0
 800d432:	bf18      	it	ne
 800d434:	2001      	movne	r0, #1
 800d436:	e72b      	b.n	800d290 <__ieee754_pow+0x220>
 800d438:	60000000 	.word	0x60000000
 800d43c:	3ff71547 	.word	0x3ff71547
 800d440:	f85ddf44 	.word	0xf85ddf44
 800d444:	3e54ae0b 	.word	0x3e54ae0b
 800d448:	55555555 	.word	0x55555555
 800d44c:	3fd55555 	.word	0x3fd55555
 800d450:	652b82fe 	.word	0x652b82fe
 800d454:	3ff71547 	.word	0x3ff71547
 800d458:	00000000 	.word	0x00000000
 800d45c:	bff00000 	.word	0xbff00000
 800d460:	3ff00000 	.word	0x3ff00000
 800d464:	3fd00000 	.word	0x3fd00000
 800d468:	3fe00000 	.word	0x3fe00000
 800d46c:	408fffff 	.word	0x408fffff
 800d470:	4bd5      	ldr	r3, [pc, #852]	; (800d7c8 <__ieee754_pow+0x758>)
 800d472:	402b      	ands	r3, r5
 800d474:	2200      	movs	r2, #0
 800d476:	b92b      	cbnz	r3, 800d484 <__ieee754_pow+0x414>
 800d478:	4bd4      	ldr	r3, [pc, #848]	; (800d7cc <__ieee754_pow+0x75c>)
 800d47a:	f7f3 f8dd 	bl	8000638 <__aeabi_dmul>
 800d47e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d482:	460c      	mov	r4, r1
 800d484:	1523      	asrs	r3, r4, #20
 800d486:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d48a:	4413      	add	r3, r2
 800d48c:	9305      	str	r3, [sp, #20]
 800d48e:	4bd0      	ldr	r3, [pc, #832]	; (800d7d0 <__ieee754_pow+0x760>)
 800d490:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d494:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d498:	429c      	cmp	r4, r3
 800d49a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d49e:	dd08      	ble.n	800d4b2 <__ieee754_pow+0x442>
 800d4a0:	4bcc      	ldr	r3, [pc, #816]	; (800d7d4 <__ieee754_pow+0x764>)
 800d4a2:	429c      	cmp	r4, r3
 800d4a4:	f340 8162 	ble.w	800d76c <__ieee754_pow+0x6fc>
 800d4a8:	9b05      	ldr	r3, [sp, #20]
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	9305      	str	r3, [sp, #20]
 800d4ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d4b2:	2400      	movs	r4, #0
 800d4b4:	00e3      	lsls	r3, r4, #3
 800d4b6:	9307      	str	r3, [sp, #28]
 800d4b8:	4bc7      	ldr	r3, [pc, #796]	; (800d7d8 <__ieee754_pow+0x768>)
 800d4ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d4be:	ed93 7b00 	vldr	d7, [r3]
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	ec53 2b17 	vmov	r2, r3, d7
 800d4c8:	eeb0 9a47 	vmov.f32	s18, s14
 800d4cc:	eef0 9a67 	vmov.f32	s19, s15
 800d4d0:	4682      	mov	sl, r0
 800d4d2:	f7f2 fef9 	bl	80002c8 <__aeabi_dsub>
 800d4d6:	4652      	mov	r2, sl
 800d4d8:	4606      	mov	r6, r0
 800d4da:	460f      	mov	r7, r1
 800d4dc:	462b      	mov	r3, r5
 800d4de:	ec51 0b19 	vmov	r0, r1, d9
 800d4e2:	f7f2 fef3 	bl	80002cc <__adddf3>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	49bb      	ldr	r1, [pc, #748]	; (800d7dc <__ieee754_pow+0x76c>)
 800d4ee:	f7f3 f9cd 	bl	800088c <__aeabi_ddiv>
 800d4f2:	ec41 0b1a 	vmov	d10, r0, r1
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	f7f3 f89b 	bl	8000638 <__aeabi_dmul>
 800d502:	2300      	movs	r3, #0
 800d504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d508:	9302      	str	r3, [sp, #8]
 800d50a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d50e:	46ab      	mov	fp, r5
 800d510:	106d      	asrs	r5, r5, #1
 800d512:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d516:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d51a:	ec41 0b18 	vmov	d8, r0, r1
 800d51e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d522:	2200      	movs	r2, #0
 800d524:	4640      	mov	r0, r8
 800d526:	4649      	mov	r1, r9
 800d528:	4614      	mov	r4, r2
 800d52a:	461d      	mov	r5, r3
 800d52c:	f7f3 f884 	bl	8000638 <__aeabi_dmul>
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	4630      	mov	r0, r6
 800d536:	4639      	mov	r1, r7
 800d538:	f7f2 fec6 	bl	80002c8 <__aeabi_dsub>
 800d53c:	ec53 2b19 	vmov	r2, r3, d9
 800d540:	4606      	mov	r6, r0
 800d542:	460f      	mov	r7, r1
 800d544:	4620      	mov	r0, r4
 800d546:	4629      	mov	r1, r5
 800d548:	f7f2 febe 	bl	80002c8 <__aeabi_dsub>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	4650      	mov	r0, sl
 800d552:	4659      	mov	r1, fp
 800d554:	f7f2 feb8 	bl	80002c8 <__aeabi_dsub>
 800d558:	4642      	mov	r2, r8
 800d55a:	464b      	mov	r3, r9
 800d55c:	f7f3 f86c 	bl	8000638 <__aeabi_dmul>
 800d560:	4602      	mov	r2, r0
 800d562:	460b      	mov	r3, r1
 800d564:	4630      	mov	r0, r6
 800d566:	4639      	mov	r1, r7
 800d568:	f7f2 feae 	bl	80002c8 <__aeabi_dsub>
 800d56c:	ec53 2b1a 	vmov	r2, r3, d10
 800d570:	f7f3 f862 	bl	8000638 <__aeabi_dmul>
 800d574:	ec53 2b18 	vmov	r2, r3, d8
 800d578:	ec41 0b19 	vmov	d9, r0, r1
 800d57c:	ec51 0b18 	vmov	r0, r1, d8
 800d580:	f7f3 f85a 	bl	8000638 <__aeabi_dmul>
 800d584:	a37c      	add	r3, pc, #496	; (adr r3, 800d778 <__ieee754_pow+0x708>)
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	4604      	mov	r4, r0
 800d58c:	460d      	mov	r5, r1
 800d58e:	f7f3 f853 	bl	8000638 <__aeabi_dmul>
 800d592:	a37b      	add	r3, pc, #492	; (adr r3, 800d780 <__ieee754_pow+0x710>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f2 fe98 	bl	80002cc <__adddf3>
 800d59c:	4622      	mov	r2, r4
 800d59e:	462b      	mov	r3, r5
 800d5a0:	f7f3 f84a 	bl	8000638 <__aeabi_dmul>
 800d5a4:	a378      	add	r3, pc, #480	; (adr r3, 800d788 <__ieee754_pow+0x718>)
 800d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5aa:	f7f2 fe8f 	bl	80002cc <__adddf3>
 800d5ae:	4622      	mov	r2, r4
 800d5b0:	462b      	mov	r3, r5
 800d5b2:	f7f3 f841 	bl	8000638 <__aeabi_dmul>
 800d5b6:	a376      	add	r3, pc, #472	; (adr r3, 800d790 <__ieee754_pow+0x720>)
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	f7f2 fe86 	bl	80002cc <__adddf3>
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	f7f3 f838 	bl	8000638 <__aeabi_dmul>
 800d5c8:	a373      	add	r3, pc, #460	; (adr r3, 800d798 <__ieee754_pow+0x728>)
 800d5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ce:	f7f2 fe7d 	bl	80002cc <__adddf3>
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	f7f3 f82f 	bl	8000638 <__aeabi_dmul>
 800d5da:	a371      	add	r3, pc, #452	; (adr r3, 800d7a0 <__ieee754_pow+0x730>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f7f2 fe74 	bl	80002cc <__adddf3>
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	460f      	mov	r7, r1
 800d5ea:	462b      	mov	r3, r5
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	f7f3 f822 	bl	8000638 <__aeabi_dmul>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	f7f3 f81c 	bl	8000638 <__aeabi_dmul>
 800d600:	4642      	mov	r2, r8
 800d602:	4604      	mov	r4, r0
 800d604:	460d      	mov	r5, r1
 800d606:	464b      	mov	r3, r9
 800d608:	ec51 0b18 	vmov	r0, r1, d8
 800d60c:	f7f2 fe5e 	bl	80002cc <__adddf3>
 800d610:	ec53 2b19 	vmov	r2, r3, d9
 800d614:	f7f3 f810 	bl	8000638 <__aeabi_dmul>
 800d618:	4622      	mov	r2, r4
 800d61a:	462b      	mov	r3, r5
 800d61c:	f7f2 fe56 	bl	80002cc <__adddf3>
 800d620:	4642      	mov	r2, r8
 800d622:	4682      	mov	sl, r0
 800d624:	468b      	mov	fp, r1
 800d626:	464b      	mov	r3, r9
 800d628:	4640      	mov	r0, r8
 800d62a:	4649      	mov	r1, r9
 800d62c:	f7f3 f804 	bl	8000638 <__aeabi_dmul>
 800d630:	4b6b      	ldr	r3, [pc, #428]	; (800d7e0 <__ieee754_pow+0x770>)
 800d632:	2200      	movs	r2, #0
 800d634:	4606      	mov	r6, r0
 800d636:	460f      	mov	r7, r1
 800d638:	f7f2 fe48 	bl	80002cc <__adddf3>
 800d63c:	4652      	mov	r2, sl
 800d63e:	465b      	mov	r3, fp
 800d640:	f7f2 fe44 	bl	80002cc <__adddf3>
 800d644:	2000      	movs	r0, #0
 800d646:	4604      	mov	r4, r0
 800d648:	460d      	mov	r5, r1
 800d64a:	4602      	mov	r2, r0
 800d64c:	460b      	mov	r3, r1
 800d64e:	4640      	mov	r0, r8
 800d650:	4649      	mov	r1, r9
 800d652:	f7f2 fff1 	bl	8000638 <__aeabi_dmul>
 800d656:	4b62      	ldr	r3, [pc, #392]	; (800d7e0 <__ieee754_pow+0x770>)
 800d658:	4680      	mov	r8, r0
 800d65a:	4689      	mov	r9, r1
 800d65c:	2200      	movs	r2, #0
 800d65e:	4620      	mov	r0, r4
 800d660:	4629      	mov	r1, r5
 800d662:	f7f2 fe31 	bl	80002c8 <__aeabi_dsub>
 800d666:	4632      	mov	r2, r6
 800d668:	463b      	mov	r3, r7
 800d66a:	f7f2 fe2d 	bl	80002c8 <__aeabi_dsub>
 800d66e:	4602      	mov	r2, r0
 800d670:	460b      	mov	r3, r1
 800d672:	4650      	mov	r0, sl
 800d674:	4659      	mov	r1, fp
 800d676:	f7f2 fe27 	bl	80002c8 <__aeabi_dsub>
 800d67a:	ec53 2b18 	vmov	r2, r3, d8
 800d67e:	f7f2 ffdb 	bl	8000638 <__aeabi_dmul>
 800d682:	4622      	mov	r2, r4
 800d684:	4606      	mov	r6, r0
 800d686:	460f      	mov	r7, r1
 800d688:	462b      	mov	r3, r5
 800d68a:	ec51 0b19 	vmov	r0, r1, d9
 800d68e:	f7f2 ffd3 	bl	8000638 <__aeabi_dmul>
 800d692:	4602      	mov	r2, r0
 800d694:	460b      	mov	r3, r1
 800d696:	4630      	mov	r0, r6
 800d698:	4639      	mov	r1, r7
 800d69a:	f7f2 fe17 	bl	80002cc <__adddf3>
 800d69e:	4606      	mov	r6, r0
 800d6a0:	460f      	mov	r7, r1
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	4649      	mov	r1, r9
 800d6aa:	f7f2 fe0f 	bl	80002cc <__adddf3>
 800d6ae:	a33e      	add	r3, pc, #248	; (adr r3, 800d7a8 <__ieee754_pow+0x738>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	460d      	mov	r5, r1
 800d6ba:	f7f2 ffbd 	bl	8000638 <__aeabi_dmul>
 800d6be:	4642      	mov	r2, r8
 800d6c0:	ec41 0b18 	vmov	d8, r0, r1
 800d6c4:	464b      	mov	r3, r9
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	f7f2 fdfd 	bl	80002c8 <__aeabi_dsub>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	4639      	mov	r1, r7
 800d6d6:	f7f2 fdf7 	bl	80002c8 <__aeabi_dsub>
 800d6da:	a335      	add	r3, pc, #212	; (adr r3, 800d7b0 <__ieee754_pow+0x740>)
 800d6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e0:	f7f2 ffaa 	bl	8000638 <__aeabi_dmul>
 800d6e4:	a334      	add	r3, pc, #208	; (adr r3, 800d7b8 <__ieee754_pow+0x748>)
 800d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	460f      	mov	r7, r1
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	f7f2 ffa1 	bl	8000638 <__aeabi_dmul>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	4639      	mov	r1, r7
 800d6fe:	f7f2 fde5 	bl	80002cc <__adddf3>
 800d702:	9a07      	ldr	r2, [sp, #28]
 800d704:	4b37      	ldr	r3, [pc, #220]	; (800d7e4 <__ieee754_pow+0x774>)
 800d706:	4413      	add	r3, r2
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	f7f2 fdde 	bl	80002cc <__adddf3>
 800d710:	4682      	mov	sl, r0
 800d712:	9805      	ldr	r0, [sp, #20]
 800d714:	468b      	mov	fp, r1
 800d716:	f7f2 ff25 	bl	8000564 <__aeabi_i2d>
 800d71a:	9a07      	ldr	r2, [sp, #28]
 800d71c:	4b32      	ldr	r3, [pc, #200]	; (800d7e8 <__ieee754_pow+0x778>)
 800d71e:	4413      	add	r3, r2
 800d720:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d724:	4606      	mov	r6, r0
 800d726:	460f      	mov	r7, r1
 800d728:	4652      	mov	r2, sl
 800d72a:	465b      	mov	r3, fp
 800d72c:	ec51 0b18 	vmov	r0, r1, d8
 800d730:	f7f2 fdcc 	bl	80002cc <__adddf3>
 800d734:	4642      	mov	r2, r8
 800d736:	464b      	mov	r3, r9
 800d738:	f7f2 fdc8 	bl	80002cc <__adddf3>
 800d73c:	4632      	mov	r2, r6
 800d73e:	463b      	mov	r3, r7
 800d740:	f7f2 fdc4 	bl	80002cc <__adddf3>
 800d744:	2000      	movs	r0, #0
 800d746:	4632      	mov	r2, r6
 800d748:	463b      	mov	r3, r7
 800d74a:	4604      	mov	r4, r0
 800d74c:	460d      	mov	r5, r1
 800d74e:	f7f2 fdbb 	bl	80002c8 <__aeabi_dsub>
 800d752:	4642      	mov	r2, r8
 800d754:	464b      	mov	r3, r9
 800d756:	f7f2 fdb7 	bl	80002c8 <__aeabi_dsub>
 800d75a:	ec53 2b18 	vmov	r2, r3, d8
 800d75e:	f7f2 fdb3 	bl	80002c8 <__aeabi_dsub>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	4650      	mov	r0, sl
 800d768:	4659      	mov	r1, fp
 800d76a:	e610      	b.n	800d38e <__ieee754_pow+0x31e>
 800d76c:	2401      	movs	r4, #1
 800d76e:	e6a1      	b.n	800d4b4 <__ieee754_pow+0x444>
 800d770:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d7c0 <__ieee754_pow+0x750>
 800d774:	e617      	b.n	800d3a6 <__ieee754_pow+0x336>
 800d776:	bf00      	nop
 800d778:	4a454eef 	.word	0x4a454eef
 800d77c:	3fca7e28 	.word	0x3fca7e28
 800d780:	93c9db65 	.word	0x93c9db65
 800d784:	3fcd864a 	.word	0x3fcd864a
 800d788:	a91d4101 	.word	0xa91d4101
 800d78c:	3fd17460 	.word	0x3fd17460
 800d790:	518f264d 	.word	0x518f264d
 800d794:	3fd55555 	.word	0x3fd55555
 800d798:	db6fabff 	.word	0xdb6fabff
 800d79c:	3fdb6db6 	.word	0x3fdb6db6
 800d7a0:	33333303 	.word	0x33333303
 800d7a4:	3fe33333 	.word	0x3fe33333
 800d7a8:	e0000000 	.word	0xe0000000
 800d7ac:	3feec709 	.word	0x3feec709
 800d7b0:	dc3a03fd 	.word	0xdc3a03fd
 800d7b4:	3feec709 	.word	0x3feec709
 800d7b8:	145b01f5 	.word	0x145b01f5
 800d7bc:	be3e2fe0 	.word	0xbe3e2fe0
 800d7c0:	00000000 	.word	0x00000000
 800d7c4:	3ff00000 	.word	0x3ff00000
 800d7c8:	7ff00000 	.word	0x7ff00000
 800d7cc:	43400000 	.word	0x43400000
 800d7d0:	0003988e 	.word	0x0003988e
 800d7d4:	000bb679 	.word	0x000bb679
 800d7d8:	0800ee50 	.word	0x0800ee50
 800d7dc:	3ff00000 	.word	0x3ff00000
 800d7e0:	40080000 	.word	0x40080000
 800d7e4:	0800ee70 	.word	0x0800ee70
 800d7e8:	0800ee60 	.word	0x0800ee60
 800d7ec:	a3b3      	add	r3, pc, #716	; (adr r3, 800dabc <__ieee754_pow+0xa4c>)
 800d7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	f7f2 fd69 	bl	80002cc <__adddf3>
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	ec41 0b1a 	vmov	d10, r0, r1
 800d800:	462b      	mov	r3, r5
 800d802:	4630      	mov	r0, r6
 800d804:	4639      	mov	r1, r7
 800d806:	f7f2 fd5f 	bl	80002c8 <__aeabi_dsub>
 800d80a:	4602      	mov	r2, r0
 800d80c:	460b      	mov	r3, r1
 800d80e:	ec51 0b1a 	vmov	r0, r1, d10
 800d812:	f7f3 f9a1 	bl	8000b58 <__aeabi_dcmpgt>
 800d816:	2800      	cmp	r0, #0
 800d818:	f47f ae04 	bne.w	800d424 <__ieee754_pow+0x3b4>
 800d81c:	4aa2      	ldr	r2, [pc, #648]	; (800daa8 <__ieee754_pow+0xa38>)
 800d81e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d822:	4293      	cmp	r3, r2
 800d824:	f340 8107 	ble.w	800da36 <__ieee754_pow+0x9c6>
 800d828:	151b      	asrs	r3, r3, #20
 800d82a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d82e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d832:	fa4a fa03 	asr.w	sl, sl, r3
 800d836:	44da      	add	sl, fp
 800d838:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d83c:	489b      	ldr	r0, [pc, #620]	; (800daac <__ieee754_pow+0xa3c>)
 800d83e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d842:	4108      	asrs	r0, r1
 800d844:	ea00 030a 	and.w	r3, r0, sl
 800d848:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d84c:	f1c1 0114 	rsb	r1, r1, #20
 800d850:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d854:	fa4a fa01 	asr.w	sl, sl, r1
 800d858:	f1bb 0f00 	cmp.w	fp, #0
 800d85c:	f04f 0200 	mov.w	r2, #0
 800d860:	4620      	mov	r0, r4
 800d862:	4629      	mov	r1, r5
 800d864:	bfb8      	it	lt
 800d866:	f1ca 0a00 	rsblt	sl, sl, #0
 800d86a:	f7f2 fd2d 	bl	80002c8 <__aeabi_dsub>
 800d86e:	ec41 0b19 	vmov	d9, r0, r1
 800d872:	4642      	mov	r2, r8
 800d874:	464b      	mov	r3, r9
 800d876:	ec51 0b19 	vmov	r0, r1, d9
 800d87a:	f7f2 fd27 	bl	80002cc <__adddf3>
 800d87e:	a37a      	add	r3, pc, #488	; (adr r3, 800da68 <__ieee754_pow+0x9f8>)
 800d880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d884:	2000      	movs	r0, #0
 800d886:	4604      	mov	r4, r0
 800d888:	460d      	mov	r5, r1
 800d88a:	f7f2 fed5 	bl	8000638 <__aeabi_dmul>
 800d88e:	ec53 2b19 	vmov	r2, r3, d9
 800d892:	4606      	mov	r6, r0
 800d894:	460f      	mov	r7, r1
 800d896:	4620      	mov	r0, r4
 800d898:	4629      	mov	r1, r5
 800d89a:	f7f2 fd15 	bl	80002c8 <__aeabi_dsub>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	4640      	mov	r0, r8
 800d8a4:	4649      	mov	r1, r9
 800d8a6:	f7f2 fd0f 	bl	80002c8 <__aeabi_dsub>
 800d8aa:	a371      	add	r3, pc, #452	; (adr r3, 800da70 <__ieee754_pow+0xa00>)
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	f7f2 fec2 	bl	8000638 <__aeabi_dmul>
 800d8b4:	a370      	add	r3, pc, #448	; (adr r3, 800da78 <__ieee754_pow+0xa08>)
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	4680      	mov	r8, r0
 800d8bc:	4689      	mov	r9, r1
 800d8be:	4620      	mov	r0, r4
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	f7f2 feb9 	bl	8000638 <__aeabi_dmul>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	4649      	mov	r1, r9
 800d8ce:	f7f2 fcfd 	bl	80002cc <__adddf3>
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	460d      	mov	r5, r1
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4630      	mov	r0, r6
 800d8dc:	4639      	mov	r1, r7
 800d8de:	f7f2 fcf5 	bl	80002cc <__adddf3>
 800d8e2:	4632      	mov	r2, r6
 800d8e4:	463b      	mov	r3, r7
 800d8e6:	4680      	mov	r8, r0
 800d8e8:	4689      	mov	r9, r1
 800d8ea:	f7f2 fced 	bl	80002c8 <__aeabi_dsub>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	f7f2 fce7 	bl	80002c8 <__aeabi_dsub>
 800d8fa:	4642      	mov	r2, r8
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	460f      	mov	r7, r1
 800d900:	464b      	mov	r3, r9
 800d902:	4640      	mov	r0, r8
 800d904:	4649      	mov	r1, r9
 800d906:	f7f2 fe97 	bl	8000638 <__aeabi_dmul>
 800d90a:	a35d      	add	r3, pc, #372	; (adr r3, 800da80 <__ieee754_pow+0xa10>)
 800d90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d910:	4604      	mov	r4, r0
 800d912:	460d      	mov	r5, r1
 800d914:	f7f2 fe90 	bl	8000638 <__aeabi_dmul>
 800d918:	a35b      	add	r3, pc, #364	; (adr r3, 800da88 <__ieee754_pow+0xa18>)
 800d91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91e:	f7f2 fcd3 	bl	80002c8 <__aeabi_dsub>
 800d922:	4622      	mov	r2, r4
 800d924:	462b      	mov	r3, r5
 800d926:	f7f2 fe87 	bl	8000638 <__aeabi_dmul>
 800d92a:	a359      	add	r3, pc, #356	; (adr r3, 800da90 <__ieee754_pow+0xa20>)
 800d92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d930:	f7f2 fccc 	bl	80002cc <__adddf3>
 800d934:	4622      	mov	r2, r4
 800d936:	462b      	mov	r3, r5
 800d938:	f7f2 fe7e 	bl	8000638 <__aeabi_dmul>
 800d93c:	a356      	add	r3, pc, #344	; (adr r3, 800da98 <__ieee754_pow+0xa28>)
 800d93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d942:	f7f2 fcc1 	bl	80002c8 <__aeabi_dsub>
 800d946:	4622      	mov	r2, r4
 800d948:	462b      	mov	r3, r5
 800d94a:	f7f2 fe75 	bl	8000638 <__aeabi_dmul>
 800d94e:	a354      	add	r3, pc, #336	; (adr r3, 800daa0 <__ieee754_pow+0xa30>)
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	f7f2 fcba 	bl	80002cc <__adddf3>
 800d958:	4622      	mov	r2, r4
 800d95a:	462b      	mov	r3, r5
 800d95c:	f7f2 fe6c 	bl	8000638 <__aeabi_dmul>
 800d960:	4602      	mov	r2, r0
 800d962:	460b      	mov	r3, r1
 800d964:	4640      	mov	r0, r8
 800d966:	4649      	mov	r1, r9
 800d968:	f7f2 fcae 	bl	80002c8 <__aeabi_dsub>
 800d96c:	4604      	mov	r4, r0
 800d96e:	460d      	mov	r5, r1
 800d970:	4602      	mov	r2, r0
 800d972:	460b      	mov	r3, r1
 800d974:	4640      	mov	r0, r8
 800d976:	4649      	mov	r1, r9
 800d978:	f7f2 fe5e 	bl	8000638 <__aeabi_dmul>
 800d97c:	2200      	movs	r2, #0
 800d97e:	ec41 0b19 	vmov	d9, r0, r1
 800d982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d986:	4620      	mov	r0, r4
 800d988:	4629      	mov	r1, r5
 800d98a:	f7f2 fc9d 	bl	80002c8 <__aeabi_dsub>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	ec51 0b19 	vmov	r0, r1, d9
 800d996:	f7f2 ff79 	bl	800088c <__aeabi_ddiv>
 800d99a:	4632      	mov	r2, r6
 800d99c:	4604      	mov	r4, r0
 800d99e:	460d      	mov	r5, r1
 800d9a0:	463b      	mov	r3, r7
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	4649      	mov	r1, r9
 800d9a6:	f7f2 fe47 	bl	8000638 <__aeabi_dmul>
 800d9aa:	4632      	mov	r2, r6
 800d9ac:	463b      	mov	r3, r7
 800d9ae:	f7f2 fc8d 	bl	80002cc <__adddf3>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f2 fc85 	bl	80002c8 <__aeabi_dsub>
 800d9be:	4642      	mov	r2, r8
 800d9c0:	464b      	mov	r3, r9
 800d9c2:	f7f2 fc81 	bl	80002c8 <__aeabi_dsub>
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	4939      	ldr	r1, [pc, #228]	; (800dab0 <__ieee754_pow+0xa40>)
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	f7f2 fc7b 	bl	80002c8 <__aeabi_dsub>
 800d9d2:	ec41 0b10 	vmov	d0, r0, r1
 800d9d6:	ee10 3a90 	vmov	r3, s1
 800d9da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d9de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9e2:	da2b      	bge.n	800da3c <__ieee754_pow+0x9cc>
 800d9e4:	4650      	mov	r0, sl
 800d9e6:	f000 fa77 	bl	800ded8 <scalbn>
 800d9ea:	ec51 0b10 	vmov	r0, r1, d0
 800d9ee:	ec53 2b18 	vmov	r2, r3, d8
 800d9f2:	f7ff bbee 	b.w	800d1d2 <__ieee754_pow+0x162>
 800d9f6:	4b2f      	ldr	r3, [pc, #188]	; (800dab4 <__ieee754_pow+0xa44>)
 800d9f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d9fc:	429e      	cmp	r6, r3
 800d9fe:	f77f af0d 	ble.w	800d81c <__ieee754_pow+0x7ac>
 800da02:	4b2d      	ldr	r3, [pc, #180]	; (800dab8 <__ieee754_pow+0xa48>)
 800da04:	440b      	add	r3, r1
 800da06:	4303      	orrs	r3, r0
 800da08:	d009      	beq.n	800da1e <__ieee754_pow+0x9ae>
 800da0a:	ec51 0b18 	vmov	r0, r1, d8
 800da0e:	2200      	movs	r2, #0
 800da10:	2300      	movs	r3, #0
 800da12:	f7f3 f883 	bl	8000b1c <__aeabi_dcmplt>
 800da16:	3800      	subs	r0, #0
 800da18:	bf18      	it	ne
 800da1a:	2001      	movne	r0, #1
 800da1c:	e448      	b.n	800d2b0 <__ieee754_pow+0x240>
 800da1e:	4622      	mov	r2, r4
 800da20:	462b      	mov	r3, r5
 800da22:	f7f2 fc51 	bl	80002c8 <__aeabi_dsub>
 800da26:	4642      	mov	r2, r8
 800da28:	464b      	mov	r3, r9
 800da2a:	f7f3 f88b 	bl	8000b44 <__aeabi_dcmpge>
 800da2e:	2800      	cmp	r0, #0
 800da30:	f43f aef4 	beq.w	800d81c <__ieee754_pow+0x7ac>
 800da34:	e7e9      	b.n	800da0a <__ieee754_pow+0x99a>
 800da36:	f04f 0a00 	mov.w	sl, #0
 800da3a:	e71a      	b.n	800d872 <__ieee754_pow+0x802>
 800da3c:	ec51 0b10 	vmov	r0, r1, d0
 800da40:	4619      	mov	r1, r3
 800da42:	e7d4      	b.n	800d9ee <__ieee754_pow+0x97e>
 800da44:	491a      	ldr	r1, [pc, #104]	; (800dab0 <__ieee754_pow+0xa40>)
 800da46:	2000      	movs	r0, #0
 800da48:	f7ff bb31 	b.w	800d0ae <__ieee754_pow+0x3e>
 800da4c:	2000      	movs	r0, #0
 800da4e:	2100      	movs	r1, #0
 800da50:	f7ff bb2d 	b.w	800d0ae <__ieee754_pow+0x3e>
 800da54:	4630      	mov	r0, r6
 800da56:	4639      	mov	r1, r7
 800da58:	f7ff bb29 	b.w	800d0ae <__ieee754_pow+0x3e>
 800da5c:	9204      	str	r2, [sp, #16]
 800da5e:	f7ff bb7b 	b.w	800d158 <__ieee754_pow+0xe8>
 800da62:	2300      	movs	r3, #0
 800da64:	f7ff bb65 	b.w	800d132 <__ieee754_pow+0xc2>
 800da68:	00000000 	.word	0x00000000
 800da6c:	3fe62e43 	.word	0x3fe62e43
 800da70:	fefa39ef 	.word	0xfefa39ef
 800da74:	3fe62e42 	.word	0x3fe62e42
 800da78:	0ca86c39 	.word	0x0ca86c39
 800da7c:	be205c61 	.word	0xbe205c61
 800da80:	72bea4d0 	.word	0x72bea4d0
 800da84:	3e663769 	.word	0x3e663769
 800da88:	c5d26bf1 	.word	0xc5d26bf1
 800da8c:	3ebbbd41 	.word	0x3ebbbd41
 800da90:	af25de2c 	.word	0xaf25de2c
 800da94:	3f11566a 	.word	0x3f11566a
 800da98:	16bebd93 	.word	0x16bebd93
 800da9c:	3f66c16c 	.word	0x3f66c16c
 800daa0:	5555553e 	.word	0x5555553e
 800daa4:	3fc55555 	.word	0x3fc55555
 800daa8:	3fe00000 	.word	0x3fe00000
 800daac:	fff00000 	.word	0xfff00000
 800dab0:	3ff00000 	.word	0x3ff00000
 800dab4:	4090cbff 	.word	0x4090cbff
 800dab8:	3f6f3400 	.word	0x3f6f3400
 800dabc:	652b82fe 	.word	0x652b82fe
 800dac0:	3c971547 	.word	0x3c971547
 800dac4:	00000000 	.word	0x00000000

0800dac8 <__ieee754_rem_pio2>:
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dacc:	ed2d 8b02 	vpush	{d8}
 800dad0:	ec55 4b10 	vmov	r4, r5, d0
 800dad4:	4bca      	ldr	r3, [pc, #808]	; (800de00 <__ieee754_rem_pio2+0x338>)
 800dad6:	b08b      	sub	sp, #44	; 0x2c
 800dad8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800dadc:	4598      	cmp	r8, r3
 800dade:	4682      	mov	sl, r0
 800dae0:	9502      	str	r5, [sp, #8]
 800dae2:	dc08      	bgt.n	800daf6 <__ieee754_rem_pio2+0x2e>
 800dae4:	2200      	movs	r2, #0
 800dae6:	2300      	movs	r3, #0
 800dae8:	ed80 0b00 	vstr	d0, [r0]
 800daec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800daf0:	f04f 0b00 	mov.w	fp, #0
 800daf4:	e028      	b.n	800db48 <__ieee754_rem_pio2+0x80>
 800daf6:	4bc3      	ldr	r3, [pc, #780]	; (800de04 <__ieee754_rem_pio2+0x33c>)
 800daf8:	4598      	cmp	r8, r3
 800dafa:	dc78      	bgt.n	800dbee <__ieee754_rem_pio2+0x126>
 800dafc:	9b02      	ldr	r3, [sp, #8]
 800dafe:	4ec2      	ldr	r6, [pc, #776]	; (800de08 <__ieee754_rem_pio2+0x340>)
 800db00:	2b00      	cmp	r3, #0
 800db02:	ee10 0a10 	vmov	r0, s0
 800db06:	a3b0      	add	r3, pc, #704	; (adr r3, 800ddc8 <__ieee754_rem_pio2+0x300>)
 800db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0c:	4629      	mov	r1, r5
 800db0e:	dd39      	ble.n	800db84 <__ieee754_rem_pio2+0xbc>
 800db10:	f7f2 fbda 	bl	80002c8 <__aeabi_dsub>
 800db14:	45b0      	cmp	r8, r6
 800db16:	4604      	mov	r4, r0
 800db18:	460d      	mov	r5, r1
 800db1a:	d01b      	beq.n	800db54 <__ieee754_rem_pio2+0x8c>
 800db1c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x308>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	f7f2 fbd1 	bl	80002c8 <__aeabi_dsub>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	e9ca 2300 	strd	r2, r3, [sl]
 800db2e:	4620      	mov	r0, r4
 800db30:	4629      	mov	r1, r5
 800db32:	f7f2 fbc9 	bl	80002c8 <__aeabi_dsub>
 800db36:	a3a6      	add	r3, pc, #664	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x308>)
 800db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3c:	f7f2 fbc4 	bl	80002c8 <__aeabi_dsub>
 800db40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db44:	f04f 0b01 	mov.w	fp, #1
 800db48:	4658      	mov	r0, fp
 800db4a:	b00b      	add	sp, #44	; 0x2c
 800db4c:	ecbd 8b02 	vpop	{d8}
 800db50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db54:	a3a0      	add	r3, pc, #640	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x310>)
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	f7f2 fbb5 	bl	80002c8 <__aeabi_dsub>
 800db5e:	a3a0      	add	r3, pc, #640	; (adr r3, 800dde0 <__ieee754_rem_pio2+0x318>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	4604      	mov	r4, r0
 800db66:	460d      	mov	r5, r1
 800db68:	f7f2 fbae 	bl	80002c8 <__aeabi_dsub>
 800db6c:	4602      	mov	r2, r0
 800db6e:	460b      	mov	r3, r1
 800db70:	e9ca 2300 	strd	r2, r3, [sl]
 800db74:	4620      	mov	r0, r4
 800db76:	4629      	mov	r1, r5
 800db78:	f7f2 fba6 	bl	80002c8 <__aeabi_dsub>
 800db7c:	a398      	add	r3, pc, #608	; (adr r3, 800dde0 <__ieee754_rem_pio2+0x318>)
 800db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db82:	e7db      	b.n	800db3c <__ieee754_rem_pio2+0x74>
 800db84:	f7f2 fba2 	bl	80002cc <__adddf3>
 800db88:	45b0      	cmp	r8, r6
 800db8a:	4604      	mov	r4, r0
 800db8c:	460d      	mov	r5, r1
 800db8e:	d016      	beq.n	800dbbe <__ieee754_rem_pio2+0xf6>
 800db90:	a38f      	add	r3, pc, #572	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x308>)
 800db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db96:	f7f2 fb99 	bl	80002cc <__adddf3>
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	e9ca 2300 	strd	r2, r3, [sl]
 800dba2:	4620      	mov	r0, r4
 800dba4:	4629      	mov	r1, r5
 800dba6:	f7f2 fb8f 	bl	80002c8 <__aeabi_dsub>
 800dbaa:	a389      	add	r3, pc, #548	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x308>)
 800dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb0:	f7f2 fb8c 	bl	80002cc <__adddf3>
 800dbb4:	f04f 3bff 	mov.w	fp, #4294967295
 800dbb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dbbc:	e7c4      	b.n	800db48 <__ieee754_rem_pio2+0x80>
 800dbbe:	a386      	add	r3, pc, #536	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x310>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	f7f2 fb82 	bl	80002cc <__adddf3>
 800dbc8:	a385      	add	r3, pc, #532	; (adr r3, 800dde0 <__ieee754_rem_pio2+0x318>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	4604      	mov	r4, r0
 800dbd0:	460d      	mov	r5, r1
 800dbd2:	f7f2 fb7b 	bl	80002cc <__adddf3>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	e9ca 2300 	strd	r2, r3, [sl]
 800dbde:	4620      	mov	r0, r4
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	f7f2 fb71 	bl	80002c8 <__aeabi_dsub>
 800dbe6:	a37e      	add	r3, pc, #504	; (adr r3, 800dde0 <__ieee754_rem_pio2+0x318>)
 800dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbec:	e7e0      	b.n	800dbb0 <__ieee754_rem_pio2+0xe8>
 800dbee:	4b87      	ldr	r3, [pc, #540]	; (800de0c <__ieee754_rem_pio2+0x344>)
 800dbf0:	4598      	cmp	r8, r3
 800dbf2:	f300 80d8 	bgt.w	800dda6 <__ieee754_rem_pio2+0x2de>
 800dbf6:	f7fe fd93 	bl	800c720 <fabs>
 800dbfa:	ec55 4b10 	vmov	r4, r5, d0
 800dbfe:	ee10 0a10 	vmov	r0, s0
 800dc02:	a379      	add	r3, pc, #484	; (adr r3, 800dde8 <__ieee754_rem_pio2+0x320>)
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	4629      	mov	r1, r5
 800dc0a:	f7f2 fd15 	bl	8000638 <__aeabi_dmul>
 800dc0e:	4b80      	ldr	r3, [pc, #512]	; (800de10 <__ieee754_rem_pio2+0x348>)
 800dc10:	2200      	movs	r2, #0
 800dc12:	f7f2 fb5b 	bl	80002cc <__adddf3>
 800dc16:	f7f2 ffbf 	bl	8000b98 <__aeabi_d2iz>
 800dc1a:	4683      	mov	fp, r0
 800dc1c:	f7f2 fca2 	bl	8000564 <__aeabi_i2d>
 800dc20:	4602      	mov	r2, r0
 800dc22:	460b      	mov	r3, r1
 800dc24:	ec43 2b18 	vmov	d8, r2, r3
 800dc28:	a367      	add	r3, pc, #412	; (adr r3, 800ddc8 <__ieee754_rem_pio2+0x300>)
 800dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2e:	f7f2 fd03 	bl	8000638 <__aeabi_dmul>
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4620      	mov	r0, r4
 800dc38:	4629      	mov	r1, r5
 800dc3a:	f7f2 fb45 	bl	80002c8 <__aeabi_dsub>
 800dc3e:	a364      	add	r3, pc, #400	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x308>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	4606      	mov	r6, r0
 800dc46:	460f      	mov	r7, r1
 800dc48:	ec51 0b18 	vmov	r0, r1, d8
 800dc4c:	f7f2 fcf4 	bl	8000638 <__aeabi_dmul>
 800dc50:	f1bb 0f1f 	cmp.w	fp, #31
 800dc54:	4604      	mov	r4, r0
 800dc56:	460d      	mov	r5, r1
 800dc58:	dc0d      	bgt.n	800dc76 <__ieee754_rem_pio2+0x1ae>
 800dc5a:	4b6e      	ldr	r3, [pc, #440]	; (800de14 <__ieee754_rem_pio2+0x34c>)
 800dc5c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc64:	4543      	cmp	r3, r8
 800dc66:	d006      	beq.n	800dc76 <__ieee754_rem_pio2+0x1ae>
 800dc68:	4622      	mov	r2, r4
 800dc6a:	462b      	mov	r3, r5
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	4639      	mov	r1, r7
 800dc70:	f7f2 fb2a 	bl	80002c8 <__aeabi_dsub>
 800dc74:	e00e      	b.n	800dc94 <__ieee754_rem_pio2+0x1cc>
 800dc76:	462b      	mov	r3, r5
 800dc78:	4622      	mov	r2, r4
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	4639      	mov	r1, r7
 800dc7e:	f7f2 fb23 	bl	80002c8 <__aeabi_dsub>
 800dc82:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dc86:	9303      	str	r3, [sp, #12]
 800dc88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc8c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dc90:	2b10      	cmp	r3, #16
 800dc92:	dc02      	bgt.n	800dc9a <__ieee754_rem_pio2+0x1d2>
 800dc94:	e9ca 0100 	strd	r0, r1, [sl]
 800dc98:	e039      	b.n	800dd0e <__ieee754_rem_pio2+0x246>
 800dc9a:	a34f      	add	r3, pc, #316	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x310>)
 800dc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca0:	ec51 0b18 	vmov	r0, r1, d8
 800dca4:	f7f2 fcc8 	bl	8000638 <__aeabi_dmul>
 800dca8:	4604      	mov	r4, r0
 800dcaa:	460d      	mov	r5, r1
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	f7f2 fb08 	bl	80002c8 <__aeabi_dsub>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	460b      	mov	r3, r1
 800dcbc:	4680      	mov	r8, r0
 800dcbe:	4689      	mov	r9, r1
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	4639      	mov	r1, r7
 800dcc4:	f7f2 fb00 	bl	80002c8 <__aeabi_dsub>
 800dcc8:	4622      	mov	r2, r4
 800dcca:	462b      	mov	r3, r5
 800dccc:	f7f2 fafc 	bl	80002c8 <__aeabi_dsub>
 800dcd0:	a343      	add	r3, pc, #268	; (adr r3, 800dde0 <__ieee754_rem_pio2+0x318>)
 800dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	460d      	mov	r5, r1
 800dcda:	ec51 0b18 	vmov	r0, r1, d8
 800dcde:	f7f2 fcab 	bl	8000638 <__aeabi_dmul>
 800dce2:	4622      	mov	r2, r4
 800dce4:	462b      	mov	r3, r5
 800dce6:	f7f2 faef 	bl	80002c8 <__aeabi_dsub>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	4604      	mov	r4, r0
 800dcf0:	460d      	mov	r5, r1
 800dcf2:	4640      	mov	r0, r8
 800dcf4:	4649      	mov	r1, r9
 800dcf6:	f7f2 fae7 	bl	80002c8 <__aeabi_dsub>
 800dcfa:	9a03      	ldr	r2, [sp, #12]
 800dcfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	2b31      	cmp	r3, #49	; 0x31
 800dd04:	dc24      	bgt.n	800dd50 <__ieee754_rem_pio2+0x288>
 800dd06:	e9ca 0100 	strd	r0, r1, [sl]
 800dd0a:	4646      	mov	r6, r8
 800dd0c:	464f      	mov	r7, r9
 800dd0e:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd12:	4630      	mov	r0, r6
 800dd14:	4642      	mov	r2, r8
 800dd16:	464b      	mov	r3, r9
 800dd18:	4639      	mov	r1, r7
 800dd1a:	f7f2 fad5 	bl	80002c8 <__aeabi_dsub>
 800dd1e:	462b      	mov	r3, r5
 800dd20:	4622      	mov	r2, r4
 800dd22:	f7f2 fad1 	bl	80002c8 <__aeabi_dsub>
 800dd26:	9b02      	ldr	r3, [sp, #8]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd2e:	f6bf af0b 	bge.w	800db48 <__ieee754_rem_pio2+0x80>
 800dd32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd36:	f8ca 3004 	str.w	r3, [sl, #4]
 800dd3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd3e:	f8ca 8000 	str.w	r8, [sl]
 800dd42:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd46:	f8ca 300c 	str.w	r3, [sl, #12]
 800dd4a:	f1cb 0b00 	rsb	fp, fp, #0
 800dd4e:	e6fb      	b.n	800db48 <__ieee754_rem_pio2+0x80>
 800dd50:	a327      	add	r3, pc, #156	; (adr r3, 800ddf0 <__ieee754_rem_pio2+0x328>)
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	ec51 0b18 	vmov	r0, r1, d8
 800dd5a:	f7f2 fc6d 	bl	8000638 <__aeabi_dmul>
 800dd5e:	4604      	mov	r4, r0
 800dd60:	460d      	mov	r5, r1
 800dd62:	4602      	mov	r2, r0
 800dd64:	460b      	mov	r3, r1
 800dd66:	4640      	mov	r0, r8
 800dd68:	4649      	mov	r1, r9
 800dd6a:	f7f2 faad 	bl	80002c8 <__aeabi_dsub>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	460b      	mov	r3, r1
 800dd72:	4606      	mov	r6, r0
 800dd74:	460f      	mov	r7, r1
 800dd76:	4640      	mov	r0, r8
 800dd78:	4649      	mov	r1, r9
 800dd7a:	f7f2 faa5 	bl	80002c8 <__aeabi_dsub>
 800dd7e:	4622      	mov	r2, r4
 800dd80:	462b      	mov	r3, r5
 800dd82:	f7f2 faa1 	bl	80002c8 <__aeabi_dsub>
 800dd86:	a31c      	add	r3, pc, #112	; (adr r3, 800ddf8 <__ieee754_rem_pio2+0x330>)
 800dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	460d      	mov	r5, r1
 800dd90:	ec51 0b18 	vmov	r0, r1, d8
 800dd94:	f7f2 fc50 	bl	8000638 <__aeabi_dmul>
 800dd98:	4622      	mov	r2, r4
 800dd9a:	462b      	mov	r3, r5
 800dd9c:	f7f2 fa94 	bl	80002c8 <__aeabi_dsub>
 800dda0:	4604      	mov	r4, r0
 800dda2:	460d      	mov	r5, r1
 800dda4:	e760      	b.n	800dc68 <__ieee754_rem_pio2+0x1a0>
 800dda6:	4b1c      	ldr	r3, [pc, #112]	; (800de18 <__ieee754_rem_pio2+0x350>)
 800dda8:	4598      	cmp	r8, r3
 800ddaa:	dd37      	ble.n	800de1c <__ieee754_rem_pio2+0x354>
 800ddac:	ee10 2a10 	vmov	r2, s0
 800ddb0:	462b      	mov	r3, r5
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	f7f2 fa87 	bl	80002c8 <__aeabi_dsub>
 800ddba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ddbe:	e9ca 0100 	strd	r0, r1, [sl]
 800ddc2:	e695      	b.n	800daf0 <__ieee754_rem_pio2+0x28>
 800ddc4:	f3af 8000 	nop.w
 800ddc8:	54400000 	.word	0x54400000
 800ddcc:	3ff921fb 	.word	0x3ff921fb
 800ddd0:	1a626331 	.word	0x1a626331
 800ddd4:	3dd0b461 	.word	0x3dd0b461
 800ddd8:	1a600000 	.word	0x1a600000
 800dddc:	3dd0b461 	.word	0x3dd0b461
 800dde0:	2e037073 	.word	0x2e037073
 800dde4:	3ba3198a 	.word	0x3ba3198a
 800dde8:	6dc9c883 	.word	0x6dc9c883
 800ddec:	3fe45f30 	.word	0x3fe45f30
 800ddf0:	2e000000 	.word	0x2e000000
 800ddf4:	3ba3198a 	.word	0x3ba3198a
 800ddf8:	252049c1 	.word	0x252049c1
 800ddfc:	397b839a 	.word	0x397b839a
 800de00:	3fe921fb 	.word	0x3fe921fb
 800de04:	4002d97b 	.word	0x4002d97b
 800de08:	3ff921fb 	.word	0x3ff921fb
 800de0c:	413921fb 	.word	0x413921fb
 800de10:	3fe00000 	.word	0x3fe00000
 800de14:	0800ee80 	.word	0x0800ee80
 800de18:	7fefffff 	.word	0x7fefffff
 800de1c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800de20:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800de24:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800de28:	4620      	mov	r0, r4
 800de2a:	460d      	mov	r5, r1
 800de2c:	f7f2 feb4 	bl	8000b98 <__aeabi_d2iz>
 800de30:	f7f2 fb98 	bl	8000564 <__aeabi_i2d>
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	4620      	mov	r0, r4
 800de3a:	4629      	mov	r1, r5
 800de3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de40:	f7f2 fa42 	bl	80002c8 <__aeabi_dsub>
 800de44:	4b21      	ldr	r3, [pc, #132]	; (800decc <__ieee754_rem_pio2+0x404>)
 800de46:	2200      	movs	r2, #0
 800de48:	f7f2 fbf6 	bl	8000638 <__aeabi_dmul>
 800de4c:	460d      	mov	r5, r1
 800de4e:	4604      	mov	r4, r0
 800de50:	f7f2 fea2 	bl	8000b98 <__aeabi_d2iz>
 800de54:	f7f2 fb86 	bl	8000564 <__aeabi_i2d>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4620      	mov	r0, r4
 800de5e:	4629      	mov	r1, r5
 800de60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de64:	f7f2 fa30 	bl	80002c8 <__aeabi_dsub>
 800de68:	4b18      	ldr	r3, [pc, #96]	; (800decc <__ieee754_rem_pio2+0x404>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	f7f2 fbe4 	bl	8000638 <__aeabi_dmul>
 800de70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de74:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800de78:	2703      	movs	r7, #3
 800de7a:	2400      	movs	r4, #0
 800de7c:	2500      	movs	r5, #0
 800de7e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800de82:	4622      	mov	r2, r4
 800de84:	462b      	mov	r3, r5
 800de86:	46b9      	mov	r9, r7
 800de88:	3f01      	subs	r7, #1
 800de8a:	f7f2 fe3d 	bl	8000b08 <__aeabi_dcmpeq>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d1f5      	bne.n	800de7e <__ieee754_rem_pio2+0x3b6>
 800de92:	4b0f      	ldr	r3, [pc, #60]	; (800ded0 <__ieee754_rem_pio2+0x408>)
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	2302      	movs	r3, #2
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	4632      	mov	r2, r6
 800de9c:	464b      	mov	r3, r9
 800de9e:	4651      	mov	r1, sl
 800dea0:	a804      	add	r0, sp, #16
 800dea2:	f000 f8c9 	bl	800e038 <__kernel_rem_pio2>
 800dea6:	9b02      	ldr	r3, [sp, #8]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	4683      	mov	fp, r0
 800deac:	f6bf ae4c 	bge.w	800db48 <__ieee754_rem_pio2+0x80>
 800deb0:	e9da 2100 	ldrd	r2, r1, [sl]
 800deb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800deb8:	e9ca 2300 	strd	r2, r3, [sl]
 800debc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800dec0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dec4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800dec8:	e73f      	b.n	800dd4a <__ieee754_rem_pio2+0x282>
 800deca:	bf00      	nop
 800decc:	41700000 	.word	0x41700000
 800ded0:	0800ef00 	.word	0x0800ef00
 800ded4:	00000000 	.word	0x00000000

0800ded8 <scalbn>:
 800ded8:	b570      	push	{r4, r5, r6, lr}
 800deda:	ec55 4b10 	vmov	r4, r5, d0
 800dede:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800dee2:	4606      	mov	r6, r0
 800dee4:	462b      	mov	r3, r5
 800dee6:	b999      	cbnz	r1, 800df10 <scalbn+0x38>
 800dee8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800deec:	4323      	orrs	r3, r4
 800deee:	d03f      	beq.n	800df70 <scalbn+0x98>
 800def0:	4b35      	ldr	r3, [pc, #212]	; (800dfc8 <scalbn+0xf0>)
 800def2:	4629      	mov	r1, r5
 800def4:	ee10 0a10 	vmov	r0, s0
 800def8:	2200      	movs	r2, #0
 800defa:	f7f2 fb9d 	bl	8000638 <__aeabi_dmul>
 800defe:	4b33      	ldr	r3, [pc, #204]	; (800dfcc <scalbn+0xf4>)
 800df00:	429e      	cmp	r6, r3
 800df02:	4604      	mov	r4, r0
 800df04:	460d      	mov	r5, r1
 800df06:	da10      	bge.n	800df2a <scalbn+0x52>
 800df08:	a327      	add	r3, pc, #156	; (adr r3, 800dfa8 <scalbn+0xd0>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	e01f      	b.n	800df50 <scalbn+0x78>
 800df10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800df14:	4291      	cmp	r1, r2
 800df16:	d10c      	bne.n	800df32 <scalbn+0x5a>
 800df18:	ee10 2a10 	vmov	r2, s0
 800df1c:	4620      	mov	r0, r4
 800df1e:	4629      	mov	r1, r5
 800df20:	f7f2 f9d4 	bl	80002cc <__adddf3>
 800df24:	4604      	mov	r4, r0
 800df26:	460d      	mov	r5, r1
 800df28:	e022      	b.n	800df70 <scalbn+0x98>
 800df2a:	460b      	mov	r3, r1
 800df2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800df30:	3936      	subs	r1, #54	; 0x36
 800df32:	f24c 3250 	movw	r2, #50000	; 0xc350
 800df36:	4296      	cmp	r6, r2
 800df38:	dd0d      	ble.n	800df56 <scalbn+0x7e>
 800df3a:	2d00      	cmp	r5, #0
 800df3c:	a11c      	add	r1, pc, #112	; (adr r1, 800dfb0 <scalbn+0xd8>)
 800df3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df42:	da02      	bge.n	800df4a <scalbn+0x72>
 800df44:	a11c      	add	r1, pc, #112	; (adr r1, 800dfb8 <scalbn+0xe0>)
 800df46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df4a:	a319      	add	r3, pc, #100	; (adr r3, 800dfb0 <scalbn+0xd8>)
 800df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df50:	f7f2 fb72 	bl	8000638 <__aeabi_dmul>
 800df54:	e7e6      	b.n	800df24 <scalbn+0x4c>
 800df56:	1872      	adds	r2, r6, r1
 800df58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800df5c:	428a      	cmp	r2, r1
 800df5e:	dcec      	bgt.n	800df3a <scalbn+0x62>
 800df60:	2a00      	cmp	r2, #0
 800df62:	dd08      	ble.n	800df76 <scalbn+0x9e>
 800df64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df70:	ec45 4b10 	vmov	d0, r4, r5
 800df74:	bd70      	pop	{r4, r5, r6, pc}
 800df76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800df7a:	da08      	bge.n	800df8e <scalbn+0xb6>
 800df7c:	2d00      	cmp	r5, #0
 800df7e:	a10a      	add	r1, pc, #40	; (adr r1, 800dfa8 <scalbn+0xd0>)
 800df80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df84:	dac0      	bge.n	800df08 <scalbn+0x30>
 800df86:	a10e      	add	r1, pc, #56	; (adr r1, 800dfc0 <scalbn+0xe8>)
 800df88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df8c:	e7bc      	b.n	800df08 <scalbn+0x30>
 800df8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df92:	3236      	adds	r2, #54	; 0x36
 800df94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800df9c:	4620      	mov	r0, r4
 800df9e:	4b0c      	ldr	r3, [pc, #48]	; (800dfd0 <scalbn+0xf8>)
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	e7d5      	b.n	800df50 <scalbn+0x78>
 800dfa4:	f3af 8000 	nop.w
 800dfa8:	c2f8f359 	.word	0xc2f8f359
 800dfac:	01a56e1f 	.word	0x01a56e1f
 800dfb0:	8800759c 	.word	0x8800759c
 800dfb4:	7e37e43c 	.word	0x7e37e43c
 800dfb8:	8800759c 	.word	0x8800759c
 800dfbc:	fe37e43c 	.word	0xfe37e43c
 800dfc0:	c2f8f359 	.word	0xc2f8f359
 800dfc4:	81a56e1f 	.word	0x81a56e1f
 800dfc8:	43500000 	.word	0x43500000
 800dfcc:	ffff3cb0 	.word	0xffff3cb0
 800dfd0:	3c900000 	.word	0x3c900000

0800dfd4 <with_errno>:
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	460d      	mov	r5, r1
 800dfda:	4616      	mov	r6, r2
 800dfdc:	f7fc fb50 	bl	800a680 <__errno>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	6006      	str	r6, [r0, #0]
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	bd70      	pop	{r4, r5, r6, pc}

0800dfe8 <xflow>:
 800dfe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfea:	4614      	mov	r4, r2
 800dfec:	461d      	mov	r5, r3
 800dfee:	b108      	cbz	r0, 800dff4 <xflow+0xc>
 800dff0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dff4:	e9cd 2300 	strd	r2, r3, [sp]
 800dff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dffc:	4620      	mov	r0, r4
 800dffe:	4629      	mov	r1, r5
 800e000:	f7f2 fb1a 	bl	8000638 <__aeabi_dmul>
 800e004:	2222      	movs	r2, #34	; 0x22
 800e006:	b003      	add	sp, #12
 800e008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e00c:	f7ff bfe2 	b.w	800dfd4 <with_errno>

0800e010 <__math_uflow>:
 800e010:	b508      	push	{r3, lr}
 800e012:	2200      	movs	r2, #0
 800e014:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e018:	f7ff ffe6 	bl	800dfe8 <xflow>
 800e01c:	ec41 0b10 	vmov	d0, r0, r1
 800e020:	bd08      	pop	{r3, pc}

0800e022 <__math_oflow>:
 800e022:	b508      	push	{r3, lr}
 800e024:	2200      	movs	r2, #0
 800e026:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e02a:	f7ff ffdd 	bl	800dfe8 <xflow>
 800e02e:	ec41 0b10 	vmov	d0, r0, r1
 800e032:	bd08      	pop	{r3, pc}
 800e034:	0000      	movs	r0, r0
	...

0800e038 <__kernel_rem_pio2>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	ed2d 8b02 	vpush	{d8}
 800e040:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e044:	f112 0f14 	cmn.w	r2, #20
 800e048:	9306      	str	r3, [sp, #24]
 800e04a:	9104      	str	r1, [sp, #16]
 800e04c:	4bc2      	ldr	r3, [pc, #776]	; (800e358 <__kernel_rem_pio2+0x320>)
 800e04e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e050:	9009      	str	r0, [sp, #36]	; 0x24
 800e052:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	9b06      	ldr	r3, [sp, #24]
 800e05a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e05e:	bfa8      	it	ge
 800e060:	1ed4      	subge	r4, r2, #3
 800e062:	9305      	str	r3, [sp, #20]
 800e064:	bfb2      	itee	lt
 800e066:	2400      	movlt	r4, #0
 800e068:	2318      	movge	r3, #24
 800e06a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e06e:	f06f 0317 	mvn.w	r3, #23
 800e072:	fb04 3303 	mla	r3, r4, r3, r3
 800e076:	eb03 0a02 	add.w	sl, r3, r2
 800e07a:	9b00      	ldr	r3, [sp, #0]
 800e07c:	9a05      	ldr	r2, [sp, #20]
 800e07e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e348 <__kernel_rem_pio2+0x310>
 800e082:	eb03 0802 	add.w	r8, r3, r2
 800e086:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e088:	1aa7      	subs	r7, r4, r2
 800e08a:	ae20      	add	r6, sp, #128	; 0x80
 800e08c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e090:	2500      	movs	r5, #0
 800e092:	4545      	cmp	r5, r8
 800e094:	dd13      	ble.n	800e0be <__kernel_rem_pio2+0x86>
 800e096:	9b06      	ldr	r3, [sp, #24]
 800e098:	aa20      	add	r2, sp, #128	; 0x80
 800e09a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e09e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e0a2:	f04f 0800 	mov.w	r8, #0
 800e0a6:	9b00      	ldr	r3, [sp, #0]
 800e0a8:	4598      	cmp	r8, r3
 800e0aa:	dc31      	bgt.n	800e110 <__kernel_rem_pio2+0xd8>
 800e0ac:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e348 <__kernel_rem_pio2+0x310>
 800e0b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e0b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e0b8:	462f      	mov	r7, r5
 800e0ba:	2600      	movs	r6, #0
 800e0bc:	e01b      	b.n	800e0f6 <__kernel_rem_pio2+0xbe>
 800e0be:	42ef      	cmn	r7, r5
 800e0c0:	d407      	bmi.n	800e0d2 <__kernel_rem_pio2+0x9a>
 800e0c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e0c6:	f7f2 fa4d 	bl	8000564 <__aeabi_i2d>
 800e0ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e0ce:	3501      	adds	r5, #1
 800e0d0:	e7df      	b.n	800e092 <__kernel_rem_pio2+0x5a>
 800e0d2:	ec51 0b18 	vmov	r0, r1, d8
 800e0d6:	e7f8      	b.n	800e0ca <__kernel_rem_pio2+0x92>
 800e0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e0e0:	f7f2 faaa 	bl	8000638 <__aeabi_dmul>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ec:	f7f2 f8ee 	bl	80002cc <__adddf3>
 800e0f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0f4:	3601      	adds	r6, #1
 800e0f6:	9b05      	ldr	r3, [sp, #20]
 800e0f8:	429e      	cmp	r6, r3
 800e0fa:	f1a7 0708 	sub.w	r7, r7, #8
 800e0fe:	ddeb      	ble.n	800e0d8 <__kernel_rem_pio2+0xa0>
 800e100:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e104:	f108 0801 	add.w	r8, r8, #1
 800e108:	ecab 7b02 	vstmia	fp!, {d7}
 800e10c:	3508      	adds	r5, #8
 800e10e:	e7ca      	b.n	800e0a6 <__kernel_rem_pio2+0x6e>
 800e110:	9b00      	ldr	r3, [sp, #0]
 800e112:	aa0c      	add	r2, sp, #48	; 0x30
 800e114:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e118:	930b      	str	r3, [sp, #44]	; 0x2c
 800e11a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e11c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e120:	9c00      	ldr	r4, [sp, #0]
 800e122:	930a      	str	r3, [sp, #40]	; 0x28
 800e124:	00e3      	lsls	r3, r4, #3
 800e126:	9308      	str	r3, [sp, #32]
 800e128:	ab98      	add	r3, sp, #608	; 0x260
 800e12a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e12e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e132:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e136:	ab70      	add	r3, sp, #448	; 0x1c0
 800e138:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e13c:	46c3      	mov	fp, r8
 800e13e:	46a1      	mov	r9, r4
 800e140:	f1b9 0f00 	cmp.w	r9, #0
 800e144:	f1a5 0508 	sub.w	r5, r5, #8
 800e148:	dc77      	bgt.n	800e23a <__kernel_rem_pio2+0x202>
 800e14a:	ec47 6b10 	vmov	d0, r6, r7
 800e14e:	4650      	mov	r0, sl
 800e150:	f7ff fec2 	bl	800ded8 <scalbn>
 800e154:	ec57 6b10 	vmov	r6, r7, d0
 800e158:	2200      	movs	r2, #0
 800e15a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e15e:	ee10 0a10 	vmov	r0, s0
 800e162:	4639      	mov	r1, r7
 800e164:	f7f2 fa68 	bl	8000638 <__aeabi_dmul>
 800e168:	ec41 0b10 	vmov	d0, r0, r1
 800e16c:	f000 fab4 	bl	800e6d8 <floor>
 800e170:	4b7a      	ldr	r3, [pc, #488]	; (800e35c <__kernel_rem_pio2+0x324>)
 800e172:	ec51 0b10 	vmov	r0, r1, d0
 800e176:	2200      	movs	r2, #0
 800e178:	f7f2 fa5e 	bl	8000638 <__aeabi_dmul>
 800e17c:	4602      	mov	r2, r0
 800e17e:	460b      	mov	r3, r1
 800e180:	4630      	mov	r0, r6
 800e182:	4639      	mov	r1, r7
 800e184:	f7f2 f8a0 	bl	80002c8 <__aeabi_dsub>
 800e188:	460f      	mov	r7, r1
 800e18a:	4606      	mov	r6, r0
 800e18c:	f7f2 fd04 	bl	8000b98 <__aeabi_d2iz>
 800e190:	9002      	str	r0, [sp, #8]
 800e192:	f7f2 f9e7 	bl	8000564 <__aeabi_i2d>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	4630      	mov	r0, r6
 800e19c:	4639      	mov	r1, r7
 800e19e:	f7f2 f893 	bl	80002c8 <__aeabi_dsub>
 800e1a2:	f1ba 0f00 	cmp.w	sl, #0
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	460f      	mov	r7, r1
 800e1aa:	dd6d      	ble.n	800e288 <__kernel_rem_pio2+0x250>
 800e1ac:	1e61      	subs	r1, r4, #1
 800e1ae:	ab0c      	add	r3, sp, #48	; 0x30
 800e1b0:	9d02      	ldr	r5, [sp, #8]
 800e1b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1b6:	f1ca 0018 	rsb	r0, sl, #24
 800e1ba:	fa43 f200 	asr.w	r2, r3, r0
 800e1be:	4415      	add	r5, r2
 800e1c0:	4082      	lsls	r2, r0
 800e1c2:	1a9b      	subs	r3, r3, r2
 800e1c4:	aa0c      	add	r2, sp, #48	; 0x30
 800e1c6:	9502      	str	r5, [sp, #8]
 800e1c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e1cc:	f1ca 0217 	rsb	r2, sl, #23
 800e1d0:	fa43 fb02 	asr.w	fp, r3, r2
 800e1d4:	f1bb 0f00 	cmp.w	fp, #0
 800e1d8:	dd65      	ble.n	800e2a6 <__kernel_rem_pio2+0x26e>
 800e1da:	9b02      	ldr	r3, [sp, #8]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	3301      	adds	r3, #1
 800e1e0:	9302      	str	r3, [sp, #8]
 800e1e2:	4615      	mov	r5, r2
 800e1e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e1e8:	4294      	cmp	r4, r2
 800e1ea:	f300 809f 	bgt.w	800e32c <__kernel_rem_pio2+0x2f4>
 800e1ee:	f1ba 0f00 	cmp.w	sl, #0
 800e1f2:	dd07      	ble.n	800e204 <__kernel_rem_pio2+0x1cc>
 800e1f4:	f1ba 0f01 	cmp.w	sl, #1
 800e1f8:	f000 80c1 	beq.w	800e37e <__kernel_rem_pio2+0x346>
 800e1fc:	f1ba 0f02 	cmp.w	sl, #2
 800e200:	f000 80c7 	beq.w	800e392 <__kernel_rem_pio2+0x35a>
 800e204:	f1bb 0f02 	cmp.w	fp, #2
 800e208:	d14d      	bne.n	800e2a6 <__kernel_rem_pio2+0x26e>
 800e20a:	4632      	mov	r2, r6
 800e20c:	463b      	mov	r3, r7
 800e20e:	4954      	ldr	r1, [pc, #336]	; (800e360 <__kernel_rem_pio2+0x328>)
 800e210:	2000      	movs	r0, #0
 800e212:	f7f2 f859 	bl	80002c8 <__aeabi_dsub>
 800e216:	4606      	mov	r6, r0
 800e218:	460f      	mov	r7, r1
 800e21a:	2d00      	cmp	r5, #0
 800e21c:	d043      	beq.n	800e2a6 <__kernel_rem_pio2+0x26e>
 800e21e:	4650      	mov	r0, sl
 800e220:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e350 <__kernel_rem_pio2+0x318>
 800e224:	f7ff fe58 	bl	800ded8 <scalbn>
 800e228:	4630      	mov	r0, r6
 800e22a:	4639      	mov	r1, r7
 800e22c:	ec53 2b10 	vmov	r2, r3, d0
 800e230:	f7f2 f84a 	bl	80002c8 <__aeabi_dsub>
 800e234:	4606      	mov	r6, r0
 800e236:	460f      	mov	r7, r1
 800e238:	e035      	b.n	800e2a6 <__kernel_rem_pio2+0x26e>
 800e23a:	4b4a      	ldr	r3, [pc, #296]	; (800e364 <__kernel_rem_pio2+0x32c>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	4630      	mov	r0, r6
 800e240:	4639      	mov	r1, r7
 800e242:	f7f2 f9f9 	bl	8000638 <__aeabi_dmul>
 800e246:	f7f2 fca7 	bl	8000b98 <__aeabi_d2iz>
 800e24a:	f7f2 f98b 	bl	8000564 <__aeabi_i2d>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	ec43 2b18 	vmov	d8, r2, r3
 800e256:	4b44      	ldr	r3, [pc, #272]	; (800e368 <__kernel_rem_pio2+0x330>)
 800e258:	2200      	movs	r2, #0
 800e25a:	f7f2 f9ed 	bl	8000638 <__aeabi_dmul>
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	4630      	mov	r0, r6
 800e264:	4639      	mov	r1, r7
 800e266:	f7f2 f82f 	bl	80002c8 <__aeabi_dsub>
 800e26a:	f7f2 fc95 	bl	8000b98 <__aeabi_d2iz>
 800e26e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e272:	f84b 0b04 	str.w	r0, [fp], #4
 800e276:	ec51 0b18 	vmov	r0, r1, d8
 800e27a:	f7f2 f827 	bl	80002cc <__adddf3>
 800e27e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e282:	4606      	mov	r6, r0
 800e284:	460f      	mov	r7, r1
 800e286:	e75b      	b.n	800e140 <__kernel_rem_pio2+0x108>
 800e288:	d106      	bne.n	800e298 <__kernel_rem_pio2+0x260>
 800e28a:	1e63      	subs	r3, r4, #1
 800e28c:	aa0c      	add	r2, sp, #48	; 0x30
 800e28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e292:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e296:	e79d      	b.n	800e1d4 <__kernel_rem_pio2+0x19c>
 800e298:	4b34      	ldr	r3, [pc, #208]	; (800e36c <__kernel_rem_pio2+0x334>)
 800e29a:	2200      	movs	r2, #0
 800e29c:	f7f2 fc52 	bl	8000b44 <__aeabi_dcmpge>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	d140      	bne.n	800e326 <__kernel_rem_pio2+0x2ee>
 800e2a4:	4683      	mov	fp, r0
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	4639      	mov	r1, r7
 800e2ae:	f7f2 fc2b 	bl	8000b08 <__aeabi_dcmpeq>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	f000 80c1 	beq.w	800e43a <__kernel_rem_pio2+0x402>
 800e2b8:	1e65      	subs	r5, r4, #1
 800e2ba:	462b      	mov	r3, r5
 800e2bc:	2200      	movs	r2, #0
 800e2be:	9900      	ldr	r1, [sp, #0]
 800e2c0:	428b      	cmp	r3, r1
 800e2c2:	da6d      	bge.n	800e3a0 <__kernel_rem_pio2+0x368>
 800e2c4:	2a00      	cmp	r2, #0
 800e2c6:	f000 808a 	beq.w	800e3de <__kernel_rem_pio2+0x3a6>
 800e2ca:	ab0c      	add	r3, sp, #48	; 0x30
 800e2cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800e2d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 80ae 	beq.w	800e436 <__kernel_rem_pio2+0x3fe>
 800e2da:	4650      	mov	r0, sl
 800e2dc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e350 <__kernel_rem_pio2+0x318>
 800e2e0:	f7ff fdfa 	bl	800ded8 <scalbn>
 800e2e4:	1c6b      	adds	r3, r5, #1
 800e2e6:	00da      	lsls	r2, r3, #3
 800e2e8:	9205      	str	r2, [sp, #20]
 800e2ea:	ec57 6b10 	vmov	r6, r7, d0
 800e2ee:	aa70      	add	r2, sp, #448	; 0x1c0
 800e2f0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e364 <__kernel_rem_pio2+0x32c>
 800e2f4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e2f8:	462c      	mov	r4, r5
 800e2fa:	f04f 0800 	mov.w	r8, #0
 800e2fe:	2c00      	cmp	r4, #0
 800e300:	f280 80d4 	bge.w	800e4ac <__kernel_rem_pio2+0x474>
 800e304:	462c      	mov	r4, r5
 800e306:	2c00      	cmp	r4, #0
 800e308:	f2c0 8102 	blt.w	800e510 <__kernel_rem_pio2+0x4d8>
 800e30c:	4b18      	ldr	r3, [pc, #96]	; (800e370 <__kernel_rem_pio2+0x338>)
 800e30e:	461e      	mov	r6, r3
 800e310:	ab70      	add	r3, sp, #448	; 0x1c0
 800e312:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e316:	1b2b      	subs	r3, r5, r4
 800e318:	f04f 0900 	mov.w	r9, #0
 800e31c:	f04f 0a00 	mov.w	sl, #0
 800e320:	2700      	movs	r7, #0
 800e322:	9306      	str	r3, [sp, #24]
 800e324:	e0e6      	b.n	800e4f4 <__kernel_rem_pio2+0x4bc>
 800e326:	f04f 0b02 	mov.w	fp, #2
 800e32a:	e756      	b.n	800e1da <__kernel_rem_pio2+0x1a2>
 800e32c:	f8d8 3000 	ldr.w	r3, [r8]
 800e330:	bb05      	cbnz	r5, 800e374 <__kernel_rem_pio2+0x33c>
 800e332:	b123      	cbz	r3, 800e33e <__kernel_rem_pio2+0x306>
 800e334:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e338:	f8c8 3000 	str.w	r3, [r8]
 800e33c:	2301      	movs	r3, #1
 800e33e:	3201      	adds	r2, #1
 800e340:	f108 0804 	add.w	r8, r8, #4
 800e344:	461d      	mov	r5, r3
 800e346:	e74f      	b.n	800e1e8 <__kernel_rem_pio2+0x1b0>
	...
 800e354:	3ff00000 	.word	0x3ff00000
 800e358:	0800f048 	.word	0x0800f048
 800e35c:	40200000 	.word	0x40200000
 800e360:	3ff00000 	.word	0x3ff00000
 800e364:	3e700000 	.word	0x3e700000
 800e368:	41700000 	.word	0x41700000
 800e36c:	3fe00000 	.word	0x3fe00000
 800e370:	0800f008 	.word	0x0800f008
 800e374:	1acb      	subs	r3, r1, r3
 800e376:	f8c8 3000 	str.w	r3, [r8]
 800e37a:	462b      	mov	r3, r5
 800e37c:	e7df      	b.n	800e33e <__kernel_rem_pio2+0x306>
 800e37e:	1e62      	subs	r2, r4, #1
 800e380:	ab0c      	add	r3, sp, #48	; 0x30
 800e382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e386:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e38a:	a90c      	add	r1, sp, #48	; 0x30
 800e38c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e390:	e738      	b.n	800e204 <__kernel_rem_pio2+0x1cc>
 800e392:	1e62      	subs	r2, r4, #1
 800e394:	ab0c      	add	r3, sp, #48	; 0x30
 800e396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e39a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e39e:	e7f4      	b.n	800e38a <__kernel_rem_pio2+0x352>
 800e3a0:	a90c      	add	r1, sp, #48	; 0x30
 800e3a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	430a      	orrs	r2, r1
 800e3aa:	e788      	b.n	800e2be <__kernel_rem_pio2+0x286>
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e3b2:	2900      	cmp	r1, #0
 800e3b4:	d0fa      	beq.n	800e3ac <__kernel_rem_pio2+0x374>
 800e3b6:	9a08      	ldr	r2, [sp, #32]
 800e3b8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e3bc:	446a      	add	r2, sp
 800e3be:	3a98      	subs	r2, #152	; 0x98
 800e3c0:	9208      	str	r2, [sp, #32]
 800e3c2:	9a06      	ldr	r2, [sp, #24]
 800e3c4:	a920      	add	r1, sp, #128	; 0x80
 800e3c6:	18a2      	adds	r2, r4, r2
 800e3c8:	18e3      	adds	r3, r4, r3
 800e3ca:	f104 0801 	add.w	r8, r4, #1
 800e3ce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e3d2:	9302      	str	r3, [sp, #8]
 800e3d4:	9b02      	ldr	r3, [sp, #8]
 800e3d6:	4543      	cmp	r3, r8
 800e3d8:	da04      	bge.n	800e3e4 <__kernel_rem_pio2+0x3ac>
 800e3da:	461c      	mov	r4, r3
 800e3dc:	e6a2      	b.n	800e124 <__kernel_rem_pio2+0xec>
 800e3de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e7e4      	b.n	800e3ae <__kernel_rem_pio2+0x376>
 800e3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e3ea:	f7f2 f8bb 	bl	8000564 <__aeabi_i2d>
 800e3ee:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f4:	46ab      	mov	fp, r5
 800e3f6:	461c      	mov	r4, r3
 800e3f8:	f04f 0900 	mov.w	r9, #0
 800e3fc:	2600      	movs	r6, #0
 800e3fe:	2700      	movs	r7, #0
 800e400:	9b05      	ldr	r3, [sp, #20]
 800e402:	4599      	cmp	r9, r3
 800e404:	dd06      	ble.n	800e414 <__kernel_rem_pio2+0x3dc>
 800e406:	9b08      	ldr	r3, [sp, #32]
 800e408:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e40c:	f108 0801 	add.w	r8, r8, #1
 800e410:	9308      	str	r3, [sp, #32]
 800e412:	e7df      	b.n	800e3d4 <__kernel_rem_pio2+0x39c>
 800e414:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e418:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e41c:	f7f2 f90c 	bl	8000638 <__aeabi_dmul>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4630      	mov	r0, r6
 800e426:	4639      	mov	r1, r7
 800e428:	f7f1 ff50 	bl	80002cc <__adddf3>
 800e42c:	f109 0901 	add.w	r9, r9, #1
 800e430:	4606      	mov	r6, r0
 800e432:	460f      	mov	r7, r1
 800e434:	e7e4      	b.n	800e400 <__kernel_rem_pio2+0x3c8>
 800e436:	3d01      	subs	r5, #1
 800e438:	e747      	b.n	800e2ca <__kernel_rem_pio2+0x292>
 800e43a:	ec47 6b10 	vmov	d0, r6, r7
 800e43e:	f1ca 0000 	rsb	r0, sl, #0
 800e442:	f7ff fd49 	bl	800ded8 <scalbn>
 800e446:	ec57 6b10 	vmov	r6, r7, d0
 800e44a:	4ba0      	ldr	r3, [pc, #640]	; (800e6cc <__kernel_rem_pio2+0x694>)
 800e44c:	ee10 0a10 	vmov	r0, s0
 800e450:	2200      	movs	r2, #0
 800e452:	4639      	mov	r1, r7
 800e454:	f7f2 fb76 	bl	8000b44 <__aeabi_dcmpge>
 800e458:	b1f8      	cbz	r0, 800e49a <__kernel_rem_pio2+0x462>
 800e45a:	4b9d      	ldr	r3, [pc, #628]	; (800e6d0 <__kernel_rem_pio2+0x698>)
 800e45c:	2200      	movs	r2, #0
 800e45e:	4630      	mov	r0, r6
 800e460:	4639      	mov	r1, r7
 800e462:	f7f2 f8e9 	bl	8000638 <__aeabi_dmul>
 800e466:	f7f2 fb97 	bl	8000b98 <__aeabi_d2iz>
 800e46a:	4680      	mov	r8, r0
 800e46c:	f7f2 f87a 	bl	8000564 <__aeabi_i2d>
 800e470:	4b96      	ldr	r3, [pc, #600]	; (800e6cc <__kernel_rem_pio2+0x694>)
 800e472:	2200      	movs	r2, #0
 800e474:	f7f2 f8e0 	bl	8000638 <__aeabi_dmul>
 800e478:	460b      	mov	r3, r1
 800e47a:	4602      	mov	r2, r0
 800e47c:	4639      	mov	r1, r7
 800e47e:	4630      	mov	r0, r6
 800e480:	f7f1 ff22 	bl	80002c8 <__aeabi_dsub>
 800e484:	f7f2 fb88 	bl	8000b98 <__aeabi_d2iz>
 800e488:	1c65      	adds	r5, r4, #1
 800e48a:	ab0c      	add	r3, sp, #48	; 0x30
 800e48c:	f10a 0a18 	add.w	sl, sl, #24
 800e490:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e494:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e498:	e71f      	b.n	800e2da <__kernel_rem_pio2+0x2a2>
 800e49a:	4630      	mov	r0, r6
 800e49c:	4639      	mov	r1, r7
 800e49e:	f7f2 fb7b 	bl	8000b98 <__aeabi_d2iz>
 800e4a2:	ab0c      	add	r3, sp, #48	; 0x30
 800e4a4:	4625      	mov	r5, r4
 800e4a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e4aa:	e716      	b.n	800e2da <__kernel_rem_pio2+0x2a2>
 800e4ac:	ab0c      	add	r3, sp, #48	; 0x30
 800e4ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e4b2:	f7f2 f857 	bl	8000564 <__aeabi_i2d>
 800e4b6:	4632      	mov	r2, r6
 800e4b8:	463b      	mov	r3, r7
 800e4ba:	f7f2 f8bd 	bl	8000638 <__aeabi_dmul>
 800e4be:	4642      	mov	r2, r8
 800e4c0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e4c4:	464b      	mov	r3, r9
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	f7f2 f8b5 	bl	8000638 <__aeabi_dmul>
 800e4ce:	3c01      	subs	r4, #1
 800e4d0:	4606      	mov	r6, r0
 800e4d2:	460f      	mov	r7, r1
 800e4d4:	e713      	b.n	800e2fe <__kernel_rem_pio2+0x2c6>
 800e4d6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e4da:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e4de:	f7f2 f8ab 	bl	8000638 <__aeabi_dmul>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	4648      	mov	r0, r9
 800e4e8:	4651      	mov	r1, sl
 800e4ea:	f7f1 feef 	bl	80002cc <__adddf3>
 800e4ee:	3701      	adds	r7, #1
 800e4f0:	4681      	mov	r9, r0
 800e4f2:	468a      	mov	sl, r1
 800e4f4:	9b00      	ldr	r3, [sp, #0]
 800e4f6:	429f      	cmp	r7, r3
 800e4f8:	dc02      	bgt.n	800e500 <__kernel_rem_pio2+0x4c8>
 800e4fa:	9b06      	ldr	r3, [sp, #24]
 800e4fc:	429f      	cmp	r7, r3
 800e4fe:	ddea      	ble.n	800e4d6 <__kernel_rem_pio2+0x49e>
 800e500:	9a06      	ldr	r2, [sp, #24]
 800e502:	ab48      	add	r3, sp, #288	; 0x120
 800e504:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e508:	e9c6 9a00 	strd	r9, sl, [r6]
 800e50c:	3c01      	subs	r4, #1
 800e50e:	e6fa      	b.n	800e306 <__kernel_rem_pio2+0x2ce>
 800e510:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e512:	2b02      	cmp	r3, #2
 800e514:	dc0b      	bgt.n	800e52e <__kernel_rem_pio2+0x4f6>
 800e516:	2b00      	cmp	r3, #0
 800e518:	dc39      	bgt.n	800e58e <__kernel_rem_pio2+0x556>
 800e51a:	d05d      	beq.n	800e5d8 <__kernel_rem_pio2+0x5a0>
 800e51c:	9b02      	ldr	r3, [sp, #8]
 800e51e:	f003 0007 	and.w	r0, r3, #7
 800e522:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e526:	ecbd 8b02 	vpop	{d8}
 800e52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e530:	2b03      	cmp	r3, #3
 800e532:	d1f3      	bne.n	800e51c <__kernel_rem_pio2+0x4e4>
 800e534:	9b05      	ldr	r3, [sp, #20]
 800e536:	9500      	str	r5, [sp, #0]
 800e538:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e53c:	eb0d 0403 	add.w	r4, sp, r3
 800e540:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e544:	46a2      	mov	sl, r4
 800e546:	9b00      	ldr	r3, [sp, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f1aa 0a08 	sub.w	sl, sl, #8
 800e54e:	dc69      	bgt.n	800e624 <__kernel_rem_pio2+0x5ec>
 800e550:	46aa      	mov	sl, r5
 800e552:	f1ba 0f01 	cmp.w	sl, #1
 800e556:	f1a4 0408 	sub.w	r4, r4, #8
 800e55a:	f300 8083 	bgt.w	800e664 <__kernel_rem_pio2+0x62c>
 800e55e:	9c05      	ldr	r4, [sp, #20]
 800e560:	ab48      	add	r3, sp, #288	; 0x120
 800e562:	441c      	add	r4, r3
 800e564:	2000      	movs	r0, #0
 800e566:	2100      	movs	r1, #0
 800e568:	2d01      	cmp	r5, #1
 800e56a:	f300 809a 	bgt.w	800e6a2 <__kernel_rem_pio2+0x66a>
 800e56e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e572:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e576:	f1bb 0f00 	cmp.w	fp, #0
 800e57a:	f040 8098 	bne.w	800e6ae <__kernel_rem_pio2+0x676>
 800e57e:	9b04      	ldr	r3, [sp, #16]
 800e580:	e9c3 7800 	strd	r7, r8, [r3]
 800e584:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e588:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e58c:	e7c6      	b.n	800e51c <__kernel_rem_pio2+0x4e4>
 800e58e:	9e05      	ldr	r6, [sp, #20]
 800e590:	ab48      	add	r3, sp, #288	; 0x120
 800e592:	441e      	add	r6, r3
 800e594:	462c      	mov	r4, r5
 800e596:	2000      	movs	r0, #0
 800e598:	2100      	movs	r1, #0
 800e59a:	2c00      	cmp	r4, #0
 800e59c:	da33      	bge.n	800e606 <__kernel_rem_pio2+0x5ce>
 800e59e:	f1bb 0f00 	cmp.w	fp, #0
 800e5a2:	d036      	beq.n	800e612 <__kernel_rem_pio2+0x5da>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5aa:	9c04      	ldr	r4, [sp, #16]
 800e5ac:	e9c4 2300 	strd	r2, r3, [r4]
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e5b8:	f7f1 fe86 	bl	80002c8 <__aeabi_dsub>
 800e5bc:	ae4a      	add	r6, sp, #296	; 0x128
 800e5be:	2401      	movs	r4, #1
 800e5c0:	42a5      	cmp	r5, r4
 800e5c2:	da29      	bge.n	800e618 <__kernel_rem_pio2+0x5e0>
 800e5c4:	f1bb 0f00 	cmp.w	fp, #0
 800e5c8:	d002      	beq.n	800e5d0 <__kernel_rem_pio2+0x598>
 800e5ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	9b04      	ldr	r3, [sp, #16]
 800e5d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e5d6:	e7a1      	b.n	800e51c <__kernel_rem_pio2+0x4e4>
 800e5d8:	9c05      	ldr	r4, [sp, #20]
 800e5da:	ab48      	add	r3, sp, #288	; 0x120
 800e5dc:	441c      	add	r4, r3
 800e5de:	2000      	movs	r0, #0
 800e5e0:	2100      	movs	r1, #0
 800e5e2:	2d00      	cmp	r5, #0
 800e5e4:	da09      	bge.n	800e5fa <__kernel_rem_pio2+0x5c2>
 800e5e6:	f1bb 0f00 	cmp.w	fp, #0
 800e5ea:	d002      	beq.n	800e5f2 <__kernel_rem_pio2+0x5ba>
 800e5ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	9b04      	ldr	r3, [sp, #16]
 800e5f4:	e9c3 0100 	strd	r0, r1, [r3]
 800e5f8:	e790      	b.n	800e51c <__kernel_rem_pio2+0x4e4>
 800e5fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e5fe:	f7f1 fe65 	bl	80002cc <__adddf3>
 800e602:	3d01      	subs	r5, #1
 800e604:	e7ed      	b.n	800e5e2 <__kernel_rem_pio2+0x5aa>
 800e606:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e60a:	f7f1 fe5f 	bl	80002cc <__adddf3>
 800e60e:	3c01      	subs	r4, #1
 800e610:	e7c3      	b.n	800e59a <__kernel_rem_pio2+0x562>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	e7c8      	b.n	800e5aa <__kernel_rem_pio2+0x572>
 800e618:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e61c:	f7f1 fe56 	bl	80002cc <__adddf3>
 800e620:	3401      	adds	r4, #1
 800e622:	e7cd      	b.n	800e5c0 <__kernel_rem_pio2+0x588>
 800e624:	e9da 8900 	ldrd	r8, r9, [sl]
 800e628:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e62c:	9b00      	ldr	r3, [sp, #0]
 800e62e:	3b01      	subs	r3, #1
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	4632      	mov	r2, r6
 800e634:	463b      	mov	r3, r7
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	f7f1 fe47 	bl	80002cc <__adddf3>
 800e63e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	4640      	mov	r0, r8
 800e648:	4649      	mov	r1, r9
 800e64a:	f7f1 fe3d 	bl	80002c8 <__aeabi_dsub>
 800e64e:	4632      	mov	r2, r6
 800e650:	463b      	mov	r3, r7
 800e652:	f7f1 fe3b 	bl	80002cc <__adddf3>
 800e656:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e65a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e65e:	ed8a 7b00 	vstr	d7, [sl]
 800e662:	e770      	b.n	800e546 <__kernel_rem_pio2+0x50e>
 800e664:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e668:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e66c:	4640      	mov	r0, r8
 800e66e:	4632      	mov	r2, r6
 800e670:	463b      	mov	r3, r7
 800e672:	4649      	mov	r1, r9
 800e674:	f7f1 fe2a 	bl	80002cc <__adddf3>
 800e678:	e9cd 0100 	strd	r0, r1, [sp]
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	4640      	mov	r0, r8
 800e682:	4649      	mov	r1, r9
 800e684:	f7f1 fe20 	bl	80002c8 <__aeabi_dsub>
 800e688:	4632      	mov	r2, r6
 800e68a:	463b      	mov	r3, r7
 800e68c:	f7f1 fe1e 	bl	80002cc <__adddf3>
 800e690:	ed9d 7b00 	vldr	d7, [sp]
 800e694:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e698:	ed84 7b00 	vstr	d7, [r4]
 800e69c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6a0:	e757      	b.n	800e552 <__kernel_rem_pio2+0x51a>
 800e6a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e6a6:	f7f1 fe11 	bl	80002cc <__adddf3>
 800e6aa:	3d01      	subs	r5, #1
 800e6ac:	e75c      	b.n	800e568 <__kernel_rem_pio2+0x530>
 800e6ae:	9b04      	ldr	r3, [sp, #16]
 800e6b0:	9a04      	ldr	r2, [sp, #16]
 800e6b2:	601f      	str	r7, [r3, #0]
 800e6b4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e6b8:	605c      	str	r4, [r3, #4]
 800e6ba:	609d      	str	r5, [r3, #8]
 800e6bc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e6c0:	60d3      	str	r3, [r2, #12]
 800e6c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6c6:	6110      	str	r0, [r2, #16]
 800e6c8:	6153      	str	r3, [r2, #20]
 800e6ca:	e727      	b.n	800e51c <__kernel_rem_pio2+0x4e4>
 800e6cc:	41700000 	.word	0x41700000
 800e6d0:	3e700000 	.word	0x3e700000
 800e6d4:	00000000 	.word	0x00000000

0800e6d8 <floor>:
 800e6d8:	ec51 0b10 	vmov	r0, r1, d0
 800e6dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e6e8:	2e13      	cmp	r6, #19
 800e6ea:	ee10 5a10 	vmov	r5, s0
 800e6ee:	ee10 8a10 	vmov	r8, s0
 800e6f2:	460c      	mov	r4, r1
 800e6f4:	dc31      	bgt.n	800e75a <floor+0x82>
 800e6f6:	2e00      	cmp	r6, #0
 800e6f8:	da14      	bge.n	800e724 <floor+0x4c>
 800e6fa:	a333      	add	r3, pc, #204	; (adr r3, 800e7c8 <floor+0xf0>)
 800e6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e700:	f7f1 fde4 	bl	80002cc <__adddf3>
 800e704:	2200      	movs	r2, #0
 800e706:	2300      	movs	r3, #0
 800e708:	f7f2 fa26 	bl	8000b58 <__aeabi_dcmpgt>
 800e70c:	b138      	cbz	r0, 800e71e <floor+0x46>
 800e70e:	2c00      	cmp	r4, #0
 800e710:	da53      	bge.n	800e7ba <floor+0xe2>
 800e712:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e716:	4325      	orrs	r5, r4
 800e718:	d052      	beq.n	800e7c0 <floor+0xe8>
 800e71a:	4c2d      	ldr	r4, [pc, #180]	; (800e7d0 <floor+0xf8>)
 800e71c:	2500      	movs	r5, #0
 800e71e:	4621      	mov	r1, r4
 800e720:	4628      	mov	r0, r5
 800e722:	e024      	b.n	800e76e <floor+0x96>
 800e724:	4f2b      	ldr	r7, [pc, #172]	; (800e7d4 <floor+0xfc>)
 800e726:	4137      	asrs	r7, r6
 800e728:	ea01 0307 	and.w	r3, r1, r7
 800e72c:	4303      	orrs	r3, r0
 800e72e:	d01e      	beq.n	800e76e <floor+0x96>
 800e730:	a325      	add	r3, pc, #148	; (adr r3, 800e7c8 <floor+0xf0>)
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	f7f1 fdc9 	bl	80002cc <__adddf3>
 800e73a:	2200      	movs	r2, #0
 800e73c:	2300      	movs	r3, #0
 800e73e:	f7f2 fa0b 	bl	8000b58 <__aeabi_dcmpgt>
 800e742:	2800      	cmp	r0, #0
 800e744:	d0eb      	beq.n	800e71e <floor+0x46>
 800e746:	2c00      	cmp	r4, #0
 800e748:	bfbe      	ittt	lt
 800e74a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e74e:	4133      	asrlt	r3, r6
 800e750:	18e4      	addlt	r4, r4, r3
 800e752:	ea24 0407 	bic.w	r4, r4, r7
 800e756:	2500      	movs	r5, #0
 800e758:	e7e1      	b.n	800e71e <floor+0x46>
 800e75a:	2e33      	cmp	r6, #51	; 0x33
 800e75c:	dd0b      	ble.n	800e776 <floor+0x9e>
 800e75e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e762:	d104      	bne.n	800e76e <floor+0x96>
 800e764:	ee10 2a10 	vmov	r2, s0
 800e768:	460b      	mov	r3, r1
 800e76a:	f7f1 fdaf 	bl	80002cc <__adddf3>
 800e76e:	ec41 0b10 	vmov	d0, r0, r1
 800e772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e776:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e77a:	f04f 37ff 	mov.w	r7, #4294967295
 800e77e:	40df      	lsrs	r7, r3
 800e780:	4238      	tst	r0, r7
 800e782:	d0f4      	beq.n	800e76e <floor+0x96>
 800e784:	a310      	add	r3, pc, #64	; (adr r3, 800e7c8 <floor+0xf0>)
 800e786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78a:	f7f1 fd9f 	bl	80002cc <__adddf3>
 800e78e:	2200      	movs	r2, #0
 800e790:	2300      	movs	r3, #0
 800e792:	f7f2 f9e1 	bl	8000b58 <__aeabi_dcmpgt>
 800e796:	2800      	cmp	r0, #0
 800e798:	d0c1      	beq.n	800e71e <floor+0x46>
 800e79a:	2c00      	cmp	r4, #0
 800e79c:	da0a      	bge.n	800e7b4 <floor+0xdc>
 800e79e:	2e14      	cmp	r6, #20
 800e7a0:	d101      	bne.n	800e7a6 <floor+0xce>
 800e7a2:	3401      	adds	r4, #1
 800e7a4:	e006      	b.n	800e7b4 <floor+0xdc>
 800e7a6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	40b3      	lsls	r3, r6
 800e7ae:	441d      	add	r5, r3
 800e7b0:	45a8      	cmp	r8, r5
 800e7b2:	d8f6      	bhi.n	800e7a2 <floor+0xca>
 800e7b4:	ea25 0507 	bic.w	r5, r5, r7
 800e7b8:	e7b1      	b.n	800e71e <floor+0x46>
 800e7ba:	2500      	movs	r5, #0
 800e7bc:	462c      	mov	r4, r5
 800e7be:	e7ae      	b.n	800e71e <floor+0x46>
 800e7c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e7c4:	e7ab      	b.n	800e71e <floor+0x46>
 800e7c6:	bf00      	nop
 800e7c8:	8800759c 	.word	0x8800759c
 800e7cc:	7e37e43c 	.word	0x7e37e43c
 800e7d0:	bff00000 	.word	0xbff00000
 800e7d4:	000fffff 	.word	0x000fffff

0800e7d8 <_init>:
 800e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7da:	bf00      	nop
 800e7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7de:	bc08      	pop	{r3}
 800e7e0:	469e      	mov	lr, r3
 800e7e2:	4770      	bx	lr

0800e7e4 <_fini>:
 800e7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e6:	bf00      	nop
 800e7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ea:	bc08      	pop	{r3}
 800e7ec:	469e      	mov	lr, r3
 800e7ee:	4770      	bx	lr
