
lidar_code_2223.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca80  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800cb38  0800cb38  0001cb38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d308  0800d308  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  0800d308  0800d308  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d308  0800d308  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d308  0800d308  0001d308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d30c  0800d30c  0001d30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800d310  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d7c  20000230  0800d540  00020230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000fac  0800d540  00020fac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001735d  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003391  00000000  00000000  000375f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  0003a990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc8  00000000  00000000  0003bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018dcd  00000000  00000000  0003cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b1f  00000000  00000000  00055b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095822  00000000  00000000  0006f664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e04  00000000  00000000  00104e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0010ac8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000230 	.word	0x20000230
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800cb20 	.word	0x0800cb20

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000234 	.word	0x20000234
 80000fc:	0800cb20 	.word	0x0800cb20

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fa09 	bl	800184c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f959 	bl	80016fc <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f9fb 	bl	800184c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f9f1 	bl	800184c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f981 	bl	8001780 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f977 	bl	8001780 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 f8d5 	bl	8000658 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f861 	bl	8000580 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 f8c7 	bl	8000658 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 f8bd 	bl	8000658 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 f86d 	bl	80005cc <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 f863 	bl	80005cc <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_f2uiz>:
 8000514:	219e      	movs	r1, #158	; 0x9e
 8000516:	b510      	push	{r4, lr}
 8000518:	05c9      	lsls	r1, r1, #23
 800051a:	1c04      	adds	r4, r0, #0
 800051c:	f7ff fff0 	bl	8000500 <__aeabi_fcmpge>
 8000520:	2800      	cmp	r0, #0
 8000522:	d103      	bne.n	800052c <__aeabi_f2uiz+0x18>
 8000524:	1c20      	adds	r0, r4, #0
 8000526:	f000 fa7b 	bl	8000a20 <__aeabi_f2iz>
 800052a:	bd10      	pop	{r4, pc}
 800052c:	219e      	movs	r1, #158	; 0x9e
 800052e:	1c20      	adds	r0, r4, #0
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	f000 f8d5 	bl	80006e0 <__aeabi_fsub>
 8000536:	f000 fa73 	bl	8000a20 <__aeabi_f2iz>
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	469c      	mov	ip, r3
 8000540:	4460      	add	r0, ip
 8000542:	e7f2      	b.n	800052a <__aeabi_f2uiz+0x16>

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ff9d 	bl	800048c <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f83d 	bl	80025d8 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fc96 	bl	8001e98 <__aeabi_dsub>
 800056c:	f002 f834 	bl	80025d8 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__eqsf2>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0042      	lsls	r2, r0, #1
 8000584:	0245      	lsls	r5, r0, #9
 8000586:	024e      	lsls	r6, r1, #9
 8000588:	004c      	lsls	r4, r1, #1
 800058a:	0fc3      	lsrs	r3, r0, #31
 800058c:	0a6d      	lsrs	r5, r5, #9
 800058e:	2001      	movs	r0, #1
 8000590:	0e12      	lsrs	r2, r2, #24
 8000592:	0a76      	lsrs	r6, r6, #9
 8000594:	0e24      	lsrs	r4, r4, #24
 8000596:	0fc9      	lsrs	r1, r1, #31
 8000598:	2aff      	cmp	r2, #255	; 0xff
 800059a:	d006      	beq.n	80005aa <__eqsf2+0x2a>
 800059c:	2cff      	cmp	r4, #255	; 0xff
 800059e:	d003      	beq.n	80005a8 <__eqsf2+0x28>
 80005a0:	42a2      	cmp	r2, r4
 80005a2:	d101      	bne.n	80005a8 <__eqsf2+0x28>
 80005a4:	42b5      	cmp	r5, r6
 80005a6:	d006      	beq.n	80005b6 <__eqsf2+0x36>
 80005a8:	bd70      	pop	{r4, r5, r6, pc}
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d1fc      	bne.n	80005a8 <__eqsf2+0x28>
 80005ae:	2cff      	cmp	r4, #255	; 0xff
 80005b0:	d1fa      	bne.n	80005a8 <__eqsf2+0x28>
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d1f8      	bne.n	80005a8 <__eqsf2+0x28>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d006      	beq.n	80005c8 <__eqsf2+0x48>
 80005ba:	2001      	movs	r0, #1
 80005bc:	2a00      	cmp	r2, #0
 80005be:	d1f3      	bne.n	80005a8 <__eqsf2+0x28>
 80005c0:	0028      	movs	r0, r5
 80005c2:	1e43      	subs	r3, r0, #1
 80005c4:	4198      	sbcs	r0, r3
 80005c6:	e7ef      	b.n	80005a8 <__eqsf2+0x28>
 80005c8:	2000      	movs	r0, #0
 80005ca:	e7ed      	b.n	80005a8 <__eqsf2+0x28>

080005cc <__gesf2>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	0042      	lsls	r2, r0, #1
 80005d0:	0245      	lsls	r5, r0, #9
 80005d2:	024e      	lsls	r6, r1, #9
 80005d4:	004c      	lsls	r4, r1, #1
 80005d6:	0fc3      	lsrs	r3, r0, #31
 80005d8:	0a6d      	lsrs	r5, r5, #9
 80005da:	0e12      	lsrs	r2, r2, #24
 80005dc:	0a76      	lsrs	r6, r6, #9
 80005de:	0e24      	lsrs	r4, r4, #24
 80005e0:	0fc8      	lsrs	r0, r1, #31
 80005e2:	2aff      	cmp	r2, #255	; 0xff
 80005e4:	d01b      	beq.n	800061e <__gesf2+0x52>
 80005e6:	2cff      	cmp	r4, #255	; 0xff
 80005e8:	d00e      	beq.n	8000608 <__gesf2+0x3c>
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d11b      	bne.n	8000626 <__gesf2+0x5a>
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d101      	bne.n	80005f6 <__gesf2+0x2a>
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d01c      	beq.n	8000630 <__gesf2+0x64>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d00c      	beq.n	8000614 <__gesf2+0x48>
 80005fa:	4283      	cmp	r3, r0
 80005fc:	d01c      	beq.n	8000638 <__gesf2+0x6c>
 80005fe:	2102      	movs	r1, #2
 8000600:	1e58      	subs	r0, r3, #1
 8000602:	4008      	ands	r0, r1
 8000604:	3801      	subs	r0, #1
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	2e00      	cmp	r6, #0
 800060a:	d122      	bne.n	8000652 <__gesf2+0x86>
 800060c:	2a00      	cmp	r2, #0
 800060e:	d1f4      	bne.n	80005fa <__gesf2+0x2e>
 8000610:	2d00      	cmp	r5, #0
 8000612:	d1f2      	bne.n	80005fa <__gesf2+0x2e>
 8000614:	2800      	cmp	r0, #0
 8000616:	d1f6      	bne.n	8000606 <__gesf2+0x3a>
 8000618:	2001      	movs	r0, #1
 800061a:	4240      	negs	r0, r0
 800061c:	e7f3      	b.n	8000606 <__gesf2+0x3a>
 800061e:	2d00      	cmp	r5, #0
 8000620:	d117      	bne.n	8000652 <__gesf2+0x86>
 8000622:	2cff      	cmp	r4, #255	; 0xff
 8000624:	d0f0      	beq.n	8000608 <__gesf2+0x3c>
 8000626:	2c00      	cmp	r4, #0
 8000628:	d1e7      	bne.n	80005fa <__gesf2+0x2e>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d1e5      	bne.n	80005fa <__gesf2+0x2e>
 800062e:	e7e6      	b.n	80005fe <__gesf2+0x32>
 8000630:	2000      	movs	r0, #0
 8000632:	2d00      	cmp	r5, #0
 8000634:	d0e7      	beq.n	8000606 <__gesf2+0x3a>
 8000636:	e7e2      	b.n	80005fe <__gesf2+0x32>
 8000638:	42a2      	cmp	r2, r4
 800063a:	dc05      	bgt.n	8000648 <__gesf2+0x7c>
 800063c:	dbea      	blt.n	8000614 <__gesf2+0x48>
 800063e:	42b5      	cmp	r5, r6
 8000640:	d802      	bhi.n	8000648 <__gesf2+0x7c>
 8000642:	d3e7      	bcc.n	8000614 <__gesf2+0x48>
 8000644:	2000      	movs	r0, #0
 8000646:	e7de      	b.n	8000606 <__gesf2+0x3a>
 8000648:	4243      	negs	r3, r0
 800064a:	4158      	adcs	r0, r3
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	3801      	subs	r0, #1
 8000650:	e7d9      	b.n	8000606 <__gesf2+0x3a>
 8000652:	2002      	movs	r0, #2
 8000654:	4240      	negs	r0, r0
 8000656:	e7d6      	b.n	8000606 <__gesf2+0x3a>

08000658 <__lesf2>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	0042      	lsls	r2, r0, #1
 800065c:	0245      	lsls	r5, r0, #9
 800065e:	024e      	lsls	r6, r1, #9
 8000660:	004c      	lsls	r4, r1, #1
 8000662:	0fc3      	lsrs	r3, r0, #31
 8000664:	0a6d      	lsrs	r5, r5, #9
 8000666:	0e12      	lsrs	r2, r2, #24
 8000668:	0a76      	lsrs	r6, r6, #9
 800066a:	0e24      	lsrs	r4, r4, #24
 800066c:	0fc8      	lsrs	r0, r1, #31
 800066e:	2aff      	cmp	r2, #255	; 0xff
 8000670:	d00b      	beq.n	800068a <__lesf2+0x32>
 8000672:	2cff      	cmp	r4, #255	; 0xff
 8000674:	d00d      	beq.n	8000692 <__lesf2+0x3a>
 8000676:	2a00      	cmp	r2, #0
 8000678:	d11f      	bne.n	80006ba <__lesf2+0x62>
 800067a:	2c00      	cmp	r4, #0
 800067c:	d116      	bne.n	80006ac <__lesf2+0x54>
 800067e:	2e00      	cmp	r6, #0
 8000680:	d114      	bne.n	80006ac <__lesf2+0x54>
 8000682:	2000      	movs	r0, #0
 8000684:	2d00      	cmp	r5, #0
 8000686:	d010      	beq.n	80006aa <__lesf2+0x52>
 8000688:	e009      	b.n	800069e <__lesf2+0x46>
 800068a:	2d00      	cmp	r5, #0
 800068c:	d10c      	bne.n	80006a8 <__lesf2+0x50>
 800068e:	2cff      	cmp	r4, #255	; 0xff
 8000690:	d113      	bne.n	80006ba <__lesf2+0x62>
 8000692:	2e00      	cmp	r6, #0
 8000694:	d108      	bne.n	80006a8 <__lesf2+0x50>
 8000696:	2a00      	cmp	r2, #0
 8000698:	d008      	beq.n	80006ac <__lesf2+0x54>
 800069a:	4283      	cmp	r3, r0
 800069c:	d012      	beq.n	80006c4 <__lesf2+0x6c>
 800069e:	2102      	movs	r1, #2
 80006a0:	1e58      	subs	r0, r3, #1
 80006a2:	4008      	ands	r0, r1
 80006a4:	3801      	subs	r0, #1
 80006a6:	e000      	b.n	80006aa <__lesf2+0x52>
 80006a8:	2002      	movs	r0, #2
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d1f4      	bne.n	800069a <__lesf2+0x42>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d1fa      	bne.n	80006aa <__lesf2+0x52>
 80006b4:	2001      	movs	r0, #1
 80006b6:	4240      	negs	r0, r0
 80006b8:	e7f7      	b.n	80006aa <__lesf2+0x52>
 80006ba:	2c00      	cmp	r4, #0
 80006bc:	d1ed      	bne.n	800069a <__lesf2+0x42>
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1eb      	bne.n	800069a <__lesf2+0x42>
 80006c2:	e7ec      	b.n	800069e <__lesf2+0x46>
 80006c4:	42a2      	cmp	r2, r4
 80006c6:	dc05      	bgt.n	80006d4 <__lesf2+0x7c>
 80006c8:	dbf2      	blt.n	80006b0 <__lesf2+0x58>
 80006ca:	42b5      	cmp	r5, r6
 80006cc:	d802      	bhi.n	80006d4 <__lesf2+0x7c>
 80006ce:	d3ef      	bcc.n	80006b0 <__lesf2+0x58>
 80006d0:	2000      	movs	r0, #0
 80006d2:	e7ea      	b.n	80006aa <__lesf2+0x52>
 80006d4:	4243      	negs	r3, r0
 80006d6:	4158      	adcs	r0, r3
 80006d8:	0040      	lsls	r0, r0, #1
 80006da:	3801      	subs	r0, #1
 80006dc:	e7e5      	b.n	80006aa <__lesf2+0x52>
 80006de:	46c0      	nop			; (mov r8, r8)

080006e0 <__aeabi_fsub>:
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	46c6      	mov	lr, r8
 80006e4:	0243      	lsls	r3, r0, #9
 80006e6:	0a5b      	lsrs	r3, r3, #9
 80006e8:	0045      	lsls	r5, r0, #1
 80006ea:	00da      	lsls	r2, r3, #3
 80006ec:	0fc4      	lsrs	r4, r0, #31
 80006ee:	0248      	lsls	r0, r1, #9
 80006f0:	004f      	lsls	r7, r1, #1
 80006f2:	4694      	mov	ip, r2
 80006f4:	0a42      	lsrs	r2, r0, #9
 80006f6:	001e      	movs	r6, r3
 80006f8:	4690      	mov	r8, r2
 80006fa:	b500      	push	{lr}
 80006fc:	0e2d      	lsrs	r5, r5, #24
 80006fe:	0e3f      	lsrs	r7, r7, #24
 8000700:	0fc9      	lsrs	r1, r1, #31
 8000702:	0980      	lsrs	r0, r0, #6
 8000704:	2fff      	cmp	r7, #255	; 0xff
 8000706:	d059      	beq.n	80007bc <__aeabi_fsub+0xdc>
 8000708:	2201      	movs	r2, #1
 800070a:	4051      	eors	r1, r2
 800070c:	428c      	cmp	r4, r1
 800070e:	d039      	beq.n	8000784 <__aeabi_fsub+0xa4>
 8000710:	1bea      	subs	r2, r5, r7
 8000712:	2a00      	cmp	r2, #0
 8000714:	dd58      	ble.n	80007c8 <__aeabi_fsub+0xe8>
 8000716:	2f00      	cmp	r7, #0
 8000718:	d068      	beq.n	80007ec <__aeabi_fsub+0x10c>
 800071a:	2dff      	cmp	r5, #255	; 0xff
 800071c:	d100      	bne.n	8000720 <__aeabi_fsub+0x40>
 800071e:	e0d1      	b.n	80008c4 <__aeabi_fsub+0x1e4>
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	4318      	orrs	r0, r3
 8000726:	2a1b      	cmp	r2, #27
 8000728:	dc00      	bgt.n	800072c <__aeabi_fsub+0x4c>
 800072a:	e0e3      	b.n	80008f4 <__aeabi_fsub+0x214>
 800072c:	2301      	movs	r3, #1
 800072e:	4662      	mov	r2, ip
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	015a      	lsls	r2, r3, #5
 8000734:	d400      	bmi.n	8000738 <__aeabi_fsub+0x58>
 8000736:	e0ac      	b.n	8000892 <__aeabi_fsub+0x1b2>
 8000738:	019b      	lsls	r3, r3, #6
 800073a:	099e      	lsrs	r6, r3, #6
 800073c:	0030      	movs	r0, r6
 800073e:	f002 f85d 	bl	80027fc <__clzsi2>
 8000742:	0033      	movs	r3, r6
 8000744:	3805      	subs	r0, #5
 8000746:	4083      	lsls	r3, r0
 8000748:	4285      	cmp	r5, r0
 800074a:	dc00      	bgt.n	800074e <__aeabi_fsub+0x6e>
 800074c:	e0c6      	b.n	80008dc <__aeabi_fsub+0x1fc>
 800074e:	4ab2      	ldr	r2, [pc, #712]	; (8000a18 <__aeabi_fsub+0x338>)
 8000750:	1a2d      	subs	r5, r5, r0
 8000752:	4013      	ands	r3, r2
 8000754:	075a      	lsls	r2, r3, #29
 8000756:	d004      	beq.n	8000762 <__aeabi_fsub+0x82>
 8000758:	220f      	movs	r2, #15
 800075a:	401a      	ands	r2, r3
 800075c:	2a04      	cmp	r2, #4
 800075e:	d000      	beq.n	8000762 <__aeabi_fsub+0x82>
 8000760:	3304      	adds	r3, #4
 8000762:	015a      	lsls	r2, r3, #5
 8000764:	d400      	bmi.n	8000768 <__aeabi_fsub+0x88>
 8000766:	e097      	b.n	8000898 <__aeabi_fsub+0x1b8>
 8000768:	1c6a      	adds	r2, r5, #1
 800076a:	2dfe      	cmp	r5, #254	; 0xfe
 800076c:	d100      	bne.n	8000770 <__aeabi_fsub+0x90>
 800076e:	e084      	b.n	800087a <__aeabi_fsub+0x19a>
 8000770:	019b      	lsls	r3, r3, #6
 8000772:	0a5e      	lsrs	r6, r3, #9
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	05d0      	lsls	r0, r2, #23
 8000778:	4330      	orrs	r0, r6
 800077a:	07e4      	lsls	r4, r4, #31
 800077c:	4320      	orrs	r0, r4
 800077e:	bc80      	pop	{r7}
 8000780:	46b8      	mov	r8, r7
 8000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000784:	1bea      	subs	r2, r5, r7
 8000786:	2a00      	cmp	r2, #0
 8000788:	dd41      	ble.n	800080e <__aeabi_fsub+0x12e>
 800078a:	2f00      	cmp	r7, #0
 800078c:	d06b      	beq.n	8000866 <__aeabi_fsub+0x186>
 800078e:	2dff      	cmp	r5, #255	; 0xff
 8000790:	d100      	bne.n	8000794 <__aeabi_fsub+0xb4>
 8000792:	e097      	b.n	80008c4 <__aeabi_fsub+0x1e4>
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	4318      	orrs	r0, r3
 800079a:	2a1b      	cmp	r2, #27
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_fsub+0xc0>
 800079e:	e0cc      	b.n	800093a <__aeabi_fsub+0x25a>
 80007a0:	2301      	movs	r3, #1
 80007a2:	4463      	add	r3, ip
 80007a4:	015a      	lsls	r2, r3, #5
 80007a6:	d574      	bpl.n	8000892 <__aeabi_fsub+0x1b2>
 80007a8:	3501      	adds	r5, #1
 80007aa:	2dff      	cmp	r5, #255	; 0xff
 80007ac:	d065      	beq.n	800087a <__aeabi_fsub+0x19a>
 80007ae:	2201      	movs	r2, #1
 80007b0:	499a      	ldr	r1, [pc, #616]	; (8000a1c <__aeabi_fsub+0x33c>)
 80007b2:	401a      	ands	r2, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	400b      	ands	r3, r1
 80007b8:	4313      	orrs	r3, r2
 80007ba:	e7cb      	b.n	8000754 <__aeabi_fsub+0x74>
 80007bc:	2800      	cmp	r0, #0
 80007be:	d01f      	beq.n	8000800 <__aeabi_fsub+0x120>
 80007c0:	428c      	cmp	r4, r1
 80007c2:	d022      	beq.n	800080a <__aeabi_fsub+0x12a>
 80007c4:	002a      	movs	r2, r5
 80007c6:	3aff      	subs	r2, #255	; 0xff
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	d035      	beq.n	8000838 <__aeabi_fsub+0x158>
 80007cc:	1b7a      	subs	r2, r7, r5
 80007ce:	2d00      	cmp	r5, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fsub+0xf4>
 80007d2:	e099      	b.n	8000908 <__aeabi_fsub+0x228>
 80007d4:	4663      	mov	r3, ip
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d100      	bne.n	80007dc <__aeabi_fsub+0xfc>
 80007da:	e0dd      	b.n	8000998 <__aeabi_fsub+0x2b8>
 80007dc:	1e53      	subs	r3, r2, #1
 80007de:	2a01      	cmp	r2, #1
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fsub+0x104>
 80007e2:	e105      	b.n	80009f0 <__aeabi_fsub+0x310>
 80007e4:	2aff      	cmp	r2, #255	; 0xff
 80007e6:	d06b      	beq.n	80008c0 <__aeabi_fsub+0x1e0>
 80007e8:	001a      	movs	r2, r3
 80007ea:	e094      	b.n	8000916 <__aeabi_fsub+0x236>
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d073      	beq.n	80008d8 <__aeabi_fsub+0x1f8>
 80007f0:	1e51      	subs	r1, r2, #1
 80007f2:	2a01      	cmp	r2, #1
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fsub+0x118>
 80007f6:	e0df      	b.n	80009b8 <__aeabi_fsub+0x2d8>
 80007f8:	2aff      	cmp	r2, #255	; 0xff
 80007fa:	d063      	beq.n	80008c4 <__aeabi_fsub+0x1e4>
 80007fc:	000a      	movs	r2, r1
 80007fe:	e792      	b.n	8000726 <__aeabi_fsub+0x46>
 8000800:	2201      	movs	r2, #1
 8000802:	4051      	eors	r1, r2
 8000804:	42a1      	cmp	r1, r4
 8000806:	d000      	beq.n	800080a <__aeabi_fsub+0x12a>
 8000808:	e782      	b.n	8000710 <__aeabi_fsub+0x30>
 800080a:	002a      	movs	r2, r5
 800080c:	3aff      	subs	r2, #255	; 0xff
 800080e:	2a00      	cmp	r2, #0
 8000810:	d036      	beq.n	8000880 <__aeabi_fsub+0x1a0>
 8000812:	1b7a      	subs	r2, r7, r5
 8000814:	2d00      	cmp	r5, #0
 8000816:	d100      	bne.n	800081a <__aeabi_fsub+0x13a>
 8000818:	e0aa      	b.n	8000970 <__aeabi_fsub+0x290>
 800081a:	2fff      	cmp	r7, #255	; 0xff
 800081c:	d100      	bne.n	8000820 <__aeabi_fsub+0x140>
 800081e:	e0da      	b.n	80009d6 <__aeabi_fsub+0x2f6>
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	4661      	mov	r1, ip
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	4319      	orrs	r1, r3
 8000828:	468c      	mov	ip, r1
 800082a:	2a1b      	cmp	r2, #27
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fsub+0x150>
 800082e:	e0d4      	b.n	80009da <__aeabi_fsub+0x2fa>
 8000830:	2301      	movs	r3, #1
 8000832:	003d      	movs	r5, r7
 8000834:	181b      	adds	r3, r3, r0
 8000836:	e7b5      	b.n	80007a4 <__aeabi_fsub+0xc4>
 8000838:	27fe      	movs	r7, #254	; 0xfe
 800083a:	1c6a      	adds	r2, r5, #1
 800083c:	4217      	tst	r7, r2
 800083e:	d171      	bne.n	8000924 <__aeabi_fsub+0x244>
 8000840:	2d00      	cmp	r5, #0
 8000842:	d000      	beq.n	8000846 <__aeabi_fsub+0x166>
 8000844:	e09e      	b.n	8000984 <__aeabi_fsub+0x2a4>
 8000846:	4663      	mov	r3, ip
 8000848:	2b00      	cmp	r3, #0
 800084a:	d100      	bne.n	800084e <__aeabi_fsub+0x16e>
 800084c:	e0d5      	b.n	80009fa <__aeabi_fsub+0x31a>
 800084e:	2200      	movs	r2, #0
 8000850:	2800      	cmp	r0, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fsub+0x176>
 8000854:	e78f      	b.n	8000776 <__aeabi_fsub+0x96>
 8000856:	1a1b      	subs	r3, r3, r0
 8000858:	015e      	lsls	r6, r3, #5
 800085a:	d400      	bmi.n	800085e <__aeabi_fsub+0x17e>
 800085c:	e0d6      	b.n	8000a0c <__aeabi_fsub+0x32c>
 800085e:	4663      	mov	r3, ip
 8000860:	000c      	movs	r4, r1
 8000862:	1ac3      	subs	r3, r0, r3
 8000864:	e776      	b.n	8000754 <__aeabi_fsub+0x74>
 8000866:	2800      	cmp	r0, #0
 8000868:	d036      	beq.n	80008d8 <__aeabi_fsub+0x1f8>
 800086a:	1e51      	subs	r1, r2, #1
 800086c:	2a01      	cmp	r2, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_fsub+0x192>
 8000870:	e09a      	b.n	80009a8 <__aeabi_fsub+0x2c8>
 8000872:	2aff      	cmp	r2, #255	; 0xff
 8000874:	d026      	beq.n	80008c4 <__aeabi_fsub+0x1e4>
 8000876:	000a      	movs	r2, r1
 8000878:	e78f      	b.n	800079a <__aeabi_fsub+0xba>
 800087a:	22ff      	movs	r2, #255	; 0xff
 800087c:	2600      	movs	r6, #0
 800087e:	e77a      	b.n	8000776 <__aeabi_fsub+0x96>
 8000880:	27fe      	movs	r7, #254	; 0xfe
 8000882:	1c6a      	adds	r2, r5, #1
 8000884:	4217      	tst	r7, r2
 8000886:	d062      	beq.n	800094e <__aeabi_fsub+0x26e>
 8000888:	2aff      	cmp	r2, #255	; 0xff
 800088a:	d0f6      	beq.n	800087a <__aeabi_fsub+0x19a>
 800088c:	0015      	movs	r5, r2
 800088e:	4460      	add	r0, ip
 8000890:	0843      	lsrs	r3, r0, #1
 8000892:	075a      	lsls	r2, r3, #29
 8000894:	d000      	beq.n	8000898 <__aeabi_fsub+0x1b8>
 8000896:	e75f      	b.n	8000758 <__aeabi_fsub+0x78>
 8000898:	08db      	lsrs	r3, r3, #3
 800089a:	2dff      	cmp	r5, #255	; 0xff
 800089c:	d012      	beq.n	80008c4 <__aeabi_fsub+0x1e4>
 800089e:	025b      	lsls	r3, r3, #9
 80008a0:	0a5e      	lsrs	r6, r3, #9
 80008a2:	b2ea      	uxtb	r2, r5
 80008a4:	e767      	b.n	8000776 <__aeabi_fsub+0x96>
 80008a6:	4662      	mov	r2, ip
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	d100      	bne.n	80008ae <__aeabi_fsub+0x1ce>
 80008ac:	e093      	b.n	80009d6 <__aeabi_fsub+0x2f6>
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d008      	beq.n	80008c4 <__aeabi_fsub+0x1e4>
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	03d2      	lsls	r2, r2, #15
 80008b6:	4213      	tst	r3, r2
 80008b8:	d004      	beq.n	80008c4 <__aeabi_fsub+0x1e4>
 80008ba:	4640      	mov	r0, r8
 80008bc:	4210      	tst	r0, r2
 80008be:	d101      	bne.n	80008c4 <__aeabi_fsub+0x1e4>
 80008c0:	000c      	movs	r4, r1
 80008c2:	4643      	mov	r3, r8
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0d8      	beq.n	800087a <__aeabi_fsub+0x19a>
 80008c8:	2680      	movs	r6, #128	; 0x80
 80008ca:	03f6      	lsls	r6, r6, #15
 80008cc:	431e      	orrs	r6, r3
 80008ce:	0276      	lsls	r6, r6, #9
 80008d0:	22ff      	movs	r2, #255	; 0xff
 80008d2:	0a76      	lsrs	r6, r6, #9
 80008d4:	e74f      	b.n	8000776 <__aeabi_fsub+0x96>
 80008d6:	4643      	mov	r3, r8
 80008d8:	0015      	movs	r5, r2
 80008da:	e7de      	b.n	800089a <__aeabi_fsub+0x1ba>
 80008dc:	2220      	movs	r2, #32
 80008de:	1b40      	subs	r0, r0, r5
 80008e0:	3001      	adds	r0, #1
 80008e2:	1a12      	subs	r2, r2, r0
 80008e4:	0019      	movs	r1, r3
 80008e6:	4093      	lsls	r3, r2
 80008e8:	40c1      	lsrs	r1, r0
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	4193      	sbcs	r3, r2
 80008ee:	2500      	movs	r5, #0
 80008f0:	430b      	orrs	r3, r1
 80008f2:	e72f      	b.n	8000754 <__aeabi_fsub+0x74>
 80008f4:	2320      	movs	r3, #32
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	0001      	movs	r1, r0
 80008fa:	4098      	lsls	r0, r3
 80008fc:	0003      	movs	r3, r0
 80008fe:	40d1      	lsrs	r1, r2
 8000900:	1e5a      	subs	r2, r3, #1
 8000902:	4193      	sbcs	r3, r2
 8000904:	430b      	orrs	r3, r1
 8000906:	e712      	b.n	800072e <__aeabi_fsub+0x4e>
 8000908:	2fff      	cmp	r7, #255	; 0xff
 800090a:	d0d9      	beq.n	80008c0 <__aeabi_fsub+0x1e0>
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	4664      	mov	r4, ip
 8000910:	04db      	lsls	r3, r3, #19
 8000912:	431c      	orrs	r4, r3
 8000914:	46a4      	mov	ip, r4
 8000916:	2a1b      	cmp	r2, #27
 8000918:	dd52      	ble.n	80009c0 <__aeabi_fsub+0x2e0>
 800091a:	2301      	movs	r3, #1
 800091c:	000c      	movs	r4, r1
 800091e:	003d      	movs	r5, r7
 8000920:	1ac3      	subs	r3, r0, r3
 8000922:	e706      	b.n	8000732 <__aeabi_fsub+0x52>
 8000924:	4663      	mov	r3, ip
 8000926:	1a1e      	subs	r6, r3, r0
 8000928:	0173      	lsls	r3, r6, #5
 800092a:	d439      	bmi.n	80009a0 <__aeabi_fsub+0x2c0>
 800092c:	2e00      	cmp	r6, #0
 800092e:	d000      	beq.n	8000932 <__aeabi_fsub+0x252>
 8000930:	e704      	b.n	800073c <__aeabi_fsub+0x5c>
 8000932:	2400      	movs	r4, #0
 8000934:	2200      	movs	r2, #0
 8000936:	2600      	movs	r6, #0
 8000938:	e71d      	b.n	8000776 <__aeabi_fsub+0x96>
 800093a:	2320      	movs	r3, #32
 800093c:	1a9b      	subs	r3, r3, r2
 800093e:	0001      	movs	r1, r0
 8000940:	4098      	lsls	r0, r3
 8000942:	0003      	movs	r3, r0
 8000944:	40d1      	lsrs	r1, r2
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	4193      	sbcs	r3, r2
 800094a:	430b      	orrs	r3, r1
 800094c:	e729      	b.n	80007a2 <__aeabi_fsub+0xc2>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d1a9      	bne.n	80008a6 <__aeabi_fsub+0x1c6>
 8000952:	4663      	mov	r3, ip
 8000954:	2b00      	cmp	r3, #0
 8000956:	d056      	beq.n	8000a06 <__aeabi_fsub+0x326>
 8000958:	2200      	movs	r2, #0
 800095a:	2800      	cmp	r0, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_fsub+0x280>
 800095e:	e70a      	b.n	8000776 <__aeabi_fsub+0x96>
 8000960:	0003      	movs	r3, r0
 8000962:	4463      	add	r3, ip
 8000964:	015a      	lsls	r2, r3, #5
 8000966:	d594      	bpl.n	8000892 <__aeabi_fsub+0x1b2>
 8000968:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <__aeabi_fsub+0x338>)
 800096a:	3501      	adds	r5, #1
 800096c:	4013      	ands	r3, r2
 800096e:	e790      	b.n	8000892 <__aeabi_fsub+0x1b2>
 8000970:	4663      	mov	r3, ip
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0af      	beq.n	80008d6 <__aeabi_fsub+0x1f6>
 8000976:	1e53      	subs	r3, r2, #1
 8000978:	2a01      	cmp	r2, #1
 800097a:	d015      	beq.n	80009a8 <__aeabi_fsub+0x2c8>
 800097c:	2aff      	cmp	r2, #255	; 0xff
 800097e:	d02a      	beq.n	80009d6 <__aeabi_fsub+0x2f6>
 8000980:	001a      	movs	r2, r3
 8000982:	e752      	b.n	800082a <__aeabi_fsub+0x14a>
 8000984:	4662      	mov	r2, ip
 8000986:	2a00      	cmp	r2, #0
 8000988:	d191      	bne.n	80008ae <__aeabi_fsub+0x1ce>
 800098a:	2800      	cmp	r0, #0
 800098c:	d198      	bne.n	80008c0 <__aeabi_fsub+0x1e0>
 800098e:	2680      	movs	r6, #128	; 0x80
 8000990:	2400      	movs	r4, #0
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	03f6      	lsls	r6, r6, #15
 8000996:	e6ee      	b.n	8000776 <__aeabi_fsub+0x96>
 8000998:	000c      	movs	r4, r1
 800099a:	4643      	mov	r3, r8
 800099c:	0015      	movs	r5, r2
 800099e:	e77c      	b.n	800089a <__aeabi_fsub+0x1ba>
 80009a0:	4663      	mov	r3, ip
 80009a2:	000c      	movs	r4, r1
 80009a4:	1ac6      	subs	r6, r0, r3
 80009a6:	e6c9      	b.n	800073c <__aeabi_fsub+0x5c>
 80009a8:	0003      	movs	r3, r0
 80009aa:	4463      	add	r3, ip
 80009ac:	2501      	movs	r5, #1
 80009ae:	015a      	lsls	r2, r3, #5
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_fsub+0x2d4>
 80009b2:	e76e      	b.n	8000892 <__aeabi_fsub+0x1b2>
 80009b4:	2502      	movs	r5, #2
 80009b6:	e6fa      	b.n	80007ae <__aeabi_fsub+0xce>
 80009b8:	4663      	mov	r3, ip
 80009ba:	2501      	movs	r5, #1
 80009bc:	1a1b      	subs	r3, r3, r0
 80009be:	e6b8      	b.n	8000732 <__aeabi_fsub+0x52>
 80009c0:	4664      	mov	r4, ip
 80009c2:	2320      	movs	r3, #32
 80009c4:	40d4      	lsrs	r4, r2
 80009c6:	1a9b      	subs	r3, r3, r2
 80009c8:	4662      	mov	r2, ip
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	1e5a      	subs	r2, r3, #1
 80009d0:	4193      	sbcs	r3, r2
 80009d2:	4323      	orrs	r3, r4
 80009d4:	e7a2      	b.n	800091c <__aeabi_fsub+0x23c>
 80009d6:	4643      	mov	r3, r8
 80009d8:	e774      	b.n	80008c4 <__aeabi_fsub+0x1e4>
 80009da:	4661      	mov	r1, ip
 80009dc:	2320      	movs	r3, #32
 80009de:	40d1      	lsrs	r1, r2
 80009e0:	1a9b      	subs	r3, r3, r2
 80009e2:	4662      	mov	r2, ip
 80009e4:	409a      	lsls	r2, r3
 80009e6:	0013      	movs	r3, r2
 80009e8:	1e5a      	subs	r2, r3, #1
 80009ea:	4193      	sbcs	r3, r2
 80009ec:	430b      	orrs	r3, r1
 80009ee:	e720      	b.n	8000832 <__aeabi_fsub+0x152>
 80009f0:	4663      	mov	r3, ip
 80009f2:	000c      	movs	r4, r1
 80009f4:	2501      	movs	r5, #1
 80009f6:	1ac3      	subs	r3, r0, r3
 80009f8:	e69b      	b.n	8000732 <__aeabi_fsub+0x52>
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d099      	beq.n	8000932 <__aeabi_fsub+0x252>
 80009fe:	000c      	movs	r4, r1
 8000a00:	4646      	mov	r6, r8
 8000a02:	2200      	movs	r2, #0
 8000a04:	e6b7      	b.n	8000776 <__aeabi_fsub+0x96>
 8000a06:	4646      	mov	r6, r8
 8000a08:	2200      	movs	r2, #0
 8000a0a:	e6b4      	b.n	8000776 <__aeabi_fsub+0x96>
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fsub+0x332>
 8000a10:	e73f      	b.n	8000892 <__aeabi_fsub+0x1b2>
 8000a12:	2400      	movs	r4, #0
 8000a14:	2600      	movs	r6, #0
 8000a16:	e6ae      	b.n	8000776 <__aeabi_fsub+0x96>
 8000a18:	fbffffff 	.word	0xfbffffff
 8000a1c:	7dffffff 	.word	0x7dffffff

08000a20 <__aeabi_f2iz>:
 8000a20:	0241      	lsls	r1, r0, #9
 8000a22:	0042      	lsls	r2, r0, #1
 8000a24:	0fc3      	lsrs	r3, r0, #31
 8000a26:	0a49      	lsrs	r1, r1, #9
 8000a28:	2000      	movs	r0, #0
 8000a2a:	0e12      	lsrs	r2, r2, #24
 8000a2c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a2e:	dd03      	ble.n	8000a38 <__aeabi_f2iz+0x18>
 8000a30:	2a9d      	cmp	r2, #157	; 0x9d
 8000a32:	dd02      	ble.n	8000a3a <__aeabi_f2iz+0x1a>
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <__aeabi_f2iz+0x3c>)
 8000a36:	1898      	adds	r0, r3, r2
 8000a38:	4770      	bx	lr
 8000a3a:	2080      	movs	r0, #128	; 0x80
 8000a3c:	0400      	lsls	r0, r0, #16
 8000a3e:	4301      	orrs	r1, r0
 8000a40:	2a95      	cmp	r2, #149	; 0x95
 8000a42:	dc07      	bgt.n	8000a54 <__aeabi_f2iz+0x34>
 8000a44:	2096      	movs	r0, #150	; 0x96
 8000a46:	1a82      	subs	r2, r0, r2
 8000a48:	40d1      	lsrs	r1, r2
 8000a4a:	4248      	negs	r0, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1f3      	bne.n	8000a38 <__aeabi_f2iz+0x18>
 8000a50:	0008      	movs	r0, r1
 8000a52:	e7f1      	b.n	8000a38 <__aeabi_f2iz+0x18>
 8000a54:	3a96      	subs	r2, #150	; 0x96
 8000a56:	4091      	lsls	r1, r2
 8000a58:	e7f7      	b.n	8000a4a <__aeabi_f2iz+0x2a>
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	7fffffff 	.word	0x7fffffff

08000a60 <__aeabi_dadd>:
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	464f      	mov	r7, r9
 8000a64:	4646      	mov	r6, r8
 8000a66:	46d6      	mov	lr, sl
 8000a68:	0004      	movs	r4, r0
 8000a6a:	b5c0      	push	{r6, r7, lr}
 8000a6c:	001f      	movs	r7, r3
 8000a6e:	030b      	lsls	r3, r1, #12
 8000a70:	0010      	movs	r0, r2
 8000a72:	004e      	lsls	r6, r1, #1
 8000a74:	0a5b      	lsrs	r3, r3, #9
 8000a76:	0fcd      	lsrs	r5, r1, #31
 8000a78:	0f61      	lsrs	r1, r4, #29
 8000a7a:	007a      	lsls	r2, r7, #1
 8000a7c:	4319      	orrs	r1, r3
 8000a7e:	00e3      	lsls	r3, r4, #3
 8000a80:	033c      	lsls	r4, r7, #12
 8000a82:	0fff      	lsrs	r7, r7, #31
 8000a84:	46bc      	mov	ip, r7
 8000a86:	0a64      	lsrs	r4, r4, #9
 8000a88:	0f47      	lsrs	r7, r0, #29
 8000a8a:	4327      	orrs	r7, r4
 8000a8c:	0d76      	lsrs	r6, r6, #21
 8000a8e:	0d52      	lsrs	r2, r2, #21
 8000a90:	00c0      	lsls	r0, r0, #3
 8000a92:	46b9      	mov	r9, r7
 8000a94:	4680      	mov	r8, r0
 8000a96:	1ab7      	subs	r7, r6, r2
 8000a98:	4565      	cmp	r5, ip
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dadd+0x3e>
 8000a9c:	e09b      	b.n	8000bd6 <__aeabi_dadd+0x176>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	dc00      	bgt.n	8000aa4 <__aeabi_dadd+0x44>
 8000aa2:	e084      	b.n	8000bae <__aeabi_dadd+0x14e>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x4a>
 8000aa8:	e0be      	b.n	8000c28 <__aeabi_dadd+0x1c8>
 8000aaa:	4ac8      	ldr	r2, [pc, #800]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000aac:	4296      	cmp	r6, r2
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x52>
 8000ab0:	e124      	b.n	8000cfc <__aeabi_dadd+0x29c>
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	464c      	mov	r4, r9
 8000ab6:	0412      	lsls	r2, r2, #16
 8000ab8:	4314      	orrs	r4, r2
 8000aba:	46a1      	mov	r9, r4
 8000abc:	2f38      	cmp	r7, #56	; 0x38
 8000abe:	dd00      	ble.n	8000ac2 <__aeabi_dadd+0x62>
 8000ac0:	e167      	b.n	8000d92 <__aeabi_dadd+0x332>
 8000ac2:	2f1f      	cmp	r7, #31
 8000ac4:	dd00      	ble.n	8000ac8 <__aeabi_dadd+0x68>
 8000ac6:	e1d6      	b.n	8000e76 <__aeabi_dadd+0x416>
 8000ac8:	2220      	movs	r2, #32
 8000aca:	464c      	mov	r4, r9
 8000acc:	1bd2      	subs	r2, r2, r7
 8000ace:	4094      	lsls	r4, r2
 8000ad0:	46a2      	mov	sl, r4
 8000ad2:	4644      	mov	r4, r8
 8000ad4:	40fc      	lsrs	r4, r7
 8000ad6:	0020      	movs	r0, r4
 8000ad8:	4654      	mov	r4, sl
 8000ada:	4304      	orrs	r4, r0
 8000adc:	4640      	mov	r0, r8
 8000ade:	4090      	lsls	r0, r2
 8000ae0:	1e42      	subs	r2, r0, #1
 8000ae2:	4190      	sbcs	r0, r2
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	40fa      	lsrs	r2, r7
 8000ae8:	4304      	orrs	r4, r0
 8000aea:	1a89      	subs	r1, r1, r2
 8000aec:	1b1c      	subs	r4, r3, r4
 8000aee:	42a3      	cmp	r3, r4
 8000af0:	4192      	sbcs	r2, r2
 8000af2:	4252      	negs	r2, r2
 8000af4:	1a8b      	subs	r3, r1, r2
 8000af6:	469a      	mov	sl, r3
 8000af8:	4653      	mov	r3, sl
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	d400      	bmi.n	8000b00 <__aeabi_dadd+0xa0>
 8000afe:	e0d4      	b.n	8000caa <__aeabi_dadd+0x24a>
 8000b00:	4653      	mov	r3, sl
 8000b02:	025a      	lsls	r2, r3, #9
 8000b04:	0a53      	lsrs	r3, r2, #9
 8000b06:	469a      	mov	sl, r3
 8000b08:	4653      	mov	r3, sl
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0xb0>
 8000b0e:	e104      	b.n	8000d1a <__aeabi_dadd+0x2ba>
 8000b10:	4650      	mov	r0, sl
 8000b12:	f001 fe73 	bl	80027fc <__clzsi2>
 8000b16:	0003      	movs	r3, r0
 8000b18:	3b08      	subs	r3, #8
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	1ad2      	subs	r2, r2, r3
 8000b20:	4651      	mov	r1, sl
 8000b22:	40d0      	lsrs	r0, r2
 8000b24:	4099      	lsls	r1, r3
 8000b26:	0002      	movs	r2, r0
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	42b3      	cmp	r3, r6
 8000b2e:	da00      	bge.n	8000b32 <__aeabi_dadd+0xd2>
 8000b30:	e102      	b.n	8000d38 <__aeabi_dadd+0x2d8>
 8000b32:	1b9b      	subs	r3, r3, r6
 8000b34:	1c59      	adds	r1, r3, #1
 8000b36:	291f      	cmp	r1, #31
 8000b38:	dd00      	ble.n	8000b3c <__aeabi_dadd+0xdc>
 8000b3a:	e0a7      	b.n	8000c8c <__aeabi_dadd+0x22c>
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	0010      	movs	r0, r2
 8000b40:	0026      	movs	r6, r4
 8000b42:	1a5b      	subs	r3, r3, r1
 8000b44:	409c      	lsls	r4, r3
 8000b46:	4098      	lsls	r0, r3
 8000b48:	40ce      	lsrs	r6, r1
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	1e63      	subs	r3, r4, #1
 8000b4e:	419c      	sbcs	r4, r3
 8000b50:	4330      	orrs	r0, r6
 8000b52:	4692      	mov	sl, r2
 8000b54:	2600      	movs	r6, #0
 8000b56:	4304      	orrs	r4, r0
 8000b58:	0763      	lsls	r3, r4, #29
 8000b5a:	d009      	beq.n	8000b70 <__aeabi_dadd+0x110>
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	4023      	ands	r3, r4
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d005      	beq.n	8000b70 <__aeabi_dadd+0x110>
 8000b64:	1d23      	adds	r3, r4, #4
 8000b66:	42a3      	cmp	r3, r4
 8000b68:	41a4      	sbcs	r4, r4
 8000b6a:	4264      	negs	r4, r4
 8000b6c:	44a2      	add	sl, r4
 8000b6e:	001c      	movs	r4, r3
 8000b70:	4653      	mov	r3, sl
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	d400      	bmi.n	8000b78 <__aeabi_dadd+0x118>
 8000b76:	e09b      	b.n	8000cb0 <__aeabi_dadd+0x250>
 8000b78:	4b94      	ldr	r3, [pc, #592]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000b7a:	3601      	adds	r6, #1
 8000b7c:	429e      	cmp	r6, r3
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x122>
 8000b80:	e0b8      	b.n	8000cf4 <__aeabi_dadd+0x294>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4992      	ldr	r1, [pc, #584]	; (8000dd0 <__aeabi_dadd+0x370>)
 8000b86:	08e4      	lsrs	r4, r4, #3
 8000b88:	400b      	ands	r3, r1
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	075b      	lsls	r3, r3, #29
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	0572      	lsls	r2, r6, #21
 8000b92:	024c      	lsls	r4, r1, #9
 8000b94:	0b24      	lsrs	r4, r4, #12
 8000b96:	0d52      	lsrs	r2, r2, #21
 8000b98:	0512      	lsls	r2, r2, #20
 8000b9a:	07ed      	lsls	r5, r5, #31
 8000b9c:	4322      	orrs	r2, r4
 8000b9e:	432a      	orrs	r2, r5
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	bce0      	pop	{r5, r6, r7}
 8000ba6:	46ba      	mov	sl, r7
 8000ba8:	46b1      	mov	r9, r6
 8000baa:	46a8      	mov	r8, r5
 8000bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d048      	beq.n	8000c44 <__aeabi_dadd+0x1e4>
 8000bb2:	1b97      	subs	r7, r2, r6
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d000      	beq.n	8000bba <__aeabi_dadd+0x15a>
 8000bb8:	e10e      	b.n	8000dd8 <__aeabi_dadd+0x378>
 8000bba:	000c      	movs	r4, r1
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x162>
 8000bc0:	e1b7      	b.n	8000f32 <__aeabi_dadd+0x4d2>
 8000bc2:	1e7c      	subs	r4, r7, #1
 8000bc4:	2f01      	cmp	r7, #1
 8000bc6:	d100      	bne.n	8000bca <__aeabi_dadd+0x16a>
 8000bc8:	e226      	b.n	8001018 <__aeabi_dadd+0x5b8>
 8000bca:	4d80      	ldr	r5, [pc, #512]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000bcc:	42af      	cmp	r7, r5
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x172>
 8000bd0:	e1d5      	b.n	8000f7e <__aeabi_dadd+0x51e>
 8000bd2:	0027      	movs	r7, r4
 8000bd4:	e107      	b.n	8000de6 <__aeabi_dadd+0x386>
 8000bd6:	2f00      	cmp	r7, #0
 8000bd8:	dc00      	bgt.n	8000bdc <__aeabi_dadd+0x17c>
 8000bda:	e0b2      	b.n	8000d42 <__aeabi_dadd+0x2e2>
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	d047      	beq.n	8000c70 <__aeabi_dadd+0x210>
 8000be0:	4a7a      	ldr	r2, [pc, #488]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000be2:	4296      	cmp	r6, r2
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x188>
 8000be6:	e089      	b.n	8000cfc <__aeabi_dadd+0x29c>
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	464c      	mov	r4, r9
 8000bec:	0412      	lsls	r2, r2, #16
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	46a1      	mov	r9, r4
 8000bf2:	2f38      	cmp	r7, #56	; 0x38
 8000bf4:	dc6b      	bgt.n	8000cce <__aeabi_dadd+0x26e>
 8000bf6:	2f1f      	cmp	r7, #31
 8000bf8:	dc00      	bgt.n	8000bfc <__aeabi_dadd+0x19c>
 8000bfa:	e16e      	b.n	8000eda <__aeabi_dadd+0x47a>
 8000bfc:	003a      	movs	r2, r7
 8000bfe:	4648      	mov	r0, r9
 8000c00:	3a20      	subs	r2, #32
 8000c02:	40d0      	lsrs	r0, r2
 8000c04:	4684      	mov	ip, r0
 8000c06:	2f20      	cmp	r7, #32
 8000c08:	d007      	beq.n	8000c1a <__aeabi_dadd+0x1ba>
 8000c0a:	2240      	movs	r2, #64	; 0x40
 8000c0c:	4648      	mov	r0, r9
 8000c0e:	1bd2      	subs	r2, r2, r7
 8000c10:	4090      	lsls	r0, r2
 8000c12:	0002      	movs	r2, r0
 8000c14:	4640      	mov	r0, r8
 8000c16:	4310      	orrs	r0, r2
 8000c18:	4680      	mov	r8, r0
 8000c1a:	4640      	mov	r0, r8
 8000c1c:	1e42      	subs	r2, r0, #1
 8000c1e:	4190      	sbcs	r0, r2
 8000c20:	4662      	mov	r2, ip
 8000c22:	0004      	movs	r4, r0
 8000c24:	4314      	orrs	r4, r2
 8000c26:	e057      	b.n	8000cd8 <__aeabi_dadd+0x278>
 8000c28:	464a      	mov	r2, r9
 8000c2a:	4302      	orrs	r2, r0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x1d0>
 8000c2e:	e103      	b.n	8000e38 <__aeabi_dadd+0x3d8>
 8000c30:	1e7a      	subs	r2, r7, #1
 8000c32:	2f01      	cmp	r7, #1
 8000c34:	d100      	bne.n	8000c38 <__aeabi_dadd+0x1d8>
 8000c36:	e193      	b.n	8000f60 <__aeabi_dadd+0x500>
 8000c38:	4c64      	ldr	r4, [pc, #400]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000c3a:	42a7      	cmp	r7, r4
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dadd+0x1e0>
 8000c3e:	e18a      	b.n	8000f56 <__aeabi_dadd+0x4f6>
 8000c40:	0017      	movs	r7, r2
 8000c42:	e73b      	b.n	8000abc <__aeabi_dadd+0x5c>
 8000c44:	4c63      	ldr	r4, [pc, #396]	; (8000dd4 <__aeabi_dadd+0x374>)
 8000c46:	1c72      	adds	r2, r6, #1
 8000c48:	4222      	tst	r2, r4
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_dadd+0x1ee>
 8000c4c:	e0e0      	b.n	8000e10 <__aeabi_dadd+0x3b0>
 8000c4e:	000a      	movs	r2, r1
 8000c50:	431a      	orrs	r2, r3
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d000      	beq.n	8000c58 <__aeabi_dadd+0x1f8>
 8000c56:	e174      	b.n	8000f42 <__aeabi_dadd+0x4e2>
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x1fe>
 8000c5c:	e1d0      	b.n	8001000 <__aeabi_dadd+0x5a0>
 8000c5e:	464a      	mov	r2, r9
 8000c60:	4302      	orrs	r2, r0
 8000c62:	d000      	beq.n	8000c66 <__aeabi_dadd+0x206>
 8000c64:	e1e3      	b.n	800102e <__aeabi_dadd+0x5ce>
 8000c66:	074a      	lsls	r2, r1, #29
 8000c68:	08db      	lsrs	r3, r3, #3
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	08c9      	lsrs	r1, r1, #3
 8000c6e:	e029      	b.n	8000cc4 <__aeabi_dadd+0x264>
 8000c70:	464a      	mov	r2, r9
 8000c72:	4302      	orrs	r2, r0
 8000c74:	d100      	bne.n	8000c78 <__aeabi_dadd+0x218>
 8000c76:	e17d      	b.n	8000f74 <__aeabi_dadd+0x514>
 8000c78:	1e7a      	subs	r2, r7, #1
 8000c7a:	2f01      	cmp	r7, #1
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dadd+0x220>
 8000c7e:	e0e0      	b.n	8000e42 <__aeabi_dadd+0x3e2>
 8000c80:	4c52      	ldr	r4, [pc, #328]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000c82:	42a7      	cmp	r7, r4
 8000c84:	d100      	bne.n	8000c88 <__aeabi_dadd+0x228>
 8000c86:	e166      	b.n	8000f56 <__aeabi_dadd+0x4f6>
 8000c88:	0017      	movs	r7, r2
 8000c8a:	e7b2      	b.n	8000bf2 <__aeabi_dadd+0x192>
 8000c8c:	0010      	movs	r0, r2
 8000c8e:	3b1f      	subs	r3, #31
 8000c90:	40d8      	lsrs	r0, r3
 8000c92:	2920      	cmp	r1, #32
 8000c94:	d003      	beq.n	8000c9e <__aeabi_dadd+0x23e>
 8000c96:	2340      	movs	r3, #64	; 0x40
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	4314      	orrs	r4, r2
 8000c9e:	1e63      	subs	r3, r4, #1
 8000ca0:	419c      	sbcs	r4, r3
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	4304      	orrs	r4, r0
 8000caa:	0763      	lsls	r3, r4, #29
 8000cac:	d000      	beq.n	8000cb0 <__aeabi_dadd+0x250>
 8000cae:	e755      	b.n	8000b5c <__aeabi_dadd+0xfc>
 8000cb0:	4652      	mov	r2, sl
 8000cb2:	08e3      	lsrs	r3, r4, #3
 8000cb4:	0752      	lsls	r2, r2, #29
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	4652      	mov	r2, sl
 8000cba:	0037      	movs	r7, r6
 8000cbc:	08d1      	lsrs	r1, r2, #3
 8000cbe:	4a43      	ldr	r2, [pc, #268]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000cc0:	4297      	cmp	r7, r2
 8000cc2:	d01f      	beq.n	8000d04 <__aeabi_dadd+0x2a4>
 8000cc4:	0309      	lsls	r1, r1, #12
 8000cc6:	057a      	lsls	r2, r7, #21
 8000cc8:	0b0c      	lsrs	r4, r1, #12
 8000cca:	0d52      	lsrs	r2, r2, #21
 8000ccc:	e764      	b.n	8000b98 <__aeabi_dadd+0x138>
 8000cce:	4642      	mov	r2, r8
 8000cd0:	464c      	mov	r4, r9
 8000cd2:	4314      	orrs	r4, r2
 8000cd4:	1e62      	subs	r2, r4, #1
 8000cd6:	4194      	sbcs	r4, r2
 8000cd8:	18e4      	adds	r4, r4, r3
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	4192      	sbcs	r2, r2
 8000cde:	4252      	negs	r2, r2
 8000ce0:	4692      	mov	sl, r2
 8000ce2:	448a      	add	sl, r1
 8000ce4:	4653      	mov	r3, sl
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	d5df      	bpl.n	8000caa <__aeabi_dadd+0x24a>
 8000cea:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000cec:	3601      	adds	r6, #1
 8000cee:	429e      	cmp	r6, r3
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_dadd+0x294>
 8000cf2:	e0b3      	b.n	8000e5c <__aeabi_dadd+0x3fc>
 8000cf4:	0032      	movs	r2, r6
 8000cf6:	2400      	movs	r4, #0
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e74d      	b.n	8000b98 <__aeabi_dadd+0x138>
 8000cfc:	074a      	lsls	r2, r1, #29
 8000cfe:	08db      	lsrs	r3, r3, #3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	08c9      	lsrs	r1, r1, #3
 8000d04:	001a      	movs	r2, r3
 8000d06:	430a      	orrs	r2, r1
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dadd+0x2ac>
 8000d0a:	e200      	b.n	800110e <__aeabi_dadd+0x6ae>
 8000d0c:	2480      	movs	r4, #128	; 0x80
 8000d0e:	0324      	lsls	r4, r4, #12
 8000d10:	430c      	orrs	r4, r1
 8000d12:	0324      	lsls	r4, r4, #12
 8000d14:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000d16:	0b24      	lsrs	r4, r4, #12
 8000d18:	e73e      	b.n	8000b98 <__aeabi_dadd+0x138>
 8000d1a:	0020      	movs	r0, r4
 8000d1c:	f001 fd6e 	bl	80027fc <__clzsi2>
 8000d20:	0003      	movs	r3, r0
 8000d22:	3318      	adds	r3, #24
 8000d24:	2b1f      	cmp	r3, #31
 8000d26:	dc00      	bgt.n	8000d2a <__aeabi_dadd+0x2ca>
 8000d28:	e6f7      	b.n	8000b1a <__aeabi_dadd+0xba>
 8000d2a:	0022      	movs	r2, r4
 8000d2c:	3808      	subs	r0, #8
 8000d2e:	4082      	lsls	r2, r0
 8000d30:	2400      	movs	r4, #0
 8000d32:	42b3      	cmp	r3, r6
 8000d34:	db00      	blt.n	8000d38 <__aeabi_dadd+0x2d8>
 8000d36:	e6fc      	b.n	8000b32 <__aeabi_dadd+0xd2>
 8000d38:	1af6      	subs	r6, r6, r3
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <__aeabi_dadd+0x370>)
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	4692      	mov	sl, r2
 8000d40:	e70a      	b.n	8000b58 <__aeabi_dadd+0xf8>
 8000d42:	2f00      	cmp	r7, #0
 8000d44:	d02b      	beq.n	8000d9e <__aeabi_dadd+0x33e>
 8000d46:	1b97      	subs	r7, r2, r6
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_dadd+0x2ee>
 8000d4c:	e0b8      	b.n	8000ec0 <__aeabi_dadd+0x460>
 8000d4e:	4c1f      	ldr	r4, [pc, #124]	; (8000dcc <__aeabi_dadd+0x36c>)
 8000d50:	42a2      	cmp	r2, r4
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dadd+0x2f6>
 8000d54:	e11c      	b.n	8000f90 <__aeabi_dadd+0x530>
 8000d56:	2480      	movs	r4, #128	; 0x80
 8000d58:	0424      	lsls	r4, r4, #16
 8000d5a:	4321      	orrs	r1, r4
 8000d5c:	2f38      	cmp	r7, #56	; 0x38
 8000d5e:	dd00      	ble.n	8000d62 <__aeabi_dadd+0x302>
 8000d60:	e11e      	b.n	8000fa0 <__aeabi_dadd+0x540>
 8000d62:	2f1f      	cmp	r7, #31
 8000d64:	dd00      	ble.n	8000d68 <__aeabi_dadd+0x308>
 8000d66:	e19e      	b.n	80010a6 <__aeabi_dadd+0x646>
 8000d68:	2620      	movs	r6, #32
 8000d6a:	000c      	movs	r4, r1
 8000d6c:	1bf6      	subs	r6, r6, r7
 8000d6e:	0018      	movs	r0, r3
 8000d70:	40b3      	lsls	r3, r6
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	40f8      	lsrs	r0, r7
 8000d76:	1e5e      	subs	r6, r3, #1
 8000d78:	41b3      	sbcs	r3, r6
 8000d7a:	40f9      	lsrs	r1, r7
 8000d7c:	4304      	orrs	r4, r0
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	4489      	add	r9, r1
 8000d82:	4444      	add	r4, r8
 8000d84:	4544      	cmp	r4, r8
 8000d86:	419b      	sbcs	r3, r3
 8000d88:	425b      	negs	r3, r3
 8000d8a:	444b      	add	r3, r9
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	0016      	movs	r6, r2
 8000d90:	e7a8      	b.n	8000ce4 <__aeabi_dadd+0x284>
 8000d92:	4642      	mov	r2, r8
 8000d94:	464c      	mov	r4, r9
 8000d96:	4314      	orrs	r4, r2
 8000d98:	1e62      	subs	r2, r4, #1
 8000d9a:	4194      	sbcs	r4, r2
 8000d9c:	e6a6      	b.n	8000aec <__aeabi_dadd+0x8c>
 8000d9e:	4c0d      	ldr	r4, [pc, #52]	; (8000dd4 <__aeabi_dadd+0x374>)
 8000da0:	1c72      	adds	r2, r6, #1
 8000da2:	4222      	tst	r2, r4
 8000da4:	d000      	beq.n	8000da8 <__aeabi_dadd+0x348>
 8000da6:	e0a8      	b.n	8000efa <__aeabi_dadd+0x49a>
 8000da8:	000a      	movs	r2, r1
 8000daa:	431a      	orrs	r2, r3
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d000      	beq.n	8000db2 <__aeabi_dadd+0x352>
 8000db0:	e10a      	b.n	8000fc8 <__aeabi_dadd+0x568>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dadd+0x358>
 8000db6:	e15e      	b.n	8001076 <__aeabi_dadd+0x616>
 8000db8:	464a      	mov	r2, r9
 8000dba:	4302      	orrs	r2, r0
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_dadd+0x360>
 8000dbe:	e161      	b.n	8001084 <__aeabi_dadd+0x624>
 8000dc0:	074a      	lsls	r2, r1, #29
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	08c9      	lsrs	r1, r1, #3
 8000dc8:	e77c      	b.n	8000cc4 <__aeabi_dadd+0x264>
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	ff7fffff 	.word	0xff7fffff
 8000dd4:	000007fe 	.word	0x000007fe
 8000dd8:	4ccf      	ldr	r4, [pc, #828]	; (8001118 <__aeabi_dadd+0x6b8>)
 8000dda:	42a2      	cmp	r2, r4
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dadd+0x380>
 8000dde:	e0ce      	b.n	8000f7e <__aeabi_dadd+0x51e>
 8000de0:	2480      	movs	r4, #128	; 0x80
 8000de2:	0424      	lsls	r4, r4, #16
 8000de4:	4321      	orrs	r1, r4
 8000de6:	2f38      	cmp	r7, #56	; 0x38
 8000de8:	dc5b      	bgt.n	8000ea2 <__aeabi_dadd+0x442>
 8000dea:	2f1f      	cmp	r7, #31
 8000dec:	dd00      	ble.n	8000df0 <__aeabi_dadd+0x390>
 8000dee:	e0dc      	b.n	8000faa <__aeabi_dadd+0x54a>
 8000df0:	2520      	movs	r5, #32
 8000df2:	000c      	movs	r4, r1
 8000df4:	1bed      	subs	r5, r5, r7
 8000df6:	001e      	movs	r6, r3
 8000df8:	40ab      	lsls	r3, r5
 8000dfa:	40ac      	lsls	r4, r5
 8000dfc:	40fe      	lsrs	r6, r7
 8000dfe:	1e5d      	subs	r5, r3, #1
 8000e00:	41ab      	sbcs	r3, r5
 8000e02:	4334      	orrs	r4, r6
 8000e04:	40f9      	lsrs	r1, r7
 8000e06:	431c      	orrs	r4, r3
 8000e08:	464b      	mov	r3, r9
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	4699      	mov	r9, r3
 8000e0e:	e04c      	b.n	8000eaa <__aeabi_dadd+0x44a>
 8000e10:	464a      	mov	r2, r9
 8000e12:	1a1c      	subs	r4, r3, r0
 8000e14:	1a88      	subs	r0, r1, r2
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	4192      	sbcs	r2, r2
 8000e1a:	4252      	negs	r2, r2
 8000e1c:	4692      	mov	sl, r2
 8000e1e:	0002      	movs	r2, r0
 8000e20:	4650      	mov	r0, sl
 8000e22:	1a12      	subs	r2, r2, r0
 8000e24:	4692      	mov	sl, r2
 8000e26:	0212      	lsls	r2, r2, #8
 8000e28:	d478      	bmi.n	8000f1c <__aeabi_dadd+0x4bc>
 8000e2a:	4653      	mov	r3, sl
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x3d2>
 8000e30:	e66a      	b.n	8000b08 <__aeabi_dadd+0xa8>
 8000e32:	2100      	movs	r1, #0
 8000e34:	2500      	movs	r5, #0
 8000e36:	e745      	b.n	8000cc4 <__aeabi_dadd+0x264>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	e73d      	b.n	8000cbe <__aeabi_dadd+0x25e>
 8000e42:	181c      	adds	r4, r3, r0
 8000e44:	429c      	cmp	r4, r3
 8000e46:	419b      	sbcs	r3, r3
 8000e48:	4449      	add	r1, r9
 8000e4a:	468a      	mov	sl, r1
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	449a      	add	sl, r3
 8000e50:	4653      	mov	r3, sl
 8000e52:	2601      	movs	r6, #1
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	d400      	bmi.n	8000e5a <__aeabi_dadd+0x3fa>
 8000e58:	e727      	b.n	8000caa <__aeabi_dadd+0x24a>
 8000e5a:	2602      	movs	r6, #2
 8000e5c:	4652      	mov	r2, sl
 8000e5e:	4baf      	ldr	r3, [pc, #700]	; (800111c <__aeabi_dadd+0x6bc>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	401a      	ands	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	4021      	ands	r1, r4
 8000e68:	0862      	lsrs	r2, r4, #1
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	07dc      	lsls	r4, r3, #31
 8000e6e:	085b      	lsrs	r3, r3, #1
 8000e70:	469a      	mov	sl, r3
 8000e72:	4314      	orrs	r4, r2
 8000e74:	e670      	b.n	8000b58 <__aeabi_dadd+0xf8>
 8000e76:	003a      	movs	r2, r7
 8000e78:	464c      	mov	r4, r9
 8000e7a:	3a20      	subs	r2, #32
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	46a4      	mov	ip, r4
 8000e80:	2f20      	cmp	r7, #32
 8000e82:	d007      	beq.n	8000e94 <__aeabi_dadd+0x434>
 8000e84:	2240      	movs	r2, #64	; 0x40
 8000e86:	4648      	mov	r0, r9
 8000e88:	1bd2      	subs	r2, r2, r7
 8000e8a:	4090      	lsls	r0, r2
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	4640      	mov	r0, r8
 8000e90:	4310      	orrs	r0, r2
 8000e92:	4680      	mov	r8, r0
 8000e94:	4640      	mov	r0, r8
 8000e96:	1e42      	subs	r2, r0, #1
 8000e98:	4190      	sbcs	r0, r2
 8000e9a:	4662      	mov	r2, ip
 8000e9c:	0004      	movs	r4, r0
 8000e9e:	4314      	orrs	r4, r2
 8000ea0:	e624      	b.n	8000aec <__aeabi_dadd+0x8c>
 8000ea2:	4319      	orrs	r1, r3
 8000ea4:	000c      	movs	r4, r1
 8000ea6:	1e63      	subs	r3, r4, #1
 8000ea8:	419c      	sbcs	r4, r3
 8000eaa:	4643      	mov	r3, r8
 8000eac:	1b1c      	subs	r4, r3, r4
 8000eae:	45a0      	cmp	r8, r4
 8000eb0:	419b      	sbcs	r3, r3
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	1acb      	subs	r3, r1, r3
 8000eb8:	469a      	mov	sl, r3
 8000eba:	4665      	mov	r5, ip
 8000ebc:	0016      	movs	r6, r2
 8000ebe:	e61b      	b.n	8000af8 <__aeabi_dadd+0x98>
 8000ec0:	000c      	movs	r4, r1
 8000ec2:	431c      	orrs	r4, r3
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_dadd+0x468>
 8000ec6:	e0c7      	b.n	8001058 <__aeabi_dadd+0x5f8>
 8000ec8:	1e7c      	subs	r4, r7, #1
 8000eca:	2f01      	cmp	r7, #1
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_dadd+0x470>
 8000ece:	e0f9      	b.n	80010c4 <__aeabi_dadd+0x664>
 8000ed0:	4e91      	ldr	r6, [pc, #580]	; (8001118 <__aeabi_dadd+0x6b8>)
 8000ed2:	42b7      	cmp	r7, r6
 8000ed4:	d05c      	beq.n	8000f90 <__aeabi_dadd+0x530>
 8000ed6:	0027      	movs	r7, r4
 8000ed8:	e740      	b.n	8000d5c <__aeabi_dadd+0x2fc>
 8000eda:	2220      	movs	r2, #32
 8000edc:	464c      	mov	r4, r9
 8000ede:	4640      	mov	r0, r8
 8000ee0:	1bd2      	subs	r2, r2, r7
 8000ee2:	4094      	lsls	r4, r2
 8000ee4:	40f8      	lsrs	r0, r7
 8000ee6:	4304      	orrs	r4, r0
 8000ee8:	4640      	mov	r0, r8
 8000eea:	4090      	lsls	r0, r2
 8000eec:	1e42      	subs	r2, r0, #1
 8000eee:	4190      	sbcs	r0, r2
 8000ef0:	464a      	mov	r2, r9
 8000ef2:	40fa      	lsrs	r2, r7
 8000ef4:	4304      	orrs	r4, r0
 8000ef6:	1889      	adds	r1, r1, r2
 8000ef8:	e6ee      	b.n	8000cd8 <__aeabi_dadd+0x278>
 8000efa:	4c87      	ldr	r4, [pc, #540]	; (8001118 <__aeabi_dadd+0x6b8>)
 8000efc:	42a2      	cmp	r2, r4
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dadd+0x4a2>
 8000f00:	e6f9      	b.n	8000cf6 <__aeabi_dadd+0x296>
 8000f02:	1818      	adds	r0, r3, r0
 8000f04:	4298      	cmp	r0, r3
 8000f06:	419b      	sbcs	r3, r3
 8000f08:	4449      	add	r1, r9
 8000f0a:	425b      	negs	r3, r3
 8000f0c:	18cb      	adds	r3, r1, r3
 8000f0e:	07dc      	lsls	r4, r3, #31
 8000f10:	0840      	lsrs	r0, r0, #1
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	469a      	mov	sl, r3
 8000f16:	0016      	movs	r6, r2
 8000f18:	4304      	orrs	r4, r0
 8000f1a:	e6c6      	b.n	8000caa <__aeabi_dadd+0x24a>
 8000f1c:	4642      	mov	r2, r8
 8000f1e:	1ad4      	subs	r4, r2, r3
 8000f20:	45a0      	cmp	r8, r4
 8000f22:	4180      	sbcs	r0, r0
 8000f24:	464b      	mov	r3, r9
 8000f26:	4240      	negs	r0, r0
 8000f28:	1a59      	subs	r1, r3, r1
 8000f2a:	1a0b      	subs	r3, r1, r0
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	4665      	mov	r5, ip
 8000f30:	e5ea      	b.n	8000b08 <__aeabi_dadd+0xa8>
 8000f32:	464b      	mov	r3, r9
 8000f34:	464a      	mov	r2, r9
 8000f36:	08c0      	lsrs	r0, r0, #3
 8000f38:	075b      	lsls	r3, r3, #29
 8000f3a:	4665      	mov	r5, ip
 8000f3c:	4303      	orrs	r3, r0
 8000f3e:	08d1      	lsrs	r1, r2, #3
 8000f40:	e6bd      	b.n	8000cbe <__aeabi_dadd+0x25e>
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d000      	beq.n	8000f48 <__aeabi_dadd+0x4e8>
 8000f46:	e08e      	b.n	8001066 <__aeabi_dadd+0x606>
 8000f48:	464b      	mov	r3, r9
 8000f4a:	4303      	orrs	r3, r0
 8000f4c:	d117      	bne.n	8000f7e <__aeabi_dadd+0x51e>
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	2500      	movs	r5, #0
 8000f52:	0309      	lsls	r1, r1, #12
 8000f54:	e6da      	b.n	8000d0c <__aeabi_dadd+0x2ac>
 8000f56:	074a      	lsls	r2, r1, #29
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	08c9      	lsrs	r1, r1, #3
 8000f5e:	e6d1      	b.n	8000d04 <__aeabi_dadd+0x2a4>
 8000f60:	1a1c      	subs	r4, r3, r0
 8000f62:	464a      	mov	r2, r9
 8000f64:	42a3      	cmp	r3, r4
 8000f66:	419b      	sbcs	r3, r3
 8000f68:	1a89      	subs	r1, r1, r2
 8000f6a:	425b      	negs	r3, r3
 8000f6c:	1acb      	subs	r3, r1, r3
 8000f6e:	469a      	mov	sl, r3
 8000f70:	2601      	movs	r6, #1
 8000f72:	e5c1      	b.n	8000af8 <__aeabi_dadd+0x98>
 8000f74:	074a      	lsls	r2, r1, #29
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	08c9      	lsrs	r1, r1, #3
 8000f7c:	e69f      	b.n	8000cbe <__aeabi_dadd+0x25e>
 8000f7e:	4643      	mov	r3, r8
 8000f80:	08d8      	lsrs	r0, r3, #3
 8000f82:	464b      	mov	r3, r9
 8000f84:	464a      	mov	r2, r9
 8000f86:	075b      	lsls	r3, r3, #29
 8000f88:	4665      	mov	r5, ip
 8000f8a:	4303      	orrs	r3, r0
 8000f8c:	08d1      	lsrs	r1, r2, #3
 8000f8e:	e6b9      	b.n	8000d04 <__aeabi_dadd+0x2a4>
 8000f90:	4643      	mov	r3, r8
 8000f92:	08d8      	lsrs	r0, r3, #3
 8000f94:	464b      	mov	r3, r9
 8000f96:	464a      	mov	r2, r9
 8000f98:	075b      	lsls	r3, r3, #29
 8000f9a:	4303      	orrs	r3, r0
 8000f9c:	08d1      	lsrs	r1, r2, #3
 8000f9e:	e6b1      	b.n	8000d04 <__aeabi_dadd+0x2a4>
 8000fa0:	4319      	orrs	r1, r3
 8000fa2:	000c      	movs	r4, r1
 8000fa4:	1e63      	subs	r3, r4, #1
 8000fa6:	419c      	sbcs	r4, r3
 8000fa8:	e6eb      	b.n	8000d82 <__aeabi_dadd+0x322>
 8000faa:	003c      	movs	r4, r7
 8000fac:	000d      	movs	r5, r1
 8000fae:	3c20      	subs	r4, #32
 8000fb0:	40e5      	lsrs	r5, r4
 8000fb2:	2f20      	cmp	r7, #32
 8000fb4:	d003      	beq.n	8000fbe <__aeabi_dadd+0x55e>
 8000fb6:	2440      	movs	r4, #64	; 0x40
 8000fb8:	1be4      	subs	r4, r4, r7
 8000fba:	40a1      	lsls	r1, r4
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	001c      	movs	r4, r3
 8000fc0:	1e63      	subs	r3, r4, #1
 8000fc2:	419c      	sbcs	r4, r3
 8000fc4:	432c      	orrs	r4, r5
 8000fc6:	e770      	b.n	8000eaa <__aeabi_dadd+0x44a>
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	d0e1      	beq.n	8000f90 <__aeabi_dadd+0x530>
 8000fcc:	464a      	mov	r2, r9
 8000fce:	4302      	orrs	r2, r0
 8000fd0:	d0c1      	beq.n	8000f56 <__aeabi_dadd+0x4f6>
 8000fd2:	074a      	lsls	r2, r1, #29
 8000fd4:	08db      	lsrs	r3, r3, #3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	08c9      	lsrs	r1, r1, #3
 8000fdc:	0312      	lsls	r2, r2, #12
 8000fde:	4211      	tst	r1, r2
 8000fe0:	d008      	beq.n	8000ff4 <__aeabi_dadd+0x594>
 8000fe2:	4648      	mov	r0, r9
 8000fe4:	08c4      	lsrs	r4, r0, #3
 8000fe6:	4214      	tst	r4, r2
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_dadd+0x594>
 8000fea:	4643      	mov	r3, r8
 8000fec:	0021      	movs	r1, r4
 8000fee:	08db      	lsrs	r3, r3, #3
 8000ff0:	0742      	lsls	r2, r0, #29
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	0f5a      	lsrs	r2, r3, #29
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	0752      	lsls	r2, r2, #29
 8000ffa:	08db      	lsrs	r3, r3, #3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	e681      	b.n	8000d04 <__aeabi_dadd+0x2a4>
 8001000:	464b      	mov	r3, r9
 8001002:	4303      	orrs	r3, r0
 8001004:	d100      	bne.n	8001008 <__aeabi_dadd+0x5a8>
 8001006:	e714      	b.n	8000e32 <__aeabi_dadd+0x3d2>
 8001008:	464b      	mov	r3, r9
 800100a:	464a      	mov	r2, r9
 800100c:	08c0      	lsrs	r0, r0, #3
 800100e:	075b      	lsls	r3, r3, #29
 8001010:	4665      	mov	r5, ip
 8001012:	4303      	orrs	r3, r0
 8001014:	08d1      	lsrs	r1, r2, #3
 8001016:	e655      	b.n	8000cc4 <__aeabi_dadd+0x264>
 8001018:	1ac4      	subs	r4, r0, r3
 800101a:	45a0      	cmp	r8, r4
 800101c:	4180      	sbcs	r0, r0
 800101e:	464b      	mov	r3, r9
 8001020:	4240      	negs	r0, r0
 8001022:	1a59      	subs	r1, r3, r1
 8001024:	1a0b      	subs	r3, r1, r0
 8001026:	469a      	mov	sl, r3
 8001028:	4665      	mov	r5, ip
 800102a:	2601      	movs	r6, #1
 800102c:	e564      	b.n	8000af8 <__aeabi_dadd+0x98>
 800102e:	1a1c      	subs	r4, r3, r0
 8001030:	464a      	mov	r2, r9
 8001032:	42a3      	cmp	r3, r4
 8001034:	4180      	sbcs	r0, r0
 8001036:	1a8a      	subs	r2, r1, r2
 8001038:	4240      	negs	r0, r0
 800103a:	1a12      	subs	r2, r2, r0
 800103c:	4692      	mov	sl, r2
 800103e:	0212      	lsls	r2, r2, #8
 8001040:	d549      	bpl.n	80010d6 <__aeabi_dadd+0x676>
 8001042:	4642      	mov	r2, r8
 8001044:	1ad4      	subs	r4, r2, r3
 8001046:	45a0      	cmp	r8, r4
 8001048:	4180      	sbcs	r0, r0
 800104a:	464b      	mov	r3, r9
 800104c:	4240      	negs	r0, r0
 800104e:	1a59      	subs	r1, r3, r1
 8001050:	1a0b      	subs	r3, r1, r0
 8001052:	469a      	mov	sl, r3
 8001054:	4665      	mov	r5, ip
 8001056:	e57f      	b.n	8000b58 <__aeabi_dadd+0xf8>
 8001058:	464b      	mov	r3, r9
 800105a:	464a      	mov	r2, r9
 800105c:	08c0      	lsrs	r0, r0, #3
 800105e:	075b      	lsls	r3, r3, #29
 8001060:	4303      	orrs	r3, r0
 8001062:	08d1      	lsrs	r1, r2, #3
 8001064:	e62b      	b.n	8000cbe <__aeabi_dadd+0x25e>
 8001066:	464a      	mov	r2, r9
 8001068:	08db      	lsrs	r3, r3, #3
 800106a:	4302      	orrs	r2, r0
 800106c:	d138      	bne.n	80010e0 <__aeabi_dadd+0x680>
 800106e:	074a      	lsls	r2, r1, #29
 8001070:	4313      	orrs	r3, r2
 8001072:	08c9      	lsrs	r1, r1, #3
 8001074:	e646      	b.n	8000d04 <__aeabi_dadd+0x2a4>
 8001076:	464b      	mov	r3, r9
 8001078:	464a      	mov	r2, r9
 800107a:	08c0      	lsrs	r0, r0, #3
 800107c:	075b      	lsls	r3, r3, #29
 800107e:	4303      	orrs	r3, r0
 8001080:	08d1      	lsrs	r1, r2, #3
 8001082:	e61f      	b.n	8000cc4 <__aeabi_dadd+0x264>
 8001084:	181c      	adds	r4, r3, r0
 8001086:	429c      	cmp	r4, r3
 8001088:	419b      	sbcs	r3, r3
 800108a:	4449      	add	r1, r9
 800108c:	468a      	mov	sl, r1
 800108e:	425b      	negs	r3, r3
 8001090:	449a      	add	sl, r3
 8001092:	4653      	mov	r3, sl
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	d400      	bmi.n	800109a <__aeabi_dadd+0x63a>
 8001098:	e607      	b.n	8000caa <__aeabi_dadd+0x24a>
 800109a:	4652      	mov	r2, sl
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <__aeabi_dadd+0x6bc>)
 800109e:	2601      	movs	r6, #1
 80010a0:	401a      	ands	r2, r3
 80010a2:	4692      	mov	sl, r2
 80010a4:	e601      	b.n	8000caa <__aeabi_dadd+0x24a>
 80010a6:	003c      	movs	r4, r7
 80010a8:	000e      	movs	r6, r1
 80010aa:	3c20      	subs	r4, #32
 80010ac:	40e6      	lsrs	r6, r4
 80010ae:	2f20      	cmp	r7, #32
 80010b0:	d003      	beq.n	80010ba <__aeabi_dadd+0x65a>
 80010b2:	2440      	movs	r4, #64	; 0x40
 80010b4:	1be4      	subs	r4, r4, r7
 80010b6:	40a1      	lsls	r1, r4
 80010b8:	430b      	orrs	r3, r1
 80010ba:	001c      	movs	r4, r3
 80010bc:	1e63      	subs	r3, r4, #1
 80010be:	419c      	sbcs	r4, r3
 80010c0:	4334      	orrs	r4, r6
 80010c2:	e65e      	b.n	8000d82 <__aeabi_dadd+0x322>
 80010c4:	4443      	add	r3, r8
 80010c6:	4283      	cmp	r3, r0
 80010c8:	4180      	sbcs	r0, r0
 80010ca:	4449      	add	r1, r9
 80010cc:	468a      	mov	sl, r1
 80010ce:	4240      	negs	r0, r0
 80010d0:	001c      	movs	r4, r3
 80010d2:	4482      	add	sl, r0
 80010d4:	e6bc      	b.n	8000e50 <__aeabi_dadd+0x3f0>
 80010d6:	4653      	mov	r3, sl
 80010d8:	4323      	orrs	r3, r4
 80010da:	d100      	bne.n	80010de <__aeabi_dadd+0x67e>
 80010dc:	e6a9      	b.n	8000e32 <__aeabi_dadd+0x3d2>
 80010de:	e5e4      	b.n	8000caa <__aeabi_dadd+0x24a>
 80010e0:	074a      	lsls	r2, r1, #29
 80010e2:	4313      	orrs	r3, r2
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	08c9      	lsrs	r1, r1, #3
 80010e8:	0312      	lsls	r2, r2, #12
 80010ea:	4211      	tst	r1, r2
 80010ec:	d009      	beq.n	8001102 <__aeabi_dadd+0x6a2>
 80010ee:	4648      	mov	r0, r9
 80010f0:	08c4      	lsrs	r4, r0, #3
 80010f2:	4214      	tst	r4, r2
 80010f4:	d105      	bne.n	8001102 <__aeabi_dadd+0x6a2>
 80010f6:	4643      	mov	r3, r8
 80010f8:	4665      	mov	r5, ip
 80010fa:	0021      	movs	r1, r4
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	0742      	lsls	r2, r0, #29
 8001100:	4313      	orrs	r3, r2
 8001102:	0f5a      	lsrs	r2, r3, #29
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	0752      	lsls	r2, r2, #29
 800110a:	4313      	orrs	r3, r2
 800110c:	e5fa      	b.n	8000d04 <__aeabi_dadd+0x2a4>
 800110e:	2300      	movs	r3, #0
 8001110:	4a01      	ldr	r2, [pc, #4]	; (8001118 <__aeabi_dadd+0x6b8>)
 8001112:	001c      	movs	r4, r3
 8001114:	e540      	b.n	8000b98 <__aeabi_dadd+0x138>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	000007ff 	.word	0x000007ff
 800111c:	ff7fffff 	.word	0xff7fffff

08001120 <__aeabi_ddiv>:
 8001120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001122:	4657      	mov	r7, sl
 8001124:	464e      	mov	r6, r9
 8001126:	4645      	mov	r5, r8
 8001128:	46de      	mov	lr, fp
 800112a:	b5e0      	push	{r5, r6, r7, lr}
 800112c:	030c      	lsls	r4, r1, #12
 800112e:	001f      	movs	r7, r3
 8001130:	004b      	lsls	r3, r1, #1
 8001132:	4681      	mov	r9, r0
 8001134:	4692      	mov	sl, r2
 8001136:	0005      	movs	r5, r0
 8001138:	b085      	sub	sp, #20
 800113a:	0b24      	lsrs	r4, r4, #12
 800113c:	0d5b      	lsrs	r3, r3, #21
 800113e:	0fce      	lsrs	r6, r1, #31
 8001140:	2b00      	cmp	r3, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_ddiv+0x26>
 8001144:	e152      	b.n	80013ec <__aeabi_ddiv+0x2cc>
 8001146:	4ad2      	ldr	r2, [pc, #840]	; (8001490 <__aeabi_ddiv+0x370>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x2e>
 800114c:	e16e      	b.n	800142c <__aeabi_ddiv+0x30c>
 800114e:	0f42      	lsrs	r2, r0, #29
 8001150:	00e4      	lsls	r4, r4, #3
 8001152:	4314      	orrs	r4, r2
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	0412      	lsls	r2, r2, #16
 8001158:	4322      	orrs	r2, r4
 800115a:	4690      	mov	r8, r2
 800115c:	4acd      	ldr	r2, [pc, #820]	; (8001494 <__aeabi_ddiv+0x374>)
 800115e:	00c5      	lsls	r5, r0, #3
 8001160:	4693      	mov	fp, r2
 8001162:	449b      	add	fp, r3
 8001164:	2300      	movs	r3, #0
 8001166:	4699      	mov	r9, r3
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	033c      	lsls	r4, r7, #12
 800116c:	007b      	lsls	r3, r7, #1
 800116e:	4650      	mov	r0, sl
 8001170:	0b24      	lsrs	r4, r4, #12
 8001172:	0d5b      	lsrs	r3, r3, #21
 8001174:	0fff      	lsrs	r7, r7, #31
 8001176:	2b00      	cmp	r3, #0
 8001178:	d100      	bne.n	800117c <__aeabi_ddiv+0x5c>
 800117a:	e11a      	b.n	80013b2 <__aeabi_ddiv+0x292>
 800117c:	4ac4      	ldr	r2, [pc, #784]	; (8001490 <__aeabi_ddiv+0x370>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x64>
 8001182:	e15e      	b.n	8001442 <__aeabi_ddiv+0x322>
 8001184:	0f42      	lsrs	r2, r0, #29
 8001186:	00e4      	lsls	r4, r4, #3
 8001188:	4322      	orrs	r2, r4
 800118a:	2480      	movs	r4, #128	; 0x80
 800118c:	0424      	lsls	r4, r4, #16
 800118e:	4314      	orrs	r4, r2
 8001190:	4ac0      	ldr	r2, [pc, #768]	; (8001494 <__aeabi_ddiv+0x374>)
 8001192:	00c1      	lsls	r1, r0, #3
 8001194:	4694      	mov	ip, r2
 8001196:	465a      	mov	r2, fp
 8001198:	4463      	add	r3, ip
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	469b      	mov	fp, r3
 800119e:	2000      	movs	r0, #0
 80011a0:	0033      	movs	r3, r6
 80011a2:	407b      	eors	r3, r7
 80011a4:	469a      	mov	sl, r3
 80011a6:	464b      	mov	r3, r9
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d827      	bhi.n	80011fc <__aeabi_ddiv+0xdc>
 80011ac:	4aba      	ldr	r2, [pc, #744]	; (8001498 <__aeabi_ddiv+0x378>)
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	58d3      	ldr	r3, [r2, r3]
 80011b2:	469f      	mov	pc, r3
 80011b4:	46b2      	mov	sl, r6
 80011b6:	9b00      	ldr	r3, [sp, #0]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d016      	beq.n	80011ea <__aeabi_ddiv+0xca>
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d100      	bne.n	80011c2 <__aeabi_ddiv+0xa2>
 80011c0:	e287      	b.n	80016d2 <__aeabi_ddiv+0x5b2>
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d000      	beq.n	80011c8 <__aeabi_ddiv+0xa8>
 80011c6:	e0d5      	b.n	8001374 <__aeabi_ddiv+0x254>
 80011c8:	2300      	movs	r3, #0
 80011ca:	2200      	movs	r2, #0
 80011cc:	2500      	movs	r5, #0
 80011ce:	051b      	lsls	r3, r3, #20
 80011d0:	4313      	orrs	r3, r2
 80011d2:	4652      	mov	r2, sl
 80011d4:	07d2      	lsls	r2, r2, #31
 80011d6:	4313      	orrs	r3, r2
 80011d8:	0028      	movs	r0, r5
 80011da:	0019      	movs	r1, r3
 80011dc:	b005      	add	sp, #20
 80011de:	bcf0      	pop	{r4, r5, r6, r7}
 80011e0:	46bb      	mov	fp, r7
 80011e2:	46b2      	mov	sl, r6
 80011e4:	46a9      	mov	r9, r5
 80011e6:	46a0      	mov	r8, r4
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	2200      	movs	r2, #0
 80011ec:	2500      	movs	r5, #0
 80011ee:	4ba8      	ldr	r3, [pc, #672]	; (8001490 <__aeabi_ddiv+0x370>)
 80011f0:	e7ed      	b.n	80011ce <__aeabi_ddiv+0xae>
 80011f2:	46ba      	mov	sl, r7
 80011f4:	46a0      	mov	r8, r4
 80011f6:	000d      	movs	r5, r1
 80011f8:	9000      	str	r0, [sp, #0]
 80011fa:	e7dc      	b.n	80011b6 <__aeabi_ddiv+0x96>
 80011fc:	4544      	cmp	r4, r8
 80011fe:	d200      	bcs.n	8001202 <__aeabi_ddiv+0xe2>
 8001200:	e1c4      	b.n	800158c <__aeabi_ddiv+0x46c>
 8001202:	d100      	bne.n	8001206 <__aeabi_ddiv+0xe6>
 8001204:	e1bf      	b.n	8001586 <__aeabi_ddiv+0x466>
 8001206:	2301      	movs	r3, #1
 8001208:	425b      	negs	r3, r3
 800120a:	469c      	mov	ip, r3
 800120c:	002e      	movs	r6, r5
 800120e:	4640      	mov	r0, r8
 8001210:	2500      	movs	r5, #0
 8001212:	44e3      	add	fp, ip
 8001214:	0223      	lsls	r3, r4, #8
 8001216:	0e0c      	lsrs	r4, r1, #24
 8001218:	431c      	orrs	r4, r3
 800121a:	0c1b      	lsrs	r3, r3, #16
 800121c:	4699      	mov	r9, r3
 800121e:	0423      	lsls	r3, r4, #16
 8001220:	020a      	lsls	r2, r1, #8
 8001222:	0c1f      	lsrs	r7, r3, #16
 8001224:	4649      	mov	r1, r9
 8001226:	9200      	str	r2, [sp, #0]
 8001228:	9701      	str	r7, [sp, #4]
 800122a:	f7ff f80b 	bl	8000244 <__aeabi_uidivmod>
 800122e:	0002      	movs	r2, r0
 8001230:	437a      	muls	r2, r7
 8001232:	040b      	lsls	r3, r1, #16
 8001234:	0c31      	lsrs	r1, r6, #16
 8001236:	4680      	mov	r8, r0
 8001238:	4319      	orrs	r1, r3
 800123a:	428a      	cmp	r2, r1
 800123c:	d907      	bls.n	800124e <__aeabi_ddiv+0x12e>
 800123e:	2301      	movs	r3, #1
 8001240:	425b      	negs	r3, r3
 8001242:	469c      	mov	ip, r3
 8001244:	1909      	adds	r1, r1, r4
 8001246:	44e0      	add	r8, ip
 8001248:	428c      	cmp	r4, r1
 800124a:	d800      	bhi.n	800124e <__aeabi_ddiv+0x12e>
 800124c:	e201      	b.n	8001652 <__aeabi_ddiv+0x532>
 800124e:	1a88      	subs	r0, r1, r2
 8001250:	4649      	mov	r1, r9
 8001252:	f7fe fff7 	bl	8000244 <__aeabi_uidivmod>
 8001256:	9a01      	ldr	r2, [sp, #4]
 8001258:	0436      	lsls	r6, r6, #16
 800125a:	4342      	muls	r2, r0
 800125c:	0409      	lsls	r1, r1, #16
 800125e:	0c36      	lsrs	r6, r6, #16
 8001260:	0003      	movs	r3, r0
 8001262:	430e      	orrs	r6, r1
 8001264:	42b2      	cmp	r2, r6
 8001266:	d904      	bls.n	8001272 <__aeabi_ddiv+0x152>
 8001268:	1936      	adds	r6, r6, r4
 800126a:	3b01      	subs	r3, #1
 800126c:	42b4      	cmp	r4, r6
 800126e:	d800      	bhi.n	8001272 <__aeabi_ddiv+0x152>
 8001270:	e1e9      	b.n	8001646 <__aeabi_ddiv+0x526>
 8001272:	1ab0      	subs	r0, r6, r2
 8001274:	4642      	mov	r2, r8
 8001276:	9e00      	ldr	r6, [sp, #0]
 8001278:	0412      	lsls	r2, r2, #16
 800127a:	431a      	orrs	r2, r3
 800127c:	0c33      	lsrs	r3, r6, #16
 800127e:	001f      	movs	r7, r3
 8001280:	0c11      	lsrs	r1, r2, #16
 8001282:	4690      	mov	r8, r2
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	0413      	lsls	r3, r2, #16
 8001288:	0432      	lsls	r2, r6, #16
 800128a:	0c16      	lsrs	r6, r2, #16
 800128c:	0032      	movs	r2, r6
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	435a      	muls	r2, r3
 8001292:	9603      	str	r6, [sp, #12]
 8001294:	437b      	muls	r3, r7
 8001296:	434e      	muls	r6, r1
 8001298:	4379      	muls	r1, r7
 800129a:	0c17      	lsrs	r7, r2, #16
 800129c:	46bc      	mov	ip, r7
 800129e:	199b      	adds	r3, r3, r6
 80012a0:	4463      	add	r3, ip
 80012a2:	429e      	cmp	r6, r3
 80012a4:	d903      	bls.n	80012ae <__aeabi_ddiv+0x18e>
 80012a6:	2680      	movs	r6, #128	; 0x80
 80012a8:	0276      	lsls	r6, r6, #9
 80012aa:	46b4      	mov	ip, r6
 80012ac:	4461      	add	r1, ip
 80012ae:	0c1e      	lsrs	r6, r3, #16
 80012b0:	1871      	adds	r1, r6, r1
 80012b2:	0416      	lsls	r6, r2, #16
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	0c36      	lsrs	r6, r6, #16
 80012b8:	199e      	adds	r6, r3, r6
 80012ba:	4288      	cmp	r0, r1
 80012bc:	d302      	bcc.n	80012c4 <__aeabi_ddiv+0x1a4>
 80012be:	d112      	bne.n	80012e6 <__aeabi_ddiv+0x1c6>
 80012c0:	42b5      	cmp	r5, r6
 80012c2:	d210      	bcs.n	80012e6 <__aeabi_ddiv+0x1c6>
 80012c4:	4643      	mov	r3, r8
 80012c6:	1e5a      	subs	r2, r3, #1
 80012c8:	9b00      	ldr	r3, [sp, #0]
 80012ca:	469c      	mov	ip, r3
 80012cc:	4465      	add	r5, ip
 80012ce:	001f      	movs	r7, r3
 80012d0:	429d      	cmp	r5, r3
 80012d2:	419b      	sbcs	r3, r3
 80012d4:	425b      	negs	r3, r3
 80012d6:	191b      	adds	r3, r3, r4
 80012d8:	18c0      	adds	r0, r0, r3
 80012da:	4284      	cmp	r4, r0
 80012dc:	d200      	bcs.n	80012e0 <__aeabi_ddiv+0x1c0>
 80012de:	e19e      	b.n	800161e <__aeabi_ddiv+0x4fe>
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0x1c4>
 80012e2:	e199      	b.n	8001618 <__aeabi_ddiv+0x4f8>
 80012e4:	4690      	mov	r8, r2
 80012e6:	1bae      	subs	r6, r5, r6
 80012e8:	42b5      	cmp	r5, r6
 80012ea:	41ad      	sbcs	r5, r5
 80012ec:	1a40      	subs	r0, r0, r1
 80012ee:	426d      	negs	r5, r5
 80012f0:	1b40      	subs	r0, r0, r5
 80012f2:	4284      	cmp	r4, r0
 80012f4:	d100      	bne.n	80012f8 <__aeabi_ddiv+0x1d8>
 80012f6:	e1d2      	b.n	800169e <__aeabi_ddiv+0x57e>
 80012f8:	4649      	mov	r1, r9
 80012fa:	f7fe ffa3 	bl	8000244 <__aeabi_uidivmod>
 80012fe:	9a01      	ldr	r2, [sp, #4]
 8001300:	040b      	lsls	r3, r1, #16
 8001302:	4342      	muls	r2, r0
 8001304:	0c31      	lsrs	r1, r6, #16
 8001306:	0005      	movs	r5, r0
 8001308:	4319      	orrs	r1, r3
 800130a:	428a      	cmp	r2, r1
 800130c:	d900      	bls.n	8001310 <__aeabi_ddiv+0x1f0>
 800130e:	e16c      	b.n	80015ea <__aeabi_ddiv+0x4ca>
 8001310:	1a88      	subs	r0, r1, r2
 8001312:	4649      	mov	r1, r9
 8001314:	f7fe ff96 	bl	8000244 <__aeabi_uidivmod>
 8001318:	9a01      	ldr	r2, [sp, #4]
 800131a:	0436      	lsls	r6, r6, #16
 800131c:	4342      	muls	r2, r0
 800131e:	0409      	lsls	r1, r1, #16
 8001320:	0c36      	lsrs	r6, r6, #16
 8001322:	0003      	movs	r3, r0
 8001324:	430e      	orrs	r6, r1
 8001326:	42b2      	cmp	r2, r6
 8001328:	d900      	bls.n	800132c <__aeabi_ddiv+0x20c>
 800132a:	e153      	b.n	80015d4 <__aeabi_ddiv+0x4b4>
 800132c:	9803      	ldr	r0, [sp, #12]
 800132e:	1ab6      	subs	r6, r6, r2
 8001330:	0002      	movs	r2, r0
 8001332:	042d      	lsls	r5, r5, #16
 8001334:	431d      	orrs	r5, r3
 8001336:	9f02      	ldr	r7, [sp, #8]
 8001338:	042b      	lsls	r3, r5, #16
 800133a:	0c1b      	lsrs	r3, r3, #16
 800133c:	435a      	muls	r2, r3
 800133e:	437b      	muls	r3, r7
 8001340:	469c      	mov	ip, r3
 8001342:	0c29      	lsrs	r1, r5, #16
 8001344:	4348      	muls	r0, r1
 8001346:	0c13      	lsrs	r3, r2, #16
 8001348:	4484      	add	ip, r0
 800134a:	4463      	add	r3, ip
 800134c:	4379      	muls	r1, r7
 800134e:	4298      	cmp	r0, r3
 8001350:	d903      	bls.n	800135a <__aeabi_ddiv+0x23a>
 8001352:	2080      	movs	r0, #128	; 0x80
 8001354:	0240      	lsls	r0, r0, #9
 8001356:	4684      	mov	ip, r0
 8001358:	4461      	add	r1, ip
 800135a:	0c18      	lsrs	r0, r3, #16
 800135c:	0412      	lsls	r2, r2, #16
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	0c12      	lsrs	r2, r2, #16
 8001362:	1840      	adds	r0, r0, r1
 8001364:	189b      	adds	r3, r3, r2
 8001366:	4286      	cmp	r6, r0
 8001368:	d200      	bcs.n	800136c <__aeabi_ddiv+0x24c>
 800136a:	e100      	b.n	800156e <__aeabi_ddiv+0x44e>
 800136c:	d100      	bne.n	8001370 <__aeabi_ddiv+0x250>
 800136e:	e0fb      	b.n	8001568 <__aeabi_ddiv+0x448>
 8001370:	2301      	movs	r3, #1
 8001372:	431d      	orrs	r5, r3
 8001374:	4b49      	ldr	r3, [pc, #292]	; (800149c <__aeabi_ddiv+0x37c>)
 8001376:	445b      	add	r3, fp
 8001378:	2b00      	cmp	r3, #0
 800137a:	dc00      	bgt.n	800137e <__aeabi_ddiv+0x25e>
 800137c:	e0aa      	b.n	80014d4 <__aeabi_ddiv+0x3b4>
 800137e:	076a      	lsls	r2, r5, #29
 8001380:	d000      	beq.n	8001384 <__aeabi_ddiv+0x264>
 8001382:	e13d      	b.n	8001600 <__aeabi_ddiv+0x4e0>
 8001384:	08e9      	lsrs	r1, r5, #3
 8001386:	4642      	mov	r2, r8
 8001388:	01d2      	lsls	r2, r2, #7
 800138a:	d506      	bpl.n	800139a <__aeabi_ddiv+0x27a>
 800138c:	4642      	mov	r2, r8
 800138e:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <__aeabi_ddiv+0x380>)
 8001390:	401a      	ands	r2, r3
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	4690      	mov	r8, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	445b      	add	r3, fp
 800139a:	4a42      	ldr	r2, [pc, #264]	; (80014a4 <__aeabi_ddiv+0x384>)
 800139c:	4293      	cmp	r3, r2
 800139e:	dd00      	ble.n	80013a2 <__aeabi_ddiv+0x282>
 80013a0:	e723      	b.n	80011ea <__aeabi_ddiv+0xca>
 80013a2:	4642      	mov	r2, r8
 80013a4:	055b      	lsls	r3, r3, #21
 80013a6:	0755      	lsls	r5, r2, #29
 80013a8:	0252      	lsls	r2, r2, #9
 80013aa:	430d      	orrs	r5, r1
 80013ac:	0b12      	lsrs	r2, r2, #12
 80013ae:	0d5b      	lsrs	r3, r3, #21
 80013b0:	e70d      	b.n	80011ce <__aeabi_ddiv+0xae>
 80013b2:	4651      	mov	r1, sl
 80013b4:	4321      	orrs	r1, r4
 80013b6:	d100      	bne.n	80013ba <__aeabi_ddiv+0x29a>
 80013b8:	e07c      	b.n	80014b4 <__aeabi_ddiv+0x394>
 80013ba:	2c00      	cmp	r4, #0
 80013bc:	d100      	bne.n	80013c0 <__aeabi_ddiv+0x2a0>
 80013be:	e0fb      	b.n	80015b8 <__aeabi_ddiv+0x498>
 80013c0:	0020      	movs	r0, r4
 80013c2:	f001 fa1b 	bl	80027fc <__clzsi2>
 80013c6:	0002      	movs	r2, r0
 80013c8:	3a0b      	subs	r2, #11
 80013ca:	231d      	movs	r3, #29
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	4652      	mov	r2, sl
 80013d0:	0001      	movs	r1, r0
 80013d2:	40da      	lsrs	r2, r3
 80013d4:	4653      	mov	r3, sl
 80013d6:	3908      	subs	r1, #8
 80013d8:	408b      	lsls	r3, r1
 80013da:	408c      	lsls	r4, r1
 80013dc:	0019      	movs	r1, r3
 80013de:	4314      	orrs	r4, r2
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <__aeabi_ddiv+0x388>)
 80013e2:	4458      	add	r0, fp
 80013e4:	469b      	mov	fp, r3
 80013e6:	4483      	add	fp, r0
 80013e8:	2000      	movs	r0, #0
 80013ea:	e6d9      	b.n	80011a0 <__aeabi_ddiv+0x80>
 80013ec:	0003      	movs	r3, r0
 80013ee:	4323      	orrs	r3, r4
 80013f0:	4698      	mov	r8, r3
 80013f2:	d044      	beq.n	800147e <__aeabi_ddiv+0x35e>
 80013f4:	2c00      	cmp	r4, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_ddiv+0x2da>
 80013f8:	e0cf      	b.n	800159a <__aeabi_ddiv+0x47a>
 80013fa:	0020      	movs	r0, r4
 80013fc:	f001 f9fe 	bl	80027fc <__clzsi2>
 8001400:	0001      	movs	r1, r0
 8001402:	0002      	movs	r2, r0
 8001404:	390b      	subs	r1, #11
 8001406:	231d      	movs	r3, #29
 8001408:	1a5b      	subs	r3, r3, r1
 800140a:	4649      	mov	r1, r9
 800140c:	0010      	movs	r0, r2
 800140e:	40d9      	lsrs	r1, r3
 8001410:	3808      	subs	r0, #8
 8001412:	4084      	lsls	r4, r0
 8001414:	000b      	movs	r3, r1
 8001416:	464d      	mov	r5, r9
 8001418:	4323      	orrs	r3, r4
 800141a:	4698      	mov	r8, r3
 800141c:	4085      	lsls	r5, r0
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <__aeabi_ddiv+0x38c>)
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	469b      	mov	fp, r3
 8001424:	2300      	movs	r3, #0
 8001426:	4699      	mov	r9, r3
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	e69e      	b.n	800116a <__aeabi_ddiv+0x4a>
 800142c:	0002      	movs	r2, r0
 800142e:	4322      	orrs	r2, r4
 8001430:	4690      	mov	r8, r2
 8001432:	d11d      	bne.n	8001470 <__aeabi_ddiv+0x350>
 8001434:	2208      	movs	r2, #8
 8001436:	469b      	mov	fp, r3
 8001438:	2302      	movs	r3, #2
 800143a:	2500      	movs	r5, #0
 800143c:	4691      	mov	r9, r2
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	e693      	b.n	800116a <__aeabi_ddiv+0x4a>
 8001442:	4651      	mov	r1, sl
 8001444:	4321      	orrs	r1, r4
 8001446:	d109      	bne.n	800145c <__aeabi_ddiv+0x33c>
 8001448:	2302      	movs	r3, #2
 800144a:	464a      	mov	r2, r9
 800144c:	431a      	orrs	r2, r3
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <__aeabi_ddiv+0x390>)
 8001450:	4691      	mov	r9, r2
 8001452:	469c      	mov	ip, r3
 8001454:	2400      	movs	r4, #0
 8001456:	2002      	movs	r0, #2
 8001458:	44e3      	add	fp, ip
 800145a:	e6a1      	b.n	80011a0 <__aeabi_ddiv+0x80>
 800145c:	2303      	movs	r3, #3
 800145e:	464a      	mov	r2, r9
 8001460:	431a      	orrs	r2, r3
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <__aeabi_ddiv+0x390>)
 8001464:	4691      	mov	r9, r2
 8001466:	469c      	mov	ip, r3
 8001468:	4651      	mov	r1, sl
 800146a:	2003      	movs	r0, #3
 800146c:	44e3      	add	fp, ip
 800146e:	e697      	b.n	80011a0 <__aeabi_ddiv+0x80>
 8001470:	220c      	movs	r2, #12
 8001472:	469b      	mov	fp, r3
 8001474:	2303      	movs	r3, #3
 8001476:	46a0      	mov	r8, r4
 8001478:	4691      	mov	r9, r2
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	e675      	b.n	800116a <__aeabi_ddiv+0x4a>
 800147e:	2304      	movs	r3, #4
 8001480:	4699      	mov	r9, r3
 8001482:	2300      	movs	r3, #0
 8001484:	469b      	mov	fp, r3
 8001486:	3301      	adds	r3, #1
 8001488:	2500      	movs	r5, #0
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	e66d      	b.n	800116a <__aeabi_ddiv+0x4a>
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	000007ff 	.word	0x000007ff
 8001494:	fffffc01 	.word	0xfffffc01
 8001498:	0800cb84 	.word	0x0800cb84
 800149c:	000003ff 	.word	0x000003ff
 80014a0:	feffffff 	.word	0xfeffffff
 80014a4:	000007fe 	.word	0x000007fe
 80014a8:	000003f3 	.word	0x000003f3
 80014ac:	fffffc0d 	.word	0xfffffc0d
 80014b0:	fffff801 	.word	0xfffff801
 80014b4:	464a      	mov	r2, r9
 80014b6:	2301      	movs	r3, #1
 80014b8:	431a      	orrs	r2, r3
 80014ba:	4691      	mov	r9, r2
 80014bc:	2400      	movs	r4, #0
 80014be:	2001      	movs	r0, #1
 80014c0:	e66e      	b.n	80011a0 <__aeabi_ddiv+0x80>
 80014c2:	2300      	movs	r3, #0
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	469a      	mov	sl, r3
 80014c8:	2500      	movs	r5, #0
 80014ca:	4b88      	ldr	r3, [pc, #544]	; (80016ec <__aeabi_ddiv+0x5cc>)
 80014cc:	0312      	lsls	r2, r2, #12
 80014ce:	e67e      	b.n	80011ce <__aeabi_ddiv+0xae>
 80014d0:	2501      	movs	r5, #1
 80014d2:	426d      	negs	r5, r5
 80014d4:	2201      	movs	r2, #1
 80014d6:	1ad2      	subs	r2, r2, r3
 80014d8:	2a38      	cmp	r2, #56	; 0x38
 80014da:	dd00      	ble.n	80014de <__aeabi_ddiv+0x3be>
 80014dc:	e674      	b.n	80011c8 <__aeabi_ddiv+0xa8>
 80014de:	2a1f      	cmp	r2, #31
 80014e0:	dc00      	bgt.n	80014e4 <__aeabi_ddiv+0x3c4>
 80014e2:	e0bd      	b.n	8001660 <__aeabi_ddiv+0x540>
 80014e4:	211f      	movs	r1, #31
 80014e6:	4249      	negs	r1, r1
 80014e8:	1acb      	subs	r3, r1, r3
 80014ea:	4641      	mov	r1, r8
 80014ec:	40d9      	lsrs	r1, r3
 80014ee:	000b      	movs	r3, r1
 80014f0:	2a20      	cmp	r2, #32
 80014f2:	d004      	beq.n	80014fe <__aeabi_ddiv+0x3de>
 80014f4:	4641      	mov	r1, r8
 80014f6:	4a7e      	ldr	r2, [pc, #504]	; (80016f0 <__aeabi_ddiv+0x5d0>)
 80014f8:	445a      	add	r2, fp
 80014fa:	4091      	lsls	r1, r2
 80014fc:	430d      	orrs	r5, r1
 80014fe:	0029      	movs	r1, r5
 8001500:	1e4a      	subs	r2, r1, #1
 8001502:	4191      	sbcs	r1, r2
 8001504:	4319      	orrs	r1, r3
 8001506:	2307      	movs	r3, #7
 8001508:	001d      	movs	r5, r3
 800150a:	2200      	movs	r2, #0
 800150c:	400d      	ands	r5, r1
 800150e:	420b      	tst	r3, r1
 8001510:	d100      	bne.n	8001514 <__aeabi_ddiv+0x3f4>
 8001512:	e0d0      	b.n	80016b6 <__aeabi_ddiv+0x596>
 8001514:	220f      	movs	r2, #15
 8001516:	2300      	movs	r3, #0
 8001518:	400a      	ands	r2, r1
 800151a:	2a04      	cmp	r2, #4
 800151c:	d100      	bne.n	8001520 <__aeabi_ddiv+0x400>
 800151e:	e0c7      	b.n	80016b0 <__aeabi_ddiv+0x590>
 8001520:	1d0a      	adds	r2, r1, #4
 8001522:	428a      	cmp	r2, r1
 8001524:	4189      	sbcs	r1, r1
 8001526:	4249      	negs	r1, r1
 8001528:	185b      	adds	r3, r3, r1
 800152a:	0011      	movs	r1, r2
 800152c:	021a      	lsls	r2, r3, #8
 800152e:	d400      	bmi.n	8001532 <__aeabi_ddiv+0x412>
 8001530:	e0be      	b.n	80016b0 <__aeabi_ddiv+0x590>
 8001532:	2301      	movs	r3, #1
 8001534:	2200      	movs	r2, #0
 8001536:	2500      	movs	r5, #0
 8001538:	e649      	b.n	80011ce <__aeabi_ddiv+0xae>
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	4643      	mov	r3, r8
 800153e:	0312      	lsls	r2, r2, #12
 8001540:	4213      	tst	r3, r2
 8001542:	d008      	beq.n	8001556 <__aeabi_ddiv+0x436>
 8001544:	4214      	tst	r4, r2
 8001546:	d106      	bne.n	8001556 <__aeabi_ddiv+0x436>
 8001548:	4322      	orrs	r2, r4
 800154a:	0312      	lsls	r2, r2, #12
 800154c:	46ba      	mov	sl, r7
 800154e:	000d      	movs	r5, r1
 8001550:	4b66      	ldr	r3, [pc, #408]	; (80016ec <__aeabi_ddiv+0x5cc>)
 8001552:	0b12      	lsrs	r2, r2, #12
 8001554:	e63b      	b.n	80011ce <__aeabi_ddiv+0xae>
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	4643      	mov	r3, r8
 800155a:	0312      	lsls	r2, r2, #12
 800155c:	431a      	orrs	r2, r3
 800155e:	0312      	lsls	r2, r2, #12
 8001560:	46b2      	mov	sl, r6
 8001562:	4b62      	ldr	r3, [pc, #392]	; (80016ec <__aeabi_ddiv+0x5cc>)
 8001564:	0b12      	lsrs	r2, r2, #12
 8001566:	e632      	b.n	80011ce <__aeabi_ddiv+0xae>
 8001568:	2b00      	cmp	r3, #0
 800156a:	d100      	bne.n	800156e <__aeabi_ddiv+0x44e>
 800156c:	e702      	b.n	8001374 <__aeabi_ddiv+0x254>
 800156e:	19a6      	adds	r6, r4, r6
 8001570:	1e6a      	subs	r2, r5, #1
 8001572:	42a6      	cmp	r6, r4
 8001574:	d200      	bcs.n	8001578 <__aeabi_ddiv+0x458>
 8001576:	e089      	b.n	800168c <__aeabi_ddiv+0x56c>
 8001578:	4286      	cmp	r6, r0
 800157a:	d200      	bcs.n	800157e <__aeabi_ddiv+0x45e>
 800157c:	e09f      	b.n	80016be <__aeabi_ddiv+0x59e>
 800157e:	d100      	bne.n	8001582 <__aeabi_ddiv+0x462>
 8001580:	e0af      	b.n	80016e2 <__aeabi_ddiv+0x5c2>
 8001582:	0015      	movs	r5, r2
 8001584:	e6f4      	b.n	8001370 <__aeabi_ddiv+0x250>
 8001586:	42a9      	cmp	r1, r5
 8001588:	d900      	bls.n	800158c <__aeabi_ddiv+0x46c>
 800158a:	e63c      	b.n	8001206 <__aeabi_ddiv+0xe6>
 800158c:	4643      	mov	r3, r8
 800158e:	07de      	lsls	r6, r3, #31
 8001590:	0858      	lsrs	r0, r3, #1
 8001592:	086b      	lsrs	r3, r5, #1
 8001594:	431e      	orrs	r6, r3
 8001596:	07ed      	lsls	r5, r5, #31
 8001598:	e63c      	b.n	8001214 <__aeabi_ddiv+0xf4>
 800159a:	f001 f92f 	bl	80027fc <__clzsi2>
 800159e:	0001      	movs	r1, r0
 80015a0:	0002      	movs	r2, r0
 80015a2:	3115      	adds	r1, #21
 80015a4:	3220      	adds	r2, #32
 80015a6:	291c      	cmp	r1, #28
 80015a8:	dc00      	bgt.n	80015ac <__aeabi_ddiv+0x48c>
 80015aa:	e72c      	b.n	8001406 <__aeabi_ddiv+0x2e6>
 80015ac:	464b      	mov	r3, r9
 80015ae:	3808      	subs	r0, #8
 80015b0:	4083      	lsls	r3, r0
 80015b2:	2500      	movs	r5, #0
 80015b4:	4698      	mov	r8, r3
 80015b6:	e732      	b.n	800141e <__aeabi_ddiv+0x2fe>
 80015b8:	f001 f920 	bl	80027fc <__clzsi2>
 80015bc:	0003      	movs	r3, r0
 80015be:	001a      	movs	r2, r3
 80015c0:	3215      	adds	r2, #21
 80015c2:	3020      	adds	r0, #32
 80015c4:	2a1c      	cmp	r2, #28
 80015c6:	dc00      	bgt.n	80015ca <__aeabi_ddiv+0x4aa>
 80015c8:	e6ff      	b.n	80013ca <__aeabi_ddiv+0x2aa>
 80015ca:	4654      	mov	r4, sl
 80015cc:	3b08      	subs	r3, #8
 80015ce:	2100      	movs	r1, #0
 80015d0:	409c      	lsls	r4, r3
 80015d2:	e705      	b.n	80013e0 <__aeabi_ddiv+0x2c0>
 80015d4:	1936      	adds	r6, r6, r4
 80015d6:	3b01      	subs	r3, #1
 80015d8:	42b4      	cmp	r4, r6
 80015da:	d900      	bls.n	80015de <__aeabi_ddiv+0x4be>
 80015dc:	e6a6      	b.n	800132c <__aeabi_ddiv+0x20c>
 80015de:	42b2      	cmp	r2, r6
 80015e0:	d800      	bhi.n	80015e4 <__aeabi_ddiv+0x4c4>
 80015e2:	e6a3      	b.n	800132c <__aeabi_ddiv+0x20c>
 80015e4:	1e83      	subs	r3, r0, #2
 80015e6:	1936      	adds	r6, r6, r4
 80015e8:	e6a0      	b.n	800132c <__aeabi_ddiv+0x20c>
 80015ea:	1909      	adds	r1, r1, r4
 80015ec:	3d01      	subs	r5, #1
 80015ee:	428c      	cmp	r4, r1
 80015f0:	d900      	bls.n	80015f4 <__aeabi_ddiv+0x4d4>
 80015f2:	e68d      	b.n	8001310 <__aeabi_ddiv+0x1f0>
 80015f4:	428a      	cmp	r2, r1
 80015f6:	d800      	bhi.n	80015fa <__aeabi_ddiv+0x4da>
 80015f8:	e68a      	b.n	8001310 <__aeabi_ddiv+0x1f0>
 80015fa:	1e85      	subs	r5, r0, #2
 80015fc:	1909      	adds	r1, r1, r4
 80015fe:	e687      	b.n	8001310 <__aeabi_ddiv+0x1f0>
 8001600:	220f      	movs	r2, #15
 8001602:	402a      	ands	r2, r5
 8001604:	2a04      	cmp	r2, #4
 8001606:	d100      	bne.n	800160a <__aeabi_ddiv+0x4ea>
 8001608:	e6bc      	b.n	8001384 <__aeabi_ddiv+0x264>
 800160a:	1d29      	adds	r1, r5, #4
 800160c:	42a9      	cmp	r1, r5
 800160e:	41ad      	sbcs	r5, r5
 8001610:	426d      	negs	r5, r5
 8001612:	08c9      	lsrs	r1, r1, #3
 8001614:	44a8      	add	r8, r5
 8001616:	e6b6      	b.n	8001386 <__aeabi_ddiv+0x266>
 8001618:	42af      	cmp	r7, r5
 800161a:	d900      	bls.n	800161e <__aeabi_ddiv+0x4fe>
 800161c:	e662      	b.n	80012e4 <__aeabi_ddiv+0x1c4>
 800161e:	4281      	cmp	r1, r0
 8001620:	d804      	bhi.n	800162c <__aeabi_ddiv+0x50c>
 8001622:	d000      	beq.n	8001626 <__aeabi_ddiv+0x506>
 8001624:	e65e      	b.n	80012e4 <__aeabi_ddiv+0x1c4>
 8001626:	42ae      	cmp	r6, r5
 8001628:	d800      	bhi.n	800162c <__aeabi_ddiv+0x50c>
 800162a:	e65b      	b.n	80012e4 <__aeabi_ddiv+0x1c4>
 800162c:	2302      	movs	r3, #2
 800162e:	425b      	negs	r3, r3
 8001630:	469c      	mov	ip, r3
 8001632:	9b00      	ldr	r3, [sp, #0]
 8001634:	44e0      	add	r8, ip
 8001636:	469c      	mov	ip, r3
 8001638:	4465      	add	r5, ip
 800163a:	429d      	cmp	r5, r3
 800163c:	419b      	sbcs	r3, r3
 800163e:	425b      	negs	r3, r3
 8001640:	191b      	adds	r3, r3, r4
 8001642:	18c0      	adds	r0, r0, r3
 8001644:	e64f      	b.n	80012e6 <__aeabi_ddiv+0x1c6>
 8001646:	42b2      	cmp	r2, r6
 8001648:	d800      	bhi.n	800164c <__aeabi_ddiv+0x52c>
 800164a:	e612      	b.n	8001272 <__aeabi_ddiv+0x152>
 800164c:	1e83      	subs	r3, r0, #2
 800164e:	1936      	adds	r6, r6, r4
 8001650:	e60f      	b.n	8001272 <__aeabi_ddiv+0x152>
 8001652:	428a      	cmp	r2, r1
 8001654:	d800      	bhi.n	8001658 <__aeabi_ddiv+0x538>
 8001656:	e5fa      	b.n	800124e <__aeabi_ddiv+0x12e>
 8001658:	1e83      	subs	r3, r0, #2
 800165a:	4698      	mov	r8, r3
 800165c:	1909      	adds	r1, r1, r4
 800165e:	e5f6      	b.n	800124e <__aeabi_ddiv+0x12e>
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <__aeabi_ddiv+0x5d4>)
 8001662:	0028      	movs	r0, r5
 8001664:	445b      	add	r3, fp
 8001666:	4641      	mov	r1, r8
 8001668:	409d      	lsls	r5, r3
 800166a:	4099      	lsls	r1, r3
 800166c:	40d0      	lsrs	r0, r2
 800166e:	1e6b      	subs	r3, r5, #1
 8001670:	419d      	sbcs	r5, r3
 8001672:	4643      	mov	r3, r8
 8001674:	4301      	orrs	r1, r0
 8001676:	4329      	orrs	r1, r5
 8001678:	40d3      	lsrs	r3, r2
 800167a:	074a      	lsls	r2, r1, #29
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x560>
 800167e:	e755      	b.n	800152c <__aeabi_ddiv+0x40c>
 8001680:	220f      	movs	r2, #15
 8001682:	400a      	ands	r2, r1
 8001684:	2a04      	cmp	r2, #4
 8001686:	d000      	beq.n	800168a <__aeabi_ddiv+0x56a>
 8001688:	e74a      	b.n	8001520 <__aeabi_ddiv+0x400>
 800168a:	e74f      	b.n	800152c <__aeabi_ddiv+0x40c>
 800168c:	0015      	movs	r5, r2
 800168e:	4286      	cmp	r6, r0
 8001690:	d000      	beq.n	8001694 <__aeabi_ddiv+0x574>
 8001692:	e66d      	b.n	8001370 <__aeabi_ddiv+0x250>
 8001694:	9a00      	ldr	r2, [sp, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d000      	beq.n	800169c <__aeabi_ddiv+0x57c>
 800169a:	e669      	b.n	8001370 <__aeabi_ddiv+0x250>
 800169c:	e66a      	b.n	8001374 <__aeabi_ddiv+0x254>
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <__aeabi_ddiv+0x5d8>)
 80016a0:	445b      	add	r3, fp
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	dc00      	bgt.n	80016a8 <__aeabi_ddiv+0x588>
 80016a6:	e713      	b.n	80014d0 <__aeabi_ddiv+0x3b0>
 80016a8:	2501      	movs	r5, #1
 80016aa:	2100      	movs	r1, #0
 80016ac:	44a8      	add	r8, r5
 80016ae:	e66a      	b.n	8001386 <__aeabi_ddiv+0x266>
 80016b0:	075d      	lsls	r5, r3, #29
 80016b2:	025b      	lsls	r3, r3, #9
 80016b4:	0b1a      	lsrs	r2, r3, #12
 80016b6:	08c9      	lsrs	r1, r1, #3
 80016b8:	2300      	movs	r3, #0
 80016ba:	430d      	orrs	r5, r1
 80016bc:	e587      	b.n	80011ce <__aeabi_ddiv+0xae>
 80016be:	9900      	ldr	r1, [sp, #0]
 80016c0:	3d02      	subs	r5, #2
 80016c2:	004a      	lsls	r2, r1, #1
 80016c4:	428a      	cmp	r2, r1
 80016c6:	41bf      	sbcs	r7, r7
 80016c8:	427f      	negs	r7, r7
 80016ca:	193f      	adds	r7, r7, r4
 80016cc:	19f6      	adds	r6, r6, r7
 80016ce:	9200      	str	r2, [sp, #0]
 80016d0:	e7dd      	b.n	800168e <__aeabi_ddiv+0x56e>
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	4643      	mov	r3, r8
 80016d6:	0312      	lsls	r2, r2, #12
 80016d8:	431a      	orrs	r2, r3
 80016da:	0312      	lsls	r2, r2, #12
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <__aeabi_ddiv+0x5cc>)
 80016de:	0b12      	lsrs	r2, r2, #12
 80016e0:	e575      	b.n	80011ce <__aeabi_ddiv+0xae>
 80016e2:	9900      	ldr	r1, [sp, #0]
 80016e4:	4299      	cmp	r1, r3
 80016e6:	d3ea      	bcc.n	80016be <__aeabi_ddiv+0x59e>
 80016e8:	0015      	movs	r5, r2
 80016ea:	e7d3      	b.n	8001694 <__aeabi_ddiv+0x574>
 80016ec:	000007ff 	.word	0x000007ff
 80016f0:	0000043e 	.word	0x0000043e
 80016f4:	0000041e 	.word	0x0000041e
 80016f8:	000003ff 	.word	0x000003ff

080016fc <__eqdf2>:
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	464e      	mov	r6, r9
 8001700:	4645      	mov	r5, r8
 8001702:	46de      	mov	lr, fp
 8001704:	4657      	mov	r7, sl
 8001706:	4690      	mov	r8, r2
 8001708:	b5e0      	push	{r5, r6, r7, lr}
 800170a:	0017      	movs	r7, r2
 800170c:	031a      	lsls	r2, r3, #12
 800170e:	0b12      	lsrs	r2, r2, #12
 8001710:	0005      	movs	r5, r0
 8001712:	4684      	mov	ip, r0
 8001714:	4819      	ldr	r0, [pc, #100]	; (800177c <__eqdf2+0x80>)
 8001716:	030e      	lsls	r6, r1, #12
 8001718:	004c      	lsls	r4, r1, #1
 800171a:	4691      	mov	r9, r2
 800171c:	005a      	lsls	r2, r3, #1
 800171e:	0fdb      	lsrs	r3, r3, #31
 8001720:	469b      	mov	fp, r3
 8001722:	0b36      	lsrs	r6, r6, #12
 8001724:	0d64      	lsrs	r4, r4, #21
 8001726:	0fc9      	lsrs	r1, r1, #31
 8001728:	0d52      	lsrs	r2, r2, #21
 800172a:	4284      	cmp	r4, r0
 800172c:	d019      	beq.n	8001762 <__eqdf2+0x66>
 800172e:	4282      	cmp	r2, r0
 8001730:	d010      	beq.n	8001754 <__eqdf2+0x58>
 8001732:	2001      	movs	r0, #1
 8001734:	4294      	cmp	r4, r2
 8001736:	d10e      	bne.n	8001756 <__eqdf2+0x5a>
 8001738:	454e      	cmp	r6, r9
 800173a:	d10c      	bne.n	8001756 <__eqdf2+0x5a>
 800173c:	2001      	movs	r0, #1
 800173e:	45c4      	cmp	ip, r8
 8001740:	d109      	bne.n	8001756 <__eqdf2+0x5a>
 8001742:	4559      	cmp	r1, fp
 8001744:	d017      	beq.n	8001776 <__eqdf2+0x7a>
 8001746:	2c00      	cmp	r4, #0
 8001748:	d105      	bne.n	8001756 <__eqdf2+0x5a>
 800174a:	0030      	movs	r0, r6
 800174c:	4328      	orrs	r0, r5
 800174e:	1e43      	subs	r3, r0, #1
 8001750:	4198      	sbcs	r0, r3
 8001752:	e000      	b.n	8001756 <__eqdf2+0x5a>
 8001754:	2001      	movs	r0, #1
 8001756:	bcf0      	pop	{r4, r5, r6, r7}
 8001758:	46bb      	mov	fp, r7
 800175a:	46b2      	mov	sl, r6
 800175c:	46a9      	mov	r9, r5
 800175e:	46a0      	mov	r8, r4
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001762:	0033      	movs	r3, r6
 8001764:	2001      	movs	r0, #1
 8001766:	432b      	orrs	r3, r5
 8001768:	d1f5      	bne.n	8001756 <__eqdf2+0x5a>
 800176a:	42a2      	cmp	r2, r4
 800176c:	d1f3      	bne.n	8001756 <__eqdf2+0x5a>
 800176e:	464b      	mov	r3, r9
 8001770:	433b      	orrs	r3, r7
 8001772:	d1f0      	bne.n	8001756 <__eqdf2+0x5a>
 8001774:	e7e2      	b.n	800173c <__eqdf2+0x40>
 8001776:	2000      	movs	r0, #0
 8001778:	e7ed      	b.n	8001756 <__eqdf2+0x5a>
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	000007ff 	.word	0x000007ff

08001780 <__gedf2>:
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	4647      	mov	r7, r8
 8001784:	46ce      	mov	lr, r9
 8001786:	0004      	movs	r4, r0
 8001788:	0018      	movs	r0, r3
 800178a:	0016      	movs	r6, r2
 800178c:	031b      	lsls	r3, r3, #12
 800178e:	0b1b      	lsrs	r3, r3, #12
 8001790:	4d2d      	ldr	r5, [pc, #180]	; (8001848 <__gedf2+0xc8>)
 8001792:	004a      	lsls	r2, r1, #1
 8001794:	4699      	mov	r9, r3
 8001796:	b580      	push	{r7, lr}
 8001798:	0043      	lsls	r3, r0, #1
 800179a:	030f      	lsls	r7, r1, #12
 800179c:	46a4      	mov	ip, r4
 800179e:	46b0      	mov	r8, r6
 80017a0:	0b3f      	lsrs	r7, r7, #12
 80017a2:	0d52      	lsrs	r2, r2, #21
 80017a4:	0fc9      	lsrs	r1, r1, #31
 80017a6:	0d5b      	lsrs	r3, r3, #21
 80017a8:	0fc0      	lsrs	r0, r0, #31
 80017aa:	42aa      	cmp	r2, r5
 80017ac:	d021      	beq.n	80017f2 <__gedf2+0x72>
 80017ae:	42ab      	cmp	r3, r5
 80017b0:	d013      	beq.n	80017da <__gedf2+0x5a>
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d122      	bne.n	80017fc <__gedf2+0x7c>
 80017b6:	433c      	orrs	r4, r7
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <__gedf2+0x42>
 80017bc:	464d      	mov	r5, r9
 80017be:	432e      	orrs	r6, r5
 80017c0:	d022      	beq.n	8001808 <__gedf2+0x88>
 80017c2:	2c00      	cmp	r4, #0
 80017c4:	d010      	beq.n	80017e8 <__gedf2+0x68>
 80017c6:	4281      	cmp	r1, r0
 80017c8:	d022      	beq.n	8001810 <__gedf2+0x90>
 80017ca:	2002      	movs	r0, #2
 80017cc:	3901      	subs	r1, #1
 80017ce:	4008      	ands	r0, r1
 80017d0:	3801      	subs	r0, #1
 80017d2:	bcc0      	pop	{r6, r7}
 80017d4:	46b9      	mov	r9, r7
 80017d6:	46b0      	mov	r8, r6
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017da:	464d      	mov	r5, r9
 80017dc:	432e      	orrs	r6, r5
 80017de:	d129      	bne.n	8001834 <__gedf2+0xb4>
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	d1f0      	bne.n	80017c6 <__gedf2+0x46>
 80017e4:	433c      	orrs	r4, r7
 80017e6:	d1ee      	bne.n	80017c6 <__gedf2+0x46>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d1f2      	bne.n	80017d2 <__gedf2+0x52>
 80017ec:	2001      	movs	r0, #1
 80017ee:	4240      	negs	r0, r0
 80017f0:	e7ef      	b.n	80017d2 <__gedf2+0x52>
 80017f2:	003d      	movs	r5, r7
 80017f4:	4325      	orrs	r5, r4
 80017f6:	d11d      	bne.n	8001834 <__gedf2+0xb4>
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d0ee      	beq.n	80017da <__gedf2+0x5a>
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e2      	bne.n	80017c6 <__gedf2+0x46>
 8001800:	464c      	mov	r4, r9
 8001802:	4326      	orrs	r6, r4
 8001804:	d1df      	bne.n	80017c6 <__gedf2+0x46>
 8001806:	e7e0      	b.n	80017ca <__gedf2+0x4a>
 8001808:	2000      	movs	r0, #0
 800180a:	2c00      	cmp	r4, #0
 800180c:	d0e1      	beq.n	80017d2 <__gedf2+0x52>
 800180e:	e7dc      	b.n	80017ca <__gedf2+0x4a>
 8001810:	429a      	cmp	r2, r3
 8001812:	dc0a      	bgt.n	800182a <__gedf2+0xaa>
 8001814:	dbe8      	blt.n	80017e8 <__gedf2+0x68>
 8001816:	454f      	cmp	r7, r9
 8001818:	d8d7      	bhi.n	80017ca <__gedf2+0x4a>
 800181a:	d00e      	beq.n	800183a <__gedf2+0xba>
 800181c:	2000      	movs	r0, #0
 800181e:	454f      	cmp	r7, r9
 8001820:	d2d7      	bcs.n	80017d2 <__gedf2+0x52>
 8001822:	2900      	cmp	r1, #0
 8001824:	d0e2      	beq.n	80017ec <__gedf2+0x6c>
 8001826:	0008      	movs	r0, r1
 8001828:	e7d3      	b.n	80017d2 <__gedf2+0x52>
 800182a:	4243      	negs	r3, r0
 800182c:	4158      	adcs	r0, r3
 800182e:	0040      	lsls	r0, r0, #1
 8001830:	3801      	subs	r0, #1
 8001832:	e7ce      	b.n	80017d2 <__gedf2+0x52>
 8001834:	2002      	movs	r0, #2
 8001836:	4240      	negs	r0, r0
 8001838:	e7cb      	b.n	80017d2 <__gedf2+0x52>
 800183a:	45c4      	cmp	ip, r8
 800183c:	d8c5      	bhi.n	80017ca <__gedf2+0x4a>
 800183e:	2000      	movs	r0, #0
 8001840:	45c4      	cmp	ip, r8
 8001842:	d2c6      	bcs.n	80017d2 <__gedf2+0x52>
 8001844:	e7ed      	b.n	8001822 <__gedf2+0xa2>
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	000007ff 	.word	0x000007ff

0800184c <__ledf2>:
 800184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184e:	4647      	mov	r7, r8
 8001850:	46ce      	mov	lr, r9
 8001852:	0004      	movs	r4, r0
 8001854:	0018      	movs	r0, r3
 8001856:	0016      	movs	r6, r2
 8001858:	031b      	lsls	r3, r3, #12
 800185a:	0b1b      	lsrs	r3, r3, #12
 800185c:	4d2c      	ldr	r5, [pc, #176]	; (8001910 <__ledf2+0xc4>)
 800185e:	004a      	lsls	r2, r1, #1
 8001860:	4699      	mov	r9, r3
 8001862:	b580      	push	{r7, lr}
 8001864:	0043      	lsls	r3, r0, #1
 8001866:	030f      	lsls	r7, r1, #12
 8001868:	46a4      	mov	ip, r4
 800186a:	46b0      	mov	r8, r6
 800186c:	0b3f      	lsrs	r7, r7, #12
 800186e:	0d52      	lsrs	r2, r2, #21
 8001870:	0fc9      	lsrs	r1, r1, #31
 8001872:	0d5b      	lsrs	r3, r3, #21
 8001874:	0fc0      	lsrs	r0, r0, #31
 8001876:	42aa      	cmp	r2, r5
 8001878:	d00d      	beq.n	8001896 <__ledf2+0x4a>
 800187a:	42ab      	cmp	r3, r5
 800187c:	d010      	beq.n	80018a0 <__ledf2+0x54>
 800187e:	2a00      	cmp	r2, #0
 8001880:	d127      	bne.n	80018d2 <__ledf2+0x86>
 8001882:	433c      	orrs	r4, r7
 8001884:	2b00      	cmp	r3, #0
 8001886:	d111      	bne.n	80018ac <__ledf2+0x60>
 8001888:	464d      	mov	r5, r9
 800188a:	432e      	orrs	r6, r5
 800188c:	d10e      	bne.n	80018ac <__ledf2+0x60>
 800188e:	2000      	movs	r0, #0
 8001890:	2c00      	cmp	r4, #0
 8001892:	d015      	beq.n	80018c0 <__ledf2+0x74>
 8001894:	e00e      	b.n	80018b4 <__ledf2+0x68>
 8001896:	003d      	movs	r5, r7
 8001898:	4325      	orrs	r5, r4
 800189a:	d110      	bne.n	80018be <__ledf2+0x72>
 800189c:	4293      	cmp	r3, r2
 800189e:	d118      	bne.n	80018d2 <__ledf2+0x86>
 80018a0:	464d      	mov	r5, r9
 80018a2:	432e      	orrs	r6, r5
 80018a4:	d10b      	bne.n	80018be <__ledf2+0x72>
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d102      	bne.n	80018b0 <__ledf2+0x64>
 80018aa:	433c      	orrs	r4, r7
 80018ac:	2c00      	cmp	r4, #0
 80018ae:	d00b      	beq.n	80018c8 <__ledf2+0x7c>
 80018b0:	4281      	cmp	r1, r0
 80018b2:	d014      	beq.n	80018de <__ledf2+0x92>
 80018b4:	2002      	movs	r0, #2
 80018b6:	3901      	subs	r1, #1
 80018b8:	4008      	ands	r0, r1
 80018ba:	3801      	subs	r0, #1
 80018bc:	e000      	b.n	80018c0 <__ledf2+0x74>
 80018be:	2002      	movs	r0, #2
 80018c0:	bcc0      	pop	{r6, r7}
 80018c2:	46b9      	mov	r9, r7
 80018c4:	46b0      	mov	r8, r6
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c8:	2800      	cmp	r0, #0
 80018ca:	d1f9      	bne.n	80018c0 <__ledf2+0x74>
 80018cc:	2001      	movs	r0, #1
 80018ce:	4240      	negs	r0, r0
 80018d0:	e7f6      	b.n	80018c0 <__ledf2+0x74>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ec      	bne.n	80018b0 <__ledf2+0x64>
 80018d6:	464c      	mov	r4, r9
 80018d8:	4326      	orrs	r6, r4
 80018da:	d1e9      	bne.n	80018b0 <__ledf2+0x64>
 80018dc:	e7ea      	b.n	80018b4 <__ledf2+0x68>
 80018de:	429a      	cmp	r2, r3
 80018e0:	dd04      	ble.n	80018ec <__ledf2+0xa0>
 80018e2:	4243      	negs	r3, r0
 80018e4:	4158      	adcs	r0, r3
 80018e6:	0040      	lsls	r0, r0, #1
 80018e8:	3801      	subs	r0, #1
 80018ea:	e7e9      	b.n	80018c0 <__ledf2+0x74>
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbeb      	blt.n	80018c8 <__ledf2+0x7c>
 80018f0:	454f      	cmp	r7, r9
 80018f2:	d8df      	bhi.n	80018b4 <__ledf2+0x68>
 80018f4:	d006      	beq.n	8001904 <__ledf2+0xb8>
 80018f6:	2000      	movs	r0, #0
 80018f8:	454f      	cmp	r7, r9
 80018fa:	d2e1      	bcs.n	80018c0 <__ledf2+0x74>
 80018fc:	2900      	cmp	r1, #0
 80018fe:	d0e5      	beq.n	80018cc <__ledf2+0x80>
 8001900:	0008      	movs	r0, r1
 8001902:	e7dd      	b.n	80018c0 <__ledf2+0x74>
 8001904:	45c4      	cmp	ip, r8
 8001906:	d8d5      	bhi.n	80018b4 <__ledf2+0x68>
 8001908:	2000      	movs	r0, #0
 800190a:	45c4      	cmp	ip, r8
 800190c:	d2d8      	bcs.n	80018c0 <__ledf2+0x74>
 800190e:	e7f5      	b.n	80018fc <__ledf2+0xb0>
 8001910:	000007ff 	.word	0x000007ff

08001914 <__aeabi_dmul>:
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	4645      	mov	r5, r8
 8001918:	46de      	mov	lr, fp
 800191a:	4657      	mov	r7, sl
 800191c:	464e      	mov	r6, r9
 800191e:	b5e0      	push	{r5, r6, r7, lr}
 8001920:	001f      	movs	r7, r3
 8001922:	030b      	lsls	r3, r1, #12
 8001924:	0b1b      	lsrs	r3, r3, #12
 8001926:	469b      	mov	fp, r3
 8001928:	004d      	lsls	r5, r1, #1
 800192a:	0fcb      	lsrs	r3, r1, #31
 800192c:	0004      	movs	r4, r0
 800192e:	4691      	mov	r9, r2
 8001930:	4698      	mov	r8, r3
 8001932:	b087      	sub	sp, #28
 8001934:	0d6d      	lsrs	r5, r5, #21
 8001936:	d100      	bne.n	800193a <__aeabi_dmul+0x26>
 8001938:	e1cd      	b.n	8001cd6 <__aeabi_dmul+0x3c2>
 800193a:	4bce      	ldr	r3, [pc, #824]	; (8001c74 <__aeabi_dmul+0x360>)
 800193c:	429d      	cmp	r5, r3
 800193e:	d100      	bne.n	8001942 <__aeabi_dmul+0x2e>
 8001940:	e1e9      	b.n	8001d16 <__aeabi_dmul+0x402>
 8001942:	465a      	mov	r2, fp
 8001944:	0f43      	lsrs	r3, r0, #29
 8001946:	00d2      	lsls	r2, r2, #3
 8001948:	4313      	orrs	r3, r2
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	0412      	lsls	r2, r2, #16
 800194e:	431a      	orrs	r2, r3
 8001950:	00c3      	lsls	r3, r0, #3
 8001952:	469a      	mov	sl, r3
 8001954:	4bc8      	ldr	r3, [pc, #800]	; (8001c78 <__aeabi_dmul+0x364>)
 8001956:	4693      	mov	fp, r2
 8001958:	469c      	mov	ip, r3
 800195a:	2300      	movs	r3, #0
 800195c:	2600      	movs	r6, #0
 800195e:	4465      	add	r5, ip
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	033c      	lsls	r4, r7, #12
 8001964:	007b      	lsls	r3, r7, #1
 8001966:	4648      	mov	r0, r9
 8001968:	0b24      	lsrs	r4, r4, #12
 800196a:	0d5b      	lsrs	r3, r3, #21
 800196c:	0fff      	lsrs	r7, r7, #31
 800196e:	2b00      	cmp	r3, #0
 8001970:	d100      	bne.n	8001974 <__aeabi_dmul+0x60>
 8001972:	e189      	b.n	8001c88 <__aeabi_dmul+0x374>
 8001974:	4abf      	ldr	r2, [pc, #764]	; (8001c74 <__aeabi_dmul+0x360>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <__aeabi_dmul+0x9a>
 800197a:	0f42      	lsrs	r2, r0, #29
 800197c:	00e4      	lsls	r4, r4, #3
 800197e:	4322      	orrs	r2, r4
 8001980:	2480      	movs	r4, #128	; 0x80
 8001982:	0424      	lsls	r4, r4, #16
 8001984:	4314      	orrs	r4, r2
 8001986:	4abc      	ldr	r2, [pc, #752]	; (8001c78 <__aeabi_dmul+0x364>)
 8001988:	2100      	movs	r1, #0
 800198a:	4694      	mov	ip, r2
 800198c:	4642      	mov	r2, r8
 800198e:	4463      	add	r3, ip
 8001990:	195b      	adds	r3, r3, r5
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	9b01      	ldr	r3, [sp, #4]
 8001996:	407a      	eors	r2, r7
 8001998:	3301      	adds	r3, #1
 800199a:	00c0      	lsls	r0, r0, #3
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	2e0a      	cmp	r6, #10
 80019a2:	dd1c      	ble.n	80019de <__aeabi_dmul+0xca>
 80019a4:	003a      	movs	r2, r7
 80019a6:	2e0b      	cmp	r6, #11
 80019a8:	d05e      	beq.n	8001a68 <__aeabi_dmul+0x154>
 80019aa:	4647      	mov	r7, r8
 80019ac:	e056      	b.n	8001a5c <__aeabi_dmul+0x148>
 80019ae:	4649      	mov	r1, r9
 80019b0:	4bb0      	ldr	r3, [pc, #704]	; (8001c74 <__aeabi_dmul+0x360>)
 80019b2:	4321      	orrs	r1, r4
 80019b4:	18eb      	adds	r3, r5, r3
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2900      	cmp	r1, #0
 80019ba:	d12a      	bne.n	8001a12 <__aeabi_dmul+0xfe>
 80019bc:	2080      	movs	r0, #128	; 0x80
 80019be:	2202      	movs	r2, #2
 80019c0:	0100      	lsls	r0, r0, #4
 80019c2:	002b      	movs	r3, r5
 80019c4:	4684      	mov	ip, r0
 80019c6:	4316      	orrs	r6, r2
 80019c8:	4642      	mov	r2, r8
 80019ca:	4463      	add	r3, ip
 80019cc:	407a      	eors	r2, r7
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2e0a      	cmp	r6, #10
 80019d4:	dd00      	ble.n	80019d8 <__aeabi_dmul+0xc4>
 80019d6:	e231      	b.n	8001e3c <__aeabi_dmul+0x528>
 80019d8:	2000      	movs	r0, #0
 80019da:	2400      	movs	r4, #0
 80019dc:	2102      	movs	r1, #2
 80019de:	2e02      	cmp	r6, #2
 80019e0:	dc26      	bgt.n	8001a30 <__aeabi_dmul+0x11c>
 80019e2:	3e01      	subs	r6, #1
 80019e4:	2e01      	cmp	r6, #1
 80019e6:	d852      	bhi.n	8001a8e <__aeabi_dmul+0x17a>
 80019e8:	2902      	cmp	r1, #2
 80019ea:	d04c      	beq.n	8001a86 <__aeabi_dmul+0x172>
 80019ec:	2901      	cmp	r1, #1
 80019ee:	d000      	beq.n	80019f2 <__aeabi_dmul+0xde>
 80019f0:	e118      	b.n	8001c24 <__aeabi_dmul+0x310>
 80019f2:	2300      	movs	r3, #0
 80019f4:	2400      	movs	r4, #0
 80019f6:	2500      	movs	r5, #0
 80019f8:	051b      	lsls	r3, r3, #20
 80019fa:	4323      	orrs	r3, r4
 80019fc:	07d2      	lsls	r2, r2, #31
 80019fe:	4313      	orrs	r3, r2
 8001a00:	0028      	movs	r0, r5
 8001a02:	0019      	movs	r1, r3
 8001a04:	b007      	add	sp, #28
 8001a06:	bcf0      	pop	{r4, r5, r6, r7}
 8001a08:	46bb      	mov	fp, r7
 8001a0a:	46b2      	mov	sl, r6
 8001a0c:	46a9      	mov	r9, r5
 8001a0e:	46a0      	mov	r8, r4
 8001a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	2203      	movs	r2, #3
 8001a16:	0109      	lsls	r1, r1, #4
 8001a18:	002b      	movs	r3, r5
 8001a1a:	468c      	mov	ip, r1
 8001a1c:	4316      	orrs	r6, r2
 8001a1e:	4642      	mov	r2, r8
 8001a20:	4463      	add	r3, ip
 8001a22:	407a      	eors	r2, r7
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	2e0a      	cmp	r6, #10
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dmul+0x11a>
 8001a2c:	e228      	b.n	8001e80 <__aeabi_dmul+0x56c>
 8001a2e:	2103      	movs	r1, #3
 8001a30:	2501      	movs	r5, #1
 8001a32:	40b5      	lsls	r5, r6
 8001a34:	46ac      	mov	ip, r5
 8001a36:	26a6      	movs	r6, #166	; 0xa6
 8001a38:	4663      	mov	r3, ip
 8001a3a:	00f6      	lsls	r6, r6, #3
 8001a3c:	4035      	ands	r5, r6
 8001a3e:	4233      	tst	r3, r6
 8001a40:	d10b      	bne.n	8001a5a <__aeabi_dmul+0x146>
 8001a42:	2690      	movs	r6, #144	; 0x90
 8001a44:	00b6      	lsls	r6, r6, #2
 8001a46:	4233      	tst	r3, r6
 8001a48:	d118      	bne.n	8001a7c <__aeabi_dmul+0x168>
 8001a4a:	3eb9      	subs	r6, #185	; 0xb9
 8001a4c:	3eff      	subs	r6, #255	; 0xff
 8001a4e:	421e      	tst	r6, r3
 8001a50:	d01d      	beq.n	8001a8e <__aeabi_dmul+0x17a>
 8001a52:	46a3      	mov	fp, r4
 8001a54:	4682      	mov	sl, r0
 8001a56:	9100      	str	r1, [sp, #0]
 8001a58:	e000      	b.n	8001a5c <__aeabi_dmul+0x148>
 8001a5a:	0017      	movs	r7, r2
 8001a5c:	9900      	ldr	r1, [sp, #0]
 8001a5e:	003a      	movs	r2, r7
 8001a60:	2902      	cmp	r1, #2
 8001a62:	d010      	beq.n	8001a86 <__aeabi_dmul+0x172>
 8001a64:	465c      	mov	r4, fp
 8001a66:	4650      	mov	r0, sl
 8001a68:	2903      	cmp	r1, #3
 8001a6a:	d1bf      	bne.n	80019ec <__aeabi_dmul+0xd8>
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	031b      	lsls	r3, r3, #12
 8001a70:	431c      	orrs	r4, r3
 8001a72:	0324      	lsls	r4, r4, #12
 8001a74:	0005      	movs	r5, r0
 8001a76:	4b7f      	ldr	r3, [pc, #508]	; (8001c74 <__aeabi_dmul+0x360>)
 8001a78:	0b24      	lsrs	r4, r4, #12
 8001a7a:	e7bd      	b.n	80019f8 <__aeabi_dmul+0xe4>
 8001a7c:	2480      	movs	r4, #128	; 0x80
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4b7c      	ldr	r3, [pc, #496]	; (8001c74 <__aeabi_dmul+0x360>)
 8001a82:	0324      	lsls	r4, r4, #12
 8001a84:	e7b8      	b.n	80019f8 <__aeabi_dmul+0xe4>
 8001a86:	2400      	movs	r4, #0
 8001a88:	2500      	movs	r5, #0
 8001a8a:	4b7a      	ldr	r3, [pc, #488]	; (8001c74 <__aeabi_dmul+0x360>)
 8001a8c:	e7b4      	b.n	80019f8 <__aeabi_dmul+0xe4>
 8001a8e:	4653      	mov	r3, sl
 8001a90:	041e      	lsls	r6, r3, #16
 8001a92:	0c36      	lsrs	r6, r6, #16
 8001a94:	0c1f      	lsrs	r7, r3, #16
 8001a96:	0033      	movs	r3, r6
 8001a98:	0c01      	lsrs	r1, r0, #16
 8001a9a:	0400      	lsls	r0, r0, #16
 8001a9c:	0c00      	lsrs	r0, r0, #16
 8001a9e:	4343      	muls	r3, r0
 8001aa0:	4698      	mov	r8, r3
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	437b      	muls	r3, r7
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	0033      	movs	r3, r6
 8001aaa:	434b      	muls	r3, r1
 8001aac:	469c      	mov	ip, r3
 8001aae:	4643      	mov	r3, r8
 8001ab0:	000d      	movs	r5, r1
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	469a      	mov	sl, r3
 8001ab6:	437d      	muls	r5, r7
 8001ab8:	44cc      	add	ip, r9
 8001aba:	44d4      	add	ip, sl
 8001abc:	9500      	str	r5, [sp, #0]
 8001abe:	45e1      	cmp	r9, ip
 8001ac0:	d904      	bls.n	8001acc <__aeabi_dmul+0x1b8>
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	025b      	lsls	r3, r3, #9
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	444d      	add	r5, r9
 8001aca:	9500      	str	r5, [sp, #0]
 8001acc:	4663      	mov	r3, ip
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	001d      	movs	r5, r3
 8001ad2:	4663      	mov	r3, ip
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	469c      	mov	ip, r3
 8001ad8:	4643      	mov	r3, r8
 8001ada:	041b      	lsls	r3, r3, #16
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	4698      	mov	r8, r3
 8001ae0:	4663      	mov	r3, ip
 8001ae2:	4443      	add	r3, r8
 8001ae4:	9303      	str	r3, [sp, #12]
 8001ae6:	0c23      	lsrs	r3, r4, #16
 8001ae8:	4698      	mov	r8, r3
 8001aea:	0033      	movs	r3, r6
 8001aec:	0424      	lsls	r4, r4, #16
 8001aee:	0c24      	lsrs	r4, r4, #16
 8001af0:	4363      	muls	r3, r4
 8001af2:	469c      	mov	ip, r3
 8001af4:	0023      	movs	r3, r4
 8001af6:	437b      	muls	r3, r7
 8001af8:	4699      	mov	r9, r3
 8001afa:	4643      	mov	r3, r8
 8001afc:	435e      	muls	r6, r3
 8001afe:	435f      	muls	r7, r3
 8001b00:	444e      	add	r6, r9
 8001b02:	4663      	mov	r3, ip
 8001b04:	46b2      	mov	sl, r6
 8001b06:	0c1e      	lsrs	r6, r3, #16
 8001b08:	4456      	add	r6, sl
 8001b0a:	45b1      	cmp	r9, r6
 8001b0c:	d903      	bls.n	8001b16 <__aeabi_dmul+0x202>
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	4699      	mov	r9, r3
 8001b14:	444f      	add	r7, r9
 8001b16:	0c33      	lsrs	r3, r6, #16
 8001b18:	4699      	mov	r9, r3
 8001b1a:	003b      	movs	r3, r7
 8001b1c:	444b      	add	r3, r9
 8001b1e:	9305      	str	r3, [sp, #20]
 8001b20:	4663      	mov	r3, ip
 8001b22:	46ac      	mov	ip, r5
 8001b24:	041f      	lsls	r7, r3, #16
 8001b26:	0c3f      	lsrs	r7, r7, #16
 8001b28:	0436      	lsls	r6, r6, #16
 8001b2a:	19f6      	adds	r6, r6, r7
 8001b2c:	44b4      	add	ip, r6
 8001b2e:	4663      	mov	r3, ip
 8001b30:	9304      	str	r3, [sp, #16]
 8001b32:	465b      	mov	r3, fp
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	469c      	mov	ip, r3
 8001b38:	465b      	mov	r3, fp
 8001b3a:	041f      	lsls	r7, r3, #16
 8001b3c:	0c3f      	lsrs	r7, r7, #16
 8001b3e:	003b      	movs	r3, r7
 8001b40:	4343      	muls	r3, r0
 8001b42:	4699      	mov	r9, r3
 8001b44:	4663      	mov	r3, ip
 8001b46:	4343      	muls	r3, r0
 8001b48:	469a      	mov	sl, r3
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	4660      	mov	r0, ip
 8001b4e:	0c1b      	lsrs	r3, r3, #16
 8001b50:	469b      	mov	fp, r3
 8001b52:	4348      	muls	r0, r1
 8001b54:	4379      	muls	r1, r7
 8001b56:	4451      	add	r1, sl
 8001b58:	4459      	add	r1, fp
 8001b5a:	458a      	cmp	sl, r1
 8001b5c:	d903      	bls.n	8001b66 <__aeabi_dmul+0x252>
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	469a      	mov	sl, r3
 8001b64:	4450      	add	r0, sl
 8001b66:	0c0b      	lsrs	r3, r1, #16
 8001b68:	469a      	mov	sl, r3
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	4699      	mov	r9, r3
 8001b72:	003b      	movs	r3, r7
 8001b74:	4363      	muls	r3, r4
 8001b76:	0409      	lsls	r1, r1, #16
 8001b78:	4645      	mov	r5, r8
 8001b7a:	4449      	add	r1, r9
 8001b7c:	4699      	mov	r9, r3
 8001b7e:	4663      	mov	r3, ip
 8001b80:	435c      	muls	r4, r3
 8001b82:	436b      	muls	r3, r5
 8001b84:	469c      	mov	ip, r3
 8001b86:	464b      	mov	r3, r9
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	436f      	muls	r7, r5
 8001b8e:	193f      	adds	r7, r7, r4
 8001b90:	4447      	add	r7, r8
 8001b92:	4450      	add	r0, sl
 8001b94:	42bc      	cmp	r4, r7
 8001b96:	d903      	bls.n	8001ba0 <__aeabi_dmul+0x28c>
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	4698      	mov	r8, r3
 8001b9e:	44c4      	add	ip, r8
 8001ba0:	9b04      	ldr	r3, [sp, #16]
 8001ba2:	9d00      	ldr	r5, [sp, #0]
 8001ba4:	4698      	mov	r8, r3
 8001ba6:	4445      	add	r5, r8
 8001ba8:	42b5      	cmp	r5, r6
 8001baa:	41b6      	sbcs	r6, r6
 8001bac:	4273      	negs	r3, r6
 8001bae:	4698      	mov	r8, r3
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	041e      	lsls	r6, r3, #16
 8001bb4:	9b05      	ldr	r3, [sp, #20]
 8001bb6:	043c      	lsls	r4, r7, #16
 8001bb8:	4699      	mov	r9, r3
 8001bba:	0c36      	lsrs	r6, r6, #16
 8001bbc:	19a4      	adds	r4, r4, r6
 8001bbe:	444c      	add	r4, r9
 8001bc0:	46a1      	mov	r9, r4
 8001bc2:	4683      	mov	fp, r0
 8001bc4:	186e      	adds	r6, r5, r1
 8001bc6:	44c1      	add	r9, r8
 8001bc8:	428e      	cmp	r6, r1
 8001bca:	4189      	sbcs	r1, r1
 8001bcc:	44cb      	add	fp, r9
 8001bce:	465d      	mov	r5, fp
 8001bd0:	4249      	negs	r1, r1
 8001bd2:	186d      	adds	r5, r5, r1
 8001bd4:	429c      	cmp	r4, r3
 8001bd6:	41a4      	sbcs	r4, r4
 8001bd8:	45c1      	cmp	r9, r8
 8001bda:	419b      	sbcs	r3, r3
 8001bdc:	4583      	cmp	fp, r0
 8001bde:	4180      	sbcs	r0, r0
 8001be0:	428d      	cmp	r5, r1
 8001be2:	4189      	sbcs	r1, r1
 8001be4:	425b      	negs	r3, r3
 8001be6:	4264      	negs	r4, r4
 8001be8:	431c      	orrs	r4, r3
 8001bea:	4240      	negs	r0, r0
 8001bec:	9b03      	ldr	r3, [sp, #12]
 8001bee:	4249      	negs	r1, r1
 8001bf0:	4301      	orrs	r1, r0
 8001bf2:	0270      	lsls	r0, r6, #9
 8001bf4:	0c3f      	lsrs	r7, r7, #16
 8001bf6:	4318      	orrs	r0, r3
 8001bf8:	19e4      	adds	r4, r4, r7
 8001bfa:	1e47      	subs	r7, r0, #1
 8001bfc:	41b8      	sbcs	r0, r7
 8001bfe:	1864      	adds	r4, r4, r1
 8001c00:	4464      	add	r4, ip
 8001c02:	0df6      	lsrs	r6, r6, #23
 8001c04:	0261      	lsls	r1, r4, #9
 8001c06:	4330      	orrs	r0, r6
 8001c08:	0dec      	lsrs	r4, r5, #23
 8001c0a:	026e      	lsls	r6, r5, #9
 8001c0c:	430c      	orrs	r4, r1
 8001c0e:	4330      	orrs	r0, r6
 8001c10:	01c9      	lsls	r1, r1, #7
 8001c12:	d400      	bmi.n	8001c16 <__aeabi_dmul+0x302>
 8001c14:	e0f1      	b.n	8001dfa <__aeabi_dmul+0x4e6>
 8001c16:	2101      	movs	r1, #1
 8001c18:	0843      	lsrs	r3, r0, #1
 8001c1a:	4001      	ands	r1, r0
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	07e0      	lsls	r0, r4, #31
 8001c20:	4318      	orrs	r0, r3
 8001c22:	0864      	lsrs	r4, r4, #1
 8001c24:	4915      	ldr	r1, [pc, #84]	; (8001c7c <__aeabi_dmul+0x368>)
 8001c26:	9b02      	ldr	r3, [sp, #8]
 8001c28:	468c      	mov	ip, r1
 8001c2a:	4463      	add	r3, ip
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	dc00      	bgt.n	8001c32 <__aeabi_dmul+0x31e>
 8001c30:	e097      	b.n	8001d62 <__aeabi_dmul+0x44e>
 8001c32:	0741      	lsls	r1, r0, #29
 8001c34:	d009      	beq.n	8001c4a <__aeabi_dmul+0x336>
 8001c36:	210f      	movs	r1, #15
 8001c38:	4001      	ands	r1, r0
 8001c3a:	2904      	cmp	r1, #4
 8001c3c:	d005      	beq.n	8001c4a <__aeabi_dmul+0x336>
 8001c3e:	1d01      	adds	r1, r0, #4
 8001c40:	4281      	cmp	r1, r0
 8001c42:	4180      	sbcs	r0, r0
 8001c44:	4240      	negs	r0, r0
 8001c46:	1824      	adds	r4, r4, r0
 8001c48:	0008      	movs	r0, r1
 8001c4a:	01e1      	lsls	r1, r4, #7
 8001c4c:	d506      	bpl.n	8001c5c <__aeabi_dmul+0x348>
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	00c9      	lsls	r1, r1, #3
 8001c52:	468c      	mov	ip, r1
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <__aeabi_dmul+0x36c>)
 8001c56:	401c      	ands	r4, r3
 8001c58:	9b02      	ldr	r3, [sp, #8]
 8001c5a:	4463      	add	r3, ip
 8001c5c:	4909      	ldr	r1, [pc, #36]	; (8001c84 <__aeabi_dmul+0x370>)
 8001c5e:	428b      	cmp	r3, r1
 8001c60:	dd00      	ble.n	8001c64 <__aeabi_dmul+0x350>
 8001c62:	e710      	b.n	8001a86 <__aeabi_dmul+0x172>
 8001c64:	0761      	lsls	r1, r4, #29
 8001c66:	08c5      	lsrs	r5, r0, #3
 8001c68:	0264      	lsls	r4, r4, #9
 8001c6a:	055b      	lsls	r3, r3, #21
 8001c6c:	430d      	orrs	r5, r1
 8001c6e:	0b24      	lsrs	r4, r4, #12
 8001c70:	0d5b      	lsrs	r3, r3, #21
 8001c72:	e6c1      	b.n	80019f8 <__aeabi_dmul+0xe4>
 8001c74:	000007ff 	.word	0x000007ff
 8001c78:	fffffc01 	.word	0xfffffc01
 8001c7c:	000003ff 	.word	0x000003ff
 8001c80:	feffffff 	.word	0xfeffffff
 8001c84:	000007fe 	.word	0x000007fe
 8001c88:	464b      	mov	r3, r9
 8001c8a:	4323      	orrs	r3, r4
 8001c8c:	d059      	beq.n	8001d42 <__aeabi_dmul+0x42e>
 8001c8e:	2c00      	cmp	r4, #0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dmul+0x380>
 8001c92:	e0a3      	b.n	8001ddc <__aeabi_dmul+0x4c8>
 8001c94:	0020      	movs	r0, r4
 8001c96:	f000 fdb1 	bl	80027fc <__clzsi2>
 8001c9a:	0001      	movs	r1, r0
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	390b      	subs	r1, #11
 8001ca0:	221d      	movs	r2, #29
 8001ca2:	1a52      	subs	r2, r2, r1
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	40d1      	lsrs	r1, r2
 8001caa:	464a      	mov	r2, r9
 8001cac:	3808      	subs	r0, #8
 8001cae:	4082      	lsls	r2, r0
 8001cb0:	4084      	lsls	r4, r0
 8001cb2:	0010      	movs	r0, r2
 8001cb4:	430c      	orrs	r4, r1
 8001cb6:	4a74      	ldr	r2, [pc, #464]	; (8001e88 <__aeabi_dmul+0x574>)
 8001cb8:	1aeb      	subs	r3, r5, r3
 8001cba:	4694      	mov	ip, r2
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	4463      	add	r3, ip
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	9b01      	ldr	r3, [sp, #4]
 8001cc4:	407a      	eors	r2, r7
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	2100      	movs	r1, #0
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	2e0a      	cmp	r6, #10
 8001cd0:	dd00      	ble.n	8001cd4 <__aeabi_dmul+0x3c0>
 8001cd2:	e667      	b.n	80019a4 <__aeabi_dmul+0x90>
 8001cd4:	e683      	b.n	80019de <__aeabi_dmul+0xca>
 8001cd6:	465b      	mov	r3, fp
 8001cd8:	4303      	orrs	r3, r0
 8001cda:	469a      	mov	sl, r3
 8001cdc:	d02a      	beq.n	8001d34 <__aeabi_dmul+0x420>
 8001cde:	465b      	mov	r3, fp
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d06d      	beq.n	8001dc0 <__aeabi_dmul+0x4ac>
 8001ce4:	4658      	mov	r0, fp
 8001ce6:	f000 fd89 	bl	80027fc <__clzsi2>
 8001cea:	0001      	movs	r1, r0
 8001cec:	0003      	movs	r3, r0
 8001cee:	390b      	subs	r1, #11
 8001cf0:	221d      	movs	r2, #29
 8001cf2:	1a52      	subs	r2, r2, r1
 8001cf4:	0021      	movs	r1, r4
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	465d      	mov	r5, fp
 8001cfa:	40d1      	lsrs	r1, r2
 8001cfc:	3808      	subs	r0, #8
 8001cfe:	4085      	lsls	r5, r0
 8001d00:	000a      	movs	r2, r1
 8001d02:	4084      	lsls	r4, r0
 8001d04:	432a      	orrs	r2, r5
 8001d06:	4693      	mov	fp, r2
 8001d08:	46a2      	mov	sl, r4
 8001d0a:	4d5f      	ldr	r5, [pc, #380]	; (8001e88 <__aeabi_dmul+0x574>)
 8001d0c:	2600      	movs	r6, #0
 8001d0e:	1aed      	subs	r5, r5, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	e625      	b.n	8001962 <__aeabi_dmul+0x4e>
 8001d16:	465b      	mov	r3, fp
 8001d18:	4303      	orrs	r3, r0
 8001d1a:	469a      	mov	sl, r3
 8001d1c:	d105      	bne.n	8001d2a <__aeabi_dmul+0x416>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	469b      	mov	fp, r3
 8001d22:	3302      	adds	r3, #2
 8001d24:	2608      	movs	r6, #8
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	e61b      	b.n	8001962 <__aeabi_dmul+0x4e>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	4682      	mov	sl, r0
 8001d2e:	260c      	movs	r6, #12
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	e616      	b.n	8001962 <__aeabi_dmul+0x4e>
 8001d34:	2300      	movs	r3, #0
 8001d36:	469b      	mov	fp, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	2604      	movs	r6, #4
 8001d3c:	2500      	movs	r5, #0
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	e60f      	b.n	8001962 <__aeabi_dmul+0x4e>
 8001d42:	4642      	mov	r2, r8
 8001d44:	3301      	adds	r3, #1
 8001d46:	9501      	str	r5, [sp, #4]
 8001d48:	431e      	orrs	r6, r3
 8001d4a:	9b01      	ldr	r3, [sp, #4]
 8001d4c:	407a      	eors	r2, r7
 8001d4e:	3301      	adds	r3, #1
 8001d50:	2400      	movs	r4, #0
 8001d52:	2000      	movs	r0, #0
 8001d54:	2101      	movs	r1, #1
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	9302      	str	r3, [sp, #8]
 8001d5a:	2e0a      	cmp	r6, #10
 8001d5c:	dd00      	ble.n	8001d60 <__aeabi_dmul+0x44c>
 8001d5e:	e621      	b.n	80019a4 <__aeabi_dmul+0x90>
 8001d60:	e63d      	b.n	80019de <__aeabi_dmul+0xca>
 8001d62:	2101      	movs	r1, #1
 8001d64:	1ac9      	subs	r1, r1, r3
 8001d66:	2938      	cmp	r1, #56	; 0x38
 8001d68:	dd00      	ble.n	8001d6c <__aeabi_dmul+0x458>
 8001d6a:	e642      	b.n	80019f2 <__aeabi_dmul+0xde>
 8001d6c:	291f      	cmp	r1, #31
 8001d6e:	dd47      	ble.n	8001e00 <__aeabi_dmul+0x4ec>
 8001d70:	261f      	movs	r6, #31
 8001d72:	0025      	movs	r5, r4
 8001d74:	4276      	negs	r6, r6
 8001d76:	1af3      	subs	r3, r6, r3
 8001d78:	40dd      	lsrs	r5, r3
 8001d7a:	002b      	movs	r3, r5
 8001d7c:	2920      	cmp	r1, #32
 8001d7e:	d005      	beq.n	8001d8c <__aeabi_dmul+0x478>
 8001d80:	4942      	ldr	r1, [pc, #264]	; (8001e8c <__aeabi_dmul+0x578>)
 8001d82:	9d02      	ldr	r5, [sp, #8]
 8001d84:	468c      	mov	ip, r1
 8001d86:	4465      	add	r5, ip
 8001d88:	40ac      	lsls	r4, r5
 8001d8a:	4320      	orrs	r0, r4
 8001d8c:	1e41      	subs	r1, r0, #1
 8001d8e:	4188      	sbcs	r0, r1
 8001d90:	4318      	orrs	r0, r3
 8001d92:	2307      	movs	r3, #7
 8001d94:	001d      	movs	r5, r3
 8001d96:	2400      	movs	r4, #0
 8001d98:	4005      	ands	r5, r0
 8001d9a:	4203      	tst	r3, r0
 8001d9c:	d04a      	beq.n	8001e34 <__aeabi_dmul+0x520>
 8001d9e:	230f      	movs	r3, #15
 8001da0:	2400      	movs	r4, #0
 8001da2:	4003      	ands	r3, r0
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d042      	beq.n	8001e2e <__aeabi_dmul+0x51a>
 8001da8:	1d03      	adds	r3, r0, #4
 8001daa:	4283      	cmp	r3, r0
 8001dac:	4180      	sbcs	r0, r0
 8001dae:	4240      	negs	r0, r0
 8001db0:	1824      	adds	r4, r4, r0
 8001db2:	0018      	movs	r0, r3
 8001db4:	0223      	lsls	r3, r4, #8
 8001db6:	d53a      	bpl.n	8001e2e <__aeabi_dmul+0x51a>
 8001db8:	2301      	movs	r3, #1
 8001dba:	2400      	movs	r4, #0
 8001dbc:	2500      	movs	r5, #0
 8001dbe:	e61b      	b.n	80019f8 <__aeabi_dmul+0xe4>
 8001dc0:	f000 fd1c 	bl	80027fc <__clzsi2>
 8001dc4:	0001      	movs	r1, r0
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	3115      	adds	r1, #21
 8001dca:	3320      	adds	r3, #32
 8001dcc:	291c      	cmp	r1, #28
 8001dce:	dd8f      	ble.n	8001cf0 <__aeabi_dmul+0x3dc>
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4084      	lsls	r4, r0
 8001dd6:	4692      	mov	sl, r2
 8001dd8:	46a3      	mov	fp, r4
 8001dda:	e796      	b.n	8001d0a <__aeabi_dmul+0x3f6>
 8001ddc:	f000 fd0e 	bl	80027fc <__clzsi2>
 8001de0:	0001      	movs	r1, r0
 8001de2:	0003      	movs	r3, r0
 8001de4:	3115      	adds	r1, #21
 8001de6:	3320      	adds	r3, #32
 8001de8:	291c      	cmp	r1, #28
 8001dea:	dc00      	bgt.n	8001dee <__aeabi_dmul+0x4da>
 8001dec:	e758      	b.n	8001ca0 <__aeabi_dmul+0x38c>
 8001dee:	0002      	movs	r2, r0
 8001df0:	464c      	mov	r4, r9
 8001df2:	3a08      	subs	r2, #8
 8001df4:	2000      	movs	r0, #0
 8001df6:	4094      	lsls	r4, r2
 8001df8:	e75d      	b.n	8001cb6 <__aeabi_dmul+0x3a2>
 8001dfa:	9b01      	ldr	r3, [sp, #4]
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	e711      	b.n	8001c24 <__aeabi_dmul+0x310>
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <__aeabi_dmul+0x57c>)
 8001e02:	0026      	movs	r6, r4
 8001e04:	469c      	mov	ip, r3
 8001e06:	0003      	movs	r3, r0
 8001e08:	9d02      	ldr	r5, [sp, #8]
 8001e0a:	40cb      	lsrs	r3, r1
 8001e0c:	4465      	add	r5, ip
 8001e0e:	40ae      	lsls	r6, r5
 8001e10:	431e      	orrs	r6, r3
 8001e12:	0003      	movs	r3, r0
 8001e14:	40ab      	lsls	r3, r5
 8001e16:	1e58      	subs	r0, r3, #1
 8001e18:	4183      	sbcs	r3, r0
 8001e1a:	0030      	movs	r0, r6
 8001e1c:	4318      	orrs	r0, r3
 8001e1e:	40cc      	lsrs	r4, r1
 8001e20:	0743      	lsls	r3, r0, #29
 8001e22:	d0c7      	beq.n	8001db4 <__aeabi_dmul+0x4a0>
 8001e24:	230f      	movs	r3, #15
 8001e26:	4003      	ands	r3, r0
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d1bd      	bne.n	8001da8 <__aeabi_dmul+0x494>
 8001e2c:	e7c2      	b.n	8001db4 <__aeabi_dmul+0x4a0>
 8001e2e:	0765      	lsls	r5, r4, #29
 8001e30:	0264      	lsls	r4, r4, #9
 8001e32:	0b24      	lsrs	r4, r4, #12
 8001e34:	08c0      	lsrs	r0, r0, #3
 8001e36:	2300      	movs	r3, #0
 8001e38:	4305      	orrs	r5, r0
 8001e3a:	e5dd      	b.n	80019f8 <__aeabi_dmul+0xe4>
 8001e3c:	2500      	movs	r5, #0
 8001e3e:	2302      	movs	r3, #2
 8001e40:	2e0f      	cmp	r6, #15
 8001e42:	d10c      	bne.n	8001e5e <__aeabi_dmul+0x54a>
 8001e44:	2480      	movs	r4, #128	; 0x80
 8001e46:	465b      	mov	r3, fp
 8001e48:	0324      	lsls	r4, r4, #12
 8001e4a:	4223      	tst	r3, r4
 8001e4c:	d00e      	beq.n	8001e6c <__aeabi_dmul+0x558>
 8001e4e:	4221      	tst	r1, r4
 8001e50:	d10c      	bne.n	8001e6c <__aeabi_dmul+0x558>
 8001e52:	430c      	orrs	r4, r1
 8001e54:	0324      	lsls	r4, r4, #12
 8001e56:	003a      	movs	r2, r7
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <__aeabi_dmul+0x580>)
 8001e5a:	0b24      	lsrs	r4, r4, #12
 8001e5c:	e5cc      	b.n	80019f8 <__aeabi_dmul+0xe4>
 8001e5e:	2e0b      	cmp	r6, #11
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dmul+0x550>
 8001e62:	e5a2      	b.n	80019aa <__aeabi_dmul+0x96>
 8001e64:	468b      	mov	fp, r1
 8001e66:	46aa      	mov	sl, r5
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	e5f7      	b.n	8001a5c <__aeabi_dmul+0x148>
 8001e6c:	2480      	movs	r4, #128	; 0x80
 8001e6e:	465b      	mov	r3, fp
 8001e70:	0324      	lsls	r4, r4, #12
 8001e72:	431c      	orrs	r4, r3
 8001e74:	0324      	lsls	r4, r4, #12
 8001e76:	4642      	mov	r2, r8
 8001e78:	4655      	mov	r5, sl
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <__aeabi_dmul+0x580>)
 8001e7c:	0b24      	lsrs	r4, r4, #12
 8001e7e:	e5bb      	b.n	80019f8 <__aeabi_dmul+0xe4>
 8001e80:	464d      	mov	r5, r9
 8001e82:	0021      	movs	r1, r4
 8001e84:	2303      	movs	r3, #3
 8001e86:	e7db      	b.n	8001e40 <__aeabi_dmul+0x52c>
 8001e88:	fffffc0d 	.word	0xfffffc0d
 8001e8c:	0000043e 	.word	0x0000043e
 8001e90:	0000041e 	.word	0x0000041e
 8001e94:	000007ff 	.word	0x000007ff

08001e98 <__aeabi_dsub>:
 8001e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9a:	4657      	mov	r7, sl
 8001e9c:	464e      	mov	r6, r9
 8001e9e:	4645      	mov	r5, r8
 8001ea0:	46de      	mov	lr, fp
 8001ea2:	b5e0      	push	{r5, r6, r7, lr}
 8001ea4:	000d      	movs	r5, r1
 8001ea6:	0004      	movs	r4, r0
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	0010      	movs	r0, r2
 8001eac:	032b      	lsls	r3, r5, #12
 8001eae:	0a5b      	lsrs	r3, r3, #9
 8001eb0:	0f62      	lsrs	r2, r4, #29
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	00e3      	lsls	r3, r4, #3
 8001eb6:	030c      	lsls	r4, r1, #12
 8001eb8:	0a64      	lsrs	r4, r4, #9
 8001eba:	0f47      	lsrs	r7, r0, #29
 8001ebc:	4327      	orrs	r7, r4
 8001ebe:	4cd0      	ldr	r4, [pc, #832]	; (8002200 <__aeabi_dsub+0x368>)
 8001ec0:	006e      	lsls	r6, r5, #1
 8001ec2:	4691      	mov	r9, r2
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	004a      	lsls	r2, r1, #1
 8001ec8:	00c0      	lsls	r0, r0, #3
 8001eca:	4698      	mov	r8, r3
 8001ecc:	46a2      	mov	sl, r4
 8001ece:	0d76      	lsrs	r6, r6, #21
 8001ed0:	0fed      	lsrs	r5, r5, #31
 8001ed2:	0d52      	lsrs	r2, r2, #21
 8001ed4:	0fc9      	lsrs	r1, r1, #31
 8001ed6:	9001      	str	r0, [sp, #4]
 8001ed8:	42a2      	cmp	r2, r4
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x46>
 8001edc:	e0b9      	b.n	8002052 <__aeabi_dsub+0x1ba>
 8001ede:	2401      	movs	r4, #1
 8001ee0:	4061      	eors	r1, r4
 8001ee2:	468b      	mov	fp, r1
 8001ee4:	428d      	cmp	r5, r1
 8001ee6:	d100      	bne.n	8001eea <__aeabi_dsub+0x52>
 8001ee8:	e08d      	b.n	8002006 <__aeabi_dsub+0x16e>
 8001eea:	1ab4      	subs	r4, r6, r2
 8001eec:	46a4      	mov	ip, r4
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	dc00      	bgt.n	8001ef4 <__aeabi_dsub+0x5c>
 8001ef2:	e0b7      	b.n	8002064 <__aeabi_dsub+0x1cc>
 8001ef4:	2a00      	cmp	r2, #0
 8001ef6:	d100      	bne.n	8001efa <__aeabi_dsub+0x62>
 8001ef8:	e0cb      	b.n	8002092 <__aeabi_dsub+0x1fa>
 8001efa:	4ac1      	ldr	r2, [pc, #772]	; (8002200 <__aeabi_dsub+0x368>)
 8001efc:	4296      	cmp	r6, r2
 8001efe:	d100      	bne.n	8001f02 <__aeabi_dsub+0x6a>
 8001f00:	e186      	b.n	8002210 <__aeabi_dsub+0x378>
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	0412      	lsls	r2, r2, #16
 8001f06:	4317      	orrs	r7, r2
 8001f08:	4662      	mov	r2, ip
 8001f0a:	2a38      	cmp	r2, #56	; 0x38
 8001f0c:	dd00      	ble.n	8001f10 <__aeabi_dsub+0x78>
 8001f0e:	e1a4      	b.n	800225a <__aeabi_dsub+0x3c2>
 8001f10:	2a1f      	cmp	r2, #31
 8001f12:	dd00      	ble.n	8001f16 <__aeabi_dsub+0x7e>
 8001f14:	e21d      	b.n	8002352 <__aeabi_dsub+0x4ba>
 8001f16:	4661      	mov	r1, ip
 8001f18:	2220      	movs	r2, #32
 8001f1a:	003c      	movs	r4, r7
 8001f1c:	1a52      	subs	r2, r2, r1
 8001f1e:	0001      	movs	r1, r0
 8001f20:	4090      	lsls	r0, r2
 8001f22:	4094      	lsls	r4, r2
 8001f24:	1e42      	subs	r2, r0, #1
 8001f26:	4190      	sbcs	r0, r2
 8001f28:	4662      	mov	r2, ip
 8001f2a:	46a0      	mov	r8, r4
 8001f2c:	4664      	mov	r4, ip
 8001f2e:	40d7      	lsrs	r7, r2
 8001f30:	464a      	mov	r2, r9
 8001f32:	40e1      	lsrs	r1, r4
 8001f34:	4644      	mov	r4, r8
 8001f36:	1bd2      	subs	r2, r2, r7
 8001f38:	4691      	mov	r9, r2
 8001f3a:	430c      	orrs	r4, r1
 8001f3c:	4304      	orrs	r4, r0
 8001f3e:	1b1c      	subs	r4, r3, r4
 8001f40:	42a3      	cmp	r3, r4
 8001f42:	4192      	sbcs	r2, r2
 8001f44:	464b      	mov	r3, r9
 8001f46:	4252      	negs	r2, r2
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	469a      	mov	sl, r3
 8001f4c:	4653      	mov	r3, sl
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0xbc>
 8001f52:	e12b      	b.n	80021ac <__aeabi_dsub+0x314>
 8001f54:	4653      	mov	r3, sl
 8001f56:	025a      	lsls	r2, r3, #9
 8001f58:	0a53      	lsrs	r3, r2, #9
 8001f5a:	469a      	mov	sl, r3
 8001f5c:	4653      	mov	r3, sl
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0xcc>
 8001f62:	e166      	b.n	8002232 <__aeabi_dsub+0x39a>
 8001f64:	4650      	mov	r0, sl
 8001f66:	f000 fc49 	bl	80027fc <__clzsi2>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	3b08      	subs	r3, #8
 8001f6e:	2220      	movs	r2, #32
 8001f70:	0020      	movs	r0, r4
 8001f72:	1ad2      	subs	r2, r2, r3
 8001f74:	4651      	mov	r1, sl
 8001f76:	40d0      	lsrs	r0, r2
 8001f78:	4099      	lsls	r1, r3
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	409c      	lsls	r4, r3
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	429e      	cmp	r6, r3
 8001f82:	dd00      	ble.n	8001f86 <__aeabi_dsub+0xee>
 8001f84:	e164      	b.n	8002250 <__aeabi_dsub+0x3b8>
 8001f86:	1b9b      	subs	r3, r3, r6
 8001f88:	1c59      	adds	r1, r3, #1
 8001f8a:	291f      	cmp	r1, #31
 8001f8c:	dd00      	ble.n	8001f90 <__aeabi_dsub+0xf8>
 8001f8e:	e0fe      	b.n	800218e <__aeabi_dsub+0x2f6>
 8001f90:	2320      	movs	r3, #32
 8001f92:	0010      	movs	r0, r2
 8001f94:	0026      	movs	r6, r4
 8001f96:	1a5b      	subs	r3, r3, r1
 8001f98:	409c      	lsls	r4, r3
 8001f9a:	4098      	lsls	r0, r3
 8001f9c:	40ce      	lsrs	r6, r1
 8001f9e:	40ca      	lsrs	r2, r1
 8001fa0:	1e63      	subs	r3, r4, #1
 8001fa2:	419c      	sbcs	r4, r3
 8001fa4:	4330      	orrs	r0, r6
 8001fa6:	4692      	mov	sl, r2
 8001fa8:	2600      	movs	r6, #0
 8001faa:	4304      	orrs	r4, r0
 8001fac:	0763      	lsls	r3, r4, #29
 8001fae:	d009      	beq.n	8001fc4 <__aeabi_dsub+0x12c>
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	4023      	ands	r3, r4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d005      	beq.n	8001fc4 <__aeabi_dsub+0x12c>
 8001fb8:	1d23      	adds	r3, r4, #4
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	41a4      	sbcs	r4, r4
 8001fbe:	4264      	negs	r4, r4
 8001fc0:	44a2      	add	sl, r4
 8001fc2:	001c      	movs	r4, r3
 8001fc4:	4653      	mov	r3, sl
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	d400      	bmi.n	8001fcc <__aeabi_dsub+0x134>
 8001fca:	e0f2      	b.n	80021b2 <__aeabi_dsub+0x31a>
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <__aeabi_dsub+0x368>)
 8001fce:	3601      	adds	r6, #1
 8001fd0:	429e      	cmp	r6, r3
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_dsub+0x13e>
 8001fd4:	e10f      	b.n	80021f6 <__aeabi_dsub+0x35e>
 8001fd6:	4653      	mov	r3, sl
 8001fd8:	498a      	ldr	r1, [pc, #552]	; (8002204 <__aeabi_dsub+0x36c>)
 8001fda:	08e4      	lsrs	r4, r4, #3
 8001fdc:	400b      	ands	r3, r1
 8001fde:	0019      	movs	r1, r3
 8001fe0:	075b      	lsls	r3, r3, #29
 8001fe2:	4323      	orrs	r3, r4
 8001fe4:	0572      	lsls	r2, r6, #21
 8001fe6:	024c      	lsls	r4, r1, #9
 8001fe8:	0b24      	lsrs	r4, r4, #12
 8001fea:	0d52      	lsrs	r2, r2, #21
 8001fec:	0512      	lsls	r2, r2, #20
 8001fee:	4322      	orrs	r2, r4
 8001ff0:	07ed      	lsls	r5, r5, #31
 8001ff2:	432a      	orrs	r2, r5
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	0011      	movs	r1, r2
 8001ff8:	b003      	add	sp, #12
 8001ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffc:	46bb      	mov	fp, r7
 8001ffe:	46b2      	mov	sl, r6
 8002000:	46a9      	mov	r9, r5
 8002002:	46a0      	mov	r8, r4
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002006:	1ab4      	subs	r4, r6, r2
 8002008:	46a4      	mov	ip, r4
 800200a:	2c00      	cmp	r4, #0
 800200c:	dd59      	ble.n	80020c2 <__aeabi_dsub+0x22a>
 800200e:	2a00      	cmp	r2, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x17c>
 8002012:	e0b0      	b.n	8002176 <__aeabi_dsub+0x2de>
 8002014:	4556      	cmp	r6, sl
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x182>
 8002018:	e0fa      	b.n	8002210 <__aeabi_dsub+0x378>
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	0412      	lsls	r2, r2, #16
 800201e:	4317      	orrs	r7, r2
 8002020:	4662      	mov	r2, ip
 8002022:	2a38      	cmp	r2, #56	; 0x38
 8002024:	dd00      	ble.n	8002028 <__aeabi_dsub+0x190>
 8002026:	e0d4      	b.n	80021d2 <__aeabi_dsub+0x33a>
 8002028:	2a1f      	cmp	r2, #31
 800202a:	dc00      	bgt.n	800202e <__aeabi_dsub+0x196>
 800202c:	e1c0      	b.n	80023b0 <__aeabi_dsub+0x518>
 800202e:	0039      	movs	r1, r7
 8002030:	3a20      	subs	r2, #32
 8002032:	40d1      	lsrs	r1, r2
 8002034:	4662      	mov	r2, ip
 8002036:	2a20      	cmp	r2, #32
 8002038:	d006      	beq.n	8002048 <__aeabi_dsub+0x1b0>
 800203a:	4664      	mov	r4, ip
 800203c:	2240      	movs	r2, #64	; 0x40
 800203e:	1b12      	subs	r2, r2, r4
 8002040:	003c      	movs	r4, r7
 8002042:	4094      	lsls	r4, r2
 8002044:	4304      	orrs	r4, r0
 8002046:	9401      	str	r4, [sp, #4]
 8002048:	9c01      	ldr	r4, [sp, #4]
 800204a:	1e62      	subs	r2, r4, #1
 800204c:	4194      	sbcs	r4, r2
 800204e:	430c      	orrs	r4, r1
 8002050:	e0c3      	b.n	80021da <__aeabi_dsub+0x342>
 8002052:	003c      	movs	r4, r7
 8002054:	4304      	orrs	r4, r0
 8002056:	d02b      	beq.n	80020b0 <__aeabi_dsub+0x218>
 8002058:	468b      	mov	fp, r1
 800205a:	428d      	cmp	r5, r1
 800205c:	d02e      	beq.n	80020bc <__aeabi_dsub+0x224>
 800205e:	4c6a      	ldr	r4, [pc, #424]	; (8002208 <__aeabi_dsub+0x370>)
 8002060:	46a4      	mov	ip, r4
 8002062:	44b4      	add	ip, r6
 8002064:	4664      	mov	r4, ip
 8002066:	2c00      	cmp	r4, #0
 8002068:	d05f      	beq.n	800212a <__aeabi_dsub+0x292>
 800206a:	1b94      	subs	r4, r2, r6
 800206c:	46a4      	mov	ip, r4
 800206e:	2e00      	cmp	r6, #0
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x1dc>
 8002072:	e120      	b.n	80022b6 <__aeabi_dsub+0x41e>
 8002074:	464c      	mov	r4, r9
 8002076:	431c      	orrs	r4, r3
 8002078:	d100      	bne.n	800207c <__aeabi_dsub+0x1e4>
 800207a:	e1c7      	b.n	800240c <__aeabi_dsub+0x574>
 800207c:	4661      	mov	r1, ip
 800207e:	1e4c      	subs	r4, r1, #1
 8002080:	2901      	cmp	r1, #1
 8002082:	d100      	bne.n	8002086 <__aeabi_dsub+0x1ee>
 8002084:	e223      	b.n	80024ce <__aeabi_dsub+0x636>
 8002086:	4d5e      	ldr	r5, [pc, #376]	; (8002200 <__aeabi_dsub+0x368>)
 8002088:	45ac      	cmp	ip, r5
 800208a:	d100      	bne.n	800208e <__aeabi_dsub+0x1f6>
 800208c:	e1d8      	b.n	8002440 <__aeabi_dsub+0x5a8>
 800208e:	46a4      	mov	ip, r4
 8002090:	e11a      	b.n	80022c8 <__aeabi_dsub+0x430>
 8002092:	003a      	movs	r2, r7
 8002094:	4302      	orrs	r2, r0
 8002096:	d100      	bne.n	800209a <__aeabi_dsub+0x202>
 8002098:	e0e4      	b.n	8002264 <__aeabi_dsub+0x3cc>
 800209a:	0022      	movs	r2, r4
 800209c:	3a01      	subs	r2, #1
 800209e:	2c01      	cmp	r4, #1
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x20c>
 80020a2:	e1c3      	b.n	800242c <__aeabi_dsub+0x594>
 80020a4:	4956      	ldr	r1, [pc, #344]	; (8002200 <__aeabi_dsub+0x368>)
 80020a6:	428c      	cmp	r4, r1
 80020a8:	d100      	bne.n	80020ac <__aeabi_dsub+0x214>
 80020aa:	e0b1      	b.n	8002210 <__aeabi_dsub+0x378>
 80020ac:	4694      	mov	ip, r2
 80020ae:	e72b      	b.n	8001f08 <__aeabi_dsub+0x70>
 80020b0:	2401      	movs	r4, #1
 80020b2:	4061      	eors	r1, r4
 80020b4:	468b      	mov	fp, r1
 80020b6:	428d      	cmp	r5, r1
 80020b8:	d000      	beq.n	80020bc <__aeabi_dsub+0x224>
 80020ba:	e716      	b.n	8001eea <__aeabi_dsub+0x52>
 80020bc:	4952      	ldr	r1, [pc, #328]	; (8002208 <__aeabi_dsub+0x370>)
 80020be:	468c      	mov	ip, r1
 80020c0:	44b4      	add	ip, r6
 80020c2:	4664      	mov	r4, ip
 80020c4:	2c00      	cmp	r4, #0
 80020c6:	d100      	bne.n	80020ca <__aeabi_dsub+0x232>
 80020c8:	e0d3      	b.n	8002272 <__aeabi_dsub+0x3da>
 80020ca:	1b91      	subs	r1, r2, r6
 80020cc:	468c      	mov	ip, r1
 80020ce:	2e00      	cmp	r6, #0
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x23c>
 80020d2:	e15e      	b.n	8002392 <__aeabi_dsub+0x4fa>
 80020d4:	494a      	ldr	r1, [pc, #296]	; (8002200 <__aeabi_dsub+0x368>)
 80020d6:	428a      	cmp	r2, r1
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x244>
 80020da:	e1be      	b.n	800245a <__aeabi_dsub+0x5c2>
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	464c      	mov	r4, r9
 80020e0:	0409      	lsls	r1, r1, #16
 80020e2:	430c      	orrs	r4, r1
 80020e4:	46a1      	mov	r9, r4
 80020e6:	4661      	mov	r1, ip
 80020e8:	2938      	cmp	r1, #56	; 0x38
 80020ea:	dd00      	ble.n	80020ee <__aeabi_dsub+0x256>
 80020ec:	e1ba      	b.n	8002464 <__aeabi_dsub+0x5cc>
 80020ee:	291f      	cmp	r1, #31
 80020f0:	dd00      	ble.n	80020f4 <__aeabi_dsub+0x25c>
 80020f2:	e227      	b.n	8002544 <__aeabi_dsub+0x6ac>
 80020f4:	2420      	movs	r4, #32
 80020f6:	1a64      	subs	r4, r4, r1
 80020f8:	4649      	mov	r1, r9
 80020fa:	40a1      	lsls	r1, r4
 80020fc:	001e      	movs	r6, r3
 80020fe:	4688      	mov	r8, r1
 8002100:	4661      	mov	r1, ip
 8002102:	40a3      	lsls	r3, r4
 8002104:	40ce      	lsrs	r6, r1
 8002106:	4641      	mov	r1, r8
 8002108:	1e5c      	subs	r4, r3, #1
 800210a:	41a3      	sbcs	r3, r4
 800210c:	4331      	orrs	r1, r6
 800210e:	4319      	orrs	r1, r3
 8002110:	000c      	movs	r4, r1
 8002112:	4663      	mov	r3, ip
 8002114:	4649      	mov	r1, r9
 8002116:	40d9      	lsrs	r1, r3
 8002118:	187f      	adds	r7, r7, r1
 800211a:	1824      	adds	r4, r4, r0
 800211c:	4284      	cmp	r4, r0
 800211e:	419b      	sbcs	r3, r3
 8002120:	425b      	negs	r3, r3
 8002122:	469a      	mov	sl, r3
 8002124:	0016      	movs	r6, r2
 8002126:	44ba      	add	sl, r7
 8002128:	e05d      	b.n	80021e6 <__aeabi_dsub+0x34e>
 800212a:	4c38      	ldr	r4, [pc, #224]	; (800220c <__aeabi_dsub+0x374>)
 800212c:	1c72      	adds	r2, r6, #1
 800212e:	4222      	tst	r2, r4
 8002130:	d000      	beq.n	8002134 <__aeabi_dsub+0x29c>
 8002132:	e0df      	b.n	80022f4 <__aeabi_dsub+0x45c>
 8002134:	464a      	mov	r2, r9
 8002136:	431a      	orrs	r2, r3
 8002138:	2e00      	cmp	r6, #0
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x2a6>
 800213c:	e15c      	b.n	80023f8 <__aeabi_dsub+0x560>
 800213e:	2a00      	cmp	r2, #0
 8002140:	d100      	bne.n	8002144 <__aeabi_dsub+0x2ac>
 8002142:	e1cf      	b.n	80024e4 <__aeabi_dsub+0x64c>
 8002144:	003a      	movs	r2, r7
 8002146:	4302      	orrs	r2, r0
 8002148:	d100      	bne.n	800214c <__aeabi_dsub+0x2b4>
 800214a:	e17f      	b.n	800244c <__aeabi_dsub+0x5b4>
 800214c:	1a1c      	subs	r4, r3, r0
 800214e:	464a      	mov	r2, r9
 8002150:	42a3      	cmp	r3, r4
 8002152:	4189      	sbcs	r1, r1
 8002154:	1bd2      	subs	r2, r2, r7
 8002156:	4249      	negs	r1, r1
 8002158:	1a52      	subs	r2, r2, r1
 800215a:	4692      	mov	sl, r2
 800215c:	0212      	lsls	r2, r2, #8
 800215e:	d400      	bmi.n	8002162 <__aeabi_dsub+0x2ca>
 8002160:	e20a      	b.n	8002578 <__aeabi_dsub+0x6e0>
 8002162:	1ac4      	subs	r4, r0, r3
 8002164:	42a0      	cmp	r0, r4
 8002166:	4180      	sbcs	r0, r0
 8002168:	464b      	mov	r3, r9
 800216a:	4240      	negs	r0, r0
 800216c:	1aff      	subs	r7, r7, r3
 800216e:	1a3b      	subs	r3, r7, r0
 8002170:	469a      	mov	sl, r3
 8002172:	465d      	mov	r5, fp
 8002174:	e71a      	b.n	8001fac <__aeabi_dsub+0x114>
 8002176:	003a      	movs	r2, r7
 8002178:	4302      	orrs	r2, r0
 800217a:	d073      	beq.n	8002264 <__aeabi_dsub+0x3cc>
 800217c:	0022      	movs	r2, r4
 800217e:	3a01      	subs	r2, #1
 8002180:	2c01      	cmp	r4, #1
 8002182:	d100      	bne.n	8002186 <__aeabi_dsub+0x2ee>
 8002184:	e0cb      	b.n	800231e <__aeabi_dsub+0x486>
 8002186:	4554      	cmp	r4, sl
 8002188:	d042      	beq.n	8002210 <__aeabi_dsub+0x378>
 800218a:	4694      	mov	ip, r2
 800218c:	e748      	b.n	8002020 <__aeabi_dsub+0x188>
 800218e:	0010      	movs	r0, r2
 8002190:	3b1f      	subs	r3, #31
 8002192:	40d8      	lsrs	r0, r3
 8002194:	2920      	cmp	r1, #32
 8002196:	d003      	beq.n	80021a0 <__aeabi_dsub+0x308>
 8002198:	2340      	movs	r3, #64	; 0x40
 800219a:	1a5b      	subs	r3, r3, r1
 800219c:	409a      	lsls	r2, r3
 800219e:	4314      	orrs	r4, r2
 80021a0:	1e63      	subs	r3, r4, #1
 80021a2:	419c      	sbcs	r4, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	2600      	movs	r6, #0
 80021a8:	469a      	mov	sl, r3
 80021aa:	4304      	orrs	r4, r0
 80021ac:	0763      	lsls	r3, r4, #29
 80021ae:	d000      	beq.n	80021b2 <__aeabi_dsub+0x31a>
 80021b0:	e6fe      	b.n	8001fb0 <__aeabi_dsub+0x118>
 80021b2:	4652      	mov	r2, sl
 80021b4:	08e3      	lsrs	r3, r4, #3
 80021b6:	0752      	lsls	r2, r2, #29
 80021b8:	4313      	orrs	r3, r2
 80021ba:	4652      	mov	r2, sl
 80021bc:	46b4      	mov	ip, r6
 80021be:	08d2      	lsrs	r2, r2, #3
 80021c0:	490f      	ldr	r1, [pc, #60]	; (8002200 <__aeabi_dsub+0x368>)
 80021c2:	458c      	cmp	ip, r1
 80021c4:	d02a      	beq.n	800221c <__aeabi_dsub+0x384>
 80021c6:	0312      	lsls	r2, r2, #12
 80021c8:	0b14      	lsrs	r4, r2, #12
 80021ca:	4662      	mov	r2, ip
 80021cc:	0552      	lsls	r2, r2, #21
 80021ce:	0d52      	lsrs	r2, r2, #21
 80021d0:	e70c      	b.n	8001fec <__aeabi_dsub+0x154>
 80021d2:	003c      	movs	r4, r7
 80021d4:	4304      	orrs	r4, r0
 80021d6:	1e62      	subs	r2, r4, #1
 80021d8:	4194      	sbcs	r4, r2
 80021da:	18e4      	adds	r4, r4, r3
 80021dc:	429c      	cmp	r4, r3
 80021de:	4192      	sbcs	r2, r2
 80021e0:	4252      	negs	r2, r2
 80021e2:	444a      	add	r2, r9
 80021e4:	4692      	mov	sl, r2
 80021e6:	4653      	mov	r3, sl
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	d5df      	bpl.n	80021ac <__aeabi_dsub+0x314>
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__aeabi_dsub+0x368>)
 80021ee:	3601      	adds	r6, #1
 80021f0:	429e      	cmp	r6, r3
 80021f2:	d000      	beq.n	80021f6 <__aeabi_dsub+0x35e>
 80021f4:	e0a0      	b.n	8002338 <__aeabi_dsub+0x4a0>
 80021f6:	0032      	movs	r2, r6
 80021f8:	2400      	movs	r4, #0
 80021fa:	2300      	movs	r3, #0
 80021fc:	e6f6      	b.n	8001fec <__aeabi_dsub+0x154>
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	000007ff 	.word	0x000007ff
 8002204:	ff7fffff 	.word	0xff7fffff
 8002208:	fffff801 	.word	0xfffff801
 800220c:	000007fe 	.word	0x000007fe
 8002210:	08db      	lsrs	r3, r3, #3
 8002212:	464a      	mov	r2, r9
 8002214:	0752      	lsls	r2, r2, #29
 8002216:	4313      	orrs	r3, r2
 8002218:	464a      	mov	r2, r9
 800221a:	08d2      	lsrs	r2, r2, #3
 800221c:	0019      	movs	r1, r3
 800221e:	4311      	orrs	r1, r2
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0x38c>
 8002222:	e1b5      	b.n	8002590 <__aeabi_dsub+0x6f8>
 8002224:	2480      	movs	r4, #128	; 0x80
 8002226:	0324      	lsls	r4, r4, #12
 8002228:	4314      	orrs	r4, r2
 800222a:	0324      	lsls	r4, r4, #12
 800222c:	4ad5      	ldr	r2, [pc, #852]	; (8002584 <__aeabi_dsub+0x6ec>)
 800222e:	0b24      	lsrs	r4, r4, #12
 8002230:	e6dc      	b.n	8001fec <__aeabi_dsub+0x154>
 8002232:	0020      	movs	r0, r4
 8002234:	f000 fae2 	bl	80027fc <__clzsi2>
 8002238:	0003      	movs	r3, r0
 800223a:	3318      	adds	r3, #24
 800223c:	2b1f      	cmp	r3, #31
 800223e:	dc00      	bgt.n	8002242 <__aeabi_dsub+0x3aa>
 8002240:	e695      	b.n	8001f6e <__aeabi_dsub+0xd6>
 8002242:	0022      	movs	r2, r4
 8002244:	3808      	subs	r0, #8
 8002246:	4082      	lsls	r2, r0
 8002248:	2400      	movs	r4, #0
 800224a:	429e      	cmp	r6, r3
 800224c:	dc00      	bgt.n	8002250 <__aeabi_dsub+0x3b8>
 800224e:	e69a      	b.n	8001f86 <__aeabi_dsub+0xee>
 8002250:	1af6      	subs	r6, r6, r3
 8002252:	4bcd      	ldr	r3, [pc, #820]	; (8002588 <__aeabi_dsub+0x6f0>)
 8002254:	401a      	ands	r2, r3
 8002256:	4692      	mov	sl, r2
 8002258:	e6a8      	b.n	8001fac <__aeabi_dsub+0x114>
 800225a:	003c      	movs	r4, r7
 800225c:	4304      	orrs	r4, r0
 800225e:	1e62      	subs	r2, r4, #1
 8002260:	4194      	sbcs	r4, r2
 8002262:	e66c      	b.n	8001f3e <__aeabi_dsub+0xa6>
 8002264:	464a      	mov	r2, r9
 8002266:	08db      	lsrs	r3, r3, #3
 8002268:	0752      	lsls	r2, r2, #29
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	08d2      	lsrs	r2, r2, #3
 8002270:	e7a6      	b.n	80021c0 <__aeabi_dsub+0x328>
 8002272:	4cc6      	ldr	r4, [pc, #792]	; (800258c <__aeabi_dsub+0x6f4>)
 8002274:	1c72      	adds	r2, r6, #1
 8002276:	4222      	tst	r2, r4
 8002278:	d000      	beq.n	800227c <__aeabi_dsub+0x3e4>
 800227a:	e0ac      	b.n	80023d6 <__aeabi_dsub+0x53e>
 800227c:	464a      	mov	r2, r9
 800227e:	431a      	orrs	r2, r3
 8002280:	2e00      	cmp	r6, #0
 8002282:	d000      	beq.n	8002286 <__aeabi_dsub+0x3ee>
 8002284:	e105      	b.n	8002492 <__aeabi_dsub+0x5fa>
 8002286:	2a00      	cmp	r2, #0
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x3f4>
 800228a:	e156      	b.n	800253a <__aeabi_dsub+0x6a2>
 800228c:	003a      	movs	r2, r7
 800228e:	4302      	orrs	r2, r0
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x3fc>
 8002292:	e0db      	b.n	800244c <__aeabi_dsub+0x5b4>
 8002294:	181c      	adds	r4, r3, r0
 8002296:	429c      	cmp	r4, r3
 8002298:	419b      	sbcs	r3, r3
 800229a:	444f      	add	r7, r9
 800229c:	46ba      	mov	sl, r7
 800229e:	425b      	negs	r3, r3
 80022a0:	449a      	add	sl, r3
 80022a2:	4653      	mov	r3, sl
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	d400      	bmi.n	80022aa <__aeabi_dsub+0x412>
 80022a8:	e780      	b.n	80021ac <__aeabi_dsub+0x314>
 80022aa:	4652      	mov	r2, sl
 80022ac:	4bb6      	ldr	r3, [pc, #728]	; (8002588 <__aeabi_dsub+0x6f0>)
 80022ae:	2601      	movs	r6, #1
 80022b0:	401a      	ands	r2, r3
 80022b2:	4692      	mov	sl, r2
 80022b4:	e77a      	b.n	80021ac <__aeabi_dsub+0x314>
 80022b6:	4cb3      	ldr	r4, [pc, #716]	; (8002584 <__aeabi_dsub+0x6ec>)
 80022b8:	42a2      	cmp	r2, r4
 80022ba:	d100      	bne.n	80022be <__aeabi_dsub+0x426>
 80022bc:	e0c0      	b.n	8002440 <__aeabi_dsub+0x5a8>
 80022be:	2480      	movs	r4, #128	; 0x80
 80022c0:	464d      	mov	r5, r9
 80022c2:	0424      	lsls	r4, r4, #16
 80022c4:	4325      	orrs	r5, r4
 80022c6:	46a9      	mov	r9, r5
 80022c8:	4664      	mov	r4, ip
 80022ca:	2c38      	cmp	r4, #56	; 0x38
 80022cc:	dc53      	bgt.n	8002376 <__aeabi_dsub+0x4de>
 80022ce:	4661      	mov	r1, ip
 80022d0:	2c1f      	cmp	r4, #31
 80022d2:	dd00      	ble.n	80022d6 <__aeabi_dsub+0x43e>
 80022d4:	e0cd      	b.n	8002472 <__aeabi_dsub+0x5da>
 80022d6:	2520      	movs	r5, #32
 80022d8:	001e      	movs	r6, r3
 80022da:	1b2d      	subs	r5, r5, r4
 80022dc:	464c      	mov	r4, r9
 80022de:	40ab      	lsls	r3, r5
 80022e0:	40ac      	lsls	r4, r5
 80022e2:	40ce      	lsrs	r6, r1
 80022e4:	1e5d      	subs	r5, r3, #1
 80022e6:	41ab      	sbcs	r3, r5
 80022e8:	4334      	orrs	r4, r6
 80022ea:	4323      	orrs	r3, r4
 80022ec:	464c      	mov	r4, r9
 80022ee:	40cc      	lsrs	r4, r1
 80022f0:	1b3f      	subs	r7, r7, r4
 80022f2:	e045      	b.n	8002380 <__aeabi_dsub+0x4e8>
 80022f4:	464a      	mov	r2, r9
 80022f6:	1a1c      	subs	r4, r3, r0
 80022f8:	1bd1      	subs	r1, r2, r7
 80022fa:	42a3      	cmp	r3, r4
 80022fc:	4192      	sbcs	r2, r2
 80022fe:	4252      	negs	r2, r2
 8002300:	4692      	mov	sl, r2
 8002302:	000a      	movs	r2, r1
 8002304:	4651      	mov	r1, sl
 8002306:	1a52      	subs	r2, r2, r1
 8002308:	4692      	mov	sl, r2
 800230a:	0212      	lsls	r2, r2, #8
 800230c:	d500      	bpl.n	8002310 <__aeabi_dsub+0x478>
 800230e:	e083      	b.n	8002418 <__aeabi_dsub+0x580>
 8002310:	4653      	mov	r3, sl
 8002312:	4323      	orrs	r3, r4
 8002314:	d000      	beq.n	8002318 <__aeabi_dsub+0x480>
 8002316:	e621      	b.n	8001f5c <__aeabi_dsub+0xc4>
 8002318:	2200      	movs	r2, #0
 800231a:	2500      	movs	r5, #0
 800231c:	e753      	b.n	80021c6 <__aeabi_dsub+0x32e>
 800231e:	181c      	adds	r4, r3, r0
 8002320:	429c      	cmp	r4, r3
 8002322:	419b      	sbcs	r3, r3
 8002324:	444f      	add	r7, r9
 8002326:	46ba      	mov	sl, r7
 8002328:	425b      	negs	r3, r3
 800232a:	449a      	add	sl, r3
 800232c:	4653      	mov	r3, sl
 800232e:	2601      	movs	r6, #1
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	d400      	bmi.n	8002336 <__aeabi_dsub+0x49e>
 8002334:	e73a      	b.n	80021ac <__aeabi_dsub+0x314>
 8002336:	2602      	movs	r6, #2
 8002338:	4652      	mov	r2, sl
 800233a:	4b93      	ldr	r3, [pc, #588]	; (8002588 <__aeabi_dsub+0x6f0>)
 800233c:	2101      	movs	r1, #1
 800233e:	401a      	ands	r2, r3
 8002340:	0013      	movs	r3, r2
 8002342:	4021      	ands	r1, r4
 8002344:	0862      	lsrs	r2, r4, #1
 8002346:	430a      	orrs	r2, r1
 8002348:	07dc      	lsls	r4, r3, #31
 800234a:	085b      	lsrs	r3, r3, #1
 800234c:	469a      	mov	sl, r3
 800234e:	4314      	orrs	r4, r2
 8002350:	e62c      	b.n	8001fac <__aeabi_dsub+0x114>
 8002352:	0039      	movs	r1, r7
 8002354:	3a20      	subs	r2, #32
 8002356:	40d1      	lsrs	r1, r2
 8002358:	4662      	mov	r2, ip
 800235a:	2a20      	cmp	r2, #32
 800235c:	d006      	beq.n	800236c <__aeabi_dsub+0x4d4>
 800235e:	4664      	mov	r4, ip
 8002360:	2240      	movs	r2, #64	; 0x40
 8002362:	1b12      	subs	r2, r2, r4
 8002364:	003c      	movs	r4, r7
 8002366:	4094      	lsls	r4, r2
 8002368:	4304      	orrs	r4, r0
 800236a:	9401      	str	r4, [sp, #4]
 800236c:	9c01      	ldr	r4, [sp, #4]
 800236e:	1e62      	subs	r2, r4, #1
 8002370:	4194      	sbcs	r4, r2
 8002372:	430c      	orrs	r4, r1
 8002374:	e5e3      	b.n	8001f3e <__aeabi_dsub+0xa6>
 8002376:	4649      	mov	r1, r9
 8002378:	4319      	orrs	r1, r3
 800237a:	000b      	movs	r3, r1
 800237c:	1e5c      	subs	r4, r3, #1
 800237e:	41a3      	sbcs	r3, r4
 8002380:	1ac4      	subs	r4, r0, r3
 8002382:	42a0      	cmp	r0, r4
 8002384:	419b      	sbcs	r3, r3
 8002386:	425b      	negs	r3, r3
 8002388:	1afb      	subs	r3, r7, r3
 800238a:	469a      	mov	sl, r3
 800238c:	465d      	mov	r5, fp
 800238e:	0016      	movs	r6, r2
 8002390:	e5dc      	b.n	8001f4c <__aeabi_dsub+0xb4>
 8002392:	4649      	mov	r1, r9
 8002394:	4319      	orrs	r1, r3
 8002396:	d100      	bne.n	800239a <__aeabi_dsub+0x502>
 8002398:	e0ae      	b.n	80024f8 <__aeabi_dsub+0x660>
 800239a:	4661      	mov	r1, ip
 800239c:	4664      	mov	r4, ip
 800239e:	3901      	subs	r1, #1
 80023a0:	2c01      	cmp	r4, #1
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x50e>
 80023a4:	e0e0      	b.n	8002568 <__aeabi_dsub+0x6d0>
 80023a6:	4c77      	ldr	r4, [pc, #476]	; (8002584 <__aeabi_dsub+0x6ec>)
 80023a8:	45a4      	cmp	ip, r4
 80023aa:	d056      	beq.n	800245a <__aeabi_dsub+0x5c2>
 80023ac:	468c      	mov	ip, r1
 80023ae:	e69a      	b.n	80020e6 <__aeabi_dsub+0x24e>
 80023b0:	4661      	mov	r1, ip
 80023b2:	2220      	movs	r2, #32
 80023b4:	003c      	movs	r4, r7
 80023b6:	1a52      	subs	r2, r2, r1
 80023b8:	4094      	lsls	r4, r2
 80023ba:	0001      	movs	r1, r0
 80023bc:	4090      	lsls	r0, r2
 80023be:	46a0      	mov	r8, r4
 80023c0:	4664      	mov	r4, ip
 80023c2:	1e42      	subs	r2, r0, #1
 80023c4:	4190      	sbcs	r0, r2
 80023c6:	4662      	mov	r2, ip
 80023c8:	40e1      	lsrs	r1, r4
 80023ca:	4644      	mov	r4, r8
 80023cc:	40d7      	lsrs	r7, r2
 80023ce:	430c      	orrs	r4, r1
 80023d0:	4304      	orrs	r4, r0
 80023d2:	44b9      	add	r9, r7
 80023d4:	e701      	b.n	80021da <__aeabi_dsub+0x342>
 80023d6:	496b      	ldr	r1, [pc, #428]	; (8002584 <__aeabi_dsub+0x6ec>)
 80023d8:	428a      	cmp	r2, r1
 80023da:	d100      	bne.n	80023de <__aeabi_dsub+0x546>
 80023dc:	e70c      	b.n	80021f8 <__aeabi_dsub+0x360>
 80023de:	1818      	adds	r0, r3, r0
 80023e0:	4298      	cmp	r0, r3
 80023e2:	419b      	sbcs	r3, r3
 80023e4:	444f      	add	r7, r9
 80023e6:	425b      	negs	r3, r3
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	07dc      	lsls	r4, r3, #31
 80023ec:	0840      	lsrs	r0, r0, #1
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	469a      	mov	sl, r3
 80023f2:	0016      	movs	r6, r2
 80023f4:	4304      	orrs	r4, r0
 80023f6:	e6d9      	b.n	80021ac <__aeabi_dsub+0x314>
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d000      	beq.n	80023fe <__aeabi_dsub+0x566>
 80023fc:	e081      	b.n	8002502 <__aeabi_dsub+0x66a>
 80023fe:	003b      	movs	r3, r7
 8002400:	4303      	orrs	r3, r0
 8002402:	d11d      	bne.n	8002440 <__aeabi_dsub+0x5a8>
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	2500      	movs	r5, #0
 8002408:	0312      	lsls	r2, r2, #12
 800240a:	e70b      	b.n	8002224 <__aeabi_dsub+0x38c>
 800240c:	08c0      	lsrs	r0, r0, #3
 800240e:	077b      	lsls	r3, r7, #29
 8002410:	465d      	mov	r5, fp
 8002412:	4303      	orrs	r3, r0
 8002414:	08fa      	lsrs	r2, r7, #3
 8002416:	e6d3      	b.n	80021c0 <__aeabi_dsub+0x328>
 8002418:	1ac4      	subs	r4, r0, r3
 800241a:	42a0      	cmp	r0, r4
 800241c:	4180      	sbcs	r0, r0
 800241e:	464b      	mov	r3, r9
 8002420:	4240      	negs	r0, r0
 8002422:	1aff      	subs	r7, r7, r3
 8002424:	1a3b      	subs	r3, r7, r0
 8002426:	469a      	mov	sl, r3
 8002428:	465d      	mov	r5, fp
 800242a:	e597      	b.n	8001f5c <__aeabi_dsub+0xc4>
 800242c:	1a1c      	subs	r4, r3, r0
 800242e:	464a      	mov	r2, r9
 8002430:	42a3      	cmp	r3, r4
 8002432:	419b      	sbcs	r3, r3
 8002434:	1bd7      	subs	r7, r2, r7
 8002436:	425b      	negs	r3, r3
 8002438:	1afb      	subs	r3, r7, r3
 800243a:	469a      	mov	sl, r3
 800243c:	2601      	movs	r6, #1
 800243e:	e585      	b.n	8001f4c <__aeabi_dsub+0xb4>
 8002440:	08c0      	lsrs	r0, r0, #3
 8002442:	077b      	lsls	r3, r7, #29
 8002444:	465d      	mov	r5, fp
 8002446:	4303      	orrs	r3, r0
 8002448:	08fa      	lsrs	r2, r7, #3
 800244a:	e6e7      	b.n	800221c <__aeabi_dsub+0x384>
 800244c:	464a      	mov	r2, r9
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	0752      	lsls	r2, r2, #29
 8002452:	4313      	orrs	r3, r2
 8002454:	464a      	mov	r2, r9
 8002456:	08d2      	lsrs	r2, r2, #3
 8002458:	e6b5      	b.n	80021c6 <__aeabi_dsub+0x32e>
 800245a:	08c0      	lsrs	r0, r0, #3
 800245c:	077b      	lsls	r3, r7, #29
 800245e:	4303      	orrs	r3, r0
 8002460:	08fa      	lsrs	r2, r7, #3
 8002462:	e6db      	b.n	800221c <__aeabi_dsub+0x384>
 8002464:	4649      	mov	r1, r9
 8002466:	4319      	orrs	r1, r3
 8002468:	000b      	movs	r3, r1
 800246a:	1e59      	subs	r1, r3, #1
 800246c:	418b      	sbcs	r3, r1
 800246e:	001c      	movs	r4, r3
 8002470:	e653      	b.n	800211a <__aeabi_dsub+0x282>
 8002472:	464d      	mov	r5, r9
 8002474:	3c20      	subs	r4, #32
 8002476:	40e5      	lsrs	r5, r4
 8002478:	2920      	cmp	r1, #32
 800247a:	d005      	beq.n	8002488 <__aeabi_dsub+0x5f0>
 800247c:	2440      	movs	r4, #64	; 0x40
 800247e:	1a64      	subs	r4, r4, r1
 8002480:	4649      	mov	r1, r9
 8002482:	40a1      	lsls	r1, r4
 8002484:	430b      	orrs	r3, r1
 8002486:	4698      	mov	r8, r3
 8002488:	4643      	mov	r3, r8
 800248a:	1e5c      	subs	r4, r3, #1
 800248c:	41a3      	sbcs	r3, r4
 800248e:	432b      	orrs	r3, r5
 8002490:	e776      	b.n	8002380 <__aeabi_dsub+0x4e8>
 8002492:	2a00      	cmp	r2, #0
 8002494:	d0e1      	beq.n	800245a <__aeabi_dsub+0x5c2>
 8002496:	003a      	movs	r2, r7
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	4302      	orrs	r2, r0
 800249c:	d100      	bne.n	80024a0 <__aeabi_dsub+0x608>
 800249e:	e6b8      	b.n	8002212 <__aeabi_dsub+0x37a>
 80024a0:	464a      	mov	r2, r9
 80024a2:	0752      	lsls	r2, r2, #29
 80024a4:	2480      	movs	r4, #128	; 0x80
 80024a6:	4313      	orrs	r3, r2
 80024a8:	464a      	mov	r2, r9
 80024aa:	0324      	lsls	r4, r4, #12
 80024ac:	08d2      	lsrs	r2, r2, #3
 80024ae:	4222      	tst	r2, r4
 80024b0:	d007      	beq.n	80024c2 <__aeabi_dsub+0x62a>
 80024b2:	08fe      	lsrs	r6, r7, #3
 80024b4:	4226      	tst	r6, r4
 80024b6:	d104      	bne.n	80024c2 <__aeabi_dsub+0x62a>
 80024b8:	465d      	mov	r5, fp
 80024ba:	0032      	movs	r2, r6
 80024bc:	08c3      	lsrs	r3, r0, #3
 80024be:	077f      	lsls	r7, r7, #29
 80024c0:	433b      	orrs	r3, r7
 80024c2:	0f59      	lsrs	r1, r3, #29
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	0749      	lsls	r1, r1, #29
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	430b      	orrs	r3, r1
 80024cc:	e6a6      	b.n	800221c <__aeabi_dsub+0x384>
 80024ce:	1ac4      	subs	r4, r0, r3
 80024d0:	42a0      	cmp	r0, r4
 80024d2:	4180      	sbcs	r0, r0
 80024d4:	464b      	mov	r3, r9
 80024d6:	4240      	negs	r0, r0
 80024d8:	1aff      	subs	r7, r7, r3
 80024da:	1a3b      	subs	r3, r7, r0
 80024dc:	469a      	mov	sl, r3
 80024de:	465d      	mov	r5, fp
 80024e0:	2601      	movs	r6, #1
 80024e2:	e533      	b.n	8001f4c <__aeabi_dsub+0xb4>
 80024e4:	003b      	movs	r3, r7
 80024e6:	4303      	orrs	r3, r0
 80024e8:	d100      	bne.n	80024ec <__aeabi_dsub+0x654>
 80024ea:	e715      	b.n	8002318 <__aeabi_dsub+0x480>
 80024ec:	08c0      	lsrs	r0, r0, #3
 80024ee:	077b      	lsls	r3, r7, #29
 80024f0:	465d      	mov	r5, fp
 80024f2:	4303      	orrs	r3, r0
 80024f4:	08fa      	lsrs	r2, r7, #3
 80024f6:	e666      	b.n	80021c6 <__aeabi_dsub+0x32e>
 80024f8:	08c0      	lsrs	r0, r0, #3
 80024fa:	077b      	lsls	r3, r7, #29
 80024fc:	4303      	orrs	r3, r0
 80024fe:	08fa      	lsrs	r2, r7, #3
 8002500:	e65e      	b.n	80021c0 <__aeabi_dsub+0x328>
 8002502:	003a      	movs	r2, r7
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	4302      	orrs	r2, r0
 8002508:	d100      	bne.n	800250c <__aeabi_dsub+0x674>
 800250a:	e682      	b.n	8002212 <__aeabi_dsub+0x37a>
 800250c:	464a      	mov	r2, r9
 800250e:	0752      	lsls	r2, r2, #29
 8002510:	2480      	movs	r4, #128	; 0x80
 8002512:	4313      	orrs	r3, r2
 8002514:	464a      	mov	r2, r9
 8002516:	0324      	lsls	r4, r4, #12
 8002518:	08d2      	lsrs	r2, r2, #3
 800251a:	4222      	tst	r2, r4
 800251c:	d007      	beq.n	800252e <__aeabi_dsub+0x696>
 800251e:	08fe      	lsrs	r6, r7, #3
 8002520:	4226      	tst	r6, r4
 8002522:	d104      	bne.n	800252e <__aeabi_dsub+0x696>
 8002524:	465d      	mov	r5, fp
 8002526:	0032      	movs	r2, r6
 8002528:	08c3      	lsrs	r3, r0, #3
 800252a:	077f      	lsls	r7, r7, #29
 800252c:	433b      	orrs	r3, r7
 800252e:	0f59      	lsrs	r1, r3, #29
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	08db      	lsrs	r3, r3, #3
 8002534:	0749      	lsls	r1, r1, #29
 8002536:	430b      	orrs	r3, r1
 8002538:	e670      	b.n	800221c <__aeabi_dsub+0x384>
 800253a:	08c0      	lsrs	r0, r0, #3
 800253c:	077b      	lsls	r3, r7, #29
 800253e:	4303      	orrs	r3, r0
 8002540:	08fa      	lsrs	r2, r7, #3
 8002542:	e640      	b.n	80021c6 <__aeabi_dsub+0x32e>
 8002544:	464c      	mov	r4, r9
 8002546:	3920      	subs	r1, #32
 8002548:	40cc      	lsrs	r4, r1
 800254a:	4661      	mov	r1, ip
 800254c:	2920      	cmp	r1, #32
 800254e:	d006      	beq.n	800255e <__aeabi_dsub+0x6c6>
 8002550:	4666      	mov	r6, ip
 8002552:	2140      	movs	r1, #64	; 0x40
 8002554:	1b89      	subs	r1, r1, r6
 8002556:	464e      	mov	r6, r9
 8002558:	408e      	lsls	r6, r1
 800255a:	4333      	orrs	r3, r6
 800255c:	4698      	mov	r8, r3
 800255e:	4643      	mov	r3, r8
 8002560:	1e59      	subs	r1, r3, #1
 8002562:	418b      	sbcs	r3, r1
 8002564:	431c      	orrs	r4, r3
 8002566:	e5d8      	b.n	800211a <__aeabi_dsub+0x282>
 8002568:	181c      	adds	r4, r3, r0
 800256a:	4284      	cmp	r4, r0
 800256c:	4180      	sbcs	r0, r0
 800256e:	444f      	add	r7, r9
 8002570:	46ba      	mov	sl, r7
 8002572:	4240      	negs	r0, r0
 8002574:	4482      	add	sl, r0
 8002576:	e6d9      	b.n	800232c <__aeabi_dsub+0x494>
 8002578:	4653      	mov	r3, sl
 800257a:	4323      	orrs	r3, r4
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x6e8>
 800257e:	e6cb      	b.n	8002318 <__aeabi_dsub+0x480>
 8002580:	e614      	b.n	80021ac <__aeabi_dsub+0x314>
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	000007ff 	.word	0x000007ff
 8002588:	ff7fffff 	.word	0xff7fffff
 800258c:	000007fe 	.word	0x000007fe
 8002590:	2300      	movs	r3, #0
 8002592:	4a01      	ldr	r2, [pc, #4]	; (8002598 <__aeabi_dsub+0x700>)
 8002594:	001c      	movs	r4, r3
 8002596:	e529      	b.n	8001fec <__aeabi_dsub+0x154>
 8002598:	000007ff 	.word	0x000007ff

0800259c <__aeabi_dcmpun>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	0005      	movs	r5, r0
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <__aeabi_dcmpun+0x38>)
 80025a2:	031c      	lsls	r4, r3, #12
 80025a4:	0016      	movs	r6, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	030a      	lsls	r2, r1, #12
 80025aa:	0049      	lsls	r1, r1, #1
 80025ac:	0b12      	lsrs	r2, r2, #12
 80025ae:	0d49      	lsrs	r1, r1, #21
 80025b0:	0b24      	lsrs	r4, r4, #12
 80025b2:	0d5b      	lsrs	r3, r3, #21
 80025b4:	4281      	cmp	r1, r0
 80025b6:	d008      	beq.n	80025ca <__aeabi_dcmpun+0x2e>
 80025b8:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <__aeabi_dcmpun+0x38>)
 80025ba:	2000      	movs	r0, #0
 80025bc:	4293      	cmp	r3, r2
 80025be:	d103      	bne.n	80025c8 <__aeabi_dcmpun+0x2c>
 80025c0:	0020      	movs	r0, r4
 80025c2:	4330      	orrs	r0, r6
 80025c4:	1e43      	subs	r3, r0, #1
 80025c6:	4198      	sbcs	r0, r3
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
 80025ca:	2001      	movs	r0, #1
 80025cc:	432a      	orrs	r2, r5
 80025ce:	d1fb      	bne.n	80025c8 <__aeabi_dcmpun+0x2c>
 80025d0:	e7f2      	b.n	80025b8 <__aeabi_dcmpun+0x1c>
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	000007ff 	.word	0x000007ff

080025d8 <__aeabi_d2iz>:
 80025d8:	000a      	movs	r2, r1
 80025da:	b530      	push	{r4, r5, lr}
 80025dc:	4c13      	ldr	r4, [pc, #76]	; (800262c <__aeabi_d2iz+0x54>)
 80025de:	0053      	lsls	r3, r2, #1
 80025e0:	0309      	lsls	r1, r1, #12
 80025e2:	0005      	movs	r5, r0
 80025e4:	0b09      	lsrs	r1, r1, #12
 80025e6:	2000      	movs	r0, #0
 80025e8:	0d5b      	lsrs	r3, r3, #21
 80025ea:	0fd2      	lsrs	r2, r2, #31
 80025ec:	42a3      	cmp	r3, r4
 80025ee:	dd04      	ble.n	80025fa <__aeabi_d2iz+0x22>
 80025f0:	480f      	ldr	r0, [pc, #60]	; (8002630 <__aeabi_d2iz+0x58>)
 80025f2:	4283      	cmp	r3, r0
 80025f4:	dd02      	ble.n	80025fc <__aeabi_d2iz+0x24>
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <__aeabi_d2iz+0x5c>)
 80025f8:	18d0      	adds	r0, r2, r3
 80025fa:	bd30      	pop	{r4, r5, pc}
 80025fc:	2080      	movs	r0, #128	; 0x80
 80025fe:	0340      	lsls	r0, r0, #13
 8002600:	4301      	orrs	r1, r0
 8002602:	480d      	ldr	r0, [pc, #52]	; (8002638 <__aeabi_d2iz+0x60>)
 8002604:	1ac0      	subs	r0, r0, r3
 8002606:	281f      	cmp	r0, #31
 8002608:	dd08      	ble.n	800261c <__aeabi_d2iz+0x44>
 800260a:	480c      	ldr	r0, [pc, #48]	; (800263c <__aeabi_d2iz+0x64>)
 800260c:	1ac3      	subs	r3, r0, r3
 800260e:	40d9      	lsrs	r1, r3
 8002610:	000b      	movs	r3, r1
 8002612:	4258      	negs	r0, r3
 8002614:	2a00      	cmp	r2, #0
 8002616:	d1f0      	bne.n	80025fa <__aeabi_d2iz+0x22>
 8002618:	0018      	movs	r0, r3
 800261a:	e7ee      	b.n	80025fa <__aeabi_d2iz+0x22>
 800261c:	4c08      	ldr	r4, [pc, #32]	; (8002640 <__aeabi_d2iz+0x68>)
 800261e:	40c5      	lsrs	r5, r0
 8002620:	46a4      	mov	ip, r4
 8002622:	4463      	add	r3, ip
 8002624:	4099      	lsls	r1, r3
 8002626:	000b      	movs	r3, r1
 8002628:	432b      	orrs	r3, r5
 800262a:	e7f2      	b.n	8002612 <__aeabi_d2iz+0x3a>
 800262c:	000003fe 	.word	0x000003fe
 8002630:	0000041d 	.word	0x0000041d
 8002634:	7fffffff 	.word	0x7fffffff
 8002638:	00000433 	.word	0x00000433
 800263c:	00000413 	.word	0x00000413
 8002640:	fffffbed 	.word	0xfffffbed

08002644 <__aeabi_i2d>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	2800      	cmp	r0, #0
 8002648:	d016      	beq.n	8002678 <__aeabi_i2d+0x34>
 800264a:	17c3      	asrs	r3, r0, #31
 800264c:	18c5      	adds	r5, r0, r3
 800264e:	405d      	eors	r5, r3
 8002650:	0fc4      	lsrs	r4, r0, #31
 8002652:	0028      	movs	r0, r5
 8002654:	f000 f8d2 	bl	80027fc <__clzsi2>
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <__aeabi_i2d+0x5c>)
 800265a:	1a1b      	subs	r3, r3, r0
 800265c:	280a      	cmp	r0, #10
 800265e:	dc16      	bgt.n	800268e <__aeabi_i2d+0x4a>
 8002660:	0002      	movs	r2, r0
 8002662:	002e      	movs	r6, r5
 8002664:	3215      	adds	r2, #21
 8002666:	4096      	lsls	r6, r2
 8002668:	220b      	movs	r2, #11
 800266a:	1a12      	subs	r2, r2, r0
 800266c:	40d5      	lsrs	r5, r2
 800266e:	055b      	lsls	r3, r3, #21
 8002670:	032d      	lsls	r5, r5, #12
 8002672:	0b2d      	lsrs	r5, r5, #12
 8002674:	0d5b      	lsrs	r3, r3, #21
 8002676:	e003      	b.n	8002680 <__aeabi_i2d+0x3c>
 8002678:	2400      	movs	r4, #0
 800267a:	2300      	movs	r3, #0
 800267c:	2500      	movs	r5, #0
 800267e:	2600      	movs	r6, #0
 8002680:	051b      	lsls	r3, r3, #20
 8002682:	432b      	orrs	r3, r5
 8002684:	07e4      	lsls	r4, r4, #31
 8002686:	4323      	orrs	r3, r4
 8002688:	0030      	movs	r0, r6
 800268a:	0019      	movs	r1, r3
 800268c:	bd70      	pop	{r4, r5, r6, pc}
 800268e:	380b      	subs	r0, #11
 8002690:	4085      	lsls	r5, r0
 8002692:	055b      	lsls	r3, r3, #21
 8002694:	032d      	lsls	r5, r5, #12
 8002696:	2600      	movs	r6, #0
 8002698:	0b2d      	lsrs	r5, r5, #12
 800269a:	0d5b      	lsrs	r3, r3, #21
 800269c:	e7f0      	b.n	8002680 <__aeabi_i2d+0x3c>
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	0000041e 	.word	0x0000041e

080026a4 <__aeabi_ui2d>:
 80026a4:	b510      	push	{r4, lr}
 80026a6:	1e04      	subs	r4, r0, #0
 80026a8:	d010      	beq.n	80026cc <__aeabi_ui2d+0x28>
 80026aa:	f000 f8a7 	bl	80027fc <__clzsi2>
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <__aeabi_ui2d+0x48>)
 80026b0:	1a1b      	subs	r3, r3, r0
 80026b2:	280a      	cmp	r0, #10
 80026b4:	dc11      	bgt.n	80026da <__aeabi_ui2d+0x36>
 80026b6:	220b      	movs	r2, #11
 80026b8:	0021      	movs	r1, r4
 80026ba:	1a12      	subs	r2, r2, r0
 80026bc:	40d1      	lsrs	r1, r2
 80026be:	3015      	adds	r0, #21
 80026c0:	030a      	lsls	r2, r1, #12
 80026c2:	055b      	lsls	r3, r3, #21
 80026c4:	4084      	lsls	r4, r0
 80026c6:	0b12      	lsrs	r2, r2, #12
 80026c8:	0d5b      	lsrs	r3, r3, #21
 80026ca:	e001      	b.n	80026d0 <__aeabi_ui2d+0x2c>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2200      	movs	r2, #0
 80026d0:	051b      	lsls	r3, r3, #20
 80026d2:	4313      	orrs	r3, r2
 80026d4:	0020      	movs	r0, r4
 80026d6:	0019      	movs	r1, r3
 80026d8:	bd10      	pop	{r4, pc}
 80026da:	0022      	movs	r2, r4
 80026dc:	380b      	subs	r0, #11
 80026de:	4082      	lsls	r2, r0
 80026e0:	055b      	lsls	r3, r3, #21
 80026e2:	0312      	lsls	r2, r2, #12
 80026e4:	2400      	movs	r4, #0
 80026e6:	0b12      	lsrs	r2, r2, #12
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	e7f1      	b.n	80026d0 <__aeabi_ui2d+0x2c>
 80026ec:	0000041e 	.word	0x0000041e

080026f0 <__aeabi_d2f>:
 80026f0:	0002      	movs	r2, r0
 80026f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f4:	004b      	lsls	r3, r1, #1
 80026f6:	030d      	lsls	r5, r1, #12
 80026f8:	0f40      	lsrs	r0, r0, #29
 80026fa:	0d5b      	lsrs	r3, r3, #21
 80026fc:	0fcc      	lsrs	r4, r1, #31
 80026fe:	0a6d      	lsrs	r5, r5, #9
 8002700:	493a      	ldr	r1, [pc, #232]	; (80027ec <__aeabi_d2f+0xfc>)
 8002702:	4305      	orrs	r5, r0
 8002704:	1c58      	adds	r0, r3, #1
 8002706:	00d7      	lsls	r7, r2, #3
 8002708:	4208      	tst	r0, r1
 800270a:	d00a      	beq.n	8002722 <__aeabi_d2f+0x32>
 800270c:	4938      	ldr	r1, [pc, #224]	; (80027f0 <__aeabi_d2f+0x100>)
 800270e:	1859      	adds	r1, r3, r1
 8002710:	29fe      	cmp	r1, #254	; 0xfe
 8002712:	dd16      	ble.n	8002742 <__aeabi_d2f+0x52>
 8002714:	20ff      	movs	r0, #255	; 0xff
 8002716:	2200      	movs	r2, #0
 8002718:	05c0      	lsls	r0, r0, #23
 800271a:	4310      	orrs	r0, r2
 800271c:	07e4      	lsls	r4, r4, #31
 800271e:	4320      	orrs	r0, r4
 8002720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <__aeabi_d2f+0x44>
 8002726:	433d      	orrs	r5, r7
 8002728:	d026      	beq.n	8002778 <__aeabi_d2f+0x88>
 800272a:	2205      	movs	r2, #5
 800272c:	0192      	lsls	r2, r2, #6
 800272e:	0a52      	lsrs	r2, r2, #9
 8002730:	b2d8      	uxtb	r0, r3
 8002732:	e7f1      	b.n	8002718 <__aeabi_d2f+0x28>
 8002734:	432f      	orrs	r7, r5
 8002736:	d0ed      	beq.n	8002714 <__aeabi_d2f+0x24>
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	03d2      	lsls	r2, r2, #15
 800273c:	20ff      	movs	r0, #255	; 0xff
 800273e:	432a      	orrs	r2, r5
 8002740:	e7ea      	b.n	8002718 <__aeabi_d2f+0x28>
 8002742:	2900      	cmp	r1, #0
 8002744:	dd1b      	ble.n	800277e <__aeabi_d2f+0x8e>
 8002746:	0192      	lsls	r2, r2, #6
 8002748:	1e50      	subs	r0, r2, #1
 800274a:	4182      	sbcs	r2, r0
 800274c:	00ed      	lsls	r5, r5, #3
 800274e:	0f7f      	lsrs	r7, r7, #29
 8002750:	432a      	orrs	r2, r5
 8002752:	433a      	orrs	r2, r7
 8002754:	0753      	lsls	r3, r2, #29
 8002756:	d047      	beq.n	80027e8 <__aeabi_d2f+0xf8>
 8002758:	230f      	movs	r3, #15
 800275a:	4013      	ands	r3, r2
 800275c:	2b04      	cmp	r3, #4
 800275e:	d000      	beq.n	8002762 <__aeabi_d2f+0x72>
 8002760:	3204      	adds	r2, #4
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	04db      	lsls	r3, r3, #19
 8002766:	4013      	ands	r3, r2
 8002768:	d03e      	beq.n	80027e8 <__aeabi_d2f+0xf8>
 800276a:	1c48      	adds	r0, r1, #1
 800276c:	29fe      	cmp	r1, #254	; 0xfe
 800276e:	d0d1      	beq.n	8002714 <__aeabi_d2f+0x24>
 8002770:	0192      	lsls	r2, r2, #6
 8002772:	0a52      	lsrs	r2, r2, #9
 8002774:	b2c0      	uxtb	r0, r0
 8002776:	e7cf      	b.n	8002718 <__aeabi_d2f+0x28>
 8002778:	2000      	movs	r0, #0
 800277a:	2200      	movs	r2, #0
 800277c:	e7cc      	b.n	8002718 <__aeabi_d2f+0x28>
 800277e:	000a      	movs	r2, r1
 8002780:	3217      	adds	r2, #23
 8002782:	db2f      	blt.n	80027e4 <__aeabi_d2f+0xf4>
 8002784:	2680      	movs	r6, #128	; 0x80
 8002786:	0436      	lsls	r6, r6, #16
 8002788:	432e      	orrs	r6, r5
 800278a:	251e      	movs	r5, #30
 800278c:	1a6d      	subs	r5, r5, r1
 800278e:	2d1f      	cmp	r5, #31
 8002790:	dd11      	ble.n	80027b6 <__aeabi_d2f+0xc6>
 8002792:	2202      	movs	r2, #2
 8002794:	4252      	negs	r2, r2
 8002796:	1a52      	subs	r2, r2, r1
 8002798:	0031      	movs	r1, r6
 800279a:	40d1      	lsrs	r1, r2
 800279c:	2d20      	cmp	r5, #32
 800279e:	d004      	beq.n	80027aa <__aeabi_d2f+0xba>
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <__aeabi_d2f+0x104>)
 80027a2:	4694      	mov	ip, r2
 80027a4:	4463      	add	r3, ip
 80027a6:	409e      	lsls	r6, r3
 80027a8:	4337      	orrs	r7, r6
 80027aa:	003a      	movs	r2, r7
 80027ac:	1e53      	subs	r3, r2, #1
 80027ae:	419a      	sbcs	r2, r3
 80027b0:	430a      	orrs	r2, r1
 80027b2:	2100      	movs	r1, #0
 80027b4:	e7ce      	b.n	8002754 <__aeabi_d2f+0x64>
 80027b6:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <__aeabi_d2f+0x108>)
 80027b8:	0038      	movs	r0, r7
 80027ba:	4694      	mov	ip, r2
 80027bc:	4463      	add	r3, ip
 80027be:	4098      	lsls	r0, r3
 80027c0:	003a      	movs	r2, r7
 80027c2:	1e41      	subs	r1, r0, #1
 80027c4:	4188      	sbcs	r0, r1
 80027c6:	409e      	lsls	r6, r3
 80027c8:	40ea      	lsrs	r2, r5
 80027ca:	4330      	orrs	r0, r6
 80027cc:	4302      	orrs	r2, r0
 80027ce:	2100      	movs	r1, #0
 80027d0:	0753      	lsls	r3, r2, #29
 80027d2:	d1c1      	bne.n	8002758 <__aeabi_d2f+0x68>
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	0013      	movs	r3, r2
 80027d8:	04c9      	lsls	r1, r1, #19
 80027da:	2001      	movs	r0, #1
 80027dc:	400b      	ands	r3, r1
 80027de:	420a      	tst	r2, r1
 80027e0:	d1c6      	bne.n	8002770 <__aeabi_d2f+0x80>
 80027e2:	e7a3      	b.n	800272c <__aeabi_d2f+0x3c>
 80027e4:	2300      	movs	r3, #0
 80027e6:	e7a0      	b.n	800272a <__aeabi_d2f+0x3a>
 80027e8:	000b      	movs	r3, r1
 80027ea:	e79f      	b.n	800272c <__aeabi_d2f+0x3c>
 80027ec:	000007fe 	.word	0x000007fe
 80027f0:	fffffc80 	.word	0xfffffc80
 80027f4:	fffffca2 	.word	0xfffffca2
 80027f8:	fffffc82 	.word	0xfffffc82

080027fc <__clzsi2>:
 80027fc:	211c      	movs	r1, #28
 80027fe:	2301      	movs	r3, #1
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	4298      	cmp	r0, r3
 8002804:	d301      	bcc.n	800280a <__clzsi2+0xe>
 8002806:	0c00      	lsrs	r0, r0, #16
 8002808:	3910      	subs	r1, #16
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	4298      	cmp	r0, r3
 800280e:	d301      	bcc.n	8002814 <__clzsi2+0x18>
 8002810:	0a00      	lsrs	r0, r0, #8
 8002812:	3908      	subs	r1, #8
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	4298      	cmp	r0, r3
 8002818:	d301      	bcc.n	800281e <__clzsi2+0x22>
 800281a:	0900      	lsrs	r0, r0, #4
 800281c:	3904      	subs	r1, #4
 800281e:	a202      	add	r2, pc, #8	; (adr r2, 8002828 <__clzsi2+0x2c>)
 8002820:	5c10      	ldrb	r0, [r2, r0]
 8002822:	1840      	adds	r0, r0, r1
 8002824:	4770      	bx	lr
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	02020304 	.word	0x02020304
 800282c:	01010101 	.word	0x01010101
	...

08002838 <LEDs_init>:

//extern NumOfTOFSensors;
extern uint16_t ActiveCaptors;


void LEDs_init(void){
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);		// LED 1
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <LEDs_init+0xe0>)
 800283e:	2200      	movs	r2, #0
 8002840:	2108      	movs	r1, #8
 8002842:	0018      	movs	r0, r3
 8002844:	f002 f862 	bl	800490c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);		// LED 2
 8002848:	4b33      	ldr	r3, [pc, #204]	; (8002918 <LEDs_init+0xe0>)
 800284a:	2200      	movs	r2, #0
 800284c:	2101      	movs	r1, #1
 800284e:	0018      	movs	r0, r3
 8002850:	f002 f85c 	bl	800490c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// LED 3
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	019b      	lsls	r3, r3, #6
 8002858:	482f      	ldr	r0, [pc, #188]	; (8002918 <LEDs_init+0xe0>)
 800285a:	2200      	movs	r2, #0
 800285c:	0019      	movs	r1, r3
 800285e:	f002 f855 	bl	800490c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);	// LED 4
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	482c      	ldr	r0, [pc, #176]	; (8002918 <LEDs_init+0xe0>)
 8002868:	2200      	movs	r2, #0
 800286a:	0019      	movs	r1, r3
 800286c:	f002 f84e 	bl	800490c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// LED 5
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <LEDs_init+0xe4>)
 8002872:	2200      	movs	r2, #0
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	0018      	movs	r0, r3
 8002878:	f002 f848 	bl	800490c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);		// LED 6
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <LEDs_init+0xe4>)
 800287e:	2200      	movs	r2, #0
 8002880:	2110      	movs	r1, #16
 8002882:	0018      	movs	r0, r3
 8002884:	f002 f842 	bl	800490c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);		// LED 7
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <LEDs_init+0xe8>)
 800288a:	2200      	movs	r2, #0
 800288c:	2108      	movs	r1, #8
 800288e:	0018      	movs	r0, r3
 8002890:	f002 f83c 	bl	800490c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);		// LED 8
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <LEDs_init+0xe8>)
 8002896:	2200      	movs	r2, #0
 8002898:	2101      	movs	r1, #1
 800289a:	0018      	movs	r0, r3
 800289c:	f002 f836 	bl	800490c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);	// LED 9
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	0219      	lsls	r1, r3, #8
 80028a4:	23a0      	movs	r3, #160	; 0xa0
 80028a6:	05db      	lsls	r3, r3, #23
 80028a8:	2200      	movs	r2, #0
 80028aa:	0018      	movs	r0, r3
 80028ac:	f002 f82e 	bl	800490c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);		// LED 10
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	481a      	ldr	r0, [pc, #104]	; (8002920 <LEDs_init+0xe8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	0019      	movs	r1, r3
 80028ba:	f002 f827 	bl	800490c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);	// LED 11
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	0119      	lsls	r1, r3, #4
 80028c2:	23a0      	movs	r3, #160	; 0xa0
 80028c4:	05db      	lsls	r3, r3, #23
 80028c6:	2200      	movs	r2, #0
 80028c8:	0018      	movs	r0, r3
 80028ca:	f002 f81f 	bl	800490c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);	// LED 12
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	01db      	lsls	r3, r3, #7
 80028d2:	4812      	ldr	r0, [pc, #72]	; (800291c <LEDs_init+0xe4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	0019      	movs	r1, r3
 80028d8:	f002 f818 	bl	800490c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);	// LED 13
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	480e      	ldr	r0, [pc, #56]	; (800291c <LEDs_init+0xe4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	0019      	movs	r1, r3
 80028e6:	f002 f811 	bl	800490c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);		// LED 14
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <LEDs_init+0xe4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	2102      	movs	r1, #2
 80028f0:	0018      	movs	r0, r3
 80028f2:	f002 f80b 	bl	800490c <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);		// LED 15
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <LEDs_init+0xe0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	2110      	movs	r1, #16
 80028fc:	0018      	movs	r0, r3
 80028fe:	f002 f805 	bl	800490c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);		// LED 16
 8002902:	23a0      	movs	r3, #160	; 0xa0
 8002904:	05db      	lsls	r3, r3, #23
 8002906:	2200      	movs	r2, #0
 8002908:	2120      	movs	r1, #32
 800290a:	0018      	movs	r0, r3
 800290c:	f001 fffe 	bl	800490c <HAL_GPIO_WritePin>
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	50000800 	.word	0x50000800
 800291c:	50000400 	.word	0x50000400
 8002920:	50000c00 	.word	0x50000c00

08002924 <LEDtoggle>:


uint8_t LEDtoggle(uint16_t n){
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	0002      	movs	r2, r0
 800292c:	1dbb      	adds	r3, r7, #6
 800292e:	801a      	strh	r2, [r3, #0]
	if(n<=0 || n>16)
 8002930:	1dbb      	adds	r3, r7, #6
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <LEDtoggle+0x1c>
 8002938:	1dbb      	adds	r3, r7, #6
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	2b10      	cmp	r3, #16
 800293e:	d901      	bls.n	8002944 <LEDtoggle+0x20>
		return 1;
 8002940:	2301      	movs	r3, #1
 8002942:	e07b      	b.n	8002a3c <LEDtoggle+0x118>

	switch (n){
 8002944:	1dbb      	adds	r3, r7, #6
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	2b10      	cmp	r3, #16
 800294a:	d900      	bls.n	800294e <LEDtoggle+0x2a>
 800294c:	e075      	b.n	8002a3a <LEDtoggle+0x116>
 800294e:	009a      	lsls	r2, r3, #2
 8002950:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <LEDtoggle+0x120>)
 8002952:	18d3      	adds	r3, r2, r3
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	469f      	mov	pc, r3
	case 1:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8002958:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <LEDtoggle+0x124>)
 800295a:	2108      	movs	r1, #8
 800295c:	0018      	movs	r0, r3
 800295e:	f001 fff2 	bl	8004946 <HAL_GPIO_TogglePin>
		break;
 8002962:	e06a      	b.n	8002a3a <LEDtoggle+0x116>
	case 2:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8002964:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <LEDtoggle+0x124>)
 8002966:	2101      	movs	r1, #1
 8002968:	0018      	movs	r0, r3
 800296a:	f001 ffec 	bl	8004946 <HAL_GPIO_TogglePin>
		break;
 800296e:	e064      	b.n	8002a3a <LEDtoggle+0x116>
	case 3:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	019b      	lsls	r3, r3, #6
 8002974:	4a34      	ldr	r2, [pc, #208]	; (8002a48 <LEDtoggle+0x124>)
 8002976:	0019      	movs	r1, r3
 8002978:	0010      	movs	r0, r2
 800297a:	f001 ffe4 	bl	8004946 <HAL_GPIO_TogglePin>
		break;
 800297e:	e05c      	b.n	8002a3a <LEDtoggle+0x116>
	case 4:
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <LEDtoggle+0x124>)
 8002986:	0019      	movs	r1, r3
 8002988:	0010      	movs	r0, r2
 800298a:	f001 ffdc 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 800298e:	e054      	b.n	8002a3a <LEDtoggle+0x116>
	case 5:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <LEDtoggle+0x128>)
 8002992:	2180      	movs	r1, #128	; 0x80
 8002994:	0018      	movs	r0, r3
 8002996:	f001 ffd6 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 800299a:	e04e      	b.n	8002a3a <LEDtoggle+0x116>
	case 6:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <LEDtoggle+0x128>)
 800299e:	2110      	movs	r1, #16
 80029a0:	0018      	movs	r0, r3
 80029a2:	f001 ffd0 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 80029a6:	e048      	b.n	8002a3a <LEDtoggle+0x116>
	case 7:
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 80029a8:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <LEDtoggle+0x12c>)
 80029aa:	2108      	movs	r1, #8
 80029ac:	0018      	movs	r0, r3
 80029ae:	f001 ffca 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 80029b2:	e042      	b.n	8002a3a <LEDtoggle+0x116>
	case 8:
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 80029b4:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <LEDtoggle+0x12c>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	0018      	movs	r0, r3
 80029ba:	f001 ffc4 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 80029be:	e03c      	b.n	8002a3a <LEDtoggle+0x116>
	case 9:
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	021a      	lsls	r2, r3, #8
 80029c4:	23a0      	movs	r3, #160	; 0xa0
 80029c6:	05db      	lsls	r3, r3, #23
 80029c8:	0011      	movs	r1, r2
 80029ca:	0018      	movs	r0, r3
 80029cc:	f001 ffbb 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 80029d0:	e033      	b.n	8002a3a <LEDtoggle+0x116>
	case 10:
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4a1e      	ldr	r2, [pc, #120]	; (8002a50 <LEDtoggle+0x12c>)
 80029d8:	0019      	movs	r1, r3
 80029da:	0010      	movs	r0, r2
 80029dc:	f001 ffb3 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 80029e0:	e02b      	b.n	8002a3a <LEDtoggle+0x116>
	case 11:
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	011a      	lsls	r2, r3, #4
 80029e6:	23a0      	movs	r3, #160	; 0xa0
 80029e8:	05db      	lsls	r3, r3, #23
 80029ea:	0011      	movs	r1, r2
 80029ec:	0018      	movs	r0, r3
 80029ee:	f001 ffaa 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 80029f2:	e022      	b.n	8002a3a <LEDtoggle+0x116>
	case 12:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	01db      	lsls	r3, r3, #7
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <LEDtoggle+0x128>)
 80029fa:	0019      	movs	r1, r3
 80029fc:	0010      	movs	r0, r2
 80029fe:	f001 ffa2 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 8002a02:	e01a      	b.n	8002a3a <LEDtoggle+0x116>
	case 13:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <LEDtoggle+0x128>)
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	f001 ff9a 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 8002a12:	e012      	b.n	8002a3a <LEDtoggle+0x116>
	case 14:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002a14:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <LEDtoggle+0x128>)
 8002a16:	2102      	movs	r1, #2
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f001 ff94 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 8002a1e:	e00c      	b.n	8002a3a <LEDtoggle+0x116>
	case 15:
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <LEDtoggle+0x124>)
 8002a22:	2110      	movs	r1, #16
 8002a24:	0018      	movs	r0, r3
 8002a26:	f001 ff8e 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 8002a2a:	e006      	b.n	8002a3a <LEDtoggle+0x116>
	case 16:
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002a2c:	23a0      	movs	r3, #160	; 0xa0
 8002a2e:	05db      	lsls	r3, r3, #23
 8002a30:	2120      	movs	r1, #32
 8002a32:	0018      	movs	r0, r3
 8002a34:	f001 ff87 	bl	8004946 <HAL_GPIO_TogglePin>
			break;
 8002a38:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	0800cbc4 	.word	0x0800cbc4
 8002a48:	50000800 	.word	0x50000800
 8002a4c:	50000400 	.word	0x50000400
 8002a50:	50000c00 	.word	0x50000c00

08002a54 <toggleInactiveCaptors>:
			}
		}
}


void toggleInactiveCaptors(void){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	e012      	b.n	8002a86 <toggleInactiveCaptors+0x32>
			if(!(ActiveCaptors & (1<<j))){
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <toggleInactiveCaptors+0x44>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	001a      	movs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	411a      	asrs	r2, r3
 8002a6a:	0013      	movs	r3, r2
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d106      	bne.n	8002a80 <toggleInactiveCaptors+0x2c>
				LEDtoggle( j + 1 );
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff ff52 	bl	8002924 <LEDtoggle>
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3301      	adds	r3, #1
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0f      	cmp	r3, #15
 8002a8a:	dde9      	ble.n	8002a60 <toggleInactiveCaptors+0xc>
			}
		}
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b002      	add	sp, #8
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	2000004a 	.word	0x2000004a

08002a9c <LEDset>:


uint8_t LEDset(uint16_t n, uint8_t state){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	1dbb      	adds	r3, r7, #6
 8002aa6:	801a      	strh	r2, [r3, #0]
 8002aa8:	1d7b      	adds	r3, r7, #5
 8002aaa:	1c0a      	adds	r2, r1, #0
 8002aac:	701a      	strb	r2, [r3, #0]
	if(n<=0 || n>16)
 8002aae:	1dbb      	adds	r3, r7, #6
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <LEDset+0x22>
 8002ab6:	1dbb      	adds	r3, r7, #6
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d901      	bls.n	8002ac2 <LEDset+0x26>
		return 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0b4      	b.n	8002c2c <LEDset+0x190>

	GPIO_PinState LEDstate;
	if(state != 0 || state != 1){
 8002ac2:	1d7b      	adds	r3, r7, #5
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <LEDset+0x36>
 8002aca:	1d7b      	adds	r3, r7, #5
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <LEDset+0x3a>
		return 2;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e0aa      	b.n	8002c2c <LEDset+0x190>
	}
	else{
		switch(state){
 8002ad6:	1d7b      	adds	r3, r7, #5
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <LEDset+0x48>
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d005      	beq.n	8002aee <LEDset+0x52>
 8002ae2:	e009      	b.n	8002af8 <LEDset+0x5c>
		case 0:
			LEDstate = GPIO_PIN_SET;
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	18fb      	adds	r3, r7, r3
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
			break;
 8002aec:	e004      	b.n	8002af8 <LEDset+0x5c>
		case 1:
			LEDstate = GPIO_PIN_RESET;
 8002aee:	230f      	movs	r3, #15
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
			break;
 8002af6:	46c0      	nop			; (mov r8, r8)
		}
	}

	switch (n){
 8002af8:	1dbb      	adds	r3, r7, #6
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d900      	bls.n	8002b02 <LEDset+0x66>
 8002b00:	e093      	b.n	8002c2a <LEDset+0x18e>
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <LEDset+0x198>)
 8002b06:	18d3      	adds	r3, r2, r3
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	469f      	mov	pc, r3
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, LEDstate);
 8002b0c:	230f      	movs	r3, #15
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4849      	ldr	r0, [pc, #292]	; (8002c38 <LEDset+0x19c>)
 8002b14:	001a      	movs	r2, r3
 8002b16:	2108      	movs	r1, #8
 8002b18:	f001 fef8 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002b1c:	e085      	b.n	8002c2a <LEDset+0x18e>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, LEDstate);
 8002b1e:	230f      	movs	r3, #15
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4844      	ldr	r0, [pc, #272]	; (8002c38 <LEDset+0x19c>)
 8002b26:	001a      	movs	r2, r3
 8002b28:	2101      	movs	r1, #1
 8002b2a:	f001 feef 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002b2e:	e07c      	b.n	8002c2a <LEDset+0x18e>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, LEDstate);
 8002b30:	230f      	movs	r3, #15
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	019b      	lsls	r3, r3, #6
 8002b3a:	483f      	ldr	r0, [pc, #252]	; (8002c38 <LEDset+0x19c>)
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	f001 fee5 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002b42:	e072      	b.n	8002c2a <LEDset+0x18e>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, LEDstate);
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	483a      	ldr	r0, [pc, #232]	; (8002c38 <LEDset+0x19c>)
 8002b50:	0019      	movs	r1, r3
 8002b52:	f001 fedb 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002b56:	e068      	b.n	8002c2a <LEDset+0x18e>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, LEDstate);
 8002b58:	230f      	movs	r3, #15
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	4837      	ldr	r0, [pc, #220]	; (8002c3c <LEDset+0x1a0>)
 8002b60:	001a      	movs	r2, r3
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	f001 fed2 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002b68:	e05f      	b.n	8002c2a <LEDset+0x18e>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, LEDstate);
 8002b6a:	230f      	movs	r3, #15
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4832      	ldr	r0, [pc, #200]	; (8002c3c <LEDset+0x1a0>)
 8002b72:	001a      	movs	r2, r3
 8002b74:	2110      	movs	r1, #16
 8002b76:	f001 fec9 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002b7a:	e056      	b.n	8002c2a <LEDset+0x18e>
	case 7:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, LEDstate);
 8002b7c:	230f      	movs	r3, #15
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	482f      	ldr	r0, [pc, #188]	; (8002c40 <LEDset+0x1a4>)
 8002b84:	001a      	movs	r2, r3
 8002b86:	2108      	movs	r1, #8
 8002b88:	f001 fec0 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002b8c:	e04d      	b.n	8002c2a <LEDset+0x18e>
	case 8:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, LEDstate);
 8002b8e:	230f      	movs	r3, #15
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	482a      	ldr	r0, [pc, #168]	; (8002c40 <LEDset+0x1a4>)
 8002b96:	001a      	movs	r2, r3
 8002b98:	2101      	movs	r1, #1
 8002b9a:	f001 feb7 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002b9e:	e044      	b.n	8002c2a <LEDset+0x18e>
	case 9:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, LEDstate);
 8002ba0:	230f      	movs	r3, #15
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	0219      	lsls	r1, r3, #8
 8002baa:	23a0      	movs	r3, #160	; 0xa0
 8002bac:	05db      	lsls	r3, r3, #23
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f001 feac 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002bb4:	e039      	b.n	8002c2a <LEDset+0x18e>
	case 10:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, LEDstate);
 8002bb6:	230f      	movs	r3, #15
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	781a      	ldrb	r2, [r3, #0]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	481f      	ldr	r0, [pc, #124]	; (8002c40 <LEDset+0x1a4>)
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	f001 fea2 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002bc8:	e02f      	b.n	8002c2a <LEDset+0x18e>
	case 11:
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LEDstate); // Pin de l'I2C, l'utiliser peut causer les problemes
			break;
	case 12:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LEDstate);
 8002bca:	230f      	movs	r3, #15
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	01db      	lsls	r3, r3, #7
 8002bd4:	4819      	ldr	r0, [pc, #100]	; (8002c3c <LEDset+0x1a0>)
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	f001 fe98 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002bdc:	e025      	b.n	8002c2a <LEDset+0x18e>
	case 13:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, LEDstate);
 8002bde:	230f      	movs	r3, #15
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	4814      	ldr	r0, [pc, #80]	; (8002c3c <LEDset+0x1a0>)
 8002bea:	0019      	movs	r1, r3
 8002bec:	f001 fe8e 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002bf0:	e01b      	b.n	8002c2a <LEDset+0x18e>
	case 14:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, LEDstate);
 8002bf2:	230f      	movs	r3, #15
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4810      	ldr	r0, [pc, #64]	; (8002c3c <LEDset+0x1a0>)
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	f001 fe85 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002c02:	e012      	b.n	8002c2a <LEDset+0x18e>
	case 15:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, LEDstate);
 8002c04:	230f      	movs	r3, #15
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	480b      	ldr	r0, [pc, #44]	; (8002c38 <LEDset+0x19c>)
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	2110      	movs	r1, #16
 8002c10:	f001 fe7c 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002c14:	e009      	b.n	8002c2a <LEDset+0x18e>
	case 16:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, LEDstate);
 8002c16:	230f      	movs	r3, #15
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	23a0      	movs	r3, #160	; 0xa0
 8002c1e:	05db      	lsls	r3, r3, #23
 8002c20:	2120      	movs	r1, #32
 8002c22:	0018      	movs	r0, r3
 8002c24:	f001 fe72 	bl	800490c <HAL_GPIO_WritePin>
		break;
 8002c28:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b004      	add	sp, #16
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	0800cc08 	.word	0x0800cc08
 8002c38:	50000800 	.word	0x50000800
 8002c3c:	50000400 	.word	0x50000400
 8002c40:	50000c00 	.word	0x50000c00

08002c44 <setActiveCaptors>:


void setActiveCaptors(uint8_t state){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e015      	b.n	8002c82 <setActiveCaptors+0x3e>
			if(ActiveCaptors & (1<<j)){
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <setActiveCaptors+0x50>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	411a      	asrs	r2, r3
 8002c60:	0013      	movs	r3, r2
 8002c62:	2201      	movs	r2, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	d009      	beq.n	8002c7c <setActiveCaptors+0x38>
				LEDset( j + 1 , state);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	1dfb      	adds	r3, r7, #7
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	0019      	movs	r1, r3
 8002c76:	0010      	movs	r0, r2
 8002c78:	f7ff ff10 	bl	8002a9c <LEDset>
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b0f      	cmp	r3, #15
 8002c86:	dde6      	ble.n	8002c56 <setActiveCaptors+0x12>
			}
		}
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b004      	add	sp, #16
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	2000004a 	.word	0x2000004a

08002c98 <setInactiveCaptors>:


void setInactiveCaptors(uint8_t state){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e015      	b.n	8002cd6 <setInactiveCaptors+0x3e>
			if(!(ActiveCaptors & (1<<j))){
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <setInactiveCaptors+0x50>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	001a      	movs	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	411a      	asrs	r2, r3
 8002cb4:	0013      	movs	r3, r2
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d109      	bne.n	8002cd0 <setInactiveCaptors+0x38>
				LEDset( j + 1 , state);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	1dfb      	adds	r3, r7, #7
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	0019      	movs	r1, r3
 8002cca:	0010      	movs	r0, r2
 8002ccc:	f7ff fee6 	bl	8002a9c <LEDset>
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	dde6      	ble.n	8002caa <setInactiveCaptors+0x12>
			}
		}
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	2000004a 	.word	0x2000004a

08002cec <ResetAndInitializeAllSensors>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t dataRead;
void ResetAndInitializeAllSensors(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
	uint8_t i,counter, Sensor, error = 0;
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
	uint8_t Bootstate = 0;
 8002cf8:	1cfb      	adds	r3, r7, #3
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
	int16_t Offset;
	ResetAllSensors();
 8002cfe:	f000 fad1 	bl	80032a4 <ResetAllSensors>
	HAL_Delay(10);
 8002d02:	200a      	movs	r0, #10
 8002d04:	f001 fb86 	bl	8004414 <HAL_Delay>
	for (i = 0; i < NumOfTOFSensors; i++)
 8002d08:	1dfb      	adds	r3, r7, #7
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e078      	b.n	8002e02 <ResetAndInitializeAllSensors+0x116>
	{
		FailedBoot = i;
 8002d10:	1dfb      	adds	r3, r7, #7
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	4b87      	ldr	r3, [pc, #540]	; (8002f34 <ResetAndInitializeAllSensors+0x248>)
 8002d18:	801a      	strh	r2, [r3, #0]
		TurnOnSensor(i);
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 fa28 	bl	8003174 <TurnOnSensor>
		HAL_Delay(60);
 8002d24:	203c      	movs	r0, #60	; 0x3c
 8002d26:	f001 fb75 	bl	8004414 <HAL_Delay>
		error += VL53L1X_BootState(Dev_init, &Bootstate);
 8002d2a:	4b83      	ldr	r3, [pc, #524]	; (8002f38 <ResetAndInitializeAllSensors+0x24c>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	1cfa      	adds	r2, r7, #3
 8002d30:	0011      	movs	r1, r2
 8002d32:	0018      	movs	r0, r3
 8002d34:	f004 ff2e 	bl	8007b94 <VL53L1X_BootState>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	b2d9      	uxtb	r1, r3
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	1d3a      	adds	r2, r7, #4
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	188a      	adds	r2, r1, r2
 8002d44:	701a      	strb	r2, [r3, #0]
		while (Bootstate != 0x03 && counter < 10)
 8002d46:	e015      	b.n	8002d74 <ResetAndInitializeAllSensors+0x88>
		{
			//ITM_Port32(31) = Bootstate;
			HAL_Delay(60);
 8002d48:	203c      	movs	r0, #60	; 0x3c
 8002d4a:	f001 fb63 	bl	8004414 <HAL_Delay>
			error += VL53L1X_BootState(Dev_init, &Bootstate);
 8002d4e:	4b7a      	ldr	r3, [pc, #488]	; (8002f38 <ResetAndInitializeAllSensors+0x24c>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	1cfa      	adds	r2, r7, #3
 8002d54:	0011      	movs	r1, r2
 8002d56:	0018      	movs	r0, r3
 8002d58:	f004 ff1c 	bl	8007b94 <VL53L1X_BootState>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	b2d9      	uxtb	r1, r3
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	1d3a      	adds	r2, r7, #4
 8002d64:	7812      	ldrb	r2, [r2, #0]
 8002d66:	188a      	adds	r2, r1, r2
 8002d68:	701a      	strb	r2, [r3, #0]
			counter++;
 8002d6a:	1dbb      	adds	r3, r7, #6
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	1dbb      	adds	r3, r7, #6
 8002d70:	3201      	adds	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
		while (Bootstate != 0x03 && counter < 10)
 8002d74:	1cfb      	adds	r3, r7, #3
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d003      	beq.n	8002d84 <ResetAndInitializeAllSensors+0x98>
 8002d7c:	1dbb      	adds	r3, r7, #6
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b09      	cmp	r3, #9
 8002d82:	d9e1      	bls.n	8002d48 <ResetAndInitializeAllSensors+0x5c>
		}
		counter = 0;
 8002d84:	1dbb      	adds	r3, r7, #6
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
		VL53L1X_SensorInit(Dev_init);	/* Initialize sensor  */HAL_Delay(1);
 8002d8a:	4b6b      	ldr	r3, [pc, #428]	; (8002f38 <ResetAndInitializeAllSensors+0x24c>)
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f004 faac 	bl	80072ec <VL53L1X_SensorInit>
 8002d94:	2001      	movs	r0, #1
 8002d96:	f001 fb3d 	bl	8004414 <HAL_Delay>
		VL53L1X_SetI2CAddress(Dev_init, Devs[i]);HAL_Delay(1);	/* Change i2c address Left is now 0x62 and Dev1 */
 8002d9a:	4b67      	ldr	r3, [pc, #412]	; (8002f38 <ResetAndInitializeAllSensors+0x24c>)
 8002d9c:	8818      	ldrh	r0, [r3, #0]
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002da4:	0052      	lsls	r2, r2, #1
 8002da6:	5ad3      	ldrh	r3, [r2, r3]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	0019      	movs	r1, r3
 8002dac:	f004 fa7c 	bl	80072a8 <VL53L1X_SetI2CAddress>
 8002db0:	2001      	movs	r0, #1
 8002db2:	f001 fb2f 	bl	8004414 <HAL_Delay>
		dataRead = ReadRegister8(Devs[i], 0x10f);HAL_Delay(1);
 8002db6:	1dfb      	adds	r3, r7, #7
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002dbc:	0052      	lsls	r2, r2, #1
 8002dbe:	5ad3      	ldrh	r3, [r2, r3]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	32ff      	adds	r2, #255	; 0xff
 8002dc4:	0011      	movs	r1, r2
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f005 f870 	bl	8007eac <ReadRegister8>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	001a      	movs	r2, r3
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <ResetAndInitializeAllSensors+0x254>)
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f001 fb1d 	bl	8004414 <HAL_Delay>
		dataRead = ReadRegister8(Devs[i], 0x110);
 8002dda:	1dfb      	adds	r3, r7, #7
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	4b57      	ldr	r3, [pc, #348]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002de0:	0052      	lsls	r2, r2, #1
 8002de2:	5ad3      	ldrh	r3, [r2, r3]
 8002de4:	2288      	movs	r2, #136	; 0x88
 8002de6:	0052      	lsls	r2, r2, #1
 8002de8:	0011      	movs	r1, r2
 8002dea:	0018      	movs	r0, r3
 8002dec:	f005 f85e 	bl	8007eac <ReadRegister8>
 8002df0:	0003      	movs	r3, r0
 8002df2:	001a      	movs	r2, r3
 8002df4:	4b52      	ldr	r3, [pc, #328]	; (8002f40 <ResetAndInitializeAllSensors+0x254>)
 8002df6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NumOfTOFSensors; i++)
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	781a      	ldrb	r2, [r3, #0]
 8002dfc:	1dfb      	adds	r3, r7, #7
 8002dfe:	3201      	adds	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	1dfb      	adds	r3, r7, #7
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	d800      	bhi.n	8002e0c <ResetAndInitializeAllSensors+0x120>
 8002e0a:	e781      	b.n	8002d10 <ResetAndInitializeAllSensors+0x24>
	}
	UART_Print("All Chips booted\n");
 8002e0c:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <ResetAndInitializeAllSensors+0x258>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f005 fa74 	bl	80082fc <UART_Print>

	for (Sensor = 0; Sensor < NumOfTOFSensors; Sensor++)
 8002e14:	1d7b      	adds	r3, r7, #5
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e057      	b.n	8002ecc <ResetAndInitializeAllSensors+0x1e0>
	{
		VL53L1X_SetDistanceMode(Devs[Sensor], 1);
 8002e1c:	1d7b      	adds	r3, r7, #5
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	4b46      	ldr	r3, [pc, #280]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002e22:	0052      	lsls	r2, r2, #1
 8002e24:	5ad3      	ldrh	r3, [r2, r3]
 8002e26:	2101      	movs	r1, #1
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f004 fd79 	bl	8007920 <VL53L1X_SetDistanceMode>
		VL53L1X_SetTimingBudgetInMs(Devs[Sensor], TimingBudget);
 8002e2e:	1d7b      	adds	r3, r7, #5
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	4b42      	ldr	r3, [pc, #264]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002e34:	0052      	lsls	r2, r2, #1
 8002e36:	5ad2      	ldrh	r2, [r2, r3]
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <ResetAndInitializeAllSensors+0x25c>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	0010      	movs	r0, r2
 8002e40:	f004 fb8e 	bl	8007560 <VL53L1X_SetTimingBudgetInMs>
		VL53L1X_SetInterMeasurementInMs(Devs[Sensor], TimingBudget);
 8002e44:	1d7b      	adds	r3, r7, #5
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	4b3c      	ldr	r3, [pc, #240]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002e4a:	0052      	lsls	r2, r2, #1
 8002e4c:	5ad2      	ldrh	r2, [r2, r3]
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <ResetAndInitializeAllSensors+0x25c>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	0019      	movs	r1, r3
 8002e54:	0010      	movs	r0, r2
 8002e56:	f004 fe5b 	bl	8007b10 <VL53L1X_SetInterMeasurementInMs>
		VL53L1X_SetROI(Devs[Sensor], WidthOfSPADsPerZone, 6);
 8002e5a:	1d7b      	adds	r3, r7, #5
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002e60:	0052      	lsls	r2, r2, #1
 8002e62:	5ad3      	ldrh	r3, [r2, r3]
 8002e64:	2206      	movs	r2, #6
 8002e66:	2104      	movs	r1, #4
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f004 ff6e 	bl	8007d4a <VL53L1X_SetROI>
		WriteRegister8(Devs[Sensor], ROI_CONFIG__USER_ROI_CENTRE_SPAD, zone_center[0] - 0);
 8002e6e:	1d7b      	adds	r3, r7, #5
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002e74:	0052      	lsls	r2, r2, #1
 8002e76:	5ad0      	ldrh	r0, [r2, r3]
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <ResetAndInitializeAllSensors+0x260>)
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	001a      	movs	r2, r3
 8002e80:	217f      	movs	r1, #127	; 0x7f
 8002e82:	f005 f857 	bl	8007f34 <WriteRegister8>
		error = VL53L1X_GetOffset(Devs[Sensor], &Offset);
 8002e86:	1d7b      	adds	r3, r7, #5
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002e8c:	0052      	lsls	r2, r2, #1
 8002e8e:	5ad3      	ldrh	r3, [r2, r3]
 8002e90:	003a      	movs	r2, r7
 8002e92:	0011      	movs	r1, r2
 8002e94:	0018      	movs	r0, r3
 8002e96:	f004 ff2a 	bl	8007cee <VL53L1X_GetOffset>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	701a      	strb	r2, [r3, #0]
		VL53L1X_SetOffset(Devs[Sensor], Offset + 40);
 8002ea2:	1d7b      	adds	r3, r7, #5
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002ea8:	0052      	lsls	r2, r2, #1
 8002eaa:	5ad2      	ldrh	r2, [r2, r3]
 8002eac:	003b      	movs	r3, r7
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5e5b      	ldrsh	r3, [r3, r1]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3328      	adds	r3, #40	; 0x28
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	0019      	movs	r1, r3
 8002ebc:	0010      	movs	r0, r2
 8002ebe:	f004 fee5 	bl	8007c8c <VL53L1X_SetOffset>
	for (Sensor = 0; Sensor < NumOfTOFSensors; Sensor++)
 8002ec2:	1d7b      	adds	r3, r7, #5
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	1d7b      	adds	r3, r7, #5
 8002ec8:	3201      	adds	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	1d7b      	adds	r3, r7, #5
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b0f      	cmp	r3, #15
 8002ed2:	d9a3      	bls.n	8002e1c <ResetAndInitializeAllSensors+0x130>
	}
	for (Sensor = 0; Sensor < NumOfTOFSensors; Sensor++)
 8002ed4:	1d7b      	adds	r3, r7, #5
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e019      	b.n	8002f10 <ResetAndInitializeAllSensors+0x224>
	{
		if((ActiveCaptors>>Sensor)&1){
 8002edc:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <ResetAndInitializeAllSensors+0x264>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	1d7b      	adds	r3, r7, #5
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	411a      	asrs	r2, r3
 8002ee8:	0013      	movs	r3, r2
 8002eea:	2201      	movs	r2, #1
 8002eec:	4013      	ands	r3, r2
 8002eee:	d007      	beq.n	8002f00 <ResetAndInitializeAllSensors+0x214>
			VL53L1X_StartRanging(Devs[Sensor]);
 8002ef0:	1d7b      	adds	r3, r7, #5
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <ResetAndInitializeAllSensors+0x250>)
 8002ef6:	0052      	lsls	r2, r2, #1
 8002ef8:	5ad3      	ldrh	r3, [r2, r3]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f004 fabb 	bl	8007476 <VL53L1X_StartRanging>
		}
		HAL_Delay(1);
 8002f00:	2001      	movs	r0, #1
 8002f02:	f001 fa87 	bl	8004414 <HAL_Delay>
	for (Sensor = 0; Sensor < NumOfTOFSensors; Sensor++)
 8002f06:	1d7b      	adds	r3, r7, #5
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	1d7b      	adds	r3, r7, #5
 8002f0c:	3201      	adds	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	1d7b      	adds	r3, r7, #5
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b0f      	cmp	r3, #15
 8002f16:	d9e1      	bls.n	8002edc <ResetAndInitializeAllSensors+0x1f0>
	}
	if (ActiveCaptors != 0xFFFF)
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <ResetAndInitializeAllSensors+0x264>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <ResetAndInitializeAllSensors+0x268>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <ResetAndInitializeAllSensors+0x23e>
	{
		UART_Print("Not all captors were initialized\r\n");
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <ResetAndInitializeAllSensors+0x26c>)
 8002f24:	0018      	movs	r0, r3
 8002f26:	f005 f9e9 	bl	80082fc <UART_Print>
	}

}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	20000d38 	.word	0x20000d38
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	20000d3a 	.word	0x20000d3a
 8002f44:	0800cb38 	.word	0x0800cb38
 8002f48:	20000048 	.word	0x20000048
 8002f4c:	20000024 	.word	0x20000024
 8002f50:	2000004a 	.word	0x2000004a
 8002f54:	0000ffff 	.word	0x0000ffff
 8002f58:	0800cb4c 	.word	0x0800cb4c

08002f5c <PlotPolarData>:

float OldAngle;
double SystemAngle;
void PlotPolarData(uint8_t SensorNum, uint8_t CurrentZone, uint8_t NumOfZones, uint16_t Distance)
{
 8002f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	0005      	movs	r5, r0
 8002f64:	000c      	movs	r4, r1
 8002f66:	0010      	movs	r0, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	230f      	movs	r3, #15
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	1c2a      	adds	r2, r5, #0
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	230e      	movs	r3, #14
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	1c22      	adds	r2, r4, #0
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	230d      	movs	r3, #13
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	1c02      	adds	r2, r0, #0
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	200a      	movs	r0, #10
 8002f84:	183b      	adds	r3, r7, r0
 8002f86:	1c0a      	adds	r2, r1, #0
 8002f88:	801a      	strh	r2, [r3, #0]
	double PartZoneAngle;

	float CorrectedDistance = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]

	if (Distance > 60000)
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	4a67      	ldr	r2, [pc, #412]	; (8003130 <PlotPolarData+0x1d4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d902      	bls.n	8002f9e <PlotPolarData+0x42>
	{
		Distance = 0;
 8002f98:	183b      	adds	r3, r7, r0
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	801a      	strh	r2, [r3, #0]
	}
	PartZoneAngle = (StartingZoneAngle + ZoneFOVChangePerStep*CurrentZone) - (HorizontalFOVofSensor / 2.0);
 8002f9e:	230e      	movs	r3, #14
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff fb4d 	bl	8002644 <__aeabi_i2d>
 8002faa:	4a62      	ldr	r2, [pc, #392]	; (8003134 <PlotPolarData+0x1d8>)
 8002fac:	4b62      	ldr	r3, [pc, #392]	; (8003138 <PlotPolarData+0x1dc>)
 8002fae:	f7fe fcb1 	bl	8001914 <__aeabi_dmul>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	000b      	movs	r3, r1
 8002fb6:	0010      	movs	r0, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	4a5e      	ldr	r2, [pc, #376]	; (8003134 <PlotPolarData+0x1d8>)
 8002fbc:	4b5f      	ldr	r3, [pc, #380]	; (800313c <PlotPolarData+0x1e0>)
 8002fbe:	f7fd fd4f 	bl	8000a60 <__aeabi_dadd>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	000b      	movs	r3, r1
 8002fc6:	0010      	movs	r0, r2
 8002fc8:	0019      	movs	r1, r3
 8002fca:	4a5a      	ldr	r2, [pc, #360]	; (8003134 <PlotPolarData+0x1d8>)
 8002fcc:	4b5c      	ldr	r3, [pc, #368]	; (8003140 <PlotPolarData+0x1e4>)
 8002fce:	f7fe ff63 	bl	8001e98 <__aeabi_dsub>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	000b      	movs	r3, r1
 8002fd6:	613a      	str	r2, [r7, #16]
 8002fd8:	617b      	str	r3, [r7, #20]
	SystemAngle = -80 + 20.0*SensorNum + PartZoneAngle;
 8002fda:	230f      	movs	r3, #15
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff fb2f 	bl	8002644 <__aeabi_i2d>
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4b56      	ldr	r3, [pc, #344]	; (8003144 <PlotPolarData+0x1e8>)
 8002fea:	f7fe fc93 	bl	8001914 <__aeabi_dmul>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	000b      	movs	r3, r1
 8002ff2:	0010      	movs	r0, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <PlotPolarData+0x1ec>)
 8002ffa:	f7fe ff4d 	bl	8001e98 <__aeabi_dsub>
 8002ffe:	0002      	movs	r2, r0
 8003000:	000b      	movs	r3, r1
 8003002:	0010      	movs	r0, r2
 8003004:	0019      	movs	r1, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f7fd fd29 	bl	8000a60 <__aeabi_dadd>
 800300e:	0002      	movs	r2, r0
 8003010:	000b      	movs	r3, r1
 8003012:	494e      	ldr	r1, [pc, #312]	; (800314c <PlotPolarData+0x1f0>)
 8003014:	600a      	str	r2, [r1, #0]
 8003016:	604b      	str	r3, [r1, #4]
	CorrectedDistance = pow(pow(RadarCircleRadius,2) + pow(Distance, 2) - (2 * RadarCircleRadius * Distance * cos((180 - PartZoneAngle)/(180) * Pi)), 0.5);
 8003018:	260a      	movs	r6, #10
 800301a:	19bb      	adds	r3, r7, r6
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff fb40 	bl	80026a4 <__aeabi_ui2d>
 8003024:	2200      	movs	r2, #0
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	05db      	lsls	r3, r3, #23
 800302a:	f007 fed9 	bl	800ade0 <pow>
 800302e:	2200      	movs	r2, #0
 8003030:	4b47      	ldr	r3, [pc, #284]	; (8003150 <PlotPolarData+0x1f4>)
 8003032:	f7fd fd15 	bl	8000a60 <__aeabi_dadd>
 8003036:	0002      	movs	r2, r0
 8003038:	000b      	movs	r3, r1
 800303a:	0014      	movs	r4, r2
 800303c:	001d      	movs	r5, r3
 800303e:	19bb      	adds	r3, r7, r6
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	0018      	movs	r0, r3
 8003044:	f7ff fafe 	bl	8002644 <__aeabi_i2d>
 8003048:	2200      	movs	r2, #0
 800304a:	4b42      	ldr	r3, [pc, #264]	; (8003154 <PlotPolarData+0x1f8>)
 800304c:	f7fe fc62 	bl	8001914 <__aeabi_dmul>
 8003050:	0002      	movs	r2, r0
 8003052:	000b      	movs	r3, r1
 8003054:	603a      	str	r2, [r7, #0]
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2000      	movs	r0, #0
 800305e:	493e      	ldr	r1, [pc, #248]	; (8003158 <PlotPolarData+0x1fc>)
 8003060:	f7fe ff1a 	bl	8001e98 <__aeabi_dsub>
 8003064:	0002      	movs	r2, r0
 8003066:	000b      	movs	r3, r1
 8003068:	0010      	movs	r0, r2
 800306a:	0019      	movs	r1, r3
 800306c:	2200      	movs	r2, #0
 800306e:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <PlotPolarData+0x1fc>)
 8003070:	f7fe f856 	bl	8001120 <__aeabi_ddiv>
 8003074:	0002      	movs	r2, r0
 8003076:	000b      	movs	r3, r1
 8003078:	0010      	movs	r0, r2
 800307a:	0019      	movs	r1, r3
 800307c:	4a37      	ldr	r2, [pc, #220]	; (800315c <PlotPolarData+0x200>)
 800307e:	4b38      	ldr	r3, [pc, #224]	; (8003160 <PlotPolarData+0x204>)
 8003080:	f7fe fc48 	bl	8001914 <__aeabi_dmul>
 8003084:	0002      	movs	r2, r0
 8003086:	000b      	movs	r3, r1
 8003088:	0010      	movs	r0, r2
 800308a:	0019      	movs	r1, r3
 800308c:	f007 ff16 	bl	800aebc <cos>
 8003090:	0002      	movs	r2, r0
 8003092:	000b      	movs	r3, r1
 8003094:	6838      	ldr	r0, [r7, #0]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	f7fe fc3c 	bl	8001914 <__aeabi_dmul>
 800309c:	0002      	movs	r2, r0
 800309e:	000b      	movs	r3, r1
 80030a0:	0020      	movs	r0, r4
 80030a2:	0029      	movs	r1, r5
 80030a4:	f7fe fef8 	bl	8001e98 <__aeabi_dsub>
 80030a8:	0002      	movs	r2, r0
 80030aa:	000b      	movs	r3, r1
 80030ac:	0010      	movs	r0, r2
 80030ae:	0019      	movs	r1, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <PlotPolarData+0x208>)
 80030b4:	f007 fe94 	bl	800ade0 <pow>
 80030b8:	0002      	movs	r2, r0
 80030ba:	000b      	movs	r3, r1
 80030bc:	0010      	movs	r0, r2
 80030be:	0019      	movs	r1, r3
 80030c0:	f7ff fb16 	bl	80026f0 <__aeabi_d2f>
 80030c4:	1c03      	adds	r3, r0, #0
 80030c6:	61fb      	str	r3, [r7, #28]
	if (CorrectedDistance < 55)
 80030c8:	4927      	ldr	r1, [pc, #156]	; (8003168 <PlotPolarData+0x20c>)
 80030ca:	69f8      	ldr	r0, [r7, #28]
 80030cc:	f7fd f9fa 	bl	80004c4 <__aeabi_fcmplt>
 80030d0:	1e03      	subs	r3, r0, #0
 80030d2:	d001      	beq.n	80030d8 <PlotPolarData+0x17c>
	{
		CorrectedDistance = 55;
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <PlotPolarData+0x20c>)
 80030d6:	61fb      	str	r3, [r7, #28]
	}
	LidarAngle[SensorNum*13+CurrentZone] = SystemAngle;
 80030d8:	4b1c      	ldr	r3, [pc, #112]	; (800314c <PlotPolarData+0x1f0>)
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	260f      	movs	r6, #15
 80030e0:	19bb      	adds	r3, r7, r6
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	0013      	movs	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	189b      	adds	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	189a      	adds	r2, r3, r2
 80030ee:	250e      	movs	r5, #14
 80030f0:	197b      	adds	r3, r7, r5
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	18d4      	adds	r4, r2, r3
 80030f6:	f7ff fafb 	bl	80026f0 <__aeabi_d2f>
 80030fa:	1c01      	adds	r1, r0, #0
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <PlotPolarData+0x210>)
 80030fe:	00a2      	lsls	r2, r4, #2
 8003100:	50d1      	str	r1, [r2, r3]
	LidarDistance[SensorNum*13+CurrentZone] = (uint16_t)CorrectedDistance;
 8003102:	19bb      	adds	r3, r7, r6
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	0013      	movs	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	189b      	adds	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	189a      	adds	r2, r3, r2
 8003110:	197b      	adds	r3, r7, r5
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	18d4      	adds	r4, r2, r3
 8003116:	69f8      	ldr	r0, [r7, #28]
 8003118:	f7fd f9fc 	bl	8000514 <__aeabi_f2uiz>
 800311c:	0003      	movs	r3, r0
 800311e:	b299      	uxth	r1, r3
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <PlotPolarData+0x214>)
 8003122:	0062      	lsls	r2, r4, #1
 8003124:	52d1      	strh	r1, [r2, r3]
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b009      	add	sp, #36	; 0x24
 800312c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	0000ea60 	.word	0x0000ea60
 8003134:	3d70a3d7 	.word	0x3d70a3d7
 8003138:	3ff3170a 	.word	0x3ff3170a
 800313c:	4003170a 	.word	0x4003170a
 8003140:	4023170a 	.word	0x4023170a
 8003144:	40340000 	.word	0x40340000
 8003148:	40540000 	.word	0x40540000
 800314c:	20000d40 	.word	0x20000d40
 8003150:	40a7a200 	.word	0x40a7a200
 8003154:	405b8000 	.word	0x405b8000
 8003158:	40668000 	.word	0x40668000
 800315c:	c083126f 	.word	0xc083126f
 8003160:	400921ca 	.word	0x400921ca
 8003164:	3fe00000 	.word	0x3fe00000
 8003168:	425c0000 	.word	0x425c0000
 800316c:	20000374 	.word	0x20000374
 8003170:	200006b4 	.word	0x200006b4

08003174 <TurnOnSensor>:

void TurnOnSensor(uint8_t SensorNum)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	0002      	movs	r2, r0
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	701a      	strb	r2, [r3, #0]
	switch (SensorNum)
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d900      	bls.n	800318a <TurnOnSensor+0x16>
 8003188:	e080      	b.n	800328c <TurnOnSensor+0x118>
 800318a:	009a      	lsls	r2, r3, #2
 800318c:	4b41      	ldr	r3, [pc, #260]	; (8003294 <TurnOnSensor+0x120>)
 800318e:	18d3      	adds	r3, r2, r3
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	469f      	mov	pc, r3
	{
		case 0:
			// GPIO PC2
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003194:	4b40      	ldr	r3, [pc, #256]	; (8003298 <TurnOnSensor+0x124>)
 8003196:	2201      	movs	r2, #1
 8003198:	2104      	movs	r1, #4
 800319a:	0018      	movs	r0, r3
 800319c:	f001 fbb6 	bl	800490c <HAL_GPIO_WritePin>
			break;
 80031a0:	e074      	b.n	800328c <TurnOnSensor+0x118>
		case 1:
			// GPIO PC15
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	483c      	ldr	r0, [pc, #240]	; (8003298 <TurnOnSensor+0x124>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	0019      	movs	r1, r3
 80031ac:	f001 fbae 	bl	800490c <HAL_GPIO_WritePin>
			break;
 80031b0:	e06c      	b.n	800328c <TurnOnSensor+0x118>
		case 2:
			// GPIO PC12
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	015b      	lsls	r3, r3, #5
 80031b6:	4838      	ldr	r0, [pc, #224]	; (8003298 <TurnOnSensor+0x124>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	0019      	movs	r1, r3
 80031bc:	f001 fba6 	bl	800490c <HAL_GPIO_WritePin>
			break;
 80031c0:	e064      	b.n	800328c <TurnOnSensor+0x118>
		case 3:
			// GPIO PB9
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4835      	ldr	r0, [pc, #212]	; (800329c <TurnOnSensor+0x128>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	0019      	movs	r1, r3
 80031cc:	f001 fb9e 	bl	800490c <HAL_GPIO_WritePin>
			break;
 80031d0:	e05c      	b.n	800328c <TurnOnSensor+0x118>
		case 4:
			// GPIO PB6
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80031d2:	4b32      	ldr	r3, [pc, #200]	; (800329c <TurnOnSensor+0x128>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	2140      	movs	r1, #64	; 0x40
 80031d8:	0018      	movs	r0, r3
 80031da:	f001 fb97 	bl	800490c <HAL_GPIO_WritePin>
			break;
 80031de:	e055      	b.n	800328c <TurnOnSensor+0x118>
		case 5:
			// GPIO PB3
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <TurnOnSensor+0x128>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	2108      	movs	r1, #8
 80031e6:	0018      	movs	r0, r3
 80031e8:	f001 fb90 	bl	800490c <HAL_GPIO_WritePin>
			break;
 80031ec:	e04e      	b.n	800328c <TurnOnSensor+0x118>
		case 6:
			// GPIO PD2
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80031ee:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <TurnOnSensor+0x12c>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	2104      	movs	r1, #4
 80031f4:	0018      	movs	r0, r3
 80031f6:	f001 fb89 	bl	800490c <HAL_GPIO_WritePin>
			break;
 80031fa:	e047      	b.n	800328c <TurnOnSensor+0x118>
		case 7:
			// GPIO PC9
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4825      	ldr	r0, [pc, #148]	; (8003298 <TurnOnSensor+0x124>)
 8003202:	2201      	movs	r2, #1
 8003204:	0019      	movs	r1, r3
 8003206:	f001 fb81 	bl	800490c <HAL_GPIO_WritePin>
			break;
 800320a:	e03f      	b.n	800328c <TurnOnSensor+0x118>
		case 8:
			// GPIO PA12
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	0159      	lsls	r1, r3, #5
 8003210:	23a0      	movs	r3, #160	; 0xa0
 8003212:	05db      	lsls	r3, r3, #23
 8003214:	2201      	movs	r2, #1
 8003216:	0018      	movs	r0, r3
 8003218:	f001 fb78 	bl	800490c <HAL_GPIO_WritePin>
			break;
 800321c:	e036      	b.n	800328c <TurnOnSensor+0x118>
		case 9:
			// GPIO PC7
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800321e:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <TurnOnSensor+0x124>)
 8003220:	2201      	movs	r2, #1
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	0018      	movs	r0, r3
 8003226:	f001 fb71 	bl	800490c <HAL_GPIO_WritePin>
			break;
 800322a:	e02f      	b.n	800328c <TurnOnSensor+0x118>
		case 10:
			// GPIO PA8
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	0059      	lsls	r1, r3, #1
 8003230:	23a0      	movs	r3, #160	; 0xa0
 8003232:	05db      	lsls	r3, r3, #23
 8003234:	2201      	movs	r2, #1
 8003236:	0018      	movs	r0, r3
 8003238:	f001 fb68 	bl	800490c <HAL_GPIO_WritePin>
			break;
 800323c:	e026      	b.n	800328c <TurnOnSensor+0x118>
		case 11:
			// GPIO PB13
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	4816      	ldr	r0, [pc, #88]	; (800329c <TurnOnSensor+0x128>)
 8003244:	2201      	movs	r2, #1
 8003246:	0019      	movs	r1, r3
 8003248:	f001 fb60 	bl	800490c <HAL_GPIO_WritePin>
			break;
 800324c:	e01e      	b.n	800328c <TurnOnSensor+0x118>
		case 12:
			// GPIO PB10
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4812      	ldr	r0, [pc, #72]	; (800329c <TurnOnSensor+0x128>)
 8003254:	2201      	movs	r2, #1
 8003256:	0019      	movs	r1, r3
 8003258:	f001 fb58 	bl	800490c <HAL_GPIO_WritePin>
			break;
 800325c:	e016      	b.n	800328c <TurnOnSensor+0x118>
		case 13:
			// GPIO PB0
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <TurnOnSensor+0x128>)
 8003260:	2201      	movs	r2, #1
 8003262:	2101      	movs	r1, #1
 8003264:	0018      	movs	r0, r3
 8003266:	f001 fb51 	bl	800490c <HAL_GPIO_WritePin>
			break;
 800326a:	e00f      	b.n	800328c <TurnOnSensor+0x118>
		case 14:
			// GPIO PA7
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800326c:	23a0      	movs	r3, #160	; 0xa0
 800326e:	05db      	lsls	r3, r3, #23
 8003270:	2201      	movs	r2, #1
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	0018      	movs	r0, r3
 8003276:	f001 fb49 	bl	800490c <HAL_GPIO_WritePin>
			break;
 800327a:	e007      	b.n	800328c <TurnOnSensor+0x118>
		case 15:
			// GPIO PA4
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800327c:	23a0      	movs	r3, #160	; 0xa0
 800327e:	05db      	lsls	r3, r3, #23
 8003280:	2201      	movs	r2, #1
 8003282:	2110      	movs	r1, #16
 8003284:	0018      	movs	r0, r3
 8003286:	f001 fb41 	bl	800490c <HAL_GPIO_WritePin>
			break;
 800328a:	46c0      	nop			; (mov r8, r8)


	}
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}
 8003294:	0800cc4c 	.word	0x0800cc4c
 8003298:	50000800 	.word	0x50000800
 800329c:	50000400 	.word	0x50000400
 80032a0:	50000c00 	.word	0x50000c00

080032a4 <ResetAllSensors>:

void ResetAllSensors(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);  // Capt 0
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <ResetAllSensors+0xe0>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	2104      	movs	r1, #4
 80032ae:	0018      	movs	r0, r3
 80032b0:	f001 fb2c 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Capt 1
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	4832      	ldr	r0, [pc, #200]	; (8003384 <ResetAllSensors+0xe0>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	0019      	movs	r1, r3
 80032be:	f001 fb25 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Capt 2
 80032c2:	4b31      	ldr	r3, [pc, #196]	; (8003388 <ResetAllSensors+0xe4>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	2101      	movs	r1, #1
 80032c8:	0018      	movs	r0, r3
 80032ca:	f001 fb1f 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);  // Capt 3
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	482d      	ldr	r0, [pc, #180]	; (8003388 <ResetAllSensors+0xe4>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	0019      	movs	r1, r3
 80032d8:	f001 fb18 	bl	800490c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // Capt 4
 80032dc:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <ResetAllSensors+0xe4>)
 80032de:	2200      	movs	r2, #0
 80032e0:	2140      	movs	r1, #64	; 0x40
 80032e2:	0018      	movs	r0, r3
 80032e4:	f001 fb12 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);  // Capt 5
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <ResetAllSensors+0xe4>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	2108      	movs	r1, #8
 80032ee:	0018      	movs	r0, r3
 80032f0:	f001 fb0c 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);  // Capt 6
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <ResetAllSensors+0xe8>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	2104      	movs	r1, #4
 80032fa:	0018      	movs	r0, r3
 80032fc:	f001 fb06 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  // Capt 7
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	481f      	ldr	r0, [pc, #124]	; (8003384 <ResetAllSensors+0xe0>)
 8003306:	2200      	movs	r2, #0
 8003308:	0019      	movs	r1, r3
 800330a:	f001 faff 	bl	800490c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Capt 8
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	0159      	lsls	r1, r3, #5
 8003312:	23a0      	movs	r3, #160	; 0xa0
 8003314:	05db      	lsls	r3, r3, #23
 8003316:	2200      	movs	r2, #0
 8003318:	0018      	movs	r0, r3
 800331a:	f001 faf7 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);  // Capt 9
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <ResetAllSensors+0xe0>)
 8003320:	2200      	movs	r2, #0
 8003322:	2180      	movs	r1, #128	; 0x80
 8003324:	0018      	movs	r0, r3
 8003326:	f001 faf1 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  // Capt 10
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	0059      	lsls	r1, r3, #1
 800332e:	23a0      	movs	r3, #160	; 0xa0
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	2200      	movs	r2, #0
 8003334:	0018      	movs	r0, r3
 8003336:	f001 fae9 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Capt 11
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	4812      	ldr	r0, [pc, #72]	; (8003388 <ResetAllSensors+0xe4>)
 8003340:	2200      	movs	r2, #0
 8003342:	0019      	movs	r1, r3
 8003344:	f001 fae2 	bl	800490c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Capt 12
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	480e      	ldr	r0, [pc, #56]	; (8003388 <ResetAllSensors+0xe4>)
 800334e:	2200      	movs	r2, #0
 8003350:	0019      	movs	r1, r3
 8003352:	f001 fadb 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Capt 13
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <ResetAllSensors+0xe4>)
 8003358:	2200      	movs	r2, #0
 800335a:	2101      	movs	r1, #1
 800335c:	0018      	movs	r0, r3
 800335e:	f001 fad5 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);  // Capt 14
 8003362:	23a0      	movs	r3, #160	; 0xa0
 8003364:	05db      	lsls	r3, r3, #23
 8003366:	2200      	movs	r2, #0
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	0018      	movs	r0, r3
 800336c:	f001 face 	bl	800490c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Capt 15
 8003370:	23a0      	movs	r3, #160	; 0xa0
 8003372:	05db      	lsls	r3, r3, #23
 8003374:	2200      	movs	r2, #0
 8003376:	2110      	movs	r1, #16
 8003378:	0018      	movs	r0, r3
 800337a:	f001 fac7 	bl	800490c <HAL_GPIO_WritePin>
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	50000800 	.word	0x50000800
 8003388:	50000400 	.word	0x50000400
 800338c:	50000c00 	.word	0x50000c00

08003390 <SendOneROIMesurement>:
	}*/
	setInactiveCaptors(0);
	setActiveCaptors(1);
}

void SendOneROIMesurement(uint32_t TotalTime, uint8_t selectedZone){
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	000a      	movs	r2, r1
 800339a:	1cfb      	adds	r3, r7, #3
 800339c:	701a      	strb	r2, [r3, #0]
	UART_Send_Mesures(LidarDistance , selectedZone, TotalTime);
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	1cfb      	adds	r3, r7, #3
 80033a2:	7819      	ldrb	r1, [r3, #0]
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <SendOneROIMesurement+0x30>)
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 fdc4 	bl	8003f34 <UART_Send_Mesures>
		UART_Print(SmallBuff);
		UART_Print(BigBuff);


	}*/
	setInactiveCaptors(0);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7ff fc73 	bl	8002c98 <setInactiveCaptors>
	setActiveCaptors(1);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7ff fc46 	bl	8002c44 <setActiveCaptors>
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200006b4 	.word	0x200006b4

080033c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	VL53L1X_ERROR error = 0;
 80033ca:	231f      	movs	r3, #31
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
	uint32_t i=0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033d6:	f000 ff97 	bl	8004308 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033da:	f000 f9bf 	bl	800375c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033de:	f000 faeb 	bl	80039b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80033e2:	f000 fa91 	bl	8003908 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80033e6:	f000 fa0f 	bl	8003808 <MX_I2C1_Init>
  MX_TIM6_Init();
 80033ea:	f000 fa4f 	bl	800388c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ResetAndInitializeAllSensors();
 80033ee:	f7ff fc7d 	bl	8002cec <ResetAndInitializeAllSensors>
  LEDs_init();
 80033f2:	f7ff fa21 	bl	8002838 <LEDs_init>
  HAL_TIM_Base_Start_IT(&htim6);
 80033f6:	4bce      	ldr	r3, [pc, #824]	; (8003730 <main+0x36c>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f002 ff29 	bl	8006250 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	error = 0;
 80033fe:	231f      	movs	r3, #31
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
		TimeStart = HAL_GetTick();
 8003406:	f000 fffb 	bl	8004400 <HAL_GetTick>
 800340a:	0003      	movs	r3, r0
 800340c:	613b      	str	r3, [r7, #16]
		Timeout = 0;
 800340e:	2315      	movs	r3, #21
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
		for(Zone = 0; Zone < NumOfZonesPerSensor; Zone++)
 8003416:	2317      	movs	r3, #23
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	e15d      	b.n	80036dc <main+0x318>
		{
			for (Sensor=0; Sensor < NumOfTOFSensors ; Sensor++)
 8003420:	2316      	movs	r3, #22
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	e021      	b.n	800346e <main+0xaa>
			{
				if((ActiveCaptors>>Sensor)&1)
 800342a:	4bc2      	ldr	r3, [pc, #776]	; (8003734 <main+0x370>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	001a      	movs	r2, r3
 8003430:	2116      	movs	r1, #22
 8003432:	187b      	adds	r3, r7, r1
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	411a      	asrs	r2, r3
 8003438:	0013      	movs	r3, r2
 800343a:	2201      	movs	r2, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d010      	beq.n	8003462 <main+0x9e>
					WriteRegister8(Devs[Sensor], ROI_CONFIG__USER_ROI_CENTRE_SPAD, zone_center[Zone+1] - 0);
 8003440:	187b      	adds	r3, r7, r1
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	4bbc      	ldr	r3, [pc, #752]	; (8003738 <main+0x374>)
 8003446:	0052      	lsls	r2, r2, #1
 8003448:	5ad0      	ldrh	r0, [r2, r3]
 800344a:	2317      	movs	r3, #23
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	4bba      	ldr	r3, [pc, #744]	; (800373c <main+0x378>)
 8003454:	0052      	lsls	r2, r2, #1
 8003456:	5ad3      	ldrh	r3, [r2, r3]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	001a      	movs	r2, r3
 800345c:	217f      	movs	r1, #127	; 0x7f
 800345e:	f004 fd69 	bl	8007f34 <WriteRegister8>
			for (Sensor=0; Sensor < NumOfTOFSensors ; Sensor++)
 8003462:	2116      	movs	r1, #22
 8003464:	187b      	adds	r3, r7, r1
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	187b      	adds	r3, r7, r1
 800346a:	3201      	adds	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	2216      	movs	r2, #22
 8003470:	18bb      	adds	r3, r7, r2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b0f      	cmp	r3, #15
 8003476:	d9d8      	bls.n	800342a <main+0x66>
			}
			i=i+1;
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	3301      	adds	r3, #1
 800347c:	61bb      	str	r3, [r7, #24]
			for (Sensor=0; Sensor < NumOfTOFSensors ; Sensor++)
 800347e:	18bb      	adds	r3, r7, r2
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e107      	b.n	8003696 <main+0x2d2>
			{
				if((ActiveCaptors>>Sensor)&1){
 8003486:	4bab      	ldr	r3, [pc, #684]	; (8003734 <main+0x370>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	001a      	movs	r2, r3
 800348c:	2116      	movs	r1, #22
 800348e:	187b      	adds	r3, r7, r1
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	411a      	asrs	r2, r3
 8003494:	0013      	movs	r3, r2
 8003496:	2201      	movs	r2, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d100      	bne.n	800349e <main+0xda>
 800349c:	e0f5      	b.n	800368a <main+0x2c6>
					error = VL53L1X_CheckForDataReady(Devs[Sensor], &Sensorcheck);
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	4ba5      	ldr	r3, [pc, #660]	; (8003738 <main+0x374>)
 80034a4:	0052      	lsls	r2, r2, #1
 80034a6:	5ad3      	ldrh	r3, [r2, r3]
 80034a8:	221f      	movs	r2, #31
 80034aa:	18bc      	adds	r4, r7, r2
 80034ac:	1cfa      	adds	r2, r7, #3
 80034ae:	0011      	movs	r1, r2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f004 f816 	bl	80074e2 <VL53L1X_CheckForDataReady>
 80034b6:	0003      	movs	r3, r0
 80034b8:	7023      	strb	r3, [r4, #0]
					while ((Sensorcheck == 0) && (Timeout == 0))
 80034ba:	e034      	b.n	8003526 <main+0x162>
					{
						HAL_Delay(1);
 80034bc:	2001      	movs	r0, #1
 80034be:	f000 ffa9 	bl	8004414 <HAL_Delay>
						CurrentTime = HAL_GetTick();
 80034c2:	f000 ff9d 	bl	8004400 <HAL_GetTick>
 80034c6:	0003      	movs	r3, r0
 80034c8:	607b      	str	r3, [r7, #4]
						if (CurrentTime > (TimeStart + (NumOfZonesPerSensor + 1) * TimingBudget * 2))
 80034ca:	4b9d      	ldr	r3, [pc, #628]	; (8003740 <main+0x37c>)
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	001a      	movs	r2, r3
 80034d0:	0013      	movs	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	001a      	movs	r2, r3
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	18d3      	adds	r3, r2, r3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d90c      	bls.n	80034fe <main+0x13a>
						{
							Timeout = 1;
 80034e4:	2315      	movs	r3, #21
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
							Sensor = NumOfTOFSensors;
 80034ec:	2316      	movs	r3, #22
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	2210      	movs	r2, #16
 80034f2:	701a      	strb	r2, [r3, #0]
							Zone = NumOfZonesPerSensor;
 80034f4:	2317      	movs	r3, #23
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	220d      	movs	r2, #13
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e013      	b.n	8003526 <main+0x162>
						}
						else
						{
							error += VL53L1X_CheckForDataReady(Devs[Sensor], &Sensorcheck);
 80034fe:	2316      	movs	r3, #22
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	4b8c      	ldr	r3, [pc, #560]	; (8003738 <main+0x374>)
 8003506:	0052      	lsls	r2, r2, #1
 8003508:	5ad3      	ldrh	r3, [r2, r3]
 800350a:	1cfa      	adds	r2, r7, #3
 800350c:	0011      	movs	r1, r2
 800350e:	0018      	movs	r0, r3
 8003510:	f003 ffe7 	bl	80074e2 <VL53L1X_CheckForDataReady>
 8003514:	0003      	movs	r3, r0
 8003516:	b2da      	uxtb	r2, r3
 8003518:	211f      	movs	r1, #31
 800351a:	187b      	adds	r3, r7, r1
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	18d3      	adds	r3, r2, r3
 8003520:	b2da      	uxtb	r2, r3
 8003522:	187b      	adds	r3, r7, r1
 8003524:	701a      	strb	r2, [r3, #0]
					while ((Sensorcheck == 0) && (Timeout == 0))
 8003526:	1cfb      	adds	r3, r7, #3
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <main+0x174>
 800352e:	2315      	movs	r3, #21
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0c1      	beq.n	80034bc <main+0xf8>
						}
					}


				if (Timeout == 0)
 8003538:	2315      	movs	r3, #21
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d000      	beq.n	8003544 <main+0x180>
 8003542:	e0a2      	b.n	800368a <main+0x2c6>
				{
					WriteRegister8(Devs[Sensor], ROI_CONFIG__USER_ROI_CENTRE_SPAD, zone_center[Zone+1] - 0);
 8003544:	2416      	movs	r4, #22
 8003546:	193b      	adds	r3, r7, r4
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	4b7b      	ldr	r3, [pc, #492]	; (8003738 <main+0x374>)
 800354c:	0052      	lsls	r2, r2, #1
 800354e:	5ad0      	ldrh	r0, [r2, r3]
 8003550:	2617      	movs	r6, #23
 8003552:	19bb      	adds	r3, r7, r6
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	4b78      	ldr	r3, [pc, #480]	; (800373c <main+0x378>)
 800355a:	0052      	lsls	r2, r2, #1
 800355c:	5ad3      	ldrh	r3, [r2, r3]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	001a      	movs	r2, r3
 8003562:	217f      	movs	r1, #127	; 0x7f
 8003564:	f004 fce6 	bl	8007f34 <WriteRegister8>
					TimeStamp[Sensor*13+ Zone] = HAL_GetTick();
 8003568:	0025      	movs	r5, r4
 800356a:	193b      	adds	r3, r7, r4
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	0013      	movs	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	189b      	adds	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	189a      	adds	r2, r3, r2
 8003578:	19bb      	adds	r3, r7, r6
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	18d4      	adds	r4, r2, r3
 800357e:	f000 ff3f 	bl	8004400 <HAL_GetTick>
 8003582:	0001      	movs	r1, r0
 8003584:	4b6f      	ldr	r3, [pc, #444]	; (8003744 <main+0x380>)
 8003586:	00a2      	lsls	r2, r4, #2
 8003588:	50d1      	str	r1, [r2, r3]
					VL53L1X_ClearInterrupt(Devs[Sensor]);
 800358a:	002c      	movs	r4, r5
 800358c:	193b      	adds	r3, r7, r4
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	4b69      	ldr	r3, [pc, #420]	; (8003738 <main+0x374>)
 8003592:	0052      	lsls	r2, r2, #1
 8003594:	5ad3      	ldrh	r3, [r2, r3]
 8003596:	0018      	movs	r0, r3
 8003598:	f003 ff24 	bl	80073e4 <VL53L1X_ClearInterrupt>

					error += VL53L1X_GetDistance(Devs[Sensor], &Distance);
 800359c:	193b      	adds	r3, r7, r4
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	4b65      	ldr	r3, [pc, #404]	; (8003738 <main+0x374>)
 80035a2:	0052      	lsls	r2, r2, #1
 80035a4:	5ad3      	ldrh	r3, [r2, r3]
 80035a6:	4a68      	ldr	r2, [pc, #416]	; (8003748 <main+0x384>)
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f004 fb16 	bl	8007bdc <VL53L1X_GetDistance>
 80035b0:	0003      	movs	r3, r0
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	251f      	movs	r5, #31
 80035b6:	197b      	adds	r3, r7, r5
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	18d3      	adds	r3, r2, r3
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	197b      	adds	r3, r7, r5
 80035c0:	701a      	strb	r2, [r3, #0]
					error += VL53L1X_GetRangeStatus(Devs[Sensor], &RangeStatus);
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	4b5c      	ldr	r3, [pc, #368]	; (8003738 <main+0x374>)
 80035c8:	0052      	lsls	r2, r2, #1
 80035ca:	5ad3      	ldrh	r3, [r2, r3]
 80035cc:	4a5f      	ldr	r2, [pc, #380]	; (800374c <main+0x388>)
 80035ce:	0011      	movs	r1, r2
 80035d0:	0018      	movs	r0, r3
 80035d2:	f004 fb25 	bl	8007c20 <VL53L1X_GetRangeStatus>
 80035d6:	0003      	movs	r3, r0
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	197b      	adds	r3, r7, r5
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	18d3      	adds	r3, r2, r3
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	197b      	adds	r3, r7, r5
 80035e4:	701a      	strb	r2, [r3, #0]
					if ((RangeStatus== 0) || (RangeStatus == 7))
 80035e6:	4b59      	ldr	r3, [pc, #356]	; (800374c <main+0x388>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <main+0x232>
 80035ee:	4b57      	ldr	r3, [pc, #348]	; (800374c <main+0x388>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b07      	cmp	r3, #7
 80035f4:	d13d      	bne.n	8003672 <main+0x2ae>
					{
						if (Distance > 60000)
 80035f6:	4b54      	ldr	r3, [pc, #336]	; (8003748 <main+0x384>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	4a55      	ldr	r2, [pc, #340]	; (8003750 <main+0x38c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d90d      	bls.n	800361c <main+0x258>
						{
							Distance = 0;
 8003600:	4b51      	ldr	r3, [pc, #324]	; (8003748 <main+0x384>)
 8003602:	2200      	movs	r2, #0
 8003604:	801a      	strh	r2, [r3, #0]
							PlotPolarData(Sensor, Zone, 13, 0);
 8003606:	2317      	movs	r3, #23
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	7819      	ldrb	r1, [r3, #0]
 800360c:	2316      	movs	r3, #22
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	7818      	ldrb	r0, [r3, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	220d      	movs	r2, #13
 8003616:	f7ff fca1 	bl	8002f5c <PlotPolarData>
						if (Distance > 60000)
 800361a:	e036      	b.n	800368a <main+0x2c6>
						}
						else
						{
							Distance = Distance + OffsetCal[Sensor*13 + Zone];
 800361c:	2316      	movs	r3, #22
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	0013      	movs	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	189b      	adds	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	189a      	adds	r2, r3, r2
 800362c:	2317      	movs	r3, #23
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	18d2      	adds	r2, r2, r3
 8003634:	4b47      	ldr	r3, [pc, #284]	; (8003754 <main+0x390>)
 8003636:	0052      	lsls	r2, r2, #1
 8003638:	5ed3      	ldrsh	r3, [r2, r3]
 800363a:	b29a      	uxth	r2, r3
 800363c:	4b42      	ldr	r3, [pc, #264]	; (8003748 <main+0x384>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	18d3      	adds	r3, r2, r3
 8003642:	b29a      	uxth	r2, r3
 8003644:	4b40      	ldr	r3, [pc, #256]	; (8003748 <main+0x384>)
 8003646:	801a      	strh	r2, [r3, #0]
							if (Distance > 60000)
 8003648:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <main+0x384>)
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	4a40      	ldr	r2, [pc, #256]	; (8003750 <main+0x38c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d902      	bls.n	8003658 <main+0x294>
							{
								Distance = 0;
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <main+0x384>)
 8003654:	2200      	movs	r2, #0
 8003656:	801a      	strh	r2, [r3, #0]
							}
							PlotPolarData(Sensor, Zone, 13, Distance);
 8003658:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <main+0x384>)
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	2317      	movs	r3, #23
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	7819      	ldrb	r1, [r3, #0]
 8003662:	2316      	movs	r3, #22
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	7818      	ldrb	r0, [r3, #0]
 8003668:	0013      	movs	r3, r2
 800366a:	220d      	movs	r2, #13
 800366c:	f7ff fc76 	bl	8002f5c <PlotPolarData>
						if (Distance > 60000)
 8003670:	e00b      	b.n	800368a <main+0x2c6>
						}
					}
					else
					{
						PlotPolarData(Sensor, Zone, 13, 4000);
 8003672:	23fa      	movs	r3, #250	; 0xfa
 8003674:	011a      	lsls	r2, r3, #4
 8003676:	2317      	movs	r3, #23
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	7819      	ldrb	r1, [r3, #0]
 800367c:	2316      	movs	r3, #22
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	7818      	ldrb	r0, [r3, #0]
 8003682:	0013      	movs	r3, r2
 8003684:	220d      	movs	r2, #13
 8003686:	f7ff fc69 	bl	8002f5c <PlotPolarData>
			for (Sensor=0; Sensor < NumOfTOFSensors ; Sensor++)
 800368a:	2116      	movs	r1, #22
 800368c:	187b      	adds	r3, r7, r1
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	187b      	adds	r3, r7, r1
 8003692:	3201      	adds	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	2316      	movs	r3, #22
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d800      	bhi.n	80036a2 <main+0x2de>
 80036a0:	e6f1      	b.n	8003486 <main+0xc2>
					}
				}
				}
			}
			toggleInactiveCaptors();
 80036a2:	f7ff f9d7 	bl	8002a54 <toggleInactiveCaptors>
			if(Timeout != 1){
 80036a6:	2315      	movs	r3, #21
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d00f      	beq.n	80036d0 <main+0x30c>
				TimeEnd = HAL_GetTick();;
 80036b0:	f000 fea6 	bl	8004400 <HAL_GetTick>
 80036b4:	0003      	movs	r3, r0
 80036b6:	60fb      	str	r3, [r7, #12]
				TotalTime = (TimeEnd - TimeStart);
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	60bb      	str	r3, [r7, #8]
				SendOneROIMesurement(TotalTime, Zone);
 80036c0:	2317      	movs	r3, #23
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7ff fe60 	bl	8003390 <SendOneROIMesurement>
		for(Zone = 0; Zone < NumOfZonesPerSensor; Zone++)
 80036d0:	2117      	movs	r1, #23
 80036d2:	187b      	adds	r3, r7, r1
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	3201      	adds	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	2317      	movs	r3, #23
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d800      	bhi.n	80036e8 <main+0x324>
 80036e6:	e69b      	b.n	8003420 <main+0x5c>
			}
		}
		if (Timeout == 1)
 80036e8:	2415      	movs	r4, #21
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <main+0x33a>
		{
			ResetAndInitializeAllSensors();
 80036f2:	f7ff fafb 	bl	8002cec <ResetAndInitializeAllSensors>
			Timeout = 0;
 80036f6:	193b      	adds	r3, r7, r4
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e00c      	b.n	8003718 <main+0x354>
			//UART_Print("Reset Performed\n");
		}
		else
		{
			HAL_Delay(TimingBudget);
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <main+0x37c>)
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	0018      	movs	r0, r3
 8003704:	f000 fe86 	bl	8004414 <HAL_Delay>
			TimeEnd = HAL_GetTick();;
 8003708:	f000 fe7a 	bl	8004400 <HAL_GetTick>
 800370c:	0003      	movs	r3, r0
 800370e:	60fb      	str	r3, [r7, #12]
			TotalTime = (TimeEnd - TimeStart);
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	60bb      	str	r3, [r7, #8]
			//snprintf(BigBuff, sizeof(BigBuff), "Time: %ld\n", TotalTime);
			//UART_Print(BigBuff);
			//SendAllMesurements(TotalTime);
		}
		if (error !=0)
 8003718:	231f      	movs	r3, #31
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	b25b      	sxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d100      	bne.n	8003726 <main+0x362>
 8003724:	e66b      	b.n	80033fe <main+0x3a>
		{
			UART_Print("Some Errors seen\n");
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <main+0x394>)
 8003728:	0018      	movs	r0, r3
 800372a:	f004 fde7 	bl	80082fc <UART_Print>
	  	error = 0;
 800372e:	e666      	b.n	80033fe <main+0x3a>
 8003730:	20000298 	.word	0x20000298
 8003734:	2000004a 	.word	0x2000004a
 8003738:	20000004 	.word	0x20000004
 800373c:	20000024 	.word	0x20000024
 8003740:	20000048 	.word	0x20000048
 8003744:	20000854 	.word	0x20000854
 8003748:	20000b94 	.word	0x20000b94
 800374c:	20000b96 	.word	0x20000b96
 8003750:	0000ea60 	.word	0x0000ea60
 8003754:	20000b98 	.word	0x20000b98
 8003758:	0800cb70 	.word	0x0800cb70

0800375c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b093      	sub	sp, #76	; 0x4c
 8003760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003762:	2414      	movs	r4, #20
 8003764:	193b      	adds	r3, r7, r4
 8003766:	0018      	movs	r0, r3
 8003768:	2334      	movs	r3, #52	; 0x34
 800376a:	001a      	movs	r2, r3
 800376c:	2100      	movs	r1, #0
 800376e:	f005 fb57 	bl	8008e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	0018      	movs	r0, r3
 8003776:	2310      	movs	r3, #16
 8003778:	001a      	movs	r2, r3
 800377a:	2100      	movs	r1, #0
 800377c:	f005 fb50 	bl	8008e20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	0018      	movs	r0, r3
 8003786:	f001 fed3 	bl	8005530 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800378a:	193b      	adds	r3, r7, r4
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003790:	193b      	adds	r3, r7, r4
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	0252      	lsls	r2, r2, #9
 8003796:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003798:	0021      	movs	r1, r4
 800379a:	187b      	adds	r3, r7, r1
 800379c:	2202      	movs	r2, #2
 800379e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	2203      	movs	r2, #3
 80037a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	2200      	movs	r2, #0
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2208      	movs	r2, #8
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037b2:	187b      	adds	r3, r7, r1
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	0292      	lsls	r2, r2, #10
 80037b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	0592      	lsls	r2, r2, #22
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	0018      	movs	r0, r3
 80037c6:	f001 feff 	bl	80055c8 <HAL_RCC_OscConfig>
 80037ca:	1e03      	subs	r3, r0, #0
 80037cc:	d001      	beq.n	80037d2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80037ce:	f000 f9b1 	bl	8003b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	2207      	movs	r2, #7
 80037d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	2202      	movs	r2, #2
 80037dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	2200      	movs	r2, #0
 80037ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	2101      	movs	r1, #1
 80037f0:	0018      	movs	r0, r3
 80037f2:	f002 f9f9 	bl	8005be8 <HAL_RCC_ClockConfig>
 80037f6:	1e03      	subs	r3, r0, #0
 80037f8:	d001      	beq.n	80037fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80037fa:	f000 f99b 	bl	8003b34 <Error_Handler>
  }
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b013      	add	sp, #76	; 0x4c
 8003804:	bd90      	pop	{r4, r7, pc}
	...

08003808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800380c:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <MX_I2C1_Init+0x78>)
 800380e:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <MX_I2C1_Init+0x7c>)
 8003810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8003812:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <MX_I2C1_Init+0x78>)
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <MX_I2C1_Init+0x80>)
 8003816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003818:	4b19      	ldr	r3, [pc, #100]	; (8003880 <MX_I2C1_Init+0x78>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800381e:	4b18      	ldr	r3, [pc, #96]	; (8003880 <MX_I2C1_Init+0x78>)
 8003820:	2201      	movs	r2, #1
 8003822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003824:	4b16      	ldr	r3, [pc, #88]	; (8003880 <MX_I2C1_Init+0x78>)
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <MX_I2C1_Init+0x78>)
 800382c:	2200      	movs	r2, #0
 800382e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <MX_I2C1_Init+0x78>)
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <MX_I2C1_Init+0x78>)
 8003838:	2200      	movs	r2, #0
 800383a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800383c:	4b10      	ldr	r3, [pc, #64]	; (8003880 <MX_I2C1_Init+0x78>)
 800383e:	2200      	movs	r2, #0
 8003840:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <MX_I2C1_Init+0x78>)
 8003844:	0018      	movs	r0, r3
 8003846:	f001 f899 	bl	800497c <HAL_I2C_Init>
 800384a:	1e03      	subs	r3, r0, #0
 800384c:	d001      	beq.n	8003852 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800384e:	f000 f971 	bl	8003b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <MX_I2C1_Init+0x78>)
 8003854:	2100      	movs	r1, #0
 8003856:	0018      	movs	r0, r3
 8003858:	f001 fdd2 	bl	8005400 <HAL_I2CEx_ConfigAnalogFilter>
 800385c:	1e03      	subs	r3, r0, #0
 800385e:	d001      	beq.n	8003864 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003860:	f000 f968 	bl	8003b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <MX_I2C1_Init+0x78>)
 8003866:	2100      	movs	r1, #0
 8003868:	0018      	movs	r0, r3
 800386a:	f001 fe15 	bl	8005498 <HAL_I2CEx_ConfigDigitalFilter>
 800386e:	1e03      	subs	r3, r0, #0
 8003870:	d001      	beq.n	8003876 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003872:	f000 f95f 	bl	8003b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  I2C_Init();
 8003876:	f004 fc99 	bl	80081ac <I2C_Init>
  /* USER CODE END I2C1_Init 2 */

}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	2000024c 	.word	0x2000024c
 8003884:	40005400 	.word	0x40005400
 8003888:	00300f38 	.word	0x00300f38

0800388c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	0018      	movs	r0, r3
 8003896:	230c      	movs	r3, #12
 8003898:	001a      	movs	r2, r3
 800389a:	2100      	movs	r1, #0
 800389c:	f005 fac0 	bl	8008e20 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <MX_TIM6_Init+0x6c>)
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <MX_TIM6_Init+0x70>)
 80038a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <MX_TIM6_Init+0x6c>)
 80038a8:	4a15      	ldr	r2, [pc, #84]	; (8003900 <MX_TIM6_Init+0x74>)
 80038aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <MX_TIM6_Init+0x6c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <MX_TIM6_Init+0x6c>)
 80038b4:	4a13      	ldr	r2, [pc, #76]	; (8003904 <MX_TIM6_Init+0x78>)
 80038b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <MX_TIM6_Init+0x6c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <MX_TIM6_Init+0x6c>)
 80038c0:	0018      	movs	r0, r3
 80038c2:	f002 fc6d 	bl	80061a0 <HAL_TIM_Base_Init>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d001      	beq.n	80038ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80038ca:	f000 f933 	bl	8003b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80038da:	1d3a      	adds	r2, r7, #4
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <MX_TIM6_Init+0x6c>)
 80038de:	0011      	movs	r1, r2
 80038e0:	0018      	movs	r0, r3
 80038e2:	f002 fedb 	bl	800669c <HAL_TIMEx_MasterConfigSynchronization>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80038ea:	f000 f923 	bl	8003b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	20000298 	.word	0x20000298
 80038fc:	40001000 	.word	0x40001000
 8003900:	00000f9f 	.word	0x00000f9f
 8003904:	0000ffff 	.word	0x0000ffff

08003908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800390c:	4b28      	ldr	r3, [pc, #160]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 800390e:	4a29      	ldr	r2, [pc, #164]	; (80039b4 <MX_USART2_UART_Init+0xac>)
 8003910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003912:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003914:	22e1      	movs	r2, #225	; 0xe1
 8003916:	0252      	lsls	r2, r2, #9
 8003918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800391a:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003920:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800392c:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 800392e:	220c      	movs	r2, #12
 8003930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 800393a:	2200      	movs	r2, #0
 800393c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800393e:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003940:	2200      	movs	r2, #0
 8003942:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003946:	2200      	movs	r2, #0
 8003948:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800394a:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 800394c:	2230      	movs	r2, #48	; 0x30
 800394e:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	0152      	lsls	r2, r2, #5
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	0192      	lsls	r2, r2, #6
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003962:	0018      	movs	r0, r3
 8003964:	f002 ff1a 	bl	800679c <HAL_UART_Init>
 8003968:	1e03      	subs	r3, r0, #0
 800396a:	d001      	beq.n	8003970 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 800396c:	f000 f8e2 	bl	8003b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003972:	2100      	movs	r1, #0
 8003974:	0018      	movs	r0, r3
 8003976:	f003 fbb7 	bl	80070e8 <HAL_UARTEx_SetTxFifoThreshold>
 800397a:	1e03      	subs	r3, r0, #0
 800397c:	d001      	beq.n	8003982 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800397e:	f000 f8d9 	bl	8003b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003982:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003984:	2100      	movs	r1, #0
 8003986:	0018      	movs	r0, r3
 8003988:	f003 fbee 	bl	8007168 <HAL_UARTEx_SetRxFifoThreshold>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d001      	beq.n	8003994 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003990:	f000 f8d0 	bl	8003b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <MX_USART2_UART_Init+0xa8>)
 8003996:	0018      	movs	r0, r3
 8003998:	f003 fb6c 	bl	8007074 <HAL_UARTEx_DisableFifoMode>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d001      	beq.n	80039a4 <MX_USART2_UART_Init+0x9c>
  {
    Error_Handler();
 80039a0:	f000 f8c8 	bl	8003b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  UART_Init();
 80039a4:	f004 fc48 	bl	8008238 <UART_Init>
  /* USER CODE END USART2_Init 2 */

}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	200002e4 	.word	0x200002e4
 80039b4:	40004400 	.word	0x40004400

080039b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b08b      	sub	sp, #44	; 0x2c
 80039bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039be:	2414      	movs	r4, #20
 80039c0:	193b      	adds	r3, r7, r4
 80039c2:	0018      	movs	r0, r3
 80039c4:	2314      	movs	r3, #20
 80039c6:	001a      	movs	r2, r3
 80039c8:	2100      	movs	r1, #0
 80039ca:	f005 fa29 	bl	8008e20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ce:	4b52      	ldr	r3, [pc, #328]	; (8003b18 <MX_GPIO_Init+0x160>)
 80039d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d2:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <MX_GPIO_Init+0x160>)
 80039d4:	2104      	movs	r1, #4
 80039d6:	430a      	orrs	r2, r1
 80039d8:	635a      	str	r2, [r3, #52]	; 0x34
 80039da:	4b4f      	ldr	r3, [pc, #316]	; (8003b18 <MX_GPIO_Init+0x160>)
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039de:	2204      	movs	r2, #4
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039e6:	4b4c      	ldr	r3, [pc, #304]	; (8003b18 <MX_GPIO_Init+0x160>)
 80039e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ea:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <MX_GPIO_Init+0x160>)
 80039ec:	2120      	movs	r1, #32
 80039ee:	430a      	orrs	r2, r1
 80039f0:	635a      	str	r2, [r3, #52]	; 0x34
 80039f2:	4b49      	ldr	r3, [pc, #292]	; (8003b18 <MX_GPIO_Init+0x160>)
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	2220      	movs	r2, #32
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fe:	4b46      	ldr	r3, [pc, #280]	; (8003b18 <MX_GPIO_Init+0x160>)
 8003a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a02:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <MX_GPIO_Init+0x160>)
 8003a04:	2101      	movs	r1, #1
 8003a06:	430a      	orrs	r2, r1
 8003a08:	635a      	str	r2, [r3, #52]	; 0x34
 8003a0a:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <MX_GPIO_Init+0x160>)
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4013      	ands	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a16:	4b40      	ldr	r3, [pc, #256]	; (8003b18 <MX_GPIO_Init+0x160>)
 8003a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <MX_GPIO_Init+0x160>)
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	635a      	str	r2, [r3, #52]	; 0x34
 8003a22:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <MX_GPIO_Init+0x160>)
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	2202      	movs	r2, #2
 8003a28:	4013      	ands	r3, r2
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <MX_GPIO_Init+0x160>)
 8003a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <MX_GPIO_Init+0x160>)
 8003a34:	2108      	movs	r1, #8
 8003a36:	430a      	orrs	r2, r1
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <MX_GPIO_Init+0x160>)
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	2208      	movs	r2, #8
 8003a40:	4013      	ands	r3, r2
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 8003a46:	4935      	ldr	r1, [pc, #212]	; (8003b1c <MX_GPIO_Init+0x164>)
 8003a48:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <MX_GPIO_Init+0x168>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f000 ff5d 	bl	800490c <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8003a52:	4934      	ldr	r1, [pc, #208]	; (8003b24 <MX_GPIO_Init+0x16c>)
 8003a54:	23a0      	movs	r3, #160	; 0xa0
 8003a56:	05db      	lsls	r3, r3, #23
 8003a58:	2200      	movs	r2, #0
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 ff56 	bl	800490c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8003a60:	4931      	ldr	r1, [pc, #196]	; (8003b28 <MX_GPIO_Init+0x170>)
 8003a62:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <MX_GPIO_Init+0x174>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 ff50 	bl	800490c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003a6c:	230e      	movs	r3, #14
 8003a6e:	33ff      	adds	r3, #255	; 0xff
 8003a70:	482f      	ldr	r0, [pc, #188]	; (8003b30 <MX_GPIO_Init+0x178>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	0019      	movs	r1, r3
 8003a76:	f000 ff49 	bl	800490c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC12 PC13 PC15 PC0
                           PC2 PC3 PC4 PC7
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <MX_GPIO_Init+0x164>)
 8003a7e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a80:	193b      	adds	r3, r7, r4
 8003a82:	2201      	movs	r2, #1
 8003a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	193b      	adds	r3, r7, r4
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	193b      	adds	r3, r7, r4
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <MX_GPIO_Init+0x168>)
 8003a96:	0019      	movs	r1, r3
 8003a98:	0010      	movs	r0, r2
 8003a9a:	f000 fdd3 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA7 PA8
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8003a9e:	193b      	adds	r3, r7, r4
 8003aa0:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <MX_GPIO_Init+0x16c>)
 8003aa2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa4:	193b      	adds	r3, r7, r4
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab6:	193a      	adds	r2, r7, r4
 8003ab8:	23a0      	movs	r3, #160	; 0xa0
 8003aba:	05db      	lsls	r3, r3, #23
 8003abc:	0011      	movs	r1, r2
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 fdc0 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB13 PB14 PB3 PB4
                           PB6 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8003ac4:	193b      	adds	r3, r7, r4
 8003ac6:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <MX_GPIO_Init+0x170>)
 8003ac8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	2201      	movs	r2, #1
 8003ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	193b      	adds	r3, r7, r4
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	2200      	movs	r2, #0
 8003ada:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <MX_GPIO_Init+0x174>)
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	0010      	movs	r0, r2
 8003ae4:	f000 fdae 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD0 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8003ae8:	0021      	movs	r1, r4
 8003aea:	187b      	adds	r3, r7, r1
 8003aec:	220e      	movs	r2, #14
 8003aee:	32ff      	adds	r2, #255	; 0xff
 8003af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	2201      	movs	r2, #1
 8003af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <MX_GPIO_Init+0x178>)
 8003b08:	0019      	movs	r1, r3
 8003b0a:	0010      	movs	r0, r2
 8003b0c:	f000 fd9a 	bl	8004644 <HAL_GPIO_Init>

}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b00b      	add	sp, #44	; 0x2c
 8003b16:	bd90      	pop	{r4, r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	0000b69d 	.word	0x0000b69d
 8003b20:	50000800 	.word	0x50000800
 8003b24:	000099b0 	.word	0x000099b0
 8003b28:	00006edb 	.word	0x00006edb
 8003b2c:	50000400 	.word	0x50000400
 8003b30:	50000c00 	.word	0x50000c00

08003b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b38:	b672      	cpsid	i
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <Error_Handler+0x8>
	...

08003b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <HAL_MspInit+0x4c>)
 8003b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_MspInit+0x4c>)
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <HAL_MspInit+0x4c>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2201      	movs	r2, #1
 8003b58:	4013      	ands	r3, r2
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_MspInit+0x4c>)
 8003b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <HAL_MspInit+0x4c>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0549      	lsls	r1, r1, #21
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <HAL_MspInit+0x4c>)
 8003b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	055b      	lsls	r3, r3, #21
 8003b74:	4013      	ands	r3, r2
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003b7a:	23c0      	movs	r3, #192	; 0xc0
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 fc6c 	bl	800445c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b002      	add	sp, #8
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000

08003b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b091      	sub	sp, #68	; 0x44
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b98:	232c      	movs	r3, #44	; 0x2c
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	2314      	movs	r3, #20
 8003ba0:	001a      	movs	r2, r3
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	f005 f93c 	bl	8008e20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ba8:	2410      	movs	r4, #16
 8003baa:	193b      	adds	r3, r7, r4
 8003bac:	0018      	movs	r0, r3
 8003bae:	231c      	movs	r3, #28
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f005 f934 	bl	8008e20 <memset>
  if(hi2c->Instance==I2C1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	; (8003c4c <HAL_I2C_MspInit+0xbc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d13f      	bne.n	8003c42 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003bc2:	193b      	adds	r3, r7, r4
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003bc8:	193b      	adds	r3, r7, r4
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bce:	193b      	adds	r3, r7, r4
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f002 f9b1 	bl	8005f38 <HAL_RCCEx_PeriphCLKConfig>
 8003bd6:	1e03      	subs	r3, r0, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003bda:	f7ff ffab 	bl	8003b34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <HAL_I2C_MspInit+0xc0>)
 8003be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_I2C_MspInit+0xc0>)
 8003be4:	2101      	movs	r1, #1
 8003be6:	430a      	orrs	r2, r1
 8003be8:	635a      	str	r2, [r3, #52]	; 0x34
 8003bea:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <HAL_I2C_MspInit+0xc0>)
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	22c0      	movs	r2, #192	; 0xc0
 8003bfc:	00d2      	lsls	r2, r2, #3
 8003bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	2212      	movs	r2, #18
 8003c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2206      	movs	r2, #6
 8003c16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c18:	187a      	adds	r2, r7, r1
 8003c1a:	23a0      	movs	r3, #160	; 0xa0
 8003c1c:	05db      	lsls	r3, r3, #23
 8003c1e:	0011      	movs	r1, r2
 8003c20:	0018      	movs	r0, r3
 8003c22:	f000 fd0f 	bl	8004644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <HAL_I2C_MspInit+0xc0>)
 8003c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_I2C_MspInit+0xc0>)
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	0389      	lsls	r1, r1, #14
 8003c30:	430a      	orrs	r2, r1
 8003c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_I2C_MspInit+0xc0>)
 8003c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	039b      	lsls	r3, r3, #14
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b011      	add	sp, #68	; 0x44
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	40005400 	.word	0x40005400
 8003c50:	40021000 	.word	0x40021000

08003c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <HAL_TIM_Base_MspInit+0x44>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d113      	bne.n	8003c8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <HAL_TIM_Base_MspInit+0x48>)
 8003c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_TIM_Base_MspInit+0x48>)
 8003c6c:	2110      	movs	r1, #16
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c72:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <HAL_TIM_Base_MspInit+0x48>)
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2210      	movs	r2, #16
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	2011      	movs	r0, #17
 8003c84:	f000 fcac 	bl	80045e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003c88:	2011      	movs	r0, #17
 8003c8a:	f000 fcbe 	bl	800460a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b004      	add	sp, #16
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	40001000 	.word	0x40001000
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b091      	sub	sp, #68	; 0x44
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca8:	232c      	movs	r3, #44	; 0x2c
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	0018      	movs	r0, r3
 8003cae:	2314      	movs	r3, #20
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f005 f8b4 	bl	8008e20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cb8:	2410      	movs	r4, #16
 8003cba:	193b      	adds	r3, r7, r4
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	231c      	movs	r3, #28
 8003cc0:	001a      	movs	r2, r3
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f005 f8ac 	bl	8008e20 <memset>
  if(huart->Instance==USART2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <HAL_UART_MspInit+0xb8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d13d      	bne.n	8003d4e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003cd2:	193b      	adds	r3, r7, r4
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003cd8:	193b      	adds	r3, r7, r4
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cde:	193b      	adds	r3, r7, r4
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f002 f929 	bl	8005f38 <HAL_RCCEx_PeriphCLKConfig>
 8003ce6:	1e03      	subs	r3, r0, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003cea:	f7ff ff23 	bl	8003b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cee:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <HAL_UART_MspInit+0xbc>)
 8003cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf2:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <HAL_UART_MspInit+0xbc>)
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	0289      	lsls	r1, r1, #10
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_UART_MspInit+0xbc>)
 8003cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	029b      	lsls	r3, r3, #10
 8003d04:	4013      	ands	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <HAL_UART_MspInit+0xbc>)
 8003d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <HAL_UART_MspInit+0xbc>)
 8003d10:	2108      	movs	r1, #8
 8003d12:	430a      	orrs	r2, r1
 8003d14:	635a      	str	r2, [r3, #52]	; 0x34
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_UART_MspInit+0xbc>)
 8003d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	187b      	adds	r3, r7, r1
 8003d26:	2260      	movs	r2, #96	; 0x60
 8003d28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2a:	187b      	adds	r3, r7, r1
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	187b      	adds	r3, r7, r1
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d36:	187b      	adds	r3, r7, r1
 8003d38:	2200      	movs	r2, #0
 8003d3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	2200      	movs	r2, #0
 8003d40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d42:	187b      	adds	r3, r7, r1
 8003d44:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <HAL_UART_MspInit+0xc0>)
 8003d46:	0019      	movs	r1, r3
 8003d48:	0010      	movs	r0, r2
 8003d4a:	f000 fc7b 	bl	8004644 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b011      	add	sp, #68	; 0x44
 8003d54:	bd90      	pop	{r4, r7, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	40004400 	.word	0x40004400
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	50000c00 	.word	0x50000c00

08003d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d68:	e7fe      	b.n	8003d68 <NMI_Handler+0x4>

08003d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d6e:	e7fe      	b.n	8003d6e <HardFault_Handler+0x4>

08003d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d88:	f000 fb28 	bl	80043dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <TIM6_IRQHandler+0x14>)
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f002 faae 	bl	80062fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	20000298 	.word	0x20000298

08003dac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	return 1;
 8003db0:	2301      	movs	r3, #1
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <_kill>:

int _kill(int pid, int sig)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003dc2:	f005 f887 	bl	8008ed4 <__errno>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	2216      	movs	r2, #22
 8003dca:	601a      	str	r2, [r3, #0]
	return -1;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	425b      	negs	r3, r3
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_exit>:

void _exit (int status)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003de0:	2301      	movs	r3, #1
 8003de2:	425a      	negs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	0011      	movs	r1, r2
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7ff ffe5 	bl	8003db8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dee:	e7fe      	b.n	8003dee <_exit+0x16>

08003df0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e00a      	b.n	8003e18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e02:	e000      	b.n	8003e06 <_read+0x16>
 8003e04:	bf00      	nop
 8003e06:	0001      	movs	r1, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	60ba      	str	r2, [r7, #8]
 8003e0e:	b2ca      	uxtb	r2, r1
 8003e10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	3301      	adds	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	dbf0      	blt.n	8003e02 <_read+0x12>
	}

return len;
 8003e20:	687b      	ldr	r3, [r7, #4]
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b006      	add	sp, #24
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e009      	b.n	8003e50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	60ba      	str	r2, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	0018      	movs	r0, r3
 8003e46:	e000      	b.n	8003e4a <_write+0x20>
 8003e48:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	dbf1      	blt.n	8003e3c <_write+0x12>
	}
	return len;
 8003e58:	687b      	ldr	r3, [r7, #4]
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b006      	add	sp, #24
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_close>:

int _close(int file)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
	return -1;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	425b      	negs	r3, r3
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b002      	add	sp, #8
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	0192      	lsls	r2, r2, #6
 8003e86:	605a      	str	r2, [r3, #4]
	return 0;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <_isatty>:

int _isatty(int file)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
	return 1;
 8003e9a:	2301      	movs	r3, #1
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b002      	add	sp, #8
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
	return 0;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <_sbrk+0x5c>)
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <_sbrk+0x60>)
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <_sbrk+0x64>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <_sbrk+0x64>)
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <_sbrk+0x68>)
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <_sbrk+0x64>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	18d3      	adds	r3, r2, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d207      	bcs.n	8003efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eec:	f004 fff2 	bl	8008ed4 <__errno>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	220c      	movs	r2, #12
 8003ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	425b      	negs	r3, r3
 8003efa:	e009      	b.n	8003f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003efc:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <_sbrk+0x64>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <_sbrk+0x64>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	18d2      	adds	r2, r2, r3
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <_sbrk+0x64>)
 8003f0c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b006      	add	sp, #24
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20009000 	.word	0x20009000
 8003f1c:	00000400 	.word	0x00000400
 8003f20:	20000d48 	.word	0x20000d48
 8003f24:	20000fb0 	.word	0x20000fb0

08003f28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <UART_Send_Mesures>:

extern uint32_t refreshTime;

uint8_t listOfMesures[3*NumOfTOFSensors + 1]={0};

void UART_Send_Mesures(uint16_t * mesuredDistances , uint8_t Zone,  uint32_t TotalTime){
 8003f34:	b590      	push	{r4, r7, lr}
 8003f36:	b08b      	sub	sp, #44	; 0x2c
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	230b      	movs	r3, #11
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	1c0a      	adds	r2, r1, #0
 8003f44:	701a      	strb	r2, [r3, #0]
	uint8_t openCloseBuf[4] = {0xFF,0xFF, 0xFF};
 8003f46:	2314      	movs	r3, #20
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	4a48      	ldr	r2, [pc, #288]	; (800406c <UART_Send_Mesures+0x138>)
 8003f4c:	601a      	str	r2, [r3, #0]

	uint8_t NcaptActifs = 0;
 8003f4e:	2327      	movs	r3, #39	; 0x27
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	2200      	movs	r2, #0
 8003f54:	701a      	strb	r2, [r3, #0]
	for(uint8_t i =0;i<16;i++){
 8003f56:	2326      	movs	r3, #38	; 0x26
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e016      	b.n	8003f8e <UART_Send_Mesures+0x5a>
		NcaptActifs += (ActiveCaptors & (1<<i)) ? 1 : 0;
 8003f60:	4b43      	ldr	r3, [pc, #268]	; (8004070 <UART_Send_Mesures+0x13c>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	001a      	movs	r2, r3
 8003f66:	2026      	movs	r0, #38	; 0x26
 8003f68:	183b      	adds	r3, r7, r0
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	411a      	asrs	r2, r3
 8003f6e:	0013      	movs	r3, r2
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2201      	movs	r2, #1
 8003f74:	4013      	ands	r3, r2
 8003f76:	b2d9      	uxtb	r1, r3
 8003f78:	2227      	movs	r2, #39	; 0x27
 8003f7a:	18bb      	adds	r3, r7, r2
 8003f7c:	18ba      	adds	r2, r7, r2
 8003f7e:	7812      	ldrb	r2, [r2, #0]
 8003f80:	188a      	adds	r2, r1, r2
 8003f82:	701a      	strb	r2, [r3, #0]
	for(uint8_t i =0;i<16;i++){
 8003f84:	183b      	adds	r3, r7, r0
 8003f86:	781a      	ldrb	r2, [r3, #0]
 8003f88:	183b      	adds	r3, r7, r0
 8003f8a:	3201      	adds	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	2326      	movs	r3, #38	; 0x26
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b0f      	cmp	r3, #15
 8003f96:	d9e3      	bls.n	8003f60 <UART_Send_Mesures+0x2c>




	uint8_t * mesures;
	if(Zone == NumOfZonesPerSensor + 1){
 8003f98:	230b      	movs	r3, #11
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b0e      	cmp	r3, #14
 8003fa0:	d106      	bne.n	8003fb0 <UART_Send_Mesures+0x7c>
		mesures = UART_makeList(mesuredDistances);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 f869 	bl	800407c <UART_makeList>
 8003faa:	0003      	movs	r3, r0
 8003fac:	623b      	str	r3, [r7, #32]
 8003fae:	e009      	b.n	8003fc4 <UART_Send_Mesures+0x90>
	}
	else{
		mesures = UART_monoROIList( mesuredDistances, Zone);
 8003fb0:	230b      	movs	r3, #11
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	781a      	ldrb	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	0011      	movs	r1, r2
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f000 f914 	bl	80041e8 <UART_monoROIList>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	623b      	str	r3, [r7, #32]
	}
	uint16_t NbreMesures = listOfMesures[0];
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <UART_Send_Mesures+0x140>)
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	201a      	movs	r0, #26
 8003fca:	183b      	adds	r3, r7, r0
 8003fcc:	801a      	strh	r2, [r3, #0]

	uint8_t batchStats[3] = {NcaptActifs, (uint8_t)NumOfZonesPerSensor, (uint8_t)NbreMesures};
 8003fce:	2110      	movs	r1, #16
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	2227      	movs	r2, #39	; 0x27
 8003fd4:	18ba      	adds	r2, r7, r2
 8003fd6:	7812      	ldrb	r2, [r2, #0]
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	220d      	movs	r2, #13
 8003fde:	705a      	strb	r2, [r3, #1]
 8003fe0:	183b      	adds	r3, r7, r0
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	000c      	movs	r4, r1
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	709a      	strb	r2, [r3, #2]
	 A = mesures[1];

	 A = mesures[2];*/

	// 0xFF		0xFF					0xFF
	HAL_UART_Transmit(&SERIAL_UART, openCloseBuf, 3, 100);
 8003fec:	2314      	movs	r3, #20
 8003fee:	18f9      	adds	r1, r7, r3
 8003ff0:	4821      	ldr	r0, [pc, #132]	; (8004078 <UART_Send_Mesures+0x144>)
 8003ff2:	2364      	movs	r3, #100	; 0x64
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	f002 fc27 	bl	8006848 <HAL_UART_Transmit>
	HAL_Delay(5);
 8003ffa:	2005      	movs	r0, #5
 8003ffc:	f000 fa0a 	bl	8004414 <HAL_Delay>

	// Ncapteurs	Nbre de zones utilisees	Distance min
	HAL_UART_Transmit(&SERIAL_UART, batchStats, 3, 100);
 8004000:	1939      	adds	r1, r7, r4
 8004002:	481d      	ldr	r0, [pc, #116]	; (8004078 <UART_Send_Mesures+0x144>)
 8004004:	2364      	movs	r3, #100	; 0x64
 8004006:	2203      	movs	r2, #3
 8004008:	f002 fc1e 	bl	8006848 <HAL_UART_Transmit>
	HAL_Delay(5);
 800400c:	2005      	movs	r0, #5
 800400e:	f000 fa01 	bl	8004414 <HAL_Delay>

	// Capteur Zone i	Distance i (part1)	Distance i (part2)
	for(int j=0;j<NbreMesures;j++){
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e014      	b.n	8004042 <UART_Send_Mesures+0x10e>
	HAL_UART_Transmit(&SERIAL_UART,  &listOfMesures[3*j+1], 3, 100);
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	0013      	movs	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	189b      	adds	r3, r3, r2
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <UART_Send_Mesures+0x140>)
 8004024:	18d1      	adds	r1, r2, r3
 8004026:	4814      	ldr	r0, [pc, #80]	; (8004078 <UART_Send_Mesures+0x144>)
 8004028:	2364      	movs	r3, #100	; 0x64
 800402a:	2203      	movs	r2, #3
 800402c:	f002 fc0c 	bl	8006848 <HAL_UART_Transmit>
	mesures+=3;
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	3303      	adds	r3, #3
 8004034:	623b      	str	r3, [r7, #32]
	HAL_Delay(5);
 8004036:	2005      	movs	r0, #5
 8004038:	f000 f9ec 	bl	8004414 <HAL_Delay>
	for(int j=0;j<NbreMesures;j++){
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	3301      	adds	r3, #1
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	231a      	movs	r3, #26
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	429a      	cmp	r2, r3
 800404c:	dbe4      	blt.n	8004018 <UART_Send_Mesures+0xe4>
	}

	// 0xFF		0xFF					0xFF
	HAL_UART_Transmit(&SERIAL_UART, openCloseBuf, 3, 100);
 800404e:	2314      	movs	r3, #20
 8004050:	18f9      	adds	r1, r7, r3
 8004052:	4809      	ldr	r0, [pc, #36]	; (8004078 <UART_Send_Mesures+0x144>)
 8004054:	2364      	movs	r3, #100	; 0x64
 8004056:	2203      	movs	r2, #3
 8004058:	f002 fbf6 	bl	8006848 <HAL_UART_Transmit>
	HAL_Delay(5);
 800405c:	2005      	movs	r0, #5
 800405e:	f000 f9d9 	bl	8004414 <HAL_Delay>

}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	b00b      	add	sp, #44	; 0x2c
 8004068:	bd90      	pop	{r4, r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	00ffffff 	.word	0x00ffffff
 8004070:	2000004a 	.word	0x2000004a
 8004074:	20000d4c 	.word	0x20000d4c
 8004078:	20000dd0 	.word	0x20000dd0

0800407c <UART_makeList>:

uint8_t * UART_makeList(uint16_t * LidarDistance){
 800407c:	b5b0      	push	{r4, r5, r7, lr}
 800407e:	4c56      	ldr	r4, [pc, #344]	; (80041d8 <UART_makeList+0x15c>)
 8004080:	44a5      	add	sp, r4
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
	uint8_t listOfMesures[3*NumOfZonesPerSensor*NumOfTOFSensors + 1];
	int ZonePosition;
	int Nmesure = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	22a3      	movs	r2, #163	; 0xa3
 800408a:	0092      	lsls	r2, r2, #2
 800408c:	18ba      	adds	r2, r7, r2
 800408e:	6013      	str	r3, [r2, #0]

	for(int CurrentSensor = 0; CurrentSensor<16; CurrentSensor++){
 8004090:	2300      	movs	r3, #0
 8004092:	22a2      	movs	r2, #162	; 0xa2
 8004094:	0092      	lsls	r2, r2, #2
 8004096:	18ba      	adds	r2, r7, r2
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e07c      	b.n	8004196 <UART_makeList+0x11a>
		if(ActiveCaptors & (1<<CurrentSensor)){
 800409c:	4b4f      	ldr	r3, [pc, #316]	; (80041dc <UART_makeList+0x160>)
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	001a      	movs	r2, r3
 80040a2:	23a2      	movs	r3, #162	; 0xa2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	411a      	asrs	r2, r3
 80040ac:	0013      	movs	r3, r2
 80040ae:	2201      	movs	r2, #1
 80040b0:	4013      	ands	r3, r2
 80040b2:	d069      	beq.n	8004188 <UART_makeList+0x10c>

			for(int CurrentZone = 0; CurrentZone<NumOfZonesPerSensor; CurrentZone++){
 80040b4:	2300      	movs	r3, #0
 80040b6:	22a1      	movs	r2, #161	; 0xa1
 80040b8:	0092      	lsls	r2, r2, #2
 80040ba:	18ba      	adds	r2, r7, r2
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e05d      	b.n	800417c <UART_makeList+0x100>

				ZonePosition = NumOfZonesPerSensor*CurrentSensor + CurrentZone;
 80040c0:	23a2      	movs	r3, #162	; 0xa2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	0013      	movs	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	189b      	adds	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	22a1      	movs	r2, #161	; 0xa1
 80040d4:	0092      	lsls	r2, r2, #2
 80040d6:	18ba      	adds	r2, r7, r2
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	18d3      	adds	r3, r2, r3
 80040dc:	209f      	movs	r0, #159	; 0x9f
 80040de:	0080      	lsls	r0, r0, #2
 80040e0:	183a      	adds	r2, r7, r0
 80040e2:	6013      	str	r3, [r2, #0]

				if(LidarDistance[ZonePosition] < MaxInterestDistance){
 80040e4:	183b      	adds	r3, r7, r0
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	18d3      	adds	r3, r2, r3
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	4a3b      	ldr	r2, [pc, #236]	; (80041e0 <UART_makeList+0x164>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d83b      	bhi.n	800416e <UART_makeList+0xf2>

					listOfMesures[3*Nmesure+1] 		= (uint8_t)(ZonePosition+1); //Pour que le premier element de la chaine de caracteres ne soit pas '\0'
 80040f6:	183b      	adds	r3, r7, r0
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b2d9      	uxtb	r1, r3
 80040fc:	24a3      	movs	r4, #163	; 0xa3
 80040fe:	00a4      	lsls	r4, r4, #2
 8004100:	193b      	adds	r3, r7, r4
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	0013      	movs	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	189b      	adds	r3, r3, r2
 800410a:	3301      	adds	r3, #1
 800410c:	1c4a      	adds	r2, r1, #1
 800410e:	b2d1      	uxtb	r1, r2
 8004110:	4a34      	ldr	r2, [pc, #208]	; (80041e4 <UART_makeList+0x168>)
 8004112:	25a4      	movs	r5, #164	; 0xa4
 8004114:	00ad      	lsls	r5, r5, #2
 8004116:	1952      	adds	r2, r2, r5
 8004118:	19d2      	adds	r2, r2, r7
 800411a:	54d1      	strb	r1, [r2, r3]
					listOfMesures[3*Nmesure + 1+1] 	= (uint8_t)((LidarDistance[ZonePosition] & 0xFF00)>>8); 	//Bits de poids forts de la mesure
 800411c:	183b      	adds	r3, r7, r0
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	18d3      	adds	r3, r2, r3
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	b299      	uxth	r1, r3
 800412c:	193b      	adds	r3, r7, r4
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	0013      	movs	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	189b      	adds	r3, r3, r2
 8004136:	3302      	adds	r3, #2
 8004138:	b2c9      	uxtb	r1, r1
 800413a:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <UART_makeList+0x168>)
 800413c:	1952      	adds	r2, r2, r5
 800413e:	19d2      	adds	r2, r2, r7
 8004140:	54d1      	strb	r1, [r2, r3]
					listOfMesures[3*Nmesure + 2+1] 	= (uint8_t)(LidarDistance[ZonePosition] & 0xFF);			//Bits de poids faible de la mesure
 8004142:	183b      	adds	r3, r7, r0
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	18d3      	adds	r3, r2, r3
 800414c:	8819      	ldrh	r1, [r3, #0]
 800414e:	193b      	adds	r3, r7, r4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	0013      	movs	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	189b      	adds	r3, r3, r2
 800415a:	b2c9      	uxtb	r1, r1
 800415c:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <UART_makeList+0x168>)
 800415e:	1952      	adds	r2, r2, r5
 8004160:	19d2      	adds	r2, r2, r7
 8004162:	54d1      	strb	r1, [r2, r3]

					Nmesure++;
 8004164:	193b      	adds	r3, r7, r4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3301      	adds	r3, #1
 800416a:	193a      	adds	r2, r7, r4
 800416c:	6013      	str	r3, [r2, #0]
			for(int CurrentZone = 0; CurrentZone<NumOfZonesPerSensor; CurrentZone++){
 800416e:	22a1      	movs	r2, #161	; 0xa1
 8004170:	0092      	lsls	r2, r2, #2
 8004172:	18bb      	adds	r3, r7, r2
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	18ba      	adds	r2, r7, r2
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	23a1      	movs	r3, #161	; 0xa1
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b0c      	cmp	r3, #12
 8004186:	dd9b      	ble.n	80040c0 <UART_makeList+0x44>
	for(int CurrentSensor = 0; CurrentSensor<16; CurrentSensor++){
 8004188:	22a2      	movs	r2, #162	; 0xa2
 800418a:	0092      	lsls	r2, r2, #2
 800418c:	18bb      	adds	r3, r7, r2
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	18ba      	adds	r2, r7, r2
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	23a2      	movs	r3, #162	; 0xa2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	dc00      	bgt.n	80041a4 <UART_makeList+0x128>
 80041a2:	e77b      	b.n	800409c <UART_makeList+0x20>
				}
			}
		}
	}
	listOfMesures[0] = Nmesure;
 80041a4:	23a3      	movs	r3, #163	; 0xa3
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <UART_makeList+0x168>)
 80041b0:	21a4      	movs	r1, #164	; 0xa4
 80041b2:	0089      	lsls	r1, r1, #2
 80041b4:	185b      	adds	r3, r3, r1
 80041b6:	19db      	adds	r3, r3, r7
 80041b8:	701a      	strb	r2, [r3, #0]

	uint8_t * exitVar =listOfMesures;
 80041ba:	2308      	movs	r3, #8
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	22a0      	movs	r2, #160	; 0xa0
 80041c0:	0092      	lsls	r2, r2, #2
 80041c2:	18b9      	adds	r1, r7, r2
 80041c4:	600b      	str	r3, [r1, #0]

	return exitVar;
 80041c6:	18bb      	adds	r3, r7, r2
 80041c8:	681b      	ldr	r3, [r3, #0]
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	23a4      	movs	r3, #164	; 0xa4
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	449d      	add	sp, r3
 80041d4:	bdb0      	pop	{r4, r5, r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	fffffd70 	.word	0xfffffd70
 80041dc:	2000004a 	.word	0x2000004a
 80041e0:	00001387 	.word	0x00001387
 80041e4:	fffffd78 	.word	0xfffffd78

080041e8 <UART_monoROIList>:

uint8_t * UART_monoROIList(uint16_t * LidarDistance, uint8_t Zone){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	000a      	movs	r2, r1
 80041f2:	1cfb      	adds	r3, r7, #3
 80041f4:	701a      	strb	r2, [r3, #0]

	int ZonePosition;
	int Nmesure = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]

	for(int CurrentSensor = 0; CurrentSensor<16; CurrentSensor++){
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	e047      	b.n	8004290 <UART_monoROIList+0xa8>
		if(ActiveCaptors & (1<<CurrentSensor)){
 8004200:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <UART_monoROIList+0xc0>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	001a      	movs	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	411a      	asrs	r2, r3
 800420a:	0013      	movs	r3, r2
 800420c:	2201      	movs	r2, #1
 800420e:	4013      	ands	r3, r2
 8004210:	d03b      	beq.n	800428a <UART_monoROIList+0xa2>

			/*for(int CurrentZone = 0; CurrentZone<NumOfZonesPerSensor; CurrentZone++){*/

				ZonePosition = NumOfZonesPerSensor*CurrentSensor + Zone;
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	0013      	movs	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	189b      	adds	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	189a      	adds	r2, r3, r2
 800421e:	1cfb      	adds	r3, r7, #3
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	18d3      	adds	r3, r2, r3
 8004224:	60bb      	str	r3, [r7, #8]

				if(LidarDistance[ZonePosition] < MaxInterestDistance){
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	18d3      	adds	r3, r2, r3
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <UART_monoROIList+0xc4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d829      	bhi.n	800428a <UART_monoROIList+0xa2>

					listOfMesures[3*Nmesure+1] 		= (uint8_t)(ZonePosition+1); //Pour que le premier element de la chaine de caracteres ne soit pas '\0'
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	b2d9      	uxtb	r1, r3
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	0013      	movs	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	189b      	adds	r3, r3, r2
 8004242:	3301      	adds	r3, #1
 8004244:	1c4a      	adds	r2, r1, #1
 8004246:	b2d1      	uxtb	r1, r2
 8004248:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <UART_monoROIList+0xc8>)
 800424a:	54d1      	strb	r1, [r2, r3]
					listOfMesures[3*Nmesure + 1+1] 	= (uint8_t)((LidarDistance[ZonePosition] & 0xFF00)>>8); 	//Bits de poids forts de la mesure
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	18d3      	adds	r3, r2, r3
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b299      	uxth	r1, r3
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	0013      	movs	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	189b      	adds	r3, r3, r2
 8004262:	3302      	adds	r3, #2
 8004264:	b2c9      	uxtb	r1, r1
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <UART_monoROIList+0xc8>)
 8004268:	54d1      	strb	r1, [r2, r3]
					listOfMesures[3*Nmesure + 2+1] 	= (uint8_t)(LidarDistance[ZonePosition] & 0xFF);			//Bits de poids faible de la mesure
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	18d3      	adds	r3, r2, r3
 8004272:	8819      	ldrh	r1, [r3, #0]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	0013      	movs	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	189b      	adds	r3, r3, r2
 800427e:	b2c9      	uxtb	r1, r1
 8004280:	4a0b      	ldr	r2, [pc, #44]	; (80042b0 <UART_monoROIList+0xc8>)
 8004282:	54d1      	strb	r1, [r2, r3]

					Nmesure++;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3301      	adds	r3, #1
 8004288:	617b      	str	r3, [r7, #20]
	for(int CurrentSensor = 0; CurrentSensor<16; CurrentSensor++){
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3301      	adds	r3, #1
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b0f      	cmp	r3, #15
 8004294:	ddb4      	ble.n	8004200 <UART_monoROIList+0x18>
				}
			/*}*/
		}
	}
	listOfMesures[0] = Nmesure;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <UART_monoROIList+0xc8>)
 800429c:	701a      	strb	r2, [r3, #0]

	uint8_t * exitVar;

	return exitVar;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	0018      	movs	r0, r3
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b006      	add	sp, #24
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	2000004a 	.word	0x2000004a
 80042ac:	00001387 	.word	0x00001387
 80042b0:	20000d4c 	.word	0x20000d4c

080042b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042b4:	480d      	ldr	r0, [pc, #52]	; (80042ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80042b8:	f7ff fe36 	bl	8003f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042bc:	480c      	ldr	r0, [pc, #48]	; (80042f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80042be:	490d      	ldr	r1, [pc, #52]	; (80042f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042c0:	4a0d      	ldr	r2, [pc, #52]	; (80042f8 <LoopForever+0xe>)
  movs r3, #0
 80042c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042c4:	e002      	b.n	80042cc <LoopCopyDataInit>

080042c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ca:	3304      	adds	r3, #4

080042cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042d0:	d3f9      	bcc.n	80042c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042d2:	4a0a      	ldr	r2, [pc, #40]	; (80042fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80042d4:	4c0a      	ldr	r4, [pc, #40]	; (8004300 <LoopForever+0x16>)
  movs r3, #0
 80042d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042d8:	e001      	b.n	80042de <LoopFillZerobss>

080042da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042dc:	3204      	adds	r2, #4

080042de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042e0:	d3fb      	bcc.n	80042da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042e2:	f004 fdfd 	bl	8008ee0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80042e6:	f7ff f86d 	bl	80033c4 <main>

080042ea <LoopForever>:

LoopForever:
  b LoopForever
 80042ea:	e7fe      	b.n	80042ea <LoopForever>
  ldr   r0, =_estack
 80042ec:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80042f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042f4:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80042f8:	0800d310 	.word	0x0800d310
  ldr r2, =_sbss
 80042fc:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004300:	20000fac 	.word	0x20000fac

08004304 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004304:	e7fe      	b.n	8004304 <ADC1_IRQHandler>
	...

08004308 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800430e:	1dfb      	adds	r3, r7, #7
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_Init+0x3c>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <HAL_Init+0x3c>)
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	0049      	lsls	r1, r1, #1
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004322:	2003      	movs	r0, #3
 8004324:	f000 f810 	bl	8004348 <HAL_InitTick>
 8004328:	1e03      	subs	r3, r0, #0
 800432a:	d003      	beq.n	8004334 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800432c:	1dfb      	adds	r3, r7, #7
 800432e:	2201      	movs	r2, #1
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e001      	b.n	8004338 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004334:	f7ff fc04 	bl	8003b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004338:	1dfb      	adds	r3, r7, #7
 800433a:	781b      	ldrb	r3, [r3, #0]
}
 800433c:	0018      	movs	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	b002      	add	sp, #8
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40022000 	.word	0x40022000

08004348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004350:	230f      	movs	r3, #15
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_InitTick+0x88>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02b      	beq.n	80043b8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004360:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <HAL_InitTick+0x8c>)
 8004362:	681c      	ldr	r4, [r3, #0]
 8004364:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <HAL_InitTick+0x88>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	0019      	movs	r1, r3
 800436a:	23fa      	movs	r3, #250	; 0xfa
 800436c:	0098      	lsls	r0, r3, #2
 800436e:	f7fb fee3 	bl	8000138 <__udivsi3>
 8004372:	0003      	movs	r3, r0
 8004374:	0019      	movs	r1, r3
 8004376:	0020      	movs	r0, r4
 8004378:	f7fb fede 	bl	8000138 <__udivsi3>
 800437c:	0003      	movs	r3, r0
 800437e:	0018      	movs	r0, r3
 8004380:	f000 f953 	bl	800462a <HAL_SYSTICK_Config>
 8004384:	1e03      	subs	r3, r0, #0
 8004386:	d112      	bne.n	80043ae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d80a      	bhi.n	80043a4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	2301      	movs	r3, #1
 8004392:	425b      	negs	r3, r3
 8004394:	2200      	movs	r2, #0
 8004396:	0018      	movs	r0, r3
 8004398:	f000 f922 	bl	80045e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800439c:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <HAL_InitTick+0x90>)
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e00d      	b.n	80043c0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80043a4:	230f      	movs	r3, #15
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	e008      	b.n	80043c0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043ae:	230f      	movs	r3, #15
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e003      	b.n	80043c0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043b8:	230f      	movs	r3, #15
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80043c0:	230f      	movs	r3, #15
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	781b      	ldrb	r3, [r3, #0]
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b005      	add	sp, #20
 80043cc:	bd90      	pop	{r4, r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	20000054 	.word	0x20000054
 80043d4:	2000004c 	.word	0x2000004c
 80043d8:	20000050 	.word	0x20000050

080043dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_IncTick+0x1c>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	001a      	movs	r2, r3
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_IncTick+0x20>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	18d2      	adds	r2, r2, r3
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_IncTick+0x20>)
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	20000054 	.word	0x20000054
 80043fc:	20000d80 	.word	0x20000d80

08004400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  return uwTick;
 8004404:	4b02      	ldr	r3, [pc, #8]	; (8004410 <HAL_GetTick+0x10>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	0018      	movs	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	20000d80 	.word	0x20000d80

08004414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800441c:	f7ff fff0 	bl	8004400 <HAL_GetTick>
 8004420:	0003      	movs	r3, r0
 8004422:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3301      	adds	r3, #1
 800442c:	d005      	beq.n	800443a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <HAL_Delay+0x44>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	001a      	movs	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	189b      	adds	r3, r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	f7ff ffe0 	bl	8004400 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	429a      	cmp	r2, r3
 800444a:	d8f7      	bhi.n	800443c <HAL_Delay+0x28>
  {
  }
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b004      	add	sp, #16
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	20000054 	.word	0x20000054

0800445c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a06      	ldr	r2, [pc, #24]	; (8004484 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800446a:	4013      	ands	r3, r2
 800446c:	0019      	movs	r1, r3
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b002      	add	sp, #8
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	40010000 	.word	0x40010000
 8004484:	fffff9ff 	.word	0xfffff9ff

08004488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	0002      	movs	r2, r0
 8004490:	1dfb      	adds	r3, r7, #7
 8004492:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004494:	1dfb      	adds	r3, r7, #7
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b7f      	cmp	r3, #127	; 0x7f
 800449a:	d809      	bhi.n	80044b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800449c:	1dfb      	adds	r3, r7, #7
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	001a      	movs	r2, r3
 80044a2:	231f      	movs	r3, #31
 80044a4:	401a      	ands	r2, r3
 80044a6:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <__NVIC_EnableIRQ+0x30>)
 80044a8:	2101      	movs	r1, #1
 80044aa:	4091      	lsls	r1, r2
 80044ac:	000a      	movs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80044b0:	46c0      	nop			; (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	e000e100 	.word	0xe000e100

080044bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	0002      	movs	r2, r0
 80044c4:	6039      	str	r1, [r7, #0]
 80044c6:	1dfb      	adds	r3, r7, #7
 80044c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044ca:	1dfb      	adds	r3, r7, #7
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b7f      	cmp	r3, #127	; 0x7f
 80044d0:	d828      	bhi.n	8004524 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d2:	4a2f      	ldr	r2, [pc, #188]	; (8004590 <__NVIC_SetPriority+0xd4>)
 80044d4:	1dfb      	adds	r3, r7, #7
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	33c0      	adds	r3, #192	; 0xc0
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	589b      	ldr	r3, [r3, r2]
 80044e2:	1dfa      	adds	r2, r7, #7
 80044e4:	7812      	ldrb	r2, [r2, #0]
 80044e6:	0011      	movs	r1, r2
 80044e8:	2203      	movs	r2, #3
 80044ea:	400a      	ands	r2, r1
 80044ec:	00d2      	lsls	r2, r2, #3
 80044ee:	21ff      	movs	r1, #255	; 0xff
 80044f0:	4091      	lsls	r1, r2
 80044f2:	000a      	movs	r2, r1
 80044f4:	43d2      	mvns	r2, r2
 80044f6:	401a      	ands	r2, r3
 80044f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	019b      	lsls	r3, r3, #6
 80044fe:	22ff      	movs	r2, #255	; 0xff
 8004500:	401a      	ands	r2, r3
 8004502:	1dfb      	adds	r3, r7, #7
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	0018      	movs	r0, r3
 8004508:	2303      	movs	r3, #3
 800450a:	4003      	ands	r3, r0
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004510:	481f      	ldr	r0, [pc, #124]	; (8004590 <__NVIC_SetPriority+0xd4>)
 8004512:	1dfb      	adds	r3, r7, #7
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b25b      	sxtb	r3, r3
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	430a      	orrs	r2, r1
 800451c:	33c0      	adds	r3, #192	; 0xc0
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004522:	e031      	b.n	8004588 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004524:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <__NVIC_SetPriority+0xd8>)
 8004526:	1dfb      	adds	r3, r7, #7
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	0019      	movs	r1, r3
 800452c:	230f      	movs	r3, #15
 800452e:	400b      	ands	r3, r1
 8004530:	3b08      	subs	r3, #8
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	3306      	adds	r3, #6
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	18d3      	adds	r3, r2, r3
 800453a:	3304      	adds	r3, #4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	1dfa      	adds	r2, r7, #7
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	0011      	movs	r1, r2
 8004544:	2203      	movs	r2, #3
 8004546:	400a      	ands	r2, r1
 8004548:	00d2      	lsls	r2, r2, #3
 800454a:	21ff      	movs	r1, #255	; 0xff
 800454c:	4091      	lsls	r1, r2
 800454e:	000a      	movs	r2, r1
 8004550:	43d2      	mvns	r2, r2
 8004552:	401a      	ands	r2, r3
 8004554:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	22ff      	movs	r2, #255	; 0xff
 800455c:	401a      	ands	r2, r3
 800455e:	1dfb      	adds	r3, r7, #7
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	0018      	movs	r0, r3
 8004564:	2303      	movs	r3, #3
 8004566:	4003      	ands	r3, r0
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800456c:	4809      	ldr	r0, [pc, #36]	; (8004594 <__NVIC_SetPriority+0xd8>)
 800456e:	1dfb      	adds	r3, r7, #7
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	001c      	movs	r4, r3
 8004574:	230f      	movs	r3, #15
 8004576:	4023      	ands	r3, r4
 8004578:	3b08      	subs	r3, #8
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	430a      	orrs	r2, r1
 800457e:	3306      	adds	r3, #6
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	18c3      	adds	r3, r0, r3
 8004584:	3304      	adds	r3, #4
 8004586:	601a      	str	r2, [r3, #0]
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	b003      	add	sp, #12
 800458e:	bd90      	pop	{r4, r7, pc}
 8004590:	e000e100 	.word	0xe000e100
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	1e5a      	subs	r2, r3, #1
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	045b      	lsls	r3, r3, #17
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d301      	bcc.n	80045b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ac:	2301      	movs	r3, #1
 80045ae:	e010      	b.n	80045d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <SysTick_Config+0x44>)
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	3a01      	subs	r2, #1
 80045b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b8:	2301      	movs	r3, #1
 80045ba:	425b      	negs	r3, r3
 80045bc:	2103      	movs	r1, #3
 80045be:	0018      	movs	r0, r3
 80045c0:	f7ff ff7c 	bl	80044bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <SysTick_Config+0x44>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ca:	4b04      	ldr	r3, [pc, #16]	; (80045dc <SysTick_Config+0x44>)
 80045cc:	2207      	movs	r2, #7
 80045ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	0018      	movs	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b002      	add	sp, #8
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	e000e010 	.word	0xe000e010

080045e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	210f      	movs	r1, #15
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	1c02      	adds	r2, r0, #0
 80045f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b25b      	sxtb	r3, r3
 80045fa:	0011      	movs	r1, r2
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7ff ff5d 	bl	80044bc <__NVIC_SetPriority>
}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	46bd      	mov	sp, r7
 8004606:	b004      	add	sp, #16
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	0002      	movs	r2, r0
 8004612:	1dfb      	adds	r3, r7, #7
 8004614:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004616:	1dfb      	adds	r3, r7, #7
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b25b      	sxtb	r3, r3
 800461c:	0018      	movs	r0, r3
 800461e:	f7ff ff33 	bl	8004488 <__NVIC_EnableIRQ>
}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff ffaf 	bl	8004598 <SysTick_Config>
 800463a:	0003      	movs	r3, r0
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004652:	e147      	b.n	80048e4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4091      	lsls	r1, r2
 800465e:	000a      	movs	r2, r1
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d100      	bne.n	800466c <HAL_GPIO_Init+0x28>
 800466a:	e138      	b.n	80048de <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2203      	movs	r2, #3
 8004672:	4013      	ands	r3, r2
 8004674:	2b01      	cmp	r3, #1
 8004676:	d005      	beq.n	8004684 <HAL_GPIO_Init+0x40>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2203      	movs	r2, #3
 800467e:	4013      	ands	r3, r2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d130      	bne.n	80046e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	2203      	movs	r2, #3
 8004690:	409a      	lsls	r2, r3
 8004692:	0013      	movs	r3, r2
 8004694:	43da      	mvns	r2, r3
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4013      	ands	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	409a      	lsls	r2, r3
 80046a6:	0013      	movs	r3, r2
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ba:	2201      	movs	r2, #1
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	409a      	lsls	r2, r3
 80046c0:	0013      	movs	r3, r2
 80046c2:	43da      	mvns	r2, r3
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	2201      	movs	r2, #1
 80046d2:	401a      	ands	r2, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	409a      	lsls	r2, r3
 80046d8:	0013      	movs	r3, r2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2203      	movs	r2, #3
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d017      	beq.n	8004722 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	2203      	movs	r2, #3
 80046fe:	409a      	lsls	r2, r3
 8004700:	0013      	movs	r3, r2
 8004702:	43da      	mvns	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4013      	ands	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	409a      	lsls	r2, r3
 8004714:	0013      	movs	r3, r2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2203      	movs	r2, #3
 8004728:	4013      	ands	r3, r2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d123      	bne.n	8004776 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	08da      	lsrs	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3208      	adds	r2, #8
 8004736:	0092      	lsls	r2, r2, #2
 8004738:	58d3      	ldr	r3, [r2, r3]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2207      	movs	r2, #7
 8004740:	4013      	ands	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	220f      	movs	r2, #15
 8004746:	409a      	lsls	r2, r3
 8004748:	0013      	movs	r3, r2
 800474a:	43da      	mvns	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2107      	movs	r1, #7
 800475a:	400b      	ands	r3, r1
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	409a      	lsls	r2, r3
 8004760:	0013      	movs	r3, r2
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	08da      	lsrs	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3208      	adds	r2, #8
 8004770:	0092      	lsls	r2, r2, #2
 8004772:	6939      	ldr	r1, [r7, #16]
 8004774:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	2203      	movs	r2, #3
 8004782:	409a      	lsls	r2, r3
 8004784:	0013      	movs	r3, r2
 8004786:	43da      	mvns	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2203      	movs	r2, #3
 8004794:	401a      	ands	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	409a      	lsls	r2, r3
 800479c:	0013      	movs	r3, r2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	23c0      	movs	r3, #192	; 0xc0
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	4013      	ands	r3, r2
 80047b4:	d100      	bne.n	80047b8 <HAL_GPIO_Init+0x174>
 80047b6:	e092      	b.n	80048de <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80047b8:	4a50      	ldr	r2, [pc, #320]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	089b      	lsrs	r3, r3, #2
 80047be:	3318      	adds	r3, #24
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	589b      	ldr	r3, [r3, r2]
 80047c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2203      	movs	r2, #3
 80047ca:	4013      	ands	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	220f      	movs	r2, #15
 80047d0:	409a      	lsls	r2, r3
 80047d2:	0013      	movs	r3, r2
 80047d4:	43da      	mvns	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	23a0      	movs	r3, #160	; 0xa0
 80047e0:	05db      	lsls	r3, r3, #23
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d013      	beq.n	800480e <HAL_GPIO_Init+0x1ca>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a45      	ldr	r2, [pc, #276]	; (8004900 <HAL_GPIO_Init+0x2bc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00d      	beq.n	800480a <HAL_GPIO_Init+0x1c6>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a44      	ldr	r2, [pc, #272]	; (8004904 <HAL_GPIO_Init+0x2c0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <HAL_GPIO_Init+0x1c2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a43      	ldr	r2, [pc, #268]	; (8004908 <HAL_GPIO_Init+0x2c4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d101      	bne.n	8004802 <HAL_GPIO_Init+0x1be>
 80047fe:	2303      	movs	r3, #3
 8004800:	e006      	b.n	8004810 <HAL_GPIO_Init+0x1cc>
 8004802:	2305      	movs	r3, #5
 8004804:	e004      	b.n	8004810 <HAL_GPIO_Init+0x1cc>
 8004806:	2302      	movs	r3, #2
 8004808:	e002      	b.n	8004810 <HAL_GPIO_Init+0x1cc>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_GPIO_Init+0x1cc>
 800480e:	2300      	movs	r3, #0
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	2103      	movs	r1, #3
 8004814:	400a      	ands	r2, r1
 8004816:	00d2      	lsls	r2, r2, #3
 8004818:	4093      	lsls	r3, r2
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004820:	4936      	ldr	r1, [pc, #216]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	3318      	adds	r3, #24
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800482e:	4b33      	ldr	r3, [pc, #204]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	43da      	mvns	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4013      	ands	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	035b      	lsls	r3, r3, #13
 8004846:	4013      	ands	r3, r2
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004852:	4b2a      	ldr	r3, [pc, #168]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004858:	4b28      	ldr	r3, [pc, #160]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	43da      	mvns	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	039b      	lsls	r3, r3, #14
 8004870:	4013      	ands	r3, r2
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800487c:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004882:	4a1e      	ldr	r2, [pc, #120]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 8004884:	2384      	movs	r3, #132	; 0x84
 8004886:	58d3      	ldr	r3, [r2, r3]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	43da      	mvns	r2, r3
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	029b      	lsls	r3, r3, #10
 800489c:	4013      	ands	r3, r2
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048a8:	4914      	ldr	r1, [pc, #80]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 80048aa:	2284      	movs	r2, #132	; 0x84
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80048b0:	4a12      	ldr	r2, [pc, #72]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	58d3      	ldr	r3, [r2, r3]
 80048b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	43da      	mvns	r2, r3
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	025b      	lsls	r3, r3, #9
 80048ca:	4013      	ands	r3, r2
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048d6:	4909      	ldr	r1, [pc, #36]	; (80048fc <HAL_GPIO_Init+0x2b8>)
 80048d8:	2280      	movs	r2, #128	; 0x80
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	3301      	adds	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	40da      	lsrs	r2, r3
 80048ec:	1e13      	subs	r3, r2, #0
 80048ee:	d000      	beq.n	80048f2 <HAL_GPIO_Init+0x2ae>
 80048f0:	e6b0      	b.n	8004654 <HAL_GPIO_Init+0x10>
  }
}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b006      	add	sp, #24
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40021800 	.word	0x40021800
 8004900:	50000400 	.word	0x50000400
 8004904:	50000800 	.word	0x50000800
 8004908:	50000c00 	.word	0x50000c00

0800490c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	0008      	movs	r0, r1
 8004916:	0011      	movs	r1, r2
 8004918:	1cbb      	adds	r3, r7, #2
 800491a:	1c02      	adds	r2, r0, #0
 800491c:	801a      	strh	r2, [r3, #0]
 800491e:	1c7b      	adds	r3, r7, #1
 8004920:	1c0a      	adds	r2, r1, #0
 8004922:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004924:	1c7b      	adds	r3, r7, #1
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800492c:	1cbb      	adds	r3, r7, #2
 800492e:	881a      	ldrh	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004934:	e003      	b.n	800493e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004936:	1cbb      	adds	r3, r7, #2
 8004938:	881a      	ldrh	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b002      	add	sp, #8
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	000a      	movs	r2, r1
 8004950:	1cbb      	adds	r3, r7, #2
 8004952:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800495a:	1cbb      	adds	r3, r7, #2
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4013      	ands	r3, r2
 8004962:	041a      	lsls	r2, r3, #16
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	43db      	mvns	r3, r3
 8004968:	1cb9      	adds	r1, r7, #2
 800496a:	8809      	ldrh	r1, [r1, #0]
 800496c:	400b      	ands	r3, r1
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
}
 8004974:	46c0      	nop			; (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	b004      	add	sp, #16
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e082      	b.n	8004a94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2241      	movs	r2, #65	; 0x41
 8004992:	5c9b      	ldrb	r3, [r3, r2]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d107      	bne.n	80049aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2240      	movs	r2, #64	; 0x40
 800499e:	2100      	movs	r1, #0
 80049a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7ff f8f3 	bl	8003b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2241      	movs	r2, #65	; 0x41
 80049ae:	2124      	movs	r1, #36	; 0x24
 80049b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2101      	movs	r1, #1
 80049be:	438a      	bics	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4934      	ldr	r1, [pc, #208]	; (8004a9c <HAL_I2C_Init+0x120>)
 80049cc:	400a      	ands	r2, r1
 80049ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4931      	ldr	r1, [pc, #196]	; (8004aa0 <HAL_I2C_Init+0x124>)
 80049dc:	400a      	ands	r2, r1
 80049de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d108      	bne.n	80049fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2180      	movs	r1, #128	; 0x80
 80049f2:	0209      	lsls	r1, r1, #8
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	e007      	b.n	8004a0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2184      	movs	r1, #132	; 0x84
 8004a04:	0209      	lsls	r1, r1, #8
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d104      	bne.n	8004a1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2280      	movs	r2, #128	; 0x80
 8004a18:	0112      	lsls	r2, r2, #4
 8004a1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	491f      	ldr	r1, [pc, #124]	; (8004aa4 <HAL_I2C_Init+0x128>)
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	491a      	ldr	r1, [pc, #104]	; (8004aa0 <HAL_I2C_Init+0x124>)
 8004a38:	400a      	ands	r2, r1
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69d9      	ldr	r1, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2101      	movs	r1, #1
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2241      	movs	r2, #65	; 0x41
 8004a80:	2120      	movs	r1, #32
 8004a82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2242      	movs	r2, #66	; 0x42
 8004a8e:	2100      	movs	r1, #0
 8004a90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	f0ffffff 	.word	0xf0ffffff
 8004aa0:	ffff7fff 	.word	0xffff7fff
 8004aa4:	02008000 	.word	0x02008000

08004aa8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	0008      	movs	r0, r1
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	230a      	movs	r3, #10
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	1c02      	adds	r2, r0, #0
 8004abc:	801a      	strh	r2, [r3, #0]
 8004abe:	2308      	movs	r3, #8
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	1c0a      	adds	r2, r1, #0
 8004ac4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2241      	movs	r2, #65	; 0x41
 8004aca:	5c9b      	ldrb	r3, [r3, r2]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d000      	beq.n	8004ad4 <HAL_I2C_Master_Transmit+0x2c>
 8004ad2:	e0e7      	b.n	8004ca4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2240      	movs	r2, #64	; 0x40
 8004ad8:	5c9b      	ldrb	r3, [r3, r2]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_Master_Transmit+0x3a>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e0e1      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x1fe>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2240      	movs	r2, #64	; 0x40
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aea:	f7ff fc89 	bl	8004400 <HAL_GetTick>
 8004aee:	0003      	movs	r3, r0
 8004af0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004af2:	2380      	movs	r3, #128	; 0x80
 8004af4:	0219      	lsls	r1, r3, #8
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2319      	movs	r3, #25
 8004afe:	2201      	movs	r2, #1
 8004b00:	f000 fa04 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004b04:	1e03      	subs	r3, r0, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0cc      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2241      	movs	r2, #65	; 0x41
 8004b10:	2121      	movs	r1, #33	; 0x21
 8004b12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2242      	movs	r2, #66	; 0x42
 8004b18:	2110      	movs	r1, #16
 8004b1a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	18ba      	adds	r2, r7, r2
 8004b2e:	8812      	ldrh	r2, [r2, #0]
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2bff      	cmp	r3, #255	; 0xff
 8004b40:	d911      	bls.n	8004b66 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	22ff      	movs	r2, #255	; 0xff
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	045c      	lsls	r4, r3, #17
 8004b52:	230a      	movs	r3, #10
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	8819      	ldrh	r1, [r3, #0]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	4b55      	ldr	r3, [pc, #340]	; (8004cb0 <HAL_I2C_Master_Transmit+0x208>)
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	0023      	movs	r3, r4
 8004b60:	f000 fc14 	bl	800538c <I2C_TransferConfig>
 8004b64:	e075      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	049c      	lsls	r4, r3, #18
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	8819      	ldrh	r1, [r3, #0]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	4b4b      	ldr	r3, [pc, #300]	; (8004cb0 <HAL_I2C_Master_Transmit+0x208>)
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	0023      	movs	r3, r4
 8004b88:	f000 fc00 	bl	800538c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004b8c:	e061      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f000 f9f8 	bl	8004f8a <I2C_WaitOnTXISFlagUntilTimeout>
 8004b9a:	1e03      	subs	r3, r0, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e081      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	781a      	ldrb	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d03a      	beq.n	8004c52 <HAL_I2C_Master_Transmit+0x1aa>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d136      	bne.n	8004c52 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	0013      	movs	r3, r2
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2180      	movs	r1, #128	; 0x80
 8004bf2:	f000 f98b 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004bf6:	1e03      	subs	r3, r0, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e053      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2bff      	cmp	r3, #255	; 0xff
 8004c06:	d911      	bls.n	8004c2c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	22ff      	movs	r2, #255	; 0xff
 8004c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	045c      	lsls	r4, r3, #17
 8004c18:	230a      	movs	r3, #10
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	8819      	ldrh	r1, [r3, #0]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	2300      	movs	r3, #0
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	0023      	movs	r3, r4
 8004c26:	f000 fbb1 	bl	800538c <I2C_TransferConfig>
 8004c2a:	e012      	b.n	8004c52 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	049c      	lsls	r4, r3, #18
 8004c40:	230a      	movs	r3, #10
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	8819      	ldrh	r1, [r3, #0]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	0023      	movs	r3, r4
 8004c4e:	f000 fb9d 	bl	800538c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d198      	bne.n	8004b8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 f9d0 	bl	8005008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c68:	1e03      	subs	r3, r0, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e01a      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2220      	movs	r2, #32
 8004c76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	490c      	ldr	r1, [pc, #48]	; (8004cb4 <HAL_I2C_Master_Transmit+0x20c>)
 8004c84:	400a      	ands	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2241      	movs	r2, #65	; 0x41
 8004c8c:	2120      	movs	r1, #32
 8004c8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2242      	movs	r2, #66	; 0x42
 8004c94:	2100      	movs	r1, #0
 8004c96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2240      	movs	r2, #64	; 0x40
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b007      	add	sp, #28
 8004cac:	bd90      	pop	{r4, r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	80002000 	.word	0x80002000
 8004cb4:	fe00e800 	.word	0xfe00e800

08004cb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004cb8:	b590      	push	{r4, r7, lr}
 8004cba:	b089      	sub	sp, #36	; 0x24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	0008      	movs	r0, r1
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	230a      	movs	r3, #10
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	1c02      	adds	r2, r0, #0
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	2308      	movs	r3, #8
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	1c0a      	adds	r2, r1, #0
 8004cd4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2241      	movs	r2, #65	; 0x41
 8004cda:	5c9b      	ldrb	r3, [r3, r2]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d000      	beq.n	8004ce4 <HAL_I2C_Master_Receive+0x2c>
 8004ce2:	e0e8      	b.n	8004eb6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2240      	movs	r2, #64	; 0x40
 8004ce8:	5c9b      	ldrb	r3, [r3, r2]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2C_Master_Receive+0x3a>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0e2      	b.n	8004eb8 <HAL_I2C_Master_Receive+0x200>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2240      	movs	r2, #64	; 0x40
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cfa:	f7ff fb81 	bl	8004400 <HAL_GetTick>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	0219      	lsls	r1, r3, #8
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2319      	movs	r3, #25
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f000 f8fc 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004d14:	1e03      	subs	r3, r0, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0cd      	b.n	8004eb8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2241      	movs	r2, #65	; 0x41
 8004d20:	2122      	movs	r1, #34	; 0x22
 8004d22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2242      	movs	r2, #66	; 0x42
 8004d28:	2110      	movs	r1, #16
 8004d2a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	18ba      	adds	r2, r7, r2
 8004d3e:	8812      	ldrh	r2, [r2, #0]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2bff      	cmp	r3, #255	; 0xff
 8004d50:	d911      	bls.n	8004d76 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	22ff      	movs	r2, #255	; 0xff
 8004d56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	045c      	lsls	r4, r3, #17
 8004d62:	230a      	movs	r3, #10
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	8819      	ldrh	r1, [r3, #0]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	4b55      	ldr	r3, [pc, #340]	; (8004ec0 <HAL_I2C_Master_Receive+0x208>)
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	0023      	movs	r3, r4
 8004d70:	f000 fb0c 	bl	800538c <I2C_TransferConfig>
 8004d74:	e076      	b.n	8004e64 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	2380      	movs	r3, #128	; 0x80
 8004d88:	049c      	lsls	r4, r3, #18
 8004d8a:	230a      	movs	r3, #10
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	8819      	ldrh	r1, [r3, #0]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	4b4b      	ldr	r3, [pc, #300]	; (8004ec0 <HAL_I2C_Master_Receive+0x208>)
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	0023      	movs	r3, r4
 8004d98:	f000 faf8 	bl	800538c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004d9c:	e062      	b.n	8004e64 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 f96b 	bl	8005080 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004daa:	1e03      	subs	r3, r0, #0
 8004dac:	d001      	beq.n	8004db2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e082      	b.n	8004eb8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d03a      	beq.n	8004e64 <HAL_I2C_Master_Receive+0x1ac>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d136      	bne.n	8004e64 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	0013      	movs	r3, r2
 8004e00:	2200      	movs	r2, #0
 8004e02:	2180      	movs	r1, #128	; 0x80
 8004e04:	f000 f882 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004e08:	1e03      	subs	r3, r0, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e053      	b.n	8004eb8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2bff      	cmp	r3, #255	; 0xff
 8004e18:	d911      	bls.n	8004e3e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	22ff      	movs	r2, #255	; 0xff
 8004e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	045c      	lsls	r4, r3, #17
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	8819      	ldrh	r1, [r3, #0]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	2300      	movs	r3, #0
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	0023      	movs	r3, r4
 8004e38:	f000 faa8 	bl	800538c <I2C_TransferConfig>
 8004e3c:	e012      	b.n	8004e64 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	049c      	lsls	r4, r3, #18
 8004e52:	230a      	movs	r3, #10
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	8819      	ldrh	r1, [r3, #0]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	0023      	movs	r3, r4
 8004e60:	f000 fa94 	bl	800538c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d197      	bne.n	8004d9e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 f8c7 	bl	8005008 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e7a:	1e03      	subs	r3, r0, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e01a      	b.n	8004eb8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2220      	movs	r2, #32
 8004e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	490b      	ldr	r1, [pc, #44]	; (8004ec4 <HAL_I2C_Master_Receive+0x20c>)
 8004e96:	400a      	ands	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2241      	movs	r2, #65	; 0x41
 8004e9e:	2120      	movs	r1, #32
 8004ea0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2242      	movs	r2, #66	; 0x42
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2240      	movs	r2, #64	; 0x40
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b007      	add	sp, #28
 8004ebe:	bd90      	pop	{r4, r7, pc}
 8004ec0:	80002400 	.word	0x80002400
 8004ec4:	fe00e800 	.word	0xfe00e800

08004ec8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d103      	bne.n	8004ee6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	2201      	movs	r2, #1
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d007      	beq.n	8004f04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2101      	movs	r1, #1
 8004f00:	430a      	orrs	r2, r1
 8004f02:	619a      	str	r2, [r3, #24]
  }
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	1dfb      	adds	r3, r7, #7
 8004f1a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1c:	e021      	b.n	8004f62 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	d01e      	beq.n	8004f62 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f24:	f7ff fa6c 	bl	8004400 <HAL_GetTick>
 8004f28:	0002      	movs	r2, r0
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d113      	bne.n	8004f62 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	2220      	movs	r2, #32
 8004f40:	431a      	orrs	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2241      	movs	r2, #65	; 0x41
 8004f4a:	2120      	movs	r1, #32
 8004f4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2242      	movs	r2, #66	; 0x42
 8004f52:	2100      	movs	r1, #0
 8004f54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2240      	movs	r2, #64	; 0x40
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e00f      	b.n	8004f82 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	425a      	negs	r2, r3
 8004f72:	4153      	adcs	r3, r2
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	001a      	movs	r2, r3
 8004f78:	1dfb      	adds	r3, r7, #7
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d0ce      	beq.n	8004f1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b004      	add	sp, #16
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f96:	e02b      	b.n	8004ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 f8e8 	bl	8005174 <I2C_IsErrorOccurred>
 8004fa4:	1e03      	subs	r3, r0, #0
 8004fa6:	d001      	beq.n	8004fac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e029      	b.n	8005000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	d01e      	beq.n	8004ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb2:	f7ff fa25 	bl	8004400 <HAL_GetTick>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d113      	bne.n	8004ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	2220      	movs	r2, #32
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2241      	movs	r2, #65	; 0x41
 8004fd8:	2120      	movs	r1, #32
 8004fda:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2242      	movs	r2, #66	; 0x42
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2240      	movs	r2, #64	; 0x40
 8004fe8:	2100      	movs	r1, #0
 8004fea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e007      	b.n	8005000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d1cc      	bne.n	8004f98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	0018      	movs	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	b004      	add	sp, #16
 8005006:	bd80      	pop	{r7, pc}

08005008 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005014:	e028      	b.n	8005068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	0018      	movs	r0, r3
 800501e:	f000 f8a9 	bl	8005174 <I2C_IsErrorOccurred>
 8005022:	1e03      	subs	r3, r0, #0
 8005024:	d001      	beq.n	800502a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e026      	b.n	8005078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502a:	f7ff f9e9 	bl	8004400 <HAL_GetTick>
 800502e:	0002      	movs	r2, r0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	429a      	cmp	r2, r3
 8005038:	d302      	bcc.n	8005040 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d113      	bne.n	8005068 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005044:	2220      	movs	r2, #32
 8005046:	431a      	orrs	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2241      	movs	r2, #65	; 0x41
 8005050:	2120      	movs	r1, #32
 8005052:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2242      	movs	r2, #66	; 0x42
 8005058:	2100      	movs	r1, #0
 800505a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2240      	movs	r2, #64	; 0x40
 8005060:	2100      	movs	r1, #0
 8005062:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e007      	b.n	8005078 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2220      	movs	r2, #32
 8005070:	4013      	ands	r3, r2
 8005072:	2b20      	cmp	r3, #32
 8005074:	d1cf      	bne.n	8005016 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	0018      	movs	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	b004      	add	sp, #16
 800507e:	bd80      	pop	{r7, pc}

08005080 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800508c:	e064      	b.n	8005158 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	0018      	movs	r0, r3
 8005096:	f000 f86d 	bl	8005174 <I2C_IsErrorOccurred>
 800509a:	1e03      	subs	r3, r0, #0
 800509c:	d001      	beq.n	80050a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e062      	b.n	8005168 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2220      	movs	r2, #32
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d138      	bne.n	8005122 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	2204      	movs	r2, #4
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d105      	bne.n	80050ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e04e      	b.n	8005168 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	2210      	movs	r2, #16
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d107      	bne.n	80050e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2210      	movs	r2, #16
 80050de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2204      	movs	r2, #4
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
 80050e6:	e002      	b.n	80050ee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2220      	movs	r2, #32
 80050f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	491b      	ldr	r1, [pc, #108]	; (8005170 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005102:	400a      	ands	r2, r1
 8005104:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2241      	movs	r2, #65	; 0x41
 800510a:	2120      	movs	r1, #32
 800510c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2242      	movs	r2, #66	; 0x42
 8005112:	2100      	movs	r1, #0
 8005114:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2240      	movs	r2, #64	; 0x40
 800511a:	2100      	movs	r1, #0
 800511c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e022      	b.n	8005168 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005122:	f7ff f96d 	bl	8004400 <HAL_GetTick>
 8005126:	0002      	movs	r2, r0
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10f      	bne.n	8005158 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	2220      	movs	r2, #32
 800513e:	431a      	orrs	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2241      	movs	r2, #65	; 0x41
 8005148:	2120      	movs	r1, #32
 800514a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2240      	movs	r2, #64	; 0x40
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e007      	b.n	8005168 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2204      	movs	r2, #4
 8005160:	4013      	ands	r3, r2
 8005162:	2b04      	cmp	r3, #4
 8005164:	d193      	bne.n	800508e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	0018      	movs	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	b004      	add	sp, #16
 800516e:	bd80      	pop	{r7, pc}
 8005170:	fe00e800 	.word	0xfe00e800

08005174 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b08b      	sub	sp, #44	; 0x2c
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005180:	2327      	movs	r3, #39	; 0x27
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2210      	movs	r2, #16
 800519c:	4013      	ands	r3, r2
 800519e:	d100      	bne.n	80051a2 <I2C_IsErrorOccurred+0x2e>
 80051a0:	e08e      	b.n	80052c0 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2210      	movs	r2, #16
 80051a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051aa:	e06c      	b.n	8005286 <I2C_IsErrorOccurred+0x112>
 80051ac:	2427      	movs	r4, #39	; 0x27
 80051ae:	193b      	adds	r3, r7, r4
 80051b0:	193a      	adds	r2, r7, r4
 80051b2:	7812      	ldrb	r2, [r2, #0]
 80051b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	3301      	adds	r3, #1
 80051ba:	d064      	beq.n	8005286 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051bc:	f7ff f920 	bl	8004400 <HAL_GetTick>
 80051c0:	0002      	movs	r2, r0
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d306      	bcc.n	80051da <I2C_IsErrorOccurred+0x66>
 80051cc:	193b      	adds	r3, r7, r4
 80051ce:	193a      	adds	r2, r7, r4
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d155      	bne.n	8005286 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	01db      	lsls	r3, r3, #7
 80051e4:	4013      	ands	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051e8:	2013      	movs	r0, #19
 80051ea:	183b      	adds	r3, r7, r0
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	2142      	movs	r1, #66	; 0x42
 80051f0:	5c52      	ldrb	r2, [r2, r1]
 80051f2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	401a      	ands	r2, r3
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	429a      	cmp	r2, r3
 8005206:	d137      	bne.n	8005278 <I2C_IsErrorOccurred+0x104>
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	01db      	lsls	r3, r3, #7
 800520e:	429a      	cmp	r2, r3
 8005210:	d032      	beq.n	8005278 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8005212:	183b      	adds	r3, r7, r0
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b20      	cmp	r3, #32
 8005218:	d02e      	beq.n	8005278 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2180      	movs	r1, #128	; 0x80
 8005226:	01c9      	lsls	r1, r1, #7
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800522c:	f7ff f8e8 	bl	8004400 <HAL_GetTick>
 8005230:	0003      	movs	r3, r0
 8005232:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005234:	e020      	b.n	8005278 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005236:	f7ff f8e3 	bl	8004400 <HAL_GetTick>
 800523a:	0002      	movs	r2, r0
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2027      	movs	r0, #39	; 0x27
 8005242:	183a      	adds	r2, r7, r0
 8005244:	1839      	adds	r1, r7, r0
 8005246:	7809      	ldrb	r1, [r1, #0]
 8005248:	7011      	strb	r1, [r2, #0]
 800524a:	2b19      	cmp	r3, #25
 800524c:	d914      	bls.n	8005278 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	2220      	movs	r2, #32
 8005254:	431a      	orrs	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2241      	movs	r2, #65	; 0x41
 800525e:	2120      	movs	r1, #32
 8005260:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2242      	movs	r2, #66	; 0x42
 8005266:	2100      	movs	r1, #0
 8005268:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2240      	movs	r2, #64	; 0x40
 800526e:	2100      	movs	r1, #0
 8005270:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8005272:	183b      	adds	r3, r7, r0
 8005274:	2201      	movs	r2, #1
 8005276:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2220      	movs	r2, #32
 8005280:	4013      	ands	r3, r2
 8005282:	2b20      	cmp	r3, #32
 8005284:	d1d7      	bne.n	8005236 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	2220      	movs	r2, #32
 800528e:	4013      	ands	r3, r2
 8005290:	2b20      	cmp	r3, #32
 8005292:	d004      	beq.n	800529e <I2C_IsErrorOccurred+0x12a>
 8005294:	2327      	movs	r3, #39	; 0x27
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d086      	beq.n	80051ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800529e:	2327      	movs	r3, #39	; 0x27
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2220      	movs	r2, #32
 80052ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	2204      	movs	r2, #4
 80052b4:	4313      	orrs	r3, r2
 80052b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052b8:	2327      	movs	r3, #39	; 0x27
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	2380      	movs	r3, #128	; 0x80
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	4013      	ands	r3, r2
 80052d0:	d00c      	beq.n	80052ec <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	2201      	movs	r2, #1
 80052d6:	4313      	orrs	r3, r2
 80052d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	0052      	lsls	r2, r2, #1
 80052e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052e4:	2327      	movs	r3, #39	; 0x27
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4013      	ands	r3, r2
 80052f4:	d00c      	beq.n	8005310 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2208      	movs	r2, #8
 80052fa:	4313      	orrs	r3, r2
 80052fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2280      	movs	r2, #128	; 0x80
 8005304:	00d2      	lsls	r2, r2, #3
 8005306:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005308:	2327      	movs	r3, #39	; 0x27
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4013      	ands	r3, r2
 8005318:	d00c      	beq.n	8005334 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2202      	movs	r2, #2
 800531e:	4313      	orrs	r3, r2
 8005320:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2280      	movs	r2, #128	; 0x80
 8005328:	0092      	lsls	r2, r2, #2
 800532a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800532c:	2327      	movs	r3, #39	; 0x27
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005334:	2327      	movs	r3, #39	; 0x27
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01d      	beq.n	800537a <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	0018      	movs	r0, r3
 8005342:	f7ff fdc1 	bl	8004ec8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	490d      	ldr	r1, [pc, #52]	; (8005388 <I2C_IsErrorOccurred+0x214>)
 8005352:	400a      	ands	r2, r1
 8005354:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2241      	movs	r2, #65	; 0x41
 8005366:	2120      	movs	r1, #32
 8005368:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2242      	movs	r2, #66	; 0x42
 800536e:	2100      	movs	r1, #0
 8005370:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2240      	movs	r2, #64	; 0x40
 8005376:	2100      	movs	r1, #0
 8005378:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800537a:	2327      	movs	r3, #39	; 0x27
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	781b      	ldrb	r3, [r3, #0]
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b00b      	add	sp, #44	; 0x2c
 8005386:	bd90      	pop	{r4, r7, pc}
 8005388:	fe00e800 	.word	0xfe00e800

0800538c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	0008      	movs	r0, r1
 8005396:	0011      	movs	r1, r2
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	240a      	movs	r4, #10
 800539c:	193b      	adds	r3, r7, r4
 800539e:	1c02      	adds	r2, r0, #0
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	2009      	movs	r0, #9
 80053a4:	183b      	adds	r3, r7, r0
 80053a6:	1c0a      	adds	r2, r1, #0
 80053a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053aa:	193b      	adds	r3, r7, r4
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	059b      	lsls	r3, r3, #22
 80053b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053b2:	183b      	adds	r3, r7, r0
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	0419      	lsls	r1, r3, #16
 80053b8:	23ff      	movs	r3, #255	; 0xff
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	4313      	orrs	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d6:	0d51      	lsrs	r1, r2, #21
 80053d8:	2280      	movs	r2, #128	; 0x80
 80053da:	00d2      	lsls	r2, r2, #3
 80053dc:	400a      	ands	r2, r1
 80053de:	4907      	ldr	r1, [pc, #28]	; (80053fc <I2C_TransferConfig+0x70>)
 80053e0:	430a      	orrs	r2, r1
 80053e2:	43d2      	mvns	r2, r2
 80053e4:	401a      	ands	r2, r3
 80053e6:	0011      	movs	r1, r2
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	46bd      	mov	sp, r7
 80053f6:	b007      	add	sp, #28
 80053f8:	bd90      	pop	{r4, r7, pc}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	03ff63ff 	.word	0x03ff63ff

08005400 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2241      	movs	r2, #65	; 0x41
 800540e:	5c9b      	ldrb	r3, [r3, r2]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b20      	cmp	r3, #32
 8005414:	d138      	bne.n	8005488 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2240      	movs	r2, #64	; 0x40
 800541a:	5c9b      	ldrb	r3, [r3, r2]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005420:	2302      	movs	r3, #2
 8005422:	e032      	b.n	800548a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2240      	movs	r2, #64	; 0x40
 8005428:	2101      	movs	r1, #1
 800542a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2241      	movs	r2, #65	; 0x41
 8005430:	2124      	movs	r1, #36	; 0x24
 8005432:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	438a      	bics	r2, r1
 8005442:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4911      	ldr	r1, [pc, #68]	; (8005494 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005450:	400a      	ands	r2, r1
 8005452:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6819      	ldr	r1, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2101      	movs	r1, #1
 8005470:	430a      	orrs	r2, r1
 8005472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2241      	movs	r2, #65	; 0x41
 8005478:	2120      	movs	r1, #32
 800547a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2240      	movs	r2, #64	; 0x40
 8005480:	2100      	movs	r1, #0
 8005482:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	0018      	movs	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	b002      	add	sp, #8
 8005490:	bd80      	pop	{r7, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	ffffefff 	.word	0xffffefff

08005498 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2241      	movs	r2, #65	; 0x41
 80054a6:	5c9b      	ldrb	r3, [r3, r2]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d139      	bne.n	8005522 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2240      	movs	r2, #64	; 0x40
 80054b2:	5c9b      	ldrb	r3, [r3, r2]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e033      	b.n	8005524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2240      	movs	r2, #64	; 0x40
 80054c0:	2101      	movs	r1, #1
 80054c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2241      	movs	r2, #65	; 0x41
 80054c8:	2124      	movs	r1, #36	; 0x24
 80054ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2101      	movs	r1, #1
 80054d8:	438a      	bics	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a11      	ldr	r2, [pc, #68]	; (800552c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2101      	movs	r1, #1
 800550a:	430a      	orrs	r2, r1
 800550c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2241      	movs	r2, #65	; 0x41
 8005512:	2120      	movs	r1, #32
 8005514:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2240      	movs	r2, #64	; 0x40
 800551a:	2100      	movs	r1, #0
 800551c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e000      	b.n	8005524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005522:	2302      	movs	r3, #2
  }
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b004      	add	sp, #16
 800552a:	bd80      	pop	{r7, pc}
 800552c:	fffff0ff 	.word	0xfffff0ff

08005530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005538:	4b19      	ldr	r3, [pc, #100]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800553e:	4013      	ands	r3, r2
 8005540:	0019      	movs	r1, r3
 8005542:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	430a      	orrs	r2, r1
 8005548:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	429a      	cmp	r2, r3
 8005552:	d11f      	bne.n	8005594 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005554:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	0013      	movs	r3, r2
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	189b      	adds	r3, r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4912      	ldr	r1, [pc, #72]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005562:	0018      	movs	r0, r3
 8005564:	f7fa fde8 	bl	8000138 <__udivsi3>
 8005568:	0003      	movs	r3, r0
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800556e:	e008      	b.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3b01      	subs	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	e001      	b.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e009      	b.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	401a      	ands	r2, r3
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	429a      	cmp	r2, r3
 8005592:	d0ed      	beq.n	8005570 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b004      	add	sp, #16
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	40007000 	.word	0x40007000
 80055a4:	fffff9ff 	.word	0xfffff9ff
 80055a8:	2000004c 	.word	0x2000004c
 80055ac:	000f4240 	.word	0x000f4240

080055b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80055b4:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	23e0      	movs	r3, #224	; 0xe0
 80055ba:	01db      	lsls	r3, r3, #7
 80055bc:	4013      	ands	r3, r2
}
 80055be:	0018      	movs	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000

080055c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e2f3      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2201      	movs	r2, #1
 80055e0:	4013      	ands	r3, r2
 80055e2:	d100      	bne.n	80055e6 <HAL_RCC_OscConfig+0x1e>
 80055e4:	e07c      	b.n	80056e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e6:	4bc3      	ldr	r3, [pc, #780]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2238      	movs	r2, #56	; 0x38
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055f0:	4bc0      	ldr	r3, [pc, #768]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2203      	movs	r2, #3
 80055f6:	4013      	ands	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d102      	bne.n	8005606 <HAL_RCC_OscConfig+0x3e>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d002      	beq.n	800560c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d10b      	bne.n	8005624 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	4bb9      	ldr	r3, [pc, #740]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	029b      	lsls	r3, r3, #10
 8005614:	4013      	ands	r3, r2
 8005616:	d062      	beq.n	80056de <HAL_RCC_OscConfig+0x116>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d15e      	bne.n	80056de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e2ce      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	2380      	movs	r3, #128	; 0x80
 800562a:	025b      	lsls	r3, r3, #9
 800562c:	429a      	cmp	r2, r3
 800562e:	d107      	bne.n	8005640 <HAL_RCC_OscConfig+0x78>
 8005630:	4bb0      	ldr	r3, [pc, #704]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4baf      	ldr	r3, [pc, #700]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005636:	2180      	movs	r1, #128	; 0x80
 8005638:	0249      	lsls	r1, r1, #9
 800563a:	430a      	orrs	r2, r1
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e020      	b.n	8005682 <HAL_RCC_OscConfig+0xba>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	23a0      	movs	r3, #160	; 0xa0
 8005646:	02db      	lsls	r3, r3, #11
 8005648:	429a      	cmp	r2, r3
 800564a:	d10e      	bne.n	800566a <HAL_RCC_OscConfig+0xa2>
 800564c:	4ba9      	ldr	r3, [pc, #676]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	4ba8      	ldr	r3, [pc, #672]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005652:	2180      	movs	r1, #128	; 0x80
 8005654:	02c9      	lsls	r1, r1, #11
 8005656:	430a      	orrs	r2, r1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	4ba6      	ldr	r3, [pc, #664]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4ba5      	ldr	r3, [pc, #660]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005660:	2180      	movs	r1, #128	; 0x80
 8005662:	0249      	lsls	r1, r1, #9
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e00b      	b.n	8005682 <HAL_RCC_OscConfig+0xba>
 800566a:	4ba2      	ldr	r3, [pc, #648]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4ba1      	ldr	r3, [pc, #644]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005670:	49a1      	ldr	r1, [pc, #644]	; (80058f8 <HAL_RCC_OscConfig+0x330>)
 8005672:	400a      	ands	r2, r1
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	4b9f      	ldr	r3, [pc, #636]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b9e      	ldr	r3, [pc, #632]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800567c:	499f      	ldr	r1, [pc, #636]	; (80058fc <HAL_RCC_OscConfig+0x334>)
 800567e:	400a      	ands	r2, r1
 8005680:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d014      	beq.n	80056b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568a:	f7fe feb9 	bl	8004400 <HAL_GetTick>
 800568e:	0003      	movs	r3, r0
 8005690:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005694:	f7fe feb4 	bl	8004400 <HAL_GetTick>
 8005698:	0002      	movs	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b64      	cmp	r3, #100	; 0x64
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e28d      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056a6:	4b93      	ldr	r3, [pc, #588]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	029b      	lsls	r3, r3, #10
 80056ae:	4013      	ands	r3, r2
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCC_OscConfig+0xcc>
 80056b2:	e015      	b.n	80056e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fe fea4 	bl	8004400 <HAL_GetTick>
 80056b8:	0003      	movs	r3, r0
 80056ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056be:	f7fe fe9f 	bl	8004400 <HAL_GetTick>
 80056c2:	0002      	movs	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b64      	cmp	r3, #100	; 0x64
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e278      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056d0:	4b88      	ldr	r3, [pc, #544]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	029b      	lsls	r3, r3, #10
 80056d8:	4013      	ands	r3, r2
 80056da:	d1f0      	bne.n	80056be <HAL_RCC_OscConfig+0xf6>
 80056dc:	e000      	b.n	80056e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2202      	movs	r2, #2
 80056e6:	4013      	ands	r3, r2
 80056e8:	d100      	bne.n	80056ec <HAL_RCC_OscConfig+0x124>
 80056ea:	e099      	b.n	8005820 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ec:	4b81      	ldr	r3, [pc, #516]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2238      	movs	r2, #56	; 0x38
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056f6:	4b7f      	ldr	r3, [pc, #508]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	2203      	movs	r2, #3
 80056fc:	4013      	ands	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b10      	cmp	r3, #16
 8005704:	d102      	bne.n	800570c <HAL_RCC_OscConfig+0x144>
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d002      	beq.n	8005712 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d135      	bne.n	800577e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005712:	4b78      	ldr	r3, [pc, #480]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	4013      	ands	r3, r2
 800571c:	d005      	beq.n	800572a <HAL_RCC_OscConfig+0x162>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e24b      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572a:	4b72      	ldr	r3, [pc, #456]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4a74      	ldr	r2, [pc, #464]	; (8005900 <HAL_RCC_OscConfig+0x338>)
 8005730:	4013      	ands	r3, r2
 8005732:	0019      	movs	r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	021a      	lsls	r2, r3, #8
 800573a:	4b6e      	ldr	r3, [pc, #440]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800573c:	430a      	orrs	r2, r1
 800573e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d112      	bne.n	800576c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005746:	4b6b      	ldr	r3, [pc, #428]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a6e      	ldr	r2, [pc, #440]	; (8005904 <HAL_RCC_OscConfig+0x33c>)
 800574c:	4013      	ands	r3, r2
 800574e:	0019      	movs	r1, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	4b67      	ldr	r3, [pc, #412]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005756:	430a      	orrs	r2, r1
 8005758:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800575a:	4b66      	ldr	r3, [pc, #408]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	0adb      	lsrs	r3, r3, #11
 8005760:	2207      	movs	r2, #7
 8005762:	4013      	ands	r3, r2
 8005764:	4a68      	ldr	r2, [pc, #416]	; (8005908 <HAL_RCC_OscConfig+0x340>)
 8005766:	40da      	lsrs	r2, r3
 8005768:	4b68      	ldr	r3, [pc, #416]	; (800590c <HAL_RCC_OscConfig+0x344>)
 800576a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800576c:	4b68      	ldr	r3, [pc, #416]	; (8005910 <HAL_RCC_OscConfig+0x348>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0018      	movs	r0, r3
 8005772:	f7fe fde9 	bl	8004348 <HAL_InitTick>
 8005776:	1e03      	subs	r3, r0, #0
 8005778:	d051      	beq.n	800581e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e221      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d030      	beq.n	80057e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005786:	4b5b      	ldr	r3, [pc, #364]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a5e      	ldr	r2, [pc, #376]	; (8005904 <HAL_RCC_OscConfig+0x33c>)
 800578c:	4013      	ands	r3, r2
 800578e:	0019      	movs	r1, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	4b57      	ldr	r3, [pc, #348]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005796:	430a      	orrs	r2, r1
 8005798:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800579a:	4b56      	ldr	r3, [pc, #344]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b55      	ldr	r3, [pc, #340]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	0049      	lsls	r1, r1, #1
 80057a4:	430a      	orrs	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fe fe2a 	bl	8004400 <HAL_GetTick>
 80057ac:	0003      	movs	r3, r0
 80057ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b2:	f7fe fe25 	bl	8004400 <HAL_GetTick>
 80057b6:	0002      	movs	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e1fe      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057c4:	4b4b      	ldr	r3, [pc, #300]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4013      	ands	r3, r2
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d0:	4b48      	ldr	r3, [pc, #288]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	4a4a      	ldr	r2, [pc, #296]	; (8005900 <HAL_RCC_OscConfig+0x338>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	0019      	movs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	021a      	lsls	r2, r3, #8
 80057e0:	4b44      	ldr	r3, [pc, #272]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	e01b      	b.n	8005820 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80057e8:	4b42      	ldr	r3, [pc, #264]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80057ee:	4949      	ldr	r1, [pc, #292]	; (8005914 <HAL_RCC_OscConfig+0x34c>)
 80057f0:	400a      	ands	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fe fe04 	bl	8004400 <HAL_GetTick>
 80057f8:	0003      	movs	r3, r0
 80057fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057fe:	f7fe fdff 	bl	8004400 <HAL_GetTick>
 8005802:	0002      	movs	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e1d8      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005810:	4b38      	ldr	r3, [pc, #224]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	2380      	movs	r3, #128	; 0x80
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4013      	ands	r3, r2
 800581a:	d1f0      	bne.n	80057fe <HAL_RCC_OscConfig+0x236>
 800581c:	e000      	b.n	8005820 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800581e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2208      	movs	r2, #8
 8005826:	4013      	ands	r3, r2
 8005828:	d047      	beq.n	80058ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800582a:	4b32      	ldr	r3, [pc, #200]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2238      	movs	r2, #56	; 0x38
 8005830:	4013      	ands	r3, r2
 8005832:	2b18      	cmp	r3, #24
 8005834:	d10a      	bne.n	800584c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005836:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583a:	2202      	movs	r2, #2
 800583c:	4013      	ands	r3, r2
 800583e:	d03c      	beq.n	80058ba <HAL_RCC_OscConfig+0x2f2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d138      	bne.n	80058ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e1ba      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d019      	beq.n	8005888 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005854:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 8005856:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005858:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800585a:	2101      	movs	r1, #1
 800585c:	430a      	orrs	r2, r1
 800585e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fe fdce 	bl	8004400 <HAL_GetTick>
 8005864:	0003      	movs	r3, r0
 8005866:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800586a:	f7fe fdc9 	bl	8004400 <HAL_GetTick>
 800586e:	0002      	movs	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e1a2      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800587c:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800587e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005880:	2202      	movs	r2, #2
 8005882:	4013      	ands	r3, r2
 8005884:	d0f1      	beq.n	800586a <HAL_RCC_OscConfig+0x2a2>
 8005886:	e018      	b.n	80058ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800588a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800588c:	4b19      	ldr	r3, [pc, #100]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 800588e:	2101      	movs	r1, #1
 8005890:	438a      	bics	r2, r1
 8005892:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005894:	f7fe fdb4 	bl	8004400 <HAL_GetTick>
 8005898:	0003      	movs	r3, r0
 800589a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800589e:	f7fe fdaf 	bl	8004400 <HAL_GetTick>
 80058a2:	0002      	movs	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e188      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058b0:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80058b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b4:	2202      	movs	r2, #2
 80058b6:	4013      	ands	r3, r2
 80058b8:	d1f1      	bne.n	800589e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2204      	movs	r2, #4
 80058c0:	4013      	ands	r3, r2
 80058c2:	d100      	bne.n	80058c6 <HAL_RCC_OscConfig+0x2fe>
 80058c4:	e0c6      	b.n	8005a54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c6:	231f      	movs	r3, #31
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80058ce:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2238      	movs	r2, #56	; 0x38
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d11e      	bne.n	8005918 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_RCC_OscConfig+0x32c>)
 80058dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058de:	2202      	movs	r2, #2
 80058e0:	4013      	ands	r3, r2
 80058e2:	d100      	bne.n	80058e6 <HAL_RCC_OscConfig+0x31e>
 80058e4:	e0b6      	b.n	8005a54 <HAL_RCC_OscConfig+0x48c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d000      	beq.n	80058f0 <HAL_RCC_OscConfig+0x328>
 80058ee:	e0b1      	b.n	8005a54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e166      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
 80058f4:	40021000 	.word	0x40021000
 80058f8:	fffeffff 	.word	0xfffeffff
 80058fc:	fffbffff 	.word	0xfffbffff
 8005900:	ffff80ff 	.word	0xffff80ff
 8005904:	ffffc7ff 	.word	0xffffc7ff
 8005908:	00f42400 	.word	0x00f42400
 800590c:	2000004c 	.word	0x2000004c
 8005910:	20000050 	.word	0x20000050
 8005914:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005918:	4bac      	ldr	r3, [pc, #688]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 800591a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	055b      	lsls	r3, r3, #21
 8005920:	4013      	ands	r3, r2
 8005922:	d101      	bne.n	8005928 <HAL_RCC_OscConfig+0x360>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <HAL_RCC_OscConfig+0x362>
 8005928:	2300      	movs	r3, #0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d011      	beq.n	8005952 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800592e:	4ba7      	ldr	r3, [pc, #668]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005932:	4ba6      	ldr	r3, [pc, #664]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005934:	2180      	movs	r1, #128	; 0x80
 8005936:	0549      	lsls	r1, r1, #21
 8005938:	430a      	orrs	r2, r1
 800593a:	63da      	str	r2, [r3, #60]	; 0x3c
 800593c:	4ba3      	ldr	r3, [pc, #652]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 800593e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	055b      	lsls	r3, r3, #21
 8005944:	4013      	ands	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800594a:	231f      	movs	r3, #31
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005952:	4b9f      	ldr	r3, [pc, #636]	; (8005bd0 <HAL_RCC_OscConfig+0x608>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	2380      	movs	r3, #128	; 0x80
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4013      	ands	r3, r2
 800595c:	d11a      	bne.n	8005994 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800595e:	4b9c      	ldr	r3, [pc, #624]	; (8005bd0 <HAL_RCC_OscConfig+0x608>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b9b      	ldr	r3, [pc, #620]	; (8005bd0 <HAL_RCC_OscConfig+0x608>)
 8005964:	2180      	movs	r1, #128	; 0x80
 8005966:	0049      	lsls	r1, r1, #1
 8005968:	430a      	orrs	r2, r1
 800596a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800596c:	f7fe fd48 	bl	8004400 <HAL_GetTick>
 8005970:	0003      	movs	r3, r0
 8005972:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005976:	f7fe fd43 	bl	8004400 <HAL_GetTick>
 800597a:	0002      	movs	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e11c      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005988:	4b91      	ldr	r3, [pc, #580]	; (8005bd0 <HAL_RCC_OscConfig+0x608>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	4013      	ands	r3, r2
 8005992:	d0f0      	beq.n	8005976 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d106      	bne.n	80059aa <HAL_RCC_OscConfig+0x3e2>
 800599c:	4b8b      	ldr	r3, [pc, #556]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 800599e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059a0:	4b8a      	ldr	r3, [pc, #552]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 80059a2:	2101      	movs	r1, #1
 80059a4:	430a      	orrs	r2, r1
 80059a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80059a8:	e01c      	b.n	80059e4 <HAL_RCC_OscConfig+0x41c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d10c      	bne.n	80059cc <HAL_RCC_OscConfig+0x404>
 80059b2:	4b86      	ldr	r3, [pc, #536]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 80059b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059b6:	4b85      	ldr	r3, [pc, #532]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 80059b8:	2104      	movs	r1, #4
 80059ba:	430a      	orrs	r2, r1
 80059bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80059be:	4b83      	ldr	r3, [pc, #524]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 80059c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059c2:	4b82      	ldr	r3, [pc, #520]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 80059c4:	2101      	movs	r1, #1
 80059c6:	430a      	orrs	r2, r1
 80059c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80059ca:	e00b      	b.n	80059e4 <HAL_RCC_OscConfig+0x41c>
 80059cc:	4b7f      	ldr	r3, [pc, #508]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 80059ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059d0:	4b7e      	ldr	r3, [pc, #504]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 80059d2:	2101      	movs	r1, #1
 80059d4:	438a      	bics	r2, r1
 80059d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80059d8:	4b7c      	ldr	r3, [pc, #496]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 80059da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059dc:	4b7b      	ldr	r3, [pc, #492]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 80059de:	2104      	movs	r1, #4
 80059e0:	438a      	bics	r2, r1
 80059e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d014      	beq.n	8005a16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fe fd08 	bl	8004400 <HAL_GetTick>
 80059f0:	0003      	movs	r3, r0
 80059f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f4:	e009      	b.n	8005a0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fe fd03 	bl	8004400 <HAL_GetTick>
 80059fa:	0002      	movs	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	4a74      	ldr	r2, [pc, #464]	; (8005bd4 <HAL_RCC_OscConfig+0x60c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e0db      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0a:	4b70      	ldr	r3, [pc, #448]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	2202      	movs	r2, #2
 8005a10:	4013      	ands	r3, r2
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCC_OscConfig+0x42e>
 8005a14:	e013      	b.n	8005a3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a16:	f7fe fcf3 	bl	8004400 <HAL_GetTick>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a1e:	e009      	b.n	8005a34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a20:	f7fe fcee 	bl	8004400 <HAL_GetTick>
 8005a24:	0002      	movs	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	4a6a      	ldr	r2, [pc, #424]	; (8005bd4 <HAL_RCC_OscConfig+0x60c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e0c6      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a34:	4b65      	ldr	r3, [pc, #404]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a38:	2202      	movs	r2, #2
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005a3e:	231f      	movs	r3, #31
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005a48:	4b60      	ldr	r3, [pc, #384]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a4c:	4b5f      	ldr	r3, [pc, #380]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005a4e:	4962      	ldr	r1, [pc, #392]	; (8005bd8 <HAL_RCC_OscConfig+0x610>)
 8005a50:	400a      	ands	r2, r1
 8005a52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d100      	bne.n	8005a5e <HAL_RCC_OscConfig+0x496>
 8005a5c:	e0b0      	b.n	8005bc0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a5e:	4b5b      	ldr	r3, [pc, #364]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2238      	movs	r2, #56	; 0x38
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b10      	cmp	r3, #16
 8005a68:	d100      	bne.n	8005a6c <HAL_RCC_OscConfig+0x4a4>
 8005a6a:	e078      	b.n	8005b5e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d153      	bne.n	8005b1c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a74:	4b55      	ldr	r3, [pc, #340]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	4b54      	ldr	r3, [pc, #336]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005a7a:	4958      	ldr	r1, [pc, #352]	; (8005bdc <HAL_RCC_OscConfig+0x614>)
 8005a7c:	400a      	ands	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a80:	f7fe fcbe 	bl	8004400 <HAL_GetTick>
 8005a84:	0003      	movs	r3, r0
 8005a86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a8a:	f7fe fcb9 	bl	8004400 <HAL_GetTick>
 8005a8e:	0002      	movs	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e092      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a9c:	4b4b      	ldr	r3, [pc, #300]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	049b      	lsls	r3, r3, #18
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d1f0      	bne.n	8005a8a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aa8:	4b48      	ldr	r3, [pc, #288]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a4c      	ldr	r2, [pc, #304]	; (8005be0 <HAL_RCC_OscConfig+0x618>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1a      	ldr	r2, [r3, #32]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	4b3e      	ldr	r3, [pc, #248]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad6:	4b3d      	ldr	r3, [pc, #244]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b3c      	ldr	r3, [pc, #240]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005adc:	2180      	movs	r1, #128	; 0x80
 8005ade:	0449      	lsls	r1, r1, #17
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005ae4:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	4b38      	ldr	r3, [pc, #224]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	0549      	lsls	r1, r1, #21
 8005aee:	430a      	orrs	r2, r1
 8005af0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af2:	f7fe fc85 	bl	8004400 <HAL_GetTick>
 8005af6:	0003      	movs	r3, r0
 8005af8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fe fc80 	bl	8004400 <HAL_GetTick>
 8005b00:	0002      	movs	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e059      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0e:	4b2f      	ldr	r3, [pc, #188]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	049b      	lsls	r3, r3, #18
 8005b16:	4013      	ands	r3, r2
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x534>
 8005b1a:	e051      	b.n	8005bc0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b1c:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005b22:	492e      	ldr	r1, [pc, #184]	; (8005bdc <HAL_RCC_OscConfig+0x614>)
 8005b24:	400a      	ands	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fe fc6a 	bl	8004400 <HAL_GetTick>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b30:	e008      	b.n	8005b44 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b32:	f7fe fc65 	bl	8004400 <HAL_GetTick>
 8005b36:	0002      	movs	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e03e      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b44:	4b21      	ldr	r3, [pc, #132]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	049b      	lsls	r3, r3, #18
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d1f0      	bne.n	8005b32 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005b50:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005b56:	4923      	ldr	r1, [pc, #140]	; (8005be4 <HAL_RCC_OscConfig+0x61c>)
 8005b58:	400a      	ands	r2, r1
 8005b5a:	60da      	str	r2, [r3, #12]
 8005b5c:	e030      	b.n	8005bc0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e02b      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005b6a:	4b18      	ldr	r3, [pc, #96]	; (8005bcc <HAL_RCC_OscConfig+0x604>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2203      	movs	r2, #3
 8005b74:	401a      	ands	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d11e      	bne.n	8005bbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2270      	movs	r2, #112	; 0x70
 8005b82:	401a      	ands	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d117      	bne.n	8005bbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	23fe      	movs	r3, #254	; 0xfe
 8005b90:	01db      	lsls	r3, r3, #7
 8005b92:	401a      	ands	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d10e      	bne.n	8005bbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	23f8      	movs	r3, #248	; 0xf8
 8005ba2:	039b      	lsls	r3, r3, #14
 8005ba4:	401a      	ands	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d106      	bne.n	8005bbc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	0f5b      	lsrs	r3, r3, #29
 8005bb2:	075a      	lsls	r2, r3, #29
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d001      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b008      	add	sp, #32
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	40007000 	.word	0x40007000
 8005bd4:	00001388 	.word	0x00001388
 8005bd8:	efffffff 	.word	0xefffffff
 8005bdc:	feffffff 	.word	0xfeffffff
 8005be0:	1fc1808c 	.word	0x1fc1808c
 8005be4:	effefffc 	.word	0xeffefffc

08005be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0e9      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b76      	ldr	r3, [pc, #472]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2207      	movs	r2, #7
 8005c02:	4013      	ands	r3, r2
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d91e      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b73      	ldr	r3, [pc, #460]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2207      	movs	r2, #7
 8005c10:	4393      	bics	r3, r2
 8005c12:	0019      	movs	r1, r3
 8005c14:	4b70      	ldr	r3, [pc, #448]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c1c:	f7fe fbf0 	bl	8004400 <HAL_GetTick>
 8005c20:	0003      	movs	r3, r0
 8005c22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c24:	e009      	b.n	8005c3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c26:	f7fe fbeb 	bl	8004400 <HAL_GetTick>
 8005c2a:	0002      	movs	r2, r0
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	4a6a      	ldr	r2, [pc, #424]	; (8005ddc <HAL_RCC_ClockConfig+0x1f4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e0ca      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c3a:	4b67      	ldr	r3, [pc, #412]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2207      	movs	r2, #7
 8005c40:	4013      	ands	r3, r2
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d1ee      	bne.n	8005c26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d015      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2204      	movs	r2, #4
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d006      	beq.n	8005c6a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005c5c:	4b60      	ldr	r3, [pc, #384]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	4b5f      	ldr	r3, [pc, #380]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c62:	21e0      	movs	r1, #224	; 0xe0
 8005c64:	01c9      	lsls	r1, r1, #7
 8005c66:	430a      	orrs	r2, r1
 8005c68:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c6a:	4b5d      	ldr	r3, [pc, #372]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	4a5d      	ldr	r2, [pc, #372]	; (8005de4 <HAL_RCC_ClockConfig+0x1fc>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	0019      	movs	r1, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	4b59      	ldr	r3, [pc, #356]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2201      	movs	r2, #1
 8005c84:	4013      	ands	r3, r2
 8005c86:	d057      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d107      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c90:	4b53      	ldr	r3, [pc, #332]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	2380      	movs	r3, #128	; 0x80
 8005c96:	029b      	lsls	r3, r3, #10
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d12b      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e097      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca8:	4b4d      	ldr	r3, [pc, #308]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	2380      	movs	r3, #128	; 0x80
 8005cae:	049b      	lsls	r3, r3, #18
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d11f      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e08b      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cc0:	4b47      	ldr	r3, [pc, #284]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d113      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e07f      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d106      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cd8:	4b41      	ldr	r3, [pc, #260]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cdc:	2202      	movs	r2, #2
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d108      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e074      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce6:	4b3e      	ldr	r3, [pc, #248]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cea:	2202      	movs	r2, #2
 8005cec:	4013      	ands	r3, r2
 8005cee:	d101      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e06d      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cf4:	4b3a      	ldr	r3, [pc, #232]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2207      	movs	r2, #7
 8005cfa:	4393      	bics	r3, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	4b37      	ldr	r3, [pc, #220]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005d04:	430a      	orrs	r2, r1
 8005d06:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d08:	f7fe fb7a 	bl	8004400 <HAL_GetTick>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d10:	e009      	b.n	8005d26 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d12:	f7fe fb75 	bl	8004400 <HAL_GetTick>
 8005d16:	0002      	movs	r2, r0
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	4a2f      	ldr	r2, [pc, #188]	; (8005ddc <HAL_RCC_ClockConfig+0x1f4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e054      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d26:	4b2e      	ldr	r3, [pc, #184]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2238      	movs	r2, #56	; 0x38
 8005d2c:	401a      	ands	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d1ec      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d38:	4b27      	ldr	r3, [pc, #156]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2207      	movs	r2, #7
 8005d3e:	4013      	ands	r3, r2
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d21e      	bcs.n	8005d84 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2207      	movs	r2, #7
 8005d4c:	4393      	bics	r3, r2
 8005d4e:	0019      	movs	r1, r3
 8005d50:	4b21      	ldr	r3, [pc, #132]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d58:	f7fe fb52 	bl	8004400 <HAL_GetTick>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d60:	e009      	b.n	8005d76 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d62:	f7fe fb4d 	bl	8004400 <HAL_GetTick>
 8005d66:	0002      	movs	r2, r0
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <HAL_RCC_ClockConfig+0x1f4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e02c      	b.n	8005dd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d76:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2207      	movs	r2, #7
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d1ee      	bne.n	8005d62 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2204      	movs	r2, #4
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005d8e:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <HAL_RCC_ClockConfig+0x200>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	0019      	movs	r1, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005da2:	f000 f829 	bl	8005df8 <HAL_RCC_GetSysClockFreq>
 8005da6:	0001      	movs	r1, r0
 8005da8:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <HAL_RCC_ClockConfig+0x1f8>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	220f      	movs	r2, #15
 8005db0:	401a      	ands	r2, r3
 8005db2:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <HAL_RCC_ClockConfig+0x204>)
 8005db4:	0092      	lsls	r2, r2, #2
 8005db6:	58d3      	ldr	r3, [r2, r3]
 8005db8:	221f      	movs	r2, #31
 8005dba:	4013      	ands	r3, r2
 8005dbc:	000a      	movs	r2, r1
 8005dbe:	40da      	lsrs	r2, r3
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCC_ClockConfig+0x208>)
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_RCC_ClockConfig+0x20c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f7fe fabd 	bl	8004348 <HAL_InitTick>
 8005dce:	0003      	movs	r3, r0
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b004      	add	sp, #16
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40022000 	.word	0x40022000
 8005ddc:	00001388 	.word	0x00001388
 8005de0:	40021000 	.word	0x40021000
 8005de4:	fffff0ff 	.word	0xfffff0ff
 8005de8:	ffff8fff 	.word	0xffff8fff
 8005dec:	0800cc8c 	.word	0x0800cc8c
 8005df0:	2000004c 	.word	0x2000004c
 8005df4:	20000050 	.word	0x20000050

08005df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dfe:	4b3c      	ldr	r3, [pc, #240]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2238      	movs	r2, #56	; 0x38
 8005e04:	4013      	ands	r3, r2
 8005e06:	d10f      	bne.n	8005e28 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005e08:	4b39      	ldr	r3, [pc, #228]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	0adb      	lsrs	r3, r3, #11
 8005e0e:	2207      	movs	r2, #7
 8005e10:	4013      	ands	r3, r2
 8005e12:	2201      	movs	r2, #1
 8005e14:	409a      	lsls	r2, r3
 8005e16:	0013      	movs	r3, r2
 8005e18:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	4835      	ldr	r0, [pc, #212]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005e1e:	f7fa f98b 	bl	8000138 <__udivsi3>
 8005e22:	0003      	movs	r3, r0
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	e05d      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e28:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2238      	movs	r2, #56	; 0x38
 8005e2e:	4013      	ands	r3, r2
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d102      	bne.n	8005e3a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e34:	4b2f      	ldr	r3, [pc, #188]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	e054      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e3a:	4b2d      	ldr	r3, [pc, #180]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2238      	movs	r2, #56	; 0x38
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d138      	bne.n	8005eb8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005e46:	4b2a      	ldr	r3, [pc, #168]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e50:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	2207      	movs	r2, #7
 8005e58:	4013      	ands	r3, r2
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d10d      	bne.n	8005e80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	4823      	ldr	r0, [pc, #140]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005e68:	f7fa f966 	bl	8000138 <__udivsi3>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	0019      	movs	r1, r3
 8005e70:	4b1f      	ldr	r3, [pc, #124]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	0a1b      	lsrs	r3, r3, #8
 8005e76:	227f      	movs	r2, #127	; 0x7f
 8005e78:	4013      	ands	r3, r2
 8005e7a:	434b      	muls	r3, r1
 8005e7c:	617b      	str	r3, [r7, #20]
        break;
 8005e7e:	e00d      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	481c      	ldr	r0, [pc, #112]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005e84:	f7fa f958 	bl	8000138 <__udivsi3>
 8005e88:	0003      	movs	r3, r0
 8005e8a:	0019      	movs	r1, r3
 8005e8c:	4b18      	ldr	r3, [pc, #96]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	0a1b      	lsrs	r3, r3, #8
 8005e92:	227f      	movs	r2, #127	; 0x7f
 8005e94:	4013      	ands	r3, r2
 8005e96:	434b      	muls	r3, r1
 8005e98:	617b      	str	r3, [r7, #20]
        break;
 8005e9a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005e9c:	4b14      	ldr	r3, [pc, #80]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	0f5b      	lsrs	r3, r3, #29
 8005ea2:	2207      	movs	r2, #7
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	6978      	ldr	r0, [r7, #20]
 8005eae:	f7fa f943 	bl	8000138 <__udivsi3>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	e015      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005eb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2238      	movs	r2, #56	; 0x38
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d103      	bne.n	8005ecc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005ecc:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2238      	movs	r2, #56	; 0x38
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b18      	cmp	r3, #24
 8005ed6:	d103      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005ed8:	23fa      	movs	r3, #250	; 0xfa
 8005eda:	01db      	lsls	r3, r3, #7
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	e001      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ee4:	693b      	ldr	r3, [r7, #16]
}
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	b006      	add	sp, #24
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	00f42400 	.word	0x00f42400

08005ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	0018      	movs	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	2000004c 	.word	0x2000004c

08005f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f0c:	b5b0      	push	{r4, r5, r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005f10:	f7ff fff2 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f14:	0004      	movs	r4, r0
 8005f16:	f7ff fb4b 	bl	80055b0 <LL_RCC_GetAPB1Prescaler>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	0b1a      	lsrs	r2, r3, #12
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f20:	0092      	lsls	r2, r2, #2
 8005f22:	58d3      	ldr	r3, [r2, r3]
 8005f24:	221f      	movs	r2, #31
 8005f26:	4013      	ands	r3, r2
 8005f28:	40dc      	lsrs	r4, r3
 8005f2a:	0023      	movs	r3, r4
}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bdb0      	pop	{r4, r5, r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	0800cccc 	.word	0x0800cccc

08005f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005f40:	2313      	movs	r3, #19
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f48:	2312      	movs	r3, #18
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	029b      	lsls	r3, r3, #10
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005f5c:	e0a3      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f5e:	2011      	movs	r0, #17
 8005f60:	183b      	adds	r3, r7, r0
 8005f62:	2200      	movs	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f66:	4b86      	ldr	r3, [pc, #536]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	055b      	lsls	r3, r3, #21
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d110      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f72:	4b83      	ldr	r3, [pc, #524]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f76:	4b82      	ldr	r3, [pc, #520]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f78:	2180      	movs	r1, #128	; 0x80
 8005f7a:	0549      	lsls	r1, r1, #21
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f80:	4b7f      	ldr	r3, [pc, #508]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f84:	2380      	movs	r3, #128	; 0x80
 8005f86:	055b      	lsls	r3, r3, #21
 8005f88:	4013      	ands	r3, r2
 8005f8a:	60bb      	str	r3, [r7, #8]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f8e:	183b      	adds	r3, r7, r0
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f94:	4b7b      	ldr	r3, [pc, #492]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b7a      	ldr	r3, [pc, #488]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005f9a:	2180      	movs	r1, #128	; 0x80
 8005f9c:	0049      	lsls	r1, r1, #1
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fa2:	f7fe fa2d 	bl	8004400 <HAL_GetTick>
 8005fa6:	0003      	movs	r3, r0
 8005fa8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005faa:	e00b      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fac:	f7fe fa28 	bl	8004400 <HAL_GetTick>
 8005fb0:	0002      	movs	r2, r0
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d904      	bls.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005fba:	2313      	movs	r3, #19
 8005fbc:	18fb      	adds	r3, r7, r3
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	701a      	strb	r2, [r3, #0]
        break;
 8005fc2:	e005      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fc4:	4b6f      	ldr	r3, [pc, #444]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d0ed      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005fd0:	2313      	movs	r3, #19
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d154      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fda:	4b69      	ldr	r3, [pc, #420]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fde:	23c0      	movs	r3, #192	; 0xc0
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d019      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d014      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ff6:	4b62      	ldr	r3, [pc, #392]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	4a63      	ldr	r2, [pc, #396]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006000:	4b5f      	ldr	r3, [pc, #380]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006004:	4b5e      	ldr	r3, [pc, #376]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006006:	2180      	movs	r1, #128	; 0x80
 8006008:	0249      	lsls	r1, r1, #9
 800600a:	430a      	orrs	r2, r1
 800600c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800600e:	4b5c      	ldr	r3, [pc, #368]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006012:	4b5b      	ldr	r3, [pc, #364]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006014:	495d      	ldr	r1, [pc, #372]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006016:	400a      	ands	r2, r1
 8006018:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800601a:	4b59      	ldr	r3, [pc, #356]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2201      	movs	r2, #1
 8006024:	4013      	ands	r3, r2
 8006026:	d016      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006028:	f7fe f9ea 	bl	8004400 <HAL_GetTick>
 800602c:	0003      	movs	r3, r0
 800602e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006030:	e00c      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006032:	f7fe f9e5 	bl	8004400 <HAL_GetTick>
 8006036:	0002      	movs	r2, r0
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	4a54      	ldr	r2, [pc, #336]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d904      	bls.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006042:	2313      	movs	r3, #19
 8006044:	18fb      	adds	r3, r7, r3
 8006046:	2203      	movs	r2, #3
 8006048:	701a      	strb	r2, [r3, #0]
            break;
 800604a:	e004      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800604c:	4b4c      	ldr	r3, [pc, #304]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800604e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006050:	2202      	movs	r2, #2
 8006052:	4013      	ands	r3, r2
 8006054:	d0ed      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006056:	2313      	movs	r3, #19
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006060:	4b47      	ldr	r3, [pc, #284]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006064:	4a48      	ldr	r2, [pc, #288]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006066:	4013      	ands	r3, r2
 8006068:	0019      	movs	r1, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	4b44      	ldr	r3, [pc, #272]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006070:	430a      	orrs	r2, r1
 8006072:	65da      	str	r2, [r3, #92]	; 0x5c
 8006074:	e00c      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006076:	2312      	movs	r3, #18
 8006078:	18fb      	adds	r3, r7, r3
 800607a:	2213      	movs	r2, #19
 800607c:	18ba      	adds	r2, r7, r2
 800607e:	7812      	ldrb	r2, [r2, #0]
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	e005      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	2312      	movs	r3, #18
 8006086:	18fb      	adds	r3, r7, r3
 8006088:	2213      	movs	r2, #19
 800608a:	18ba      	adds	r2, r7, r2
 800608c:	7812      	ldrb	r2, [r2, #0]
 800608e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006090:	2311      	movs	r3, #17
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d105      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800609a:	4b39      	ldr	r3, [pc, #228]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800609c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800609e:	4b38      	ldr	r3, [pc, #224]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060a0:	493c      	ldr	r1, [pc, #240]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80060a2:	400a      	ands	r2, r1
 80060a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2201      	movs	r2, #1
 80060ac:	4013      	ands	r3, r2
 80060ae:	d009      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060b0:	4b33      	ldr	r3, [pc, #204]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b4:	2203      	movs	r2, #3
 80060b6:	4393      	bics	r3, r2
 80060b8:	0019      	movs	r1, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	4b30      	ldr	r3, [pc, #192]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060c0:	430a      	orrs	r2, r1
 80060c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2202      	movs	r2, #2
 80060ca:	4013      	ands	r3, r2
 80060cc:	d009      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060ce:	4b2c      	ldr	r3, [pc, #176]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	220c      	movs	r2, #12
 80060d4:	4393      	bics	r3, r2
 80060d6:	0019      	movs	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	4b28      	ldr	r3, [pc, #160]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060de:	430a      	orrs	r2, r1
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2220      	movs	r2, #32
 80060e8:	4013      	ands	r3, r2
 80060ea:	d009      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060ec:	4b24      	ldr	r3, [pc, #144]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f0:	4a29      	ldr	r2, [pc, #164]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f2:	4013      	ands	r3, r2
 80060f4:	0019      	movs	r1, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	4b21      	ldr	r3, [pc, #132]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060fc:	430a      	orrs	r2, r1
 80060fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	01db      	lsls	r3, r3, #7
 8006108:	4013      	ands	r3, r2
 800610a:	d015      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800610c:	4b1c      	ldr	r3, [pc, #112]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	0899      	lsrs	r1, r3, #2
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	4b19      	ldr	r3, [pc, #100]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800611a:	430a      	orrs	r2, r1
 800611c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	2380      	movs	r3, #128	; 0x80
 8006124:	05db      	lsls	r3, r3, #23
 8006126:	429a      	cmp	r2, r3
 8006128:	d106      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800612a:	4b15      	ldr	r3, [pc, #84]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	4b14      	ldr	r3, [pc, #80]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006130:	2180      	movs	r1, #128	; 0x80
 8006132:	0249      	lsls	r1, r1, #9
 8006134:	430a      	orrs	r2, r1
 8006136:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	4013      	ands	r3, r2
 8006142:	d016      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006148:	4a14      	ldr	r2, [pc, #80]	; (800619c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800614a:	4013      	ands	r3, r2
 800614c:	0019      	movs	r1, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691a      	ldr	r2, [r3, #16]
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006154:	430a      	orrs	r2, r1
 8006156:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	2380      	movs	r3, #128	; 0x80
 800615e:	01db      	lsls	r3, r3, #7
 8006160:	429a      	cmp	r2, r3
 8006162:	d106      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	4b05      	ldr	r3, [pc, #20]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800616a:	2180      	movs	r1, #128	; 0x80
 800616c:	0249      	lsls	r1, r1, #9
 800616e:	430a      	orrs	r2, r1
 8006170:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006172:	2312      	movs	r3, #18
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	781b      	ldrb	r3, [r3, #0]
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b006      	add	sp, #24
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40021000 	.word	0x40021000
 8006184:	40007000 	.word	0x40007000
 8006188:	fffffcff 	.word	0xfffffcff
 800618c:	fffeffff 	.word	0xfffeffff
 8006190:	00001388 	.word	0x00001388
 8006194:	efffffff 	.word	0xefffffff
 8006198:	ffffcfff 	.word	0xffffcfff
 800619c:	ffff3fff 	.word	0xffff3fff

080061a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e04a      	b.n	8006248 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	223d      	movs	r2, #61	; 0x3d
 80061b6:	5c9b      	ldrb	r3, [r3, r2]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	223c      	movs	r2, #60	; 0x3c
 80061c2:	2100      	movs	r1, #0
 80061c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7fd fd43 	bl	8003c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	223d      	movs	r2, #61	; 0x3d
 80061d2:	2102      	movs	r1, #2
 80061d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3304      	adds	r3, #4
 80061de:	0019      	movs	r1, r3
 80061e0:	0010      	movs	r0, r2
 80061e2:	f000 f9e5 	bl	80065b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2248      	movs	r2, #72	; 0x48
 80061ea:	2101      	movs	r1, #1
 80061ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	223e      	movs	r2, #62	; 0x3e
 80061f2:	2101      	movs	r1, #1
 80061f4:	5499      	strb	r1, [r3, r2]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	223f      	movs	r2, #63	; 0x3f
 80061fa:	2101      	movs	r1, #1
 80061fc:	5499      	strb	r1, [r3, r2]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2240      	movs	r2, #64	; 0x40
 8006202:	2101      	movs	r1, #1
 8006204:	5499      	strb	r1, [r3, r2]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2241      	movs	r2, #65	; 0x41
 800620a:	2101      	movs	r1, #1
 800620c:	5499      	strb	r1, [r3, r2]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2242      	movs	r2, #66	; 0x42
 8006212:	2101      	movs	r1, #1
 8006214:	5499      	strb	r1, [r3, r2]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2243      	movs	r2, #67	; 0x43
 800621a:	2101      	movs	r1, #1
 800621c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2244      	movs	r2, #68	; 0x44
 8006222:	2101      	movs	r1, #1
 8006224:	5499      	strb	r1, [r3, r2]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2245      	movs	r2, #69	; 0x45
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2246      	movs	r2, #70	; 0x46
 8006232:	2101      	movs	r1, #1
 8006234:	5499      	strb	r1, [r3, r2]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2247      	movs	r2, #71	; 0x47
 800623a:	2101      	movs	r1, #1
 800623c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	223d      	movs	r2, #61	; 0x3d
 8006242:	2101      	movs	r1, #1
 8006244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	0018      	movs	r0, r3
 800624a:	46bd      	mov	sp, r7
 800624c:	b002      	add	sp, #8
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	223d      	movs	r2, #61	; 0x3d
 800625c:	5c9b      	ldrb	r3, [r3, r2]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d001      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e03c      	b.n	80062e2 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	223d      	movs	r2, #61	; 0x3d
 800626c:	2102      	movs	r1, #2
 800626e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2101      	movs	r1, #1
 800627c:	430a      	orrs	r2, r1
 800627e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a19      	ldr	r2, [pc, #100]	; (80062ec <HAL_TIM_Base_Start_IT+0x9c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_TIM_Base_Start_IT+0x4e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_TIM_Base_Start_IT+0x4e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <HAL_TIM_Base_Start_IT+0xa4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d116      	bne.n	80062cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4a14      	ldr	r2, [pc, #80]	; (80062f8 <HAL_TIM_Base_Start_IT+0xa8>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	d016      	beq.n	80062de <HAL_TIM_Base_Start_IT+0x8e>
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	025b      	lsls	r3, r3, #9
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d011      	beq.n	80062de <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2101      	movs	r1, #1
 80062c6:	430a      	orrs	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ca:	e008      	b.n	80062de <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2101      	movs	r1, #1
 80062d8:	430a      	orrs	r2, r1
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	e000      	b.n	80062e0 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	0018      	movs	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b004      	add	sp, #16
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	00010007 	.word	0x00010007

080062fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2202      	movs	r2, #2
 800630c:	4013      	ands	r3, r2
 800630e:	2b02      	cmp	r3, #2
 8006310:	d124      	bne.n	800635c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2202      	movs	r2, #2
 800631a:	4013      	ands	r3, r2
 800631c:	2b02      	cmp	r3, #2
 800631e:	d11d      	bne.n	800635c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2203      	movs	r2, #3
 8006326:	4252      	negs	r2, r2
 8006328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2203      	movs	r2, #3
 8006338:	4013      	ands	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0018      	movs	r0, r3
 8006340:	f000 f91e 	bl	8006580 <HAL_TIM_IC_CaptureCallback>
 8006344:	e007      	b.n	8006356 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	0018      	movs	r0, r3
 800634a:	f000 f911 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f91d 	bl	8006590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2204      	movs	r2, #4
 8006364:	4013      	ands	r3, r2
 8006366:	2b04      	cmp	r3, #4
 8006368:	d125      	bne.n	80063b6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2204      	movs	r2, #4
 8006372:	4013      	ands	r3, r2
 8006374:	2b04      	cmp	r3, #4
 8006376:	d11e      	bne.n	80063b6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2205      	movs	r2, #5
 800637e:	4252      	negs	r2, r2
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2202      	movs	r2, #2
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	23c0      	movs	r3, #192	; 0xc0
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4013      	ands	r3, r2
 8006394:	d004      	beq.n	80063a0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0018      	movs	r0, r3
 800639a:	f000 f8f1 	bl	8006580 <HAL_TIM_IC_CaptureCallback>
 800639e:	e007      	b.n	80063b0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0018      	movs	r0, r3
 80063a4:	f000 f8e4 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	0018      	movs	r0, r3
 80063ac:	f000 f8f0 	bl	8006590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2208      	movs	r2, #8
 80063be:	4013      	ands	r3, r2
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d124      	bne.n	800640e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2208      	movs	r2, #8
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d11d      	bne.n	800640e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2209      	movs	r2, #9
 80063d8:	4252      	negs	r2, r2
 80063da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2204      	movs	r2, #4
 80063e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	2203      	movs	r2, #3
 80063ea:	4013      	ands	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f000 f8c5 	bl	8006580 <HAL_TIM_IC_CaptureCallback>
 80063f6:	e007      	b.n	8006408 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	0018      	movs	r0, r3
 80063fc:	f000 f8b8 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	0018      	movs	r0, r3
 8006404:	f000 f8c4 	bl	8006590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2210      	movs	r2, #16
 8006416:	4013      	ands	r3, r2
 8006418:	2b10      	cmp	r3, #16
 800641a:	d125      	bne.n	8006468 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2210      	movs	r2, #16
 8006424:	4013      	ands	r3, r2
 8006426:	2b10      	cmp	r3, #16
 8006428:	d11e      	bne.n	8006468 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2211      	movs	r2, #17
 8006430:	4252      	negs	r2, r2
 8006432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2208      	movs	r2, #8
 8006438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	23c0      	movs	r3, #192	; 0xc0
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4013      	ands	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	0018      	movs	r0, r3
 800644c:	f000 f898 	bl	8006580 <HAL_TIM_IC_CaptureCallback>
 8006450:	e007      	b.n	8006462 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	0018      	movs	r0, r3
 8006456:	f000 f88b 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	0018      	movs	r0, r3
 800645e:	f000 f897 	bl	8006590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2201      	movs	r2, #1
 8006470:	4013      	ands	r3, r2
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10f      	bne.n	8006496 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	4013      	ands	r3, r2
 8006480:	2b01      	cmp	r3, #1
 8006482:	d108      	bne.n	8006496 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2202      	movs	r2, #2
 800648a:	4252      	negs	r2, r2
 800648c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	0018      	movs	r0, r3
 8006492:	f000 f865 	bl	8006560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2280      	movs	r2, #128	; 0x80
 800649e:	4013      	ands	r3, r2
 80064a0:	2b80      	cmp	r3, #128	; 0x80
 80064a2:	d10f      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	2280      	movs	r2, #128	; 0x80
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d108      	bne.n	80064c4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2281      	movs	r2, #129	; 0x81
 80064b8:	4252      	negs	r2, r2
 80064ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	0018      	movs	r0, r3
 80064c0:	f000 f95c 	bl	800677c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	2380      	movs	r3, #128	; 0x80
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	401a      	ands	r2, r3
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d10e      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	2280      	movs	r2, #128	; 0x80
 80064e0:	4013      	ands	r3, r2
 80064e2:	2b80      	cmp	r3, #128	; 0x80
 80064e4:	d107      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1c      	ldr	r2, [pc, #112]	; (800655c <HAL_TIM_IRQHandler+0x260>)
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 f94b 	bl	800678c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2240      	movs	r2, #64	; 0x40
 80064fe:	4013      	ands	r3, r2
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d10f      	bne.n	8006524 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2240      	movs	r2, #64	; 0x40
 800650c:	4013      	ands	r3, r2
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d108      	bne.n	8006524 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2241      	movs	r2, #65	; 0x41
 8006518:	4252      	negs	r2, r2
 800651a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	0018      	movs	r0, r3
 8006520:	f000 f83e 	bl	80065a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2220      	movs	r2, #32
 800652c:	4013      	ands	r3, r2
 800652e:	2b20      	cmp	r3, #32
 8006530:	d10f      	bne.n	8006552 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	4013      	ands	r3, r2
 800653c:	2b20      	cmp	r3, #32
 800653e:	d108      	bne.n	8006552 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2221      	movs	r2, #33	; 0x21
 8006546:	4252      	negs	r2, r2
 8006548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	0018      	movs	r0, r3
 800654e:	f000 f90d 	bl	800676c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006552:	46c0      	nop			; (mov r8, r8)
 8006554:	46bd      	mov	sp, r7
 8006556:	b002      	add	sp, #8
 8006558:	bd80      	pop	{r7, pc}
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	fffffeff 	.word	0xfffffeff

08006560 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006568:	46c0      	nop			; (mov r8, r8)
 800656a:	46bd      	mov	sp, r7
 800656c:	b002      	add	sp, #8
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006578:	46c0      	nop			; (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006588:	46c0      	nop			; (mov r8, r8)
 800658a:	46bd      	mov	sp, r7
 800658c:	b002      	add	sp, #8
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006598:	46c0      	nop			; (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	b002      	add	sp, #8
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a8:	46c0      	nop			; (mov r8, r8)
 80065aa:	46bd      	mov	sp, r7
 80065ac:	b002      	add	sp, #8
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a2f      	ldr	r2, [pc, #188]	; (8006680 <TIM_Base_SetConfig+0xd0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_Base_SetConfig+0x20>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a2e      	ldr	r2, [pc, #184]	; (8006684 <TIM_Base_SetConfig+0xd4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d108      	bne.n	80065e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2270      	movs	r2, #112	; 0x70
 80065d4:	4393      	bics	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a26      	ldr	r2, [pc, #152]	; (8006680 <TIM_Base_SetConfig+0xd0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <TIM_Base_SetConfig+0x62>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a25      	ldr	r2, [pc, #148]	; (8006684 <TIM_Base_SetConfig+0xd4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00f      	beq.n	8006612 <TIM_Base_SetConfig+0x62>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a24      	ldr	r2, [pc, #144]	; (8006688 <TIM_Base_SetConfig+0xd8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00b      	beq.n	8006612 <TIM_Base_SetConfig+0x62>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a23      	ldr	r2, [pc, #140]	; (800668c <TIM_Base_SetConfig+0xdc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d007      	beq.n	8006612 <TIM_Base_SetConfig+0x62>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a22      	ldr	r2, [pc, #136]	; (8006690 <TIM_Base_SetConfig+0xe0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_Base_SetConfig+0x62>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a21      	ldr	r2, [pc, #132]	; (8006694 <TIM_Base_SetConfig+0xe4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d108      	bne.n	8006624 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4a20      	ldr	r2, [pc, #128]	; (8006698 <TIM_Base_SetConfig+0xe8>)
 8006616:	4013      	ands	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2280      	movs	r2, #128	; 0x80
 8006628:	4393      	bics	r3, r2
 800662a:	001a      	movs	r2, r3
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a0c      	ldr	r2, [pc, #48]	; (8006680 <TIM_Base_SetConfig+0xd0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00b      	beq.n	800666a <TIM_Base_SetConfig+0xba>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a0d      	ldr	r2, [pc, #52]	; (800668c <TIM_Base_SetConfig+0xdc>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d007      	beq.n	800666a <TIM_Base_SetConfig+0xba>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <TIM_Base_SetConfig+0xe0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d003      	beq.n	800666a <TIM_Base_SetConfig+0xba>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a0b      	ldr	r2, [pc, #44]	; (8006694 <TIM_Base_SetConfig+0xe4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d103      	bne.n	8006672 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	615a      	str	r2, [r3, #20]
}
 8006678:	46c0      	nop			; (mov r8, r8)
 800667a:	46bd      	mov	sp, r7
 800667c:	b004      	add	sp, #16
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40000400 	.word	0x40000400
 8006688:	40002000 	.word	0x40002000
 800668c:	40014000 	.word	0x40014000
 8006690:	40014400 	.word	0x40014400
 8006694:	40014800 	.word	0x40014800
 8006698:	fffffcff 	.word	0xfffffcff

0800669c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	223c      	movs	r2, #60	; 0x3c
 80066aa:	5c9b      	ldrb	r3, [r3, r2]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e04f      	b.n	8006754 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	223c      	movs	r2, #60	; 0x3c
 80066b8:	2101      	movs	r1, #1
 80066ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	223d      	movs	r2, #61	; 0x3d
 80066c0:	2102      	movs	r1, #2
 80066c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a20      	ldr	r2, [pc, #128]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d108      	bne.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4a1f      	ldr	r2, [pc, #124]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2270      	movs	r2, #112	; 0x70
 80066f4:	4393      	bics	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a13      	ldr	r2, [pc, #76]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a12      	ldr	r2, [pc, #72]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a11      	ldr	r2, [pc, #68]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d10c      	bne.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2280      	movs	r2, #128	; 0x80
 800672c:	4393      	bics	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	4313      	orrs	r3, r2
 8006738:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	223d      	movs	r2, #61	; 0x3d
 8006746:	2101      	movs	r1, #1
 8006748:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	223c      	movs	r2, #60	; 0x3c
 800674e:	2100      	movs	r1, #0
 8006750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	0018      	movs	r0, r3
 8006756:	46bd      	mov	sp, r7
 8006758:	b004      	add	sp, #16
 800675a:	bd80      	pop	{r7, pc}
 800675c:	40012c00 	.word	0x40012c00
 8006760:	ff0fffff 	.word	0xff0fffff
 8006764:	40000400 	.word	0x40000400
 8006768:	40014000 	.word	0x40014000

0800676c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006774:	46c0      	nop			; (mov r8, r8)
 8006776:	46bd      	mov	sp, r7
 8006778:	b002      	add	sp, #8
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b002      	add	sp, #8
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006794:	46c0      	nop			; (mov r8, r8)
 8006796:	46bd      	mov	sp, r7
 8006798:	b002      	add	sp, #8
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e046      	b.n	800683c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2284      	movs	r2, #132	; 0x84
 80067b2:	589b      	ldr	r3, [r3, r2]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d107      	bne.n	80067c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	2100      	movs	r1, #0
 80067be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	0018      	movs	r0, r3
 80067c4:	f7fd fa6c 	bl	8003ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2284      	movs	r2, #132	; 0x84
 80067cc:	2124      	movs	r1, #36	; 0x24
 80067ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2101      	movs	r1, #1
 80067dc:	438a      	bics	r2, r1
 80067de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	0018      	movs	r0, r3
 80067e4:	f000 f8dc 	bl	80069a0 <UART_SetConfig>
 80067e8:	0003      	movs	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e024      	b.n	800683c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f000 fa73 	bl	8006ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	490d      	ldr	r1, [pc, #52]	; (8006844 <HAL_UART_Init+0xa8>)
 800680e:	400a      	ands	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	212a      	movs	r1, #42	; 0x2a
 800681e:	438a      	bics	r2, r1
 8006820:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2101      	movs	r1, #1
 800682e:	430a      	orrs	r2, r1
 8006830:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	0018      	movs	r0, r3
 8006836:	f000 fb0b 	bl	8006e50 <UART_CheckIdleState>
 800683a:	0003      	movs	r3, r0
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b002      	add	sp, #8
 8006842:	bd80      	pop	{r7, pc}
 8006844:	ffffb7ff 	.word	0xffffb7ff

08006848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	; 0x28
 800684c:	af02      	add	r7, sp, #8
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	1dbb      	adds	r3, r7, #6
 8006856:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2284      	movs	r2, #132	; 0x84
 800685c:	589b      	ldr	r3, [r3, r2]
 800685e:	2b20      	cmp	r3, #32
 8006860:	d000      	beq.n	8006864 <HAL_UART_Transmit+0x1c>
 8006862:	e097      	b.n	8006994 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_UART_Transmit+0x2a>
 800686a:	1dbb      	adds	r3, r7, #6
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e08f      	b.n	8006996 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	2380      	movs	r3, #128	; 0x80
 800687c:	015b      	lsls	r3, r3, #5
 800687e:	429a      	cmp	r2, r3
 8006880:	d109      	bne.n	8006896 <HAL_UART_Transmit+0x4e>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2201      	movs	r2, #1
 800688e:	4013      	ands	r3, r2
 8006890:	d001      	beq.n	8006896 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e07f      	b.n	8006996 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2280      	movs	r2, #128	; 0x80
 800689a:	5c9b      	ldrb	r3, [r3, r2]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_UART_Transmit+0x5c>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e078      	b.n	8006996 <HAL_UART_Transmit+0x14e>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2280      	movs	r2, #128	; 0x80
 80068a8:	2101      	movs	r1, #1
 80068aa:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	228c      	movs	r2, #140	; 0x8c
 80068b0:	2100      	movs	r1, #0
 80068b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2284      	movs	r2, #132	; 0x84
 80068b8:	2121      	movs	r1, #33	; 0x21
 80068ba:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068bc:	f7fd fda0 	bl	8004400 <HAL_GetTick>
 80068c0:	0003      	movs	r3, r0
 80068c2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	1dba      	adds	r2, r7, #6
 80068c8:	2154      	movs	r1, #84	; 0x54
 80068ca:	8812      	ldrh	r2, [r2, #0]
 80068cc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1dba      	adds	r2, r7, #6
 80068d2:	2156      	movs	r1, #86	; 0x56
 80068d4:	8812      	ldrh	r2, [r2, #0]
 80068d6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	2380      	movs	r3, #128	; 0x80
 80068de:	015b      	lsls	r3, r3, #5
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d108      	bne.n	80068f6 <HAL_UART_Transmit+0xae>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	e003      	b.n	80068fe <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2280      	movs	r2, #128	; 0x80
 8006902:	2100      	movs	r1, #0
 8006904:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006906:	e02c      	b.n	8006962 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	0013      	movs	r3, r2
 8006912:	2200      	movs	r2, #0
 8006914:	2180      	movs	r1, #128	; 0x80
 8006916:	f000 fae5 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 800691a:	1e03      	subs	r3, r0, #0
 800691c:	d001      	beq.n	8006922 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e039      	b.n	8006996 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10b      	bne.n	8006940 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	001a      	movs	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	05d2      	lsls	r2, r2, #23
 8006934:	0dd2      	lsrs	r2, r2, #23
 8006936:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	3302      	adds	r3, #2
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e007      	b.n	8006950 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	781a      	ldrb	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3301      	adds	r3, #1
 800694e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2256      	movs	r2, #86	; 0x56
 8006954:	5a9b      	ldrh	r3, [r3, r2]
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b299      	uxth	r1, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2256      	movs	r2, #86	; 0x56
 8006960:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2256      	movs	r2, #86	; 0x56
 8006966:	5a9b      	ldrh	r3, [r3, r2]
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1cc      	bne.n	8006908 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	0013      	movs	r3, r2
 8006978:	2200      	movs	r2, #0
 800697a:	2140      	movs	r1, #64	; 0x40
 800697c:	f000 fab2 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8006980:	1e03      	subs	r3, r0, #0
 8006982:	d001      	beq.n	8006988 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e006      	b.n	8006996 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2284      	movs	r2, #132	; 0x84
 800698c:	2120      	movs	r1, #32
 800698e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e000      	b.n	8006996 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8006994:	2302      	movs	r3, #2
  }
}
 8006996:	0018      	movs	r0, r3
 8006998:	46bd      	mov	sp, r7
 800699a:	b008      	add	sp, #32
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b088      	sub	sp, #32
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069a8:	231a      	movs	r3, #26
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4abc      	ldr	r2, [pc, #752]	; (8006cc0 <UART_SetConfig+0x320>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	0019      	movs	r1, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	430a      	orrs	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4ab7      	ldr	r2, [pc, #732]	; (8006cc4 <UART_SetConfig+0x324>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	0019      	movs	r1, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	4aae      	ldr	r2, [pc, #696]	; (8006cc8 <UART_SetConfig+0x328>)
 8006a0e:	4013      	ands	r3, r2
 8006a10:	0019      	movs	r1, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a22:	220f      	movs	r2, #15
 8006a24:	4393      	bics	r3, r2
 8006a26:	0019      	movs	r1, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4aa4      	ldr	r2, [pc, #656]	; (8006ccc <UART_SetConfig+0x32c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d127      	bne.n	8006a8e <UART_SetConfig+0xee>
 8006a3e:	4ba4      	ldr	r3, [pc, #656]	; (8006cd0 <UART_SetConfig+0x330>)
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	2203      	movs	r2, #3
 8006a44:	4013      	ands	r3, r2
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d017      	beq.n	8006a7a <UART_SetConfig+0xda>
 8006a4a:	d81b      	bhi.n	8006a84 <UART_SetConfig+0xe4>
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d00a      	beq.n	8006a66 <UART_SetConfig+0xc6>
 8006a50:	d818      	bhi.n	8006a84 <UART_SetConfig+0xe4>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <UART_SetConfig+0xbc>
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d00a      	beq.n	8006a70 <UART_SetConfig+0xd0>
 8006a5a:	e013      	b.n	8006a84 <UART_SetConfig+0xe4>
 8006a5c:	231b      	movs	r3, #27
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	e058      	b.n	8006b18 <UART_SetConfig+0x178>
 8006a66:	231b      	movs	r3, #27
 8006a68:	18fb      	adds	r3, r7, r3
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	e053      	b.n	8006b18 <UART_SetConfig+0x178>
 8006a70:	231b      	movs	r3, #27
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	2204      	movs	r2, #4
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	e04e      	b.n	8006b18 <UART_SetConfig+0x178>
 8006a7a:	231b      	movs	r3, #27
 8006a7c:	18fb      	adds	r3, r7, r3
 8006a7e:	2208      	movs	r2, #8
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	e049      	b.n	8006b18 <UART_SetConfig+0x178>
 8006a84:	231b      	movs	r3, #27
 8006a86:	18fb      	adds	r3, r7, r3
 8006a88:	2210      	movs	r2, #16
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	e044      	b.n	8006b18 <UART_SetConfig+0x178>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a90      	ldr	r2, [pc, #576]	; (8006cd4 <UART_SetConfig+0x334>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d127      	bne.n	8006ae8 <UART_SetConfig+0x148>
 8006a98:	4b8d      	ldr	r3, [pc, #564]	; (8006cd0 <UART_SetConfig+0x330>)
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9c:	220c      	movs	r2, #12
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b0c      	cmp	r3, #12
 8006aa2:	d017      	beq.n	8006ad4 <UART_SetConfig+0x134>
 8006aa4:	d81b      	bhi.n	8006ade <UART_SetConfig+0x13e>
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d00a      	beq.n	8006ac0 <UART_SetConfig+0x120>
 8006aaa:	d818      	bhi.n	8006ade <UART_SetConfig+0x13e>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <UART_SetConfig+0x116>
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d00a      	beq.n	8006aca <UART_SetConfig+0x12a>
 8006ab4:	e013      	b.n	8006ade <UART_SetConfig+0x13e>
 8006ab6:	231b      	movs	r3, #27
 8006ab8:	18fb      	adds	r3, r7, r3
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e02b      	b.n	8006b18 <UART_SetConfig+0x178>
 8006ac0:	231b      	movs	r3, #27
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	e026      	b.n	8006b18 <UART_SetConfig+0x178>
 8006aca:	231b      	movs	r3, #27
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	2204      	movs	r2, #4
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	e021      	b.n	8006b18 <UART_SetConfig+0x178>
 8006ad4:	231b      	movs	r3, #27
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	2208      	movs	r2, #8
 8006ada:	701a      	strb	r2, [r3, #0]
 8006adc:	e01c      	b.n	8006b18 <UART_SetConfig+0x178>
 8006ade:	231b      	movs	r3, #27
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	2210      	movs	r2, #16
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	e017      	b.n	8006b18 <UART_SetConfig+0x178>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a7a      	ldr	r2, [pc, #488]	; (8006cd8 <UART_SetConfig+0x338>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d104      	bne.n	8006afc <UART_SetConfig+0x15c>
 8006af2:	231b      	movs	r3, #27
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	2200      	movs	r2, #0
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	e00d      	b.n	8006b18 <UART_SetConfig+0x178>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a76      	ldr	r2, [pc, #472]	; (8006cdc <UART_SetConfig+0x33c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d104      	bne.n	8006b10 <UART_SetConfig+0x170>
 8006b06:	231b      	movs	r3, #27
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	e003      	b.n	8006b18 <UART_SetConfig+0x178>
 8006b10:	231b      	movs	r3, #27
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	2210      	movs	r2, #16
 8006b16:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	2380      	movs	r3, #128	; 0x80
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d000      	beq.n	8006b26 <UART_SetConfig+0x186>
 8006b24:	e065      	b.n	8006bf2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006b26:	231b      	movs	r3, #27
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d015      	beq.n	8006b5c <UART_SetConfig+0x1bc>
 8006b30:	dc18      	bgt.n	8006b64 <UART_SetConfig+0x1c4>
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d00d      	beq.n	8006b52 <UART_SetConfig+0x1b2>
 8006b36:	dc15      	bgt.n	8006b64 <UART_SetConfig+0x1c4>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <UART_SetConfig+0x1a2>
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d005      	beq.n	8006b4c <UART_SetConfig+0x1ac>
 8006b40:	e010      	b.n	8006b64 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b42:	f7ff f9e3 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8006b46:	0003      	movs	r3, r0
 8006b48:	617b      	str	r3, [r7, #20]
        break;
 8006b4a:	e012      	b.n	8006b72 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b4c:	4b64      	ldr	r3, [pc, #400]	; (8006ce0 <UART_SetConfig+0x340>)
 8006b4e:	617b      	str	r3, [r7, #20]
        break;
 8006b50:	e00f      	b.n	8006b72 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b52:	f7ff f951 	bl	8005df8 <HAL_RCC_GetSysClockFreq>
 8006b56:	0003      	movs	r3, r0
 8006b58:	617b      	str	r3, [r7, #20]
        break;
 8006b5a:	e00a      	b.n	8006b72 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	617b      	str	r3, [r7, #20]
        break;
 8006b62:	e006      	b.n	8006b72 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b68:	231a      	movs	r3, #26
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	701a      	strb	r2, [r3, #0]
        break;
 8006b70:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d100      	bne.n	8006b7a <UART_SetConfig+0x1da>
 8006b78:	e08d      	b.n	8006c96 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b7e:	4b59      	ldr	r3, [pc, #356]	; (8006ce4 <UART_SetConfig+0x344>)
 8006b80:	0052      	lsls	r2, r2, #1
 8006b82:	5ad3      	ldrh	r3, [r2, r3]
 8006b84:	0019      	movs	r1, r3
 8006b86:	6978      	ldr	r0, [r7, #20]
 8006b88:	f7f9 fad6 	bl	8000138 <__udivsi3>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	005a      	lsls	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	085b      	lsrs	r3, r3, #1
 8006b96:	18d2      	adds	r2, r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	0019      	movs	r1, r3
 8006b9e:	0010      	movs	r0, r2
 8006ba0:	f7f9 faca 	bl	8000138 <__udivsi3>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2b0f      	cmp	r3, #15
 8006bac:	d91c      	bls.n	8006be8 <UART_SetConfig+0x248>
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	025b      	lsls	r3, r3, #9
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d217      	bcs.n	8006be8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	200e      	movs	r0, #14
 8006bbe:	183b      	adds	r3, r7, r0
 8006bc0:	210f      	movs	r1, #15
 8006bc2:	438a      	bics	r2, r1
 8006bc4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	085b      	lsrs	r3, r3, #1
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2207      	movs	r2, #7
 8006bce:	4013      	ands	r3, r2
 8006bd0:	b299      	uxth	r1, r3
 8006bd2:	183b      	adds	r3, r7, r0
 8006bd4:	183a      	adds	r2, r7, r0
 8006bd6:	8812      	ldrh	r2, [r2, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	183a      	adds	r2, r7, r0
 8006be2:	8812      	ldrh	r2, [r2, #0]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	e056      	b.n	8006c96 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006be8:	231a      	movs	r3, #26
 8006bea:	18fb      	adds	r3, r7, r3
 8006bec:	2201      	movs	r2, #1
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	e051      	b.n	8006c96 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bf2:	231b      	movs	r3, #27
 8006bf4:	18fb      	adds	r3, r7, r3
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d015      	beq.n	8006c28 <UART_SetConfig+0x288>
 8006bfc:	dc18      	bgt.n	8006c30 <UART_SetConfig+0x290>
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d00d      	beq.n	8006c1e <UART_SetConfig+0x27e>
 8006c02:	dc15      	bgt.n	8006c30 <UART_SetConfig+0x290>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <UART_SetConfig+0x26e>
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d005      	beq.n	8006c18 <UART_SetConfig+0x278>
 8006c0c:	e010      	b.n	8006c30 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0e:	f7ff f97d 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8006c12:	0003      	movs	r3, r0
 8006c14:	617b      	str	r3, [r7, #20]
        break;
 8006c16:	e012      	b.n	8006c3e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c18:	4b31      	ldr	r3, [pc, #196]	; (8006ce0 <UART_SetConfig+0x340>)
 8006c1a:	617b      	str	r3, [r7, #20]
        break;
 8006c1c:	e00f      	b.n	8006c3e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1e:	f7ff f8eb 	bl	8005df8 <HAL_RCC_GetSysClockFreq>
 8006c22:	0003      	movs	r3, r0
 8006c24:	617b      	str	r3, [r7, #20]
        break;
 8006c26:	e00a      	b.n	8006c3e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	617b      	str	r3, [r7, #20]
        break;
 8006c2e:	e006      	b.n	8006c3e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c34:	231a      	movs	r3, #26
 8006c36:	18fb      	adds	r3, r7, r3
 8006c38:	2201      	movs	r2, #1
 8006c3a:	701a      	strb	r2, [r3, #0]
        break;
 8006c3c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d028      	beq.n	8006c96 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c48:	4b26      	ldr	r3, [pc, #152]	; (8006ce4 <UART_SetConfig+0x344>)
 8006c4a:	0052      	lsls	r2, r2, #1
 8006c4c:	5ad3      	ldrh	r3, [r2, r3]
 8006c4e:	0019      	movs	r1, r3
 8006c50:	6978      	ldr	r0, [r7, #20]
 8006c52:	f7f9 fa71 	bl	8000138 <__udivsi3>
 8006c56:	0003      	movs	r3, r0
 8006c58:	001a      	movs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	18d2      	adds	r2, r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	0019      	movs	r1, r3
 8006c68:	0010      	movs	r0, r2
 8006c6a:	f7f9 fa65 	bl	8000138 <__udivsi3>
 8006c6e:	0003      	movs	r3, r0
 8006c70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b0f      	cmp	r3, #15
 8006c76:	d90a      	bls.n	8006c8e <UART_SetConfig+0x2ee>
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	2380      	movs	r3, #128	; 0x80
 8006c7c:	025b      	lsls	r3, r3, #9
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d205      	bcs.n	8006c8e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60da      	str	r2, [r3, #12]
 8006c8c:	e003      	b.n	8006c96 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8e:	231a      	movs	r3, #26
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	226a      	movs	r2, #106	; 0x6a
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2268      	movs	r2, #104	; 0x68
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006cb2:	231a      	movs	r3, #26
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	781b      	ldrb	r3, [r3, #0]
}
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b008      	add	sp, #32
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	cfff69f3 	.word	0xcfff69f3
 8006cc4:	ffffcfff 	.word	0xffffcfff
 8006cc8:	11fff4ff 	.word	0x11fff4ff
 8006ccc:	40013800 	.word	0x40013800
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	40004400 	.word	0x40004400
 8006cd8:	40004800 	.word	0x40004800
 8006cdc:	40004c00 	.word	0x40004c00
 8006ce0:	00f42400 	.word	0x00f42400
 8006ce4:	0800ccec 	.word	0x0800ccec

08006ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	4a4a      	ldr	r2, [pc, #296]	; (8006e2c <UART_AdvFeatureConfig+0x144>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	0019      	movs	r1, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	2202      	movs	r2, #2
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d00b      	beq.n	8006d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	4a43      	ldr	r2, [pc, #268]	; (8006e30 <UART_AdvFeatureConfig+0x148>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	0019      	movs	r1, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	2204      	movs	r2, #4
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d00b      	beq.n	8006d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4a3b      	ldr	r2, [pc, #236]	; (8006e34 <UART_AdvFeatureConfig+0x14c>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	0019      	movs	r1, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4a34      	ldr	r2, [pc, #208]	; (8006e38 <UART_AdvFeatureConfig+0x150>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	0019      	movs	r1, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	2210      	movs	r2, #16
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d00b      	beq.n	8006d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	4a2c      	ldr	r2, [pc, #176]	; (8006e3c <UART_AdvFeatureConfig+0x154>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	0019      	movs	r1, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	2220      	movs	r2, #32
 8006da0:	4013      	ands	r3, r2
 8006da2:	d00b      	beq.n	8006dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	4a25      	ldr	r2, [pc, #148]	; (8006e40 <UART_AdvFeatureConfig+0x158>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	0019      	movs	r1, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	2240      	movs	r2, #64	; 0x40
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	d01d      	beq.n	8006e02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <UART_AdvFeatureConfig+0x15c>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	0019      	movs	r1, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	035b      	lsls	r3, r3, #13
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d10b      	bne.n	8006e02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	4a15      	ldr	r2, [pc, #84]	; (8006e48 <UART_AdvFeatureConfig+0x160>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	0019      	movs	r1, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	2280      	movs	r2, #128	; 0x80
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d00b      	beq.n	8006e24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	4a0e      	ldr	r2, [pc, #56]	; (8006e4c <UART_AdvFeatureConfig+0x164>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	0019      	movs	r1, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	605a      	str	r2, [r3, #4]
  }
}
 8006e24:	46c0      	nop			; (mov r8, r8)
 8006e26:	46bd      	mov	sp, r7
 8006e28:	b002      	add	sp, #8
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	fffdffff 	.word	0xfffdffff
 8006e30:	fffeffff 	.word	0xfffeffff
 8006e34:	fffbffff 	.word	0xfffbffff
 8006e38:	ffff7fff 	.word	0xffff7fff
 8006e3c:	ffffefff 	.word	0xffffefff
 8006e40:	ffffdfff 	.word	0xffffdfff
 8006e44:	ffefffff 	.word	0xffefffff
 8006e48:	ff9fffff 	.word	0xff9fffff
 8006e4c:	fff7ffff 	.word	0xfff7ffff

08006e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	228c      	movs	r2, #140	; 0x8c
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e60:	f7fd face 	bl	8004400 <HAL_GetTick>
 8006e64:	0003      	movs	r3, r0
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2208      	movs	r2, #8
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d10c      	bne.n	8006e90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2280      	movs	r2, #128	; 0x80
 8006e7a:	0391      	lsls	r1, r2, #14
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <UART_CheckIdleState+0x90>)
 8006e80:	9200      	str	r2, [sp, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f000 f82e 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8006e88:	1e03      	subs	r3, r0, #0
 8006e8a:	d001      	beq.n	8006e90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e023      	b.n	8006ed8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2204      	movs	r2, #4
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d10c      	bne.n	8006eb8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2280      	movs	r2, #128	; 0x80
 8006ea2:	03d1      	lsls	r1, r2, #15
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4a0e      	ldr	r2, [pc, #56]	; (8006ee0 <UART_CheckIdleState+0x90>)
 8006ea8:	9200      	str	r2, [sp, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f000 f81a 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8006eb0:	1e03      	subs	r3, r0, #0
 8006eb2:	d001      	beq.n	8006eb8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e00f      	b.n	8006ed8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2284      	movs	r2, #132	; 0x84
 8006ebc:	2120      	movs	r1, #32
 8006ebe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2288      	movs	r2, #136	; 0x88
 8006ec4:	2120      	movs	r1, #32
 8006ec6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	0018      	movs	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	b004      	add	sp, #16
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	01ffffff 	.word	0x01ffffff

08006ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b094      	sub	sp, #80	; 0x50
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	1dfb      	adds	r3, r7, #7
 8006ef2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef4:	e0a7      	b.n	8007046 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ef8:	3301      	adds	r3, #1
 8006efa:	d100      	bne.n	8006efe <UART_WaitOnFlagUntilTimeout+0x1a>
 8006efc:	e0a3      	b.n	8007046 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efe:	f7fd fa7f 	bl	8004400 <HAL_GetTick>
 8006f02:	0002      	movs	r2, r0
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d302      	bcc.n	8006f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d13f      	bne.n	8006f94 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f14:	f3ef 8310 	mrs	r3, PRIMASK
 8006f18:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1e:	2301      	movs	r3, #1
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	f383 8810 	msr	PRIMASK, r3
}
 8006f28:	46c0      	nop			; (mov r8, r8)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	494e      	ldr	r1, [pc, #312]	; (8007070 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006f36:	400a      	ands	r2, r1
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f3c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	f383 8810 	msr	PRIMASK, r3
}
 8006f44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f46:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f50:	2301      	movs	r3, #1
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	f383 8810 	msr	PRIMASK, r3
}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2101      	movs	r1, #1
 8006f68:	438a      	bics	r2, r1
 8006f6a:	609a      	str	r2, [r3, #8]
 8006f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f72:	f383 8810 	msr	PRIMASK, r3
}
 8006f76:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2284      	movs	r2, #132	; 0x84
 8006f7c:	2120      	movs	r1, #32
 8006f7e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2288      	movs	r2, #136	; 0x88
 8006f84:	2120      	movs	r1, #32
 8006f86:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2280      	movs	r2, #128	; 0x80
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e069      	b.n	8007068 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	d052      	beq.n	8007046 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69da      	ldr	r2, [r3, #28]
 8006fa6:	2380      	movs	r3, #128	; 0x80
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	401a      	ands	r2, r3
 8006fac:	2380      	movs	r3, #128	; 0x80
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d148      	bne.n	8007046 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2280      	movs	r2, #128	; 0x80
 8006fba:	0112      	lsls	r2, r2, #4
 8006fbc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc2:	613b      	str	r3, [r7, #16]
  return(result);
 8006fc4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f383 8810 	msr	PRIMASK, r3
}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4924      	ldr	r1, [pc, #144]	; (8007070 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006fe0:	400a      	ands	r2, r1
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	f383 8810 	msr	PRIMASK, r3
}
 8006fee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ff6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	f383 8810 	msr	PRIMASK, r3
}
 8007004:	46c0      	nop			; (mov r8, r8)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2101      	movs	r1, #1
 8007012:	438a      	bics	r2, r1
 8007014:	609a      	str	r2, [r3, #8]
 8007016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	f383 8810 	msr	PRIMASK, r3
}
 8007020:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2284      	movs	r2, #132	; 0x84
 8007026:	2120      	movs	r1, #32
 8007028:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2288      	movs	r2, #136	; 0x88
 800702e:	2120      	movs	r1, #32
 8007030:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	228c      	movs	r2, #140	; 0x8c
 8007036:	2120      	movs	r1, #32
 8007038:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2280      	movs	r2, #128	; 0x80
 800703e:	2100      	movs	r1, #0
 8007040:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e010      	b.n	8007068 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	4013      	ands	r3, r2
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	425a      	negs	r2, r3
 8007056:	4153      	adcs	r3, r2
 8007058:	b2db      	uxtb	r3, r3
 800705a:	001a      	movs	r2, r3
 800705c:	1dfb      	adds	r3, r7, #7
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d100      	bne.n	8007066 <UART_WaitOnFlagUntilTimeout+0x182>
 8007064:	e747      	b.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	0018      	movs	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	b014      	add	sp, #80	; 0x50
 800706e:	bd80      	pop	{r7, pc}
 8007070:	fffffe5f 	.word	0xfffffe5f

08007074 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2280      	movs	r2, #128	; 0x80
 8007080:	5c9b      	ldrb	r3, [r3, r2]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_UARTEx_DisableFifoMode+0x16>
 8007086:	2302      	movs	r3, #2
 8007088:	e027      	b.n	80070da <HAL_UARTEx_DisableFifoMode+0x66>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2280      	movs	r2, #128	; 0x80
 800708e:	2101      	movs	r1, #1
 8007090:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2284      	movs	r2, #132	; 0x84
 8007096:	2124      	movs	r1, #36	; 0x24
 8007098:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2101      	movs	r1, #1
 80070ae:	438a      	bics	r2, r1
 80070b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a0b      	ldr	r2, [pc, #44]	; (80070e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80070b6:	4013      	ands	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2284      	movs	r2, #132	; 0x84
 80070cc:	2120      	movs	r1, #32
 80070ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2280      	movs	r2, #128	; 0x80
 80070d4:	2100      	movs	r1, #0
 80070d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	0018      	movs	r0, r3
 80070dc:	46bd      	mov	sp, r7
 80070de:	b004      	add	sp, #16
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	dfffffff 	.word	0xdfffffff

080070e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2280      	movs	r2, #128	; 0x80
 80070f6:	5c9b      	ldrb	r3, [r3, r2]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e02e      	b.n	800715e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2280      	movs	r2, #128	; 0x80
 8007104:	2101      	movs	r1, #1
 8007106:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2284      	movs	r2, #132	; 0x84
 800710c:	2124      	movs	r1, #36	; 0x24
 800710e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2101      	movs	r1, #1
 8007124:	438a      	bics	r2, r1
 8007126:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	08d9      	lsrs	r1, r3, #3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	0018      	movs	r0, r3
 8007140:	f000 f854 	bl	80071ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2284      	movs	r2, #132	; 0x84
 8007150:	2120      	movs	r1, #32
 8007152:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2280      	movs	r2, #128	; 0x80
 8007158:	2100      	movs	r1, #0
 800715a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	0018      	movs	r0, r3
 8007160:	46bd      	mov	sp, r7
 8007162:	b004      	add	sp, #16
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2280      	movs	r2, #128	; 0x80
 8007176:	5c9b      	ldrb	r3, [r3, r2]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800717c:	2302      	movs	r3, #2
 800717e:	e02f      	b.n	80071e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2280      	movs	r2, #128	; 0x80
 8007184:	2101      	movs	r1, #1
 8007186:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2284      	movs	r2, #132	; 0x84
 800718c:	2124      	movs	r1, #36	; 0x24
 800718e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2101      	movs	r1, #1
 80071a4:	438a      	bics	r2, r1
 80071a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	4a0e      	ldr	r2, [pc, #56]	; (80071e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	0019      	movs	r1, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	0018      	movs	r0, r3
 80071c2:	f000 f813 	bl	80071ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2284      	movs	r2, #132	; 0x84
 80071d2:	2120      	movs	r1, #32
 80071d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2280      	movs	r2, #128	; 0x80
 80071da:	2100      	movs	r1, #0
 80071dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	0018      	movs	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b004      	add	sp, #16
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	f1ffffff 	.word	0xf1ffffff

080071ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d108      	bne.n	800720e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	226a      	movs	r2, #106	; 0x6a
 8007200:	2101      	movs	r1, #1
 8007202:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2268      	movs	r2, #104	; 0x68
 8007208:	2101      	movs	r1, #1
 800720a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800720c:	e043      	b.n	8007296 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800720e:	260f      	movs	r6, #15
 8007210:	19bb      	adds	r3, r7, r6
 8007212:	2208      	movs	r2, #8
 8007214:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007216:	200e      	movs	r0, #14
 8007218:	183b      	adds	r3, r7, r0
 800721a:	2208      	movs	r2, #8
 800721c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	0e5b      	lsrs	r3, r3, #25
 8007226:	b2da      	uxtb	r2, r3
 8007228:	240d      	movs	r4, #13
 800722a:	193b      	adds	r3, r7, r4
 800722c:	2107      	movs	r1, #7
 800722e:	400a      	ands	r2, r1
 8007230:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	0f5b      	lsrs	r3, r3, #29
 800723a:	b2da      	uxtb	r2, r3
 800723c:	250c      	movs	r5, #12
 800723e:	197b      	adds	r3, r7, r5
 8007240:	2107      	movs	r1, #7
 8007242:	400a      	ands	r2, r1
 8007244:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007246:	183b      	adds	r3, r7, r0
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	197a      	adds	r2, r7, r5
 800724c:	7812      	ldrb	r2, [r2, #0]
 800724e:	4914      	ldr	r1, [pc, #80]	; (80072a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007250:	5c8a      	ldrb	r2, [r1, r2]
 8007252:	435a      	muls	r2, r3
 8007254:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007256:	197b      	adds	r3, r7, r5
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	4a12      	ldr	r2, [pc, #72]	; (80072a4 <UARTEx_SetNbDataToProcess+0xb8>)
 800725c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800725e:	0019      	movs	r1, r3
 8007260:	f7f8 fff4 	bl	800024c <__divsi3>
 8007264:	0003      	movs	r3, r0
 8007266:	b299      	uxth	r1, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	226a      	movs	r2, #106	; 0x6a
 800726c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800726e:	19bb      	adds	r3, r7, r6
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	193a      	adds	r2, r7, r4
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	490a      	ldr	r1, [pc, #40]	; (80072a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007278:	5c8a      	ldrb	r2, [r1, r2]
 800727a:	435a      	muls	r2, r3
 800727c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800727e:	193b      	adds	r3, r7, r4
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007284:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007286:	0019      	movs	r1, r3
 8007288:	f7f8 ffe0 	bl	800024c <__divsi3>
 800728c:	0003      	movs	r3, r0
 800728e:	b299      	uxth	r1, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2268      	movs	r2, #104	; 0x68
 8007294:	5299      	strh	r1, [r3, r2]
}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	46bd      	mov	sp, r7
 800729a:	b005      	add	sp, #20
 800729c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	0800cd04 	.word	0x0800cd04
 80072a4:	0800cd0c 	.word	0x0800cd0c

080072a8 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 80072a8:	b5b0      	push	{r4, r5, r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	0002      	movs	r2, r0
 80072b0:	1dbb      	adds	r3, r7, #6
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	1d7b      	adds	r3, r7, #5
 80072b6:	1c0a      	adds	r2, r1, #0
 80072b8:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80072ba:	210f      	movs	r1, #15
 80072bc:	187b      	adds	r3, r7, r1
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]

	status = VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 80072c2:	1d7b      	adds	r3, r7, #5
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	085b      	lsrs	r3, r3, #1
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	000d      	movs	r5, r1
 80072cc:	187c      	adds	r4, r7, r1
 80072ce:	1dbb      	adds	r3, r7, #6
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	2101      	movs	r1, #1
 80072d4:	0018      	movs	r0, r3
 80072d6:	f000 fe67 	bl	8007fa8 <VL53L1_WrByte>
 80072da:	0003      	movs	r3, r0
 80072dc:	7023      	strb	r3, [r4, #0]
	return status;
 80072de:	197b      	adds	r3, r7, r5
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	b25b      	sxtb	r3, r3
}
 80072e4:	0018      	movs	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b004      	add	sp, #16
 80072ea:	bdb0      	pop	{r4, r5, r7, pc}

080072ec <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80072ec:	b5b0      	push	{r4, r5, r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	0002      	movs	r2, r0
 80072f4:	1dbb      	adds	r3, r7, #6
 80072f6:	801a      	strh	r2, [r3, #0]

	VL53L1X_ERROR status = 0;
 80072f8:	230e      	movs	r3, #14
 80072fa:	18fb      	adds	r3, r7, r3
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 8007300:	210f      	movs	r1, #15
 8007302:	187b      	adds	r3, r7, r1
 8007304:	2200      	movs	r2, #0
 8007306:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 8007308:	187b      	adds	r3, r7, r1
 800730a:	222d      	movs	r2, #45	; 0x2d
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	e016      	b.n	800733e <VL53L1X_SensorInit+0x52>
	{
		status = VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8007310:	250f      	movs	r5, #15
 8007312:	197b      	adds	r3, r7, r5
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b299      	uxth	r1, r3
 8007318:	197b      	adds	r3, r7, r5
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	3b2d      	subs	r3, #45	; 0x2d
 800731e:	4a30      	ldr	r2, [pc, #192]	; (80073e0 <VL53L1X_SensorInit+0xf4>)
 8007320:	5cd2      	ldrb	r2, [r2, r3]
 8007322:	230e      	movs	r3, #14
 8007324:	18fc      	adds	r4, r7, r3
 8007326:	1dbb      	adds	r3, r7, #6
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	0018      	movs	r0, r3
 800732c:	f000 fe3c 	bl	8007fa8 <VL53L1_WrByte>
 8007330:	0003      	movs	r3, r0
 8007332:	7023      	strb	r3, [r4, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 8007334:	197b      	adds	r3, r7, r5
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	197b      	adds	r3, r7, r5
 800733a:	3201      	adds	r2, #1
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	230f      	movs	r3, #15
 8007340:	18fb      	adds	r3, r7, r3
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b87      	cmp	r3, #135	; 0x87
 8007346:	d9e3      	bls.n	8007310 <VL53L1X_SensorInit+0x24>
	}
	status = VL53L1X_StartRanging(dev);
 8007348:	230e      	movs	r3, #14
 800734a:	18fc      	adds	r4, r7, r3
 800734c:	1dbb      	adds	r3, r7, #6
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	0018      	movs	r0, r3
 8007352:	f000 f890 	bl	8007476 <VL53L1X_StartRanging>
 8007356:	0003      	movs	r3, r0
 8007358:	7023      	strb	r3, [r4, #0]
	tmp  = 0;
 800735a:	230d      	movs	r3, #13
 800735c:	18fb      	adds	r3, r7, r3
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
	while(tmp==0)
 8007362:	e00b      	b.n	800737c <VL53L1X_SensorInit+0x90>
	{
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 8007364:	230e      	movs	r3, #14
 8007366:	18fc      	adds	r4, r7, r3
 8007368:	230d      	movs	r3, #13
 800736a:	18fa      	adds	r2, r7, r3
 800736c:	1dbb      	adds	r3, r7, #6
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	0011      	movs	r1, r2
 8007372:	0018      	movs	r0, r3
 8007374:	f000 f8b5 	bl	80074e2 <VL53L1X_CheckForDataReady>
 8007378:	0003      	movs	r3, r0
 800737a:	7023      	strb	r3, [r4, #0]
	while(tmp==0)
 800737c:	230d      	movs	r3, #13
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0ee      	beq.n	8007364 <VL53L1X_SensorInit+0x78>
	}
	status = VL53L1X_ClearInterrupt(dev);
 8007386:	250e      	movs	r5, #14
 8007388:	197c      	adds	r4, r7, r5
 800738a:	1dbb      	adds	r3, r7, #6
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	0018      	movs	r0, r3
 8007390:	f000 f828 	bl	80073e4 <VL53L1X_ClearInterrupt>
 8007394:	0003      	movs	r3, r0
 8007396:	7023      	strb	r3, [r4, #0]
	status = VL53L1X_StopRanging(dev);
 8007398:	197c      	adds	r4, r7, r5
 800739a:	1dbb      	adds	r3, r7, #6
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	0018      	movs	r0, r3
 80073a0:	f000 f884 	bl	80074ac <VL53L1X_StopRanging>
 80073a4:	0003      	movs	r3, r0
 80073a6:	7023      	strb	r3, [r4, #0]
	status = VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); // two bounds VHV
 80073a8:	197c      	adds	r4, r7, r5
 80073aa:	1dbb      	adds	r3, r7, #6
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	2209      	movs	r2, #9
 80073b0:	2108      	movs	r1, #8
 80073b2:	0018      	movs	r0, r3
 80073b4:	f000 fdf8 	bl	8007fa8 <VL53L1_WrByte>
 80073b8:	0003      	movs	r3, r0
 80073ba:	7023      	strb	r3, [r4, #0]
	status = VL53L1_WrByte(dev, 0x0B, 0); // start VHV from the previous temperature
 80073bc:	197c      	adds	r4, r7, r5
 80073be:	1dbb      	adds	r3, r7, #6
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	2200      	movs	r2, #0
 80073c4:	210b      	movs	r1, #11
 80073c6:	0018      	movs	r0, r3
 80073c8:	f000 fdee 	bl	8007fa8 <VL53L1_WrByte>
 80073cc:	0003      	movs	r3, r0
 80073ce:	7023      	strb	r3, [r4, #0]
	return status;
 80073d0:	197b      	adds	r3, r7, r5
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	b25b      	sxtb	r3, r3
	}
 80073d6:	0018      	movs	r0, r3
 80073d8:	46bd      	mov	sp, r7
 80073da:	b004      	add	sp, #16
 80073dc:	bdb0      	pop	{r4, r5, r7, pc}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	0800cd14 	.word	0x0800cd14

080073e4 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80073e4:	b5b0      	push	{r4, r5, r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	0002      	movs	r2, r0
 80073ec:	1dbb      	adds	r3, r7, #6
 80073ee:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80073f0:	250f      	movs	r5, #15
 80073f2:	197b      	adds	r3, r7, r5
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]

	status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80073f8:	197c      	adds	r4, r7, r5
 80073fa:	1dbb      	adds	r3, r7, #6
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	2201      	movs	r2, #1
 8007400:	2186      	movs	r1, #134	; 0x86
 8007402:	0018      	movs	r0, r3
 8007404:	f000 fdd0 	bl	8007fa8 <VL53L1_WrByte>
 8007408:	0003      	movs	r3, r0
 800740a:	7023      	strb	r3, [r4, #0]
	return status;
 800740c:	197b      	adds	r3, r7, r5
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	b25b      	sxtb	r3, r3
}
 8007412:	0018      	movs	r0, r3
 8007414:	46bd      	mov	sp, r7
 8007416:	b004      	add	sp, #16
 8007418:	bdb0      	pop	{r4, r5, r7, pc}

0800741a <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800741a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	0002      	movs	r2, r0
 8007422:	6039      	str	r1, [r7, #0]
 8007424:	1dbb      	adds	r3, r7, #6
 8007426:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8007428:	260f      	movs	r6, #15
 800742a:	19bb      	adds	r3, r7, r6
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8007430:	19bc      	adds	r4, r7, r6
 8007432:	250e      	movs	r5, #14
 8007434:	197a      	adds	r2, r7, r5
 8007436:	1dbb      	adds	r3, r7, #6
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	2130      	movs	r1, #48	; 0x30
 800743c:	0018      	movs	r0, r3
 800743e:	f000 fe7f 	bl	8008140 <VL53L1_RdByte>
 8007442:	0003      	movs	r3, r0
 8007444:	7023      	strb	r3, [r4, #0]
	Temp = Temp & 0x10;
 8007446:	197b      	adds	r3, r7, r5
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2210      	movs	r2, #16
 800744c:	4013      	ands	r3, r2
 800744e:	b2da      	uxtb	r2, r3
 8007450:	197b      	adds	r3, r7, r5
 8007452:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8007454:	197b      	adds	r3, r7, r5
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	091b      	lsrs	r3, r3, #4
 800745a:	b2db      	uxtb	r3, r3
 800745c:	425a      	negs	r2, r3
 800745e:	4153      	adcs	r3, r2
 8007460:	b2db      	uxtb	r3, r3
 8007462:	001a      	movs	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	701a      	strb	r2, [r3, #0]
	return status;
 8007468:	19bb      	adds	r3, r7, r6
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b25b      	sxtb	r3, r3
}
 800746e:	0018      	movs	r0, r3
 8007470:	46bd      	mov	sp, r7
 8007472:	b005      	add	sp, #20
 8007474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007476 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8007476:	b5b0      	push	{r4, r5, r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	0002      	movs	r2, r0
 800747e:	1dbb      	adds	r3, r7, #6
 8007480:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007482:	250f      	movs	r5, #15
 8007484:	197b      	adds	r3, r7, r5
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800748a:	197c      	adds	r4, r7, r5
 800748c:	1dbb      	adds	r3, r7, #6
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	2240      	movs	r2, #64	; 0x40
 8007492:	2187      	movs	r1, #135	; 0x87
 8007494:	0018      	movs	r0, r3
 8007496:	f000 fd87 	bl	8007fa8 <VL53L1_WrByte>
 800749a:	0003      	movs	r3, r0
 800749c:	7023      	strb	r3, [r4, #0]
	return status;
 800749e:	197b      	adds	r3, r7, r5
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b25b      	sxtb	r3, r3
}
 80074a4:	0018      	movs	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b004      	add	sp, #16
 80074aa:	bdb0      	pop	{r4, r5, r7, pc}

080074ac <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80074ac:	b5b0      	push	{r4, r5, r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	0002      	movs	r2, r0
 80074b4:	1dbb      	adds	r3, r7, #6
 80074b6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80074b8:	250f      	movs	r5, #15
 80074ba:	197b      	adds	r3, r7, r5
 80074bc:	2200      	movs	r2, #0
 80074be:	701a      	strb	r2, [r3, #0]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80074c0:	197c      	adds	r4, r7, r5
 80074c2:	1dbb      	adds	r3, r7, #6
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	2187      	movs	r1, #135	; 0x87
 80074ca:	0018      	movs	r0, r3
 80074cc:	f000 fd6c 	bl	8007fa8 <VL53L1_WrByte>
 80074d0:	0003      	movs	r3, r0
 80074d2:	7023      	strb	r3, [r4, #0]
	return status;
 80074d4:	197b      	adds	r3, r7, r5
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	b25b      	sxtb	r3, r3
}
 80074da:	0018      	movs	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	b004      	add	sp, #16
 80074e0:	bdb0      	pop	{r4, r5, r7, pc}

080074e2 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80074e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	0002      	movs	r2, r0
 80074ea:	6039      	str	r1, [r7, #0]
 80074ec:	1dbb      	adds	r3, r7, #6
 80074ee:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80074f0:	250f      	movs	r5, #15
 80074f2:	197b      	adds	r3, r7, r5
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80074f8:	197c      	adds	r4, r7, r5
 80074fa:	260d      	movs	r6, #13
 80074fc:	19ba      	adds	r2, r7, r6
 80074fe:	1dbb      	adds	r3, r7, #6
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	0011      	movs	r1, r2
 8007504:	0018      	movs	r0, r3
 8007506:	f7ff ff88 	bl	800741a <VL53L1X_GetInterruptPolarity>
 800750a:	0003      	movs	r3, r0
 800750c:	7023      	strb	r3, [r4, #0]
	status = VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 800750e:	197c      	adds	r4, r7, r5
 8007510:	230e      	movs	r3, #14
 8007512:	18fa      	adds	r2, r7, r3
 8007514:	1dbb      	adds	r3, r7, #6
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	2131      	movs	r1, #49	; 0x31
 800751a:	0018      	movs	r0, r3
 800751c:	f000 fe10 	bl	8008140 <VL53L1_RdByte>
 8007520:	0003      	movs	r3, r0
 8007522:	7023      	strb	r3, [r4, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0)
 8007524:	197b      	adds	r3, r7, r5
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b25b      	sxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d110      	bne.n	8007550 <VL53L1X_CheckForDataReady+0x6e>
	{
		if ((Temp & 1) == IntPol)
 800752e:	230e      	movs	r3, #14
 8007530:	18fb      	adds	r3, r7, r3
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	001a      	movs	r2, r3
 8007536:	2301      	movs	r3, #1
 8007538:	4013      	ands	r3, r2
 800753a:	19ba      	adds	r2, r7, r6
 800753c:	7812      	ldrb	r2, [r2, #0]
 800753e:	4293      	cmp	r3, r2
 8007540:	d103      	bne.n	800754a <VL53L1X_CheckForDataReady+0x68>
		{
			*isDataReady = 1;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2201      	movs	r2, #1
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	e002      	b.n	8007550 <VL53L1X_CheckForDataReady+0x6e>
		}
		else
		{
			*isDataReady = 0;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
 8007550:	230f      	movs	r3, #15
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	b25b      	sxtb	r3, r3
}
 8007558:	0018      	movs	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	b005      	add	sp, #20
 800755e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007560 <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 8007560:	b5b0      	push	{r4, r5, r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	0002      	movs	r2, r0
 8007568:	1dbb      	adds	r3, r7, #6
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	1d3b      	adds	r3, r7, #4
 800756e:	1c0a      	adds	r2, r1, #0
 8007570:	801a      	strh	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 8007572:	210f      	movs	r1, #15
 8007574:	187b      	adds	r3, r7, r1
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]

	status = VL53L1X_GetDistanceMode(dev, &DM);
 800757a:	187c      	adds	r4, r7, r1
 800757c:	250c      	movs	r5, #12
 800757e:	197a      	adds	r2, r7, r5
 8007580:	1dbb      	adds	r3, r7, #6
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	0011      	movs	r1, r2
 8007586:	0018      	movs	r0, r3
 8007588:	f000 fa94 	bl	8007ab4 <VL53L1X_GetDistanceMode>
 800758c:	0003      	movs	r3, r0
 800758e:	7023      	strb	r3, [r4, #0]
	if (DM == 0)
 8007590:	197b      	adds	r3, r7, r5
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <VL53L1X_SetTimingBudgetInMs+0x3c>
		return 1;
 8007598:	2301      	movs	r3, #1
 800759a:	e11a      	b.n	80077d2 <VL53L1X_SetTimingBudgetInMs+0x272>
	else if (DM == 1) {	/* Short DistanceMode */
 800759c:	230c      	movs	r3, #12
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d000      	beq.n	80075a8 <VL53L1X_SetTimingBudgetInMs+0x48>
 80075a6:	e092      	b.n	80076ce <VL53L1X_SetTimingBudgetInMs+0x16e>
		switch (TimingBudgetInMs) {
 80075a8:	1d3b      	adds	r3, r7, #4
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	22fa      	movs	r2, #250	; 0xfa
 80075ae:	0052      	lsls	r2, r2, #1
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d100      	bne.n	80075b6 <VL53L1X_SetTimingBudgetInMs+0x56>
 80075b4:	e077      	b.n	80076a6 <VL53L1X_SetTimingBudgetInMs+0x146>
 80075b6:	22fa      	movs	r2, #250	; 0xfa
 80075b8:	0052      	lsls	r2, r2, #1
 80075ba:	4293      	cmp	r3, r2
 80075bc:	dd00      	ble.n	80075c0 <VL53L1X_SetTimingBudgetInMs+0x60>
 80075be:	e081      	b.n	80076c4 <VL53L1X_SetTimingBudgetInMs+0x164>
 80075c0:	2bc8      	cmp	r3, #200	; 0xc8
 80075c2:	d100      	bne.n	80075c6 <VL53L1X_SetTimingBudgetInMs+0x66>
 80075c4:	e060      	b.n	8007688 <VL53L1X_SetTimingBudgetInMs+0x128>
 80075c6:	dd00      	ble.n	80075ca <VL53L1X_SetTimingBudgetInMs+0x6a>
 80075c8:	e07c      	b.n	80076c4 <VL53L1X_SetTimingBudgetInMs+0x164>
 80075ca:	2b64      	cmp	r3, #100	; 0x64
 80075cc:	d04c      	beq.n	8007668 <VL53L1X_SetTimingBudgetInMs+0x108>
 80075ce:	dd00      	ble.n	80075d2 <VL53L1X_SetTimingBudgetInMs+0x72>
 80075d0:	e078      	b.n	80076c4 <VL53L1X_SetTimingBudgetInMs+0x164>
 80075d2:	2b32      	cmp	r3, #50	; 0x32
 80075d4:	d037      	beq.n	8007646 <VL53L1X_SetTimingBudgetInMs+0xe6>
 80075d6:	dd00      	ble.n	80075da <VL53L1X_SetTimingBudgetInMs+0x7a>
 80075d8:	e074      	b.n	80076c4 <VL53L1X_SetTimingBudgetInMs+0x164>
 80075da:	2b21      	cmp	r3, #33	; 0x21
 80075dc:	d024      	beq.n	8007628 <VL53L1X_SetTimingBudgetInMs+0xc8>
 80075de:	dd00      	ble.n	80075e2 <VL53L1X_SetTimingBudgetInMs+0x82>
 80075e0:	e070      	b.n	80076c4 <VL53L1X_SetTimingBudgetInMs+0x164>
 80075e2:	2b0f      	cmp	r3, #15
 80075e4:	d002      	beq.n	80075ec <VL53L1X_SetTimingBudgetInMs+0x8c>
 80075e6:	2b14      	cmp	r3, #20
 80075e8:	d00f      	beq.n	800760a <VL53L1X_SetTimingBudgetInMs+0xaa>
 80075ea:	e06b      	b.n	80076c4 <VL53L1X_SetTimingBudgetInMs+0x164>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80075ec:	1dbb      	adds	r3, r7, #6
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	221d      	movs	r2, #29
 80075f2:	215e      	movs	r1, #94	; 0x5e
 80075f4:	0018      	movs	r0, r3
 80075f6:	f000 fd15 	bl	8008024 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80075fa:	1dbb      	adds	r3, r7, #6
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	2227      	movs	r2, #39	; 0x27
 8007600:	2161      	movs	r1, #97	; 0x61
 8007602:	0018      	movs	r0, r3
 8007604:	f000 fd0e 	bl	8008024 <VL53L1_WrWord>
					0x0027);
			break;
 8007608:	e0df      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800760a:	1dbb      	adds	r3, r7, #6
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	2251      	movs	r2, #81	; 0x51
 8007610:	215e      	movs	r1, #94	; 0x5e
 8007612:	0018      	movs	r0, r3
 8007614:	f000 fd06 	bl	8008024 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007618:	1dbb      	adds	r3, r7, #6
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	226e      	movs	r2, #110	; 0x6e
 800761e:	2161      	movs	r1, #97	; 0x61
 8007620:	0018      	movs	r0, r3
 8007622:	f000 fcff 	bl	8008024 <VL53L1_WrWord>
					0x006E);
			break;
 8007626:	e0d0      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007628:	1dbb      	adds	r3, r7, #6
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	22d6      	movs	r2, #214	; 0xd6
 800762e:	215e      	movs	r1, #94	; 0x5e
 8007630:	0018      	movs	r0, r3
 8007632:	f000 fcf7 	bl	8008024 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007636:	1dbb      	adds	r3, r7, #6
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	226e      	movs	r2, #110	; 0x6e
 800763c:	2161      	movs	r1, #97	; 0x61
 800763e:	0018      	movs	r0, r3
 8007640:	f000 fcf0 	bl	8008024 <VL53L1_WrWord>
					0x006E);
			break;
 8007644:	e0c1      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007646:	23d7      	movs	r3, #215	; 0xd7
 8007648:	005a      	lsls	r2, r3, #1
 800764a:	1dbb      	adds	r3, r7, #6
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	215e      	movs	r1, #94	; 0x5e
 8007650:	0018      	movs	r0, r3
 8007652:	f000 fce7 	bl	8008024 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007656:	23f4      	movs	r3, #244	; 0xf4
 8007658:	005a      	lsls	r2, r3, #1
 800765a:	1dbb      	adds	r3, r7, #6
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	2161      	movs	r1, #97	; 0x61
 8007660:	0018      	movs	r0, r3
 8007662:	f000 fcdf 	bl	8008024 <VL53L1_WrWord>
					0x01E8);
			break;
 8007666:	e0b0      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007668:	4a5c      	ldr	r2, [pc, #368]	; (80077dc <VL53L1X_SetTimingBudgetInMs+0x27c>)
 800766a:	1dbb      	adds	r3, r7, #6
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	215e      	movs	r1, #94	; 0x5e
 8007670:	0018      	movs	r0, r3
 8007672:	f000 fcd7 	bl	8008024 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007676:	23e2      	movs	r3, #226	; 0xe2
 8007678:	009a      	lsls	r2, r3, #2
 800767a:	1dbb      	adds	r3, r7, #6
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	2161      	movs	r1, #97	; 0x61
 8007680:	0018      	movs	r0, r3
 8007682:	f000 fccf 	bl	8008024 <VL53L1_WrWord>
					0x0388);
			break;
 8007686:	e0a0      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007688:	4a55      	ldr	r2, [pc, #340]	; (80077e0 <VL53L1X_SetTimingBudgetInMs+0x280>)
 800768a:	1dbb      	adds	r3, r7, #6
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	215e      	movs	r1, #94	; 0x5e
 8007690:	0018      	movs	r0, r3
 8007692:	f000 fcc7 	bl	8008024 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007696:	4a53      	ldr	r2, [pc, #332]	; (80077e4 <VL53L1X_SetTimingBudgetInMs+0x284>)
 8007698:	1dbb      	adds	r3, r7, #6
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	2161      	movs	r1, #97	; 0x61
 800769e:	0018      	movs	r0, r3
 80076a0:	f000 fcc0 	bl	8008024 <VL53L1_WrWord>
					0x0496);
			break;
 80076a4:	e091      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80076a6:	4a50      	ldr	r2, [pc, #320]	; (80077e8 <VL53L1X_SetTimingBudgetInMs+0x288>)
 80076a8:	1dbb      	adds	r3, r7, #6
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	215e      	movs	r1, #94	; 0x5e
 80076ae:	0018      	movs	r0, r3
 80076b0:	f000 fcb8 	bl	8008024 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80076b4:	4a4d      	ldr	r2, [pc, #308]	; (80077ec <VL53L1X_SetTimingBudgetInMs+0x28c>)
 80076b6:	1dbb      	adds	r3, r7, #6
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	2161      	movs	r1, #97	; 0x61
 80076bc:	0018      	movs	r0, r3
 80076be:	f000 fcb1 	bl	8008024 <VL53L1_WrWord>
					0x05C1);
			break;
 80076c2:	e082      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		default:
			status = 1;
 80076c4:	230f      	movs	r3, #15
 80076c6:	18fb      	adds	r3, r7, r3
 80076c8:	2201      	movs	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]
			break;
 80076cc:	e07d      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		}
	} else {
		switch (TimingBudgetInMs) {
 80076ce:	1d3b      	adds	r3, r7, #4
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	22fa      	movs	r2, #250	; 0xfa
 80076d4:	0052      	lsls	r2, r2, #1
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d100      	bne.n	80076dc <VL53L1X_SetTimingBudgetInMs+0x17c>
 80076da:	e062      	b.n	80077a2 <VL53L1X_SetTimingBudgetInMs+0x242>
 80076dc:	22fa      	movs	r2, #250	; 0xfa
 80076de:	0052      	lsls	r2, r2, #1
 80076e0:	4293      	cmp	r3, r2
 80076e2:	dd00      	ble.n	80076e6 <VL53L1X_SetTimingBudgetInMs+0x186>
 80076e4:	e06c      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x260>
 80076e6:	2bc8      	cmp	r3, #200	; 0xc8
 80076e8:	d04b      	beq.n	8007782 <VL53L1X_SetTimingBudgetInMs+0x222>
 80076ea:	dd00      	ble.n	80076ee <VL53L1X_SetTimingBudgetInMs+0x18e>
 80076ec:	e068      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x260>
 80076ee:	2b64      	cmp	r3, #100	; 0x64
 80076f0:	d036      	beq.n	8007760 <VL53L1X_SetTimingBudgetInMs+0x200>
 80076f2:	dd00      	ble.n	80076f6 <VL53L1X_SetTimingBudgetInMs+0x196>
 80076f4:	e064      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x260>
 80076f6:	2b32      	cmp	r3, #50	; 0x32
 80076f8:	d023      	beq.n	8007742 <VL53L1X_SetTimingBudgetInMs+0x1e2>
 80076fa:	dc61      	bgt.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x260>
 80076fc:	2b14      	cmp	r3, #20
 80076fe:	d002      	beq.n	8007706 <VL53L1X_SetTimingBudgetInMs+0x1a6>
 8007700:	2b21      	cmp	r3, #33	; 0x21
 8007702:	d00f      	beq.n	8007724 <VL53L1X_SetTimingBudgetInMs+0x1c4>
 8007704:	e05c      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x260>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007706:	1dbb      	adds	r3, r7, #6
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	221e      	movs	r2, #30
 800770c:	215e      	movs	r1, #94	; 0x5e
 800770e:	0018      	movs	r0, r3
 8007710:	f000 fc88 	bl	8008024 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007714:	1dbb      	adds	r3, r7, #6
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	2222      	movs	r2, #34	; 0x22
 800771a:	2161      	movs	r1, #97	; 0x61
 800771c:	0018      	movs	r0, r3
 800771e:	f000 fc81 	bl	8008024 <VL53L1_WrWord>
					0x0022);
			break;
 8007722:	e052      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007724:	1dbb      	adds	r3, r7, #6
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	2260      	movs	r2, #96	; 0x60
 800772a:	215e      	movs	r1, #94	; 0x5e
 800772c:	0018      	movs	r0, r3
 800772e:	f000 fc79 	bl	8008024 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007732:	1dbb      	adds	r3, r7, #6
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	226e      	movs	r2, #110	; 0x6e
 8007738:	2161      	movs	r1, #97	; 0x61
 800773a:	0018      	movs	r0, r3
 800773c:	f000 fc72 	bl	8008024 <VL53L1_WrWord>
					0x006E);
			break;
 8007740:	e043      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007742:	1dbb      	adds	r3, r7, #6
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	22ad      	movs	r2, #173	; 0xad
 8007748:	215e      	movs	r1, #94	; 0x5e
 800774a:	0018      	movs	r0, r3
 800774c:	f000 fc6a 	bl	8008024 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007750:	1dbb      	adds	r3, r7, #6
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	22c6      	movs	r2, #198	; 0xc6
 8007756:	2161      	movs	r1, #97	; 0x61
 8007758:	0018      	movs	r0, r3
 800775a:	f000 fc63 	bl	8008024 <VL53L1_WrWord>
					0x00C6);
			break;
 800775e:	e034      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007760:	23e6      	movs	r3, #230	; 0xe6
 8007762:	005a      	lsls	r2, r3, #1
 8007764:	1dbb      	adds	r3, r7, #6
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	215e      	movs	r1, #94	; 0x5e
 800776a:	0018      	movs	r0, r3
 800776c:	f000 fc5a 	bl	8008024 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007770:	23f5      	movs	r3, #245	; 0xf5
 8007772:	005a      	lsls	r2, r3, #1
 8007774:	1dbb      	adds	r3, r7, #6
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	2161      	movs	r1, #97	; 0x61
 800777a:	0018      	movs	r0, r3
 800777c:	f000 fc52 	bl	8008024 <VL53L1_WrWord>
					0x01EA);
			break;
 8007780:	e023      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007782:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <VL53L1X_SetTimingBudgetInMs+0x290>)
 8007784:	1dbb      	adds	r3, r7, #6
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	215e      	movs	r1, #94	; 0x5e
 800778a:	0018      	movs	r0, r3
 800778c:	f000 fc4a 	bl	8008024 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007790:	23be      	movs	r3, #190	; 0xbe
 8007792:	009a      	lsls	r2, r3, #2
 8007794:	1dbb      	adds	r3, r7, #6
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	2161      	movs	r1, #97	; 0x61
 800779a:	0018      	movs	r0, r3
 800779c:	f000 fc42 	bl	8008024 <VL53L1_WrWord>
					0x02F8);
			break;
 80077a0:	e013      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80077a2:	4a14      	ldr	r2, [pc, #80]	; (80077f4 <VL53L1X_SetTimingBudgetInMs+0x294>)
 80077a4:	1dbb      	adds	r3, r7, #6
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	215e      	movs	r1, #94	; 0x5e
 80077aa:	0018      	movs	r0, r3
 80077ac:	f000 fc3a 	bl	8008024 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80077b0:	4a11      	ldr	r2, [pc, #68]	; (80077f8 <VL53L1X_SetTimingBudgetInMs+0x298>)
 80077b2:	1dbb      	adds	r3, r7, #6
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	2161      	movs	r1, #97	; 0x61
 80077b8:	0018      	movs	r0, r3
 80077ba:	f000 fc33 	bl	8008024 <VL53L1_WrWord>
					0x04A4);
			break;
 80077be:	e004      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x26a>
		default:
			status = 1;
 80077c0:	230f      	movs	r3, #15
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	2201      	movs	r2, #1
 80077c6:	701a      	strb	r2, [r3, #0]
			break;
 80077c8:	46c0      	nop			; (mov r8, r8)
		}
	}
	return status;
 80077ca:	230f      	movs	r3, #15
 80077cc:	18fb      	adds	r3, r7, r3
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b25b      	sxtb	r3, r3
}
 80077d2:	0018      	movs	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b004      	add	sp, #16
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	000002e1 	.word	0x000002e1
 80077e0:	000003e1 	.word	0x000003e1
 80077e4:	00000496 	.word	0x00000496
 80077e8:	00000591 	.word	0x00000591
 80077ec:	000005c1 	.word	0x000005c1
 80077f0:	000002d9 	.word	0x000002d9
 80077f4:	0000048f 	.word	0x0000048f
 80077f8:	000004a4 	.word	0x000004a4

080077fc <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80077fc:	b5b0      	push	{r4, r5, r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	0002      	movs	r2, r0
 8007804:	6039      	str	r1, [r7, #0]
 8007806:	1dbb      	adds	r3, r7, #6
 8007808:	801a      	strh	r2, [r3, #0]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 800780a:	210f      	movs	r1, #15
 800780c:	187b      	adds	r3, r7, r1
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8007812:	187c      	adds	r4, r7, r1
 8007814:	250c      	movs	r5, #12
 8007816:	197a      	adds	r2, r7, r5
 8007818:	1dbb      	adds	r3, r7, #6
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	215e      	movs	r1, #94	; 0x5e
 800781e:	0018      	movs	r0, r3
 8007820:	f000 fca9 	bl	8008176 <VL53L1_RdWord>
 8007824:	0003      	movs	r3, r0
 8007826:	7023      	strb	r3, [r4, #0]
	switch (Temp) {
 8007828:	197b      	adds	r3, r7, r5
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	4a37      	ldr	r2, [pc, #220]	; (800790c <VL53L1X_GetTimingBudgetInMs+0x110>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d100      	bne.n	8007834 <VL53L1X_GetTimingBudgetInMs+0x38>
 8007832:	e057      	b.n	80078e4 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8007834:	4a35      	ldr	r2, [pc, #212]	; (800790c <VL53L1X_GetTimingBudgetInMs+0x110>)
 8007836:	4293      	cmp	r3, r2
 8007838:	dd00      	ble.n	800783c <VL53L1X_GetTimingBudgetInMs+0x40>
 800783a:	e058      	b.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 800783c:	4a34      	ldr	r2, [pc, #208]	; (8007910 <VL53L1X_GetTimingBudgetInMs+0x114>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d100      	bne.n	8007844 <VL53L1X_GetTimingBudgetInMs+0x48>
 8007842:	e04f      	b.n	80078e4 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8007844:	2292      	movs	r2, #146	; 0x92
 8007846:	00d2      	lsls	r2, r2, #3
 8007848:	4293      	cmp	r3, r2
 800784a:	db00      	blt.n	800784e <VL53L1X_GetTimingBudgetInMs+0x52>
 800784c:	e04f      	b.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 800784e:	4a31      	ldr	r2, [pc, #196]	; (8007914 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d043      	beq.n	80078dc <VL53L1X_GetTimingBudgetInMs+0xe0>
 8007854:	4a2f      	ldr	r2, [pc, #188]	; (8007914 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8007856:	4293      	cmp	r3, r2
 8007858:	dc49      	bgt.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 800785a:	4a2f      	ldr	r2, [pc, #188]	; (8007918 <VL53L1X_GetTimingBudgetInMs+0x11c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d039      	beq.n	80078d4 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8007860:	4a2d      	ldr	r2, [pc, #180]	; (8007918 <VL53L1X_GetTimingBudgetInMs+0x11c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	dc43      	bgt.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 8007866:	4a2d      	ldr	r2, [pc, #180]	; (800791c <VL53L1X_GetTimingBudgetInMs+0x120>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d037      	beq.n	80078dc <VL53L1X_GetTimingBudgetInMs+0xe0>
 800786c:	4a2b      	ldr	r2, [pc, #172]	; (800791c <VL53L1X_GetTimingBudgetInMs+0x120>)
 800786e:	4293      	cmp	r3, r2
 8007870:	dc3d      	bgt.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 8007872:	22e6      	movs	r2, #230	; 0xe6
 8007874:	0052      	lsls	r2, r2, #1
 8007876:	4293      	cmp	r3, r2
 8007878:	d02c      	beq.n	80078d4 <VL53L1X_GetTimingBudgetInMs+0xd8>
 800787a:	22e6      	movs	r2, #230	; 0xe6
 800787c:	0052      	lsls	r2, r2, #1
 800787e:	4293      	cmp	r3, r2
 8007880:	dc35      	bgt.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 8007882:	22d7      	movs	r2, #215	; 0xd7
 8007884:	0052      	lsls	r2, r2, #1
 8007886:	4293      	cmp	r3, r2
 8007888:	d020      	beq.n	80078cc <VL53L1X_GetTimingBudgetInMs+0xd0>
 800788a:	22d7      	movs	r2, #215	; 0xd7
 800788c:	0052      	lsls	r2, r2, #1
 800788e:	4293      	cmp	r3, r2
 8007890:	dc2d      	bgt.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 8007892:	2bd6      	cmp	r3, #214	; 0xd6
 8007894:	d016      	beq.n	80078c4 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8007896:	dc2a      	bgt.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 8007898:	2bad      	cmp	r3, #173	; 0xad
 800789a:	d017      	beq.n	80078cc <VL53L1X_GetTimingBudgetInMs+0xd0>
 800789c:	dc27      	bgt.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 800789e:	2b60      	cmp	r3, #96	; 0x60
 80078a0:	d010      	beq.n	80078c4 <VL53L1X_GetTimingBudgetInMs+0xc8>
 80078a2:	dc24      	bgt.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 80078a4:	2b51      	cmp	r3, #81	; 0x51
 80078a6:	d009      	beq.n	80078bc <VL53L1X_GetTimingBudgetInMs+0xc0>
 80078a8:	dc21      	bgt.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
 80078aa:	2b1d      	cmp	r3, #29
 80078ac:	d002      	beq.n	80078b4 <VL53L1X_GetTimingBudgetInMs+0xb8>
 80078ae:	2b1e      	cmp	r3, #30
 80078b0:	d004      	beq.n	80078bc <VL53L1X_GetTimingBudgetInMs+0xc0>
 80078b2:	e01c      	b.n	80078ee <VL53L1X_GetTimingBudgetInMs+0xf2>
		case 0x001D :
			*pTimingBudget = 15;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	220f      	movs	r2, #15
 80078b8:	801a      	strh	r2, [r3, #0]
			break;
 80078ba:	e01f      	b.n	80078fc <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2214      	movs	r2, #20
 80078c0:	801a      	strh	r2, [r3, #0]
			break;
 80078c2:	e01b      	b.n	80078fc <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2221      	movs	r2, #33	; 0x21
 80078c8:	801a      	strh	r2, [r3, #0]
			break;
 80078ca:	e017      	b.n	80078fc <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2232      	movs	r2, #50	; 0x32
 80078d0:	801a      	strh	r2, [r3, #0]
			break;
 80078d2:	e013      	b.n	80078fc <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2264      	movs	r2, #100	; 0x64
 80078d8:	801a      	strh	r2, [r3, #0]
			break;
 80078da:	e00f      	b.n	80078fc <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	22c8      	movs	r2, #200	; 0xc8
 80078e0:	801a      	strh	r2, [r3, #0]
			break;
 80078e2:	e00b      	b.n	80078fc <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	22fa      	movs	r2, #250	; 0xfa
 80078e8:	0052      	lsls	r2, r2, #1
 80078ea:	801a      	strh	r2, [r3, #0]
			break;
 80078ec:	e006      	b.n	80078fc <VL53L1X_GetTimingBudgetInMs+0x100>
		default:
			status = 1;
 80078ee:	230f      	movs	r3, #15
 80078f0:	18fb      	adds	r3, r7, r3
 80078f2:	2201      	movs	r2, #1
 80078f4:	701a      	strb	r2, [r3, #0]
			*pTimingBudget = 0;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2200      	movs	r2, #0
 80078fa:	801a      	strh	r2, [r3, #0]
	}
	return status;
 80078fc:	230f      	movs	r3, #15
 80078fe:	18fb      	adds	r3, r7, r3
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	b25b      	sxtb	r3, r3
}
 8007904:	0018      	movs	r0, r3
 8007906:	46bd      	mov	sp, r7
 8007908:	b004      	add	sp, #16
 800790a:	bdb0      	pop	{r4, r5, r7, pc}
 800790c:	00000591 	.word	0x00000591
 8007910:	0000048f 	.word	0x0000048f
 8007914:	000003e1 	.word	0x000003e1
 8007918:	000002e1 	.word	0x000002e1
 800791c:	000002d9 	.word	0x000002d9

08007920 <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8007920:	b5b0      	push	{r4, r5, r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	0002      	movs	r2, r0
 8007928:	1dbb      	adds	r3, r7, #6
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	1d3b      	adds	r3, r7, #4
 800792e:	1c0a      	adds	r2, r1, #0
 8007930:	801a      	strh	r2, [r3, #0]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8007932:	250f      	movs	r5, #15
 8007934:	197b      	adds	r3, r7, r5
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]

	status = VL53L1X_GetTimingBudgetInMs(dev, &TB);
 800793a:	197c      	adds	r4, r7, r5
 800793c:	230c      	movs	r3, #12
 800793e:	18fa      	adds	r2, r7, r3
 8007940:	1dbb      	adds	r3, r7, #6
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	0011      	movs	r1, r2
 8007946:	0018      	movs	r0, r3
 8007948:	f7ff ff58 	bl	80077fc <VL53L1X_GetTimingBudgetInMs>
 800794c:	0003      	movs	r3, r0
 800794e:	7023      	strb	r3, [r4, #0]
	if (status != 0)
 8007950:	197b      	adds	r3, r7, r5
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	b25b      	sxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <VL53L1X_SetDistanceMode+0x3e>
		return 1;
 800795a:	2301      	movs	r3, #1
 800795c:	e09d      	b.n	8007a9a <VL53L1X_SetDistanceMode+0x17a>
	switch (DM) {
 800795e:	1d3b      	adds	r3, r7, #4
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d002      	beq.n	800796c <VL53L1X_SetDistanceMode+0x4c>
 8007966:	2b02      	cmp	r3, #2
 8007968:	d03e      	beq.n	80079e8 <VL53L1X_SetDistanceMode+0xc8>
 800796a:	e07b      	b.n	8007a64 <VL53L1X_SetDistanceMode+0x144>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 800796c:	250f      	movs	r5, #15
 800796e:	197c      	adds	r4, r7, r5
 8007970:	1dbb      	adds	r3, r7, #6
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	2214      	movs	r2, #20
 8007976:	214b      	movs	r1, #75	; 0x4b
 8007978:	0018      	movs	r0, r3
 800797a:	f000 fb15 	bl	8007fa8 <VL53L1_WrByte>
 800797e:	0003      	movs	r3, r0
 8007980:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8007982:	197c      	adds	r4, r7, r5
 8007984:	1dbb      	adds	r3, r7, #6
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	2207      	movs	r2, #7
 800798a:	2160      	movs	r1, #96	; 0x60
 800798c:	0018      	movs	r0, r3
 800798e:	f000 fb0b 	bl	8007fa8 <VL53L1_WrByte>
 8007992:	0003      	movs	r3, r0
 8007994:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8007996:	197c      	adds	r4, r7, r5
 8007998:	1dbb      	adds	r3, r7, #6
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	2205      	movs	r2, #5
 800799e:	2163      	movs	r1, #99	; 0x63
 80079a0:	0018      	movs	r0, r3
 80079a2:	f000 fb01 	bl	8007fa8 <VL53L1_WrByte>
 80079a6:	0003      	movs	r3, r0
 80079a8:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 80079aa:	197c      	adds	r4, r7, r5
 80079ac:	1dbb      	adds	r3, r7, #6
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	2238      	movs	r2, #56	; 0x38
 80079b2:	2169      	movs	r1, #105	; 0x69
 80079b4:	0018      	movs	r0, r3
 80079b6:	f000 faf7 	bl	8007fa8 <VL53L1_WrByte>
 80079ba:	0003      	movs	r3, r0
 80079bc:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 80079be:	197c      	adds	r4, r7, r5
 80079c0:	4a38      	ldr	r2, [pc, #224]	; (8007aa4 <VL53L1X_SetDistanceMode+0x184>)
 80079c2:	1dbb      	adds	r3, r7, #6
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	2178      	movs	r1, #120	; 0x78
 80079c8:	0018      	movs	r0, r3
 80079ca:	f000 fb2b 	bl	8008024 <VL53L1_WrWord>
 80079ce:	0003      	movs	r3, r0
 80079d0:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 80079d2:	197c      	adds	r4, r7, r5
 80079d4:	4a34      	ldr	r2, [pc, #208]	; (8007aa8 <VL53L1X_SetDistanceMode+0x188>)
 80079d6:	1dbb      	adds	r3, r7, #6
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	217a      	movs	r1, #122	; 0x7a
 80079dc:	0018      	movs	r0, r3
 80079de:	f000 fb21 	bl	8008024 <VL53L1_WrWord>
 80079e2:	0003      	movs	r3, r0
 80079e4:	7023      	strb	r3, [r4, #0]
		break;
 80079e6:	e042      	b.n	8007a6e <VL53L1X_SetDistanceMode+0x14e>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 80079e8:	250f      	movs	r5, #15
 80079ea:	197c      	adds	r4, r7, r5
 80079ec:	1dbb      	adds	r3, r7, #6
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	220a      	movs	r2, #10
 80079f2:	214b      	movs	r1, #75	; 0x4b
 80079f4:	0018      	movs	r0, r3
 80079f6:	f000 fad7 	bl	8007fa8 <VL53L1_WrByte>
 80079fa:	0003      	movs	r3, r0
 80079fc:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 80079fe:	197c      	adds	r4, r7, r5
 8007a00:	1dbb      	adds	r3, r7, #6
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	220f      	movs	r2, #15
 8007a06:	2160      	movs	r1, #96	; 0x60
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f000 facd 	bl	8007fa8 <VL53L1_WrByte>
 8007a0e:	0003      	movs	r3, r0
 8007a10:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8007a12:	197c      	adds	r4, r7, r5
 8007a14:	1dbb      	adds	r3, r7, #6
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	220d      	movs	r2, #13
 8007a1a:	2163      	movs	r1, #99	; 0x63
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f000 fac3 	bl	8007fa8 <VL53L1_WrByte>
 8007a22:	0003      	movs	r3, r0
 8007a24:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8007a26:	197c      	adds	r4, r7, r5
 8007a28:	1dbb      	adds	r3, r7, #6
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	22b8      	movs	r2, #184	; 0xb8
 8007a2e:	2169      	movs	r1, #105	; 0x69
 8007a30:	0018      	movs	r0, r3
 8007a32:	f000 fab9 	bl	8007fa8 <VL53L1_WrByte>
 8007a36:	0003      	movs	r3, r0
 8007a38:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8007a3a:	197c      	adds	r4, r7, r5
 8007a3c:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <VL53L1X_SetDistanceMode+0x18c>)
 8007a3e:	1dbb      	adds	r3, r7, #6
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	2178      	movs	r1, #120	; 0x78
 8007a44:	0018      	movs	r0, r3
 8007a46:	f000 faed 	bl	8008024 <VL53L1_WrWord>
 8007a4a:	0003      	movs	r3, r0
 8007a4c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8007a4e:	197c      	adds	r4, r7, r5
 8007a50:	4a17      	ldr	r2, [pc, #92]	; (8007ab0 <VL53L1X_SetDistanceMode+0x190>)
 8007a52:	1dbb      	adds	r3, r7, #6
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	217a      	movs	r1, #122	; 0x7a
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f000 fae3 	bl	8008024 <VL53L1_WrWord>
 8007a5e:	0003      	movs	r3, r0
 8007a60:	7023      	strb	r3, [r4, #0]
		break;
 8007a62:	e004      	b.n	8007a6e <VL53L1X_SetDistanceMode+0x14e>
	default:
		status = 1;
 8007a64:	230f      	movs	r3, #15
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	2201      	movs	r2, #1
 8007a6a:	701a      	strb	r2, [r3, #0]
		break;
 8007a6c:	46c0      	nop			; (mov r8, r8)
	}

	if (status == 0)
 8007a6e:	210f      	movs	r1, #15
 8007a70:	187b      	adds	r3, r7, r1
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	b25b      	sxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10b      	bne.n	8007a92 <VL53L1X_SetDistanceMode+0x172>
		status = VL53L1X_SetTimingBudgetInMs(dev, TB);
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	18fb      	adds	r3, r7, r3
 8007a7e:	881a      	ldrh	r2, [r3, #0]
 8007a80:	187c      	adds	r4, r7, r1
 8007a82:	1dbb      	adds	r3, r7, #6
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	0011      	movs	r1, r2
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7ff fd69 	bl	8007560 <VL53L1X_SetTimingBudgetInMs>
 8007a8e:	0003      	movs	r3, r0
 8007a90:	7023      	strb	r3, [r4, #0]
	return status;
 8007a92:	230f      	movs	r3, #15
 8007a94:	18fb      	adds	r3, r7, r3
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	b25b      	sxtb	r3, r3
}
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b004      	add	sp, #16
 8007aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	00000705 	.word	0x00000705
 8007aa8:	00000606 	.word	0x00000606
 8007aac:	00000f0d 	.word	0x00000f0d
 8007ab0:	00000e0e 	.word	0x00000e0e

08007ab4 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8007ab4:	b5b0      	push	{r4, r5, r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	0002      	movs	r2, r0
 8007abc:	6039      	str	r1, [r7, #0]
 8007abe:	1dbb      	adds	r3, r7, #6
 8007ac0:	801a      	strh	r2, [r3, #0]
	uint8_t TempDM, status=0;
 8007ac2:	240f      	movs	r4, #15
 8007ac4:	193b      	adds	r3, r7, r4
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8007aca:	250e      	movs	r5, #14
 8007acc:	197a      	adds	r2, r7, r5
 8007ace:	1dbb      	adds	r3, r7, #6
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	214b      	movs	r1, #75	; 0x4b
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f000 fb33 	bl	8008140 <VL53L1_RdByte>
 8007ada:	0003      	movs	r3, r0
 8007adc:	001a      	movs	r2, r3
 8007ade:	193b      	adds	r3, r7, r4
 8007ae0:	701a      	strb	r2, [r3, #0]
	if (TempDM == 0x14)
 8007ae2:	197b      	adds	r3, r7, r5
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b14      	cmp	r3, #20
 8007ae8:	d102      	bne.n	8007af0 <VL53L1X_GetDistanceMode+0x3c>
		*DM=1;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2201      	movs	r2, #1
 8007aee:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8007af0:	230e      	movs	r3, #14
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b0a      	cmp	r3, #10
 8007af8:	d102      	bne.n	8007b00 <VL53L1X_GetDistanceMode+0x4c>
		*DM=2;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2202      	movs	r2, #2
 8007afe:	801a      	strh	r2, [r3, #0]
	return status;
 8007b00:	230f      	movs	r3, #15
 8007b02:	18fb      	adds	r3, r7, r3
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b25b      	sxtb	r3, r3
}
 8007b08:	0018      	movs	r0, r3
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b004      	add	sp, #16
 8007b0e:	bdb0      	pop	{r4, r5, r7, pc}

08007b10 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8007b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	0002      	movs	r2, r0
 8007b18:	6039      	str	r1, [r7, #0]
 8007b1a:	1dbb      	adds	r3, r7, #6
 8007b1c:	801a      	strh	r2, [r3, #0]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8007b1e:	260f      	movs	r6, #15
 8007b20:	19bb      	adds	r3, r7, r6
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8007b26:	19bc      	adds	r4, r7, r6
 8007b28:	250c      	movs	r5, #12
 8007b2a:	197a      	adds	r2, r7, r5
 8007b2c:	1dbb      	adds	r3, r7, #6
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	21de      	movs	r1, #222	; 0xde
 8007b32:	0018      	movs	r0, r3
 8007b34:	f000 fb1f 	bl	8008176 <VL53L1_RdWord>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	7023      	strb	r3, [r4, #0]
	ClockPLL = ClockPLL&0x3FF;
 8007b3c:	0029      	movs	r1, r5
 8007b3e:	187b      	adds	r3, r7, r1
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	059b      	lsls	r3, r3, #22
 8007b44:	0d9b      	lsrs	r3, r3, #22
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	187b      	adds	r3, r7, r1
 8007b4a:	801a      	strh	r2, [r3, #0]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8007b4c:	187b      	adds	r3, r7, r1
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	001a      	movs	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	4353      	muls	r3, r2
 8007b56:	0018      	movs	r0, r3
 8007b58:	f7fa fda4 	bl	80026a4 <__aeabi_ui2d>
 8007b5c:	4a0b      	ldr	r2, [pc, #44]	; (8007b8c <VL53L1X_SetInterMeasurementInMs+0x7c>)
 8007b5e:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <VL53L1X_SetInterMeasurementInMs+0x80>)
 8007b60:	f7f9 fed8 	bl	8001914 <__aeabi_dmul>
 8007b64:	0002      	movs	r2, r0
 8007b66:	000b      	movs	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8007b68:	0010      	movs	r0, r2
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	f7f8 fcea 	bl	8000544 <__aeabi_d2uiz>
 8007b70:	0002      	movs	r2, r0
 8007b72:	1dbb      	adds	r3, r7, #6
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	216c      	movs	r1, #108	; 0x6c
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f000 fa99 	bl	80080b0 <VL53L1_WrDWord>
	return status;
 8007b7e:	19bb      	adds	r3, r7, r6
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	b25b      	sxtb	r3, r3

}
 8007b84:	0018      	movs	r0, r3
 8007b86:	46bd      	mov	sp, r7
 8007b88:	b005      	add	sp, #20
 8007b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b8c:	33333333 	.word	0x33333333
 8007b90:	3ff13333 	.word	0x3ff13333

08007b94 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8007b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	0002      	movs	r2, r0
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	1dbb      	adds	r3, r7, #6
 8007ba0:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007ba2:	250f      	movs	r5, #15
 8007ba4:	197b      	adds	r3, r7, r5
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 8007baa:	260e      	movs	r6, #14
 8007bac:	19bb      	adds	r3, r7, r6
 8007bae:	2200      	movs	r2, #0
 8007bb0:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8007bb2:	197c      	adds	r4, r7, r5
 8007bb4:	19ba      	adds	r2, r7, r6
 8007bb6:	1dbb      	adds	r3, r7, #6
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	21e5      	movs	r1, #229	; 0xe5
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f000 fabf 	bl	8008140 <VL53L1_RdByte>
 8007bc2:	0003      	movs	r3, r0
 8007bc4:	7023      	strb	r3, [r4, #0]
	*state = tmp;
 8007bc6:	19bb      	adds	r3, r7, r6
 8007bc8:	781a      	ldrb	r2, [r3, #0]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	701a      	strb	r2, [r3, #0]
	return status;
 8007bce:	197b      	adds	r3, r7, r5
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	b25b      	sxtb	r3, r3
}
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b005      	add	sp, #20
 8007bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bdc <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8007bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	0002      	movs	r2, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	1dbb      	adds	r3, r7, #6
 8007be8:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007bea:	250f      	movs	r5, #15
 8007bec:	197b      	adds	r3, r7, r5
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status = (VL53L1_RdWord(dev,
 8007bf2:	197c      	adds	r4, r7, r5
 8007bf4:	260c      	movs	r6, #12
 8007bf6:	19ba      	adds	r2, r7, r6
 8007bf8:	1dbb      	adds	r3, r7, #6
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	2196      	movs	r1, #150	; 0x96
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f000 fab9 	bl	8008176 <VL53L1_RdWord>
 8007c04:	0003      	movs	r3, r0
 8007c06:	7023      	strb	r3, [r4, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8007c08:	19bb      	adds	r3, r7, r6
 8007c0a:	881a      	ldrh	r2, [r3, #0]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	801a      	strh	r2, [r3, #0]
	return status;
 8007c10:	197b      	adds	r3, r7, r5
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	b25b      	sxtb	r3, r3
}
 8007c16:	0018      	movs	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b005      	add	sp, #20
 8007c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007c20 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8007c20:	b5b0      	push	{r4, r5, r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	0002      	movs	r2, r0
 8007c28:	6039      	str	r1, [r7, #0]
 8007c2a:	1dbb      	adds	r3, r7, #6
 8007c2c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007c2e:	210f      	movs	r1, #15
 8007c30:	187b      	adds	r3, r7, r1
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
	uint8_t RgSt;

	*rangeStatus = 255;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	22ff      	movs	r2, #255	; 0xff
 8007c3a:	701a      	strb	r2, [r3, #0]
	status = VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8007c3c:	187c      	adds	r4, r7, r1
 8007c3e:	250e      	movs	r5, #14
 8007c40:	197a      	adds	r2, r7, r5
 8007c42:	1dbb      	adds	r3, r7, #6
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	2189      	movs	r1, #137	; 0x89
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f000 fa79 	bl	8008140 <VL53L1_RdByte>
 8007c4e:	0003      	movs	r3, r0
 8007c50:	7023      	strb	r3, [r4, #0]
	RgSt = RgSt & 0x1F;
 8007c52:	197b      	adds	r3, r7, r5
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	221f      	movs	r2, #31
 8007c58:	4013      	ands	r3, r2
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	197b      	adds	r3, r7, r5
 8007c5e:	701a      	strb	r2, [r3, #0]
	if (RgSt < 24)
 8007c60:	197b      	adds	r3, r7, r5
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b17      	cmp	r3, #23
 8007c66:	d806      	bhi.n	8007c76 <VL53L1X_GetRangeStatus+0x56>
		*rangeStatus = status_rtn[RgSt];
 8007c68:	197b      	adds	r3, r7, r5
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	001a      	movs	r2, r3
 8007c6e:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <VL53L1X_GetRangeStatus+0x68>)
 8007c70:	5c9a      	ldrb	r2, [r3, r2]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	701a      	strb	r2, [r3, #0]
	return status;
 8007c76:	230f      	movs	r3, #15
 8007c78:	18fb      	adds	r3, r7, r3
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b25b      	sxtb	r3, r3
}
 8007c7e:	0018      	movs	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	b004      	add	sp, #16
 8007c84:	bdb0      	pop	{r4, r5, r7, pc}
 8007c86:	46c0      	nop			; (mov r8, r8)
 8007c88:	0800cd70 	.word	0x0800cd70

08007c8c <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(uint16_t dev, int16_t OffsetValue)
{
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	0002      	movs	r2, r0
 8007c94:	1dbb      	adds	r3, r7, #6
 8007c96:	801a      	strh	r2, [r3, #0]
 8007c98:	1d3b      	adds	r3, r7, #4
 8007c9a:	1c0a      	adds	r2, r1, #0
 8007c9c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007c9e:	240f      	movs	r4, #15
 8007ca0:	193b      	adds	r3, r7, r4
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
	int16_t Temp;

	Temp = (OffsetValue*4);
 8007ca6:	1d3b      	adds	r3, r7, #4
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	210c      	movs	r1, #12
 8007cb0:	187b      	adds	r3, r7, r1
 8007cb2:	801a      	strh	r2, [r3, #0]
	VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 8007cb4:	187b      	adds	r3, r7, r1
 8007cb6:	881a      	ldrh	r2, [r3, #0]
 8007cb8:	1dbb      	adds	r3, r7, #6
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	211e      	movs	r1, #30
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f000 f9b0 	bl	8008024 <VL53L1_WrWord>
			(uint16_t)Temp);
	VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 8007cc4:	1dbb      	adds	r3, r7, #6
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2120      	movs	r1, #32
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f000 f9a9 	bl	8008024 <VL53L1_WrWord>
	VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 8007cd2:	1dbb      	adds	r3, r7, #6
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2122      	movs	r1, #34	; 0x22
 8007cda:	0018      	movs	r0, r3
 8007cdc:	f000 f9a2 	bl	8008024 <VL53L1_WrWord>
	return status;
 8007ce0:	193b      	adds	r3, r7, r4
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	b25b      	sxtb	r3, r3
}
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b005      	add	sp, #20
 8007cec:	bd90      	pop	{r4, r7, pc}

08007cee <VL53L1X_GetOffset>:

VL53L1X_ERROR  VL53L1X_GetOffset(uint16_t dev, int16_t *offset)
{
 8007cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	0002      	movs	r2, r0
 8007cf6:	6039      	str	r1, [r7, #0]
 8007cf8:	1dbb      	adds	r3, r7, #6
 8007cfa:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007cfc:	260f      	movs	r6, #15
 8007cfe:	19bb      	adds	r3, r7, r6
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
	uint16_t Temp;

	status = VL53L1_RdWord(dev,ALGO__PART_TO_PART_RANGE_OFFSET_MM, &Temp);
 8007d04:	19bc      	adds	r4, r7, r6
 8007d06:	250c      	movs	r5, #12
 8007d08:	197a      	adds	r2, r7, r5
 8007d0a:	1dbb      	adds	r3, r7, #6
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	211e      	movs	r1, #30
 8007d10:	0018      	movs	r0, r3
 8007d12:	f000 fa30 	bl	8008176 <VL53L1_RdWord>
 8007d16:	0003      	movs	r3, r0
 8007d18:	7023      	strb	r3, [r4, #0]
	Temp = Temp<<3;
 8007d1a:	197b      	adds	r3, r7, r5
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	197b      	adds	r3, r7, r5
 8007d24:	801a      	strh	r2, [r3, #0]
	Temp = Temp>>5;
 8007d26:	197b      	adds	r3, r7, r5
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	197b      	adds	r3, r7, r5
 8007d30:	801a      	strh	r2, [r3, #0]
	*offset = (int16_t)(Temp);
 8007d32:	197b      	adds	r3, r7, r5
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b21a      	sxth	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	801a      	strh	r2, [r3, #0]
	return status;
 8007d3c:	19bb      	adds	r3, r7, r6
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	b25b      	sxtb	r3, r3
}
 8007d42:	0018      	movs	r0, r3
 8007d44:	46bd      	mov	sp, r7
 8007d46:	b005      	add	sp, #20
 8007d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d4a <VL53L1X_SetROI>:
	*ROICenter = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_SetROI(uint16_t dev, uint16_t X, uint16_t Y)
{
 8007d4a:	b5b0      	push	{r4, r5, r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	0004      	movs	r4, r0
 8007d52:	0008      	movs	r0, r1
 8007d54:	0011      	movs	r1, r2
 8007d56:	1dbb      	adds	r3, r7, #6
 8007d58:	1c22      	adds	r2, r4, #0
 8007d5a:	801a      	strh	r2, [r3, #0]
 8007d5c:	1d3b      	adds	r3, r7, #4
 8007d5e:	1c02      	adds	r2, r0, #0
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	1cbb      	adds	r3, r7, #2
 8007d64:	1c0a      	adds	r2, r1, #0
 8007d66:	801a      	strh	r2, [r3, #0]
	uint8_t OpticalCenter;
	VL53L1X_ERROR status = 0;
 8007d68:	210f      	movs	r1, #15
 8007d6a:	187b      	adds	r3, r7, r1
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	701a      	strb	r2, [r3, #0]

	status =VL53L1_RdByte(dev, VL53L1_ROI_CONFIG__MODE_ROI_CENTRE_SPAD, &OpticalCenter);
 8007d70:	187c      	adds	r4, r7, r1
 8007d72:	230e      	movs	r3, #14
 8007d74:	18fa      	adds	r2, r7, r3
 8007d76:	239f      	movs	r3, #159	; 0x9f
 8007d78:	0059      	lsls	r1, r3, #1
 8007d7a:	1dbb      	adds	r3, r7, #6
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	0018      	movs	r0, r3
 8007d80:	f000 f9de 	bl	8008140 <VL53L1_RdByte>
 8007d84:	0003      	movs	r3, r0
 8007d86:	7023      	strb	r3, [r4, #0]
	if (X > 16)
 8007d88:	1d3b      	adds	r3, r7, #4
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	2b10      	cmp	r3, #16
 8007d8e:	d902      	bls.n	8007d96 <VL53L1X_SetROI+0x4c>
		X = 16;
 8007d90:	1d3b      	adds	r3, r7, #4
 8007d92:	2210      	movs	r2, #16
 8007d94:	801a      	strh	r2, [r3, #0]
	if (Y > 16)
 8007d96:	1cbb      	adds	r3, r7, #2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d902      	bls.n	8007da4 <VL53L1X_SetROI+0x5a>
		Y = 16;
 8007d9e:	1cbb      	adds	r3, r7, #2
 8007da0:	2210      	movs	r2, #16
 8007da2:	801a      	strh	r2, [r3, #0]
	if (X > 10 || Y > 10){
 8007da4:	1d3b      	adds	r3, r7, #4
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	2b0a      	cmp	r3, #10
 8007daa:	d803      	bhi.n	8007db4 <VL53L1X_SetROI+0x6a>
 8007dac:	1cbb      	adds	r3, r7, #2
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	2b0a      	cmp	r3, #10
 8007db2:	d903      	bls.n	8007dbc <VL53L1X_SetROI+0x72>
		OpticalCenter = 199;
 8007db4:	230e      	movs	r3, #14
 8007db6:	18fb      	adds	r3, r7, r3
 8007db8:	22c7      	movs	r2, #199	; 0xc7
 8007dba:	701a      	strb	r2, [r3, #0]
	}
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_CENTRE_SPAD, OpticalCenter);
 8007dbc:	230e      	movs	r3, #14
 8007dbe:	18fb      	adds	r3, r7, r3
 8007dc0:	781a      	ldrb	r2, [r3, #0]
 8007dc2:	250f      	movs	r5, #15
 8007dc4:	197c      	adds	r4, r7, r5
 8007dc6:	1dbb      	adds	r3, r7, #6
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	217f      	movs	r1, #127	; 0x7f
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f000 f8eb 	bl	8007fa8 <VL53L1_WrByte>
 8007dd2:	0003      	movs	r3, r0
 8007dd4:	7023      	strb	r3, [r4, #0]
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
		       (Y - 1) << 4 | (X - 1));
 8007dd6:	1cbb      	adds	r3, r7, #2
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	b25a      	sxtb	r2, r3
 8007de0:	1d3b      	adds	r3, r7, #4
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	b25b      	sxtb	r3, r3
 8007dec:	4313      	orrs	r3, r2
 8007dee:	b25b      	sxtb	r3, r3
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	197c      	adds	r4, r7, r5
 8007df4:	1dbb      	adds	r3, r7, #6
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	2180      	movs	r1, #128	; 0x80
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	f000 f8d4 	bl	8007fa8 <VL53L1_WrByte>
 8007e00:	0003      	movs	r3, r0
 8007e02:	7023      	strb	r3, [r4, #0]
	return status;
 8007e04:	197b      	adds	r3, r7, r5
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b25b      	sxtb	r3, r3
}
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b004      	add	sp, #16
 8007e10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007e14 <ReadRegister16>:
	}
	return ((data_read[0] << 24) | (data_read[1]<<16) | (data_read[2]<<8)| (data_read[3]));
}

uint16_t ReadRegister16(uint16_t dev, uint16_t RegisterAdress)
{
 8007e14:	b5b0      	push	{r4, r5, r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af02      	add	r7, sp, #8
 8007e1a:	0002      	movs	r2, r0
 8007e1c:	1dbb      	adds	r3, r7, #6
 8007e1e:	801a      	strh	r2, [r3, #0]
 8007e20:	1d3b      	adds	r3, r7, #4
 8007e22:	1c0a      	adds	r2, r1, #0
 8007e24:	801a      	strh	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8007e26:	1d3b      	adds	r3, r7, #4
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	0a1b      	lsrs	r3, r3, #8
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	210c      	movs	r1, #12
 8007e32:	187b      	adds	r3, r7, r1
 8007e34:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8007e36:	1d3b      	adds	r3, r7, #4
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	187b      	adds	r3, r7, r1
 8007e3e:	705a      	strb	r2, [r3, #1]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, dev, data_write, 2, 100);
 8007e40:	250f      	movs	r5, #15
 8007e42:	197c      	adds	r4, r7, r5
 8007e44:	187a      	adds	r2, r7, r1
 8007e46:	1dbb      	adds	r3, r7, #6
 8007e48:	8819      	ldrh	r1, [r3, #0]
 8007e4a:	4817      	ldr	r0, [pc, #92]	; (8007ea8 <ReadRegister16+0x94>)
 8007e4c:	2364      	movs	r3, #100	; 0x64
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	2302      	movs	r3, #2
 8007e52:	f7fc fe29 	bl	8004aa8 <HAL_I2C_Master_Transmit>
 8007e56:	0003      	movs	r3, r0
 8007e58:	7023      	strb	r3, [r4, #0]
	Status += HAL_I2C_Master_Receive(&I2C_HANDLE, dev, data_read, 2, 100);
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	18fa      	adds	r2, r7, r3
 8007e5e:	1dbb      	adds	r3, r7, #6
 8007e60:	8819      	ldrh	r1, [r3, #0]
 8007e62:	4811      	ldr	r0, [pc, #68]	; (8007ea8 <ReadRegister16+0x94>)
 8007e64:	2364      	movs	r3, #100	; 0x64
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	2302      	movs	r3, #2
 8007e6a:	f7fc ff25 	bl	8004cb8 <HAL_I2C_Master_Receive>
 8007e6e:	0003      	movs	r3, r0
 8007e70:	0019      	movs	r1, r3
 8007e72:	197b      	adds	r3, r7, r5
 8007e74:	197a      	adds	r2, r7, r5
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	188a      	adds	r2, r1, r2
 8007e7a:	701a      	strb	r2, [r3, #0]
	if (Status)
 8007e7c:	197b      	adds	r3, r7, r5
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <ReadRegister16+0x74>
	{
		_I2cFailRecover();
 8007e84:	f000 f9bc 	bl	8008200 <_I2cFailRecover>
	}
	return (data_read[0] << 8) | (data_read[1]);
 8007e88:	2108      	movs	r1, #8
 8007e8a:	187b      	adds	r3, r7, r1
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	021b      	lsls	r3, r3, #8
 8007e90:	b21a      	sxth	r2, r3
 8007e92:	187b      	adds	r3, r7, r1
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	b21b      	sxth	r3, r3
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	b21b      	sxth	r3, r3
 8007e9c:	b29b      	uxth	r3, r3
}
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	b004      	add	sp, #16
 8007ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	20000d84 	.word	0x20000d84

08007eac <ReadRegister8>:

uint8_t ReadRegister8(uint16_t dev, uint16_t RegisterAdress)
{
 8007eac:	b5b0      	push	{r4, r5, r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	0002      	movs	r2, r0
 8007eb4:	1dbb      	adds	r3, r7, #6
 8007eb6:	801a      	strh	r2, [r3, #0]
 8007eb8:	1d3b      	adds	r3, r7, #4
 8007eba:	1c0a      	adds	r2, r1, #0
 8007ebc:	801a      	strh	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8007ebe:	1d3b      	adds	r3, r7, #4
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	0a1b      	lsrs	r3, r3, #8
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	210c      	movs	r1, #12
 8007eca:	187b      	adds	r3, r7, r1
 8007ecc:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	187b      	adds	r3, r7, r1
 8007ed6:	705a      	strb	r2, [r3, #1]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, dev, data_write, 2, 100);
 8007ed8:	250f      	movs	r5, #15
 8007eda:	197c      	adds	r4, r7, r5
 8007edc:	187a      	adds	r2, r7, r1
 8007ede:	1dbb      	adds	r3, r7, #6
 8007ee0:	8819      	ldrh	r1, [r3, #0]
 8007ee2:	4813      	ldr	r0, [pc, #76]	; (8007f30 <ReadRegister8+0x84>)
 8007ee4:	2364      	movs	r3, #100	; 0x64
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	2302      	movs	r3, #2
 8007eea:	f7fc fddd 	bl	8004aa8 <HAL_I2C_Master_Transmit>
 8007eee:	0003      	movs	r3, r0
 8007ef0:	7023      	strb	r3, [r4, #0]
	Status += HAL_I2C_Master_Receive(&I2C_HANDLE, dev, data_read, 1, 100);
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	18fa      	adds	r2, r7, r3
 8007ef6:	1dbb      	adds	r3, r7, #6
 8007ef8:	8819      	ldrh	r1, [r3, #0]
 8007efa:	480d      	ldr	r0, [pc, #52]	; (8007f30 <ReadRegister8+0x84>)
 8007efc:	2364      	movs	r3, #100	; 0x64
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	2301      	movs	r3, #1
 8007f02:	f7fc fed9 	bl	8004cb8 <HAL_I2C_Master_Receive>
 8007f06:	0003      	movs	r3, r0
 8007f08:	0019      	movs	r1, r3
 8007f0a:	197b      	adds	r3, r7, r5
 8007f0c:	197a      	adds	r2, r7, r5
 8007f0e:	7812      	ldrb	r2, [r2, #0]
 8007f10:	188a      	adds	r2, r1, r2
 8007f12:	701a      	strb	r2, [r3, #0]
	if (Status)
 8007f14:	197b      	adds	r3, r7, r5
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <ReadRegister8+0x74>
	{
		_I2cFailRecover();
 8007f1c:	f000 f970 	bl	8008200 <_I2cFailRecover>
	}
	return data_read[0];
 8007f20:	2308      	movs	r3, #8
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	781b      	ldrb	r3, [r3, #0]
}
 8007f26:	0018      	movs	r0, r3
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	b004      	add	sp, #16
 8007f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	20000d84 	.word	0x20000d84

08007f34 <WriteRegister8>:

void WriteRegister8(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8007f34:	b5b0      	push	{r4, r5, r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af02      	add	r7, sp, #8
 8007f3a:	0004      	movs	r4, r0
 8007f3c:	0008      	movs	r0, r1
 8007f3e:	0011      	movs	r1, r2
 8007f40:	1dbb      	adds	r3, r7, #6
 8007f42:	1c22      	adds	r2, r4, #0
 8007f44:	801a      	strh	r2, [r3, #0]
 8007f46:	1d3b      	adds	r3, r7, #4
 8007f48:	1c02      	adds	r2, r0, #0
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	1cfb      	adds	r3, r7, #3
 8007f4e:	1c0a      	adds	r2, r1, #0
 8007f50:	701a      	strb	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[3];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8007f52:	1d3b      	adds	r3, r7, #4
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	210c      	movs	r1, #12
 8007f5e:	187b      	adds	r3, r7, r1
 8007f60:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8007f62:	1d3b      	adds	r3, r7, #4
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	187b      	adds	r3, r7, r1
 8007f6a:	705a      	strb	r2, [r3, #1]
	data_write[2] = value & 0xFF;
 8007f6c:	187b      	adds	r3, r7, r1
 8007f6e:	1cfa      	adds	r2, r7, #3
 8007f70:	7812      	ldrb	r2, [r2, #0]
 8007f72:	709a      	strb	r2, [r3, #2]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, dev, data_write, 3, 100);
 8007f74:	250f      	movs	r5, #15
 8007f76:	197c      	adds	r4, r7, r5
 8007f78:	187a      	adds	r2, r7, r1
 8007f7a:	1dbb      	adds	r3, r7, #6
 8007f7c:	8819      	ldrh	r1, [r3, #0]
 8007f7e:	4809      	ldr	r0, [pc, #36]	; (8007fa4 <WriteRegister8+0x70>)
 8007f80:	2364      	movs	r3, #100	; 0x64
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	2303      	movs	r3, #3
 8007f86:	f7fc fd8f 	bl	8004aa8 <HAL_I2C_Master_Transmit>
 8007f8a:	0003      	movs	r3, r0
 8007f8c:	7023      	strb	r3, [r4, #0]
	if (Status)
 8007f8e:	197b      	adds	r3, r7, r5
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <WriteRegister8+0x66>
	{
		_I2cFailRecover();
 8007f96:	f000 f933 	bl	8008200 <_I2cFailRecover>
	}
}
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b004      	add	sp, #16
 8007fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	20000d84 	.word	0x20000d84

08007fa8 <VL53L1_WrByte>:




VL53L1_Error VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data)
{
 8007fa8:	b5b0      	push	{r4, r5, r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	0004      	movs	r4, r0
 8007fb0:	0008      	movs	r0, r1
 8007fb2:	0011      	movs	r1, r2
 8007fb4:	1dbb      	adds	r3, r7, #6
 8007fb6:	1c22      	adds	r2, r4, #0
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	1d3b      	adds	r3, r7, #4
 8007fbc:	1c02      	adds	r2, r0, #0
 8007fbe:	801a      	strh	r2, [r3, #0]
 8007fc0:	1cfb      	adds	r3, r7, #3
 8007fc2:	1c0a      	adds	r2, r1, #0
 8007fc4:	701a      	strb	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[3];

	data_write[0] = (index >> 8) & 0xFF;
 8007fc6:	1d3b      	adds	r3, r7, #4
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	0a1b      	lsrs	r3, r3, #8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	210c      	movs	r1, #12
 8007fd2:	187b      	adds	r3, r7, r1
 8007fd4:	701a      	strb	r2, [r3, #0]
	data_write[1] = index & 0xFF;
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	187b      	adds	r3, r7, r1
 8007fde:	705a      	strb	r2, [r3, #1]
	data_write[2] = data & 0xFF;
 8007fe0:	187b      	adds	r3, r7, r1
 8007fe2:	1cfa      	adds	r2, r7, #3
 8007fe4:	7812      	ldrb	r2, [r2, #0]
 8007fe6:	709a      	strb	r2, [r3, #2]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, Dev, data_write, 3, 100);
 8007fe8:	250f      	movs	r5, #15
 8007fea:	197c      	adds	r4, r7, r5
 8007fec:	187a      	adds	r2, r7, r1
 8007fee:	1dbb      	adds	r3, r7, #6
 8007ff0:	8819      	ldrh	r1, [r3, #0]
 8007ff2:	480b      	ldr	r0, [pc, #44]	; (8008020 <VL53L1_WrByte+0x78>)
 8007ff4:	2364      	movs	r3, #100	; 0x64
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	f7fc fd55 	bl	8004aa8 <HAL_I2C_Master_Transmit>
 8007ffe:	0003      	movs	r3, r0
 8008000:	7023      	strb	r3, [r4, #0]
	if (Status)
 8008002:	197b      	adds	r3, r7, r5
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <VL53L1_WrByte+0x66>
	{
		_I2cFailRecover();
 800800a:	f000 f8f9 	bl	8008200 <_I2cFailRecover>
	}
	return Status;
 800800e:	230f      	movs	r3, #15
 8008010:	18fb      	adds	r3, r7, r3
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	b25b      	sxtb	r3, r3
}
 8008016:	0018      	movs	r0, r3
 8008018:	46bd      	mov	sp, r7
 800801a:	b004      	add	sp, #16
 800801c:	bdb0      	pop	{r4, r5, r7, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	20000d84 	.word	0x20000d84

08008024 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data)
{
 8008024:	b5b0      	push	{r4, r5, r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af02      	add	r7, sp, #8
 800802a:	0004      	movs	r4, r0
 800802c:	0008      	movs	r0, r1
 800802e:	0011      	movs	r1, r2
 8008030:	1dbb      	adds	r3, r7, #6
 8008032:	1c22      	adds	r2, r4, #0
 8008034:	801a      	strh	r2, [r3, #0]
 8008036:	1d3b      	adds	r3, r7, #4
 8008038:	1c02      	adds	r2, r0, #0
 800803a:	801a      	strh	r2, [r3, #0]
 800803c:	1cbb      	adds	r3, r7, #2
 800803e:	1c0a      	adds	r2, r1, #0
 8008040:	801a      	strh	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[4];

	data_write[0] = (index >> 8) & 0xFF;
 8008042:	1d3b      	adds	r3, r7, #4
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	b29b      	uxth	r3, r3
 800804a:	b2da      	uxtb	r2, r3
 800804c:	2108      	movs	r1, #8
 800804e:	187b      	adds	r3, r7, r1
 8008050:	701a      	strb	r2, [r3, #0]
	data_write[1] = index & 0xFF;
 8008052:	1d3b      	adds	r3, r7, #4
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	187b      	adds	r3, r7, r1
 800805a:	705a      	strb	r2, [r3, #1]
	data_write[2] = (data >> 8) & 0xFF;
 800805c:	1cbb      	adds	r3, r7, #2
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	0a1b      	lsrs	r3, r3, #8
 8008062:	b29b      	uxth	r3, r3
 8008064:	b2da      	uxtb	r2, r3
 8008066:	187b      	adds	r3, r7, r1
 8008068:	709a      	strb	r2, [r3, #2]
	data_write[3] = data & 0xFF;
 800806a:	1cbb      	adds	r3, r7, #2
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b2da      	uxtb	r2, r3
 8008070:	187b      	adds	r3, r7, r1
 8008072:	70da      	strb	r2, [r3, #3]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, Dev, data_write, 4, 100);
 8008074:	250f      	movs	r5, #15
 8008076:	197c      	adds	r4, r7, r5
 8008078:	187a      	adds	r2, r7, r1
 800807a:	1dbb      	adds	r3, r7, #6
 800807c:	8819      	ldrh	r1, [r3, #0]
 800807e:	480b      	ldr	r0, [pc, #44]	; (80080ac <VL53L1_WrWord+0x88>)
 8008080:	2364      	movs	r3, #100	; 0x64
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	2304      	movs	r3, #4
 8008086:	f7fc fd0f 	bl	8004aa8 <HAL_I2C_Master_Transmit>
 800808a:	0003      	movs	r3, r0
 800808c:	7023      	strb	r3, [r4, #0]
	if (Status)
 800808e:	197b      	adds	r3, r7, r5
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <VL53L1_WrWord+0x76>
	{
		_I2cFailRecover();
 8008096:	f000 f8b3 	bl	8008200 <_I2cFailRecover>
	}
	return Status;
 800809a:	230f      	movs	r3, #15
 800809c:	18fb      	adds	r3, r7, r3
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	b25b      	sxtb	r3, r3
}
 80080a2:	0018      	movs	r0, r3
 80080a4:	46bd      	mov	sp, r7
 80080a6:	b004      	add	sp, #16
 80080a8:	bdb0      	pop	{r4, r5, r7, pc}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	20000d84 	.word	0x20000d84

080080b0 <VL53L1_WrDWord>:

VL53L1_Error VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data)
{
 80080b0:	b5b0      	push	{r4, r5, r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	603a      	str	r2, [r7, #0]
 80080b8:	1dbb      	adds	r3, r7, #6
 80080ba:	1c02      	adds	r2, r0, #0
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	1d3b      	adds	r3, r7, #4
 80080c0:	1c0a      	adds	r2, r1, #0
 80080c2:	801a      	strh	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[6];

	data_write[0] = (index >> 8) & 0xFF;
 80080c4:	1d3b      	adds	r3, r7, #4
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	0a1b      	lsrs	r3, r3, #8
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	2108      	movs	r1, #8
 80080d0:	187b      	adds	r3, r7, r1
 80080d2:	701a      	strb	r2, [r3, #0]
	data_write[1] = index & 0xFF;
 80080d4:	1d3b      	adds	r3, r7, #4
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	187b      	adds	r3, r7, r1
 80080dc:	705a      	strb	r2, [r3, #1]
	data_write[2] = (data >> 24) & 0xFF;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	0e1b      	lsrs	r3, r3, #24
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	187b      	adds	r3, r7, r1
 80080e6:	709a      	strb	r2, [r3, #2]
	data_write[3] = (data >> 16) & 0xFF;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	187b      	adds	r3, r7, r1
 80080f0:	70da      	strb	r2, [r3, #3]
	data_write[4] = (data >> 8) & 0xFF;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	0a1b      	lsrs	r3, r3, #8
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	711a      	strb	r2, [r3, #4]
	data_write[5] = data & 0xFF;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	187b      	adds	r3, r7, r1
 8008102:	715a      	strb	r2, [r3, #5]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, Dev, data_write, 6, 100);
 8008104:	250f      	movs	r5, #15
 8008106:	197c      	adds	r4, r7, r5
 8008108:	187a      	adds	r2, r7, r1
 800810a:	1dbb      	adds	r3, r7, #6
 800810c:	8819      	ldrh	r1, [r3, #0]
 800810e:	480b      	ldr	r0, [pc, #44]	; (800813c <VL53L1_WrDWord+0x8c>)
 8008110:	2364      	movs	r3, #100	; 0x64
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	2306      	movs	r3, #6
 8008116:	f7fc fcc7 	bl	8004aa8 <HAL_I2C_Master_Transmit>
 800811a:	0003      	movs	r3, r0
 800811c:	7023      	strb	r3, [r4, #0]
	if (Status)
 800811e:	197b      	adds	r3, r7, r5
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <VL53L1_WrDWord+0x7a>
	{
		_I2cFailRecover();
 8008126:	f000 f86b 	bl	8008200 <_I2cFailRecover>
	}
	return Status;
 800812a:	230f      	movs	r3, #15
 800812c:	18fb      	adds	r3, r7, r3
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	b25b      	sxtb	r3, r3
}
 8008132:	0018      	movs	r0, r3
 8008134:	46bd      	mov	sp, r7
 8008136:	b004      	add	sp, #16
 8008138:	bdb0      	pop	{r4, r5, r7, pc}
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	20000d84 	.word	0x20000d84

08008140 <VL53L1_RdByte>:
    //Status += VL53L1_WriteMulti(Dev, index, &data, 1);
    return Status;
}

VL53L1_Error VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	603a      	str	r2, [r7, #0]
 8008148:	1dbb      	adds	r3, r7, #6
 800814a:	1c02      	adds	r2, r0, #0
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	1c0a      	adds	r2, r1, #0
 8008152:	801a      	strh	r2, [r3, #0]
	*data = ReadRegister8(Dev, index);
 8008154:	1d3b      	adds	r3, r7, #4
 8008156:	881a      	ldrh	r2, [r3, #0]
 8008158:	1dbb      	adds	r3, r7, #6
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	0011      	movs	r1, r2
 800815e:	0018      	movs	r0, r3
 8008160:	f7ff fea4 	bl	8007eac <ReadRegister8>
 8008164:	0003      	movs	r3, r0
 8008166:	001a      	movs	r2, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	701a      	strb	r2, [r3, #0]
	return 0;
 800816c:	2300      	movs	r3, #0
}
 800816e:	0018      	movs	r0, r3
 8008170:	46bd      	mov	sp, r7
 8008172:	b002      	add	sp, #8
 8008174:	bd80      	pop	{r7, pc}

08008176 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	603a      	str	r2, [r7, #0]
 800817e:	1dbb      	adds	r3, r7, #6
 8008180:	1c02      	adds	r2, r0, #0
 8008182:	801a      	strh	r2, [r3, #0]
 8008184:	1d3b      	adds	r3, r7, #4
 8008186:	1c0a      	adds	r2, r1, #0
 8008188:	801a      	strh	r2, [r3, #0]

	*data = ReadRegister16(Dev, index);
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	881a      	ldrh	r2, [r3, #0]
 800818e:	1dbb      	adds	r3, r7, #6
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	0011      	movs	r1, r2
 8008194:	0018      	movs	r0, r3
 8008196:	f7ff fe3d 	bl	8007e14 <ReadRegister16>
 800819a:	0003      	movs	r3, r0
 800819c:	001a      	movs	r2, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	801a      	strh	r2, [r3, #0]
	return 0;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	0018      	movs	r0, r3
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b002      	add	sp, #8
 80081aa:	bd80      	pop	{r7, pc}

080081ac <I2C_Init>:
int UART_Active;				/* Flag to see if UART is active */
int UART_Ready;					/* Flag to see if a new command is available */


void I2C_Init(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
	    //_I2cFailRecover();

	    /* Peripheral clock enable */
	    //__I2C1_CLK_ENABLE();

	    I2C_HANDLE.Instance = I2C1;
 80081b0:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <I2C_Init+0x48>)
 80081b2:	4a11      	ldr	r2, [pc, #68]	; (80081f8 <I2C_Init+0x4c>)
 80081b4:	601a      	str	r2, [r3, #0]
	    I2C_HANDLE.Init.Timing = 0x00602173;
 80081b6:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <I2C_Init+0x48>)
 80081b8:	4a10      	ldr	r2, [pc, #64]	; (80081fc <I2C_Init+0x50>)
 80081ba:	605a      	str	r2, [r3, #4]
	    //I2C_HANDLE.Init.DutyCycle = I2C_DUTYCYCLE_2;
	    I2C_HANDLE.Init.OwnAddress1 = 0;
 80081bc:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <I2C_Init+0x48>)
 80081be:	2200      	movs	r2, #0
 80081c0:	609a      	str	r2, [r3, #8]
	    I2C_HANDLE.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80081c2:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <I2C_Init+0x48>)
 80081c4:	2201      	movs	r2, #1
 80081c6:	60da      	str	r2, [r3, #12]
	    I2C_HANDLE.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <I2C_Init+0x48>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	611a      	str	r2, [r3, #16]
	    I2C_HANDLE.Init.OwnAddress2 = 0;
 80081ce:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <I2C_Init+0x48>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	615a      	str	r2, [r3, #20]
	    I2C_HANDLE.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80081d4:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <I2C_Init+0x48>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	619a      	str	r2, [r3, #24]
	    I2C_HANDLE.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80081da:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <I2C_Init+0x48>)
 80081dc:	2200      	movs	r2, #0
 80081de:	61da      	str	r2, [r3, #28]
	    I2C_HANDLE.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80081e0:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <I2C_Init+0x48>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	621a      	str	r2, [r3, #32]

	    HAL_I2C_Init(&I2C_HANDLE);
 80081e6:	4b03      	ldr	r3, [pc, #12]	; (80081f4 <I2C_Init+0x48>)
 80081e8:	0018      	movs	r0, r3
 80081ea:	f7fc fbc7 	bl	800497c <HAL_I2C_Init>
	    //SYSCFG->CFGR1 = SYSCFG->CFGR1 | 0x00400000;	//bit 22 at 1
	    //HAL_SYSCFG_EnableRemap (SYSCFG_REMAP_PA12);
	    //HAL_SYSCFG_DisableRemap (SYSCFG_REMAP_PA11);
	    //HAL_SYSCFG_EnableRemap (SYSCFG_REMAP_PA11); // Permet que les fonctions s'adressant a PA9 activent la broche PA11
	    //Pas de Remap dans la 1.2 !!!
}
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	20000d84 	.word	0x20000d84
 80081f8:	40005400 	.word	0x40005400
 80081fc:	00602173 	.word	0x00602173

08008200 <_I2cFailRecover>:



void _I2cFailRecover(void){
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0

	uint16_t cap = ~(1<<FailedBoot);
 8008206:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <_I2cFailRecover+0x30>)
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	001a      	movs	r2, r3
 800820c:	2301      	movs	r3, #1
 800820e:	4093      	lsls	r3, r2
 8008210:	b29a      	uxth	r2, r3
 8008212:	1dbb      	adds	r3, r7, #6
 8008214:	43d2      	mvns	r2, r2
 8008216:	801a      	strh	r2, [r3, #0]
	ActiveCaptors = ActiveCaptors & cap;
 8008218:	4b06      	ldr	r3, [pc, #24]	; (8008234 <_I2cFailRecover+0x34>)
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	1dba      	adds	r2, r7, #6
 800821e:	8812      	ldrh	r2, [r2, #0]
 8008220:	4013      	ands	r3, r2
 8008222:	b29a      	uxth	r2, r3
 8008224:	4b03      	ldr	r3, [pc, #12]	; (8008234 <_I2cFailRecover+0x34>)
 8008226:	801a      	strh	r2, [r3, #0]
            HAL_Delay(33*20);
        	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
        	HAL_Delay(333);
        }while(1);
    }*/
}
 8008228:	46c0      	nop			; (mov r8, r8)
 800822a:	46bd      	mov	sp, r7
 800822c:	b002      	add	sp, #8
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000d38 	.word	0x20000d38
 8008234:	2000004a 	.word	0x2000004a

08008238 <UART_Init>:


void UART_Init(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800823e:	4b2c      	ldr	r3, [pc, #176]	; (80082f0 <UART_Init+0xb8>)
 8008240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008242:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <UART_Init+0xb8>)
 8008244:	2101      	movs	r1, #1
 8008246:	430a      	orrs	r2, r1
 8008248:	635a      	str	r2, [r3, #52]	; 0x34
 800824a:	4b29      	ldr	r3, [pc, #164]	; (80082f0 <UART_Init+0xb8>)
 800824c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824e:	2201      	movs	r2, #1
 8008250:	4013      	ands	r3, r2
 8008252:	607b      	str	r3, [r7, #4]
 8008254:	687b      	ldr	r3, [r7, #4]
	__DMA1_CLK_ENABLE();
 8008256:	4b26      	ldr	r3, [pc, #152]	; (80082f0 <UART_Init+0xb8>)
 8008258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800825a:	4b25      	ldr	r3, [pc, #148]	; (80082f0 <UART_Init+0xb8>)
 800825c:	2101      	movs	r1, #1
 800825e:	430a      	orrs	r2, r1
 8008260:	639a      	str	r2, [r3, #56]	; 0x38
 8008262:	4b23      	ldr	r3, [pc, #140]	; (80082f0 <UART_Init+0xb8>)
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	2201      	movs	r2, #1
 8008268:	4013      	ands	r3, r2
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	683b      	ldr	r3, [r7, #0]
	SERIAL_UART.Init.OverSampling = UART_OVERSAMPLING_16;
	HAL_UART_Init(&SERIAL_UART);

	SERIAL_UART.Instance->CR1 = 0x202C;*/

	SERIAL_UART.Instance = USART2;
 800826e:	4b21      	ldr	r3, [pc, #132]	; (80082f4 <UART_Init+0xbc>)
 8008270:	4a21      	ldr	r2, [pc, #132]	; (80082f8 <UART_Init+0xc0>)
 8008272:	601a      	str	r2, [r3, #0]
	SERIAL_UART.Init.BaudRate = 115200;
 8008274:	4b1f      	ldr	r3, [pc, #124]	; (80082f4 <UART_Init+0xbc>)
 8008276:	22e1      	movs	r2, #225	; 0xe1
 8008278:	0252      	lsls	r2, r2, #9
 800827a:	605a      	str	r2, [r3, #4]
	SERIAL_UART.Init.WordLength = UART_WORDLENGTH_8B;
 800827c:	4b1d      	ldr	r3, [pc, #116]	; (80082f4 <UART_Init+0xbc>)
 800827e:	2200      	movs	r2, #0
 8008280:	609a      	str	r2, [r3, #8]
	SERIAL_UART.Init.StopBits = UART_STOPBITS_1;
 8008282:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <UART_Init+0xbc>)
 8008284:	2200      	movs	r2, #0
 8008286:	60da      	str	r2, [r3, #12]
	SERIAL_UART.Init.Parity = UART_PARITY_NONE;
 8008288:	4b1a      	ldr	r3, [pc, #104]	; (80082f4 <UART_Init+0xbc>)
 800828a:	2200      	movs	r2, #0
 800828c:	611a      	str	r2, [r3, #16]
	SERIAL_UART.Init.Mode = UART_MODE_TX_RX;
 800828e:	4b19      	ldr	r3, [pc, #100]	; (80082f4 <UART_Init+0xbc>)
 8008290:	220c      	movs	r2, #12
 8008292:	615a      	str	r2, [r3, #20]
	SERIAL_UART.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008294:	4b17      	ldr	r3, [pc, #92]	; (80082f4 <UART_Init+0xbc>)
 8008296:	2200      	movs	r2, #0
 8008298:	619a      	str	r2, [r3, #24]
	SERIAL_UART.Init.OverSampling = UART_OVERSAMPLING_16;
 800829a:	4b16      	ldr	r3, [pc, #88]	; (80082f4 <UART_Init+0xbc>)
 800829c:	2200      	movs	r2, #0
 800829e:	61da      	str	r2, [r3, #28]
	SERIAL_UART.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80082a0:	4b14      	ldr	r3, [pc, #80]	; (80082f4 <UART_Init+0xbc>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	621a      	str	r2, [r3, #32]
	SERIAL_UART.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80082a6:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <UART_Init+0xbc>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	625a      	str	r2, [r3, #36]	; 0x24
	//SERIAL_UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	SERIAL_UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80082ac:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <UART_Init+0xbc>)
 80082ae:	2230      	movs	r2, #48	; 0x30
 80082b0:	629a      	str	r2, [r3, #40]	; 0x28
	SERIAL_UART.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80082b2:	4b10      	ldr	r3, [pc, #64]	; (80082f4 <UART_Init+0xbc>)
 80082b4:	2280      	movs	r2, #128	; 0x80
 80082b6:	0152      	lsls	r2, r2, #5
 80082b8:	63da      	str	r2, [r3, #60]	; 0x3c
	SERIAL_UART.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80082ba:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <UART_Init+0xbc>)
 80082bc:	2280      	movs	r2, #128	; 0x80
 80082be:	0192      	lsls	r2, r2, #6
 80082c0:	641a      	str	r2, [r3, #64]	; 0x40

	 HAL_UART_Init(&SERIAL_UART);
 80082c2:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <UART_Init+0xbc>)
 80082c4:	0018      	movs	r0, r3
 80082c6:	f7fe fa69 	bl	800679c <HAL_UART_Init>
	 HAL_UARTEx_SetTxFifoThreshold(&SERIAL_UART, UART_TXFIFO_THRESHOLD_1_8);
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <UART_Init+0xbc>)
 80082cc:	2100      	movs	r1, #0
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7fe ff0a 	bl	80070e8 <HAL_UARTEx_SetTxFifoThreshold>
	 HAL_UARTEx_SetRxFifoThreshold(&SERIAL_UART, UART_RXFIFO_THRESHOLD_1_8);
 80082d4:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <UART_Init+0xbc>)
 80082d6:	2100      	movs	r1, #0
 80082d8:	0018      	movs	r0, r3
 80082da:	f7fe ff45 	bl	8007168 <HAL_UARTEx_SetRxFifoThreshold>
	 HAL_UARTEx_DisableFifoMode(&SERIAL_UART);
 80082de:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <UART_Init+0xbc>)
 80082e0:	0018      	movs	r0, r3
 80082e2:	f7fe fec7 	bl	8007074 <HAL_UARTEx_DisableFifoMode>
}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	46bd      	mov	sp, r7
 80082ea:	b002      	add	sp, #8
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	40021000 	.word	0x40021000
 80082f4:	20000dd0 	.word	0x20000dd0
 80082f8:	40004400 	.word	0x40004400

080082fc <UART_Print>:
	*UART_Ready = 0;
	HAL_UART_Receive_IT(&SERIAL_UART, (uint8_t *) Uart_RXBuffer, 1);
}

void UART_Print(const char *msg)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&SERIAL_UART, (uint8_t *) msg, strlen(msg), 100);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	0018      	movs	r0, r3
 8008308:	f7f7 fefa 	bl	8000100 <strlen>
 800830c:	0003      	movs	r3, r0
 800830e:	b29a      	uxth	r2, r3
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4804      	ldr	r0, [pc, #16]	; (8008324 <UART_Print+0x28>)
 8008314:	2364      	movs	r3, #100	; 0x64
 8008316:	f7fe fa97 	bl	8006848 <HAL_UART_Transmit>
}
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	46bd      	mov	sp, r7
 800831e:	b002      	add	sp, #8
 8008320:	bd80      	pop	{r7, pc}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	20000dd0 	.word	0x20000dd0

08008328 <__cvt>:
 8008328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800832a:	001e      	movs	r6, r3
 800832c:	2300      	movs	r3, #0
 800832e:	0014      	movs	r4, r2
 8008330:	b08b      	sub	sp, #44	; 0x2c
 8008332:	429e      	cmp	r6, r3
 8008334:	da04      	bge.n	8008340 <__cvt+0x18>
 8008336:	2180      	movs	r1, #128	; 0x80
 8008338:	0609      	lsls	r1, r1, #24
 800833a:	1873      	adds	r3, r6, r1
 800833c:	001e      	movs	r6, r3
 800833e:	232d      	movs	r3, #45	; 0x2d
 8008340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008342:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008344:	7013      	strb	r3, [r2, #0]
 8008346:	2320      	movs	r3, #32
 8008348:	2203      	movs	r2, #3
 800834a:	439f      	bics	r7, r3
 800834c:	2f46      	cmp	r7, #70	; 0x46
 800834e:	d007      	beq.n	8008360 <__cvt+0x38>
 8008350:	003b      	movs	r3, r7
 8008352:	3b45      	subs	r3, #69	; 0x45
 8008354:	4259      	negs	r1, r3
 8008356:	414b      	adcs	r3, r1
 8008358:	9910      	ldr	r1, [sp, #64]	; 0x40
 800835a:	3a01      	subs	r2, #1
 800835c:	18cb      	adds	r3, r1, r3
 800835e:	9310      	str	r3, [sp, #64]	; 0x40
 8008360:	ab09      	add	r3, sp, #36	; 0x24
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	ab08      	add	r3, sp, #32
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800836a:	9200      	str	r2, [sp, #0]
 800836c:	9302      	str	r3, [sp, #8]
 800836e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008370:	0022      	movs	r2, r4
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	0033      	movs	r3, r6
 8008376:	f000 fe7d 	bl	8009074 <_dtoa_r>
 800837a:	0005      	movs	r5, r0
 800837c:	2f47      	cmp	r7, #71	; 0x47
 800837e:	d102      	bne.n	8008386 <__cvt+0x5e>
 8008380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008382:	07db      	lsls	r3, r3, #31
 8008384:	d528      	bpl.n	80083d8 <__cvt+0xb0>
 8008386:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008388:	18eb      	adds	r3, r5, r3
 800838a:	9307      	str	r3, [sp, #28]
 800838c:	2f46      	cmp	r7, #70	; 0x46
 800838e:	d114      	bne.n	80083ba <__cvt+0x92>
 8008390:	782b      	ldrb	r3, [r5, #0]
 8008392:	2b30      	cmp	r3, #48	; 0x30
 8008394:	d10c      	bne.n	80083b0 <__cvt+0x88>
 8008396:	2200      	movs	r2, #0
 8008398:	2300      	movs	r3, #0
 800839a:	0020      	movs	r0, r4
 800839c:	0031      	movs	r1, r6
 800839e:	f7f8 f851 	bl	8000444 <__aeabi_dcmpeq>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d104      	bne.n	80083b0 <__cvt+0x88>
 80083a6:	2301      	movs	r3, #1
 80083a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083b2:	9a07      	ldr	r2, [sp, #28]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	18d3      	adds	r3, r2, r3
 80083b8:	9307      	str	r3, [sp, #28]
 80083ba:	2200      	movs	r2, #0
 80083bc:	2300      	movs	r3, #0
 80083be:	0020      	movs	r0, r4
 80083c0:	0031      	movs	r1, r6
 80083c2:	f7f8 f83f 	bl	8000444 <__aeabi_dcmpeq>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d001      	beq.n	80083ce <__cvt+0xa6>
 80083ca:	9b07      	ldr	r3, [sp, #28]
 80083cc:	9309      	str	r3, [sp, #36]	; 0x24
 80083ce:	2230      	movs	r2, #48	; 0x30
 80083d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d2:	9907      	ldr	r1, [sp, #28]
 80083d4:	428b      	cmp	r3, r1
 80083d6:	d306      	bcc.n	80083e6 <__cvt+0xbe>
 80083d8:	0028      	movs	r0, r5
 80083da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083de:	1b5b      	subs	r3, r3, r5
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	b00b      	add	sp, #44	; 0x2c
 80083e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e6:	1c59      	adds	r1, r3, #1
 80083e8:	9109      	str	r1, [sp, #36]	; 0x24
 80083ea:	701a      	strb	r2, [r3, #0]
 80083ec:	e7f0      	b.n	80083d0 <__cvt+0xa8>

080083ee <__exponent>:
 80083ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083f0:	1c83      	adds	r3, r0, #2
 80083f2:	b087      	sub	sp, #28
 80083f4:	9303      	str	r3, [sp, #12]
 80083f6:	0005      	movs	r5, r0
 80083f8:	000c      	movs	r4, r1
 80083fa:	232b      	movs	r3, #43	; 0x2b
 80083fc:	7002      	strb	r2, [r0, #0]
 80083fe:	2900      	cmp	r1, #0
 8008400:	da01      	bge.n	8008406 <__exponent+0x18>
 8008402:	424c      	negs	r4, r1
 8008404:	3302      	adds	r3, #2
 8008406:	706b      	strb	r3, [r5, #1]
 8008408:	2c09      	cmp	r4, #9
 800840a:	dd2f      	ble.n	800846c <__exponent+0x7e>
 800840c:	270a      	movs	r7, #10
 800840e:	ab04      	add	r3, sp, #16
 8008410:	1dde      	adds	r6, r3, #7
 8008412:	0020      	movs	r0, r4
 8008414:	0039      	movs	r1, r7
 8008416:	9601      	str	r6, [sp, #4]
 8008418:	f7f7 fffe 	bl	8000418 <__aeabi_idivmod>
 800841c:	3e01      	subs	r6, #1
 800841e:	3130      	adds	r1, #48	; 0x30
 8008420:	0020      	movs	r0, r4
 8008422:	7031      	strb	r1, [r6, #0]
 8008424:	0039      	movs	r1, r7
 8008426:	9402      	str	r4, [sp, #8]
 8008428:	f7f7 ff10 	bl	800024c <__divsi3>
 800842c:	9b02      	ldr	r3, [sp, #8]
 800842e:	0004      	movs	r4, r0
 8008430:	2b63      	cmp	r3, #99	; 0x63
 8008432:	dcee      	bgt.n	8008412 <__exponent+0x24>
 8008434:	9b01      	ldr	r3, [sp, #4]
 8008436:	3430      	adds	r4, #48	; 0x30
 8008438:	1e9a      	subs	r2, r3, #2
 800843a:	0013      	movs	r3, r2
 800843c:	9903      	ldr	r1, [sp, #12]
 800843e:	7014      	strb	r4, [r2, #0]
 8008440:	a804      	add	r0, sp, #16
 8008442:	3007      	adds	r0, #7
 8008444:	4298      	cmp	r0, r3
 8008446:	d80c      	bhi.n	8008462 <__exponent+0x74>
 8008448:	2300      	movs	r3, #0
 800844a:	4282      	cmp	r2, r0
 800844c:	d804      	bhi.n	8008458 <__exponent+0x6a>
 800844e:	aa04      	add	r2, sp, #16
 8008450:	3309      	adds	r3, #9
 8008452:	189b      	adds	r3, r3, r2
 8008454:	9a01      	ldr	r2, [sp, #4]
 8008456:	1a9b      	subs	r3, r3, r2
 8008458:	9a03      	ldr	r2, [sp, #12]
 800845a:	18d3      	adds	r3, r2, r3
 800845c:	1b58      	subs	r0, r3, r5
 800845e:	b007      	add	sp, #28
 8008460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008462:	7818      	ldrb	r0, [r3, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	7008      	strb	r0, [r1, #0]
 8008468:	3101      	adds	r1, #1
 800846a:	e7e9      	b.n	8008440 <__exponent+0x52>
 800846c:	2330      	movs	r3, #48	; 0x30
 800846e:	3430      	adds	r4, #48	; 0x30
 8008470:	70ab      	strb	r3, [r5, #2]
 8008472:	70ec      	strb	r4, [r5, #3]
 8008474:	1d2b      	adds	r3, r5, #4
 8008476:	e7f1      	b.n	800845c <__exponent+0x6e>

08008478 <_printf_float>:
 8008478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800847a:	b095      	sub	sp, #84	; 0x54
 800847c:	000c      	movs	r4, r1
 800847e:	9208      	str	r2, [sp, #32]
 8008480:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008482:	9309      	str	r3, [sp, #36]	; 0x24
 8008484:	0007      	movs	r7, r0
 8008486:	f000 fcd3 	bl	8008e30 <_localeconv_r>
 800848a:	6803      	ldr	r3, [r0, #0]
 800848c:	0018      	movs	r0, r3
 800848e:	930c      	str	r3, [sp, #48]	; 0x30
 8008490:	f7f7 fe36 	bl	8000100 <strlen>
 8008494:	2300      	movs	r3, #0
 8008496:	9312      	str	r3, [sp, #72]	; 0x48
 8008498:	7e23      	ldrb	r3, [r4, #24]
 800849a:	2207      	movs	r2, #7
 800849c:	930a      	str	r3, [sp, #40]	; 0x28
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	900d      	str	r0, [sp, #52]	; 0x34
 80084a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084a6:	682b      	ldr	r3, [r5, #0]
 80084a8:	05c9      	lsls	r1, r1, #23
 80084aa:	d547      	bpl.n	800853c <_printf_float+0xc4>
 80084ac:	189b      	adds	r3, r3, r2
 80084ae:	4393      	bics	r3, r2
 80084b0:	001a      	movs	r2, r3
 80084b2:	3208      	adds	r2, #8
 80084b4:	602a      	str	r2, [r5, #0]
 80084b6:	681e      	ldr	r6, [r3, #0]
 80084b8:	685d      	ldr	r5, [r3, #4]
 80084ba:	0032      	movs	r2, r6
 80084bc:	002b      	movs	r3, r5
 80084be:	64a2      	str	r2, [r4, #72]	; 0x48
 80084c0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80084c2:	2201      	movs	r2, #1
 80084c4:	006b      	lsls	r3, r5, #1
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	930e      	str	r3, [sp, #56]	; 0x38
 80084ca:	0030      	movs	r0, r6
 80084cc:	4bab      	ldr	r3, [pc, #684]	; (800877c <_printf_float+0x304>)
 80084ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80084d0:	4252      	negs	r2, r2
 80084d2:	f7fa f863 	bl	800259c <__aeabi_dcmpun>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d132      	bne.n	8008540 <_printf_float+0xc8>
 80084da:	2201      	movs	r2, #1
 80084dc:	0030      	movs	r0, r6
 80084de:	4ba7      	ldr	r3, [pc, #668]	; (800877c <_printf_float+0x304>)
 80084e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80084e2:	4252      	negs	r2, r2
 80084e4:	f7f7 ffbe 	bl	8000464 <__aeabi_dcmple>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d129      	bne.n	8008540 <_printf_float+0xc8>
 80084ec:	2200      	movs	r2, #0
 80084ee:	2300      	movs	r3, #0
 80084f0:	0030      	movs	r0, r6
 80084f2:	0029      	movs	r1, r5
 80084f4:	f7f7 ffac 	bl	8000450 <__aeabi_dcmplt>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d003      	beq.n	8008504 <_printf_float+0x8c>
 80084fc:	0023      	movs	r3, r4
 80084fe:	222d      	movs	r2, #45	; 0x2d
 8008500:	3343      	adds	r3, #67	; 0x43
 8008502:	701a      	strb	r2, [r3, #0]
 8008504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008506:	4d9e      	ldr	r5, [pc, #632]	; (8008780 <_printf_float+0x308>)
 8008508:	2b47      	cmp	r3, #71	; 0x47
 800850a:	d900      	bls.n	800850e <_printf_float+0x96>
 800850c:	4d9d      	ldr	r5, [pc, #628]	; (8008784 <_printf_float+0x30c>)
 800850e:	2303      	movs	r3, #3
 8008510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008512:	6123      	str	r3, [r4, #16]
 8008514:	3301      	adds	r3, #1
 8008516:	439a      	bics	r2, r3
 8008518:	2300      	movs	r3, #0
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	930b      	str	r3, [sp, #44]	; 0x2c
 800851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008520:	0021      	movs	r1, r4
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	0038      	movs	r0, r7
 8008526:	9b08      	ldr	r3, [sp, #32]
 8008528:	aa13      	add	r2, sp, #76	; 0x4c
 800852a:	f000 f9fb 	bl	8008924 <_printf_common>
 800852e:	3001      	adds	r0, #1
 8008530:	d000      	beq.n	8008534 <_printf_float+0xbc>
 8008532:	e0a3      	b.n	800867c <_printf_float+0x204>
 8008534:	2001      	movs	r0, #1
 8008536:	4240      	negs	r0, r0
 8008538:	b015      	add	sp, #84	; 0x54
 800853a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800853c:	3307      	adds	r3, #7
 800853e:	e7b6      	b.n	80084ae <_printf_float+0x36>
 8008540:	0032      	movs	r2, r6
 8008542:	002b      	movs	r3, r5
 8008544:	0030      	movs	r0, r6
 8008546:	0029      	movs	r1, r5
 8008548:	f7fa f828 	bl	800259c <__aeabi_dcmpun>
 800854c:	2800      	cmp	r0, #0
 800854e:	d00b      	beq.n	8008568 <_printf_float+0xf0>
 8008550:	2d00      	cmp	r5, #0
 8008552:	da03      	bge.n	800855c <_printf_float+0xe4>
 8008554:	0023      	movs	r3, r4
 8008556:	222d      	movs	r2, #45	; 0x2d
 8008558:	3343      	adds	r3, #67	; 0x43
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855e:	4d8a      	ldr	r5, [pc, #552]	; (8008788 <_printf_float+0x310>)
 8008560:	2b47      	cmp	r3, #71	; 0x47
 8008562:	d9d4      	bls.n	800850e <_printf_float+0x96>
 8008564:	4d89      	ldr	r5, [pc, #548]	; (800878c <_printf_float+0x314>)
 8008566:	e7d2      	b.n	800850e <_printf_float+0x96>
 8008568:	2220      	movs	r2, #32
 800856a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	4391      	bics	r1, r2
 8008570:	910e      	str	r1, [sp, #56]	; 0x38
 8008572:	1c5a      	adds	r2, r3, #1
 8008574:	d14a      	bne.n	800860c <_printf_float+0x194>
 8008576:	3307      	adds	r3, #7
 8008578:	6063      	str	r3, [r4, #4]
 800857a:	2380      	movs	r3, #128	; 0x80
 800857c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	4313      	orrs	r3, r2
 8008582:	2200      	movs	r2, #0
 8008584:	9206      	str	r2, [sp, #24]
 8008586:	aa12      	add	r2, sp, #72	; 0x48
 8008588:	9205      	str	r2, [sp, #20]
 800858a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	9204      	str	r2, [sp, #16]
 8008590:	aa11      	add	r2, sp, #68	; 0x44
 8008592:	9203      	str	r2, [sp, #12]
 8008594:	2223      	movs	r2, #35	; 0x23
 8008596:	a908      	add	r1, sp, #32
 8008598:	9301      	str	r3, [sp, #4]
 800859a:	6863      	ldr	r3, [r4, #4]
 800859c:	1852      	adds	r2, r2, r1
 800859e:	9202      	str	r2, [sp, #8]
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	0032      	movs	r2, r6
 80085a4:	002b      	movs	r3, r5
 80085a6:	0038      	movs	r0, r7
 80085a8:	f7ff febe 	bl	8008328 <__cvt>
 80085ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ae:	0005      	movs	r5, r0
 80085b0:	2b47      	cmp	r3, #71	; 0x47
 80085b2:	d109      	bne.n	80085c8 <_printf_float+0x150>
 80085b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085b6:	1cda      	adds	r2, r3, #3
 80085b8:	db02      	blt.n	80085c0 <_printf_float+0x148>
 80085ba:	6862      	ldr	r2, [r4, #4]
 80085bc:	4293      	cmp	r3, r2
 80085be:	dd49      	ble.n	8008654 <_printf_float+0x1dc>
 80085c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c2:	3b02      	subs	r3, #2
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	930a      	str	r3, [sp, #40]	; 0x28
 80085c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085cc:	2b65      	cmp	r3, #101	; 0x65
 80085ce:	d824      	bhi.n	800861a <_printf_float+0x1a2>
 80085d0:	0020      	movs	r0, r4
 80085d2:	001a      	movs	r2, r3
 80085d4:	3901      	subs	r1, #1
 80085d6:	3050      	adds	r0, #80	; 0x50
 80085d8:	9111      	str	r1, [sp, #68]	; 0x44
 80085da:	f7ff ff08 	bl	80083ee <__exponent>
 80085de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80085e2:	1813      	adds	r3, r2, r0
 80085e4:	6123      	str	r3, [r4, #16]
 80085e6:	2a01      	cmp	r2, #1
 80085e8:	dc02      	bgt.n	80085f0 <_printf_float+0x178>
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	07d2      	lsls	r2, r2, #31
 80085ee:	d501      	bpl.n	80085f4 <_printf_float+0x17c>
 80085f0:	3301      	adds	r3, #1
 80085f2:	6123      	str	r3, [r4, #16]
 80085f4:	2323      	movs	r3, #35	; 0x23
 80085f6:	aa08      	add	r2, sp, #32
 80085f8:	189b      	adds	r3, r3, r2
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d100      	bne.n	8008602 <_printf_float+0x18a>
 8008600:	e78d      	b.n	800851e <_printf_float+0xa6>
 8008602:	0023      	movs	r3, r4
 8008604:	222d      	movs	r2, #45	; 0x2d
 8008606:	3343      	adds	r3, #67	; 0x43
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	e788      	b.n	800851e <_printf_float+0xa6>
 800860c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800860e:	2a47      	cmp	r2, #71	; 0x47
 8008610:	d1b3      	bne.n	800857a <_printf_float+0x102>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1b1      	bne.n	800857a <_printf_float+0x102>
 8008616:	3301      	adds	r3, #1
 8008618:	e7ae      	b.n	8008578 <_printf_float+0x100>
 800861a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861c:	2b66      	cmp	r3, #102	; 0x66
 800861e:	d11b      	bne.n	8008658 <_printf_float+0x1e0>
 8008620:	6863      	ldr	r3, [r4, #4]
 8008622:	2900      	cmp	r1, #0
 8008624:	dd09      	ble.n	800863a <_printf_float+0x1c2>
 8008626:	6121      	str	r1, [r4, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d102      	bne.n	8008632 <_printf_float+0x1ba>
 800862c:	6822      	ldr	r2, [r4, #0]
 800862e:	07d2      	lsls	r2, r2, #31
 8008630:	d50b      	bpl.n	800864a <_printf_float+0x1d2>
 8008632:	3301      	adds	r3, #1
 8008634:	185b      	adds	r3, r3, r1
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	e007      	b.n	800864a <_printf_float+0x1d2>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d103      	bne.n	8008646 <_printf_float+0x1ce>
 800863e:	2201      	movs	r2, #1
 8008640:	6821      	ldr	r1, [r4, #0]
 8008642:	4211      	tst	r1, r2
 8008644:	d000      	beq.n	8008648 <_printf_float+0x1d0>
 8008646:	1c9a      	adds	r2, r3, #2
 8008648:	6122      	str	r2, [r4, #16]
 800864a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800864c:	65a3      	str	r3, [r4, #88]	; 0x58
 800864e:	2300      	movs	r3, #0
 8008650:	930b      	str	r3, [sp, #44]	; 0x2c
 8008652:	e7cf      	b.n	80085f4 <_printf_float+0x17c>
 8008654:	2367      	movs	r3, #103	; 0x67
 8008656:	930a      	str	r3, [sp, #40]	; 0x28
 8008658:	9911      	ldr	r1, [sp, #68]	; 0x44
 800865a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800865c:	4299      	cmp	r1, r3
 800865e:	db06      	blt.n	800866e <_printf_float+0x1f6>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	6121      	str	r1, [r4, #16]
 8008664:	07db      	lsls	r3, r3, #31
 8008666:	d5f0      	bpl.n	800864a <_printf_float+0x1d2>
 8008668:	3101      	adds	r1, #1
 800866a:	6121      	str	r1, [r4, #16]
 800866c:	e7ed      	b.n	800864a <_printf_float+0x1d2>
 800866e:	2201      	movs	r2, #1
 8008670:	2900      	cmp	r1, #0
 8008672:	dc01      	bgt.n	8008678 <_printf_float+0x200>
 8008674:	1892      	adds	r2, r2, r2
 8008676:	1a52      	subs	r2, r2, r1
 8008678:	189b      	adds	r3, r3, r2
 800867a:	e7dc      	b.n	8008636 <_printf_float+0x1be>
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	0553      	lsls	r3, r2, #21
 8008680:	d408      	bmi.n	8008694 <_printf_float+0x21c>
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	002a      	movs	r2, r5
 8008686:	0038      	movs	r0, r7
 8008688:	9908      	ldr	r1, [sp, #32]
 800868a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800868c:	47a8      	blx	r5
 800868e:	3001      	adds	r0, #1
 8008690:	d12a      	bne.n	80086e8 <_printf_float+0x270>
 8008692:	e74f      	b.n	8008534 <_printf_float+0xbc>
 8008694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008696:	2b65      	cmp	r3, #101	; 0x65
 8008698:	d800      	bhi.n	800869c <_printf_float+0x224>
 800869a:	e0ec      	b.n	8008876 <_printf_float+0x3fe>
 800869c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800869e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80086a0:	2200      	movs	r2, #0
 80086a2:	2300      	movs	r3, #0
 80086a4:	f7f7 fece 	bl	8000444 <__aeabi_dcmpeq>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d034      	beq.n	8008716 <_printf_float+0x29e>
 80086ac:	2301      	movs	r3, #1
 80086ae:	0038      	movs	r0, r7
 80086b0:	4a37      	ldr	r2, [pc, #220]	; (8008790 <_printf_float+0x318>)
 80086b2:	9908      	ldr	r1, [sp, #32]
 80086b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086b6:	47a8      	blx	r5
 80086b8:	3001      	adds	r0, #1
 80086ba:	d100      	bne.n	80086be <_printf_float+0x246>
 80086bc:	e73a      	b.n	8008534 <_printf_float+0xbc>
 80086be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086c2:	429a      	cmp	r2, r3
 80086c4:	db02      	blt.n	80086cc <_printf_float+0x254>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	07db      	lsls	r3, r3, #31
 80086ca:	d50d      	bpl.n	80086e8 <_printf_float+0x270>
 80086cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086ce:	0038      	movs	r0, r7
 80086d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086d4:	9908      	ldr	r1, [sp, #32]
 80086d6:	47a8      	blx	r5
 80086d8:	2500      	movs	r5, #0
 80086da:	3001      	adds	r0, #1
 80086dc:	d100      	bne.n	80086e0 <_printf_float+0x268>
 80086de:	e729      	b.n	8008534 <_printf_float+0xbc>
 80086e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086e2:	3b01      	subs	r3, #1
 80086e4:	42ab      	cmp	r3, r5
 80086e6:	dc0a      	bgt.n	80086fe <_printf_float+0x286>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	079b      	lsls	r3, r3, #30
 80086ec:	d500      	bpl.n	80086f0 <_printf_float+0x278>
 80086ee:	e116      	b.n	800891e <_printf_float+0x4a6>
 80086f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086f2:	68e0      	ldr	r0, [r4, #12]
 80086f4:	4298      	cmp	r0, r3
 80086f6:	db00      	blt.n	80086fa <_printf_float+0x282>
 80086f8:	e71e      	b.n	8008538 <_printf_float+0xc0>
 80086fa:	0018      	movs	r0, r3
 80086fc:	e71c      	b.n	8008538 <_printf_float+0xc0>
 80086fe:	0022      	movs	r2, r4
 8008700:	2301      	movs	r3, #1
 8008702:	0038      	movs	r0, r7
 8008704:	9908      	ldr	r1, [sp, #32]
 8008706:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008708:	321a      	adds	r2, #26
 800870a:	47b0      	blx	r6
 800870c:	3001      	adds	r0, #1
 800870e:	d100      	bne.n	8008712 <_printf_float+0x29a>
 8008710:	e710      	b.n	8008534 <_printf_float+0xbc>
 8008712:	3501      	adds	r5, #1
 8008714:	e7e4      	b.n	80086e0 <_printf_float+0x268>
 8008716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008718:	2b00      	cmp	r3, #0
 800871a:	dc3b      	bgt.n	8008794 <_printf_float+0x31c>
 800871c:	2301      	movs	r3, #1
 800871e:	0038      	movs	r0, r7
 8008720:	4a1b      	ldr	r2, [pc, #108]	; (8008790 <_printf_float+0x318>)
 8008722:	9908      	ldr	r1, [sp, #32]
 8008724:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008726:	47b0      	blx	r6
 8008728:	3001      	adds	r0, #1
 800872a:	d100      	bne.n	800872e <_printf_float+0x2b6>
 800872c:	e702      	b.n	8008534 <_printf_float+0xbc>
 800872e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008730:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008732:	4313      	orrs	r3, r2
 8008734:	d102      	bne.n	800873c <_printf_float+0x2c4>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	07db      	lsls	r3, r3, #31
 800873a:	d5d5      	bpl.n	80086e8 <_printf_float+0x270>
 800873c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800873e:	0038      	movs	r0, r7
 8008740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008742:	9908      	ldr	r1, [sp, #32]
 8008744:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008746:	47b0      	blx	r6
 8008748:	2300      	movs	r3, #0
 800874a:	3001      	adds	r0, #1
 800874c:	d100      	bne.n	8008750 <_printf_float+0x2d8>
 800874e:	e6f1      	b.n	8008534 <_printf_float+0xbc>
 8008750:	930a      	str	r3, [sp, #40]	; 0x28
 8008752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008756:	425b      	negs	r3, r3
 8008758:	4293      	cmp	r3, r2
 800875a:	dc01      	bgt.n	8008760 <_printf_float+0x2e8>
 800875c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800875e:	e791      	b.n	8008684 <_printf_float+0x20c>
 8008760:	0022      	movs	r2, r4
 8008762:	2301      	movs	r3, #1
 8008764:	0038      	movs	r0, r7
 8008766:	9908      	ldr	r1, [sp, #32]
 8008768:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800876a:	321a      	adds	r2, #26
 800876c:	47b0      	blx	r6
 800876e:	3001      	adds	r0, #1
 8008770:	d100      	bne.n	8008774 <_printf_float+0x2fc>
 8008772:	e6df      	b.n	8008534 <_printf_float+0xbc>
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	3301      	adds	r3, #1
 8008778:	e7ea      	b.n	8008750 <_printf_float+0x2d8>
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	7fefffff 	.word	0x7fefffff
 8008780:	0800cd88 	.word	0x0800cd88
 8008784:	0800cd8c 	.word	0x0800cd8c
 8008788:	0800cd90 	.word	0x0800cd90
 800878c:	0800cd94 	.word	0x0800cd94
 8008790:	0800cd98 	.word	0x0800cd98
 8008794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008796:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008798:	920a      	str	r2, [sp, #40]	; 0x28
 800879a:	429a      	cmp	r2, r3
 800879c:	dd00      	ble.n	80087a0 <_printf_float+0x328>
 800879e:	930a      	str	r3, [sp, #40]	; 0x28
 80087a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dc3d      	bgt.n	8008822 <_printf_float+0x3aa>
 80087a6:	2300      	movs	r3, #0
 80087a8:	930e      	str	r3, [sp, #56]	; 0x38
 80087aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ac:	43db      	mvns	r3, r3
 80087ae:	17db      	asrs	r3, r3, #31
 80087b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80087b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80087b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ba:	4013      	ands	r3, r2
 80087bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087c2:	4293      	cmp	r3, r2
 80087c4:	dc36      	bgt.n	8008834 <_printf_float+0x3bc>
 80087c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ca:	429a      	cmp	r2, r3
 80087cc:	db40      	blt.n	8008850 <_printf_float+0x3d8>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	07db      	lsls	r3, r3, #31
 80087d2:	d43d      	bmi.n	8008850 <_printf_float+0x3d8>
 80087d4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80087d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087da:	1af3      	subs	r3, r6, r3
 80087dc:	1ab6      	subs	r6, r6, r2
 80087de:	429e      	cmp	r6, r3
 80087e0:	dd00      	ble.n	80087e4 <_printf_float+0x36c>
 80087e2:	001e      	movs	r6, r3
 80087e4:	2e00      	cmp	r6, #0
 80087e6:	dc3c      	bgt.n	8008862 <_printf_float+0x3ea>
 80087e8:	2300      	movs	r3, #0
 80087ea:	930a      	str	r3, [sp, #40]	; 0x28
 80087ec:	43f3      	mvns	r3, r6
 80087ee:	17db      	asrs	r3, r3, #31
 80087f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80087f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087fa:	4032      	ands	r2, r6
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008800:	4293      	cmp	r3, r2
 8008802:	dc00      	bgt.n	8008806 <_printf_float+0x38e>
 8008804:	e770      	b.n	80086e8 <_printf_float+0x270>
 8008806:	0022      	movs	r2, r4
 8008808:	2301      	movs	r3, #1
 800880a:	0038      	movs	r0, r7
 800880c:	9908      	ldr	r1, [sp, #32]
 800880e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008810:	321a      	adds	r2, #26
 8008812:	47a8      	blx	r5
 8008814:	3001      	adds	r0, #1
 8008816:	d100      	bne.n	800881a <_printf_float+0x3a2>
 8008818:	e68c      	b.n	8008534 <_printf_float+0xbc>
 800881a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881c:	3301      	adds	r3, #1
 800881e:	930a      	str	r3, [sp, #40]	; 0x28
 8008820:	e7e7      	b.n	80087f2 <_printf_float+0x37a>
 8008822:	002a      	movs	r2, r5
 8008824:	0038      	movs	r0, r7
 8008826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008828:	9908      	ldr	r1, [sp, #32]
 800882a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800882c:	47b0      	blx	r6
 800882e:	3001      	adds	r0, #1
 8008830:	d1b9      	bne.n	80087a6 <_printf_float+0x32e>
 8008832:	e67f      	b.n	8008534 <_printf_float+0xbc>
 8008834:	0022      	movs	r2, r4
 8008836:	2301      	movs	r3, #1
 8008838:	0038      	movs	r0, r7
 800883a:	9908      	ldr	r1, [sp, #32]
 800883c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800883e:	321a      	adds	r2, #26
 8008840:	47b0      	blx	r6
 8008842:	3001      	adds	r0, #1
 8008844:	d100      	bne.n	8008848 <_printf_float+0x3d0>
 8008846:	e675      	b.n	8008534 <_printf_float+0xbc>
 8008848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800884a:	3301      	adds	r3, #1
 800884c:	930e      	str	r3, [sp, #56]	; 0x38
 800884e:	e7b0      	b.n	80087b2 <_printf_float+0x33a>
 8008850:	0038      	movs	r0, r7
 8008852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008856:	9908      	ldr	r1, [sp, #32]
 8008858:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800885a:	47b0      	blx	r6
 800885c:	3001      	adds	r0, #1
 800885e:	d1b9      	bne.n	80087d4 <_printf_float+0x35c>
 8008860:	e668      	b.n	8008534 <_printf_float+0xbc>
 8008862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008864:	0038      	movs	r0, r7
 8008866:	18ea      	adds	r2, r5, r3
 8008868:	9908      	ldr	r1, [sp, #32]
 800886a:	0033      	movs	r3, r6
 800886c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800886e:	47a8      	blx	r5
 8008870:	3001      	adds	r0, #1
 8008872:	d1b9      	bne.n	80087e8 <_printf_float+0x370>
 8008874:	e65e      	b.n	8008534 <_printf_float+0xbc>
 8008876:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008878:	2b01      	cmp	r3, #1
 800887a:	dc02      	bgt.n	8008882 <_printf_float+0x40a>
 800887c:	2301      	movs	r3, #1
 800887e:	421a      	tst	r2, r3
 8008880:	d03a      	beq.n	80088f8 <_printf_float+0x480>
 8008882:	2301      	movs	r3, #1
 8008884:	002a      	movs	r2, r5
 8008886:	0038      	movs	r0, r7
 8008888:	9908      	ldr	r1, [sp, #32]
 800888a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800888c:	47b0      	blx	r6
 800888e:	3001      	adds	r0, #1
 8008890:	d100      	bne.n	8008894 <_printf_float+0x41c>
 8008892:	e64f      	b.n	8008534 <_printf_float+0xbc>
 8008894:	0038      	movs	r0, r7
 8008896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800889a:	9908      	ldr	r1, [sp, #32]
 800889c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800889e:	47b0      	blx	r6
 80088a0:	3001      	adds	r0, #1
 80088a2:	d100      	bne.n	80088a6 <_printf_float+0x42e>
 80088a4:	e646      	b.n	8008534 <_printf_float+0xbc>
 80088a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80088a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80088aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088ac:	2200      	movs	r2, #0
 80088ae:	001e      	movs	r6, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	f7f7 fdc7 	bl	8000444 <__aeabi_dcmpeq>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d11c      	bne.n	80088f4 <_printf_float+0x47c>
 80088ba:	0033      	movs	r3, r6
 80088bc:	1c6a      	adds	r2, r5, #1
 80088be:	3b01      	subs	r3, #1
 80088c0:	0038      	movs	r0, r7
 80088c2:	9908      	ldr	r1, [sp, #32]
 80088c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80088c6:	47a8      	blx	r5
 80088c8:	3001      	adds	r0, #1
 80088ca:	d10f      	bne.n	80088ec <_printf_float+0x474>
 80088cc:	e632      	b.n	8008534 <_printf_float+0xbc>
 80088ce:	0022      	movs	r2, r4
 80088d0:	2301      	movs	r3, #1
 80088d2:	0038      	movs	r0, r7
 80088d4:	9908      	ldr	r1, [sp, #32]
 80088d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80088d8:	321a      	adds	r2, #26
 80088da:	47b0      	blx	r6
 80088dc:	3001      	adds	r0, #1
 80088de:	d100      	bne.n	80088e2 <_printf_float+0x46a>
 80088e0:	e628      	b.n	8008534 <_printf_float+0xbc>
 80088e2:	3501      	adds	r5, #1
 80088e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088e6:	3b01      	subs	r3, #1
 80088e8:	42ab      	cmp	r3, r5
 80088ea:	dcf0      	bgt.n	80088ce <_printf_float+0x456>
 80088ec:	0022      	movs	r2, r4
 80088ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088f0:	3250      	adds	r2, #80	; 0x50
 80088f2:	e6c8      	b.n	8008686 <_printf_float+0x20e>
 80088f4:	2500      	movs	r5, #0
 80088f6:	e7f5      	b.n	80088e4 <_printf_float+0x46c>
 80088f8:	002a      	movs	r2, r5
 80088fa:	e7e1      	b.n	80088c0 <_printf_float+0x448>
 80088fc:	0022      	movs	r2, r4
 80088fe:	2301      	movs	r3, #1
 8008900:	0038      	movs	r0, r7
 8008902:	9908      	ldr	r1, [sp, #32]
 8008904:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008906:	3219      	adds	r2, #25
 8008908:	47b0      	blx	r6
 800890a:	3001      	adds	r0, #1
 800890c:	d100      	bne.n	8008910 <_printf_float+0x498>
 800890e:	e611      	b.n	8008534 <_printf_float+0xbc>
 8008910:	3501      	adds	r5, #1
 8008912:	68e3      	ldr	r3, [r4, #12]
 8008914:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008916:	1a9b      	subs	r3, r3, r2
 8008918:	42ab      	cmp	r3, r5
 800891a:	dcef      	bgt.n	80088fc <_printf_float+0x484>
 800891c:	e6e8      	b.n	80086f0 <_printf_float+0x278>
 800891e:	2500      	movs	r5, #0
 8008920:	e7f7      	b.n	8008912 <_printf_float+0x49a>
 8008922:	46c0      	nop			; (mov r8, r8)

08008924 <_printf_common>:
 8008924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008926:	0016      	movs	r6, r2
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	688a      	ldr	r2, [r1, #8]
 800892c:	690b      	ldr	r3, [r1, #16]
 800892e:	000c      	movs	r4, r1
 8008930:	9000      	str	r0, [sp, #0]
 8008932:	4293      	cmp	r3, r2
 8008934:	da00      	bge.n	8008938 <_printf_common+0x14>
 8008936:	0013      	movs	r3, r2
 8008938:	0022      	movs	r2, r4
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	3243      	adds	r2, #67	; 0x43
 800893e:	7812      	ldrb	r2, [r2, #0]
 8008940:	2a00      	cmp	r2, #0
 8008942:	d001      	beq.n	8008948 <_printf_common+0x24>
 8008944:	3301      	adds	r3, #1
 8008946:	6033      	str	r3, [r6, #0]
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	069b      	lsls	r3, r3, #26
 800894c:	d502      	bpl.n	8008954 <_printf_common+0x30>
 800894e:	6833      	ldr	r3, [r6, #0]
 8008950:	3302      	adds	r3, #2
 8008952:	6033      	str	r3, [r6, #0]
 8008954:	6822      	ldr	r2, [r4, #0]
 8008956:	2306      	movs	r3, #6
 8008958:	0015      	movs	r5, r2
 800895a:	401d      	ands	r5, r3
 800895c:	421a      	tst	r2, r3
 800895e:	d027      	beq.n	80089b0 <_printf_common+0x8c>
 8008960:	0023      	movs	r3, r4
 8008962:	3343      	adds	r3, #67	; 0x43
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	1e5a      	subs	r2, r3, #1
 8008968:	4193      	sbcs	r3, r2
 800896a:	6822      	ldr	r2, [r4, #0]
 800896c:	0692      	lsls	r2, r2, #26
 800896e:	d430      	bmi.n	80089d2 <_printf_common+0xae>
 8008970:	0022      	movs	r2, r4
 8008972:	9901      	ldr	r1, [sp, #4]
 8008974:	9800      	ldr	r0, [sp, #0]
 8008976:	9d08      	ldr	r5, [sp, #32]
 8008978:	3243      	adds	r2, #67	; 0x43
 800897a:	47a8      	blx	r5
 800897c:	3001      	adds	r0, #1
 800897e:	d025      	beq.n	80089cc <_printf_common+0xa8>
 8008980:	2206      	movs	r2, #6
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	2500      	movs	r5, #0
 8008986:	4013      	ands	r3, r2
 8008988:	2b04      	cmp	r3, #4
 800898a:	d105      	bne.n	8008998 <_printf_common+0x74>
 800898c:	6833      	ldr	r3, [r6, #0]
 800898e:	68e5      	ldr	r5, [r4, #12]
 8008990:	1aed      	subs	r5, r5, r3
 8008992:	43eb      	mvns	r3, r5
 8008994:	17db      	asrs	r3, r3, #31
 8008996:	401d      	ands	r5, r3
 8008998:	68a3      	ldr	r3, [r4, #8]
 800899a:	6922      	ldr	r2, [r4, #16]
 800899c:	4293      	cmp	r3, r2
 800899e:	dd01      	ble.n	80089a4 <_printf_common+0x80>
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	18ed      	adds	r5, r5, r3
 80089a4:	2600      	movs	r6, #0
 80089a6:	42b5      	cmp	r5, r6
 80089a8:	d120      	bne.n	80089ec <_printf_common+0xc8>
 80089aa:	2000      	movs	r0, #0
 80089ac:	e010      	b.n	80089d0 <_printf_common+0xac>
 80089ae:	3501      	adds	r5, #1
 80089b0:	68e3      	ldr	r3, [r4, #12]
 80089b2:	6832      	ldr	r2, [r6, #0]
 80089b4:	1a9b      	subs	r3, r3, r2
 80089b6:	42ab      	cmp	r3, r5
 80089b8:	ddd2      	ble.n	8008960 <_printf_common+0x3c>
 80089ba:	0022      	movs	r2, r4
 80089bc:	2301      	movs	r3, #1
 80089be:	9901      	ldr	r1, [sp, #4]
 80089c0:	9800      	ldr	r0, [sp, #0]
 80089c2:	9f08      	ldr	r7, [sp, #32]
 80089c4:	3219      	adds	r2, #25
 80089c6:	47b8      	blx	r7
 80089c8:	3001      	adds	r0, #1
 80089ca:	d1f0      	bne.n	80089ae <_printf_common+0x8a>
 80089cc:	2001      	movs	r0, #1
 80089ce:	4240      	negs	r0, r0
 80089d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089d2:	2030      	movs	r0, #48	; 0x30
 80089d4:	18e1      	adds	r1, r4, r3
 80089d6:	3143      	adds	r1, #67	; 0x43
 80089d8:	7008      	strb	r0, [r1, #0]
 80089da:	0021      	movs	r1, r4
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	3145      	adds	r1, #69	; 0x45
 80089e0:	7809      	ldrb	r1, [r1, #0]
 80089e2:	18a2      	adds	r2, r4, r2
 80089e4:	3243      	adds	r2, #67	; 0x43
 80089e6:	3302      	adds	r3, #2
 80089e8:	7011      	strb	r1, [r2, #0]
 80089ea:	e7c1      	b.n	8008970 <_printf_common+0x4c>
 80089ec:	0022      	movs	r2, r4
 80089ee:	2301      	movs	r3, #1
 80089f0:	9901      	ldr	r1, [sp, #4]
 80089f2:	9800      	ldr	r0, [sp, #0]
 80089f4:	9f08      	ldr	r7, [sp, #32]
 80089f6:	321a      	adds	r2, #26
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	d0e6      	beq.n	80089cc <_printf_common+0xa8>
 80089fe:	3601      	adds	r6, #1
 8008a00:	e7d1      	b.n	80089a6 <_printf_common+0x82>
	...

08008a04 <_printf_i>:
 8008a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a06:	b08b      	sub	sp, #44	; 0x2c
 8008a08:	9206      	str	r2, [sp, #24]
 8008a0a:	000a      	movs	r2, r1
 8008a0c:	3243      	adds	r2, #67	; 0x43
 8008a0e:	9307      	str	r3, [sp, #28]
 8008a10:	9005      	str	r0, [sp, #20]
 8008a12:	9204      	str	r2, [sp, #16]
 8008a14:	7e0a      	ldrb	r2, [r1, #24]
 8008a16:	000c      	movs	r4, r1
 8008a18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a1a:	2a78      	cmp	r2, #120	; 0x78
 8008a1c:	d809      	bhi.n	8008a32 <_printf_i+0x2e>
 8008a1e:	2a62      	cmp	r2, #98	; 0x62
 8008a20:	d80b      	bhi.n	8008a3a <_printf_i+0x36>
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	d100      	bne.n	8008a28 <_printf_i+0x24>
 8008a26:	e0be      	b.n	8008ba6 <_printf_i+0x1a2>
 8008a28:	497c      	ldr	r1, [pc, #496]	; (8008c1c <_printf_i+0x218>)
 8008a2a:	9103      	str	r1, [sp, #12]
 8008a2c:	2a58      	cmp	r2, #88	; 0x58
 8008a2e:	d100      	bne.n	8008a32 <_printf_i+0x2e>
 8008a30:	e093      	b.n	8008b5a <_printf_i+0x156>
 8008a32:	0026      	movs	r6, r4
 8008a34:	3642      	adds	r6, #66	; 0x42
 8008a36:	7032      	strb	r2, [r6, #0]
 8008a38:	e022      	b.n	8008a80 <_printf_i+0x7c>
 8008a3a:	0010      	movs	r0, r2
 8008a3c:	3863      	subs	r0, #99	; 0x63
 8008a3e:	2815      	cmp	r0, #21
 8008a40:	d8f7      	bhi.n	8008a32 <_printf_i+0x2e>
 8008a42:	f7f7 fb6f 	bl	8000124 <__gnu_thumb1_case_shi>
 8008a46:	0016      	.short	0x0016
 8008a48:	fff6001f 	.word	0xfff6001f
 8008a4c:	fff6fff6 	.word	0xfff6fff6
 8008a50:	001ffff6 	.word	0x001ffff6
 8008a54:	fff6fff6 	.word	0xfff6fff6
 8008a58:	fff6fff6 	.word	0xfff6fff6
 8008a5c:	003600a3 	.word	0x003600a3
 8008a60:	fff60083 	.word	0xfff60083
 8008a64:	00b4fff6 	.word	0x00b4fff6
 8008a68:	0036fff6 	.word	0x0036fff6
 8008a6c:	fff6fff6 	.word	0xfff6fff6
 8008a70:	0087      	.short	0x0087
 8008a72:	0026      	movs	r6, r4
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	3642      	adds	r6, #66	; 0x42
 8008a78:	1d11      	adds	r1, r2, #4
 8008a7a:	6019      	str	r1, [r3, #0]
 8008a7c:	6813      	ldr	r3, [r2, #0]
 8008a7e:	7033      	strb	r3, [r6, #0]
 8008a80:	2301      	movs	r3, #1
 8008a82:	e0a2      	b.n	8008bca <_printf_i+0x1c6>
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	6809      	ldr	r1, [r1, #0]
 8008a88:	1d02      	adds	r2, r0, #4
 8008a8a:	060d      	lsls	r5, r1, #24
 8008a8c:	d50b      	bpl.n	8008aa6 <_printf_i+0xa2>
 8008a8e:	6805      	ldr	r5, [r0, #0]
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	da03      	bge.n	8008a9e <_printf_i+0x9a>
 8008a96:	232d      	movs	r3, #45	; 0x2d
 8008a98:	9a04      	ldr	r2, [sp, #16]
 8008a9a:	426d      	negs	r5, r5
 8008a9c:	7013      	strb	r3, [r2, #0]
 8008a9e:	4b5f      	ldr	r3, [pc, #380]	; (8008c1c <_printf_i+0x218>)
 8008aa0:	270a      	movs	r7, #10
 8008aa2:	9303      	str	r3, [sp, #12]
 8008aa4:	e01b      	b.n	8008ade <_printf_i+0xda>
 8008aa6:	6805      	ldr	r5, [r0, #0]
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	0649      	lsls	r1, r1, #25
 8008aac:	d5f1      	bpl.n	8008a92 <_printf_i+0x8e>
 8008aae:	b22d      	sxth	r5, r5
 8008ab0:	e7ef      	b.n	8008a92 <_printf_i+0x8e>
 8008ab2:	680d      	ldr	r5, [r1, #0]
 8008ab4:	6819      	ldr	r1, [r3, #0]
 8008ab6:	1d08      	adds	r0, r1, #4
 8008ab8:	6018      	str	r0, [r3, #0]
 8008aba:	062e      	lsls	r6, r5, #24
 8008abc:	d501      	bpl.n	8008ac2 <_printf_i+0xbe>
 8008abe:	680d      	ldr	r5, [r1, #0]
 8008ac0:	e003      	b.n	8008aca <_printf_i+0xc6>
 8008ac2:	066d      	lsls	r5, r5, #25
 8008ac4:	d5fb      	bpl.n	8008abe <_printf_i+0xba>
 8008ac6:	680d      	ldr	r5, [r1, #0]
 8008ac8:	b2ad      	uxth	r5, r5
 8008aca:	4b54      	ldr	r3, [pc, #336]	; (8008c1c <_printf_i+0x218>)
 8008acc:	2708      	movs	r7, #8
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	2a6f      	cmp	r2, #111	; 0x6f
 8008ad2:	d000      	beq.n	8008ad6 <_printf_i+0xd2>
 8008ad4:	3702      	adds	r7, #2
 8008ad6:	0023      	movs	r3, r4
 8008ad8:	2200      	movs	r2, #0
 8008ada:	3343      	adds	r3, #67	; 0x43
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	6863      	ldr	r3, [r4, #4]
 8008ae0:	60a3      	str	r3, [r4, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	db03      	blt.n	8008aee <_printf_i+0xea>
 8008ae6:	2104      	movs	r1, #4
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	438a      	bics	r2, r1
 8008aec:	6022      	str	r2, [r4, #0]
 8008aee:	2d00      	cmp	r5, #0
 8008af0:	d102      	bne.n	8008af8 <_printf_i+0xf4>
 8008af2:	9e04      	ldr	r6, [sp, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00c      	beq.n	8008b12 <_printf_i+0x10e>
 8008af8:	9e04      	ldr	r6, [sp, #16]
 8008afa:	0028      	movs	r0, r5
 8008afc:	0039      	movs	r1, r7
 8008afe:	f7f7 fba1 	bl	8000244 <__aeabi_uidivmod>
 8008b02:	9b03      	ldr	r3, [sp, #12]
 8008b04:	3e01      	subs	r6, #1
 8008b06:	5c5b      	ldrb	r3, [r3, r1]
 8008b08:	7033      	strb	r3, [r6, #0]
 8008b0a:	002b      	movs	r3, r5
 8008b0c:	0005      	movs	r5, r0
 8008b0e:	429f      	cmp	r7, r3
 8008b10:	d9f3      	bls.n	8008afa <_printf_i+0xf6>
 8008b12:	2f08      	cmp	r7, #8
 8008b14:	d109      	bne.n	8008b2a <_printf_i+0x126>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	07db      	lsls	r3, r3, #31
 8008b1a:	d506      	bpl.n	8008b2a <_printf_i+0x126>
 8008b1c:	6862      	ldr	r2, [r4, #4]
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	dc02      	bgt.n	8008b2a <_printf_i+0x126>
 8008b24:	2330      	movs	r3, #48	; 0x30
 8008b26:	3e01      	subs	r6, #1
 8008b28:	7033      	strb	r3, [r6, #0]
 8008b2a:	9b04      	ldr	r3, [sp, #16]
 8008b2c:	1b9b      	subs	r3, r3, r6
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	9b07      	ldr	r3, [sp, #28]
 8008b32:	0021      	movs	r1, r4
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	9805      	ldr	r0, [sp, #20]
 8008b38:	9b06      	ldr	r3, [sp, #24]
 8008b3a:	aa09      	add	r2, sp, #36	; 0x24
 8008b3c:	f7ff fef2 	bl	8008924 <_printf_common>
 8008b40:	3001      	adds	r0, #1
 8008b42:	d147      	bne.n	8008bd4 <_printf_i+0x1d0>
 8008b44:	2001      	movs	r0, #1
 8008b46:	4240      	negs	r0, r0
 8008b48:	b00b      	add	sp, #44	; 0x2c
 8008b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	6809      	ldr	r1, [r1, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	6022      	str	r2, [r4, #0]
 8008b54:	2278      	movs	r2, #120	; 0x78
 8008b56:	4932      	ldr	r1, [pc, #200]	; (8008c20 <_printf_i+0x21c>)
 8008b58:	9103      	str	r1, [sp, #12]
 8008b5a:	0021      	movs	r1, r4
 8008b5c:	3145      	adds	r1, #69	; 0x45
 8008b5e:	700a      	strb	r2, [r1, #0]
 8008b60:	6819      	ldr	r1, [r3, #0]
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	c920      	ldmia	r1!, {r5}
 8008b66:	0610      	lsls	r0, r2, #24
 8008b68:	d402      	bmi.n	8008b70 <_printf_i+0x16c>
 8008b6a:	0650      	lsls	r0, r2, #25
 8008b6c:	d500      	bpl.n	8008b70 <_printf_i+0x16c>
 8008b6e:	b2ad      	uxth	r5, r5
 8008b70:	6019      	str	r1, [r3, #0]
 8008b72:	07d3      	lsls	r3, r2, #31
 8008b74:	d502      	bpl.n	8008b7c <_printf_i+0x178>
 8008b76:	2320      	movs	r3, #32
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	2710      	movs	r7, #16
 8008b7e:	2d00      	cmp	r5, #0
 8008b80:	d1a9      	bne.n	8008ad6 <_printf_i+0xd2>
 8008b82:	2220      	movs	r2, #32
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	4393      	bics	r3, r2
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	e7a4      	b.n	8008ad6 <_printf_i+0xd2>
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	680d      	ldr	r5, [r1, #0]
 8008b90:	1d10      	adds	r0, r2, #4
 8008b92:	6949      	ldr	r1, [r1, #20]
 8008b94:	6018      	str	r0, [r3, #0]
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	062e      	lsls	r6, r5, #24
 8008b9a:	d501      	bpl.n	8008ba0 <_printf_i+0x19c>
 8008b9c:	6019      	str	r1, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <_printf_i+0x1a2>
 8008ba0:	066d      	lsls	r5, r5, #25
 8008ba2:	d5fb      	bpl.n	8008b9c <_printf_i+0x198>
 8008ba4:	8019      	strh	r1, [r3, #0]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9e04      	ldr	r6, [sp, #16]
 8008baa:	6123      	str	r3, [r4, #16]
 8008bac:	e7c0      	b.n	8008b30 <_printf_i+0x12c>
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	1d11      	adds	r1, r2, #4
 8008bb2:	6019      	str	r1, [r3, #0]
 8008bb4:	6816      	ldr	r6, [r2, #0]
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	0030      	movs	r0, r6
 8008bba:	6862      	ldr	r2, [r4, #4]
 8008bbc:	f000 f9b6 	bl	8008f2c <memchr>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d001      	beq.n	8008bc8 <_printf_i+0x1c4>
 8008bc4:	1b80      	subs	r0, r0, r6
 8008bc6:	6060      	str	r0, [r4, #4]
 8008bc8:	6863      	ldr	r3, [r4, #4]
 8008bca:	6123      	str	r3, [r4, #16]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9a04      	ldr	r2, [sp, #16]
 8008bd0:	7013      	strb	r3, [r2, #0]
 8008bd2:	e7ad      	b.n	8008b30 <_printf_i+0x12c>
 8008bd4:	0032      	movs	r2, r6
 8008bd6:	6923      	ldr	r3, [r4, #16]
 8008bd8:	9906      	ldr	r1, [sp, #24]
 8008bda:	9805      	ldr	r0, [sp, #20]
 8008bdc:	9d07      	ldr	r5, [sp, #28]
 8008bde:	47a8      	blx	r5
 8008be0:	3001      	adds	r0, #1
 8008be2:	d0af      	beq.n	8008b44 <_printf_i+0x140>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	079b      	lsls	r3, r3, #30
 8008be8:	d415      	bmi.n	8008c16 <_printf_i+0x212>
 8008bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bec:	68e0      	ldr	r0, [r4, #12]
 8008bee:	4298      	cmp	r0, r3
 8008bf0:	daaa      	bge.n	8008b48 <_printf_i+0x144>
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	e7a8      	b.n	8008b48 <_printf_i+0x144>
 8008bf6:	0022      	movs	r2, r4
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	9906      	ldr	r1, [sp, #24]
 8008bfc:	9805      	ldr	r0, [sp, #20]
 8008bfe:	9e07      	ldr	r6, [sp, #28]
 8008c00:	3219      	adds	r2, #25
 8008c02:	47b0      	blx	r6
 8008c04:	3001      	adds	r0, #1
 8008c06:	d09d      	beq.n	8008b44 <_printf_i+0x140>
 8008c08:	3501      	adds	r5, #1
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	42ab      	cmp	r3, r5
 8008c12:	dcf0      	bgt.n	8008bf6 <_printf_i+0x1f2>
 8008c14:	e7e9      	b.n	8008bea <_printf_i+0x1e6>
 8008c16:	2500      	movs	r5, #0
 8008c18:	e7f7      	b.n	8008c0a <_printf_i+0x206>
 8008c1a:	46c0      	nop			; (mov r8, r8)
 8008c1c:	0800cd9a 	.word	0x0800cd9a
 8008c20:	0800cdab 	.word	0x0800cdab

08008c24 <std>:
 8008c24:	2300      	movs	r3, #0
 8008c26:	b510      	push	{r4, lr}
 8008c28:	0004      	movs	r4, r0
 8008c2a:	6003      	str	r3, [r0, #0]
 8008c2c:	6043      	str	r3, [r0, #4]
 8008c2e:	6083      	str	r3, [r0, #8]
 8008c30:	8181      	strh	r1, [r0, #12]
 8008c32:	6643      	str	r3, [r0, #100]	; 0x64
 8008c34:	0019      	movs	r1, r3
 8008c36:	81c2      	strh	r2, [r0, #14]
 8008c38:	6103      	str	r3, [r0, #16]
 8008c3a:	6143      	str	r3, [r0, #20]
 8008c3c:	6183      	str	r3, [r0, #24]
 8008c3e:	2208      	movs	r2, #8
 8008c40:	305c      	adds	r0, #92	; 0x5c
 8008c42:	f000 f8ed 	bl	8008e20 <memset>
 8008c46:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <std+0x38>)
 8008c48:	6224      	str	r4, [r4, #32]
 8008c4a:	6263      	str	r3, [r4, #36]	; 0x24
 8008c4c:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <std+0x3c>)
 8008c4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <std+0x40>)
 8008c52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c54:	4b04      	ldr	r3, [pc, #16]	; (8008c68 <std+0x44>)
 8008c56:	6323      	str	r3, [r4, #48]	; 0x30
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	08008d89 	.word	0x08008d89
 8008c60:	08008db1 	.word	0x08008db1
 8008c64:	08008de9 	.word	0x08008de9
 8008c68:	08008e15 	.word	0x08008e15

08008c6c <stdio_exit_handler>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	4a03      	ldr	r2, [pc, #12]	; (8008c7c <stdio_exit_handler+0x10>)
 8008c70:	4903      	ldr	r1, [pc, #12]	; (8008c80 <stdio_exit_handler+0x14>)
 8008c72:	4804      	ldr	r0, [pc, #16]	; (8008c84 <stdio_exit_handler+0x18>)
 8008c74:	f000 f86c 	bl	8008d50 <_fwalk_sglue>
 8008c78:	bd10      	pop	{r4, pc}
 8008c7a:	46c0      	nop			; (mov r8, r8)
 8008c7c:	20000058 	.word	0x20000058
 8008c80:	0800a6e9 	.word	0x0800a6e9
 8008c84:	20000064 	.word	0x20000064

08008c88 <cleanup_stdio>:
 8008c88:	6841      	ldr	r1, [r0, #4]
 8008c8a:	4b0b      	ldr	r3, [pc, #44]	; (8008cb8 <cleanup_stdio+0x30>)
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	0004      	movs	r4, r0
 8008c90:	4299      	cmp	r1, r3
 8008c92:	d001      	beq.n	8008c98 <cleanup_stdio+0x10>
 8008c94:	f001 fd28 	bl	800a6e8 <_fflush_r>
 8008c98:	68a1      	ldr	r1, [r4, #8]
 8008c9a:	4b08      	ldr	r3, [pc, #32]	; (8008cbc <cleanup_stdio+0x34>)
 8008c9c:	4299      	cmp	r1, r3
 8008c9e:	d002      	beq.n	8008ca6 <cleanup_stdio+0x1e>
 8008ca0:	0020      	movs	r0, r4
 8008ca2:	f001 fd21 	bl	800a6e8 <_fflush_r>
 8008ca6:	68e1      	ldr	r1, [r4, #12]
 8008ca8:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <cleanup_stdio+0x38>)
 8008caa:	4299      	cmp	r1, r3
 8008cac:	d002      	beq.n	8008cb4 <cleanup_stdio+0x2c>
 8008cae:	0020      	movs	r0, r4
 8008cb0:	f001 fd1a 	bl	800a6e8 <_fflush_r>
 8008cb4:	bd10      	pop	{r4, pc}
 8008cb6:	46c0      	nop			; (mov r8, r8)
 8008cb8:	20000e60 	.word	0x20000e60
 8008cbc:	20000ec8 	.word	0x20000ec8
 8008cc0:	20000f30 	.word	0x20000f30

08008cc4 <global_stdio_init.part.0>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	4b09      	ldr	r3, [pc, #36]	; (8008cec <global_stdio_init.part.0+0x28>)
 8008cc8:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <global_stdio_init.part.0+0x2c>)
 8008cca:	2104      	movs	r1, #4
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	4809      	ldr	r0, [pc, #36]	; (8008cf4 <global_stdio_init.part.0+0x30>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f7ff ffa7 	bl	8008c24 <std>
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	2109      	movs	r1, #9
 8008cda:	4807      	ldr	r0, [pc, #28]	; (8008cf8 <global_stdio_init.part.0+0x34>)
 8008cdc:	f7ff ffa2 	bl	8008c24 <std>
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	2112      	movs	r1, #18
 8008ce4:	4805      	ldr	r0, [pc, #20]	; (8008cfc <global_stdio_init.part.0+0x38>)
 8008ce6:	f7ff ff9d 	bl	8008c24 <std>
 8008cea:	bd10      	pop	{r4, pc}
 8008cec:	20000f98 	.word	0x20000f98
 8008cf0:	08008c6d 	.word	0x08008c6d
 8008cf4:	20000e60 	.word	0x20000e60
 8008cf8:	20000ec8 	.word	0x20000ec8
 8008cfc:	20000f30 	.word	0x20000f30

08008d00 <__sfp_lock_acquire>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	4802      	ldr	r0, [pc, #8]	; (8008d0c <__sfp_lock_acquire+0xc>)
 8008d04:	f000 f910 	bl	8008f28 <__retarget_lock_acquire_recursive>
 8008d08:	bd10      	pop	{r4, pc}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	20000fa1 	.word	0x20000fa1

08008d10 <__sfp_lock_release>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	4802      	ldr	r0, [pc, #8]	; (8008d1c <__sfp_lock_release+0xc>)
 8008d14:	f000 f909 	bl	8008f2a <__retarget_lock_release_recursive>
 8008d18:	bd10      	pop	{r4, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	20000fa1 	.word	0x20000fa1

08008d20 <__sinit>:
 8008d20:	b510      	push	{r4, lr}
 8008d22:	0004      	movs	r4, r0
 8008d24:	f7ff ffec 	bl	8008d00 <__sfp_lock_acquire>
 8008d28:	6a23      	ldr	r3, [r4, #32]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <__sinit+0x14>
 8008d2e:	f7ff ffef 	bl	8008d10 <__sfp_lock_release>
 8008d32:	bd10      	pop	{r4, pc}
 8008d34:	4b04      	ldr	r3, [pc, #16]	; (8008d48 <__sinit+0x28>)
 8008d36:	6223      	str	r3, [r4, #32]
 8008d38:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <__sinit+0x2c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1f6      	bne.n	8008d2e <__sinit+0xe>
 8008d40:	f7ff ffc0 	bl	8008cc4 <global_stdio_init.part.0>
 8008d44:	e7f3      	b.n	8008d2e <__sinit+0xe>
 8008d46:	46c0      	nop			; (mov r8, r8)
 8008d48:	08008c89 	.word	0x08008c89
 8008d4c:	20000f98 	.word	0x20000f98

08008d50 <_fwalk_sglue>:
 8008d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d52:	0014      	movs	r4, r2
 8008d54:	2600      	movs	r6, #0
 8008d56:	9000      	str	r0, [sp, #0]
 8008d58:	9101      	str	r1, [sp, #4]
 8008d5a:	68a5      	ldr	r5, [r4, #8]
 8008d5c:	6867      	ldr	r7, [r4, #4]
 8008d5e:	3f01      	subs	r7, #1
 8008d60:	d504      	bpl.n	8008d6c <_fwalk_sglue+0x1c>
 8008d62:	6824      	ldr	r4, [r4, #0]
 8008d64:	2c00      	cmp	r4, #0
 8008d66:	d1f8      	bne.n	8008d5a <_fwalk_sglue+0xa>
 8008d68:	0030      	movs	r0, r6
 8008d6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d6c:	89ab      	ldrh	r3, [r5, #12]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d908      	bls.n	8008d84 <_fwalk_sglue+0x34>
 8008d72:	220e      	movs	r2, #14
 8008d74:	5eab      	ldrsh	r3, [r5, r2]
 8008d76:	3301      	adds	r3, #1
 8008d78:	d004      	beq.n	8008d84 <_fwalk_sglue+0x34>
 8008d7a:	0029      	movs	r1, r5
 8008d7c:	9800      	ldr	r0, [sp, #0]
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	4798      	blx	r3
 8008d82:	4306      	orrs	r6, r0
 8008d84:	3568      	adds	r5, #104	; 0x68
 8008d86:	e7ea      	b.n	8008d5e <_fwalk_sglue+0xe>

08008d88 <__sread>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	000c      	movs	r4, r1
 8008d8c:	250e      	movs	r5, #14
 8008d8e:	5f49      	ldrsh	r1, [r1, r5]
 8008d90:	f000 f878 	bl	8008e84 <_read_r>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	db03      	blt.n	8008da0 <__sread+0x18>
 8008d98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008d9a:	181b      	adds	r3, r3, r0
 8008d9c:	6563      	str	r3, [r4, #84]	; 0x54
 8008d9e:	bd70      	pop	{r4, r5, r6, pc}
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	4a02      	ldr	r2, [pc, #8]	; (8008dac <__sread+0x24>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	81a3      	strh	r3, [r4, #12]
 8008da8:	e7f9      	b.n	8008d9e <__sread+0x16>
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	ffffefff 	.word	0xffffefff

08008db0 <__swrite>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	001f      	movs	r7, r3
 8008db4:	898b      	ldrh	r3, [r1, #12]
 8008db6:	0005      	movs	r5, r0
 8008db8:	000c      	movs	r4, r1
 8008dba:	0016      	movs	r6, r2
 8008dbc:	05db      	lsls	r3, r3, #23
 8008dbe:	d505      	bpl.n	8008dcc <__swrite+0x1c>
 8008dc0:	230e      	movs	r3, #14
 8008dc2:	5ec9      	ldrsh	r1, [r1, r3]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	f000 f848 	bl	8008e5c <_lseek_r>
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	4a05      	ldr	r2, [pc, #20]	; (8008de4 <__swrite+0x34>)
 8008dd0:	0028      	movs	r0, r5
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	0032      	movs	r2, r6
 8008dd8:	230e      	movs	r3, #14
 8008dda:	5ee1      	ldrsh	r1, [r4, r3]
 8008ddc:	003b      	movs	r3, r7
 8008dde:	f000 f865 	bl	8008eac <_write_r>
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008de4:	ffffefff 	.word	0xffffefff

08008de8 <__sseek>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	000c      	movs	r4, r1
 8008dec:	250e      	movs	r5, #14
 8008dee:	5f49      	ldrsh	r1, [r1, r5]
 8008df0:	f000 f834 	bl	8008e5c <_lseek_r>
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	1c42      	adds	r2, r0, #1
 8008df8:	d103      	bne.n	8008e02 <__sseek+0x1a>
 8008dfa:	4a05      	ldr	r2, [pc, #20]	; (8008e10 <__sseek+0x28>)
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	bd70      	pop	{r4, r5, r6, pc}
 8008e02:	2280      	movs	r2, #128	; 0x80
 8008e04:	0152      	lsls	r2, r2, #5
 8008e06:	4313      	orrs	r3, r2
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008e0c:	e7f8      	b.n	8008e00 <__sseek+0x18>
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	ffffefff 	.word	0xffffefff

08008e14 <__sclose>:
 8008e14:	b510      	push	{r4, lr}
 8008e16:	230e      	movs	r3, #14
 8008e18:	5ec9      	ldrsh	r1, [r1, r3]
 8008e1a:	f000 f80d 	bl	8008e38 <_close_r>
 8008e1e:	bd10      	pop	{r4, pc}

08008e20 <memset>:
 8008e20:	0003      	movs	r3, r0
 8008e22:	1882      	adds	r2, r0, r2
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d100      	bne.n	8008e2a <memset+0xa>
 8008e28:	4770      	bx	lr
 8008e2a:	7019      	strb	r1, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	e7f9      	b.n	8008e24 <memset+0x4>

08008e30 <_localeconv_r>:
 8008e30:	4800      	ldr	r0, [pc, #0]	; (8008e34 <_localeconv_r+0x4>)
 8008e32:	4770      	bx	lr
 8008e34:	200001a4 	.word	0x200001a4

08008e38 <_close_r>:
 8008e38:	2300      	movs	r3, #0
 8008e3a:	b570      	push	{r4, r5, r6, lr}
 8008e3c:	4d06      	ldr	r5, [pc, #24]	; (8008e58 <_close_r+0x20>)
 8008e3e:	0004      	movs	r4, r0
 8008e40:	0008      	movs	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7fb f80d 	bl	8003e62 <_close>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d103      	bne.n	8008e54 <_close_r+0x1c>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d000      	beq.n	8008e54 <_close_r+0x1c>
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	bd70      	pop	{r4, r5, r6, pc}
 8008e56:	46c0      	nop			; (mov r8, r8)
 8008e58:	20000f9c 	.word	0x20000f9c

08008e5c <_lseek_r>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	0004      	movs	r4, r0
 8008e60:	0008      	movs	r0, r1
 8008e62:	0011      	movs	r1, r2
 8008e64:	001a      	movs	r2, r3
 8008e66:	2300      	movs	r3, #0
 8008e68:	4d05      	ldr	r5, [pc, #20]	; (8008e80 <_lseek_r+0x24>)
 8008e6a:	602b      	str	r3, [r5, #0]
 8008e6c:	f7fb f81a 	bl	8003ea4 <_lseek>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d103      	bne.n	8008e7c <_lseek_r+0x20>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d000      	beq.n	8008e7c <_lseek_r+0x20>
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	bd70      	pop	{r4, r5, r6, pc}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	20000f9c 	.word	0x20000f9c

08008e84 <_read_r>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	0004      	movs	r4, r0
 8008e88:	0008      	movs	r0, r1
 8008e8a:	0011      	movs	r1, r2
 8008e8c:	001a      	movs	r2, r3
 8008e8e:	2300      	movs	r3, #0
 8008e90:	4d05      	ldr	r5, [pc, #20]	; (8008ea8 <_read_r+0x24>)
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	f7fa ffac 	bl	8003df0 <_read>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d103      	bne.n	8008ea4 <_read_r+0x20>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d000      	beq.n	8008ea4 <_read_r+0x20>
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	bd70      	pop	{r4, r5, r6, pc}
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	20000f9c 	.word	0x20000f9c

08008eac <_write_r>:
 8008eac:	b570      	push	{r4, r5, r6, lr}
 8008eae:	0004      	movs	r4, r0
 8008eb0:	0008      	movs	r0, r1
 8008eb2:	0011      	movs	r1, r2
 8008eb4:	001a      	movs	r2, r3
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	4d05      	ldr	r5, [pc, #20]	; (8008ed0 <_write_r+0x24>)
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7fa ffb5 	bl	8003e2a <_write>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d103      	bne.n	8008ecc <_write_r+0x20>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d000      	beq.n	8008ecc <_write_r+0x20>
 8008eca:	6023      	str	r3, [r4, #0]
 8008ecc:	bd70      	pop	{r4, r5, r6, pc}
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	20000f9c 	.word	0x20000f9c

08008ed4 <__errno>:
 8008ed4:	4b01      	ldr	r3, [pc, #4]	; (8008edc <__errno+0x8>)
 8008ed6:	6818      	ldr	r0, [r3, #0]
 8008ed8:	4770      	bx	lr
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	200000b0 	.word	0x200000b0

08008ee0 <__libc_init_array>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	4c0c      	ldr	r4, [pc, #48]	; (8008f18 <__libc_init_array+0x38>)
 8008ee6:	4d0d      	ldr	r5, [pc, #52]	; (8008f1c <__libc_init_array+0x3c>)
 8008ee8:	1b64      	subs	r4, r4, r5
 8008eea:	10a4      	asrs	r4, r4, #2
 8008eec:	42a6      	cmp	r6, r4
 8008eee:	d109      	bne.n	8008f04 <__libc_init_array+0x24>
 8008ef0:	2600      	movs	r6, #0
 8008ef2:	f003 fe15 	bl	800cb20 <_init>
 8008ef6:	4c0a      	ldr	r4, [pc, #40]	; (8008f20 <__libc_init_array+0x40>)
 8008ef8:	4d0a      	ldr	r5, [pc, #40]	; (8008f24 <__libc_init_array+0x44>)
 8008efa:	1b64      	subs	r4, r4, r5
 8008efc:	10a4      	asrs	r4, r4, #2
 8008efe:	42a6      	cmp	r6, r4
 8008f00:	d105      	bne.n	8008f0e <__libc_init_array+0x2e>
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
 8008f04:	00b3      	lsls	r3, r6, #2
 8008f06:	58eb      	ldr	r3, [r5, r3]
 8008f08:	4798      	blx	r3
 8008f0a:	3601      	adds	r6, #1
 8008f0c:	e7ee      	b.n	8008eec <__libc_init_array+0xc>
 8008f0e:	00b3      	lsls	r3, r6, #2
 8008f10:	58eb      	ldr	r3, [r5, r3]
 8008f12:	4798      	blx	r3
 8008f14:	3601      	adds	r6, #1
 8008f16:	e7f2      	b.n	8008efe <__libc_init_array+0x1e>
 8008f18:	0800d308 	.word	0x0800d308
 8008f1c:	0800d308 	.word	0x0800d308
 8008f20:	0800d30c 	.word	0x0800d30c
 8008f24:	0800d308 	.word	0x0800d308

08008f28 <__retarget_lock_acquire_recursive>:
 8008f28:	4770      	bx	lr

08008f2a <__retarget_lock_release_recursive>:
 8008f2a:	4770      	bx	lr

08008f2c <memchr>:
 8008f2c:	b2c9      	uxtb	r1, r1
 8008f2e:	1882      	adds	r2, r0, r2
 8008f30:	4290      	cmp	r0, r2
 8008f32:	d101      	bne.n	8008f38 <memchr+0xc>
 8008f34:	2000      	movs	r0, #0
 8008f36:	4770      	bx	lr
 8008f38:	7803      	ldrb	r3, [r0, #0]
 8008f3a:	428b      	cmp	r3, r1
 8008f3c:	d0fb      	beq.n	8008f36 <memchr+0xa>
 8008f3e:	3001      	adds	r0, #1
 8008f40:	e7f6      	b.n	8008f30 <memchr+0x4>

08008f42 <memcpy>:
 8008f42:	2300      	movs	r3, #0
 8008f44:	b510      	push	{r4, lr}
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d100      	bne.n	8008f4c <memcpy+0xa>
 8008f4a:	bd10      	pop	{r4, pc}
 8008f4c:	5ccc      	ldrb	r4, [r1, r3]
 8008f4e:	54c4      	strb	r4, [r0, r3]
 8008f50:	3301      	adds	r3, #1
 8008f52:	e7f8      	b.n	8008f46 <memcpy+0x4>

08008f54 <quorem>:
 8008f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f56:	6902      	ldr	r2, [r0, #16]
 8008f58:	690b      	ldr	r3, [r1, #16]
 8008f5a:	b089      	sub	sp, #36	; 0x24
 8008f5c:	0007      	movs	r7, r0
 8008f5e:	9104      	str	r1, [sp, #16]
 8008f60:	2000      	movs	r0, #0
 8008f62:	429a      	cmp	r2, r3
 8008f64:	db69      	blt.n	800903a <quorem+0xe6>
 8008f66:	3b01      	subs	r3, #1
 8008f68:	009c      	lsls	r4, r3, #2
 8008f6a:	9301      	str	r3, [sp, #4]
 8008f6c:	000b      	movs	r3, r1
 8008f6e:	3314      	adds	r3, #20
 8008f70:	9306      	str	r3, [sp, #24]
 8008f72:	191b      	adds	r3, r3, r4
 8008f74:	9305      	str	r3, [sp, #20]
 8008f76:	003b      	movs	r3, r7
 8008f78:	3314      	adds	r3, #20
 8008f7a:	9303      	str	r3, [sp, #12]
 8008f7c:	191c      	adds	r4, r3, r4
 8008f7e:	9b05      	ldr	r3, [sp, #20]
 8008f80:	6826      	ldr	r6, [r4, #0]
 8008f82:	681d      	ldr	r5, [r3, #0]
 8008f84:	0030      	movs	r0, r6
 8008f86:	3501      	adds	r5, #1
 8008f88:	0029      	movs	r1, r5
 8008f8a:	f7f7 f8d5 	bl	8000138 <__udivsi3>
 8008f8e:	9002      	str	r0, [sp, #8]
 8008f90:	42ae      	cmp	r6, r5
 8008f92:	d329      	bcc.n	8008fe8 <quorem+0x94>
 8008f94:	9b06      	ldr	r3, [sp, #24]
 8008f96:	2600      	movs	r6, #0
 8008f98:	469c      	mov	ip, r3
 8008f9a:	9d03      	ldr	r5, [sp, #12]
 8008f9c:	9606      	str	r6, [sp, #24]
 8008f9e:	4662      	mov	r2, ip
 8008fa0:	ca08      	ldmia	r2!, {r3}
 8008fa2:	6828      	ldr	r0, [r5, #0]
 8008fa4:	4694      	mov	ip, r2
 8008fa6:	9a02      	ldr	r2, [sp, #8]
 8008fa8:	b299      	uxth	r1, r3
 8008faa:	4351      	muls	r1, r2
 8008fac:	0c1b      	lsrs	r3, r3, #16
 8008fae:	4353      	muls	r3, r2
 8008fb0:	1989      	adds	r1, r1, r6
 8008fb2:	0c0a      	lsrs	r2, r1, #16
 8008fb4:	189b      	adds	r3, r3, r2
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	0c1e      	lsrs	r6, r3, #16
 8008fba:	9b06      	ldr	r3, [sp, #24]
 8008fbc:	b282      	uxth	r2, r0
 8008fbe:	18d2      	adds	r2, r2, r3
 8008fc0:	466b      	mov	r3, sp
 8008fc2:	b289      	uxth	r1, r1
 8008fc4:	8b9b      	ldrh	r3, [r3, #28]
 8008fc6:	1a52      	subs	r2, r2, r1
 8008fc8:	0c01      	lsrs	r1, r0, #16
 8008fca:	1ac9      	subs	r1, r1, r3
 8008fcc:	1413      	asrs	r3, r2, #16
 8008fce:	18cb      	adds	r3, r1, r3
 8008fd0:	1419      	asrs	r1, r3, #16
 8008fd2:	b292      	uxth	r2, r2
 8008fd4:	041b      	lsls	r3, r3, #16
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	c508      	stmia	r5!, {r3}
 8008fda:	9b05      	ldr	r3, [sp, #20]
 8008fdc:	9106      	str	r1, [sp, #24]
 8008fde:	4563      	cmp	r3, ip
 8008fe0:	d2dd      	bcs.n	8008f9e <quorem+0x4a>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d030      	beq.n	800904a <quorem+0xf6>
 8008fe8:	0038      	movs	r0, r7
 8008fea:	9904      	ldr	r1, [sp, #16]
 8008fec:	f001 f9de 	bl	800a3ac <__mcmp>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	db21      	blt.n	8009038 <quorem+0xe4>
 8008ff4:	0038      	movs	r0, r7
 8008ff6:	2600      	movs	r6, #0
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	9c04      	ldr	r4, [sp, #16]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	9302      	str	r3, [sp, #8]
 8009000:	3014      	adds	r0, #20
 8009002:	3414      	adds	r4, #20
 8009004:	6803      	ldr	r3, [r0, #0]
 8009006:	cc02      	ldmia	r4!, {r1}
 8009008:	b29d      	uxth	r5, r3
 800900a:	19ad      	adds	r5, r5, r6
 800900c:	b28a      	uxth	r2, r1
 800900e:	1aaa      	subs	r2, r5, r2
 8009010:	0c09      	lsrs	r1, r1, #16
 8009012:	0c1b      	lsrs	r3, r3, #16
 8009014:	1a5b      	subs	r3, r3, r1
 8009016:	1411      	asrs	r1, r2, #16
 8009018:	185b      	adds	r3, r3, r1
 800901a:	141e      	asrs	r6, r3, #16
 800901c:	b292      	uxth	r2, r2
 800901e:	041b      	lsls	r3, r3, #16
 8009020:	4313      	orrs	r3, r2
 8009022:	c008      	stmia	r0!, {r3}
 8009024:	9b05      	ldr	r3, [sp, #20]
 8009026:	42a3      	cmp	r3, r4
 8009028:	d2ec      	bcs.n	8009004 <quorem+0xb0>
 800902a:	9b01      	ldr	r3, [sp, #4]
 800902c:	9a03      	ldr	r2, [sp, #12]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	18d3      	adds	r3, r2, r3
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	2a00      	cmp	r2, #0
 8009036:	d015      	beq.n	8009064 <quorem+0x110>
 8009038:	9802      	ldr	r0, [sp, #8]
 800903a:	b009      	add	sp, #36	; 0x24
 800903c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d106      	bne.n	8009052 <quorem+0xfe>
 8009044:	9b01      	ldr	r3, [sp, #4]
 8009046:	3b01      	subs	r3, #1
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	3c04      	subs	r4, #4
 800904e:	42a3      	cmp	r3, r4
 8009050:	d3f5      	bcc.n	800903e <quorem+0xea>
 8009052:	9b01      	ldr	r3, [sp, #4]
 8009054:	613b      	str	r3, [r7, #16]
 8009056:	e7c7      	b.n	8008fe8 <quorem+0x94>
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	2a00      	cmp	r2, #0
 800905c:	d106      	bne.n	800906c <quorem+0x118>
 800905e:	9a01      	ldr	r2, [sp, #4]
 8009060:	3a01      	subs	r2, #1
 8009062:	9201      	str	r2, [sp, #4]
 8009064:	9a03      	ldr	r2, [sp, #12]
 8009066:	3b04      	subs	r3, #4
 8009068:	429a      	cmp	r2, r3
 800906a:	d3f5      	bcc.n	8009058 <quorem+0x104>
 800906c:	9b01      	ldr	r3, [sp, #4]
 800906e:	613b      	str	r3, [r7, #16]
 8009070:	e7e2      	b.n	8009038 <quorem+0xe4>
	...

08009074 <_dtoa_r>:
 8009074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009076:	0014      	movs	r4, r2
 8009078:	001d      	movs	r5, r3
 800907a:	69c6      	ldr	r6, [r0, #28]
 800907c:	b09d      	sub	sp, #116	; 0x74
 800907e:	9408      	str	r4, [sp, #32]
 8009080:	9509      	str	r5, [sp, #36]	; 0x24
 8009082:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009084:	9004      	str	r0, [sp, #16]
 8009086:	2e00      	cmp	r6, #0
 8009088:	d10f      	bne.n	80090aa <_dtoa_r+0x36>
 800908a:	2010      	movs	r0, #16
 800908c:	f000 fe4a 	bl	8009d24 <malloc>
 8009090:	9b04      	ldr	r3, [sp, #16]
 8009092:	1e02      	subs	r2, r0, #0
 8009094:	61d8      	str	r0, [r3, #28]
 8009096:	d104      	bne.n	80090a2 <_dtoa_r+0x2e>
 8009098:	21ef      	movs	r1, #239	; 0xef
 800909a:	4bc6      	ldr	r3, [pc, #792]	; (80093b4 <_dtoa_r+0x340>)
 800909c:	48c6      	ldr	r0, [pc, #792]	; (80093b8 <_dtoa_r+0x344>)
 800909e:	f001 fb61 	bl	800a764 <__assert_func>
 80090a2:	6046      	str	r6, [r0, #4]
 80090a4:	6086      	str	r6, [r0, #8]
 80090a6:	6006      	str	r6, [r0, #0]
 80090a8:	60c6      	str	r6, [r0, #12]
 80090aa:	9b04      	ldr	r3, [sp, #16]
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	6819      	ldr	r1, [r3, #0]
 80090b0:	2900      	cmp	r1, #0
 80090b2:	d00b      	beq.n	80090cc <_dtoa_r+0x58>
 80090b4:	685a      	ldr	r2, [r3, #4]
 80090b6:	2301      	movs	r3, #1
 80090b8:	4093      	lsls	r3, r2
 80090ba:	604a      	str	r2, [r1, #4]
 80090bc:	608b      	str	r3, [r1, #8]
 80090be:	9804      	ldr	r0, [sp, #16]
 80090c0:	f000 ff32 	bl	8009f28 <_Bfree>
 80090c4:	2200      	movs	r2, #0
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	2d00      	cmp	r5, #0
 80090ce:	da1e      	bge.n	800910e <_dtoa_r+0x9a>
 80090d0:	2301      	movs	r3, #1
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	006b      	lsls	r3, r5, #1
 80090d6:	085b      	lsrs	r3, r3, #1
 80090d8:	9309      	str	r3, [sp, #36]	; 0x24
 80090da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80090dc:	4bb7      	ldr	r3, [pc, #732]	; (80093bc <_dtoa_r+0x348>)
 80090de:	4ab7      	ldr	r2, [pc, #732]	; (80093bc <_dtoa_r+0x348>)
 80090e0:	403b      	ands	r3, r7
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d116      	bne.n	8009114 <_dtoa_r+0xa0>
 80090e6:	4bb6      	ldr	r3, [pc, #728]	; (80093c0 <_dtoa_r+0x34c>)
 80090e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	033b      	lsls	r3, r7, #12
 80090ee:	0b1b      	lsrs	r3, r3, #12
 80090f0:	4323      	orrs	r3, r4
 80090f2:	d101      	bne.n	80090f8 <_dtoa_r+0x84>
 80090f4:	f000 fdb5 	bl	8009c62 <_dtoa_r+0xbee>
 80090f8:	4bb2      	ldr	r3, [pc, #712]	; (80093c4 <_dtoa_r+0x350>)
 80090fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80090fc:	9306      	str	r3, [sp, #24]
 80090fe:	2a00      	cmp	r2, #0
 8009100:	d002      	beq.n	8009108 <_dtoa_r+0x94>
 8009102:	4bb1      	ldr	r3, [pc, #708]	; (80093c8 <_dtoa_r+0x354>)
 8009104:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	9806      	ldr	r0, [sp, #24]
 800910a:	b01d      	add	sp, #116	; 0x74
 800910c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910e:	2300      	movs	r3, #0
 8009110:	603b      	str	r3, [r7, #0]
 8009112:	e7e2      	b.n	80090da <_dtoa_r+0x66>
 8009114:	9a08      	ldr	r2, [sp, #32]
 8009116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009118:	9210      	str	r2, [sp, #64]	; 0x40
 800911a:	9311      	str	r3, [sp, #68]	; 0x44
 800911c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800911e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009120:	2200      	movs	r2, #0
 8009122:	2300      	movs	r3, #0
 8009124:	f7f7 f98e 	bl	8000444 <__aeabi_dcmpeq>
 8009128:	1e06      	subs	r6, r0, #0
 800912a:	d009      	beq.n	8009140 <_dtoa_r+0xcc>
 800912c:	2301      	movs	r3, #1
 800912e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	4ba6      	ldr	r3, [pc, #664]	; (80093cc <_dtoa_r+0x358>)
 8009134:	9306      	str	r3, [sp, #24]
 8009136:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009138:	2b00      	cmp	r3, #0
 800913a:	d0e5      	beq.n	8009108 <_dtoa_r+0x94>
 800913c:	4ba4      	ldr	r3, [pc, #656]	; (80093d0 <_dtoa_r+0x35c>)
 800913e:	e7e1      	b.n	8009104 <_dtoa_r+0x90>
 8009140:	ab1a      	add	r3, sp, #104	; 0x68
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	ab1b      	add	r3, sp, #108	; 0x6c
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	9804      	ldr	r0, [sp, #16]
 800914a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800914c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800914e:	f001 f9e1 	bl	800a514 <__d2b>
 8009152:	007a      	lsls	r2, r7, #1
 8009154:	9005      	str	r0, [sp, #20]
 8009156:	0d52      	lsrs	r2, r2, #21
 8009158:	d100      	bne.n	800915c <_dtoa_r+0xe8>
 800915a:	e07b      	b.n	8009254 <_dtoa_r+0x1e0>
 800915c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800915e:	9617      	str	r6, [sp, #92]	; 0x5c
 8009160:	0319      	lsls	r1, r3, #12
 8009162:	4b9c      	ldr	r3, [pc, #624]	; (80093d4 <_dtoa_r+0x360>)
 8009164:	0b09      	lsrs	r1, r1, #12
 8009166:	430b      	orrs	r3, r1
 8009168:	499b      	ldr	r1, [pc, #620]	; (80093d8 <_dtoa_r+0x364>)
 800916a:	1857      	adds	r7, r2, r1
 800916c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800916e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009170:	0019      	movs	r1, r3
 8009172:	2200      	movs	r2, #0
 8009174:	4b99      	ldr	r3, [pc, #612]	; (80093dc <_dtoa_r+0x368>)
 8009176:	f7f8 fe8f 	bl	8001e98 <__aeabi_dsub>
 800917a:	4a99      	ldr	r2, [pc, #612]	; (80093e0 <_dtoa_r+0x36c>)
 800917c:	4b99      	ldr	r3, [pc, #612]	; (80093e4 <_dtoa_r+0x370>)
 800917e:	f7f8 fbc9 	bl	8001914 <__aeabi_dmul>
 8009182:	4a99      	ldr	r2, [pc, #612]	; (80093e8 <_dtoa_r+0x374>)
 8009184:	4b99      	ldr	r3, [pc, #612]	; (80093ec <_dtoa_r+0x378>)
 8009186:	f7f7 fc6b 	bl	8000a60 <__aeabi_dadd>
 800918a:	0004      	movs	r4, r0
 800918c:	0038      	movs	r0, r7
 800918e:	000d      	movs	r5, r1
 8009190:	f7f9 fa58 	bl	8002644 <__aeabi_i2d>
 8009194:	4a96      	ldr	r2, [pc, #600]	; (80093f0 <_dtoa_r+0x37c>)
 8009196:	4b97      	ldr	r3, [pc, #604]	; (80093f4 <_dtoa_r+0x380>)
 8009198:	f7f8 fbbc 	bl	8001914 <__aeabi_dmul>
 800919c:	0002      	movs	r2, r0
 800919e:	000b      	movs	r3, r1
 80091a0:	0020      	movs	r0, r4
 80091a2:	0029      	movs	r1, r5
 80091a4:	f7f7 fc5c 	bl	8000a60 <__aeabi_dadd>
 80091a8:	0004      	movs	r4, r0
 80091aa:	000d      	movs	r5, r1
 80091ac:	f7f9 fa14 	bl	80025d8 <__aeabi_d2iz>
 80091b0:	2200      	movs	r2, #0
 80091b2:	9003      	str	r0, [sp, #12]
 80091b4:	2300      	movs	r3, #0
 80091b6:	0020      	movs	r0, r4
 80091b8:	0029      	movs	r1, r5
 80091ba:	f7f7 f949 	bl	8000450 <__aeabi_dcmplt>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d00b      	beq.n	80091da <_dtoa_r+0x166>
 80091c2:	9803      	ldr	r0, [sp, #12]
 80091c4:	f7f9 fa3e 	bl	8002644 <__aeabi_i2d>
 80091c8:	002b      	movs	r3, r5
 80091ca:	0022      	movs	r2, r4
 80091cc:	f7f7 f93a 	bl	8000444 <__aeabi_dcmpeq>
 80091d0:	4243      	negs	r3, r0
 80091d2:	4158      	adcs	r0, r3
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	1a1b      	subs	r3, r3, r0
 80091d8:	9303      	str	r3, [sp, #12]
 80091da:	2301      	movs	r3, #1
 80091dc:	9316      	str	r3, [sp, #88]	; 0x58
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	2b16      	cmp	r3, #22
 80091e2:	d810      	bhi.n	8009206 <_dtoa_r+0x192>
 80091e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80091e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80091e8:	9a03      	ldr	r2, [sp, #12]
 80091ea:	4b83      	ldr	r3, [pc, #524]	; (80093f8 <_dtoa_r+0x384>)
 80091ec:	00d2      	lsls	r2, r2, #3
 80091ee:	189b      	adds	r3, r3, r2
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f7f7 f92c 	bl	8000450 <__aeabi_dcmplt>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d047      	beq.n	800928c <_dtoa_r+0x218>
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	3b01      	subs	r3, #1
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	2300      	movs	r3, #0
 8009204:	9316      	str	r3, [sp, #88]	; 0x58
 8009206:	2200      	movs	r2, #0
 8009208:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800920a:	920a      	str	r2, [sp, #40]	; 0x28
 800920c:	1bdb      	subs	r3, r3, r7
 800920e:	1e5a      	subs	r2, r3, #1
 8009210:	d53e      	bpl.n	8009290 <_dtoa_r+0x21c>
 8009212:	2201      	movs	r2, #1
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	930a      	str	r3, [sp, #40]	; 0x28
 8009218:	2300      	movs	r3, #0
 800921a:	930c      	str	r3, [sp, #48]	; 0x30
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	db38      	blt.n	8009294 <_dtoa_r+0x220>
 8009222:	9a03      	ldr	r2, [sp, #12]
 8009224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009226:	4694      	mov	ip, r2
 8009228:	4463      	add	r3, ip
 800922a:	930c      	str	r3, [sp, #48]	; 0x30
 800922c:	2300      	movs	r3, #0
 800922e:	9213      	str	r2, [sp, #76]	; 0x4c
 8009230:	930d      	str	r3, [sp, #52]	; 0x34
 8009232:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009234:	2401      	movs	r4, #1
 8009236:	2b09      	cmp	r3, #9
 8009238:	d867      	bhi.n	800930a <_dtoa_r+0x296>
 800923a:	2b05      	cmp	r3, #5
 800923c:	dd02      	ble.n	8009244 <_dtoa_r+0x1d0>
 800923e:	2400      	movs	r4, #0
 8009240:	3b04      	subs	r3, #4
 8009242:	9322      	str	r3, [sp, #136]	; 0x88
 8009244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009246:	1e98      	subs	r0, r3, #2
 8009248:	2803      	cmp	r0, #3
 800924a:	d867      	bhi.n	800931c <_dtoa_r+0x2a8>
 800924c:	f7f6 ff60 	bl	8000110 <__gnu_thumb1_case_uqi>
 8009250:	5b383a2b 	.word	0x5b383a2b
 8009254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009256:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009258:	18f6      	adds	r6, r6, r3
 800925a:	4b68      	ldr	r3, [pc, #416]	; (80093fc <_dtoa_r+0x388>)
 800925c:	18f2      	adds	r2, r6, r3
 800925e:	2a20      	cmp	r2, #32
 8009260:	dd0f      	ble.n	8009282 <_dtoa_r+0x20e>
 8009262:	2340      	movs	r3, #64	; 0x40
 8009264:	1a9b      	subs	r3, r3, r2
 8009266:	409f      	lsls	r7, r3
 8009268:	4b65      	ldr	r3, [pc, #404]	; (8009400 <_dtoa_r+0x38c>)
 800926a:	0038      	movs	r0, r7
 800926c:	18f3      	adds	r3, r6, r3
 800926e:	40dc      	lsrs	r4, r3
 8009270:	4320      	orrs	r0, r4
 8009272:	f7f9 fa17 	bl	80026a4 <__aeabi_ui2d>
 8009276:	2201      	movs	r2, #1
 8009278:	4b62      	ldr	r3, [pc, #392]	; (8009404 <_dtoa_r+0x390>)
 800927a:	1e77      	subs	r7, r6, #1
 800927c:	18cb      	adds	r3, r1, r3
 800927e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009280:	e776      	b.n	8009170 <_dtoa_r+0xfc>
 8009282:	2320      	movs	r3, #32
 8009284:	0020      	movs	r0, r4
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	4098      	lsls	r0, r3
 800928a:	e7f2      	b.n	8009272 <_dtoa_r+0x1fe>
 800928c:	9016      	str	r0, [sp, #88]	; 0x58
 800928e:	e7ba      	b.n	8009206 <_dtoa_r+0x192>
 8009290:	920c      	str	r2, [sp, #48]	; 0x30
 8009292:	e7c3      	b.n	800921c <_dtoa_r+0x1a8>
 8009294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009296:	9a03      	ldr	r2, [sp, #12]
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	930a      	str	r3, [sp, #40]	; 0x28
 800929c:	4253      	negs	r3, r2
 800929e:	930d      	str	r3, [sp, #52]	; 0x34
 80092a0:	2300      	movs	r3, #0
 80092a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80092a4:	e7c5      	b.n	8009232 <_dtoa_r+0x1be>
 80092a6:	2300      	movs	r3, #0
 80092a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80092aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80092ae:	9307      	str	r3, [sp, #28]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dc13      	bgt.n	80092dc <_dtoa_r+0x268>
 80092b4:	2301      	movs	r3, #1
 80092b6:	001a      	movs	r2, r3
 80092b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80092ba:	9307      	str	r3, [sp, #28]
 80092bc:	9223      	str	r2, [sp, #140]	; 0x8c
 80092be:	e00d      	b.n	80092dc <_dtoa_r+0x268>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e7f1      	b.n	80092a8 <_dtoa_r+0x234>
 80092c4:	2300      	movs	r3, #0
 80092c6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80092c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80092ca:	4694      	mov	ip, r2
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	4463      	add	r3, ip
 80092d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092d2:	3301      	adds	r3, #1
 80092d4:	9307      	str	r3, [sp, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dc00      	bgt.n	80092dc <_dtoa_r+0x268>
 80092da:	2301      	movs	r3, #1
 80092dc:	9a04      	ldr	r2, [sp, #16]
 80092de:	2100      	movs	r1, #0
 80092e0:	69d0      	ldr	r0, [r2, #28]
 80092e2:	2204      	movs	r2, #4
 80092e4:	0015      	movs	r5, r2
 80092e6:	3514      	adds	r5, #20
 80092e8:	429d      	cmp	r5, r3
 80092ea:	d91b      	bls.n	8009324 <_dtoa_r+0x2b0>
 80092ec:	6041      	str	r1, [r0, #4]
 80092ee:	9804      	ldr	r0, [sp, #16]
 80092f0:	f000 fdd6 	bl	8009ea0 <_Balloc>
 80092f4:	9006      	str	r0, [sp, #24]
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d117      	bne.n	800932a <_dtoa_r+0x2b6>
 80092fa:	21b0      	movs	r1, #176	; 0xb0
 80092fc:	4b42      	ldr	r3, [pc, #264]	; (8009408 <_dtoa_r+0x394>)
 80092fe:	482e      	ldr	r0, [pc, #184]	; (80093b8 <_dtoa_r+0x344>)
 8009300:	9a06      	ldr	r2, [sp, #24]
 8009302:	31ff      	adds	r1, #255	; 0xff
 8009304:	e6cb      	b.n	800909e <_dtoa_r+0x2a>
 8009306:	2301      	movs	r3, #1
 8009308:	e7dd      	b.n	80092c6 <_dtoa_r+0x252>
 800930a:	2300      	movs	r3, #0
 800930c:	940f      	str	r4, [sp, #60]	; 0x3c
 800930e:	9322      	str	r3, [sp, #136]	; 0x88
 8009310:	3b01      	subs	r3, #1
 8009312:	930b      	str	r3, [sp, #44]	; 0x2c
 8009314:	9307      	str	r3, [sp, #28]
 8009316:	2200      	movs	r2, #0
 8009318:	3313      	adds	r3, #19
 800931a:	e7cf      	b.n	80092bc <_dtoa_r+0x248>
 800931c:	2301      	movs	r3, #1
 800931e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009320:	3b02      	subs	r3, #2
 8009322:	e7f6      	b.n	8009312 <_dtoa_r+0x29e>
 8009324:	3101      	adds	r1, #1
 8009326:	0052      	lsls	r2, r2, #1
 8009328:	e7dc      	b.n	80092e4 <_dtoa_r+0x270>
 800932a:	9b04      	ldr	r3, [sp, #16]
 800932c:	9a06      	ldr	r2, [sp, #24]
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	9b07      	ldr	r3, [sp, #28]
 8009334:	2b0e      	cmp	r3, #14
 8009336:	d900      	bls.n	800933a <_dtoa_r+0x2c6>
 8009338:	e0e5      	b.n	8009506 <_dtoa_r+0x492>
 800933a:	2c00      	cmp	r4, #0
 800933c:	d100      	bne.n	8009340 <_dtoa_r+0x2cc>
 800933e:	e0e2      	b.n	8009506 <_dtoa_r+0x492>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	dd64      	ble.n	8009410 <_dtoa_r+0x39c>
 8009346:	210f      	movs	r1, #15
 8009348:	9a03      	ldr	r2, [sp, #12]
 800934a:	4b2b      	ldr	r3, [pc, #172]	; (80093f8 <_dtoa_r+0x384>)
 800934c:	400a      	ands	r2, r1
 800934e:	00d2      	lsls	r2, r2, #3
 8009350:	189b      	adds	r3, r3, r2
 8009352:	681e      	ldr	r6, [r3, #0]
 8009354:	685f      	ldr	r7, [r3, #4]
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	2402      	movs	r4, #2
 800935a:	111d      	asrs	r5, r3, #4
 800935c:	05db      	lsls	r3, r3, #23
 800935e:	d50a      	bpl.n	8009376 <_dtoa_r+0x302>
 8009360:	4b2a      	ldr	r3, [pc, #168]	; (800940c <_dtoa_r+0x398>)
 8009362:	400d      	ands	r5, r1
 8009364:	6a1a      	ldr	r2, [r3, #32]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	9810      	ldr	r0, [sp, #64]	; 0x40
 800936a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800936c:	f7f7 fed8 	bl	8001120 <__aeabi_ddiv>
 8009370:	9008      	str	r0, [sp, #32]
 8009372:	9109      	str	r1, [sp, #36]	; 0x24
 8009374:	3401      	adds	r4, #1
 8009376:	4b25      	ldr	r3, [pc, #148]	; (800940c <_dtoa_r+0x398>)
 8009378:	930e      	str	r3, [sp, #56]	; 0x38
 800937a:	2d00      	cmp	r5, #0
 800937c:	d108      	bne.n	8009390 <_dtoa_r+0x31c>
 800937e:	9808      	ldr	r0, [sp, #32]
 8009380:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009382:	0032      	movs	r2, r6
 8009384:	003b      	movs	r3, r7
 8009386:	f7f7 fecb 	bl	8001120 <__aeabi_ddiv>
 800938a:	9008      	str	r0, [sp, #32]
 800938c:	9109      	str	r1, [sp, #36]	; 0x24
 800938e:	e05a      	b.n	8009446 <_dtoa_r+0x3d2>
 8009390:	2301      	movs	r3, #1
 8009392:	421d      	tst	r5, r3
 8009394:	d009      	beq.n	80093aa <_dtoa_r+0x336>
 8009396:	18e4      	adds	r4, r4, r3
 8009398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800939a:	0030      	movs	r0, r6
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	0039      	movs	r1, r7
 80093a2:	f7f8 fab7 	bl	8001914 <__aeabi_dmul>
 80093a6:	0006      	movs	r6, r0
 80093a8:	000f      	movs	r7, r1
 80093aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ac:	106d      	asrs	r5, r5, #1
 80093ae:	3308      	adds	r3, #8
 80093b0:	e7e2      	b.n	8009378 <_dtoa_r+0x304>
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	0800cdc9 	.word	0x0800cdc9
 80093b8:	0800cde0 	.word	0x0800cde0
 80093bc:	7ff00000 	.word	0x7ff00000
 80093c0:	0000270f 	.word	0x0000270f
 80093c4:	0800cdc5 	.word	0x0800cdc5
 80093c8:	0800cdc8 	.word	0x0800cdc8
 80093cc:	0800cd98 	.word	0x0800cd98
 80093d0:	0800cd99 	.word	0x0800cd99
 80093d4:	3ff00000 	.word	0x3ff00000
 80093d8:	fffffc01 	.word	0xfffffc01
 80093dc:	3ff80000 	.word	0x3ff80000
 80093e0:	636f4361 	.word	0x636f4361
 80093e4:	3fd287a7 	.word	0x3fd287a7
 80093e8:	8b60c8b3 	.word	0x8b60c8b3
 80093ec:	3fc68a28 	.word	0x3fc68a28
 80093f0:	509f79fb 	.word	0x509f79fb
 80093f4:	3fd34413 	.word	0x3fd34413
 80093f8:	0800ced0 	.word	0x0800ced0
 80093fc:	00000432 	.word	0x00000432
 8009400:	00000412 	.word	0x00000412
 8009404:	fe100000 	.word	0xfe100000
 8009408:	0800ce38 	.word	0x0800ce38
 800940c:	0800cea8 	.word	0x0800cea8
 8009410:	9b03      	ldr	r3, [sp, #12]
 8009412:	2402      	movs	r4, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d016      	beq.n	8009446 <_dtoa_r+0x3d2>
 8009418:	9810      	ldr	r0, [sp, #64]	; 0x40
 800941a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800941c:	220f      	movs	r2, #15
 800941e:	425d      	negs	r5, r3
 8009420:	402a      	ands	r2, r5
 8009422:	4bdd      	ldr	r3, [pc, #884]	; (8009798 <_dtoa_r+0x724>)
 8009424:	00d2      	lsls	r2, r2, #3
 8009426:	189b      	adds	r3, r3, r2
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f7f8 fa72 	bl	8001914 <__aeabi_dmul>
 8009430:	2701      	movs	r7, #1
 8009432:	2300      	movs	r3, #0
 8009434:	9008      	str	r0, [sp, #32]
 8009436:	9109      	str	r1, [sp, #36]	; 0x24
 8009438:	4ed8      	ldr	r6, [pc, #864]	; (800979c <_dtoa_r+0x728>)
 800943a:	112d      	asrs	r5, r5, #4
 800943c:	2d00      	cmp	r5, #0
 800943e:	d000      	beq.n	8009442 <_dtoa_r+0x3ce>
 8009440:	e091      	b.n	8009566 <_dtoa_r+0x4f2>
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1a1      	bne.n	800938a <_dtoa_r+0x316>
 8009446:	9e08      	ldr	r6, [sp, #32]
 8009448:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800944a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800944c:	2b00      	cmp	r3, #0
 800944e:	d100      	bne.n	8009452 <_dtoa_r+0x3de>
 8009450:	e094      	b.n	800957c <_dtoa_r+0x508>
 8009452:	2200      	movs	r2, #0
 8009454:	0030      	movs	r0, r6
 8009456:	0039      	movs	r1, r7
 8009458:	4bd1      	ldr	r3, [pc, #836]	; (80097a0 <_dtoa_r+0x72c>)
 800945a:	f7f6 fff9 	bl	8000450 <__aeabi_dcmplt>
 800945e:	2800      	cmp	r0, #0
 8009460:	d100      	bne.n	8009464 <_dtoa_r+0x3f0>
 8009462:	e08b      	b.n	800957c <_dtoa_r+0x508>
 8009464:	9b07      	ldr	r3, [sp, #28]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d100      	bne.n	800946c <_dtoa_r+0x3f8>
 800946a:	e087      	b.n	800957c <_dtoa_r+0x508>
 800946c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800946e:	2b00      	cmp	r3, #0
 8009470:	dd45      	ble.n	80094fe <_dtoa_r+0x48a>
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	3b01      	subs	r3, #1
 8009478:	930e      	str	r3, [sp, #56]	; 0x38
 800947a:	0030      	movs	r0, r6
 800947c:	4bc9      	ldr	r3, [pc, #804]	; (80097a4 <_dtoa_r+0x730>)
 800947e:	0039      	movs	r1, r7
 8009480:	f7f8 fa48 	bl	8001914 <__aeabi_dmul>
 8009484:	9008      	str	r0, [sp, #32]
 8009486:	9109      	str	r1, [sp, #36]	; 0x24
 8009488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800948a:	3401      	adds	r4, #1
 800948c:	0020      	movs	r0, r4
 800948e:	9e08      	ldr	r6, [sp, #32]
 8009490:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009492:	9312      	str	r3, [sp, #72]	; 0x48
 8009494:	f7f9 f8d6 	bl	8002644 <__aeabi_i2d>
 8009498:	0032      	movs	r2, r6
 800949a:	003b      	movs	r3, r7
 800949c:	f7f8 fa3a 	bl	8001914 <__aeabi_dmul>
 80094a0:	2200      	movs	r2, #0
 80094a2:	4bc1      	ldr	r3, [pc, #772]	; (80097a8 <_dtoa_r+0x734>)
 80094a4:	f7f7 fadc 	bl	8000a60 <__aeabi_dadd>
 80094a8:	4ac0      	ldr	r2, [pc, #768]	; (80097ac <_dtoa_r+0x738>)
 80094aa:	9014      	str	r0, [sp, #80]	; 0x50
 80094ac:	9115      	str	r1, [sp, #84]	; 0x54
 80094ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80094b2:	4694      	mov	ip, r2
 80094b4:	9308      	str	r3, [sp, #32]
 80094b6:	9409      	str	r4, [sp, #36]	; 0x24
 80094b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094ba:	4463      	add	r3, ip
 80094bc:	9318      	str	r3, [sp, #96]	; 0x60
 80094be:	9309      	str	r3, [sp, #36]	; 0x24
 80094c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d15e      	bne.n	8009584 <_dtoa_r+0x510>
 80094c6:	2200      	movs	r2, #0
 80094c8:	4bb9      	ldr	r3, [pc, #740]	; (80097b0 <_dtoa_r+0x73c>)
 80094ca:	0030      	movs	r0, r6
 80094cc:	0039      	movs	r1, r7
 80094ce:	f7f8 fce3 	bl	8001e98 <__aeabi_dsub>
 80094d2:	9a08      	ldr	r2, [sp, #32]
 80094d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80094d6:	0004      	movs	r4, r0
 80094d8:	000d      	movs	r5, r1
 80094da:	f7f6 ffcd 	bl	8000478 <__aeabi_dcmpgt>
 80094de:	2800      	cmp	r0, #0
 80094e0:	d000      	beq.n	80094e4 <_dtoa_r+0x470>
 80094e2:	e2b3      	b.n	8009a4c <_dtoa_r+0x9d8>
 80094e4:	48b3      	ldr	r0, [pc, #716]	; (80097b4 <_dtoa_r+0x740>)
 80094e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80094e8:	4684      	mov	ip, r0
 80094ea:	4461      	add	r1, ip
 80094ec:	000b      	movs	r3, r1
 80094ee:	0020      	movs	r0, r4
 80094f0:	0029      	movs	r1, r5
 80094f2:	9a08      	ldr	r2, [sp, #32]
 80094f4:	f7f6 ffac 	bl	8000450 <__aeabi_dcmplt>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d000      	beq.n	80094fe <_dtoa_r+0x48a>
 80094fc:	e2a3      	b.n	8009a46 <_dtoa_r+0x9d2>
 80094fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009500:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009502:	9308      	str	r3, [sp, #32]
 8009504:	9409      	str	r4, [sp, #36]	; 0x24
 8009506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009508:	2b00      	cmp	r3, #0
 800950a:	da00      	bge.n	800950e <_dtoa_r+0x49a>
 800950c:	e179      	b.n	8009802 <_dtoa_r+0x78e>
 800950e:	9a03      	ldr	r2, [sp, #12]
 8009510:	2a0e      	cmp	r2, #14
 8009512:	dd00      	ble.n	8009516 <_dtoa_r+0x4a2>
 8009514:	e175      	b.n	8009802 <_dtoa_r+0x78e>
 8009516:	4ba0      	ldr	r3, [pc, #640]	; (8009798 <_dtoa_r+0x724>)
 8009518:	00d2      	lsls	r2, r2, #3
 800951a:	189b      	adds	r3, r3, r2
 800951c:	681e      	ldr	r6, [r3, #0]
 800951e:	685f      	ldr	r7, [r3, #4]
 8009520:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009522:	2b00      	cmp	r3, #0
 8009524:	db00      	blt.n	8009528 <_dtoa_r+0x4b4>
 8009526:	e0e5      	b.n	80096f4 <_dtoa_r+0x680>
 8009528:	9b07      	ldr	r3, [sp, #28]
 800952a:	2b00      	cmp	r3, #0
 800952c:	dd00      	ble.n	8009530 <_dtoa_r+0x4bc>
 800952e:	e0e1      	b.n	80096f4 <_dtoa_r+0x680>
 8009530:	d000      	beq.n	8009534 <_dtoa_r+0x4c0>
 8009532:	e288      	b.n	8009a46 <_dtoa_r+0x9d2>
 8009534:	2200      	movs	r2, #0
 8009536:	0030      	movs	r0, r6
 8009538:	0039      	movs	r1, r7
 800953a:	4b9d      	ldr	r3, [pc, #628]	; (80097b0 <_dtoa_r+0x73c>)
 800953c:	f7f8 f9ea 	bl	8001914 <__aeabi_dmul>
 8009540:	9a08      	ldr	r2, [sp, #32]
 8009542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009544:	f7f6 ffa2 	bl	800048c <__aeabi_dcmpge>
 8009548:	9e07      	ldr	r6, [sp, #28]
 800954a:	0037      	movs	r7, r6
 800954c:	2800      	cmp	r0, #0
 800954e:	d000      	beq.n	8009552 <_dtoa_r+0x4de>
 8009550:	e25f      	b.n	8009a12 <_dtoa_r+0x99e>
 8009552:	9b06      	ldr	r3, [sp, #24]
 8009554:	9a06      	ldr	r2, [sp, #24]
 8009556:	3301      	adds	r3, #1
 8009558:	9308      	str	r3, [sp, #32]
 800955a:	2331      	movs	r3, #49	; 0x31
 800955c:	7013      	strb	r3, [r2, #0]
 800955e:	9b03      	ldr	r3, [sp, #12]
 8009560:	3301      	adds	r3, #1
 8009562:	9303      	str	r3, [sp, #12]
 8009564:	e25a      	b.n	8009a1c <_dtoa_r+0x9a8>
 8009566:	423d      	tst	r5, r7
 8009568:	d005      	beq.n	8009576 <_dtoa_r+0x502>
 800956a:	6832      	ldr	r2, [r6, #0]
 800956c:	6873      	ldr	r3, [r6, #4]
 800956e:	f7f8 f9d1 	bl	8001914 <__aeabi_dmul>
 8009572:	003b      	movs	r3, r7
 8009574:	3401      	adds	r4, #1
 8009576:	106d      	asrs	r5, r5, #1
 8009578:	3608      	adds	r6, #8
 800957a:	e75f      	b.n	800943c <_dtoa_r+0x3c8>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	930e      	str	r3, [sp, #56]	; 0x38
 8009580:	9b07      	ldr	r3, [sp, #28]
 8009582:	e783      	b.n	800948c <_dtoa_r+0x418>
 8009584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009586:	4b84      	ldr	r3, [pc, #528]	; (8009798 <_dtoa_r+0x724>)
 8009588:	3a01      	subs	r2, #1
 800958a:	00d2      	lsls	r2, r2, #3
 800958c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800958e:	189b      	adds	r3, r3, r2
 8009590:	9c08      	ldr	r4, [sp, #32]
 8009592:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	2900      	cmp	r1, #0
 800959a:	d051      	beq.n	8009640 <_dtoa_r+0x5cc>
 800959c:	2000      	movs	r0, #0
 800959e:	4986      	ldr	r1, [pc, #536]	; (80097b8 <_dtoa_r+0x744>)
 80095a0:	f7f7 fdbe 	bl	8001120 <__aeabi_ddiv>
 80095a4:	0022      	movs	r2, r4
 80095a6:	002b      	movs	r3, r5
 80095a8:	f7f8 fc76 	bl	8001e98 <__aeabi_dsub>
 80095ac:	9a06      	ldr	r2, [sp, #24]
 80095ae:	0004      	movs	r4, r0
 80095b0:	4694      	mov	ip, r2
 80095b2:	000d      	movs	r5, r1
 80095b4:	9b06      	ldr	r3, [sp, #24]
 80095b6:	9314      	str	r3, [sp, #80]	; 0x50
 80095b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095ba:	4463      	add	r3, ip
 80095bc:	9318      	str	r3, [sp, #96]	; 0x60
 80095be:	0039      	movs	r1, r7
 80095c0:	0030      	movs	r0, r6
 80095c2:	f7f9 f809 	bl	80025d8 <__aeabi_d2iz>
 80095c6:	9012      	str	r0, [sp, #72]	; 0x48
 80095c8:	f7f9 f83c 	bl	8002644 <__aeabi_i2d>
 80095cc:	0002      	movs	r2, r0
 80095ce:	000b      	movs	r3, r1
 80095d0:	0030      	movs	r0, r6
 80095d2:	0039      	movs	r1, r7
 80095d4:	f7f8 fc60 	bl	8001e98 <__aeabi_dsub>
 80095d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095dc:	3301      	adds	r3, #1
 80095de:	9308      	str	r3, [sp, #32]
 80095e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095e2:	0006      	movs	r6, r0
 80095e4:	3330      	adds	r3, #48	; 0x30
 80095e6:	7013      	strb	r3, [r2, #0]
 80095e8:	0022      	movs	r2, r4
 80095ea:	002b      	movs	r3, r5
 80095ec:	000f      	movs	r7, r1
 80095ee:	f7f6 ff2f 	bl	8000450 <__aeabi_dcmplt>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d174      	bne.n	80096e0 <_dtoa_r+0x66c>
 80095f6:	0032      	movs	r2, r6
 80095f8:	003b      	movs	r3, r7
 80095fa:	2000      	movs	r0, #0
 80095fc:	4968      	ldr	r1, [pc, #416]	; (80097a0 <_dtoa_r+0x72c>)
 80095fe:	f7f8 fc4b 	bl	8001e98 <__aeabi_dsub>
 8009602:	0022      	movs	r2, r4
 8009604:	002b      	movs	r3, r5
 8009606:	f7f6 ff23 	bl	8000450 <__aeabi_dcmplt>
 800960a:	2800      	cmp	r0, #0
 800960c:	d000      	beq.n	8009610 <_dtoa_r+0x59c>
 800960e:	e0d7      	b.n	80097c0 <_dtoa_r+0x74c>
 8009610:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009612:	9a08      	ldr	r2, [sp, #32]
 8009614:	4293      	cmp	r3, r2
 8009616:	d100      	bne.n	800961a <_dtoa_r+0x5a6>
 8009618:	e771      	b.n	80094fe <_dtoa_r+0x48a>
 800961a:	2200      	movs	r2, #0
 800961c:	0020      	movs	r0, r4
 800961e:	0029      	movs	r1, r5
 8009620:	4b60      	ldr	r3, [pc, #384]	; (80097a4 <_dtoa_r+0x730>)
 8009622:	f7f8 f977 	bl	8001914 <__aeabi_dmul>
 8009626:	4b5f      	ldr	r3, [pc, #380]	; (80097a4 <_dtoa_r+0x730>)
 8009628:	0004      	movs	r4, r0
 800962a:	000d      	movs	r5, r1
 800962c:	0030      	movs	r0, r6
 800962e:	0039      	movs	r1, r7
 8009630:	2200      	movs	r2, #0
 8009632:	f7f8 f96f 	bl	8001914 <__aeabi_dmul>
 8009636:	9b08      	ldr	r3, [sp, #32]
 8009638:	0006      	movs	r6, r0
 800963a:	000f      	movs	r7, r1
 800963c:	9314      	str	r3, [sp, #80]	; 0x50
 800963e:	e7be      	b.n	80095be <_dtoa_r+0x54a>
 8009640:	0020      	movs	r0, r4
 8009642:	0029      	movs	r1, r5
 8009644:	f7f8 f966 	bl	8001914 <__aeabi_dmul>
 8009648:	9a06      	ldr	r2, [sp, #24]
 800964a:	9b06      	ldr	r3, [sp, #24]
 800964c:	4694      	mov	ip, r2
 800964e:	9308      	str	r3, [sp, #32]
 8009650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009652:	9014      	str	r0, [sp, #80]	; 0x50
 8009654:	9115      	str	r1, [sp, #84]	; 0x54
 8009656:	4463      	add	r3, ip
 8009658:	9319      	str	r3, [sp, #100]	; 0x64
 800965a:	0030      	movs	r0, r6
 800965c:	0039      	movs	r1, r7
 800965e:	f7f8 ffbb 	bl	80025d8 <__aeabi_d2iz>
 8009662:	9018      	str	r0, [sp, #96]	; 0x60
 8009664:	f7f8 ffee 	bl	8002644 <__aeabi_i2d>
 8009668:	0002      	movs	r2, r0
 800966a:	000b      	movs	r3, r1
 800966c:	0030      	movs	r0, r6
 800966e:	0039      	movs	r1, r7
 8009670:	f7f8 fc12 	bl	8001e98 <__aeabi_dsub>
 8009674:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8009676:	9b08      	ldr	r3, [sp, #32]
 8009678:	3630      	adds	r6, #48	; 0x30
 800967a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800967c:	701e      	strb	r6, [r3, #0]
 800967e:	3301      	adds	r3, #1
 8009680:	0004      	movs	r4, r0
 8009682:	000d      	movs	r5, r1
 8009684:	9308      	str	r3, [sp, #32]
 8009686:	4293      	cmp	r3, r2
 8009688:	d12d      	bne.n	80096e6 <_dtoa_r+0x672>
 800968a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800968c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800968e:	9a06      	ldr	r2, [sp, #24]
 8009690:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009692:	4694      	mov	ip, r2
 8009694:	4463      	add	r3, ip
 8009696:	2200      	movs	r2, #0
 8009698:	9308      	str	r3, [sp, #32]
 800969a:	4b47      	ldr	r3, [pc, #284]	; (80097b8 <_dtoa_r+0x744>)
 800969c:	f7f7 f9e0 	bl	8000a60 <__aeabi_dadd>
 80096a0:	0002      	movs	r2, r0
 80096a2:	000b      	movs	r3, r1
 80096a4:	0020      	movs	r0, r4
 80096a6:	0029      	movs	r1, r5
 80096a8:	f7f6 fee6 	bl	8000478 <__aeabi_dcmpgt>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d000      	beq.n	80096b2 <_dtoa_r+0x63e>
 80096b0:	e086      	b.n	80097c0 <_dtoa_r+0x74c>
 80096b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096b6:	2000      	movs	r0, #0
 80096b8:	493f      	ldr	r1, [pc, #252]	; (80097b8 <_dtoa_r+0x744>)
 80096ba:	f7f8 fbed 	bl	8001e98 <__aeabi_dsub>
 80096be:	0002      	movs	r2, r0
 80096c0:	000b      	movs	r3, r1
 80096c2:	0020      	movs	r0, r4
 80096c4:	0029      	movs	r1, r5
 80096c6:	f7f6 fec3 	bl	8000450 <__aeabi_dcmplt>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d100      	bne.n	80096d0 <_dtoa_r+0x65c>
 80096ce:	e716      	b.n	80094fe <_dtoa_r+0x48a>
 80096d0:	9b08      	ldr	r3, [sp, #32]
 80096d2:	001a      	movs	r2, r3
 80096d4:	3a01      	subs	r2, #1
 80096d6:	9208      	str	r2, [sp, #32]
 80096d8:	7812      	ldrb	r2, [r2, #0]
 80096da:	2a30      	cmp	r2, #48	; 0x30
 80096dc:	d0f8      	beq.n	80096d0 <_dtoa_r+0x65c>
 80096de:	9308      	str	r3, [sp, #32]
 80096e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e2:	9303      	str	r3, [sp, #12]
 80096e4:	e046      	b.n	8009774 <_dtoa_r+0x700>
 80096e6:	2200      	movs	r2, #0
 80096e8:	4b2e      	ldr	r3, [pc, #184]	; (80097a4 <_dtoa_r+0x730>)
 80096ea:	f7f8 f913 	bl	8001914 <__aeabi_dmul>
 80096ee:	0006      	movs	r6, r0
 80096f0:	000f      	movs	r7, r1
 80096f2:	e7b2      	b.n	800965a <_dtoa_r+0x5e6>
 80096f4:	9b06      	ldr	r3, [sp, #24]
 80096f6:	9a06      	ldr	r2, [sp, #24]
 80096f8:	930a      	str	r3, [sp, #40]	; 0x28
 80096fa:	9b07      	ldr	r3, [sp, #28]
 80096fc:	9c08      	ldr	r4, [sp, #32]
 80096fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009700:	3b01      	subs	r3, #1
 8009702:	189b      	adds	r3, r3, r2
 8009704:	930b      	str	r3, [sp, #44]	; 0x2c
 8009706:	0032      	movs	r2, r6
 8009708:	003b      	movs	r3, r7
 800970a:	0020      	movs	r0, r4
 800970c:	0029      	movs	r1, r5
 800970e:	f7f7 fd07 	bl	8001120 <__aeabi_ddiv>
 8009712:	f7f8 ff61 	bl	80025d8 <__aeabi_d2iz>
 8009716:	9007      	str	r0, [sp, #28]
 8009718:	f7f8 ff94 	bl	8002644 <__aeabi_i2d>
 800971c:	0032      	movs	r2, r6
 800971e:	003b      	movs	r3, r7
 8009720:	f7f8 f8f8 	bl	8001914 <__aeabi_dmul>
 8009724:	0002      	movs	r2, r0
 8009726:	000b      	movs	r3, r1
 8009728:	0020      	movs	r0, r4
 800972a:	0029      	movs	r1, r5
 800972c:	f7f8 fbb4 	bl	8001e98 <__aeabi_dsub>
 8009730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009732:	001a      	movs	r2, r3
 8009734:	3201      	adds	r2, #1
 8009736:	920a      	str	r2, [sp, #40]	; 0x28
 8009738:	9208      	str	r2, [sp, #32]
 800973a:	9a07      	ldr	r2, [sp, #28]
 800973c:	3230      	adds	r2, #48	; 0x30
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009742:	429a      	cmp	r2, r3
 8009744:	d14f      	bne.n	80097e6 <_dtoa_r+0x772>
 8009746:	0002      	movs	r2, r0
 8009748:	000b      	movs	r3, r1
 800974a:	f7f7 f989 	bl	8000a60 <__aeabi_dadd>
 800974e:	0032      	movs	r2, r6
 8009750:	003b      	movs	r3, r7
 8009752:	0004      	movs	r4, r0
 8009754:	000d      	movs	r5, r1
 8009756:	f7f6 fe8f 	bl	8000478 <__aeabi_dcmpgt>
 800975a:	2800      	cmp	r0, #0
 800975c:	d12e      	bne.n	80097bc <_dtoa_r+0x748>
 800975e:	0032      	movs	r2, r6
 8009760:	003b      	movs	r3, r7
 8009762:	0020      	movs	r0, r4
 8009764:	0029      	movs	r1, r5
 8009766:	f7f6 fe6d 	bl	8000444 <__aeabi_dcmpeq>
 800976a:	2800      	cmp	r0, #0
 800976c:	d002      	beq.n	8009774 <_dtoa_r+0x700>
 800976e:	9b07      	ldr	r3, [sp, #28]
 8009770:	07de      	lsls	r6, r3, #31
 8009772:	d423      	bmi.n	80097bc <_dtoa_r+0x748>
 8009774:	9905      	ldr	r1, [sp, #20]
 8009776:	9804      	ldr	r0, [sp, #16]
 8009778:	f000 fbd6 	bl	8009f28 <_Bfree>
 800977c:	2300      	movs	r3, #0
 800977e:	9a08      	ldr	r2, [sp, #32]
 8009780:	7013      	strb	r3, [r2, #0]
 8009782:	9b03      	ldr	r3, [sp, #12]
 8009784:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009786:	3301      	adds	r3, #1
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800978c:	2b00      	cmp	r3, #0
 800978e:	d100      	bne.n	8009792 <_dtoa_r+0x71e>
 8009790:	e4ba      	b.n	8009108 <_dtoa_r+0x94>
 8009792:	9a08      	ldr	r2, [sp, #32]
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	e4b7      	b.n	8009108 <_dtoa_r+0x94>
 8009798:	0800ced0 	.word	0x0800ced0
 800979c:	0800cea8 	.word	0x0800cea8
 80097a0:	3ff00000 	.word	0x3ff00000
 80097a4:	40240000 	.word	0x40240000
 80097a8:	401c0000 	.word	0x401c0000
 80097ac:	fcc00000 	.word	0xfcc00000
 80097b0:	40140000 	.word	0x40140000
 80097b4:	7cc00000 	.word	0x7cc00000
 80097b8:	3fe00000 	.word	0x3fe00000
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	930e      	str	r3, [sp, #56]	; 0x38
 80097c0:	9b08      	ldr	r3, [sp, #32]
 80097c2:	9308      	str	r3, [sp, #32]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	2a39      	cmp	r2, #57	; 0x39
 80097ca:	d108      	bne.n	80097de <_dtoa_r+0x76a>
 80097cc:	9a06      	ldr	r2, [sp, #24]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d1f7      	bne.n	80097c2 <_dtoa_r+0x74e>
 80097d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097d4:	9906      	ldr	r1, [sp, #24]
 80097d6:	3201      	adds	r2, #1
 80097d8:	920e      	str	r2, [sp, #56]	; 0x38
 80097da:	2230      	movs	r2, #48	; 0x30
 80097dc:	700a      	strb	r2, [r1, #0]
 80097de:	781a      	ldrb	r2, [r3, #0]
 80097e0:	3201      	adds	r2, #1
 80097e2:	701a      	strb	r2, [r3, #0]
 80097e4:	e77c      	b.n	80096e0 <_dtoa_r+0x66c>
 80097e6:	2200      	movs	r2, #0
 80097e8:	4ba9      	ldr	r3, [pc, #676]	; (8009a90 <_dtoa_r+0xa1c>)
 80097ea:	f7f8 f893 	bl	8001914 <__aeabi_dmul>
 80097ee:	2200      	movs	r2, #0
 80097f0:	2300      	movs	r3, #0
 80097f2:	0004      	movs	r4, r0
 80097f4:	000d      	movs	r5, r1
 80097f6:	f7f6 fe25 	bl	8000444 <__aeabi_dcmpeq>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d100      	bne.n	8009800 <_dtoa_r+0x78c>
 80097fe:	e782      	b.n	8009706 <_dtoa_r+0x692>
 8009800:	e7b8      	b.n	8009774 <_dtoa_r+0x700>
 8009802:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009804:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009806:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009808:	2f00      	cmp	r7, #0
 800980a:	d012      	beq.n	8009832 <_dtoa_r+0x7be>
 800980c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800980e:	2a01      	cmp	r2, #1
 8009810:	dc6e      	bgt.n	80098f0 <_dtoa_r+0x87c>
 8009812:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009814:	2a00      	cmp	r2, #0
 8009816:	d065      	beq.n	80098e4 <_dtoa_r+0x870>
 8009818:	4a9e      	ldr	r2, [pc, #632]	; (8009a94 <_dtoa_r+0xa20>)
 800981a:	189b      	adds	r3, r3, r2
 800981c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800981e:	2101      	movs	r1, #1
 8009820:	18d2      	adds	r2, r2, r3
 8009822:	920a      	str	r2, [sp, #40]	; 0x28
 8009824:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009826:	9804      	ldr	r0, [sp, #16]
 8009828:	18d3      	adds	r3, r2, r3
 800982a:	930c      	str	r3, [sp, #48]	; 0x30
 800982c:	f000 fc2c 	bl	800a088 <__i2b>
 8009830:	0007      	movs	r7, r0
 8009832:	2c00      	cmp	r4, #0
 8009834:	d00e      	beq.n	8009854 <_dtoa_r+0x7e0>
 8009836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009838:	2b00      	cmp	r3, #0
 800983a:	dd0b      	ble.n	8009854 <_dtoa_r+0x7e0>
 800983c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800983e:	0023      	movs	r3, r4
 8009840:	4294      	cmp	r4, r2
 8009842:	dd00      	ble.n	8009846 <_dtoa_r+0x7d2>
 8009844:	0013      	movs	r3, r2
 8009846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009848:	1ae4      	subs	r4, r4, r3
 800984a:	1ad2      	subs	r2, r2, r3
 800984c:	920a      	str	r2, [sp, #40]	; 0x28
 800984e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	930c      	str	r3, [sp, #48]	; 0x30
 8009854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009856:	2b00      	cmp	r3, #0
 8009858:	d01e      	beq.n	8009898 <_dtoa_r+0x824>
 800985a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800985c:	2b00      	cmp	r3, #0
 800985e:	d05c      	beq.n	800991a <_dtoa_r+0x8a6>
 8009860:	2d00      	cmp	r5, #0
 8009862:	dd10      	ble.n	8009886 <_dtoa_r+0x812>
 8009864:	0039      	movs	r1, r7
 8009866:	002a      	movs	r2, r5
 8009868:	9804      	ldr	r0, [sp, #16]
 800986a:	f000 fcd5 	bl	800a218 <__pow5mult>
 800986e:	9a05      	ldr	r2, [sp, #20]
 8009870:	0001      	movs	r1, r0
 8009872:	0007      	movs	r7, r0
 8009874:	9804      	ldr	r0, [sp, #16]
 8009876:	f000 fc1f 	bl	800a0b8 <__multiply>
 800987a:	0006      	movs	r6, r0
 800987c:	9905      	ldr	r1, [sp, #20]
 800987e:	9804      	ldr	r0, [sp, #16]
 8009880:	f000 fb52 	bl	8009f28 <_Bfree>
 8009884:	9605      	str	r6, [sp, #20]
 8009886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009888:	1b5a      	subs	r2, r3, r5
 800988a:	42ab      	cmp	r3, r5
 800988c:	d004      	beq.n	8009898 <_dtoa_r+0x824>
 800988e:	9905      	ldr	r1, [sp, #20]
 8009890:	9804      	ldr	r0, [sp, #16]
 8009892:	f000 fcc1 	bl	800a218 <__pow5mult>
 8009896:	9005      	str	r0, [sp, #20]
 8009898:	2101      	movs	r1, #1
 800989a:	9804      	ldr	r0, [sp, #16]
 800989c:	f000 fbf4 	bl	800a088 <__i2b>
 80098a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098a2:	0006      	movs	r6, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	dd3a      	ble.n	800991e <_dtoa_r+0x8aa>
 80098a8:	001a      	movs	r2, r3
 80098aa:	0001      	movs	r1, r0
 80098ac:	9804      	ldr	r0, [sp, #16]
 80098ae:	f000 fcb3 	bl	800a218 <__pow5mult>
 80098b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098b4:	0006      	movs	r6, r0
 80098b6:	2500      	movs	r5, #0
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	dc38      	bgt.n	800992e <_dtoa_r+0x8ba>
 80098bc:	2500      	movs	r5, #0
 80098be:	9b08      	ldr	r3, [sp, #32]
 80098c0:	42ab      	cmp	r3, r5
 80098c2:	d130      	bne.n	8009926 <_dtoa_r+0x8b2>
 80098c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c6:	031b      	lsls	r3, r3, #12
 80098c8:	42ab      	cmp	r3, r5
 80098ca:	d12c      	bne.n	8009926 <_dtoa_r+0x8b2>
 80098cc:	4b72      	ldr	r3, [pc, #456]	; (8009a98 <_dtoa_r+0xa24>)
 80098ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d0:	4213      	tst	r3, r2
 80098d2:	d028      	beq.n	8009926 <_dtoa_r+0x8b2>
 80098d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d6:	3501      	adds	r5, #1
 80098d8:	3301      	adds	r3, #1
 80098da:	930a      	str	r3, [sp, #40]	; 0x28
 80098dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098de:	3301      	adds	r3, #1
 80098e0:	930c      	str	r3, [sp, #48]	; 0x30
 80098e2:	e020      	b.n	8009926 <_dtoa_r+0x8b2>
 80098e4:	2336      	movs	r3, #54	; 0x36
 80098e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80098ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80098ec:	1a9b      	subs	r3, r3, r2
 80098ee:	e795      	b.n	800981c <_dtoa_r+0x7a8>
 80098f0:	9b07      	ldr	r3, [sp, #28]
 80098f2:	1e5d      	subs	r5, r3, #1
 80098f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f6:	42ab      	cmp	r3, r5
 80098f8:	db07      	blt.n	800990a <_dtoa_r+0x896>
 80098fa:	1b5d      	subs	r5, r3, r5
 80098fc:	9b07      	ldr	r3, [sp, #28]
 80098fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009900:	2b00      	cmp	r3, #0
 8009902:	da8b      	bge.n	800981c <_dtoa_r+0x7a8>
 8009904:	1ae4      	subs	r4, r4, r3
 8009906:	2300      	movs	r3, #0
 8009908:	e788      	b.n	800981c <_dtoa_r+0x7a8>
 800990a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800990c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800990e:	1aeb      	subs	r3, r5, r3
 8009910:	18d3      	adds	r3, r2, r3
 8009912:	950d      	str	r5, [sp, #52]	; 0x34
 8009914:	9313      	str	r3, [sp, #76]	; 0x4c
 8009916:	2500      	movs	r5, #0
 8009918:	e7f0      	b.n	80098fc <_dtoa_r+0x888>
 800991a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800991c:	e7b7      	b.n	800988e <_dtoa_r+0x81a>
 800991e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009920:	2500      	movs	r5, #0
 8009922:	2b01      	cmp	r3, #1
 8009924:	ddca      	ble.n	80098bc <_dtoa_r+0x848>
 8009926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009928:	2001      	movs	r0, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d008      	beq.n	8009940 <_dtoa_r+0x8cc>
 800992e:	6933      	ldr	r3, [r6, #16]
 8009930:	3303      	adds	r3, #3
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	18f3      	adds	r3, r6, r3
 8009936:	6858      	ldr	r0, [r3, #4]
 8009938:	f000 fb5e 	bl	8009ff8 <__hi0bits>
 800993c:	2320      	movs	r3, #32
 800993e:	1a18      	subs	r0, r3, r0
 8009940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009942:	1818      	adds	r0, r3, r0
 8009944:	0002      	movs	r2, r0
 8009946:	231f      	movs	r3, #31
 8009948:	401a      	ands	r2, r3
 800994a:	4218      	tst	r0, r3
 800994c:	d047      	beq.n	80099de <_dtoa_r+0x96a>
 800994e:	3301      	adds	r3, #1
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	2b04      	cmp	r3, #4
 8009954:	dd3f      	ble.n	80099d6 <_dtoa_r+0x962>
 8009956:	231c      	movs	r3, #28
 8009958:	1a9b      	subs	r3, r3, r2
 800995a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800995c:	18e4      	adds	r4, r4, r3
 800995e:	18d2      	adds	r2, r2, r3
 8009960:	920a      	str	r2, [sp, #40]	; 0x28
 8009962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009964:	18d3      	adds	r3, r2, r3
 8009966:	930c      	str	r3, [sp, #48]	; 0x30
 8009968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800996a:	2b00      	cmp	r3, #0
 800996c:	dd05      	ble.n	800997a <_dtoa_r+0x906>
 800996e:	001a      	movs	r2, r3
 8009970:	9905      	ldr	r1, [sp, #20]
 8009972:	9804      	ldr	r0, [sp, #16]
 8009974:	f000 fcac 	bl	800a2d0 <__lshift>
 8009978:	9005      	str	r0, [sp, #20]
 800997a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800997c:	2b00      	cmp	r3, #0
 800997e:	dd05      	ble.n	800998c <_dtoa_r+0x918>
 8009980:	0031      	movs	r1, r6
 8009982:	001a      	movs	r2, r3
 8009984:	9804      	ldr	r0, [sp, #16]
 8009986:	f000 fca3 	bl	800a2d0 <__lshift>
 800998a:	0006      	movs	r6, r0
 800998c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800998e:	2b00      	cmp	r3, #0
 8009990:	d027      	beq.n	80099e2 <_dtoa_r+0x96e>
 8009992:	0031      	movs	r1, r6
 8009994:	9805      	ldr	r0, [sp, #20]
 8009996:	f000 fd09 	bl	800a3ac <__mcmp>
 800999a:	2800      	cmp	r0, #0
 800999c:	da21      	bge.n	80099e2 <_dtoa_r+0x96e>
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	220a      	movs	r2, #10
 80099a2:	3b01      	subs	r3, #1
 80099a4:	9303      	str	r3, [sp, #12]
 80099a6:	9905      	ldr	r1, [sp, #20]
 80099a8:	2300      	movs	r3, #0
 80099aa:	9804      	ldr	r0, [sp, #16]
 80099ac:	f000 fae0 	bl	8009f70 <__multadd>
 80099b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099b2:	9005      	str	r0, [sp, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d100      	bne.n	80099ba <_dtoa_r+0x946>
 80099b8:	e15d      	b.n	8009c76 <_dtoa_r+0xc02>
 80099ba:	2300      	movs	r3, #0
 80099bc:	0039      	movs	r1, r7
 80099be:	220a      	movs	r2, #10
 80099c0:	9804      	ldr	r0, [sp, #16]
 80099c2:	f000 fad5 	bl	8009f70 <__multadd>
 80099c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c8:	0007      	movs	r7, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dc49      	bgt.n	8009a62 <_dtoa_r+0x9ee>
 80099ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	dc0e      	bgt.n	80099f2 <_dtoa_r+0x97e>
 80099d4:	e045      	b.n	8009a62 <_dtoa_r+0x9ee>
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d0c6      	beq.n	8009968 <_dtoa_r+0x8f4>
 80099da:	331c      	adds	r3, #28
 80099dc:	e7bd      	b.n	800995a <_dtoa_r+0x8e6>
 80099de:	0013      	movs	r3, r2
 80099e0:	e7fb      	b.n	80099da <_dtoa_r+0x966>
 80099e2:	9b07      	ldr	r3, [sp, #28]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dc36      	bgt.n	8009a56 <_dtoa_r+0x9e2>
 80099e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	dd33      	ble.n	8009a56 <_dtoa_r+0x9e2>
 80099ee:	9b07      	ldr	r3, [sp, #28]
 80099f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10c      	bne.n	8009a12 <_dtoa_r+0x99e>
 80099f8:	0031      	movs	r1, r6
 80099fa:	2205      	movs	r2, #5
 80099fc:	9804      	ldr	r0, [sp, #16]
 80099fe:	f000 fab7 	bl	8009f70 <__multadd>
 8009a02:	0006      	movs	r6, r0
 8009a04:	0001      	movs	r1, r0
 8009a06:	9805      	ldr	r0, [sp, #20]
 8009a08:	f000 fcd0 	bl	800a3ac <__mcmp>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	dd00      	ble.n	8009a12 <_dtoa_r+0x99e>
 8009a10:	e59f      	b.n	8009552 <_dtoa_r+0x4de>
 8009a12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a14:	43db      	mvns	r3, r3
 8009a16:	9303      	str	r3, [sp, #12]
 8009a18:	9b06      	ldr	r3, [sp, #24]
 8009a1a:	9308      	str	r3, [sp, #32]
 8009a1c:	2500      	movs	r5, #0
 8009a1e:	0031      	movs	r1, r6
 8009a20:	9804      	ldr	r0, [sp, #16]
 8009a22:	f000 fa81 	bl	8009f28 <_Bfree>
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	d100      	bne.n	8009a2c <_dtoa_r+0x9b8>
 8009a2a:	e6a3      	b.n	8009774 <_dtoa_r+0x700>
 8009a2c:	2d00      	cmp	r5, #0
 8009a2e:	d005      	beq.n	8009a3c <_dtoa_r+0x9c8>
 8009a30:	42bd      	cmp	r5, r7
 8009a32:	d003      	beq.n	8009a3c <_dtoa_r+0x9c8>
 8009a34:	0029      	movs	r1, r5
 8009a36:	9804      	ldr	r0, [sp, #16]
 8009a38:	f000 fa76 	bl	8009f28 <_Bfree>
 8009a3c:	0039      	movs	r1, r7
 8009a3e:	9804      	ldr	r0, [sp, #16]
 8009a40:	f000 fa72 	bl	8009f28 <_Bfree>
 8009a44:	e696      	b.n	8009774 <_dtoa_r+0x700>
 8009a46:	2600      	movs	r6, #0
 8009a48:	0037      	movs	r7, r6
 8009a4a:	e7e2      	b.n	8009a12 <_dtoa_r+0x99e>
 8009a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a4e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009a50:	9303      	str	r3, [sp, #12]
 8009a52:	0037      	movs	r7, r6
 8009a54:	e57d      	b.n	8009552 <_dtoa_r+0x4de>
 8009a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d100      	bne.n	8009a5e <_dtoa_r+0x9ea>
 8009a5c:	e0c3      	b.n	8009be6 <_dtoa_r+0xb72>
 8009a5e:	9b07      	ldr	r3, [sp, #28]
 8009a60:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a62:	2c00      	cmp	r4, #0
 8009a64:	dd05      	ble.n	8009a72 <_dtoa_r+0x9fe>
 8009a66:	0039      	movs	r1, r7
 8009a68:	0022      	movs	r2, r4
 8009a6a:	9804      	ldr	r0, [sp, #16]
 8009a6c:	f000 fc30 	bl	800a2d0 <__lshift>
 8009a70:	0007      	movs	r7, r0
 8009a72:	0038      	movs	r0, r7
 8009a74:	2d00      	cmp	r5, #0
 8009a76:	d024      	beq.n	8009ac2 <_dtoa_r+0xa4e>
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	9804      	ldr	r0, [sp, #16]
 8009a7c:	f000 fa10 	bl	8009ea0 <_Balloc>
 8009a80:	1e04      	subs	r4, r0, #0
 8009a82:	d111      	bne.n	8009aa8 <_dtoa_r+0xa34>
 8009a84:	0022      	movs	r2, r4
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <_dtoa_r+0xa28>)
 8009a88:	4805      	ldr	r0, [pc, #20]	; (8009aa0 <_dtoa_r+0xa2c>)
 8009a8a:	4906      	ldr	r1, [pc, #24]	; (8009aa4 <_dtoa_r+0xa30>)
 8009a8c:	f7ff fb07 	bl	800909e <_dtoa_r+0x2a>
 8009a90:	40240000 	.word	0x40240000
 8009a94:	00000433 	.word	0x00000433
 8009a98:	7ff00000 	.word	0x7ff00000
 8009a9c:	0800ce38 	.word	0x0800ce38
 8009aa0:	0800cde0 	.word	0x0800cde0
 8009aa4:	000002ef 	.word	0x000002ef
 8009aa8:	0039      	movs	r1, r7
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	310c      	adds	r1, #12
 8009aae:	3202      	adds	r2, #2
 8009ab0:	0092      	lsls	r2, r2, #2
 8009ab2:	300c      	adds	r0, #12
 8009ab4:	f7ff fa45 	bl	8008f42 <memcpy>
 8009ab8:	2201      	movs	r2, #1
 8009aba:	0021      	movs	r1, r4
 8009abc:	9804      	ldr	r0, [sp, #16]
 8009abe:	f000 fc07 	bl	800a2d0 <__lshift>
 8009ac2:	9b06      	ldr	r3, [sp, #24]
 8009ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ac6:	9307      	str	r3, [sp, #28]
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	189b      	adds	r3, r3, r2
 8009acc:	2201      	movs	r2, #1
 8009ace:	003d      	movs	r5, r7
 8009ad0:	0007      	movs	r7, r0
 8009ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8009ad4:	9b08      	ldr	r3, [sp, #32]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	930d      	str	r3, [sp, #52]	; 0x34
 8009ada:	0031      	movs	r1, r6
 8009adc:	9805      	ldr	r0, [sp, #20]
 8009ade:	f7ff fa39 	bl	8008f54 <quorem>
 8009ae2:	0029      	movs	r1, r5
 8009ae4:	0004      	movs	r4, r0
 8009ae6:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ae8:	9805      	ldr	r0, [sp, #20]
 8009aea:	f000 fc5f 	bl	800a3ac <__mcmp>
 8009aee:	003a      	movs	r2, r7
 8009af0:	900c      	str	r0, [sp, #48]	; 0x30
 8009af2:	0031      	movs	r1, r6
 8009af4:	9804      	ldr	r0, [sp, #16]
 8009af6:	f000 fc75 	bl	800a3e4 <__mdiff>
 8009afa:	2201      	movs	r2, #1
 8009afc:	68c3      	ldr	r3, [r0, #12]
 8009afe:	3430      	adds	r4, #48	; 0x30
 8009b00:	9008      	str	r0, [sp, #32]
 8009b02:	920a      	str	r2, [sp, #40]	; 0x28
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d104      	bne.n	8009b12 <_dtoa_r+0xa9e>
 8009b08:	0001      	movs	r1, r0
 8009b0a:	9805      	ldr	r0, [sp, #20]
 8009b0c:	f000 fc4e 	bl	800a3ac <__mcmp>
 8009b10:	900a      	str	r0, [sp, #40]	; 0x28
 8009b12:	9908      	ldr	r1, [sp, #32]
 8009b14:	9804      	ldr	r0, [sp, #16]
 8009b16:	f000 fa07 	bl	8009f28 <_Bfree>
 8009b1a:	9b07      	ldr	r3, [sp, #28]
 8009b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b1e:	3301      	adds	r3, #1
 8009b20:	9308      	str	r3, [sp, #32]
 8009b22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b24:	4313      	orrs	r3, r2
 8009b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	d109      	bne.n	8009b40 <_dtoa_r+0xacc>
 8009b2c:	2c39      	cmp	r4, #57	; 0x39
 8009b2e:	d022      	beq.n	8009b76 <_dtoa_r+0xb02>
 8009b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	dd01      	ble.n	8009b3a <_dtoa_r+0xac6>
 8009b36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009b38:	3431      	adds	r4, #49	; 0x31
 8009b3a:	9b07      	ldr	r3, [sp, #28]
 8009b3c:	701c      	strb	r4, [r3, #0]
 8009b3e:	e76e      	b.n	8009a1e <_dtoa_r+0x9aa>
 8009b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	db04      	blt.n	8009b50 <_dtoa_r+0xadc>
 8009b46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	d11e      	bne.n	8009b8e <_dtoa_r+0xb1a>
 8009b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	ddf1      	ble.n	8009b3a <_dtoa_r+0xac6>
 8009b56:	9905      	ldr	r1, [sp, #20]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	9804      	ldr	r0, [sp, #16]
 8009b5c:	f000 fbb8 	bl	800a2d0 <__lshift>
 8009b60:	0031      	movs	r1, r6
 8009b62:	9005      	str	r0, [sp, #20]
 8009b64:	f000 fc22 	bl	800a3ac <__mcmp>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	dc02      	bgt.n	8009b72 <_dtoa_r+0xafe>
 8009b6c:	d1e5      	bne.n	8009b3a <_dtoa_r+0xac6>
 8009b6e:	07e3      	lsls	r3, r4, #31
 8009b70:	d5e3      	bpl.n	8009b3a <_dtoa_r+0xac6>
 8009b72:	2c39      	cmp	r4, #57	; 0x39
 8009b74:	d1df      	bne.n	8009b36 <_dtoa_r+0xac2>
 8009b76:	2339      	movs	r3, #57	; 0x39
 8009b78:	9a07      	ldr	r2, [sp, #28]
 8009b7a:	7013      	strb	r3, [r2, #0]
 8009b7c:	9b08      	ldr	r3, [sp, #32]
 8009b7e:	9308      	str	r3, [sp, #32]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	781a      	ldrb	r2, [r3, #0]
 8009b84:	2a39      	cmp	r2, #57	; 0x39
 8009b86:	d063      	beq.n	8009c50 <_dtoa_r+0xbdc>
 8009b88:	3201      	adds	r2, #1
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e747      	b.n	8009a1e <_dtoa_r+0x9aa>
 8009b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dd03      	ble.n	8009b9c <_dtoa_r+0xb28>
 8009b94:	2c39      	cmp	r4, #57	; 0x39
 8009b96:	d0ee      	beq.n	8009b76 <_dtoa_r+0xb02>
 8009b98:	3401      	adds	r4, #1
 8009b9a:	e7ce      	b.n	8009b3a <_dtoa_r+0xac6>
 8009b9c:	9b07      	ldr	r3, [sp, #28]
 8009b9e:	9a07      	ldr	r2, [sp, #28]
 8009ba0:	701c      	strb	r4, [r3, #0]
 8009ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d03e      	beq.n	8009c26 <_dtoa_r+0xbb2>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	220a      	movs	r2, #10
 8009bac:	9905      	ldr	r1, [sp, #20]
 8009bae:	9804      	ldr	r0, [sp, #16]
 8009bb0:	f000 f9de 	bl	8009f70 <__multadd>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9005      	str	r0, [sp, #20]
 8009bb8:	220a      	movs	r2, #10
 8009bba:	0029      	movs	r1, r5
 8009bbc:	9804      	ldr	r0, [sp, #16]
 8009bbe:	42bd      	cmp	r5, r7
 8009bc0:	d106      	bne.n	8009bd0 <_dtoa_r+0xb5c>
 8009bc2:	f000 f9d5 	bl	8009f70 <__multadd>
 8009bc6:	0005      	movs	r5, r0
 8009bc8:	0007      	movs	r7, r0
 8009bca:	9b08      	ldr	r3, [sp, #32]
 8009bcc:	9307      	str	r3, [sp, #28]
 8009bce:	e784      	b.n	8009ada <_dtoa_r+0xa66>
 8009bd0:	f000 f9ce 	bl	8009f70 <__multadd>
 8009bd4:	0039      	movs	r1, r7
 8009bd6:	0005      	movs	r5, r0
 8009bd8:	2300      	movs	r3, #0
 8009bda:	220a      	movs	r2, #10
 8009bdc:	9804      	ldr	r0, [sp, #16]
 8009bde:	f000 f9c7 	bl	8009f70 <__multadd>
 8009be2:	0007      	movs	r7, r0
 8009be4:	e7f1      	b.n	8009bca <_dtoa_r+0xb56>
 8009be6:	9b07      	ldr	r3, [sp, #28]
 8009be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bea:	2500      	movs	r5, #0
 8009bec:	0031      	movs	r1, r6
 8009bee:	9805      	ldr	r0, [sp, #20]
 8009bf0:	f7ff f9b0 	bl	8008f54 <quorem>
 8009bf4:	9b06      	ldr	r3, [sp, #24]
 8009bf6:	3030      	adds	r0, #48	; 0x30
 8009bf8:	5558      	strb	r0, [r3, r5]
 8009bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	0004      	movs	r4, r0
 8009c00:	42ab      	cmp	r3, r5
 8009c02:	dd07      	ble.n	8009c14 <_dtoa_r+0xba0>
 8009c04:	2300      	movs	r3, #0
 8009c06:	220a      	movs	r2, #10
 8009c08:	9905      	ldr	r1, [sp, #20]
 8009c0a:	9804      	ldr	r0, [sp, #16]
 8009c0c:	f000 f9b0 	bl	8009f70 <__multadd>
 8009c10:	9005      	str	r0, [sp, #20]
 8009c12:	e7eb      	b.n	8009bec <_dtoa_r+0xb78>
 8009c14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c16:	2301      	movs	r3, #1
 8009c18:	2a00      	cmp	r2, #0
 8009c1a:	dd00      	ble.n	8009c1e <_dtoa_r+0xbaa>
 8009c1c:	0013      	movs	r3, r2
 8009c1e:	2500      	movs	r5, #0
 8009c20:	9a06      	ldr	r2, [sp, #24]
 8009c22:	18d3      	adds	r3, r2, r3
 8009c24:	9308      	str	r3, [sp, #32]
 8009c26:	9905      	ldr	r1, [sp, #20]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	9804      	ldr	r0, [sp, #16]
 8009c2c:	f000 fb50 	bl	800a2d0 <__lshift>
 8009c30:	0031      	movs	r1, r6
 8009c32:	9005      	str	r0, [sp, #20]
 8009c34:	f000 fbba 	bl	800a3ac <__mcmp>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	dc9f      	bgt.n	8009b7c <_dtoa_r+0xb08>
 8009c3c:	d101      	bne.n	8009c42 <_dtoa_r+0xbce>
 8009c3e:	07e4      	lsls	r4, r4, #31
 8009c40:	d49c      	bmi.n	8009b7c <_dtoa_r+0xb08>
 8009c42:	9b08      	ldr	r3, [sp, #32]
 8009c44:	9308      	str	r3, [sp, #32]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	2a30      	cmp	r2, #48	; 0x30
 8009c4c:	d0fa      	beq.n	8009c44 <_dtoa_r+0xbd0>
 8009c4e:	e6e6      	b.n	8009a1e <_dtoa_r+0x9aa>
 8009c50:	9a06      	ldr	r2, [sp, #24]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d193      	bne.n	8009b7e <_dtoa_r+0xb0a>
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	9303      	str	r3, [sp, #12]
 8009c5c:	2331      	movs	r3, #49	; 0x31
 8009c5e:	7013      	strb	r3, [r2, #0]
 8009c60:	e6dd      	b.n	8009a1e <_dtoa_r+0x9aa>
 8009c62:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <_dtoa_r+0xc14>)
 8009c64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c66:	9306      	str	r3, [sp, #24]
 8009c68:	4b08      	ldr	r3, [pc, #32]	; (8009c8c <_dtoa_r+0xc18>)
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	d001      	beq.n	8009c72 <_dtoa_r+0xbfe>
 8009c6e:	f7ff fa49 	bl	8009104 <_dtoa_r+0x90>
 8009c72:	f7ff fa49 	bl	8009108 <_dtoa_r+0x94>
 8009c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dcb6      	bgt.n	8009bea <_dtoa_r+0xb76>
 8009c7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	dd00      	ble.n	8009c84 <_dtoa_r+0xc10>
 8009c82:	e6b6      	b.n	80099f2 <_dtoa_r+0x97e>
 8009c84:	e7b1      	b.n	8009bea <_dtoa_r+0xb76>
 8009c86:	46c0      	nop			; (mov r8, r8)
 8009c88:	0800cdbc 	.word	0x0800cdbc
 8009c8c:	0800cdc4 	.word	0x0800cdc4

08009c90 <_free_r>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	0005      	movs	r5, r0
 8009c94:	2900      	cmp	r1, #0
 8009c96:	d010      	beq.n	8009cba <_free_r+0x2a>
 8009c98:	1f0c      	subs	r4, r1, #4
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da00      	bge.n	8009ca2 <_free_r+0x12>
 8009ca0:	18e4      	adds	r4, r4, r3
 8009ca2:	0028      	movs	r0, r5
 8009ca4:	f000 f8ec 	bl	8009e80 <__malloc_lock>
 8009ca8:	4a1d      	ldr	r2, [pc, #116]	; (8009d20 <_free_r+0x90>)
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d105      	bne.n	8009cbc <_free_r+0x2c>
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	6014      	str	r4, [r2, #0]
 8009cb4:	0028      	movs	r0, r5
 8009cb6:	f000 f8eb 	bl	8009e90 <__malloc_unlock>
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	d908      	bls.n	8009cd2 <_free_r+0x42>
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	1821      	adds	r1, r4, r0
 8009cc4:	428b      	cmp	r3, r1
 8009cc6:	d1f3      	bne.n	8009cb0 <_free_r+0x20>
 8009cc8:	6819      	ldr	r1, [r3, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	1809      	adds	r1, r1, r0
 8009cce:	6021      	str	r1, [r4, #0]
 8009cd0:	e7ee      	b.n	8009cb0 <_free_r+0x20>
 8009cd2:	001a      	movs	r2, r3
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <_free_r+0x4e>
 8009cda:	42a3      	cmp	r3, r4
 8009cdc:	d9f9      	bls.n	8009cd2 <_free_r+0x42>
 8009cde:	6811      	ldr	r1, [r2, #0]
 8009ce0:	1850      	adds	r0, r2, r1
 8009ce2:	42a0      	cmp	r0, r4
 8009ce4:	d10b      	bne.n	8009cfe <_free_r+0x6e>
 8009ce6:	6820      	ldr	r0, [r4, #0]
 8009ce8:	1809      	adds	r1, r1, r0
 8009cea:	1850      	adds	r0, r2, r1
 8009cec:	6011      	str	r1, [r2, #0]
 8009cee:	4283      	cmp	r3, r0
 8009cf0:	d1e0      	bne.n	8009cb4 <_free_r+0x24>
 8009cf2:	6818      	ldr	r0, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	1841      	adds	r1, r0, r1
 8009cf8:	6011      	str	r1, [r2, #0]
 8009cfa:	6053      	str	r3, [r2, #4]
 8009cfc:	e7da      	b.n	8009cb4 <_free_r+0x24>
 8009cfe:	42a0      	cmp	r0, r4
 8009d00:	d902      	bls.n	8009d08 <_free_r+0x78>
 8009d02:	230c      	movs	r3, #12
 8009d04:	602b      	str	r3, [r5, #0]
 8009d06:	e7d5      	b.n	8009cb4 <_free_r+0x24>
 8009d08:	6820      	ldr	r0, [r4, #0]
 8009d0a:	1821      	adds	r1, r4, r0
 8009d0c:	428b      	cmp	r3, r1
 8009d0e:	d103      	bne.n	8009d18 <_free_r+0x88>
 8009d10:	6819      	ldr	r1, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	1809      	adds	r1, r1, r0
 8009d16:	6021      	str	r1, [r4, #0]
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	6054      	str	r4, [r2, #4]
 8009d1c:	e7ca      	b.n	8009cb4 <_free_r+0x24>
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	20000fa4 	.word	0x20000fa4

08009d24 <malloc>:
 8009d24:	b510      	push	{r4, lr}
 8009d26:	4b03      	ldr	r3, [pc, #12]	; (8009d34 <malloc+0x10>)
 8009d28:	0001      	movs	r1, r0
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	f000 f826 	bl	8009d7c <_malloc_r>
 8009d30:	bd10      	pop	{r4, pc}
 8009d32:	46c0      	nop			; (mov r8, r8)
 8009d34:	200000b0 	.word	0x200000b0

08009d38 <sbrk_aligned>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	4e0f      	ldr	r6, [pc, #60]	; (8009d78 <sbrk_aligned+0x40>)
 8009d3c:	000d      	movs	r5, r1
 8009d3e:	6831      	ldr	r1, [r6, #0]
 8009d40:	0004      	movs	r4, r0
 8009d42:	2900      	cmp	r1, #0
 8009d44:	d102      	bne.n	8009d4c <sbrk_aligned+0x14>
 8009d46:	f000 fcfb 	bl	800a740 <_sbrk_r>
 8009d4a:	6030      	str	r0, [r6, #0]
 8009d4c:	0029      	movs	r1, r5
 8009d4e:	0020      	movs	r0, r4
 8009d50:	f000 fcf6 	bl	800a740 <_sbrk_r>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d00a      	beq.n	8009d6e <sbrk_aligned+0x36>
 8009d58:	2303      	movs	r3, #3
 8009d5a:	1cc5      	adds	r5, r0, #3
 8009d5c:	439d      	bics	r5, r3
 8009d5e:	42a8      	cmp	r0, r5
 8009d60:	d007      	beq.n	8009d72 <sbrk_aligned+0x3a>
 8009d62:	1a29      	subs	r1, r5, r0
 8009d64:	0020      	movs	r0, r4
 8009d66:	f000 fceb 	bl	800a740 <_sbrk_r>
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	d101      	bne.n	8009d72 <sbrk_aligned+0x3a>
 8009d6e:	2501      	movs	r5, #1
 8009d70:	426d      	negs	r5, r5
 8009d72:	0028      	movs	r0, r5
 8009d74:	bd70      	pop	{r4, r5, r6, pc}
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	20000fa8 	.word	0x20000fa8

08009d7c <_malloc_r>:
 8009d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d7e:	2203      	movs	r2, #3
 8009d80:	1ccb      	adds	r3, r1, #3
 8009d82:	4393      	bics	r3, r2
 8009d84:	3308      	adds	r3, #8
 8009d86:	0006      	movs	r6, r0
 8009d88:	001f      	movs	r7, r3
 8009d8a:	2b0c      	cmp	r3, #12
 8009d8c:	d238      	bcs.n	8009e00 <_malloc_r+0x84>
 8009d8e:	270c      	movs	r7, #12
 8009d90:	42b9      	cmp	r1, r7
 8009d92:	d837      	bhi.n	8009e04 <_malloc_r+0x88>
 8009d94:	0030      	movs	r0, r6
 8009d96:	f000 f873 	bl	8009e80 <__malloc_lock>
 8009d9a:	4b38      	ldr	r3, [pc, #224]	; (8009e7c <_malloc_r+0x100>)
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	001c      	movs	r4, r3
 8009da2:	2c00      	cmp	r4, #0
 8009da4:	d133      	bne.n	8009e0e <_malloc_r+0x92>
 8009da6:	0039      	movs	r1, r7
 8009da8:	0030      	movs	r0, r6
 8009daa:	f7ff ffc5 	bl	8009d38 <sbrk_aligned>
 8009dae:	0004      	movs	r4, r0
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d15e      	bne.n	8009e72 <_malloc_r+0xf6>
 8009db4:	9b00      	ldr	r3, [sp, #0]
 8009db6:	681c      	ldr	r4, [r3, #0]
 8009db8:	0025      	movs	r5, r4
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	d14e      	bne.n	8009e5c <_malloc_r+0xe0>
 8009dbe:	2c00      	cmp	r4, #0
 8009dc0:	d051      	beq.n	8009e66 <_malloc_r+0xea>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	0029      	movs	r1, r5
 8009dc6:	18e3      	adds	r3, r4, r3
 8009dc8:	0030      	movs	r0, r6
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	f000 fcb8 	bl	800a740 <_sbrk_r>
 8009dd0:	9b01      	ldr	r3, [sp, #4]
 8009dd2:	4283      	cmp	r3, r0
 8009dd4:	d147      	bne.n	8009e66 <_malloc_r+0xea>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	0030      	movs	r0, r6
 8009dda:	1aff      	subs	r7, r7, r3
 8009ddc:	0039      	movs	r1, r7
 8009dde:	f7ff ffab 	bl	8009d38 <sbrk_aligned>
 8009de2:	3001      	adds	r0, #1
 8009de4:	d03f      	beq.n	8009e66 <_malloc_r+0xea>
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	19db      	adds	r3, r3, r7
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	9b00      	ldr	r3, [sp, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d040      	beq.n	8009e76 <_malloc_r+0xfa>
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	42a2      	cmp	r2, r4
 8009df8:	d133      	bne.n	8009e62 <_malloc_r+0xe6>
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	605a      	str	r2, [r3, #4]
 8009dfe:	e014      	b.n	8009e2a <_malloc_r+0xae>
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	dac5      	bge.n	8009d90 <_malloc_r+0x14>
 8009e04:	230c      	movs	r3, #12
 8009e06:	2500      	movs	r5, #0
 8009e08:	6033      	str	r3, [r6, #0]
 8009e0a:	0028      	movs	r0, r5
 8009e0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e0e:	6821      	ldr	r1, [r4, #0]
 8009e10:	1bc9      	subs	r1, r1, r7
 8009e12:	d420      	bmi.n	8009e56 <_malloc_r+0xda>
 8009e14:	290b      	cmp	r1, #11
 8009e16:	d918      	bls.n	8009e4a <_malloc_r+0xce>
 8009e18:	19e2      	adds	r2, r4, r7
 8009e1a:	6027      	str	r7, [r4, #0]
 8009e1c:	42a3      	cmp	r3, r4
 8009e1e:	d112      	bne.n	8009e46 <_malloc_r+0xca>
 8009e20:	9b00      	ldr	r3, [sp, #0]
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	6863      	ldr	r3, [r4, #4]
 8009e26:	6011      	str	r1, [r2, #0]
 8009e28:	6053      	str	r3, [r2, #4]
 8009e2a:	0030      	movs	r0, r6
 8009e2c:	0025      	movs	r5, r4
 8009e2e:	f000 f82f 	bl	8009e90 <__malloc_unlock>
 8009e32:	2207      	movs	r2, #7
 8009e34:	350b      	adds	r5, #11
 8009e36:	1d23      	adds	r3, r4, #4
 8009e38:	4395      	bics	r5, r2
 8009e3a:	1aea      	subs	r2, r5, r3
 8009e3c:	429d      	cmp	r5, r3
 8009e3e:	d0e4      	beq.n	8009e0a <_malloc_r+0x8e>
 8009e40:	1b5b      	subs	r3, r3, r5
 8009e42:	50a3      	str	r3, [r4, r2]
 8009e44:	e7e1      	b.n	8009e0a <_malloc_r+0x8e>
 8009e46:	605a      	str	r2, [r3, #4]
 8009e48:	e7ec      	b.n	8009e24 <_malloc_r+0xa8>
 8009e4a:	6862      	ldr	r2, [r4, #4]
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	d1d5      	bne.n	8009dfc <_malloc_r+0x80>
 8009e50:	9b00      	ldr	r3, [sp, #0]
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e7e9      	b.n	8009e2a <_malloc_r+0xae>
 8009e56:	0023      	movs	r3, r4
 8009e58:	6864      	ldr	r4, [r4, #4]
 8009e5a:	e7a2      	b.n	8009da2 <_malloc_r+0x26>
 8009e5c:	002c      	movs	r4, r5
 8009e5e:	686d      	ldr	r5, [r5, #4]
 8009e60:	e7ab      	b.n	8009dba <_malloc_r+0x3e>
 8009e62:	0013      	movs	r3, r2
 8009e64:	e7c4      	b.n	8009df0 <_malloc_r+0x74>
 8009e66:	230c      	movs	r3, #12
 8009e68:	0030      	movs	r0, r6
 8009e6a:	6033      	str	r3, [r6, #0]
 8009e6c:	f000 f810 	bl	8009e90 <__malloc_unlock>
 8009e70:	e7cb      	b.n	8009e0a <_malloc_r+0x8e>
 8009e72:	6027      	str	r7, [r4, #0]
 8009e74:	e7d9      	b.n	8009e2a <_malloc_r+0xae>
 8009e76:	605b      	str	r3, [r3, #4]
 8009e78:	deff      	udf	#255	; 0xff
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	20000fa4 	.word	0x20000fa4

08009e80 <__malloc_lock>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	4802      	ldr	r0, [pc, #8]	; (8009e8c <__malloc_lock+0xc>)
 8009e84:	f7ff f850 	bl	8008f28 <__retarget_lock_acquire_recursive>
 8009e88:	bd10      	pop	{r4, pc}
 8009e8a:	46c0      	nop			; (mov r8, r8)
 8009e8c:	20000fa0 	.word	0x20000fa0

08009e90 <__malloc_unlock>:
 8009e90:	b510      	push	{r4, lr}
 8009e92:	4802      	ldr	r0, [pc, #8]	; (8009e9c <__malloc_unlock+0xc>)
 8009e94:	f7ff f849 	bl	8008f2a <__retarget_lock_release_recursive>
 8009e98:	bd10      	pop	{r4, pc}
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	20000fa0 	.word	0x20000fa0

08009ea0 <_Balloc>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	69c5      	ldr	r5, [r0, #28]
 8009ea4:	0006      	movs	r6, r0
 8009ea6:	000c      	movs	r4, r1
 8009ea8:	2d00      	cmp	r5, #0
 8009eaa:	d10e      	bne.n	8009eca <_Balloc+0x2a>
 8009eac:	2010      	movs	r0, #16
 8009eae:	f7ff ff39 	bl	8009d24 <malloc>
 8009eb2:	1e02      	subs	r2, r0, #0
 8009eb4:	61f0      	str	r0, [r6, #28]
 8009eb6:	d104      	bne.n	8009ec2 <_Balloc+0x22>
 8009eb8:	216b      	movs	r1, #107	; 0x6b
 8009eba:	4b19      	ldr	r3, [pc, #100]	; (8009f20 <_Balloc+0x80>)
 8009ebc:	4819      	ldr	r0, [pc, #100]	; (8009f24 <_Balloc+0x84>)
 8009ebe:	f000 fc51 	bl	800a764 <__assert_func>
 8009ec2:	6045      	str	r5, [r0, #4]
 8009ec4:	6085      	str	r5, [r0, #8]
 8009ec6:	6005      	str	r5, [r0, #0]
 8009ec8:	60c5      	str	r5, [r0, #12]
 8009eca:	69f5      	ldr	r5, [r6, #28]
 8009ecc:	68eb      	ldr	r3, [r5, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d013      	beq.n	8009efa <_Balloc+0x5a>
 8009ed2:	69f3      	ldr	r3, [r6, #28]
 8009ed4:	00a2      	lsls	r2, r4, #2
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	189b      	adds	r3, r3, r2
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d118      	bne.n	8009f12 <_Balloc+0x72>
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	000d      	movs	r5, r1
 8009ee4:	40a5      	lsls	r5, r4
 8009ee6:	1d6a      	adds	r2, r5, #5
 8009ee8:	0030      	movs	r0, r6
 8009eea:	0092      	lsls	r2, r2, #2
 8009eec:	f000 fc58 	bl	800a7a0 <_calloc_r>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d00c      	beq.n	8009f0e <_Balloc+0x6e>
 8009ef4:	6044      	str	r4, [r0, #4]
 8009ef6:	6085      	str	r5, [r0, #8]
 8009ef8:	e00d      	b.n	8009f16 <_Balloc+0x76>
 8009efa:	2221      	movs	r2, #33	; 0x21
 8009efc:	2104      	movs	r1, #4
 8009efe:	0030      	movs	r0, r6
 8009f00:	f000 fc4e 	bl	800a7a0 <_calloc_r>
 8009f04:	69f3      	ldr	r3, [r6, #28]
 8009f06:	60e8      	str	r0, [r5, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e1      	bne.n	8009ed2 <_Balloc+0x32>
 8009f0e:	2000      	movs	r0, #0
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	6802      	ldr	r2, [r0, #0]
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	2300      	movs	r3, #0
 8009f18:	6103      	str	r3, [r0, #16]
 8009f1a:	60c3      	str	r3, [r0, #12]
 8009f1c:	e7f8      	b.n	8009f10 <_Balloc+0x70>
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	0800cdc9 	.word	0x0800cdc9
 8009f24:	0800ce49 	.word	0x0800ce49

08009f28 <_Bfree>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	69c6      	ldr	r6, [r0, #28]
 8009f2c:	0005      	movs	r5, r0
 8009f2e:	000c      	movs	r4, r1
 8009f30:	2e00      	cmp	r6, #0
 8009f32:	d10e      	bne.n	8009f52 <_Bfree+0x2a>
 8009f34:	2010      	movs	r0, #16
 8009f36:	f7ff fef5 	bl	8009d24 <malloc>
 8009f3a:	1e02      	subs	r2, r0, #0
 8009f3c:	61e8      	str	r0, [r5, #28]
 8009f3e:	d104      	bne.n	8009f4a <_Bfree+0x22>
 8009f40:	218f      	movs	r1, #143	; 0x8f
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <_Bfree+0x40>)
 8009f44:	4809      	ldr	r0, [pc, #36]	; (8009f6c <_Bfree+0x44>)
 8009f46:	f000 fc0d 	bl	800a764 <__assert_func>
 8009f4a:	6046      	str	r6, [r0, #4]
 8009f4c:	6086      	str	r6, [r0, #8]
 8009f4e:	6006      	str	r6, [r0, #0]
 8009f50:	60c6      	str	r6, [r0, #12]
 8009f52:	2c00      	cmp	r4, #0
 8009f54:	d007      	beq.n	8009f66 <_Bfree+0x3e>
 8009f56:	69eb      	ldr	r3, [r5, #28]
 8009f58:	6862      	ldr	r2, [r4, #4]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	0092      	lsls	r2, r2, #2
 8009f5e:	189b      	adds	r3, r3, r2
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	6022      	str	r2, [r4, #0]
 8009f64:	601c      	str	r4, [r3, #0]
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	0800cdc9 	.word	0x0800cdc9
 8009f6c:	0800ce49 	.word	0x0800ce49

08009f70 <__multadd>:
 8009f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f72:	000e      	movs	r6, r1
 8009f74:	9001      	str	r0, [sp, #4]
 8009f76:	000c      	movs	r4, r1
 8009f78:	001d      	movs	r5, r3
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	690f      	ldr	r7, [r1, #16]
 8009f7e:	3614      	adds	r6, #20
 8009f80:	6833      	ldr	r3, [r6, #0]
 8009f82:	3001      	adds	r0, #1
 8009f84:	b299      	uxth	r1, r3
 8009f86:	4351      	muls	r1, r2
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	4353      	muls	r3, r2
 8009f8c:	1949      	adds	r1, r1, r5
 8009f8e:	0c0d      	lsrs	r5, r1, #16
 8009f90:	195b      	adds	r3, r3, r5
 8009f92:	0c1d      	lsrs	r5, r3, #16
 8009f94:	b289      	uxth	r1, r1
 8009f96:	041b      	lsls	r3, r3, #16
 8009f98:	185b      	adds	r3, r3, r1
 8009f9a:	c608      	stmia	r6!, {r3}
 8009f9c:	4287      	cmp	r7, r0
 8009f9e:	dcef      	bgt.n	8009f80 <__multadd+0x10>
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	d022      	beq.n	8009fea <__multadd+0x7a>
 8009fa4:	68a3      	ldr	r3, [r4, #8]
 8009fa6:	42bb      	cmp	r3, r7
 8009fa8:	dc19      	bgt.n	8009fde <__multadd+0x6e>
 8009faa:	6861      	ldr	r1, [r4, #4]
 8009fac:	9801      	ldr	r0, [sp, #4]
 8009fae:	3101      	adds	r1, #1
 8009fb0:	f7ff ff76 	bl	8009ea0 <_Balloc>
 8009fb4:	1e06      	subs	r6, r0, #0
 8009fb6:	d105      	bne.n	8009fc4 <__multadd+0x54>
 8009fb8:	0032      	movs	r2, r6
 8009fba:	21ba      	movs	r1, #186	; 0xba
 8009fbc:	4b0c      	ldr	r3, [pc, #48]	; (8009ff0 <__multadd+0x80>)
 8009fbe:	480d      	ldr	r0, [pc, #52]	; (8009ff4 <__multadd+0x84>)
 8009fc0:	f000 fbd0 	bl	800a764 <__assert_func>
 8009fc4:	0021      	movs	r1, r4
 8009fc6:	6922      	ldr	r2, [r4, #16]
 8009fc8:	310c      	adds	r1, #12
 8009fca:	3202      	adds	r2, #2
 8009fcc:	0092      	lsls	r2, r2, #2
 8009fce:	300c      	adds	r0, #12
 8009fd0:	f7fe ffb7 	bl	8008f42 <memcpy>
 8009fd4:	0021      	movs	r1, r4
 8009fd6:	9801      	ldr	r0, [sp, #4]
 8009fd8:	f7ff ffa6 	bl	8009f28 <_Bfree>
 8009fdc:	0034      	movs	r4, r6
 8009fde:	1d3b      	adds	r3, r7, #4
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	18e3      	adds	r3, r4, r3
 8009fe4:	605d      	str	r5, [r3, #4]
 8009fe6:	1c7b      	adds	r3, r7, #1
 8009fe8:	6123      	str	r3, [r4, #16]
 8009fea:	0020      	movs	r0, r4
 8009fec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009fee:	46c0      	nop			; (mov r8, r8)
 8009ff0:	0800ce38 	.word	0x0800ce38
 8009ff4:	0800ce49 	.word	0x0800ce49

08009ff8 <__hi0bits>:
 8009ff8:	0003      	movs	r3, r0
 8009ffa:	0c02      	lsrs	r2, r0, #16
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	4282      	cmp	r2, r0
 800a000:	d101      	bne.n	800a006 <__hi0bits+0xe>
 800a002:	041b      	lsls	r3, r3, #16
 800a004:	3010      	adds	r0, #16
 800a006:	0e1a      	lsrs	r2, r3, #24
 800a008:	d101      	bne.n	800a00e <__hi0bits+0x16>
 800a00a:	3008      	adds	r0, #8
 800a00c:	021b      	lsls	r3, r3, #8
 800a00e:	0f1a      	lsrs	r2, r3, #28
 800a010:	d101      	bne.n	800a016 <__hi0bits+0x1e>
 800a012:	3004      	adds	r0, #4
 800a014:	011b      	lsls	r3, r3, #4
 800a016:	0f9a      	lsrs	r2, r3, #30
 800a018:	d101      	bne.n	800a01e <__hi0bits+0x26>
 800a01a:	3002      	adds	r0, #2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	2b00      	cmp	r3, #0
 800a020:	db03      	blt.n	800a02a <__hi0bits+0x32>
 800a022:	3001      	adds	r0, #1
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	d400      	bmi.n	800a02a <__hi0bits+0x32>
 800a028:	2020      	movs	r0, #32
 800a02a:	4770      	bx	lr

0800a02c <__lo0bits>:
 800a02c:	6803      	ldr	r3, [r0, #0]
 800a02e:	0001      	movs	r1, r0
 800a030:	2207      	movs	r2, #7
 800a032:	0018      	movs	r0, r3
 800a034:	4010      	ands	r0, r2
 800a036:	4213      	tst	r3, r2
 800a038:	d00d      	beq.n	800a056 <__lo0bits+0x2a>
 800a03a:	3a06      	subs	r2, #6
 800a03c:	2000      	movs	r0, #0
 800a03e:	4213      	tst	r3, r2
 800a040:	d105      	bne.n	800a04e <__lo0bits+0x22>
 800a042:	3002      	adds	r0, #2
 800a044:	4203      	tst	r3, r0
 800a046:	d003      	beq.n	800a050 <__lo0bits+0x24>
 800a048:	40d3      	lsrs	r3, r2
 800a04a:	0010      	movs	r0, r2
 800a04c:	600b      	str	r3, [r1, #0]
 800a04e:	4770      	bx	lr
 800a050:	089b      	lsrs	r3, r3, #2
 800a052:	600b      	str	r3, [r1, #0]
 800a054:	e7fb      	b.n	800a04e <__lo0bits+0x22>
 800a056:	b29a      	uxth	r2, r3
 800a058:	2a00      	cmp	r2, #0
 800a05a:	d101      	bne.n	800a060 <__lo0bits+0x34>
 800a05c:	2010      	movs	r0, #16
 800a05e:	0c1b      	lsrs	r3, r3, #16
 800a060:	b2da      	uxtb	r2, r3
 800a062:	2a00      	cmp	r2, #0
 800a064:	d101      	bne.n	800a06a <__lo0bits+0x3e>
 800a066:	3008      	adds	r0, #8
 800a068:	0a1b      	lsrs	r3, r3, #8
 800a06a:	071a      	lsls	r2, r3, #28
 800a06c:	d101      	bne.n	800a072 <__lo0bits+0x46>
 800a06e:	3004      	adds	r0, #4
 800a070:	091b      	lsrs	r3, r3, #4
 800a072:	079a      	lsls	r2, r3, #30
 800a074:	d101      	bne.n	800a07a <__lo0bits+0x4e>
 800a076:	3002      	adds	r0, #2
 800a078:	089b      	lsrs	r3, r3, #2
 800a07a:	07da      	lsls	r2, r3, #31
 800a07c:	d4e9      	bmi.n	800a052 <__lo0bits+0x26>
 800a07e:	3001      	adds	r0, #1
 800a080:	085b      	lsrs	r3, r3, #1
 800a082:	d1e6      	bne.n	800a052 <__lo0bits+0x26>
 800a084:	2020      	movs	r0, #32
 800a086:	e7e2      	b.n	800a04e <__lo0bits+0x22>

0800a088 <__i2b>:
 800a088:	b510      	push	{r4, lr}
 800a08a:	000c      	movs	r4, r1
 800a08c:	2101      	movs	r1, #1
 800a08e:	f7ff ff07 	bl	8009ea0 <_Balloc>
 800a092:	2800      	cmp	r0, #0
 800a094:	d107      	bne.n	800a0a6 <__i2b+0x1e>
 800a096:	2146      	movs	r1, #70	; 0x46
 800a098:	4c05      	ldr	r4, [pc, #20]	; (800a0b0 <__i2b+0x28>)
 800a09a:	0002      	movs	r2, r0
 800a09c:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <__i2b+0x2c>)
 800a09e:	0020      	movs	r0, r4
 800a0a0:	31ff      	adds	r1, #255	; 0xff
 800a0a2:	f000 fb5f 	bl	800a764 <__assert_func>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	6144      	str	r4, [r0, #20]
 800a0aa:	6103      	str	r3, [r0, #16]
 800a0ac:	bd10      	pop	{r4, pc}
 800a0ae:	46c0      	nop			; (mov r8, r8)
 800a0b0:	0800ce49 	.word	0x0800ce49
 800a0b4:	0800ce38 	.word	0x0800ce38

0800a0b8 <__multiply>:
 800a0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ba:	0015      	movs	r5, r2
 800a0bc:	690a      	ldr	r2, [r1, #16]
 800a0be:	692b      	ldr	r3, [r5, #16]
 800a0c0:	000c      	movs	r4, r1
 800a0c2:	b08b      	sub	sp, #44	; 0x2c
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	da01      	bge.n	800a0cc <__multiply+0x14>
 800a0c8:	002c      	movs	r4, r5
 800a0ca:	000d      	movs	r5, r1
 800a0cc:	6927      	ldr	r7, [r4, #16]
 800a0ce:	692e      	ldr	r6, [r5, #16]
 800a0d0:	6861      	ldr	r1, [r4, #4]
 800a0d2:	19bb      	adds	r3, r7, r6
 800a0d4:	9303      	str	r3, [sp, #12]
 800a0d6:	68a3      	ldr	r3, [r4, #8]
 800a0d8:	19ba      	adds	r2, r7, r6
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	da00      	bge.n	800a0e0 <__multiply+0x28>
 800a0de:	3101      	adds	r1, #1
 800a0e0:	f7ff fede 	bl	8009ea0 <_Balloc>
 800a0e4:	9002      	str	r0, [sp, #8]
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d106      	bne.n	800a0f8 <__multiply+0x40>
 800a0ea:	21b1      	movs	r1, #177	; 0xb1
 800a0ec:	4b48      	ldr	r3, [pc, #288]	; (800a210 <__multiply+0x158>)
 800a0ee:	4849      	ldr	r0, [pc, #292]	; (800a214 <__multiply+0x15c>)
 800a0f0:	9a02      	ldr	r2, [sp, #8]
 800a0f2:	0049      	lsls	r1, r1, #1
 800a0f4:	f000 fb36 	bl	800a764 <__assert_func>
 800a0f8:	9b02      	ldr	r3, [sp, #8]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	3314      	adds	r3, #20
 800a0fe:	469c      	mov	ip, r3
 800a100:	19bb      	adds	r3, r7, r6
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4463      	add	r3, ip
 800a106:	9304      	str	r3, [sp, #16]
 800a108:	4663      	mov	r3, ip
 800a10a:	9904      	ldr	r1, [sp, #16]
 800a10c:	428b      	cmp	r3, r1
 800a10e:	d32a      	bcc.n	800a166 <__multiply+0xae>
 800a110:	0023      	movs	r3, r4
 800a112:	00bf      	lsls	r7, r7, #2
 800a114:	3314      	adds	r3, #20
 800a116:	3514      	adds	r5, #20
 800a118:	9308      	str	r3, [sp, #32]
 800a11a:	00b6      	lsls	r6, r6, #2
 800a11c:	19db      	adds	r3, r3, r7
 800a11e:	9305      	str	r3, [sp, #20]
 800a120:	19ab      	adds	r3, r5, r6
 800a122:	9309      	str	r3, [sp, #36]	; 0x24
 800a124:	2304      	movs	r3, #4
 800a126:	9306      	str	r3, [sp, #24]
 800a128:	0023      	movs	r3, r4
 800a12a:	9a05      	ldr	r2, [sp, #20]
 800a12c:	3315      	adds	r3, #21
 800a12e:	9501      	str	r5, [sp, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d305      	bcc.n	800a140 <__multiply+0x88>
 800a134:	1b13      	subs	r3, r2, r4
 800a136:	3b15      	subs	r3, #21
 800a138:	089b      	lsrs	r3, r3, #2
 800a13a:	3301      	adds	r3, #1
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	9306      	str	r3, [sp, #24]
 800a140:	9b01      	ldr	r3, [sp, #4]
 800a142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a144:	4293      	cmp	r3, r2
 800a146:	d310      	bcc.n	800a16a <__multiply+0xb2>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	dd05      	ble.n	800a15a <__multiply+0xa2>
 800a14e:	9b04      	ldr	r3, [sp, #16]
 800a150:	3b04      	subs	r3, #4
 800a152:	9304      	str	r3, [sp, #16]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d056      	beq.n	800a208 <__multiply+0x150>
 800a15a:	9b02      	ldr	r3, [sp, #8]
 800a15c:	9a03      	ldr	r2, [sp, #12]
 800a15e:	0018      	movs	r0, r3
 800a160:	611a      	str	r2, [r3, #16]
 800a162:	b00b      	add	sp, #44	; 0x2c
 800a164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a166:	c304      	stmia	r3!, {r2}
 800a168:	e7cf      	b.n	800a10a <__multiply+0x52>
 800a16a:	9b01      	ldr	r3, [sp, #4]
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	b280      	uxth	r0, r0
 800a170:	2800      	cmp	r0, #0
 800a172:	d01e      	beq.n	800a1b2 <__multiply+0xfa>
 800a174:	4667      	mov	r7, ip
 800a176:	2500      	movs	r5, #0
 800a178:	9e08      	ldr	r6, [sp, #32]
 800a17a:	ce02      	ldmia	r6!, {r1}
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	9307      	str	r3, [sp, #28]
 800a180:	b28b      	uxth	r3, r1
 800a182:	4343      	muls	r3, r0
 800a184:	001a      	movs	r2, r3
 800a186:	466b      	mov	r3, sp
 800a188:	8b9b      	ldrh	r3, [r3, #28]
 800a18a:	18d3      	adds	r3, r2, r3
 800a18c:	195b      	adds	r3, r3, r5
 800a18e:	0c0d      	lsrs	r5, r1, #16
 800a190:	4345      	muls	r5, r0
 800a192:	9a07      	ldr	r2, [sp, #28]
 800a194:	0c11      	lsrs	r1, r2, #16
 800a196:	1869      	adds	r1, r5, r1
 800a198:	0c1a      	lsrs	r2, r3, #16
 800a19a:	188a      	adds	r2, r1, r2
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	0c15      	lsrs	r5, r2, #16
 800a1a0:	0412      	lsls	r2, r2, #16
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	9b05      	ldr	r3, [sp, #20]
 800a1a6:	c704      	stmia	r7!, {r2}
 800a1a8:	42b3      	cmp	r3, r6
 800a1aa:	d8e6      	bhi.n	800a17a <__multiply+0xc2>
 800a1ac:	4663      	mov	r3, ip
 800a1ae:	9a06      	ldr	r2, [sp, #24]
 800a1b0:	509d      	str	r5, [r3, r2]
 800a1b2:	9b01      	ldr	r3, [sp, #4]
 800a1b4:	6818      	ldr	r0, [r3, #0]
 800a1b6:	0c00      	lsrs	r0, r0, #16
 800a1b8:	d020      	beq.n	800a1fc <__multiply+0x144>
 800a1ba:	4663      	mov	r3, ip
 800a1bc:	0025      	movs	r5, r4
 800a1be:	4661      	mov	r1, ip
 800a1c0:	2700      	movs	r7, #0
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3514      	adds	r5, #20
 800a1c6:	682a      	ldr	r2, [r5, #0]
 800a1c8:	680e      	ldr	r6, [r1, #0]
 800a1ca:	b292      	uxth	r2, r2
 800a1cc:	4342      	muls	r2, r0
 800a1ce:	0c36      	lsrs	r6, r6, #16
 800a1d0:	1992      	adds	r2, r2, r6
 800a1d2:	19d2      	adds	r2, r2, r7
 800a1d4:	0416      	lsls	r6, r2, #16
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	431e      	orrs	r6, r3
 800a1da:	600e      	str	r6, [r1, #0]
 800a1dc:	cd40      	ldmia	r5!, {r6}
 800a1de:	684b      	ldr	r3, [r1, #4]
 800a1e0:	0c36      	lsrs	r6, r6, #16
 800a1e2:	4346      	muls	r6, r0
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	0c12      	lsrs	r2, r2, #16
 800a1e8:	18f3      	adds	r3, r6, r3
 800a1ea:	189b      	adds	r3, r3, r2
 800a1ec:	9a05      	ldr	r2, [sp, #20]
 800a1ee:	0c1f      	lsrs	r7, r3, #16
 800a1f0:	3104      	adds	r1, #4
 800a1f2:	42aa      	cmp	r2, r5
 800a1f4:	d8e7      	bhi.n	800a1c6 <__multiply+0x10e>
 800a1f6:	4662      	mov	r2, ip
 800a1f8:	9906      	ldr	r1, [sp, #24]
 800a1fa:	5053      	str	r3, [r2, r1]
 800a1fc:	9b01      	ldr	r3, [sp, #4]
 800a1fe:	3304      	adds	r3, #4
 800a200:	9301      	str	r3, [sp, #4]
 800a202:	2304      	movs	r3, #4
 800a204:	449c      	add	ip, r3
 800a206:	e79b      	b.n	800a140 <__multiply+0x88>
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	9303      	str	r3, [sp, #12]
 800a20e:	e79b      	b.n	800a148 <__multiply+0x90>
 800a210:	0800ce38 	.word	0x0800ce38
 800a214:	0800ce49 	.word	0x0800ce49

0800a218 <__pow5mult>:
 800a218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a21a:	2303      	movs	r3, #3
 800a21c:	0015      	movs	r5, r2
 800a21e:	0007      	movs	r7, r0
 800a220:	000e      	movs	r6, r1
 800a222:	401a      	ands	r2, r3
 800a224:	421d      	tst	r5, r3
 800a226:	d008      	beq.n	800a23a <__pow5mult+0x22>
 800a228:	4925      	ldr	r1, [pc, #148]	; (800a2c0 <__pow5mult+0xa8>)
 800a22a:	3a01      	subs	r2, #1
 800a22c:	0092      	lsls	r2, r2, #2
 800a22e:	5852      	ldr	r2, [r2, r1]
 800a230:	2300      	movs	r3, #0
 800a232:	0031      	movs	r1, r6
 800a234:	f7ff fe9c 	bl	8009f70 <__multadd>
 800a238:	0006      	movs	r6, r0
 800a23a:	10ad      	asrs	r5, r5, #2
 800a23c:	d03d      	beq.n	800a2ba <__pow5mult+0xa2>
 800a23e:	69fc      	ldr	r4, [r7, #28]
 800a240:	2c00      	cmp	r4, #0
 800a242:	d10f      	bne.n	800a264 <__pow5mult+0x4c>
 800a244:	2010      	movs	r0, #16
 800a246:	f7ff fd6d 	bl	8009d24 <malloc>
 800a24a:	1e02      	subs	r2, r0, #0
 800a24c:	61f8      	str	r0, [r7, #28]
 800a24e:	d105      	bne.n	800a25c <__pow5mult+0x44>
 800a250:	21b4      	movs	r1, #180	; 0xb4
 800a252:	4b1c      	ldr	r3, [pc, #112]	; (800a2c4 <__pow5mult+0xac>)
 800a254:	481c      	ldr	r0, [pc, #112]	; (800a2c8 <__pow5mult+0xb0>)
 800a256:	31ff      	adds	r1, #255	; 0xff
 800a258:	f000 fa84 	bl	800a764 <__assert_func>
 800a25c:	6044      	str	r4, [r0, #4]
 800a25e:	6084      	str	r4, [r0, #8]
 800a260:	6004      	str	r4, [r0, #0]
 800a262:	60c4      	str	r4, [r0, #12]
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	689c      	ldr	r4, [r3, #8]
 800a268:	9301      	str	r3, [sp, #4]
 800a26a:	2c00      	cmp	r4, #0
 800a26c:	d108      	bne.n	800a280 <__pow5mult+0x68>
 800a26e:	0038      	movs	r0, r7
 800a270:	4916      	ldr	r1, [pc, #88]	; (800a2cc <__pow5mult+0xb4>)
 800a272:	f7ff ff09 	bl	800a088 <__i2b>
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	0004      	movs	r4, r0
 800a27a:	6098      	str	r0, [r3, #8]
 800a27c:	2300      	movs	r3, #0
 800a27e:	6003      	str	r3, [r0, #0]
 800a280:	2301      	movs	r3, #1
 800a282:	421d      	tst	r5, r3
 800a284:	d00a      	beq.n	800a29c <__pow5mult+0x84>
 800a286:	0031      	movs	r1, r6
 800a288:	0022      	movs	r2, r4
 800a28a:	0038      	movs	r0, r7
 800a28c:	f7ff ff14 	bl	800a0b8 <__multiply>
 800a290:	0031      	movs	r1, r6
 800a292:	9001      	str	r0, [sp, #4]
 800a294:	0038      	movs	r0, r7
 800a296:	f7ff fe47 	bl	8009f28 <_Bfree>
 800a29a:	9e01      	ldr	r6, [sp, #4]
 800a29c:	106d      	asrs	r5, r5, #1
 800a29e:	d00c      	beq.n	800a2ba <__pow5mult+0xa2>
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d107      	bne.n	800a2b6 <__pow5mult+0x9e>
 800a2a6:	0022      	movs	r2, r4
 800a2a8:	0021      	movs	r1, r4
 800a2aa:	0038      	movs	r0, r7
 800a2ac:	f7ff ff04 	bl	800a0b8 <__multiply>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	6020      	str	r0, [r4, #0]
 800a2b4:	6003      	str	r3, [r0, #0]
 800a2b6:	0004      	movs	r4, r0
 800a2b8:	e7e2      	b.n	800a280 <__pow5mult+0x68>
 800a2ba:	0030      	movs	r0, r6
 800a2bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2be:	46c0      	nop			; (mov r8, r8)
 800a2c0:	0800cf98 	.word	0x0800cf98
 800a2c4:	0800cdc9 	.word	0x0800cdc9
 800a2c8:	0800ce49 	.word	0x0800ce49
 800a2cc:	00000271 	.word	0x00000271

0800a2d0 <__lshift>:
 800a2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2d2:	000c      	movs	r4, r1
 800a2d4:	0017      	movs	r7, r2
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	1155      	asrs	r5, r2, #5
 800a2da:	b087      	sub	sp, #28
 800a2dc:	18eb      	adds	r3, r5, r3
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	6849      	ldr	r1, [r1, #4]
 800a2e6:	68a3      	ldr	r3, [r4, #8]
 800a2e8:	9004      	str	r0, [sp, #16]
 800a2ea:	9a01      	ldr	r2, [sp, #4]
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	db10      	blt.n	800a312 <__lshift+0x42>
 800a2f0:	9804      	ldr	r0, [sp, #16]
 800a2f2:	f7ff fdd5 	bl	8009ea0 <_Balloc>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	0002      	movs	r2, r0
 800a2fa:	0006      	movs	r6, r0
 800a2fc:	0019      	movs	r1, r3
 800a2fe:	3214      	adds	r2, #20
 800a300:	4298      	cmp	r0, r3
 800a302:	d10c      	bne.n	800a31e <__lshift+0x4e>
 800a304:	31df      	adds	r1, #223	; 0xdf
 800a306:	0032      	movs	r2, r6
 800a308:	4b26      	ldr	r3, [pc, #152]	; (800a3a4 <__lshift+0xd4>)
 800a30a:	4827      	ldr	r0, [pc, #156]	; (800a3a8 <__lshift+0xd8>)
 800a30c:	31ff      	adds	r1, #255	; 0xff
 800a30e:	f000 fa29 	bl	800a764 <__assert_func>
 800a312:	3101      	adds	r1, #1
 800a314:	005b      	lsls	r3, r3, #1
 800a316:	e7e8      	b.n	800a2ea <__lshift+0x1a>
 800a318:	0098      	lsls	r0, r3, #2
 800a31a:	5011      	str	r1, [r2, r0]
 800a31c:	3301      	adds	r3, #1
 800a31e:	42ab      	cmp	r3, r5
 800a320:	dbfa      	blt.n	800a318 <__lshift+0x48>
 800a322:	43eb      	mvns	r3, r5
 800a324:	17db      	asrs	r3, r3, #31
 800a326:	401d      	ands	r5, r3
 800a328:	211f      	movs	r1, #31
 800a32a:	0023      	movs	r3, r4
 800a32c:	0038      	movs	r0, r7
 800a32e:	00ad      	lsls	r5, r5, #2
 800a330:	1955      	adds	r5, r2, r5
 800a332:	6922      	ldr	r2, [r4, #16]
 800a334:	3314      	adds	r3, #20
 800a336:	0092      	lsls	r2, r2, #2
 800a338:	4008      	ands	r0, r1
 800a33a:	4684      	mov	ip, r0
 800a33c:	189a      	adds	r2, r3, r2
 800a33e:	420f      	tst	r7, r1
 800a340:	d02a      	beq.n	800a398 <__lshift+0xc8>
 800a342:	3101      	adds	r1, #1
 800a344:	1a09      	subs	r1, r1, r0
 800a346:	9105      	str	r1, [sp, #20]
 800a348:	2100      	movs	r1, #0
 800a34a:	9503      	str	r5, [sp, #12]
 800a34c:	4667      	mov	r7, ip
 800a34e:	6818      	ldr	r0, [r3, #0]
 800a350:	40b8      	lsls	r0, r7
 800a352:	4308      	orrs	r0, r1
 800a354:	9903      	ldr	r1, [sp, #12]
 800a356:	c101      	stmia	r1!, {r0}
 800a358:	9103      	str	r1, [sp, #12]
 800a35a:	9805      	ldr	r0, [sp, #20]
 800a35c:	cb02      	ldmia	r3!, {r1}
 800a35e:	40c1      	lsrs	r1, r0
 800a360:	429a      	cmp	r2, r3
 800a362:	d8f3      	bhi.n	800a34c <__lshift+0x7c>
 800a364:	0020      	movs	r0, r4
 800a366:	3015      	adds	r0, #21
 800a368:	2304      	movs	r3, #4
 800a36a:	4282      	cmp	r2, r0
 800a36c:	d304      	bcc.n	800a378 <__lshift+0xa8>
 800a36e:	1b13      	subs	r3, r2, r4
 800a370:	3b15      	subs	r3, #21
 800a372:	089b      	lsrs	r3, r3, #2
 800a374:	3301      	adds	r3, #1
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	50e9      	str	r1, [r5, r3]
 800a37a:	2900      	cmp	r1, #0
 800a37c:	d002      	beq.n	800a384 <__lshift+0xb4>
 800a37e:	9b02      	ldr	r3, [sp, #8]
 800a380:	3302      	adds	r3, #2
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	9b01      	ldr	r3, [sp, #4]
 800a386:	9804      	ldr	r0, [sp, #16]
 800a388:	3b01      	subs	r3, #1
 800a38a:	0021      	movs	r1, r4
 800a38c:	6133      	str	r3, [r6, #16]
 800a38e:	f7ff fdcb 	bl	8009f28 <_Bfree>
 800a392:	0030      	movs	r0, r6
 800a394:	b007      	add	sp, #28
 800a396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a398:	cb02      	ldmia	r3!, {r1}
 800a39a:	c502      	stmia	r5!, {r1}
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d8fb      	bhi.n	800a398 <__lshift+0xc8>
 800a3a0:	e7f0      	b.n	800a384 <__lshift+0xb4>
 800a3a2:	46c0      	nop			; (mov r8, r8)
 800a3a4:	0800ce38 	.word	0x0800ce38
 800a3a8:	0800ce49 	.word	0x0800ce49

0800a3ac <__mcmp>:
 800a3ac:	b530      	push	{r4, r5, lr}
 800a3ae:	690b      	ldr	r3, [r1, #16]
 800a3b0:	6904      	ldr	r4, [r0, #16]
 800a3b2:	0002      	movs	r2, r0
 800a3b4:	1ae0      	subs	r0, r4, r3
 800a3b6:	429c      	cmp	r4, r3
 800a3b8:	d10e      	bne.n	800a3d8 <__mcmp+0x2c>
 800a3ba:	3214      	adds	r2, #20
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	3114      	adds	r1, #20
 800a3c0:	0014      	movs	r4, r2
 800a3c2:	18c9      	adds	r1, r1, r3
 800a3c4:	18d2      	adds	r2, r2, r3
 800a3c6:	3a04      	subs	r2, #4
 800a3c8:	3904      	subs	r1, #4
 800a3ca:	6815      	ldr	r5, [r2, #0]
 800a3cc:	680b      	ldr	r3, [r1, #0]
 800a3ce:	429d      	cmp	r5, r3
 800a3d0:	d003      	beq.n	800a3da <__mcmp+0x2e>
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	429d      	cmp	r5, r3
 800a3d6:	d303      	bcc.n	800a3e0 <__mcmp+0x34>
 800a3d8:	bd30      	pop	{r4, r5, pc}
 800a3da:	4294      	cmp	r4, r2
 800a3dc:	d3f3      	bcc.n	800a3c6 <__mcmp+0x1a>
 800a3de:	e7fb      	b.n	800a3d8 <__mcmp+0x2c>
 800a3e0:	4240      	negs	r0, r0
 800a3e2:	e7f9      	b.n	800a3d8 <__mcmp+0x2c>

0800a3e4 <__mdiff>:
 800a3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e6:	000e      	movs	r6, r1
 800a3e8:	0007      	movs	r7, r0
 800a3ea:	0011      	movs	r1, r2
 800a3ec:	0030      	movs	r0, r6
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	0014      	movs	r4, r2
 800a3f2:	f7ff ffdb 	bl	800a3ac <__mcmp>
 800a3f6:	1e05      	subs	r5, r0, #0
 800a3f8:	d110      	bne.n	800a41c <__mdiff+0x38>
 800a3fa:	0001      	movs	r1, r0
 800a3fc:	0038      	movs	r0, r7
 800a3fe:	f7ff fd4f 	bl	8009ea0 <_Balloc>
 800a402:	1e02      	subs	r2, r0, #0
 800a404:	d104      	bne.n	800a410 <__mdiff+0x2c>
 800a406:	4b3f      	ldr	r3, [pc, #252]	; (800a504 <__mdiff+0x120>)
 800a408:	483f      	ldr	r0, [pc, #252]	; (800a508 <__mdiff+0x124>)
 800a40a:	4940      	ldr	r1, [pc, #256]	; (800a50c <__mdiff+0x128>)
 800a40c:	f000 f9aa 	bl	800a764 <__assert_func>
 800a410:	2301      	movs	r3, #1
 800a412:	6145      	str	r5, [r0, #20]
 800a414:	6103      	str	r3, [r0, #16]
 800a416:	0010      	movs	r0, r2
 800a418:	b007      	add	sp, #28
 800a41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a41c:	2301      	movs	r3, #1
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	2800      	cmp	r0, #0
 800a422:	db04      	blt.n	800a42e <__mdiff+0x4a>
 800a424:	0023      	movs	r3, r4
 800a426:	0034      	movs	r4, r6
 800a428:	001e      	movs	r6, r3
 800a42a:	2300      	movs	r3, #0
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	0038      	movs	r0, r7
 800a430:	6861      	ldr	r1, [r4, #4]
 800a432:	f7ff fd35 	bl	8009ea0 <_Balloc>
 800a436:	1e02      	subs	r2, r0, #0
 800a438:	d103      	bne.n	800a442 <__mdiff+0x5e>
 800a43a:	4b32      	ldr	r3, [pc, #200]	; (800a504 <__mdiff+0x120>)
 800a43c:	4832      	ldr	r0, [pc, #200]	; (800a508 <__mdiff+0x124>)
 800a43e:	4934      	ldr	r1, [pc, #208]	; (800a510 <__mdiff+0x12c>)
 800a440:	e7e4      	b.n	800a40c <__mdiff+0x28>
 800a442:	9b01      	ldr	r3, [sp, #4]
 800a444:	2700      	movs	r7, #0
 800a446:	60c3      	str	r3, [r0, #12]
 800a448:	6920      	ldr	r0, [r4, #16]
 800a44a:	3414      	adds	r4, #20
 800a44c:	0083      	lsls	r3, r0, #2
 800a44e:	18e3      	adds	r3, r4, r3
 800a450:	0021      	movs	r1, r4
 800a452:	9401      	str	r4, [sp, #4]
 800a454:	0034      	movs	r4, r6
 800a456:	9302      	str	r3, [sp, #8]
 800a458:	6933      	ldr	r3, [r6, #16]
 800a45a:	3414      	adds	r4, #20
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	18e3      	adds	r3, r4, r3
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	0013      	movs	r3, r2
 800a464:	3314      	adds	r3, #20
 800a466:	469c      	mov	ip, r3
 800a468:	9305      	str	r3, [sp, #20]
 800a46a:	9104      	str	r1, [sp, #16]
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	cc02      	ldmia	r4!, {r1}
 800a470:	cb20      	ldmia	r3!, {r5}
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	b2ab      	uxth	r3, r5
 800a476:	19df      	adds	r7, r3, r7
 800a478:	b28b      	uxth	r3, r1
 800a47a:	1afb      	subs	r3, r7, r3
 800a47c:	0c09      	lsrs	r1, r1, #16
 800a47e:	0c2d      	lsrs	r5, r5, #16
 800a480:	1a6d      	subs	r5, r5, r1
 800a482:	1419      	asrs	r1, r3, #16
 800a484:	1869      	adds	r1, r5, r1
 800a486:	b29b      	uxth	r3, r3
 800a488:	140f      	asrs	r7, r1, #16
 800a48a:	0409      	lsls	r1, r1, #16
 800a48c:	4319      	orrs	r1, r3
 800a48e:	4663      	mov	r3, ip
 800a490:	c302      	stmia	r3!, {r1}
 800a492:	469c      	mov	ip, r3
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	42a3      	cmp	r3, r4
 800a498:	d8e8      	bhi.n	800a46c <__mdiff+0x88>
 800a49a:	0031      	movs	r1, r6
 800a49c:	9c03      	ldr	r4, [sp, #12]
 800a49e:	3115      	adds	r1, #21
 800a4a0:	2304      	movs	r3, #4
 800a4a2:	428c      	cmp	r4, r1
 800a4a4:	d304      	bcc.n	800a4b0 <__mdiff+0xcc>
 800a4a6:	1ba3      	subs	r3, r4, r6
 800a4a8:	3b15      	subs	r3, #21
 800a4aa:	089b      	lsrs	r3, r3, #2
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	9901      	ldr	r1, [sp, #4]
 800a4b2:	18cd      	adds	r5, r1, r3
 800a4b4:	9905      	ldr	r1, [sp, #20]
 800a4b6:	002e      	movs	r6, r5
 800a4b8:	18cb      	adds	r3, r1, r3
 800a4ba:	469c      	mov	ip, r3
 800a4bc:	9902      	ldr	r1, [sp, #8]
 800a4be:	428e      	cmp	r6, r1
 800a4c0:	d310      	bcc.n	800a4e4 <__mdiff+0x100>
 800a4c2:	9e02      	ldr	r6, [sp, #8]
 800a4c4:	1ee9      	subs	r1, r5, #3
 800a4c6:	2400      	movs	r4, #0
 800a4c8:	428e      	cmp	r6, r1
 800a4ca:	d304      	bcc.n	800a4d6 <__mdiff+0xf2>
 800a4cc:	0031      	movs	r1, r6
 800a4ce:	3103      	adds	r1, #3
 800a4d0:	1b49      	subs	r1, r1, r5
 800a4d2:	0889      	lsrs	r1, r1, #2
 800a4d4:	008c      	lsls	r4, r1, #2
 800a4d6:	191b      	adds	r3, r3, r4
 800a4d8:	3b04      	subs	r3, #4
 800a4da:	6819      	ldr	r1, [r3, #0]
 800a4dc:	2900      	cmp	r1, #0
 800a4de:	d00f      	beq.n	800a500 <__mdiff+0x11c>
 800a4e0:	6110      	str	r0, [r2, #16]
 800a4e2:	e798      	b.n	800a416 <__mdiff+0x32>
 800a4e4:	ce02      	ldmia	r6!, {r1}
 800a4e6:	b28c      	uxth	r4, r1
 800a4e8:	19e4      	adds	r4, r4, r7
 800a4ea:	0c0f      	lsrs	r7, r1, #16
 800a4ec:	1421      	asrs	r1, r4, #16
 800a4ee:	1879      	adds	r1, r7, r1
 800a4f0:	b2a4      	uxth	r4, r4
 800a4f2:	140f      	asrs	r7, r1, #16
 800a4f4:	0409      	lsls	r1, r1, #16
 800a4f6:	4321      	orrs	r1, r4
 800a4f8:	4664      	mov	r4, ip
 800a4fa:	c402      	stmia	r4!, {r1}
 800a4fc:	46a4      	mov	ip, r4
 800a4fe:	e7dd      	b.n	800a4bc <__mdiff+0xd8>
 800a500:	3801      	subs	r0, #1
 800a502:	e7e9      	b.n	800a4d8 <__mdiff+0xf4>
 800a504:	0800ce38 	.word	0x0800ce38
 800a508:	0800ce49 	.word	0x0800ce49
 800a50c:	00000237 	.word	0x00000237
 800a510:	00000245 	.word	0x00000245

0800a514 <__d2b>:
 800a514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a516:	2101      	movs	r1, #1
 800a518:	0014      	movs	r4, r2
 800a51a:	001d      	movs	r5, r3
 800a51c:	9f08      	ldr	r7, [sp, #32]
 800a51e:	f7ff fcbf 	bl	8009ea0 <_Balloc>
 800a522:	1e06      	subs	r6, r0, #0
 800a524:	d105      	bne.n	800a532 <__d2b+0x1e>
 800a526:	0032      	movs	r2, r6
 800a528:	4b24      	ldr	r3, [pc, #144]	; (800a5bc <__d2b+0xa8>)
 800a52a:	4825      	ldr	r0, [pc, #148]	; (800a5c0 <__d2b+0xac>)
 800a52c:	4925      	ldr	r1, [pc, #148]	; (800a5c4 <__d2b+0xb0>)
 800a52e:	f000 f919 	bl	800a764 <__assert_func>
 800a532:	032b      	lsls	r3, r5, #12
 800a534:	006d      	lsls	r5, r5, #1
 800a536:	0b1b      	lsrs	r3, r3, #12
 800a538:	0d6d      	lsrs	r5, r5, #21
 800a53a:	d125      	bne.n	800a588 <__d2b+0x74>
 800a53c:	9301      	str	r3, [sp, #4]
 800a53e:	2c00      	cmp	r4, #0
 800a540:	d028      	beq.n	800a594 <__d2b+0x80>
 800a542:	4668      	mov	r0, sp
 800a544:	9400      	str	r4, [sp, #0]
 800a546:	f7ff fd71 	bl	800a02c <__lo0bits>
 800a54a:	9b01      	ldr	r3, [sp, #4]
 800a54c:	9900      	ldr	r1, [sp, #0]
 800a54e:	2800      	cmp	r0, #0
 800a550:	d01e      	beq.n	800a590 <__d2b+0x7c>
 800a552:	2220      	movs	r2, #32
 800a554:	001c      	movs	r4, r3
 800a556:	1a12      	subs	r2, r2, r0
 800a558:	4094      	lsls	r4, r2
 800a55a:	0022      	movs	r2, r4
 800a55c:	40c3      	lsrs	r3, r0
 800a55e:	430a      	orrs	r2, r1
 800a560:	6172      	str	r2, [r6, #20]
 800a562:	9301      	str	r3, [sp, #4]
 800a564:	9c01      	ldr	r4, [sp, #4]
 800a566:	61b4      	str	r4, [r6, #24]
 800a568:	1e63      	subs	r3, r4, #1
 800a56a:	419c      	sbcs	r4, r3
 800a56c:	3401      	adds	r4, #1
 800a56e:	6134      	str	r4, [r6, #16]
 800a570:	2d00      	cmp	r5, #0
 800a572:	d017      	beq.n	800a5a4 <__d2b+0x90>
 800a574:	2435      	movs	r4, #53	; 0x35
 800a576:	4b14      	ldr	r3, [pc, #80]	; (800a5c8 <__d2b+0xb4>)
 800a578:	18ed      	adds	r5, r5, r3
 800a57a:	182d      	adds	r5, r5, r0
 800a57c:	603d      	str	r5, [r7, #0]
 800a57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a580:	1a24      	subs	r4, r4, r0
 800a582:	601c      	str	r4, [r3, #0]
 800a584:	0030      	movs	r0, r6
 800a586:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a588:	2280      	movs	r2, #128	; 0x80
 800a58a:	0352      	lsls	r2, r2, #13
 800a58c:	4313      	orrs	r3, r2
 800a58e:	e7d5      	b.n	800a53c <__d2b+0x28>
 800a590:	6171      	str	r1, [r6, #20]
 800a592:	e7e7      	b.n	800a564 <__d2b+0x50>
 800a594:	a801      	add	r0, sp, #4
 800a596:	f7ff fd49 	bl	800a02c <__lo0bits>
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	2401      	movs	r4, #1
 800a59e:	6173      	str	r3, [r6, #20]
 800a5a0:	3020      	adds	r0, #32
 800a5a2:	e7e4      	b.n	800a56e <__d2b+0x5a>
 800a5a4:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <__d2b+0xb8>)
 800a5a6:	18c0      	adds	r0, r0, r3
 800a5a8:	4b09      	ldr	r3, [pc, #36]	; (800a5d0 <__d2b+0xbc>)
 800a5aa:	6038      	str	r0, [r7, #0]
 800a5ac:	18e3      	adds	r3, r4, r3
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	18f3      	adds	r3, r6, r3
 800a5b2:	6958      	ldr	r0, [r3, #20]
 800a5b4:	f7ff fd20 	bl	8009ff8 <__hi0bits>
 800a5b8:	0164      	lsls	r4, r4, #5
 800a5ba:	e7e0      	b.n	800a57e <__d2b+0x6a>
 800a5bc:	0800ce38 	.word	0x0800ce38
 800a5c0:	0800ce49 	.word	0x0800ce49
 800a5c4:	0000030f 	.word	0x0000030f
 800a5c8:	fffffbcd 	.word	0xfffffbcd
 800a5cc:	fffffbce 	.word	0xfffffbce
 800a5d0:	3fffffff 	.word	0x3fffffff

0800a5d4 <__sflush_r>:
 800a5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5d6:	898b      	ldrh	r3, [r1, #12]
 800a5d8:	0005      	movs	r5, r0
 800a5da:	000c      	movs	r4, r1
 800a5dc:	071a      	lsls	r2, r3, #28
 800a5de:	d45c      	bmi.n	800a69a <__sflush_r+0xc6>
 800a5e0:	684a      	ldr	r2, [r1, #4]
 800a5e2:	2a00      	cmp	r2, #0
 800a5e4:	dc04      	bgt.n	800a5f0 <__sflush_r+0x1c>
 800a5e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	dc01      	bgt.n	800a5f0 <__sflush_r+0x1c>
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a5f2:	2f00      	cmp	r7, #0
 800a5f4:	d0fa      	beq.n	800a5ec <__sflush_r+0x18>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2080      	movs	r0, #128	; 0x80
 800a5fa:	682e      	ldr	r6, [r5, #0]
 800a5fc:	602a      	str	r2, [r5, #0]
 800a5fe:	001a      	movs	r2, r3
 800a600:	0140      	lsls	r0, r0, #5
 800a602:	6a21      	ldr	r1, [r4, #32]
 800a604:	4002      	ands	r2, r0
 800a606:	4203      	tst	r3, r0
 800a608:	d034      	beq.n	800a674 <__sflush_r+0xa0>
 800a60a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	075b      	lsls	r3, r3, #29
 800a610:	d506      	bpl.n	800a620 <__sflush_r+0x4c>
 800a612:	6863      	ldr	r3, [r4, #4]
 800a614:	1ac0      	subs	r0, r0, r3
 800a616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <__sflush_r+0x4c>
 800a61c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a61e:	1ac0      	subs	r0, r0, r3
 800a620:	0002      	movs	r2, r0
 800a622:	2300      	movs	r3, #0
 800a624:	0028      	movs	r0, r5
 800a626:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a628:	6a21      	ldr	r1, [r4, #32]
 800a62a:	47b8      	blx	r7
 800a62c:	89a2      	ldrh	r2, [r4, #12]
 800a62e:	1c43      	adds	r3, r0, #1
 800a630:	d106      	bne.n	800a640 <__sflush_r+0x6c>
 800a632:	6829      	ldr	r1, [r5, #0]
 800a634:	291d      	cmp	r1, #29
 800a636:	d82c      	bhi.n	800a692 <__sflush_r+0xbe>
 800a638:	4b2a      	ldr	r3, [pc, #168]	; (800a6e4 <__sflush_r+0x110>)
 800a63a:	410b      	asrs	r3, r1
 800a63c:	07db      	lsls	r3, r3, #31
 800a63e:	d428      	bmi.n	800a692 <__sflush_r+0xbe>
 800a640:	2300      	movs	r3, #0
 800a642:	6063      	str	r3, [r4, #4]
 800a644:	6923      	ldr	r3, [r4, #16]
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	04d2      	lsls	r2, r2, #19
 800a64a:	d505      	bpl.n	800a658 <__sflush_r+0x84>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <__sflush_r+0x82>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d100      	bne.n	800a658 <__sflush_r+0x84>
 800a656:	6560      	str	r0, [r4, #84]	; 0x54
 800a658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a65a:	602e      	str	r6, [r5, #0]
 800a65c:	2900      	cmp	r1, #0
 800a65e:	d0c5      	beq.n	800a5ec <__sflush_r+0x18>
 800a660:	0023      	movs	r3, r4
 800a662:	3344      	adds	r3, #68	; 0x44
 800a664:	4299      	cmp	r1, r3
 800a666:	d002      	beq.n	800a66e <__sflush_r+0x9a>
 800a668:	0028      	movs	r0, r5
 800a66a:	f7ff fb11 	bl	8009c90 <_free_r>
 800a66e:	2000      	movs	r0, #0
 800a670:	6360      	str	r0, [r4, #52]	; 0x34
 800a672:	e7bc      	b.n	800a5ee <__sflush_r+0x1a>
 800a674:	2301      	movs	r3, #1
 800a676:	0028      	movs	r0, r5
 800a678:	47b8      	blx	r7
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d1c6      	bne.n	800a60c <__sflush_r+0x38>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0c3      	beq.n	800a60c <__sflush_r+0x38>
 800a684:	2b1d      	cmp	r3, #29
 800a686:	d001      	beq.n	800a68c <__sflush_r+0xb8>
 800a688:	2b16      	cmp	r3, #22
 800a68a:	d101      	bne.n	800a690 <__sflush_r+0xbc>
 800a68c:	602e      	str	r6, [r5, #0]
 800a68e:	e7ad      	b.n	800a5ec <__sflush_r+0x18>
 800a690:	89a2      	ldrh	r2, [r4, #12]
 800a692:	2340      	movs	r3, #64	; 0x40
 800a694:	4313      	orrs	r3, r2
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	e7a9      	b.n	800a5ee <__sflush_r+0x1a>
 800a69a:	690e      	ldr	r6, [r1, #16]
 800a69c:	2e00      	cmp	r6, #0
 800a69e:	d0a5      	beq.n	800a5ec <__sflush_r+0x18>
 800a6a0:	680f      	ldr	r7, [r1, #0]
 800a6a2:	600e      	str	r6, [r1, #0]
 800a6a4:	1bba      	subs	r2, r7, r6
 800a6a6:	9201      	str	r2, [sp, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	079b      	lsls	r3, r3, #30
 800a6ac:	d100      	bne.n	800a6b0 <__sflush_r+0xdc>
 800a6ae:	694a      	ldr	r2, [r1, #20]
 800a6b0:	60a2      	str	r2, [r4, #8]
 800a6b2:	9b01      	ldr	r3, [sp, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	dd99      	ble.n	800a5ec <__sflush_r+0x18>
 800a6b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a6ba:	0032      	movs	r2, r6
 800a6bc:	001f      	movs	r7, r3
 800a6be:	0028      	movs	r0, r5
 800a6c0:	9b01      	ldr	r3, [sp, #4]
 800a6c2:	6a21      	ldr	r1, [r4, #32]
 800a6c4:	47b8      	blx	r7
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	dc06      	bgt.n	800a6d8 <__sflush_r+0x104>
 800a6ca:	2340      	movs	r3, #64	; 0x40
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	89a2      	ldrh	r2, [r4, #12]
 800a6d0:	4240      	negs	r0, r0
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	e78a      	b.n	800a5ee <__sflush_r+0x1a>
 800a6d8:	9b01      	ldr	r3, [sp, #4]
 800a6da:	1836      	adds	r6, r6, r0
 800a6dc:	1a1b      	subs	r3, r3, r0
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	e7e7      	b.n	800a6b2 <__sflush_r+0xde>
 800a6e2:	46c0      	nop			; (mov r8, r8)
 800a6e4:	dfbffffe 	.word	0xdfbffffe

0800a6e8 <_fflush_r>:
 800a6e8:	690b      	ldr	r3, [r1, #16]
 800a6ea:	b570      	push	{r4, r5, r6, lr}
 800a6ec:	0005      	movs	r5, r0
 800a6ee:	000c      	movs	r4, r1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <_fflush_r+0x12>
 800a6f4:	2500      	movs	r5, #0
 800a6f6:	0028      	movs	r0, r5
 800a6f8:	bd70      	pop	{r4, r5, r6, pc}
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	d004      	beq.n	800a708 <_fflush_r+0x20>
 800a6fe:	6a03      	ldr	r3, [r0, #32]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <_fflush_r+0x20>
 800a704:	f7fe fb0c 	bl	8008d20 <__sinit>
 800a708:	220c      	movs	r2, #12
 800a70a:	5ea3      	ldrsh	r3, [r4, r2]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0f1      	beq.n	800a6f4 <_fflush_r+0xc>
 800a710:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a712:	07d2      	lsls	r2, r2, #31
 800a714:	d404      	bmi.n	800a720 <_fflush_r+0x38>
 800a716:	059b      	lsls	r3, r3, #22
 800a718:	d402      	bmi.n	800a720 <_fflush_r+0x38>
 800a71a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a71c:	f7fe fc04 	bl	8008f28 <__retarget_lock_acquire_recursive>
 800a720:	0028      	movs	r0, r5
 800a722:	0021      	movs	r1, r4
 800a724:	f7ff ff56 	bl	800a5d4 <__sflush_r>
 800a728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a72a:	0005      	movs	r5, r0
 800a72c:	07db      	lsls	r3, r3, #31
 800a72e:	d4e2      	bmi.n	800a6f6 <_fflush_r+0xe>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	059b      	lsls	r3, r3, #22
 800a734:	d4df      	bmi.n	800a6f6 <_fflush_r+0xe>
 800a736:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a738:	f7fe fbf7 	bl	8008f2a <__retarget_lock_release_recursive>
 800a73c:	e7db      	b.n	800a6f6 <_fflush_r+0xe>
	...

0800a740 <_sbrk_r>:
 800a740:	2300      	movs	r3, #0
 800a742:	b570      	push	{r4, r5, r6, lr}
 800a744:	4d06      	ldr	r5, [pc, #24]	; (800a760 <_sbrk_r+0x20>)
 800a746:	0004      	movs	r4, r0
 800a748:	0008      	movs	r0, r1
 800a74a:	602b      	str	r3, [r5, #0]
 800a74c:	f7f9 fbb6 	bl	8003ebc <_sbrk>
 800a750:	1c43      	adds	r3, r0, #1
 800a752:	d103      	bne.n	800a75c <_sbrk_r+0x1c>
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d000      	beq.n	800a75c <_sbrk_r+0x1c>
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	bd70      	pop	{r4, r5, r6, pc}
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	20000f9c 	.word	0x20000f9c

0800a764 <__assert_func>:
 800a764:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a766:	0014      	movs	r4, r2
 800a768:	001a      	movs	r2, r3
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <__assert_func+0x2c>)
 800a76c:	0005      	movs	r5, r0
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	000e      	movs	r6, r1
 800a772:	68d8      	ldr	r0, [r3, #12]
 800a774:	4b07      	ldr	r3, [pc, #28]	; (800a794 <__assert_func+0x30>)
 800a776:	2c00      	cmp	r4, #0
 800a778:	d101      	bne.n	800a77e <__assert_func+0x1a>
 800a77a:	4b07      	ldr	r3, [pc, #28]	; (800a798 <__assert_func+0x34>)
 800a77c:	001c      	movs	r4, r3
 800a77e:	4907      	ldr	r1, [pc, #28]	; (800a79c <__assert_func+0x38>)
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	9402      	str	r4, [sp, #8]
 800a784:	002b      	movs	r3, r5
 800a786:	9600      	str	r6, [sp, #0]
 800a788:	f000 f856 	bl	800a838 <fiprintf>
 800a78c:	f000 f864 	bl	800a858 <abort>
 800a790:	200000b0 	.word	0x200000b0
 800a794:	0800cfae 	.word	0x0800cfae
 800a798:	0800cfe9 	.word	0x0800cfe9
 800a79c:	0800cfbb 	.word	0x0800cfbb

0800a7a0 <_calloc_r>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	0c0b      	lsrs	r3, r1, #16
 800a7a4:	0c15      	lsrs	r5, r2, #16
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d11e      	bne.n	800a7e8 <_calloc_r+0x48>
 800a7aa:	2d00      	cmp	r5, #0
 800a7ac:	d10c      	bne.n	800a7c8 <_calloc_r+0x28>
 800a7ae:	b289      	uxth	r1, r1
 800a7b0:	b294      	uxth	r4, r2
 800a7b2:	434c      	muls	r4, r1
 800a7b4:	0021      	movs	r1, r4
 800a7b6:	f7ff fae1 	bl	8009d7c <_malloc_r>
 800a7ba:	1e05      	subs	r5, r0, #0
 800a7bc:	d01b      	beq.n	800a7f6 <_calloc_r+0x56>
 800a7be:	0022      	movs	r2, r4
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	f7fe fb2d 	bl	8008e20 <memset>
 800a7c6:	e016      	b.n	800a7f6 <_calloc_r+0x56>
 800a7c8:	1c2b      	adds	r3, r5, #0
 800a7ca:	1c0c      	adds	r4, r1, #0
 800a7cc:	b289      	uxth	r1, r1
 800a7ce:	b292      	uxth	r2, r2
 800a7d0:	434a      	muls	r2, r1
 800a7d2:	b2a1      	uxth	r1, r4
 800a7d4:	b29c      	uxth	r4, r3
 800a7d6:	434c      	muls	r4, r1
 800a7d8:	0c13      	lsrs	r3, r2, #16
 800a7da:	18e4      	adds	r4, r4, r3
 800a7dc:	0c23      	lsrs	r3, r4, #16
 800a7de:	d107      	bne.n	800a7f0 <_calloc_r+0x50>
 800a7e0:	0424      	lsls	r4, r4, #16
 800a7e2:	b292      	uxth	r2, r2
 800a7e4:	4314      	orrs	r4, r2
 800a7e6:	e7e5      	b.n	800a7b4 <_calloc_r+0x14>
 800a7e8:	2d00      	cmp	r5, #0
 800a7ea:	d101      	bne.n	800a7f0 <_calloc_r+0x50>
 800a7ec:	1c14      	adds	r4, r2, #0
 800a7ee:	e7ed      	b.n	800a7cc <_calloc_r+0x2c>
 800a7f0:	230c      	movs	r3, #12
 800a7f2:	2500      	movs	r5, #0
 800a7f4:	6003      	str	r3, [r0, #0]
 800a7f6:	0028      	movs	r0, r5
 800a7f8:	bd70      	pop	{r4, r5, r6, pc}

0800a7fa <__ascii_mbtowc>:
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	d100      	bne.n	800a802 <__ascii_mbtowc+0x8>
 800a800:	a901      	add	r1, sp, #4
 800a802:	1e10      	subs	r0, r2, #0
 800a804:	d006      	beq.n	800a814 <__ascii_mbtowc+0x1a>
 800a806:	2b00      	cmp	r3, #0
 800a808:	d006      	beq.n	800a818 <__ascii_mbtowc+0x1e>
 800a80a:	7813      	ldrb	r3, [r2, #0]
 800a80c:	600b      	str	r3, [r1, #0]
 800a80e:	7810      	ldrb	r0, [r2, #0]
 800a810:	1e43      	subs	r3, r0, #1
 800a812:	4198      	sbcs	r0, r3
 800a814:	b002      	add	sp, #8
 800a816:	4770      	bx	lr
 800a818:	2002      	movs	r0, #2
 800a81a:	4240      	negs	r0, r0
 800a81c:	e7fa      	b.n	800a814 <__ascii_mbtowc+0x1a>

0800a81e <__ascii_wctomb>:
 800a81e:	0003      	movs	r3, r0
 800a820:	1e08      	subs	r0, r1, #0
 800a822:	d005      	beq.n	800a830 <__ascii_wctomb+0x12>
 800a824:	2aff      	cmp	r2, #255	; 0xff
 800a826:	d904      	bls.n	800a832 <__ascii_wctomb+0x14>
 800a828:	228a      	movs	r2, #138	; 0x8a
 800a82a:	2001      	movs	r0, #1
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	4240      	negs	r0, r0
 800a830:	4770      	bx	lr
 800a832:	2001      	movs	r0, #1
 800a834:	700a      	strb	r2, [r1, #0]
 800a836:	e7fb      	b.n	800a830 <__ascii_wctomb+0x12>

0800a838 <fiprintf>:
 800a838:	b40e      	push	{r1, r2, r3}
 800a83a:	b517      	push	{r0, r1, r2, r4, lr}
 800a83c:	4c05      	ldr	r4, [pc, #20]	; (800a854 <fiprintf+0x1c>)
 800a83e:	ab05      	add	r3, sp, #20
 800a840:	cb04      	ldmia	r3!, {r2}
 800a842:	0001      	movs	r1, r0
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	f000 f834 	bl	800a8b4 <_vfiprintf_r>
 800a84c:	bc1e      	pop	{r1, r2, r3, r4}
 800a84e:	bc08      	pop	{r3}
 800a850:	b003      	add	sp, #12
 800a852:	4718      	bx	r3
 800a854:	200000b0 	.word	0x200000b0

0800a858 <abort>:
 800a858:	2006      	movs	r0, #6
 800a85a:	b510      	push	{r4, lr}
 800a85c:	f000 fa16 	bl	800ac8c <raise>
 800a860:	2001      	movs	r0, #1
 800a862:	f7f9 fab9 	bl	8003dd8 <_exit>

0800a866 <__sfputc_r>:
 800a866:	6893      	ldr	r3, [r2, #8]
 800a868:	b510      	push	{r4, lr}
 800a86a:	3b01      	subs	r3, #1
 800a86c:	6093      	str	r3, [r2, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	da04      	bge.n	800a87c <__sfputc_r+0x16>
 800a872:	6994      	ldr	r4, [r2, #24]
 800a874:	42a3      	cmp	r3, r4
 800a876:	db07      	blt.n	800a888 <__sfputc_r+0x22>
 800a878:	290a      	cmp	r1, #10
 800a87a:	d005      	beq.n	800a888 <__sfputc_r+0x22>
 800a87c:	6813      	ldr	r3, [r2, #0]
 800a87e:	1c58      	adds	r0, r3, #1
 800a880:	6010      	str	r0, [r2, #0]
 800a882:	7019      	strb	r1, [r3, #0]
 800a884:	0008      	movs	r0, r1
 800a886:	bd10      	pop	{r4, pc}
 800a888:	f000 f930 	bl	800aaec <__swbuf_r>
 800a88c:	0001      	movs	r1, r0
 800a88e:	e7f9      	b.n	800a884 <__sfputc_r+0x1e>

0800a890 <__sfputs_r>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	0006      	movs	r6, r0
 800a894:	000f      	movs	r7, r1
 800a896:	0014      	movs	r4, r2
 800a898:	18d5      	adds	r5, r2, r3
 800a89a:	42ac      	cmp	r4, r5
 800a89c:	d101      	bne.n	800a8a2 <__sfputs_r+0x12>
 800a89e:	2000      	movs	r0, #0
 800a8a0:	e007      	b.n	800a8b2 <__sfputs_r+0x22>
 800a8a2:	7821      	ldrb	r1, [r4, #0]
 800a8a4:	003a      	movs	r2, r7
 800a8a6:	0030      	movs	r0, r6
 800a8a8:	f7ff ffdd 	bl	800a866 <__sfputc_r>
 800a8ac:	3401      	adds	r4, #1
 800a8ae:	1c43      	adds	r3, r0, #1
 800a8b0:	d1f3      	bne.n	800a89a <__sfputs_r+0xa>
 800a8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8b4 <_vfiprintf_r>:
 800a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8b6:	b0a1      	sub	sp, #132	; 0x84
 800a8b8:	000f      	movs	r7, r1
 800a8ba:	0015      	movs	r5, r2
 800a8bc:	001e      	movs	r6, r3
 800a8be:	9003      	str	r0, [sp, #12]
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d004      	beq.n	800a8ce <_vfiprintf_r+0x1a>
 800a8c4:	6a03      	ldr	r3, [r0, #32]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <_vfiprintf_r+0x1a>
 800a8ca:	f7fe fa29 	bl	8008d20 <__sinit>
 800a8ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8d0:	07db      	lsls	r3, r3, #31
 800a8d2:	d405      	bmi.n	800a8e0 <_vfiprintf_r+0x2c>
 800a8d4:	89bb      	ldrh	r3, [r7, #12]
 800a8d6:	059b      	lsls	r3, r3, #22
 800a8d8:	d402      	bmi.n	800a8e0 <_vfiprintf_r+0x2c>
 800a8da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a8dc:	f7fe fb24 	bl	8008f28 <__retarget_lock_acquire_recursive>
 800a8e0:	89bb      	ldrh	r3, [r7, #12]
 800a8e2:	071b      	lsls	r3, r3, #28
 800a8e4:	d502      	bpl.n	800a8ec <_vfiprintf_r+0x38>
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d113      	bne.n	800a914 <_vfiprintf_r+0x60>
 800a8ec:	0039      	movs	r1, r7
 800a8ee:	9803      	ldr	r0, [sp, #12]
 800a8f0:	f000 f93e 	bl	800ab70 <__swsetup_r>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d00d      	beq.n	800a914 <_vfiprintf_r+0x60>
 800a8f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8fa:	07db      	lsls	r3, r3, #31
 800a8fc:	d503      	bpl.n	800a906 <_vfiprintf_r+0x52>
 800a8fe:	2001      	movs	r0, #1
 800a900:	4240      	negs	r0, r0
 800a902:	b021      	add	sp, #132	; 0x84
 800a904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a906:	89bb      	ldrh	r3, [r7, #12]
 800a908:	059b      	lsls	r3, r3, #22
 800a90a:	d4f8      	bmi.n	800a8fe <_vfiprintf_r+0x4a>
 800a90c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a90e:	f7fe fb0c 	bl	8008f2a <__retarget_lock_release_recursive>
 800a912:	e7f4      	b.n	800a8fe <_vfiprintf_r+0x4a>
 800a914:	2300      	movs	r3, #0
 800a916:	ac08      	add	r4, sp, #32
 800a918:	6163      	str	r3, [r4, #20]
 800a91a:	3320      	adds	r3, #32
 800a91c:	7663      	strb	r3, [r4, #25]
 800a91e:	3310      	adds	r3, #16
 800a920:	76a3      	strb	r3, [r4, #26]
 800a922:	9607      	str	r6, [sp, #28]
 800a924:	002e      	movs	r6, r5
 800a926:	7833      	ldrb	r3, [r6, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <_vfiprintf_r+0x7c>
 800a92c:	2b25      	cmp	r3, #37	; 0x25
 800a92e:	d148      	bne.n	800a9c2 <_vfiprintf_r+0x10e>
 800a930:	1b73      	subs	r3, r6, r5
 800a932:	9305      	str	r3, [sp, #20]
 800a934:	42ae      	cmp	r6, r5
 800a936:	d00b      	beq.n	800a950 <_vfiprintf_r+0x9c>
 800a938:	002a      	movs	r2, r5
 800a93a:	0039      	movs	r1, r7
 800a93c:	9803      	ldr	r0, [sp, #12]
 800a93e:	f7ff ffa7 	bl	800a890 <__sfputs_r>
 800a942:	3001      	adds	r0, #1
 800a944:	d100      	bne.n	800a948 <_vfiprintf_r+0x94>
 800a946:	e0af      	b.n	800aaa8 <_vfiprintf_r+0x1f4>
 800a948:	6963      	ldr	r3, [r4, #20]
 800a94a:	9a05      	ldr	r2, [sp, #20]
 800a94c:	189b      	adds	r3, r3, r2
 800a94e:	6163      	str	r3, [r4, #20]
 800a950:	7833      	ldrb	r3, [r6, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d100      	bne.n	800a958 <_vfiprintf_r+0xa4>
 800a956:	e0a7      	b.n	800aaa8 <_vfiprintf_r+0x1f4>
 800a958:	2201      	movs	r2, #1
 800a95a:	2300      	movs	r3, #0
 800a95c:	4252      	negs	r2, r2
 800a95e:	6062      	str	r2, [r4, #4]
 800a960:	a904      	add	r1, sp, #16
 800a962:	3254      	adds	r2, #84	; 0x54
 800a964:	1852      	adds	r2, r2, r1
 800a966:	1c75      	adds	r5, r6, #1
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	60e3      	str	r3, [r4, #12]
 800a96c:	60a3      	str	r3, [r4, #8]
 800a96e:	7013      	strb	r3, [r2, #0]
 800a970:	65a3      	str	r3, [r4, #88]	; 0x58
 800a972:	4b59      	ldr	r3, [pc, #356]	; (800aad8 <_vfiprintf_r+0x224>)
 800a974:	2205      	movs	r2, #5
 800a976:	0018      	movs	r0, r3
 800a978:	7829      	ldrb	r1, [r5, #0]
 800a97a:	9305      	str	r3, [sp, #20]
 800a97c:	f7fe fad6 	bl	8008f2c <memchr>
 800a980:	1c6e      	adds	r6, r5, #1
 800a982:	2800      	cmp	r0, #0
 800a984:	d11f      	bne.n	800a9c6 <_vfiprintf_r+0x112>
 800a986:	6822      	ldr	r2, [r4, #0]
 800a988:	06d3      	lsls	r3, r2, #27
 800a98a:	d504      	bpl.n	800a996 <_vfiprintf_r+0xe2>
 800a98c:	2353      	movs	r3, #83	; 0x53
 800a98e:	a904      	add	r1, sp, #16
 800a990:	185b      	adds	r3, r3, r1
 800a992:	2120      	movs	r1, #32
 800a994:	7019      	strb	r1, [r3, #0]
 800a996:	0713      	lsls	r3, r2, #28
 800a998:	d504      	bpl.n	800a9a4 <_vfiprintf_r+0xf0>
 800a99a:	2353      	movs	r3, #83	; 0x53
 800a99c:	a904      	add	r1, sp, #16
 800a99e:	185b      	adds	r3, r3, r1
 800a9a0:	212b      	movs	r1, #43	; 0x2b
 800a9a2:	7019      	strb	r1, [r3, #0]
 800a9a4:	782b      	ldrb	r3, [r5, #0]
 800a9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a8:	d016      	beq.n	800a9d8 <_vfiprintf_r+0x124>
 800a9aa:	002e      	movs	r6, r5
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	200a      	movs	r0, #10
 800a9b0:	68e3      	ldr	r3, [r4, #12]
 800a9b2:	7832      	ldrb	r2, [r6, #0]
 800a9b4:	1c75      	adds	r5, r6, #1
 800a9b6:	3a30      	subs	r2, #48	; 0x30
 800a9b8:	2a09      	cmp	r2, #9
 800a9ba:	d94e      	bls.n	800aa5a <_vfiprintf_r+0x1a6>
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d111      	bne.n	800a9e4 <_vfiprintf_r+0x130>
 800a9c0:	e017      	b.n	800a9f2 <_vfiprintf_r+0x13e>
 800a9c2:	3601      	adds	r6, #1
 800a9c4:	e7af      	b.n	800a926 <_vfiprintf_r+0x72>
 800a9c6:	9b05      	ldr	r3, [sp, #20]
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	1ac0      	subs	r0, r0, r3
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4083      	lsls	r3, r0
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	0035      	movs	r5, r6
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	e7cc      	b.n	800a972 <_vfiprintf_r+0xbe>
 800a9d8:	9b07      	ldr	r3, [sp, #28]
 800a9da:	1d19      	adds	r1, r3, #4
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	9107      	str	r1, [sp, #28]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	db01      	blt.n	800a9e8 <_vfiprintf_r+0x134>
 800a9e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9e6:	e004      	b.n	800a9f2 <_vfiprintf_r+0x13e>
 800a9e8:	425b      	negs	r3, r3
 800a9ea:	60e3      	str	r3, [r4, #12]
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	7833      	ldrb	r3, [r6, #0]
 800a9f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f6:	d10a      	bne.n	800aa0e <_vfiprintf_r+0x15a>
 800a9f8:	7873      	ldrb	r3, [r6, #1]
 800a9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fc:	d135      	bne.n	800aa6a <_vfiprintf_r+0x1b6>
 800a9fe:	9b07      	ldr	r3, [sp, #28]
 800aa00:	3602      	adds	r6, #2
 800aa02:	1d1a      	adds	r2, r3, #4
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	9207      	str	r2, [sp, #28]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	db2b      	blt.n	800aa64 <_vfiprintf_r+0x1b0>
 800aa0c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0e:	4d33      	ldr	r5, [pc, #204]	; (800aadc <_vfiprintf_r+0x228>)
 800aa10:	2203      	movs	r2, #3
 800aa12:	0028      	movs	r0, r5
 800aa14:	7831      	ldrb	r1, [r6, #0]
 800aa16:	f7fe fa89 	bl	8008f2c <memchr>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d006      	beq.n	800aa2c <_vfiprintf_r+0x178>
 800aa1e:	2340      	movs	r3, #64	; 0x40
 800aa20:	1b40      	subs	r0, r0, r5
 800aa22:	4083      	lsls	r3, r0
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	3601      	adds	r6, #1
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	7831      	ldrb	r1, [r6, #0]
 800aa2e:	2206      	movs	r2, #6
 800aa30:	482b      	ldr	r0, [pc, #172]	; (800aae0 <_vfiprintf_r+0x22c>)
 800aa32:	1c75      	adds	r5, r6, #1
 800aa34:	7621      	strb	r1, [r4, #24]
 800aa36:	f7fe fa79 	bl	8008f2c <memchr>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d043      	beq.n	800aac6 <_vfiprintf_r+0x212>
 800aa3e:	4b29      	ldr	r3, [pc, #164]	; (800aae4 <_vfiprintf_r+0x230>)
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d125      	bne.n	800aa90 <_vfiprintf_r+0x1dc>
 800aa44:	2207      	movs	r2, #7
 800aa46:	9b07      	ldr	r3, [sp, #28]
 800aa48:	3307      	adds	r3, #7
 800aa4a:	4393      	bics	r3, r2
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	9307      	str	r3, [sp, #28]
 800aa50:	6963      	ldr	r3, [r4, #20]
 800aa52:	9a04      	ldr	r2, [sp, #16]
 800aa54:	189b      	adds	r3, r3, r2
 800aa56:	6163      	str	r3, [r4, #20]
 800aa58:	e764      	b.n	800a924 <_vfiprintf_r+0x70>
 800aa5a:	4343      	muls	r3, r0
 800aa5c:	002e      	movs	r6, r5
 800aa5e:	2101      	movs	r1, #1
 800aa60:	189b      	adds	r3, r3, r2
 800aa62:	e7a6      	b.n	800a9b2 <_vfiprintf_r+0xfe>
 800aa64:	2301      	movs	r3, #1
 800aa66:	425b      	negs	r3, r3
 800aa68:	e7d0      	b.n	800aa0c <_vfiprintf_r+0x158>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	200a      	movs	r0, #10
 800aa6e:	001a      	movs	r2, r3
 800aa70:	3601      	adds	r6, #1
 800aa72:	6063      	str	r3, [r4, #4]
 800aa74:	7831      	ldrb	r1, [r6, #0]
 800aa76:	1c75      	adds	r5, r6, #1
 800aa78:	3930      	subs	r1, #48	; 0x30
 800aa7a:	2909      	cmp	r1, #9
 800aa7c:	d903      	bls.n	800aa86 <_vfiprintf_r+0x1d2>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0c5      	beq.n	800aa0e <_vfiprintf_r+0x15a>
 800aa82:	9209      	str	r2, [sp, #36]	; 0x24
 800aa84:	e7c3      	b.n	800aa0e <_vfiprintf_r+0x15a>
 800aa86:	4342      	muls	r2, r0
 800aa88:	002e      	movs	r6, r5
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	1852      	adds	r2, r2, r1
 800aa8e:	e7f1      	b.n	800aa74 <_vfiprintf_r+0x1c0>
 800aa90:	aa07      	add	r2, sp, #28
 800aa92:	9200      	str	r2, [sp, #0]
 800aa94:	0021      	movs	r1, r4
 800aa96:	003a      	movs	r2, r7
 800aa98:	4b13      	ldr	r3, [pc, #76]	; (800aae8 <_vfiprintf_r+0x234>)
 800aa9a:	9803      	ldr	r0, [sp, #12]
 800aa9c:	f7fd fcec 	bl	8008478 <_printf_float>
 800aaa0:	9004      	str	r0, [sp, #16]
 800aaa2:	9b04      	ldr	r3, [sp, #16]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	d1d3      	bne.n	800aa50 <_vfiprintf_r+0x19c>
 800aaa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaaa:	07db      	lsls	r3, r3, #31
 800aaac:	d405      	bmi.n	800aaba <_vfiprintf_r+0x206>
 800aaae:	89bb      	ldrh	r3, [r7, #12]
 800aab0:	059b      	lsls	r3, r3, #22
 800aab2:	d402      	bmi.n	800aaba <_vfiprintf_r+0x206>
 800aab4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800aab6:	f7fe fa38 	bl	8008f2a <__retarget_lock_release_recursive>
 800aaba:	89bb      	ldrh	r3, [r7, #12]
 800aabc:	065b      	lsls	r3, r3, #25
 800aabe:	d500      	bpl.n	800aac2 <_vfiprintf_r+0x20e>
 800aac0:	e71d      	b.n	800a8fe <_vfiprintf_r+0x4a>
 800aac2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aac4:	e71d      	b.n	800a902 <_vfiprintf_r+0x4e>
 800aac6:	aa07      	add	r2, sp, #28
 800aac8:	9200      	str	r2, [sp, #0]
 800aaca:	0021      	movs	r1, r4
 800aacc:	003a      	movs	r2, r7
 800aace:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <_vfiprintf_r+0x234>)
 800aad0:	9803      	ldr	r0, [sp, #12]
 800aad2:	f7fd ff97 	bl	8008a04 <_printf_i>
 800aad6:	e7e3      	b.n	800aaa0 <_vfiprintf_r+0x1ec>
 800aad8:	0800d0eb 	.word	0x0800d0eb
 800aadc:	0800d0f1 	.word	0x0800d0f1
 800aae0:	0800d0f5 	.word	0x0800d0f5
 800aae4:	08008479 	.word	0x08008479
 800aae8:	0800a891 	.word	0x0800a891

0800aaec <__swbuf_r>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	0006      	movs	r6, r0
 800aaf0:	000d      	movs	r5, r1
 800aaf2:	0014      	movs	r4, r2
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d004      	beq.n	800ab02 <__swbuf_r+0x16>
 800aaf8:	6a03      	ldr	r3, [r0, #32]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <__swbuf_r+0x16>
 800aafe:	f7fe f90f 	bl	8008d20 <__sinit>
 800ab02:	69a3      	ldr	r3, [r4, #24]
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	071b      	lsls	r3, r3, #28
 800ab0a:	d528      	bpl.n	800ab5e <__swbuf_r+0x72>
 800ab0c:	6923      	ldr	r3, [r4, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d025      	beq.n	800ab5e <__swbuf_r+0x72>
 800ab12:	6923      	ldr	r3, [r4, #16]
 800ab14:	6820      	ldr	r0, [r4, #0]
 800ab16:	b2ef      	uxtb	r7, r5
 800ab18:	1ac0      	subs	r0, r0, r3
 800ab1a:	6963      	ldr	r3, [r4, #20]
 800ab1c:	b2ed      	uxtb	r5, r5
 800ab1e:	4283      	cmp	r3, r0
 800ab20:	dc05      	bgt.n	800ab2e <__swbuf_r+0x42>
 800ab22:	0021      	movs	r1, r4
 800ab24:	0030      	movs	r0, r6
 800ab26:	f7ff fddf 	bl	800a6e8 <_fflush_r>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d11d      	bne.n	800ab6a <__swbuf_r+0x7e>
 800ab2e:	68a3      	ldr	r3, [r4, #8]
 800ab30:	3001      	adds	r0, #1
 800ab32:	3b01      	subs	r3, #1
 800ab34:	60a3      	str	r3, [r4, #8]
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	6022      	str	r2, [r4, #0]
 800ab3c:	701f      	strb	r7, [r3, #0]
 800ab3e:	6963      	ldr	r3, [r4, #20]
 800ab40:	4283      	cmp	r3, r0
 800ab42:	d004      	beq.n	800ab4e <__swbuf_r+0x62>
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	07db      	lsls	r3, r3, #31
 800ab48:	d507      	bpl.n	800ab5a <__swbuf_r+0x6e>
 800ab4a:	2d0a      	cmp	r5, #10
 800ab4c:	d105      	bne.n	800ab5a <__swbuf_r+0x6e>
 800ab4e:	0021      	movs	r1, r4
 800ab50:	0030      	movs	r0, r6
 800ab52:	f7ff fdc9 	bl	800a6e8 <_fflush_r>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d107      	bne.n	800ab6a <__swbuf_r+0x7e>
 800ab5a:	0028      	movs	r0, r5
 800ab5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab5e:	0021      	movs	r1, r4
 800ab60:	0030      	movs	r0, r6
 800ab62:	f000 f805 	bl	800ab70 <__swsetup_r>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d0d3      	beq.n	800ab12 <__swbuf_r+0x26>
 800ab6a:	2501      	movs	r5, #1
 800ab6c:	426d      	negs	r5, r5
 800ab6e:	e7f4      	b.n	800ab5a <__swbuf_r+0x6e>

0800ab70 <__swsetup_r>:
 800ab70:	4b30      	ldr	r3, [pc, #192]	; (800ac34 <__swsetup_r+0xc4>)
 800ab72:	b570      	push	{r4, r5, r6, lr}
 800ab74:	0005      	movs	r5, r0
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	000c      	movs	r4, r1
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d004      	beq.n	800ab88 <__swsetup_r+0x18>
 800ab7e:	6a03      	ldr	r3, [r0, #32]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <__swsetup_r+0x18>
 800ab84:	f7fe f8cc 	bl	8008d20 <__sinit>
 800ab88:	230c      	movs	r3, #12
 800ab8a:	5ee2      	ldrsh	r2, [r4, r3]
 800ab8c:	b293      	uxth	r3, r2
 800ab8e:	0711      	lsls	r1, r2, #28
 800ab90:	d423      	bmi.n	800abda <__swsetup_r+0x6a>
 800ab92:	06d9      	lsls	r1, r3, #27
 800ab94:	d407      	bmi.n	800aba6 <__swsetup_r+0x36>
 800ab96:	2309      	movs	r3, #9
 800ab98:	2001      	movs	r0, #1
 800ab9a:	602b      	str	r3, [r5, #0]
 800ab9c:	3337      	adds	r3, #55	; 0x37
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	81a3      	strh	r3, [r4, #12]
 800aba2:	4240      	negs	r0, r0
 800aba4:	bd70      	pop	{r4, r5, r6, pc}
 800aba6:	075b      	lsls	r3, r3, #29
 800aba8:	d513      	bpl.n	800abd2 <__swsetup_r+0x62>
 800abaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abac:	2900      	cmp	r1, #0
 800abae:	d008      	beq.n	800abc2 <__swsetup_r+0x52>
 800abb0:	0023      	movs	r3, r4
 800abb2:	3344      	adds	r3, #68	; 0x44
 800abb4:	4299      	cmp	r1, r3
 800abb6:	d002      	beq.n	800abbe <__swsetup_r+0x4e>
 800abb8:	0028      	movs	r0, r5
 800abba:	f7ff f869 	bl	8009c90 <_free_r>
 800abbe:	2300      	movs	r3, #0
 800abc0:	6363      	str	r3, [r4, #52]	; 0x34
 800abc2:	2224      	movs	r2, #36	; 0x24
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	4393      	bics	r3, r2
 800abc8:	81a3      	strh	r3, [r4, #12]
 800abca:	2300      	movs	r3, #0
 800abcc:	6063      	str	r3, [r4, #4]
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	2308      	movs	r3, #8
 800abd4:	89a2      	ldrh	r2, [r4, #12]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10b      	bne.n	800abf8 <__swsetup_r+0x88>
 800abe0:	21a0      	movs	r1, #160	; 0xa0
 800abe2:	2280      	movs	r2, #128	; 0x80
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	0089      	lsls	r1, r1, #2
 800abe8:	0092      	lsls	r2, r2, #2
 800abea:	400b      	ands	r3, r1
 800abec:	4293      	cmp	r3, r2
 800abee:	d003      	beq.n	800abf8 <__swsetup_r+0x88>
 800abf0:	0021      	movs	r1, r4
 800abf2:	0028      	movs	r0, r5
 800abf4:	f000 f892 	bl	800ad1c <__smakebuf_r>
 800abf8:	220c      	movs	r2, #12
 800abfa:	5ea3      	ldrsh	r3, [r4, r2]
 800abfc:	2001      	movs	r0, #1
 800abfe:	001a      	movs	r2, r3
 800ac00:	b299      	uxth	r1, r3
 800ac02:	4002      	ands	r2, r0
 800ac04:	4203      	tst	r3, r0
 800ac06:	d00f      	beq.n	800ac28 <__swsetup_r+0xb8>
 800ac08:	2200      	movs	r2, #0
 800ac0a:	60a2      	str	r2, [r4, #8]
 800ac0c:	6962      	ldr	r2, [r4, #20]
 800ac0e:	4252      	negs	r2, r2
 800ac10:	61a2      	str	r2, [r4, #24]
 800ac12:	2000      	movs	r0, #0
 800ac14:	6922      	ldr	r2, [r4, #16]
 800ac16:	4282      	cmp	r2, r0
 800ac18:	d1c4      	bne.n	800aba4 <__swsetup_r+0x34>
 800ac1a:	0609      	lsls	r1, r1, #24
 800ac1c:	d5c2      	bpl.n	800aba4 <__swsetup_r+0x34>
 800ac1e:	2240      	movs	r2, #64	; 0x40
 800ac20:	4313      	orrs	r3, r2
 800ac22:	81a3      	strh	r3, [r4, #12]
 800ac24:	3801      	subs	r0, #1
 800ac26:	e7bd      	b.n	800aba4 <__swsetup_r+0x34>
 800ac28:	0788      	lsls	r0, r1, #30
 800ac2a:	d400      	bmi.n	800ac2e <__swsetup_r+0xbe>
 800ac2c:	6962      	ldr	r2, [r4, #20]
 800ac2e:	60a2      	str	r2, [r4, #8]
 800ac30:	e7ef      	b.n	800ac12 <__swsetup_r+0xa2>
 800ac32:	46c0      	nop			; (mov r8, r8)
 800ac34:	200000b0 	.word	0x200000b0

0800ac38 <_raise_r>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	0004      	movs	r4, r0
 800ac3c:	000d      	movs	r5, r1
 800ac3e:	291f      	cmp	r1, #31
 800ac40:	d904      	bls.n	800ac4c <_raise_r+0x14>
 800ac42:	2316      	movs	r3, #22
 800ac44:	6003      	str	r3, [r0, #0]
 800ac46:	2001      	movs	r0, #1
 800ac48:	4240      	negs	r0, r0
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d004      	beq.n	800ac5c <_raise_r+0x24>
 800ac52:	008a      	lsls	r2, r1, #2
 800ac54:	189b      	adds	r3, r3, r2
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	2a00      	cmp	r2, #0
 800ac5a:	d108      	bne.n	800ac6e <_raise_r+0x36>
 800ac5c:	0020      	movs	r0, r4
 800ac5e:	f000 f831 	bl	800acc4 <_getpid_r>
 800ac62:	002a      	movs	r2, r5
 800ac64:	0001      	movs	r1, r0
 800ac66:	0020      	movs	r0, r4
 800ac68:	f000 f81a 	bl	800aca0 <_kill_r>
 800ac6c:	e7ed      	b.n	800ac4a <_raise_r+0x12>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	2a01      	cmp	r2, #1
 800ac72:	d0ea      	beq.n	800ac4a <_raise_r+0x12>
 800ac74:	1c51      	adds	r1, r2, #1
 800ac76:	d103      	bne.n	800ac80 <_raise_r+0x48>
 800ac78:	2316      	movs	r3, #22
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	e7e4      	b.n	800ac4a <_raise_r+0x12>
 800ac80:	2400      	movs	r4, #0
 800ac82:	0028      	movs	r0, r5
 800ac84:	601c      	str	r4, [r3, #0]
 800ac86:	4790      	blx	r2
 800ac88:	0020      	movs	r0, r4
 800ac8a:	e7de      	b.n	800ac4a <_raise_r+0x12>

0800ac8c <raise>:
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	4b03      	ldr	r3, [pc, #12]	; (800ac9c <raise+0x10>)
 800ac90:	0001      	movs	r1, r0
 800ac92:	6818      	ldr	r0, [r3, #0]
 800ac94:	f7ff ffd0 	bl	800ac38 <_raise_r>
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	200000b0 	.word	0x200000b0

0800aca0 <_kill_r>:
 800aca0:	2300      	movs	r3, #0
 800aca2:	b570      	push	{r4, r5, r6, lr}
 800aca4:	4d06      	ldr	r5, [pc, #24]	; (800acc0 <_kill_r+0x20>)
 800aca6:	0004      	movs	r4, r0
 800aca8:	0008      	movs	r0, r1
 800acaa:	0011      	movs	r1, r2
 800acac:	602b      	str	r3, [r5, #0]
 800acae:	f7f9 f883 	bl	8003db8 <_kill>
 800acb2:	1c43      	adds	r3, r0, #1
 800acb4:	d103      	bne.n	800acbe <_kill_r+0x1e>
 800acb6:	682b      	ldr	r3, [r5, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d000      	beq.n	800acbe <_kill_r+0x1e>
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	20000f9c 	.word	0x20000f9c

0800acc4 <_getpid_r>:
 800acc4:	b510      	push	{r4, lr}
 800acc6:	f7f9 f871 	bl	8003dac <_getpid>
 800acca:	bd10      	pop	{r4, pc}

0800accc <__swhatbuf_r>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	000e      	movs	r6, r1
 800acd0:	001d      	movs	r5, r3
 800acd2:	230e      	movs	r3, #14
 800acd4:	5ec9      	ldrsh	r1, [r1, r3]
 800acd6:	0014      	movs	r4, r2
 800acd8:	b096      	sub	sp, #88	; 0x58
 800acda:	2900      	cmp	r1, #0
 800acdc:	da0c      	bge.n	800acf8 <__swhatbuf_r+0x2c>
 800acde:	89b2      	ldrh	r2, [r6, #12]
 800ace0:	2380      	movs	r3, #128	; 0x80
 800ace2:	0011      	movs	r1, r2
 800ace4:	4019      	ands	r1, r3
 800ace6:	421a      	tst	r2, r3
 800ace8:	d013      	beq.n	800ad12 <__swhatbuf_r+0x46>
 800acea:	2100      	movs	r1, #0
 800acec:	3b40      	subs	r3, #64	; 0x40
 800acee:	2000      	movs	r0, #0
 800acf0:	6029      	str	r1, [r5, #0]
 800acf2:	6023      	str	r3, [r4, #0]
 800acf4:	b016      	add	sp, #88	; 0x58
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	466a      	mov	r2, sp
 800acfa:	f000 f84d 	bl	800ad98 <_fstat_r>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	dbed      	blt.n	800acde <__swhatbuf_r+0x12>
 800ad02:	23f0      	movs	r3, #240	; 0xf0
 800ad04:	9901      	ldr	r1, [sp, #4]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	4019      	ands	r1, r3
 800ad0a:	4b03      	ldr	r3, [pc, #12]	; (800ad18 <__swhatbuf_r+0x4c>)
 800ad0c:	18c9      	adds	r1, r1, r3
 800ad0e:	424b      	negs	r3, r1
 800ad10:	4159      	adcs	r1, r3
 800ad12:	2380      	movs	r3, #128	; 0x80
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	e7ea      	b.n	800acee <__swhatbuf_r+0x22>
 800ad18:	ffffe000 	.word	0xffffe000

0800ad1c <__smakebuf_r>:
 800ad1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad1e:	2602      	movs	r6, #2
 800ad20:	898b      	ldrh	r3, [r1, #12]
 800ad22:	0005      	movs	r5, r0
 800ad24:	000c      	movs	r4, r1
 800ad26:	4233      	tst	r3, r6
 800ad28:	d006      	beq.n	800ad38 <__smakebuf_r+0x1c>
 800ad2a:	0023      	movs	r3, r4
 800ad2c:	3347      	adds	r3, #71	; 0x47
 800ad2e:	6023      	str	r3, [r4, #0]
 800ad30:	6123      	str	r3, [r4, #16]
 800ad32:	2301      	movs	r3, #1
 800ad34:	6163      	str	r3, [r4, #20]
 800ad36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ad38:	466a      	mov	r2, sp
 800ad3a:	ab01      	add	r3, sp, #4
 800ad3c:	f7ff ffc6 	bl	800accc <__swhatbuf_r>
 800ad40:	9900      	ldr	r1, [sp, #0]
 800ad42:	0007      	movs	r7, r0
 800ad44:	0028      	movs	r0, r5
 800ad46:	f7ff f819 	bl	8009d7c <_malloc_r>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d108      	bne.n	800ad60 <__smakebuf_r+0x44>
 800ad4e:	220c      	movs	r2, #12
 800ad50:	5ea3      	ldrsh	r3, [r4, r2]
 800ad52:	059a      	lsls	r2, r3, #22
 800ad54:	d4ef      	bmi.n	800ad36 <__smakebuf_r+0x1a>
 800ad56:	2203      	movs	r2, #3
 800ad58:	4393      	bics	r3, r2
 800ad5a:	431e      	orrs	r6, r3
 800ad5c:	81a6      	strh	r6, [r4, #12]
 800ad5e:	e7e4      	b.n	800ad2a <__smakebuf_r+0xe>
 800ad60:	2380      	movs	r3, #128	; 0x80
 800ad62:	89a2      	ldrh	r2, [r4, #12]
 800ad64:	6020      	str	r0, [r4, #0]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	9b00      	ldr	r3, [sp, #0]
 800ad6c:	6120      	str	r0, [r4, #16]
 800ad6e:	6163      	str	r3, [r4, #20]
 800ad70:	9b01      	ldr	r3, [sp, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00c      	beq.n	800ad90 <__smakebuf_r+0x74>
 800ad76:	0028      	movs	r0, r5
 800ad78:	230e      	movs	r3, #14
 800ad7a:	5ee1      	ldrsh	r1, [r4, r3]
 800ad7c:	f000 f81e 	bl	800adbc <_isatty_r>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d005      	beq.n	800ad90 <__smakebuf_r+0x74>
 800ad84:	2303      	movs	r3, #3
 800ad86:	89a2      	ldrh	r2, [r4, #12]
 800ad88:	439a      	bics	r2, r3
 800ad8a:	3b02      	subs	r3, #2
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	81a3      	strh	r3, [r4, #12]
 800ad90:	89a3      	ldrh	r3, [r4, #12]
 800ad92:	433b      	orrs	r3, r7
 800ad94:	81a3      	strh	r3, [r4, #12]
 800ad96:	e7ce      	b.n	800ad36 <__smakebuf_r+0x1a>

0800ad98 <_fstat_r>:
 800ad98:	2300      	movs	r3, #0
 800ad9a:	b570      	push	{r4, r5, r6, lr}
 800ad9c:	4d06      	ldr	r5, [pc, #24]	; (800adb8 <_fstat_r+0x20>)
 800ad9e:	0004      	movs	r4, r0
 800ada0:	0008      	movs	r0, r1
 800ada2:	0011      	movs	r1, r2
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	f7f9 f866 	bl	8003e76 <_fstat>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	d103      	bne.n	800adb6 <_fstat_r+0x1e>
 800adae:	682b      	ldr	r3, [r5, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d000      	beq.n	800adb6 <_fstat_r+0x1e>
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
 800adb8:	20000f9c 	.word	0x20000f9c

0800adbc <_isatty_r>:
 800adbc:	2300      	movs	r3, #0
 800adbe:	b570      	push	{r4, r5, r6, lr}
 800adc0:	4d06      	ldr	r5, [pc, #24]	; (800addc <_isatty_r+0x20>)
 800adc2:	0004      	movs	r4, r0
 800adc4:	0008      	movs	r0, r1
 800adc6:	602b      	str	r3, [r5, #0]
 800adc8:	f7f9 f863 	bl	8003e92 <_isatty>
 800adcc:	1c43      	adds	r3, r0, #1
 800adce:	d103      	bne.n	800add8 <_isatty_r+0x1c>
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d000      	beq.n	800add8 <_isatty_r+0x1c>
 800add6:	6023      	str	r3, [r4, #0]
 800add8:	bd70      	pop	{r4, r5, r6, pc}
 800adda:	46c0      	nop			; (mov r8, r8)
 800addc:	20000f9c 	.word	0x20000f9c

0800ade0 <pow>:
 800ade0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ade2:	0014      	movs	r4, r2
 800ade4:	001d      	movs	r5, r3
 800ade6:	9000      	str	r0, [sp, #0]
 800ade8:	9101      	str	r1, [sp, #4]
 800adea:	f000 fa1b 	bl	800b224 <__ieee754_pow>
 800adee:	0022      	movs	r2, r4
 800adf0:	0006      	movs	r6, r0
 800adf2:	000f      	movs	r7, r1
 800adf4:	002b      	movs	r3, r5
 800adf6:	0020      	movs	r0, r4
 800adf8:	0029      	movs	r1, r5
 800adfa:	f7f7 fbcf 	bl	800259c <__aeabi_dcmpun>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d13f      	bne.n	800ae82 <pow+0xa2>
 800ae02:	9800      	ldr	r0, [sp, #0]
 800ae04:	9901      	ldr	r1, [sp, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f7f5 fb1b 	bl	8000444 <__aeabi_dcmpeq>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d019      	beq.n	800ae46 <pow+0x66>
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	0020      	movs	r0, r4
 800ae18:	0029      	movs	r1, r5
 800ae1a:	f7f5 fb13 	bl	8000444 <__aeabi_dcmpeq>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d146      	bne.n	800aeb0 <pow+0xd0>
 800ae22:	0020      	movs	r0, r4
 800ae24:	0029      	movs	r1, r5
 800ae26:	f000 f889 	bl	800af3c <finite>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d029      	beq.n	800ae82 <pow+0xa2>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	0020      	movs	r0, r4
 800ae34:	0029      	movs	r1, r5
 800ae36:	f7f5 fb0b 	bl	8000450 <__aeabi_dcmplt>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d021      	beq.n	800ae82 <pow+0xa2>
 800ae3e:	f7fe f849 	bl	8008ed4 <__errno>
 800ae42:	2322      	movs	r3, #34	; 0x22
 800ae44:	e01c      	b.n	800ae80 <pow+0xa0>
 800ae46:	0030      	movs	r0, r6
 800ae48:	0039      	movs	r1, r7
 800ae4a:	f000 f877 	bl	800af3c <finite>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d11b      	bne.n	800ae8a <pow+0xaa>
 800ae52:	9800      	ldr	r0, [sp, #0]
 800ae54:	9901      	ldr	r1, [sp, #4]
 800ae56:	f000 f871 	bl	800af3c <finite>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d015      	beq.n	800ae8a <pow+0xaa>
 800ae5e:	0020      	movs	r0, r4
 800ae60:	0029      	movs	r1, r5
 800ae62:	f000 f86b 	bl	800af3c <finite>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d00f      	beq.n	800ae8a <pow+0xaa>
 800ae6a:	0032      	movs	r2, r6
 800ae6c:	003b      	movs	r3, r7
 800ae6e:	0030      	movs	r0, r6
 800ae70:	0039      	movs	r1, r7
 800ae72:	f7f7 fb93 	bl	800259c <__aeabi_dcmpun>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d0e1      	beq.n	800ae3e <pow+0x5e>
 800ae7a:	f7fe f82b 	bl	8008ed4 <__errno>
 800ae7e:	2321      	movs	r3, #33	; 0x21
 800ae80:	6003      	str	r3, [r0, #0]
 800ae82:	0030      	movs	r0, r6
 800ae84:	0039      	movs	r1, r7
 800ae86:	b003      	add	sp, #12
 800ae88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	0030      	movs	r0, r6
 800ae90:	0039      	movs	r1, r7
 800ae92:	f7f5 fad7 	bl	8000444 <__aeabi_dcmpeq>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d0f3      	beq.n	800ae82 <pow+0xa2>
 800ae9a:	9800      	ldr	r0, [sp, #0]
 800ae9c:	9901      	ldr	r1, [sp, #4]
 800ae9e:	f000 f84d 	bl	800af3c <finite>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d0ed      	beq.n	800ae82 <pow+0xa2>
 800aea6:	0020      	movs	r0, r4
 800aea8:	0029      	movs	r1, r5
 800aeaa:	f000 f847 	bl	800af3c <finite>
 800aeae:	e7c4      	b.n	800ae3a <pow+0x5a>
 800aeb0:	2600      	movs	r6, #0
 800aeb2:	4f01      	ldr	r7, [pc, #4]	; (800aeb8 <pow+0xd8>)
 800aeb4:	e7e5      	b.n	800ae82 <pow+0xa2>
 800aeb6:	46c0      	nop			; (mov r8, r8)
 800aeb8:	3ff00000 	.word	0x3ff00000

0800aebc <cos>:
 800aebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aebe:	4a1d      	ldr	r2, [pc, #116]	; (800af34 <cos+0x78>)
 800aec0:	004b      	lsls	r3, r1, #1
 800aec2:	b087      	sub	sp, #28
 800aec4:	085b      	lsrs	r3, r3, #1
 800aec6:	4293      	cmp	r3, r2
 800aec8:	dc04      	bgt.n	800aed4 <cos+0x18>
 800aeca:	2200      	movs	r2, #0
 800aecc:	2300      	movs	r3, #0
 800aece:	f000 f83d 	bl	800af4c <__kernel_cos>
 800aed2:	e006      	b.n	800aee2 <cos+0x26>
 800aed4:	4a18      	ldr	r2, [pc, #96]	; (800af38 <cos+0x7c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	dd05      	ble.n	800aee6 <cos+0x2a>
 800aeda:	0002      	movs	r2, r0
 800aedc:	000b      	movs	r3, r1
 800aede:	f7f6 ffdb 	bl	8001e98 <__aeabi_dsub>
 800aee2:	b007      	add	sp, #28
 800aee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee6:	aa02      	add	r2, sp, #8
 800aee8:	f000 fea6 	bl	800bc38 <__ieee754_rem_pio2>
 800aeec:	9c04      	ldr	r4, [sp, #16]
 800aeee:	9d05      	ldr	r5, [sp, #20]
 800aef0:	2303      	movs	r3, #3
 800aef2:	4003      	ands	r3, r0
 800aef4:	9802      	ldr	r0, [sp, #8]
 800aef6:	9903      	ldr	r1, [sp, #12]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d006      	beq.n	800af0a <cos+0x4e>
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d00d      	beq.n	800af1c <cos+0x60>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d110      	bne.n	800af26 <cos+0x6a>
 800af04:	0022      	movs	r2, r4
 800af06:	002b      	movs	r3, r5
 800af08:	e7e1      	b.n	800aece <cos+0x12>
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	0022      	movs	r2, r4
 800af0e:	002b      	movs	r3, r5
 800af10:	f000 f8dc 	bl	800b0cc <__kernel_sin>
 800af14:	2380      	movs	r3, #128	; 0x80
 800af16:	061b      	lsls	r3, r3, #24
 800af18:	18c9      	adds	r1, r1, r3
 800af1a:	e7e2      	b.n	800aee2 <cos+0x26>
 800af1c:	0022      	movs	r2, r4
 800af1e:	002b      	movs	r3, r5
 800af20:	f000 f814 	bl	800af4c <__kernel_cos>
 800af24:	e7f6      	b.n	800af14 <cos+0x58>
 800af26:	2301      	movs	r3, #1
 800af28:	0022      	movs	r2, r4
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	002b      	movs	r3, r5
 800af2e:	f000 f8cd 	bl	800b0cc <__kernel_sin>
 800af32:	e7d6      	b.n	800aee2 <cos+0x26>
 800af34:	3fe921fb 	.word	0x3fe921fb
 800af38:	7fefffff 	.word	0x7fefffff

0800af3c <finite>:
 800af3c:	4b02      	ldr	r3, [pc, #8]	; (800af48 <finite+0xc>)
 800af3e:	0048      	lsls	r0, r1, #1
 800af40:	0840      	lsrs	r0, r0, #1
 800af42:	18c0      	adds	r0, r0, r3
 800af44:	0fc0      	lsrs	r0, r0, #31
 800af46:	4770      	bx	lr
 800af48:	80100000 	.word	0x80100000

0800af4c <__kernel_cos>:
 800af4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af4e:	b087      	sub	sp, #28
 800af50:	9204      	str	r2, [sp, #16]
 800af52:	9305      	str	r3, [sp, #20]
 800af54:	004b      	lsls	r3, r1, #1
 800af56:	085b      	lsrs	r3, r3, #1
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	23f9      	movs	r3, #249	; 0xf9
 800af5c:	9a00      	ldr	r2, [sp, #0]
 800af5e:	0007      	movs	r7, r0
 800af60:	000e      	movs	r6, r1
 800af62:	059b      	lsls	r3, r3, #22
 800af64:	429a      	cmp	r2, r3
 800af66:	da04      	bge.n	800af72 <__kernel_cos+0x26>
 800af68:	f7f7 fb36 	bl	80025d8 <__aeabi_d2iz>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d100      	bne.n	800af72 <__kernel_cos+0x26>
 800af70:	e084      	b.n	800b07c <__kernel_cos+0x130>
 800af72:	003a      	movs	r2, r7
 800af74:	0033      	movs	r3, r6
 800af76:	0038      	movs	r0, r7
 800af78:	0031      	movs	r1, r6
 800af7a:	f7f6 fccb 	bl	8001914 <__aeabi_dmul>
 800af7e:	2200      	movs	r2, #0
 800af80:	4b40      	ldr	r3, [pc, #256]	; (800b084 <__kernel_cos+0x138>)
 800af82:	0004      	movs	r4, r0
 800af84:	000d      	movs	r5, r1
 800af86:	f7f6 fcc5 	bl	8001914 <__aeabi_dmul>
 800af8a:	4a3f      	ldr	r2, [pc, #252]	; (800b088 <__kernel_cos+0x13c>)
 800af8c:	9002      	str	r0, [sp, #8]
 800af8e:	9103      	str	r1, [sp, #12]
 800af90:	4b3e      	ldr	r3, [pc, #248]	; (800b08c <__kernel_cos+0x140>)
 800af92:	0020      	movs	r0, r4
 800af94:	0029      	movs	r1, r5
 800af96:	f7f6 fcbd 	bl	8001914 <__aeabi_dmul>
 800af9a:	4a3d      	ldr	r2, [pc, #244]	; (800b090 <__kernel_cos+0x144>)
 800af9c:	4b3d      	ldr	r3, [pc, #244]	; (800b094 <__kernel_cos+0x148>)
 800af9e:	f7f5 fd5f 	bl	8000a60 <__aeabi_dadd>
 800afa2:	0022      	movs	r2, r4
 800afa4:	002b      	movs	r3, r5
 800afa6:	f7f6 fcb5 	bl	8001914 <__aeabi_dmul>
 800afaa:	4a3b      	ldr	r2, [pc, #236]	; (800b098 <__kernel_cos+0x14c>)
 800afac:	4b3b      	ldr	r3, [pc, #236]	; (800b09c <__kernel_cos+0x150>)
 800afae:	f7f6 ff73 	bl	8001e98 <__aeabi_dsub>
 800afb2:	0022      	movs	r2, r4
 800afb4:	002b      	movs	r3, r5
 800afb6:	f7f6 fcad 	bl	8001914 <__aeabi_dmul>
 800afba:	4a39      	ldr	r2, [pc, #228]	; (800b0a0 <__kernel_cos+0x154>)
 800afbc:	4b39      	ldr	r3, [pc, #228]	; (800b0a4 <__kernel_cos+0x158>)
 800afbe:	f7f5 fd4f 	bl	8000a60 <__aeabi_dadd>
 800afc2:	0022      	movs	r2, r4
 800afc4:	002b      	movs	r3, r5
 800afc6:	f7f6 fca5 	bl	8001914 <__aeabi_dmul>
 800afca:	4a37      	ldr	r2, [pc, #220]	; (800b0a8 <__kernel_cos+0x15c>)
 800afcc:	4b37      	ldr	r3, [pc, #220]	; (800b0ac <__kernel_cos+0x160>)
 800afce:	f7f6 ff63 	bl	8001e98 <__aeabi_dsub>
 800afd2:	0022      	movs	r2, r4
 800afd4:	002b      	movs	r3, r5
 800afd6:	f7f6 fc9d 	bl	8001914 <__aeabi_dmul>
 800afda:	4a35      	ldr	r2, [pc, #212]	; (800b0b0 <__kernel_cos+0x164>)
 800afdc:	4b35      	ldr	r3, [pc, #212]	; (800b0b4 <__kernel_cos+0x168>)
 800afde:	f7f5 fd3f 	bl	8000a60 <__aeabi_dadd>
 800afe2:	0022      	movs	r2, r4
 800afe4:	002b      	movs	r3, r5
 800afe6:	f7f6 fc95 	bl	8001914 <__aeabi_dmul>
 800afea:	0022      	movs	r2, r4
 800afec:	002b      	movs	r3, r5
 800afee:	f7f6 fc91 	bl	8001914 <__aeabi_dmul>
 800aff2:	9a04      	ldr	r2, [sp, #16]
 800aff4:	9b05      	ldr	r3, [sp, #20]
 800aff6:	0004      	movs	r4, r0
 800aff8:	000d      	movs	r5, r1
 800affa:	0038      	movs	r0, r7
 800affc:	0031      	movs	r1, r6
 800affe:	f7f6 fc89 	bl	8001914 <__aeabi_dmul>
 800b002:	0002      	movs	r2, r0
 800b004:	000b      	movs	r3, r1
 800b006:	0020      	movs	r0, r4
 800b008:	0029      	movs	r1, r5
 800b00a:	f7f6 ff45 	bl	8001e98 <__aeabi_dsub>
 800b00e:	4b2a      	ldr	r3, [pc, #168]	; (800b0b8 <__kernel_cos+0x16c>)
 800b010:	9a00      	ldr	r2, [sp, #0]
 800b012:	0004      	movs	r4, r0
 800b014:	000d      	movs	r5, r1
 800b016:	429a      	cmp	r2, r3
 800b018:	dc0d      	bgt.n	800b036 <__kernel_cos+0xea>
 800b01a:	0002      	movs	r2, r0
 800b01c:	000b      	movs	r3, r1
 800b01e:	9802      	ldr	r0, [sp, #8]
 800b020:	9903      	ldr	r1, [sp, #12]
 800b022:	f7f6 ff39 	bl	8001e98 <__aeabi_dsub>
 800b026:	0002      	movs	r2, r0
 800b028:	2000      	movs	r0, #0
 800b02a:	000b      	movs	r3, r1
 800b02c:	4923      	ldr	r1, [pc, #140]	; (800b0bc <__kernel_cos+0x170>)
 800b02e:	f7f6 ff33 	bl	8001e98 <__aeabi_dsub>
 800b032:	b007      	add	sp, #28
 800b034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b036:	4b22      	ldr	r3, [pc, #136]	; (800b0c0 <__kernel_cos+0x174>)
 800b038:	9a00      	ldr	r2, [sp, #0]
 800b03a:	2600      	movs	r6, #0
 800b03c:	429a      	cmp	r2, r3
 800b03e:	dc1b      	bgt.n	800b078 <__kernel_cos+0x12c>
 800b040:	0013      	movs	r3, r2
 800b042:	4a20      	ldr	r2, [pc, #128]	; (800b0c4 <__kernel_cos+0x178>)
 800b044:	4694      	mov	ip, r2
 800b046:	4463      	add	r3, ip
 800b048:	001f      	movs	r7, r3
 800b04a:	0032      	movs	r2, r6
 800b04c:	003b      	movs	r3, r7
 800b04e:	2000      	movs	r0, #0
 800b050:	491a      	ldr	r1, [pc, #104]	; (800b0bc <__kernel_cos+0x170>)
 800b052:	f7f6 ff21 	bl	8001e98 <__aeabi_dsub>
 800b056:	0032      	movs	r2, r6
 800b058:	003b      	movs	r3, r7
 800b05a:	9000      	str	r0, [sp, #0]
 800b05c:	9101      	str	r1, [sp, #4]
 800b05e:	9802      	ldr	r0, [sp, #8]
 800b060:	9903      	ldr	r1, [sp, #12]
 800b062:	f7f6 ff19 	bl	8001e98 <__aeabi_dsub>
 800b066:	0022      	movs	r2, r4
 800b068:	002b      	movs	r3, r5
 800b06a:	f7f6 ff15 	bl	8001e98 <__aeabi_dsub>
 800b06e:	0002      	movs	r2, r0
 800b070:	000b      	movs	r3, r1
 800b072:	9800      	ldr	r0, [sp, #0]
 800b074:	9901      	ldr	r1, [sp, #4]
 800b076:	e7da      	b.n	800b02e <__kernel_cos+0xe2>
 800b078:	4f13      	ldr	r7, [pc, #76]	; (800b0c8 <__kernel_cos+0x17c>)
 800b07a:	e7e6      	b.n	800b04a <__kernel_cos+0xfe>
 800b07c:	2000      	movs	r0, #0
 800b07e:	490f      	ldr	r1, [pc, #60]	; (800b0bc <__kernel_cos+0x170>)
 800b080:	e7d7      	b.n	800b032 <__kernel_cos+0xe6>
 800b082:	46c0      	nop			; (mov r8, r8)
 800b084:	3fe00000 	.word	0x3fe00000
 800b088:	be8838d4 	.word	0xbe8838d4
 800b08c:	bda8fae9 	.word	0xbda8fae9
 800b090:	bdb4b1c4 	.word	0xbdb4b1c4
 800b094:	3e21ee9e 	.word	0x3e21ee9e
 800b098:	809c52ad 	.word	0x809c52ad
 800b09c:	3e927e4f 	.word	0x3e927e4f
 800b0a0:	19cb1590 	.word	0x19cb1590
 800b0a4:	3efa01a0 	.word	0x3efa01a0
 800b0a8:	16c15177 	.word	0x16c15177
 800b0ac:	3f56c16c 	.word	0x3f56c16c
 800b0b0:	5555554c 	.word	0x5555554c
 800b0b4:	3fa55555 	.word	0x3fa55555
 800b0b8:	3fd33332 	.word	0x3fd33332
 800b0bc:	3ff00000 	.word	0x3ff00000
 800b0c0:	3fe90000 	.word	0x3fe90000
 800b0c4:	ffe00000 	.word	0xffe00000
 800b0c8:	3fd20000 	.word	0x3fd20000

0800b0cc <__kernel_sin>:
 800b0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0ce:	b089      	sub	sp, #36	; 0x24
 800b0d0:	9202      	str	r2, [sp, #8]
 800b0d2:	9303      	str	r3, [sp, #12]
 800b0d4:	22f9      	movs	r2, #249	; 0xf9
 800b0d6:	004b      	lsls	r3, r1, #1
 800b0d8:	0007      	movs	r7, r0
 800b0da:	000e      	movs	r6, r1
 800b0dc:	085b      	lsrs	r3, r3, #1
 800b0de:	0592      	lsls	r2, r2, #22
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	da03      	bge.n	800b0ec <__kernel_sin+0x20>
 800b0e4:	f7f7 fa78 	bl	80025d8 <__aeabi_d2iz>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d04c      	beq.n	800b186 <__kernel_sin+0xba>
 800b0ec:	003a      	movs	r2, r7
 800b0ee:	0033      	movs	r3, r6
 800b0f0:	0038      	movs	r0, r7
 800b0f2:	0031      	movs	r1, r6
 800b0f4:	f7f6 fc0e 	bl	8001914 <__aeabi_dmul>
 800b0f8:	0004      	movs	r4, r0
 800b0fa:	000d      	movs	r5, r1
 800b0fc:	0002      	movs	r2, r0
 800b0fe:	000b      	movs	r3, r1
 800b100:	0038      	movs	r0, r7
 800b102:	0031      	movs	r1, r6
 800b104:	f7f6 fc06 	bl	8001914 <__aeabi_dmul>
 800b108:	4a39      	ldr	r2, [pc, #228]	; (800b1f0 <__kernel_sin+0x124>)
 800b10a:	9000      	str	r0, [sp, #0]
 800b10c:	9101      	str	r1, [sp, #4]
 800b10e:	4b39      	ldr	r3, [pc, #228]	; (800b1f4 <__kernel_sin+0x128>)
 800b110:	0020      	movs	r0, r4
 800b112:	0029      	movs	r1, r5
 800b114:	f7f6 fbfe 	bl	8001914 <__aeabi_dmul>
 800b118:	4a37      	ldr	r2, [pc, #220]	; (800b1f8 <__kernel_sin+0x12c>)
 800b11a:	4b38      	ldr	r3, [pc, #224]	; (800b1fc <__kernel_sin+0x130>)
 800b11c:	f7f6 febc 	bl	8001e98 <__aeabi_dsub>
 800b120:	0022      	movs	r2, r4
 800b122:	002b      	movs	r3, r5
 800b124:	f7f6 fbf6 	bl	8001914 <__aeabi_dmul>
 800b128:	4a35      	ldr	r2, [pc, #212]	; (800b200 <__kernel_sin+0x134>)
 800b12a:	4b36      	ldr	r3, [pc, #216]	; (800b204 <__kernel_sin+0x138>)
 800b12c:	f7f5 fc98 	bl	8000a60 <__aeabi_dadd>
 800b130:	0022      	movs	r2, r4
 800b132:	002b      	movs	r3, r5
 800b134:	f7f6 fbee 	bl	8001914 <__aeabi_dmul>
 800b138:	4a33      	ldr	r2, [pc, #204]	; (800b208 <__kernel_sin+0x13c>)
 800b13a:	4b34      	ldr	r3, [pc, #208]	; (800b20c <__kernel_sin+0x140>)
 800b13c:	f7f6 feac 	bl	8001e98 <__aeabi_dsub>
 800b140:	0022      	movs	r2, r4
 800b142:	002b      	movs	r3, r5
 800b144:	f7f6 fbe6 	bl	8001914 <__aeabi_dmul>
 800b148:	4b31      	ldr	r3, [pc, #196]	; (800b210 <__kernel_sin+0x144>)
 800b14a:	4a32      	ldr	r2, [pc, #200]	; (800b214 <__kernel_sin+0x148>)
 800b14c:	f7f5 fc88 	bl	8000a60 <__aeabi_dadd>
 800b150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b152:	9004      	str	r0, [sp, #16]
 800b154:	9105      	str	r1, [sp, #20]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d119      	bne.n	800b18e <__kernel_sin+0xc2>
 800b15a:	0002      	movs	r2, r0
 800b15c:	000b      	movs	r3, r1
 800b15e:	0020      	movs	r0, r4
 800b160:	0029      	movs	r1, r5
 800b162:	f7f6 fbd7 	bl	8001914 <__aeabi_dmul>
 800b166:	4a2c      	ldr	r2, [pc, #176]	; (800b218 <__kernel_sin+0x14c>)
 800b168:	4b2c      	ldr	r3, [pc, #176]	; (800b21c <__kernel_sin+0x150>)
 800b16a:	f7f6 fe95 	bl	8001e98 <__aeabi_dsub>
 800b16e:	9a00      	ldr	r2, [sp, #0]
 800b170:	9b01      	ldr	r3, [sp, #4]
 800b172:	f7f6 fbcf 	bl	8001914 <__aeabi_dmul>
 800b176:	0002      	movs	r2, r0
 800b178:	000b      	movs	r3, r1
 800b17a:	0038      	movs	r0, r7
 800b17c:	0031      	movs	r1, r6
 800b17e:	f7f5 fc6f 	bl	8000a60 <__aeabi_dadd>
 800b182:	0007      	movs	r7, r0
 800b184:	000e      	movs	r6, r1
 800b186:	0038      	movs	r0, r7
 800b188:	0031      	movs	r1, r6
 800b18a:	b009      	add	sp, #36	; 0x24
 800b18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b18e:	2200      	movs	r2, #0
 800b190:	9802      	ldr	r0, [sp, #8]
 800b192:	9903      	ldr	r1, [sp, #12]
 800b194:	4b22      	ldr	r3, [pc, #136]	; (800b220 <__kernel_sin+0x154>)
 800b196:	f7f6 fbbd 	bl	8001914 <__aeabi_dmul>
 800b19a:	9a04      	ldr	r2, [sp, #16]
 800b19c:	9b05      	ldr	r3, [sp, #20]
 800b19e:	9006      	str	r0, [sp, #24]
 800b1a0:	9107      	str	r1, [sp, #28]
 800b1a2:	9800      	ldr	r0, [sp, #0]
 800b1a4:	9901      	ldr	r1, [sp, #4]
 800b1a6:	f7f6 fbb5 	bl	8001914 <__aeabi_dmul>
 800b1aa:	0002      	movs	r2, r0
 800b1ac:	000b      	movs	r3, r1
 800b1ae:	9806      	ldr	r0, [sp, #24]
 800b1b0:	9907      	ldr	r1, [sp, #28]
 800b1b2:	f7f6 fe71 	bl	8001e98 <__aeabi_dsub>
 800b1b6:	0022      	movs	r2, r4
 800b1b8:	002b      	movs	r3, r5
 800b1ba:	f7f6 fbab 	bl	8001914 <__aeabi_dmul>
 800b1be:	9a02      	ldr	r2, [sp, #8]
 800b1c0:	9b03      	ldr	r3, [sp, #12]
 800b1c2:	f7f6 fe69 	bl	8001e98 <__aeabi_dsub>
 800b1c6:	4a14      	ldr	r2, [pc, #80]	; (800b218 <__kernel_sin+0x14c>)
 800b1c8:	0004      	movs	r4, r0
 800b1ca:	000d      	movs	r5, r1
 800b1cc:	9800      	ldr	r0, [sp, #0]
 800b1ce:	9901      	ldr	r1, [sp, #4]
 800b1d0:	4b12      	ldr	r3, [pc, #72]	; (800b21c <__kernel_sin+0x150>)
 800b1d2:	f7f6 fb9f 	bl	8001914 <__aeabi_dmul>
 800b1d6:	0002      	movs	r2, r0
 800b1d8:	000b      	movs	r3, r1
 800b1da:	0020      	movs	r0, r4
 800b1dc:	0029      	movs	r1, r5
 800b1de:	f7f5 fc3f 	bl	8000a60 <__aeabi_dadd>
 800b1e2:	0002      	movs	r2, r0
 800b1e4:	000b      	movs	r3, r1
 800b1e6:	0038      	movs	r0, r7
 800b1e8:	0031      	movs	r1, r6
 800b1ea:	f7f6 fe55 	bl	8001e98 <__aeabi_dsub>
 800b1ee:	e7c8      	b.n	800b182 <__kernel_sin+0xb6>
 800b1f0:	5acfd57c 	.word	0x5acfd57c
 800b1f4:	3de5d93a 	.word	0x3de5d93a
 800b1f8:	8a2b9ceb 	.word	0x8a2b9ceb
 800b1fc:	3e5ae5e6 	.word	0x3e5ae5e6
 800b200:	57b1fe7d 	.word	0x57b1fe7d
 800b204:	3ec71de3 	.word	0x3ec71de3
 800b208:	19c161d5 	.word	0x19c161d5
 800b20c:	3f2a01a0 	.word	0x3f2a01a0
 800b210:	3f811111 	.word	0x3f811111
 800b214:	1110f8a6 	.word	0x1110f8a6
 800b218:	55555549 	.word	0x55555549
 800b21c:	3fc55555 	.word	0x3fc55555
 800b220:	3fe00000 	.word	0x3fe00000

0800b224 <__ieee754_pow>:
 800b224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b226:	b095      	sub	sp, #84	; 0x54
 800b228:	9202      	str	r2, [sp, #8]
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	9a03      	ldr	r2, [sp, #12]
 800b230:	9304      	str	r3, [sp, #16]
 800b232:	9b02      	ldr	r3, [sp, #8]
 800b234:	0056      	lsls	r6, r2, #1
 800b236:	001a      	movs	r2, r3
 800b238:	0876      	lsrs	r6, r6, #1
 800b23a:	0007      	movs	r7, r0
 800b23c:	000d      	movs	r5, r1
 800b23e:	4332      	orrs	r2, r6
 800b240:	d119      	bne.n	800b276 <__ieee754_pow+0x52>
 800b242:	2180      	movs	r1, #128	; 0x80
 800b244:	0309      	lsls	r1, r1, #12
 800b246:	4069      	eors	r1, r5
 800b248:	0002      	movs	r2, r0
 800b24a:	000b      	movs	r3, r1
 800b24c:	1892      	adds	r2, r2, r2
 800b24e:	415b      	adcs	r3, r3
 800b250:	4989      	ldr	r1, [pc, #548]	; (800b478 <__ieee754_pow+0x254>)
 800b252:	428b      	cmp	r3, r1
 800b254:	d806      	bhi.n	800b264 <__ieee754_pow+0x40>
 800b256:	d001      	beq.n	800b25c <__ieee754_pow+0x38>
 800b258:	f000 fcb6 	bl	800bbc8 <__ieee754_pow+0x9a4>
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	d101      	bne.n	800b264 <__ieee754_pow+0x40>
 800b260:	f000 fcb2 	bl	800bbc8 <__ieee754_pow+0x9a4>
 800b264:	9a02      	ldr	r2, [sp, #8]
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	0038      	movs	r0, r7
 800b26a:	0029      	movs	r1, r5
 800b26c:	f7f5 fbf8 	bl	8000a60 <__aeabi_dadd>
 800b270:	9000      	str	r0, [sp, #0]
 800b272:	9101      	str	r1, [sp, #4]
 800b274:	e0ad      	b.n	800b3d2 <__ieee754_pow+0x1ae>
 800b276:	4a81      	ldr	r2, [pc, #516]	; (800b47c <__ieee754_pow+0x258>)
 800b278:	004c      	lsls	r4, r1, #1
 800b27a:	9108      	str	r1, [sp, #32]
 800b27c:	9000      	str	r0, [sp, #0]
 800b27e:	0864      	lsrs	r4, r4, #1
 800b280:	4294      	cmp	r4, r2
 800b282:	dc08      	bgt.n	800b296 <__ieee754_pow+0x72>
 800b284:	d101      	bne.n	800b28a <__ieee754_pow+0x66>
 800b286:	2800      	cmp	r0, #0
 800b288:	d1ec      	bne.n	800b264 <__ieee754_pow+0x40>
 800b28a:	4a7c      	ldr	r2, [pc, #496]	; (800b47c <__ieee754_pow+0x258>)
 800b28c:	4296      	cmp	r6, r2
 800b28e:	dc02      	bgt.n	800b296 <__ieee754_pow+0x72>
 800b290:	d10c      	bne.n	800b2ac <__ieee754_pow+0x88>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <__ieee754_pow+0x88>
 800b296:	4b7a      	ldr	r3, [pc, #488]	; (800b480 <__ieee754_pow+0x25c>)
 800b298:	18eb      	adds	r3, r5, r3
 800b29a:	433b      	orrs	r3, r7
 800b29c:	d1e2      	bne.n	800b264 <__ieee754_pow+0x40>
 800b29e:	2180      	movs	r1, #128	; 0x80
 800b2a0:	9803      	ldr	r0, [sp, #12]
 800b2a2:	0309      	lsls	r1, r1, #12
 800b2a4:	4048      	eors	r0, r1
 800b2a6:	0003      	movs	r3, r0
 800b2a8:	9a02      	ldr	r2, [sp, #8]
 800b2aa:	e7cf      	b.n	800b24c <__ieee754_pow+0x28>
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	9206      	str	r2, [sp, #24]
 800b2b0:	2d00      	cmp	r5, #0
 800b2b2:	da69      	bge.n	800b388 <__ieee754_pow+0x164>
 800b2b4:	4a73      	ldr	r2, [pc, #460]	; (800b484 <__ieee754_pow+0x260>)
 800b2b6:	4296      	cmp	r6, r2
 800b2b8:	dc64      	bgt.n	800b384 <__ieee754_pow+0x160>
 800b2ba:	4a73      	ldr	r2, [pc, #460]	; (800b488 <__ieee754_pow+0x264>)
 800b2bc:	4296      	cmp	r6, r2
 800b2be:	dd11      	ble.n	800b2e4 <__ieee754_pow+0xc0>
 800b2c0:	4972      	ldr	r1, [pc, #456]	; (800b48c <__ieee754_pow+0x268>)
 800b2c2:	1532      	asrs	r2, r6, #20
 800b2c4:	1852      	adds	r2, r2, r1
 800b2c6:	2a14      	cmp	r2, #20
 800b2c8:	dd3c      	ble.n	800b344 <__ieee754_pow+0x120>
 800b2ca:	2134      	movs	r1, #52	; 0x34
 800b2cc:	1a89      	subs	r1, r1, r2
 800b2ce:	9a02      	ldr	r2, [sp, #8]
 800b2d0:	40ca      	lsrs	r2, r1
 800b2d2:	0010      	movs	r0, r2
 800b2d4:	4088      	lsls	r0, r1
 800b2d6:	4298      	cmp	r0, r3
 800b2d8:	d104      	bne.n	800b2e4 <__ieee754_pow+0xc0>
 800b2da:	2101      	movs	r1, #1
 800b2dc:	400a      	ands	r2, r1
 800b2de:	1849      	adds	r1, r1, r1
 800b2e0:	1a8a      	subs	r2, r1, r2
 800b2e2:	9206      	str	r2, [sp, #24]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d03c      	beq.n	800b362 <__ieee754_pow+0x13e>
 800b2e8:	0038      	movs	r0, r7
 800b2ea:	0029      	movs	r1, r5
 800b2ec:	f000 fe94 	bl	800c018 <fabs>
 800b2f0:	9000      	str	r0, [sp, #0]
 800b2f2:	9101      	str	r1, [sp, #4]
 800b2f4:	2f00      	cmp	r7, #0
 800b2f6:	d000      	beq.n	800b2fa <__ieee754_pow+0xd6>
 800b2f8:	e094      	b.n	800b424 <__ieee754_pow+0x200>
 800b2fa:	2c00      	cmp	r4, #0
 800b2fc:	d005      	beq.n	800b30a <__ieee754_pow+0xe6>
 800b2fe:	4a64      	ldr	r2, [pc, #400]	; (800b490 <__ieee754_pow+0x26c>)
 800b300:	00ab      	lsls	r3, r5, #2
 800b302:	089b      	lsrs	r3, r3, #2
 800b304:	4293      	cmp	r3, r2
 800b306:	d000      	beq.n	800b30a <__ieee754_pow+0xe6>
 800b308:	e08c      	b.n	800b424 <__ieee754_pow+0x200>
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	da07      	bge.n	800b320 <__ieee754_pow+0xfc>
 800b310:	9a00      	ldr	r2, [sp, #0]
 800b312:	9b01      	ldr	r3, [sp, #4]
 800b314:	2000      	movs	r0, #0
 800b316:	495e      	ldr	r1, [pc, #376]	; (800b490 <__ieee754_pow+0x26c>)
 800b318:	f7f5 ff02 	bl	8001120 <__aeabi_ddiv>
 800b31c:	9000      	str	r0, [sp, #0]
 800b31e:	9101      	str	r1, [sp, #4]
 800b320:	9b08      	ldr	r3, [sp, #32]
 800b322:	2b00      	cmp	r3, #0
 800b324:	da55      	bge.n	800b3d2 <__ieee754_pow+0x1ae>
 800b326:	4b56      	ldr	r3, [pc, #344]	; (800b480 <__ieee754_pow+0x25c>)
 800b328:	18e4      	adds	r4, r4, r3
 800b32a:	9b06      	ldr	r3, [sp, #24]
 800b32c:	431c      	orrs	r4, r3
 800b32e:	d000      	beq.n	800b332 <__ieee754_pow+0x10e>
 800b330:	e06c      	b.n	800b40c <__ieee754_pow+0x1e8>
 800b332:	9a00      	ldr	r2, [sp, #0]
 800b334:	9b01      	ldr	r3, [sp, #4]
 800b336:	0010      	movs	r0, r2
 800b338:	0019      	movs	r1, r3
 800b33a:	f7f6 fdad 	bl	8001e98 <__aeabi_dsub>
 800b33e:	0002      	movs	r2, r0
 800b340:	000b      	movs	r3, r1
 800b342:	e01c      	b.n	800b37e <__ieee754_pow+0x15a>
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1cf      	bne.n	800b2e8 <__ieee754_pow+0xc4>
 800b348:	3314      	adds	r3, #20
 800b34a:	1a9a      	subs	r2, r3, r2
 800b34c:	0033      	movs	r3, r6
 800b34e:	4113      	asrs	r3, r2
 800b350:	0019      	movs	r1, r3
 800b352:	4091      	lsls	r1, r2
 800b354:	42b1      	cmp	r1, r6
 800b356:	d104      	bne.n	800b362 <__ieee754_pow+0x13e>
 800b358:	2201      	movs	r2, #1
 800b35a:	4013      	ands	r3, r2
 800b35c:	1892      	adds	r2, r2, r2
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	9306      	str	r3, [sp, #24]
 800b362:	4b4b      	ldr	r3, [pc, #300]	; (800b490 <__ieee754_pow+0x26c>)
 800b364:	429e      	cmp	r6, r3
 800b366:	d138      	bne.n	800b3da <__ieee754_pow+0x1b6>
 800b368:	0038      	movs	r0, r7
 800b36a:	0029      	movs	r1, r5
 800b36c:	9b04      	ldr	r3, [sp, #16]
 800b36e:	9000      	str	r0, [sp, #0]
 800b370:	9101      	str	r1, [sp, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	da2d      	bge.n	800b3d2 <__ieee754_pow+0x1ae>
 800b376:	003a      	movs	r2, r7
 800b378:	002b      	movs	r3, r5
 800b37a:	2000      	movs	r0, #0
 800b37c:	4944      	ldr	r1, [pc, #272]	; (800b490 <__ieee754_pow+0x26c>)
 800b37e:	f7f5 fecf 	bl	8001120 <__aeabi_ddiv>
 800b382:	e775      	b.n	800b270 <__ieee754_pow+0x4c>
 800b384:	2202      	movs	r2, #2
 800b386:	9206      	str	r2, [sp, #24]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1ad      	bne.n	800b2e8 <__ieee754_pow+0xc4>
 800b38c:	4b3b      	ldr	r3, [pc, #236]	; (800b47c <__ieee754_pow+0x258>)
 800b38e:	429e      	cmp	r6, r3
 800b390:	d1e7      	bne.n	800b362 <__ieee754_pow+0x13e>
 800b392:	4b3b      	ldr	r3, [pc, #236]	; (800b480 <__ieee754_pow+0x25c>)
 800b394:	18e3      	adds	r3, r4, r3
 800b396:	433b      	orrs	r3, r7
 800b398:	d101      	bne.n	800b39e <__ieee754_pow+0x17a>
 800b39a:	f000 fc15 	bl	800bbc8 <__ieee754_pow+0x9a4>
 800b39e:	4b3a      	ldr	r3, [pc, #232]	; (800b488 <__ieee754_pow+0x264>)
 800b3a0:	429c      	cmp	r4, r3
 800b3a2:	dd09      	ble.n	800b3b8 <__ieee754_pow+0x194>
 800b3a4:	9b04      	ldr	r3, [sp, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	da01      	bge.n	800b3ae <__ieee754_pow+0x18a>
 800b3aa:	f000 fc11 	bl	800bbd0 <__ieee754_pow+0x9ac>
 800b3ae:	9b02      	ldr	r3, [sp, #8]
 800b3b0:	9c03      	ldr	r4, [sp, #12]
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	9401      	str	r4, [sp, #4]
 800b3b6:	e00c      	b.n	800b3d2 <__ieee754_pow+0x1ae>
 800b3b8:	9b04      	ldr	r3, [sp, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	db01      	blt.n	800b3c2 <__ieee754_pow+0x19e>
 800b3be:	f000 fc07 	bl	800bbd0 <__ieee754_pow+0x9ac>
 800b3c2:	2280      	movs	r2, #128	; 0x80
 800b3c4:	0612      	lsls	r2, r2, #24
 800b3c6:	4694      	mov	ip, r2
 800b3c8:	9b02      	ldr	r3, [sp, #8]
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	9b03      	ldr	r3, [sp, #12]
 800b3ce:	4463      	add	r3, ip
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	9800      	ldr	r0, [sp, #0]
 800b3d4:	9901      	ldr	r1, [sp, #4]
 800b3d6:	b015      	add	sp, #84	; 0x54
 800b3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3da:	2380      	movs	r3, #128	; 0x80
 800b3dc:	9a04      	ldr	r2, [sp, #16]
 800b3de:	05db      	lsls	r3, r3, #23
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d106      	bne.n	800b3f2 <__ieee754_pow+0x1ce>
 800b3e4:	003a      	movs	r2, r7
 800b3e6:	002b      	movs	r3, r5
 800b3e8:	0038      	movs	r0, r7
 800b3ea:	0029      	movs	r1, r5
 800b3ec:	f7f6 fa92 	bl	8001914 <__aeabi_dmul>
 800b3f0:	e73e      	b.n	800b270 <__ieee754_pow+0x4c>
 800b3f2:	4b28      	ldr	r3, [pc, #160]	; (800b494 <__ieee754_pow+0x270>)
 800b3f4:	9a04      	ldr	r2, [sp, #16]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d000      	beq.n	800b3fc <__ieee754_pow+0x1d8>
 800b3fa:	e775      	b.n	800b2e8 <__ieee754_pow+0xc4>
 800b3fc:	2d00      	cmp	r5, #0
 800b3fe:	da00      	bge.n	800b402 <__ieee754_pow+0x1de>
 800b400:	e772      	b.n	800b2e8 <__ieee754_pow+0xc4>
 800b402:	0038      	movs	r0, r7
 800b404:	0029      	movs	r1, r5
 800b406:	f000 fea7 	bl	800c158 <__ieee754_sqrt>
 800b40a:	e731      	b.n	800b270 <__ieee754_pow+0x4c>
 800b40c:	9b06      	ldr	r3, [sp, #24]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d1df      	bne.n	800b3d2 <__ieee754_pow+0x1ae>
 800b412:	9800      	ldr	r0, [sp, #0]
 800b414:	2180      	movs	r1, #128	; 0x80
 800b416:	0002      	movs	r2, r0
 800b418:	9801      	ldr	r0, [sp, #4]
 800b41a:	0609      	lsls	r1, r1, #24
 800b41c:	1843      	adds	r3, r0, r1
 800b41e:	9200      	str	r2, [sp, #0]
 800b420:	9301      	str	r3, [sp, #4]
 800b422:	e7d6      	b.n	800b3d2 <__ieee754_pow+0x1ae>
 800b424:	0feb      	lsrs	r3, r5, #31
 800b426:	3b01      	subs	r3, #1
 800b428:	930e      	str	r3, [sp, #56]	; 0x38
 800b42a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b42c:	9b06      	ldr	r3, [sp, #24]
 800b42e:	4313      	orrs	r3, r2
 800b430:	d104      	bne.n	800b43c <__ieee754_pow+0x218>
 800b432:	003a      	movs	r2, r7
 800b434:	002b      	movs	r3, r5
 800b436:	0038      	movs	r0, r7
 800b438:	0029      	movs	r1, r5
 800b43a:	e77e      	b.n	800b33a <__ieee754_pow+0x116>
 800b43c:	4b16      	ldr	r3, [pc, #88]	; (800b498 <__ieee754_pow+0x274>)
 800b43e:	429e      	cmp	r6, r3
 800b440:	dc00      	bgt.n	800b444 <__ieee754_pow+0x220>
 800b442:	e0f1      	b.n	800b628 <__ieee754_pow+0x404>
 800b444:	4b15      	ldr	r3, [pc, #84]	; (800b49c <__ieee754_pow+0x278>)
 800b446:	429e      	cmp	r6, r3
 800b448:	dd09      	ble.n	800b45e <__ieee754_pow+0x23a>
 800b44a:	4b0f      	ldr	r3, [pc, #60]	; (800b488 <__ieee754_pow+0x264>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	dc0c      	bgt.n	800b46a <__ieee754_pow+0x246>
 800b450:	9b04      	ldr	r3, [sp, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	da0c      	bge.n	800b470 <__ieee754_pow+0x24c>
 800b456:	2000      	movs	r0, #0
 800b458:	f000 fe76 	bl	800c148 <__math_oflow>
 800b45c:	e708      	b.n	800b270 <__ieee754_pow+0x4c>
 800b45e:	4b10      	ldr	r3, [pc, #64]	; (800b4a0 <__ieee754_pow+0x27c>)
 800b460:	429c      	cmp	r4, r3
 800b462:	ddf5      	ble.n	800b450 <__ieee754_pow+0x22c>
 800b464:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <__ieee754_pow+0x26c>)
 800b466:	429c      	cmp	r4, r3
 800b468:	dd1c      	ble.n	800b4a4 <__ieee754_pow+0x280>
 800b46a:	9b04      	ldr	r3, [sp, #16]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dcf2      	bgt.n	800b456 <__ieee754_pow+0x232>
 800b470:	2000      	movs	r0, #0
 800b472:	f000 fe62 	bl	800c13a <__math_uflow>
 800b476:	e6fb      	b.n	800b270 <__ieee754_pow+0x4c>
 800b478:	fff00000 	.word	0xfff00000
 800b47c:	7ff00000 	.word	0x7ff00000
 800b480:	c0100000 	.word	0xc0100000
 800b484:	433fffff 	.word	0x433fffff
 800b488:	3fefffff 	.word	0x3fefffff
 800b48c:	fffffc01 	.word	0xfffffc01
 800b490:	3ff00000 	.word	0x3ff00000
 800b494:	3fe00000 	.word	0x3fe00000
 800b498:	41e00000 	.word	0x41e00000
 800b49c:	43f00000 	.word	0x43f00000
 800b4a0:	3feffffe 	.word	0x3feffffe
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	9800      	ldr	r0, [sp, #0]
 800b4a8:	9901      	ldr	r1, [sp, #4]
 800b4aa:	4b53      	ldr	r3, [pc, #332]	; (800b5f8 <__ieee754_pow+0x3d4>)
 800b4ac:	f7f6 fcf4 	bl	8001e98 <__aeabi_dsub>
 800b4b0:	22c0      	movs	r2, #192	; 0xc0
 800b4b2:	4b52      	ldr	r3, [pc, #328]	; (800b5fc <__ieee754_pow+0x3d8>)
 800b4b4:	05d2      	lsls	r2, r2, #23
 800b4b6:	0004      	movs	r4, r0
 800b4b8:	000d      	movs	r5, r1
 800b4ba:	f7f6 fa2b 	bl	8001914 <__aeabi_dmul>
 800b4be:	4a50      	ldr	r2, [pc, #320]	; (800b600 <__ieee754_pow+0x3dc>)
 800b4c0:	0006      	movs	r6, r0
 800b4c2:	000f      	movs	r7, r1
 800b4c4:	0020      	movs	r0, r4
 800b4c6:	0029      	movs	r1, r5
 800b4c8:	4b4e      	ldr	r3, [pc, #312]	; (800b604 <__ieee754_pow+0x3e0>)
 800b4ca:	f7f6 fa23 	bl	8001914 <__aeabi_dmul>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	9000      	str	r0, [sp, #0]
 800b4d2:	9101      	str	r1, [sp, #4]
 800b4d4:	4b4c      	ldr	r3, [pc, #304]	; (800b608 <__ieee754_pow+0x3e4>)
 800b4d6:	0020      	movs	r0, r4
 800b4d8:	0029      	movs	r1, r5
 800b4da:	f7f6 fa1b 	bl	8001914 <__aeabi_dmul>
 800b4de:	0002      	movs	r2, r0
 800b4e0:	000b      	movs	r3, r1
 800b4e2:	484a      	ldr	r0, [pc, #296]	; (800b60c <__ieee754_pow+0x3e8>)
 800b4e4:	494a      	ldr	r1, [pc, #296]	; (800b610 <__ieee754_pow+0x3ec>)
 800b4e6:	f7f6 fcd7 	bl	8001e98 <__aeabi_dsub>
 800b4ea:	0022      	movs	r2, r4
 800b4ec:	002b      	movs	r3, r5
 800b4ee:	f7f6 fa11 	bl	8001914 <__aeabi_dmul>
 800b4f2:	0002      	movs	r2, r0
 800b4f4:	000b      	movs	r3, r1
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	4946      	ldr	r1, [pc, #280]	; (800b614 <__ieee754_pow+0x3f0>)
 800b4fa:	f7f6 fccd 	bl	8001e98 <__aeabi_dsub>
 800b4fe:	0022      	movs	r2, r4
 800b500:	002b      	movs	r3, r5
 800b502:	9004      	str	r0, [sp, #16]
 800b504:	9105      	str	r1, [sp, #20]
 800b506:	0020      	movs	r0, r4
 800b508:	0029      	movs	r1, r5
 800b50a:	f7f6 fa03 	bl	8001914 <__aeabi_dmul>
 800b50e:	0002      	movs	r2, r0
 800b510:	000b      	movs	r3, r1
 800b512:	9804      	ldr	r0, [sp, #16]
 800b514:	9905      	ldr	r1, [sp, #20]
 800b516:	f7f6 f9fd 	bl	8001914 <__aeabi_dmul>
 800b51a:	4a3f      	ldr	r2, [pc, #252]	; (800b618 <__ieee754_pow+0x3f4>)
 800b51c:	4b37      	ldr	r3, [pc, #220]	; (800b5fc <__ieee754_pow+0x3d8>)
 800b51e:	f7f6 f9f9 	bl	8001914 <__aeabi_dmul>
 800b522:	0002      	movs	r2, r0
 800b524:	000b      	movs	r3, r1
 800b526:	9800      	ldr	r0, [sp, #0]
 800b528:	9901      	ldr	r1, [sp, #4]
 800b52a:	f7f6 fcb5 	bl	8001e98 <__aeabi_dsub>
 800b52e:	0002      	movs	r2, r0
 800b530:	000b      	movs	r3, r1
 800b532:	0004      	movs	r4, r0
 800b534:	000d      	movs	r5, r1
 800b536:	0030      	movs	r0, r6
 800b538:	0039      	movs	r1, r7
 800b53a:	f7f5 fa91 	bl	8000a60 <__aeabi_dadd>
 800b53e:	2000      	movs	r0, #0
 800b540:	0032      	movs	r2, r6
 800b542:	003b      	movs	r3, r7
 800b544:	9004      	str	r0, [sp, #16]
 800b546:	9105      	str	r1, [sp, #20]
 800b548:	f7f6 fca6 	bl	8001e98 <__aeabi_dsub>
 800b54c:	0002      	movs	r2, r0
 800b54e:	000b      	movs	r3, r1
 800b550:	0020      	movs	r0, r4
 800b552:	0029      	movs	r1, r5
 800b554:	f7f6 fca0 	bl	8001e98 <__aeabi_dsub>
 800b558:	9b06      	ldr	r3, [sp, #24]
 800b55a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b55c:	3b01      	subs	r3, #1
 800b55e:	0006      	movs	r6, r0
 800b560:	000f      	movs	r7, r1
 800b562:	4313      	orrs	r3, r2
 800b564:	d000      	beq.n	800b568 <__ieee754_pow+0x344>
 800b566:	e1dc      	b.n	800b922 <__ieee754_pow+0x6fe>
 800b568:	2300      	movs	r3, #0
 800b56a:	4c2c      	ldr	r4, [pc, #176]	; (800b61c <__ieee754_pow+0x3f8>)
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	9401      	str	r4, [sp, #4]
 800b570:	9c02      	ldr	r4, [sp, #8]
 800b572:	9d03      	ldr	r5, [sp, #12]
 800b574:	9802      	ldr	r0, [sp, #8]
 800b576:	9903      	ldr	r1, [sp, #12]
 800b578:	2400      	movs	r4, #0
 800b57a:	002b      	movs	r3, r5
 800b57c:	0022      	movs	r2, r4
 800b57e:	f7f6 fc8b 	bl	8001e98 <__aeabi_dsub>
 800b582:	9a04      	ldr	r2, [sp, #16]
 800b584:	9b05      	ldr	r3, [sp, #20]
 800b586:	f7f6 f9c5 	bl	8001914 <__aeabi_dmul>
 800b58a:	9a02      	ldr	r2, [sp, #8]
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	9006      	str	r0, [sp, #24]
 800b590:	9107      	str	r1, [sp, #28]
 800b592:	0030      	movs	r0, r6
 800b594:	0039      	movs	r1, r7
 800b596:	f7f6 f9bd 	bl	8001914 <__aeabi_dmul>
 800b59a:	0002      	movs	r2, r0
 800b59c:	000b      	movs	r3, r1
 800b59e:	9806      	ldr	r0, [sp, #24]
 800b5a0:	9907      	ldr	r1, [sp, #28]
 800b5a2:	f7f5 fa5d 	bl	8000a60 <__aeabi_dadd>
 800b5a6:	0022      	movs	r2, r4
 800b5a8:	002b      	movs	r3, r5
 800b5aa:	0006      	movs	r6, r0
 800b5ac:	000f      	movs	r7, r1
 800b5ae:	9804      	ldr	r0, [sp, #16]
 800b5b0:	9905      	ldr	r1, [sp, #20]
 800b5b2:	f7f6 f9af 	bl	8001914 <__aeabi_dmul>
 800b5b6:	0003      	movs	r3, r0
 800b5b8:	000c      	movs	r4, r1
 800b5ba:	9004      	str	r0, [sp, #16]
 800b5bc:	9105      	str	r1, [sp, #20]
 800b5be:	9306      	str	r3, [sp, #24]
 800b5c0:	9407      	str	r4, [sp, #28]
 800b5c2:	0002      	movs	r2, r0
 800b5c4:	000b      	movs	r3, r1
 800b5c6:	0030      	movs	r0, r6
 800b5c8:	0039      	movs	r1, r7
 800b5ca:	f7f5 fa49 	bl	8000a60 <__aeabi_dadd>
 800b5ce:	4b14      	ldr	r3, [pc, #80]	; (800b620 <__ieee754_pow+0x3fc>)
 800b5d0:	0005      	movs	r5, r0
 800b5d2:	000c      	movs	r4, r1
 800b5d4:	9108      	str	r1, [sp, #32]
 800b5d6:	4299      	cmp	r1, r3
 800b5d8:	dc00      	bgt.n	800b5dc <__ieee754_pow+0x3b8>
 800b5da:	e2d4      	b.n	800bb86 <__ieee754_pow+0x962>
 800b5dc:	4b11      	ldr	r3, [pc, #68]	; (800b624 <__ieee754_pow+0x400>)
 800b5de:	18cb      	adds	r3, r1, r3
 800b5e0:	4303      	orrs	r3, r0
 800b5e2:	d100      	bne.n	800b5e6 <__ieee754_pow+0x3c2>
 800b5e4:	e1d6      	b.n	800b994 <__ieee754_pow+0x770>
 800b5e6:	9800      	ldr	r0, [sp, #0]
 800b5e8:	9901      	ldr	r1, [sp, #4]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f7f4 ff2f 	bl	8000450 <__aeabi_dcmplt>
 800b5f2:	1e43      	subs	r3, r0, #1
 800b5f4:	4198      	sbcs	r0, r3
 800b5f6:	e72f      	b.n	800b458 <__ieee754_pow+0x234>
 800b5f8:	3ff00000 	.word	0x3ff00000
 800b5fc:	3ff71547 	.word	0x3ff71547
 800b600:	f85ddf44 	.word	0xf85ddf44
 800b604:	3e54ae0b 	.word	0x3e54ae0b
 800b608:	3fd00000 	.word	0x3fd00000
 800b60c:	55555555 	.word	0x55555555
 800b610:	3fd55555 	.word	0x3fd55555
 800b614:	3fe00000 	.word	0x3fe00000
 800b618:	652b82fe 	.word	0x652b82fe
 800b61c:	bff00000 	.word	0xbff00000
 800b620:	408fffff 	.word	0x408fffff
 800b624:	bf700000 	.word	0xbf700000
 800b628:	4bbf      	ldr	r3, [pc, #764]	; (800b928 <__ieee754_pow+0x704>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	422b      	tst	r3, r5
 800b62e:	d10a      	bne.n	800b646 <__ieee754_pow+0x422>
 800b630:	9800      	ldr	r0, [sp, #0]
 800b632:	9901      	ldr	r1, [sp, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	4bbd      	ldr	r3, [pc, #756]	; (800b92c <__ieee754_pow+0x708>)
 800b638:	f7f6 f96c 	bl	8001914 <__aeabi_dmul>
 800b63c:	2235      	movs	r2, #53	; 0x35
 800b63e:	9000      	str	r0, [sp, #0]
 800b640:	9101      	str	r1, [sp, #4]
 800b642:	9c01      	ldr	r4, [sp, #4]
 800b644:	4252      	negs	r2, r2
 800b646:	49ba      	ldr	r1, [pc, #744]	; (800b930 <__ieee754_pow+0x70c>)
 800b648:	1523      	asrs	r3, r4, #20
 800b64a:	185b      	adds	r3, r3, r1
 800b64c:	189b      	adds	r3, r3, r2
 800b64e:	0324      	lsls	r4, r4, #12
 800b650:	4db8      	ldr	r5, [pc, #736]	; (800b934 <__ieee754_pow+0x710>)
 800b652:	930d      	str	r3, [sp, #52]	; 0x34
 800b654:	4bb8      	ldr	r3, [pc, #736]	; (800b938 <__ieee754_pow+0x714>)
 800b656:	0b22      	lsrs	r2, r4, #12
 800b658:	4315      	orrs	r5, r2
 800b65a:	2400      	movs	r4, #0
 800b65c:	429a      	cmp	r2, r3
 800b65e:	dd09      	ble.n	800b674 <__ieee754_pow+0x450>
 800b660:	4bb6      	ldr	r3, [pc, #728]	; (800b93c <__ieee754_pow+0x718>)
 800b662:	3401      	adds	r4, #1
 800b664:	429a      	cmp	r2, r3
 800b666:	dd05      	ble.n	800b674 <__ieee754_pow+0x450>
 800b668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b66a:	191b      	adds	r3, r3, r4
 800b66c:	2400      	movs	r4, #0
 800b66e:	930d      	str	r3, [sp, #52]	; 0x34
 800b670:	4bb3      	ldr	r3, [pc, #716]	; (800b940 <__ieee754_pow+0x71c>)
 800b672:	18ed      	adds	r5, r5, r3
 800b674:	4bb3      	ldr	r3, [pc, #716]	; (800b944 <__ieee754_pow+0x720>)
 800b676:	00e2      	lsls	r2, r4, #3
 800b678:	189b      	adds	r3, r3, r2
 800b67a:	9800      	ldr	r0, [sp, #0]
 800b67c:	9901      	ldr	r1, [sp, #4]
 800b67e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b680:	0029      	movs	r1, r5
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	0006      	movs	r6, r0
 800b688:	920a      	str	r2, [sp, #40]	; 0x28
 800b68a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b68c:	f7f6 fc04 	bl	8001e98 <__aeabi_dsub>
 800b690:	0032      	movs	r2, r6
 800b692:	002b      	movs	r3, r5
 800b694:	9010      	str	r0, [sp, #64]	; 0x40
 800b696:	9111      	str	r1, [sp, #68]	; 0x44
 800b698:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b69a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b69c:	f7f5 f9e0 	bl	8000a60 <__aeabi_dadd>
 800b6a0:	0002      	movs	r2, r0
 800b6a2:	000b      	movs	r3, r1
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	49a3      	ldr	r1, [pc, #652]	; (800b934 <__ieee754_pow+0x710>)
 800b6a8:	f7f5 fd3a 	bl	8001120 <__aeabi_ddiv>
 800b6ac:	0002      	movs	r2, r0
 800b6ae:	000b      	movs	r3, r1
 800b6b0:	9012      	str	r0, [sp, #72]	; 0x48
 800b6b2:	9113      	str	r1, [sp, #76]	; 0x4c
 800b6b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b6b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b6b8:	f7f6 f92c 	bl	8001914 <__aeabi_dmul>
 800b6bc:	9008      	str	r0, [sp, #32]
 800b6be:	9109      	str	r1, [sp, #36]	; 0x24
 800b6c0:	9a08      	ldr	r2, [sp, #32]
 800b6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c4:	9204      	str	r2, [sp, #16]
 800b6c6:	9305      	str	r3, [sp, #20]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	2180      	movs	r1, #128	; 0x80
 800b6cc:	2080      	movs	r0, #128	; 0x80
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	9a04      	ldr	r2, [sp, #16]
 800b6d2:	9b05      	ldr	r3, [sp, #20]
 800b6d4:	9200      	str	r2, [sp, #0]
 800b6d6:	9301      	str	r3, [sp, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	002f      	movs	r7, r5
 800b6dc:	0589      	lsls	r1, r1, #22
 800b6de:	106d      	asrs	r5, r5, #1
 800b6e0:	4329      	orrs	r1, r5
 800b6e2:	0300      	lsls	r0, r0, #12
 800b6e4:	1809      	adds	r1, r1, r0
 800b6e6:	04a0      	lsls	r0, r4, #18
 800b6e8:	180b      	adds	r3, r1, r0
 800b6ea:	9800      	ldr	r0, [sp, #0]
 800b6ec:	9901      	ldr	r1, [sp, #4]
 800b6ee:	0014      	movs	r4, r2
 800b6f0:	001d      	movs	r5, r3
 800b6f2:	f7f6 f90f 	bl	8001914 <__aeabi_dmul>
 800b6f6:	0002      	movs	r2, r0
 800b6f8:	000b      	movs	r3, r1
 800b6fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b6fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b6fe:	f7f6 fbcb 	bl	8001e98 <__aeabi_dsub>
 800b702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b706:	9010      	str	r0, [sp, #64]	; 0x40
 800b708:	9111      	str	r1, [sp, #68]	; 0x44
 800b70a:	0020      	movs	r0, r4
 800b70c:	0029      	movs	r1, r5
 800b70e:	f7f6 fbc3 	bl	8001e98 <__aeabi_dsub>
 800b712:	0002      	movs	r2, r0
 800b714:	000b      	movs	r3, r1
 800b716:	0030      	movs	r0, r6
 800b718:	0039      	movs	r1, r7
 800b71a:	f7f6 fbbd 	bl	8001e98 <__aeabi_dsub>
 800b71e:	9a00      	ldr	r2, [sp, #0]
 800b720:	9b01      	ldr	r3, [sp, #4]
 800b722:	f7f6 f8f7 	bl	8001914 <__aeabi_dmul>
 800b726:	0002      	movs	r2, r0
 800b728:	000b      	movs	r3, r1
 800b72a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b72c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b72e:	f7f6 fbb3 	bl	8001e98 <__aeabi_dsub>
 800b732:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b736:	f7f6 f8ed 	bl	8001914 <__aeabi_dmul>
 800b73a:	9a08      	ldr	r2, [sp, #32]
 800b73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b73e:	900a      	str	r0, [sp, #40]	; 0x28
 800b740:	910b      	str	r1, [sp, #44]	; 0x2c
 800b742:	0010      	movs	r0, r2
 800b744:	0019      	movs	r1, r3
 800b746:	f7f6 f8e5 	bl	8001914 <__aeabi_dmul>
 800b74a:	0006      	movs	r6, r0
 800b74c:	000f      	movs	r7, r1
 800b74e:	4a7e      	ldr	r2, [pc, #504]	; (800b948 <__ieee754_pow+0x724>)
 800b750:	4b7e      	ldr	r3, [pc, #504]	; (800b94c <__ieee754_pow+0x728>)
 800b752:	f7f6 f8df 	bl	8001914 <__aeabi_dmul>
 800b756:	4a7e      	ldr	r2, [pc, #504]	; (800b950 <__ieee754_pow+0x72c>)
 800b758:	4b7e      	ldr	r3, [pc, #504]	; (800b954 <__ieee754_pow+0x730>)
 800b75a:	f7f5 f981 	bl	8000a60 <__aeabi_dadd>
 800b75e:	0032      	movs	r2, r6
 800b760:	003b      	movs	r3, r7
 800b762:	f7f6 f8d7 	bl	8001914 <__aeabi_dmul>
 800b766:	4a7c      	ldr	r2, [pc, #496]	; (800b958 <__ieee754_pow+0x734>)
 800b768:	4b7c      	ldr	r3, [pc, #496]	; (800b95c <__ieee754_pow+0x738>)
 800b76a:	f7f5 f979 	bl	8000a60 <__aeabi_dadd>
 800b76e:	0032      	movs	r2, r6
 800b770:	003b      	movs	r3, r7
 800b772:	f7f6 f8cf 	bl	8001914 <__aeabi_dmul>
 800b776:	4a7a      	ldr	r2, [pc, #488]	; (800b960 <__ieee754_pow+0x73c>)
 800b778:	4b7a      	ldr	r3, [pc, #488]	; (800b964 <__ieee754_pow+0x740>)
 800b77a:	f7f5 f971 	bl	8000a60 <__aeabi_dadd>
 800b77e:	0032      	movs	r2, r6
 800b780:	003b      	movs	r3, r7
 800b782:	f7f6 f8c7 	bl	8001914 <__aeabi_dmul>
 800b786:	4a78      	ldr	r2, [pc, #480]	; (800b968 <__ieee754_pow+0x744>)
 800b788:	4b78      	ldr	r3, [pc, #480]	; (800b96c <__ieee754_pow+0x748>)
 800b78a:	f7f5 f969 	bl	8000a60 <__aeabi_dadd>
 800b78e:	0032      	movs	r2, r6
 800b790:	003b      	movs	r3, r7
 800b792:	f7f6 f8bf 	bl	8001914 <__aeabi_dmul>
 800b796:	4a76      	ldr	r2, [pc, #472]	; (800b970 <__ieee754_pow+0x74c>)
 800b798:	4b76      	ldr	r3, [pc, #472]	; (800b974 <__ieee754_pow+0x750>)
 800b79a:	f7f5 f961 	bl	8000a60 <__aeabi_dadd>
 800b79e:	0032      	movs	r2, r6
 800b7a0:	0004      	movs	r4, r0
 800b7a2:	000d      	movs	r5, r1
 800b7a4:	003b      	movs	r3, r7
 800b7a6:	0030      	movs	r0, r6
 800b7a8:	0039      	movs	r1, r7
 800b7aa:	f7f6 f8b3 	bl	8001914 <__aeabi_dmul>
 800b7ae:	0002      	movs	r2, r0
 800b7b0:	000b      	movs	r3, r1
 800b7b2:	0020      	movs	r0, r4
 800b7b4:	0029      	movs	r1, r5
 800b7b6:	f7f6 f8ad 	bl	8001914 <__aeabi_dmul>
 800b7ba:	9a00      	ldr	r2, [sp, #0]
 800b7bc:	9b01      	ldr	r3, [sp, #4]
 800b7be:	0004      	movs	r4, r0
 800b7c0:	000d      	movs	r5, r1
 800b7c2:	9808      	ldr	r0, [sp, #32]
 800b7c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7c6:	f7f5 f94b 	bl	8000a60 <__aeabi_dadd>
 800b7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7ce:	f7f6 f8a1 	bl	8001914 <__aeabi_dmul>
 800b7d2:	0022      	movs	r2, r4
 800b7d4:	002b      	movs	r3, r5
 800b7d6:	f7f5 f943 	bl	8000a60 <__aeabi_dadd>
 800b7da:	9a00      	ldr	r2, [sp, #0]
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	9010      	str	r0, [sp, #64]	; 0x40
 800b7e0:	9111      	str	r1, [sp, #68]	; 0x44
 800b7e2:	0010      	movs	r0, r2
 800b7e4:	0019      	movs	r1, r3
 800b7e6:	f7f6 f895 	bl	8001914 <__aeabi_dmul>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4b62      	ldr	r3, [pc, #392]	; (800b978 <__ieee754_pow+0x754>)
 800b7ee:	0004      	movs	r4, r0
 800b7f0:	000d      	movs	r5, r1
 800b7f2:	f7f5 f935 	bl	8000a60 <__aeabi_dadd>
 800b7f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b7f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7fa:	f7f5 f931 	bl	8000a60 <__aeabi_dadd>
 800b7fe:	2000      	movs	r0, #0
 800b800:	000f      	movs	r7, r1
 800b802:	0006      	movs	r6, r0
 800b804:	0002      	movs	r2, r0
 800b806:	000b      	movs	r3, r1
 800b808:	9800      	ldr	r0, [sp, #0]
 800b80a:	9901      	ldr	r1, [sp, #4]
 800b80c:	f7f6 f882 	bl	8001914 <__aeabi_dmul>
 800b810:	2200      	movs	r2, #0
 800b812:	9000      	str	r0, [sp, #0]
 800b814:	9101      	str	r1, [sp, #4]
 800b816:	4b58      	ldr	r3, [pc, #352]	; (800b978 <__ieee754_pow+0x754>)
 800b818:	0030      	movs	r0, r6
 800b81a:	0039      	movs	r1, r7
 800b81c:	f7f6 fb3c 	bl	8001e98 <__aeabi_dsub>
 800b820:	0022      	movs	r2, r4
 800b822:	002b      	movs	r3, r5
 800b824:	f7f6 fb38 	bl	8001e98 <__aeabi_dsub>
 800b828:	0002      	movs	r2, r0
 800b82a:	000b      	movs	r3, r1
 800b82c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b82e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b830:	f7f6 fb32 	bl	8001e98 <__aeabi_dsub>
 800b834:	9a08      	ldr	r2, [sp, #32]
 800b836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b838:	f7f6 f86c 	bl	8001914 <__aeabi_dmul>
 800b83c:	0032      	movs	r2, r6
 800b83e:	0004      	movs	r4, r0
 800b840:	000d      	movs	r5, r1
 800b842:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b844:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b846:	003b      	movs	r3, r7
 800b848:	f7f6 f864 	bl	8001914 <__aeabi_dmul>
 800b84c:	0002      	movs	r2, r0
 800b84e:	000b      	movs	r3, r1
 800b850:	0020      	movs	r0, r4
 800b852:	0029      	movs	r1, r5
 800b854:	f7f5 f904 	bl	8000a60 <__aeabi_dadd>
 800b858:	0004      	movs	r4, r0
 800b85a:	000d      	movs	r5, r1
 800b85c:	0002      	movs	r2, r0
 800b85e:	000b      	movs	r3, r1
 800b860:	9800      	ldr	r0, [sp, #0]
 800b862:	9901      	ldr	r1, [sp, #4]
 800b864:	f7f5 f8fc 	bl	8000a60 <__aeabi_dadd>
 800b868:	22e0      	movs	r2, #224	; 0xe0
 800b86a:	2000      	movs	r0, #0
 800b86c:	4b43      	ldr	r3, [pc, #268]	; (800b97c <__ieee754_pow+0x758>)
 800b86e:	0612      	lsls	r2, r2, #24
 800b870:	0006      	movs	r6, r0
 800b872:	000f      	movs	r7, r1
 800b874:	f7f6 f84e 	bl	8001914 <__aeabi_dmul>
 800b878:	9008      	str	r0, [sp, #32]
 800b87a:	9109      	str	r1, [sp, #36]	; 0x24
 800b87c:	9a00      	ldr	r2, [sp, #0]
 800b87e:	9b01      	ldr	r3, [sp, #4]
 800b880:	0030      	movs	r0, r6
 800b882:	0039      	movs	r1, r7
 800b884:	f7f6 fb08 	bl	8001e98 <__aeabi_dsub>
 800b888:	0002      	movs	r2, r0
 800b88a:	000b      	movs	r3, r1
 800b88c:	0020      	movs	r0, r4
 800b88e:	0029      	movs	r1, r5
 800b890:	f7f6 fb02 	bl	8001e98 <__aeabi_dsub>
 800b894:	4a3a      	ldr	r2, [pc, #232]	; (800b980 <__ieee754_pow+0x75c>)
 800b896:	4b39      	ldr	r3, [pc, #228]	; (800b97c <__ieee754_pow+0x758>)
 800b898:	f7f6 f83c 	bl	8001914 <__aeabi_dmul>
 800b89c:	4a39      	ldr	r2, [pc, #228]	; (800b984 <__ieee754_pow+0x760>)
 800b89e:	0004      	movs	r4, r0
 800b8a0:	000d      	movs	r5, r1
 800b8a2:	0030      	movs	r0, r6
 800b8a4:	0039      	movs	r1, r7
 800b8a6:	4b38      	ldr	r3, [pc, #224]	; (800b988 <__ieee754_pow+0x764>)
 800b8a8:	f7f6 f834 	bl	8001914 <__aeabi_dmul>
 800b8ac:	0002      	movs	r2, r0
 800b8ae:	000b      	movs	r3, r1
 800b8b0:	0020      	movs	r0, r4
 800b8b2:	0029      	movs	r1, r5
 800b8b4:	f7f5 f8d4 	bl	8000a60 <__aeabi_dadd>
 800b8b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8ba:	4b34      	ldr	r3, [pc, #208]	; (800b98c <__ieee754_pow+0x768>)
 800b8bc:	189b      	adds	r3, r3, r2
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	f7f5 f8cd 	bl	8000a60 <__aeabi_dadd>
 800b8c6:	9000      	str	r0, [sp, #0]
 800b8c8:	9101      	str	r1, [sp, #4]
 800b8ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b8cc:	f7f6 feba 	bl	8002644 <__aeabi_i2d>
 800b8d0:	0004      	movs	r4, r0
 800b8d2:	000d      	movs	r5, r1
 800b8d4:	9808      	ldr	r0, [sp, #32]
 800b8d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8da:	4b2d      	ldr	r3, [pc, #180]	; (800b990 <__ieee754_pow+0x76c>)
 800b8dc:	189b      	adds	r3, r3, r2
 800b8de:	681e      	ldr	r6, [r3, #0]
 800b8e0:	685f      	ldr	r7, [r3, #4]
 800b8e2:	9a00      	ldr	r2, [sp, #0]
 800b8e4:	9b01      	ldr	r3, [sp, #4]
 800b8e6:	f7f5 f8bb 	bl	8000a60 <__aeabi_dadd>
 800b8ea:	0032      	movs	r2, r6
 800b8ec:	003b      	movs	r3, r7
 800b8ee:	f7f5 f8b7 	bl	8000a60 <__aeabi_dadd>
 800b8f2:	0022      	movs	r2, r4
 800b8f4:	002b      	movs	r3, r5
 800b8f6:	f7f5 f8b3 	bl	8000a60 <__aeabi_dadd>
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	0022      	movs	r2, r4
 800b8fe:	002b      	movs	r3, r5
 800b900:	9004      	str	r0, [sp, #16]
 800b902:	9105      	str	r1, [sp, #20]
 800b904:	f7f6 fac8 	bl	8001e98 <__aeabi_dsub>
 800b908:	0032      	movs	r2, r6
 800b90a:	003b      	movs	r3, r7
 800b90c:	f7f6 fac4 	bl	8001e98 <__aeabi_dsub>
 800b910:	9a08      	ldr	r2, [sp, #32]
 800b912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b914:	f7f6 fac0 	bl	8001e98 <__aeabi_dsub>
 800b918:	0002      	movs	r2, r0
 800b91a:	000b      	movs	r3, r1
 800b91c:	9800      	ldr	r0, [sp, #0]
 800b91e:	9901      	ldr	r1, [sp, #4]
 800b920:	e618      	b.n	800b554 <__ieee754_pow+0x330>
 800b922:	2300      	movs	r3, #0
 800b924:	4c03      	ldr	r4, [pc, #12]	; (800b934 <__ieee754_pow+0x710>)
 800b926:	e621      	b.n	800b56c <__ieee754_pow+0x348>
 800b928:	7ff00000 	.word	0x7ff00000
 800b92c:	43400000 	.word	0x43400000
 800b930:	fffffc01 	.word	0xfffffc01
 800b934:	3ff00000 	.word	0x3ff00000
 800b938:	0003988e 	.word	0x0003988e
 800b93c:	000bb679 	.word	0x000bb679
 800b940:	fff00000 	.word	0xfff00000
 800b944:	0800d100 	.word	0x0800d100
 800b948:	4a454eef 	.word	0x4a454eef
 800b94c:	3fca7e28 	.word	0x3fca7e28
 800b950:	93c9db65 	.word	0x93c9db65
 800b954:	3fcd864a 	.word	0x3fcd864a
 800b958:	a91d4101 	.word	0xa91d4101
 800b95c:	3fd17460 	.word	0x3fd17460
 800b960:	518f264d 	.word	0x518f264d
 800b964:	3fd55555 	.word	0x3fd55555
 800b968:	db6fabff 	.word	0xdb6fabff
 800b96c:	3fdb6db6 	.word	0x3fdb6db6
 800b970:	33333303 	.word	0x33333303
 800b974:	3fe33333 	.word	0x3fe33333
 800b978:	40080000 	.word	0x40080000
 800b97c:	3feec709 	.word	0x3feec709
 800b980:	dc3a03fd 	.word	0xdc3a03fd
 800b984:	145b01f5 	.word	0x145b01f5
 800b988:	be3e2fe0 	.word	0xbe3e2fe0
 800b98c:	0800d120 	.word	0x0800d120
 800b990:	0800d110 	.word	0x0800d110
 800b994:	4a90      	ldr	r2, [pc, #576]	; (800bbd8 <__ieee754_pow+0x9b4>)
 800b996:	4b91      	ldr	r3, [pc, #580]	; (800bbdc <__ieee754_pow+0x9b8>)
 800b998:	0030      	movs	r0, r6
 800b99a:	0039      	movs	r1, r7
 800b99c:	f7f5 f860 	bl	8000a60 <__aeabi_dadd>
 800b9a0:	9a04      	ldr	r2, [sp, #16]
 800b9a2:	9b05      	ldr	r3, [sp, #20]
 800b9a4:	9002      	str	r0, [sp, #8]
 800b9a6:	9103      	str	r1, [sp, #12]
 800b9a8:	0028      	movs	r0, r5
 800b9aa:	0021      	movs	r1, r4
 800b9ac:	f7f6 fa74 	bl	8001e98 <__aeabi_dsub>
 800b9b0:	0002      	movs	r2, r0
 800b9b2:	000b      	movs	r3, r1
 800b9b4:	9802      	ldr	r0, [sp, #8]
 800b9b6:	9903      	ldr	r1, [sp, #12]
 800b9b8:	f7f4 fd5e 	bl	8000478 <__aeabi_dcmpgt>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d000      	beq.n	800b9c2 <__ieee754_pow+0x79e>
 800b9c0:	e611      	b.n	800b5e6 <__ieee754_pow+0x3c2>
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	4a86      	ldr	r2, [pc, #536]	; (800bbe0 <__ieee754_pow+0x9bc>)
 800b9c6:	0063      	lsls	r3, r4, #1
 800b9c8:	085b      	lsrs	r3, r3, #1
 800b9ca:	9102      	str	r1, [sp, #8]
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	dd25      	ble.n	800ba1c <__ieee754_pow+0x7f8>
 800b9d0:	4a84      	ldr	r2, [pc, #528]	; (800bbe4 <__ieee754_pow+0x9c0>)
 800b9d2:	151b      	asrs	r3, r3, #20
 800b9d4:	189b      	adds	r3, r3, r2
 800b9d6:	2280      	movs	r2, #128	; 0x80
 800b9d8:	0352      	lsls	r2, r2, #13
 800b9da:	0011      	movs	r1, r2
 800b9dc:	4119      	asrs	r1, r3
 800b9de:	190b      	adds	r3, r1, r4
 800b9e0:	005c      	lsls	r4, r3, #1
 800b9e2:	4981      	ldr	r1, [pc, #516]	; (800bbe8 <__ieee754_pow+0x9c4>)
 800b9e4:	4d81      	ldr	r5, [pc, #516]	; (800bbec <__ieee754_pow+0x9c8>)
 800b9e6:	0d64      	lsrs	r4, r4, #21
 800b9e8:	1864      	adds	r4, r4, r1
 800b9ea:	4125      	asrs	r5, r4
 800b9ec:	401d      	ands	r5, r3
 800b9ee:	031b      	lsls	r3, r3, #12
 800b9f0:	0b1b      	lsrs	r3, r3, #12
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	2214      	movs	r2, #20
 800b9f6:	1b12      	subs	r2, r2, r4
 800b9f8:	4113      	asrs	r3, r2
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	9b08      	ldr	r3, [sp, #32]
 800b9fe:	2000      	movs	r0, #0
 800ba00:	0029      	movs	r1, r5
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	da02      	bge.n	800ba0c <__ieee754_pow+0x7e8>
 800ba06:	9b02      	ldr	r3, [sp, #8]
 800ba08:	425b      	negs	r3, r3
 800ba0a:	9302      	str	r3, [sp, #8]
 800ba0c:	0002      	movs	r2, r0
 800ba0e:	000b      	movs	r3, r1
 800ba10:	9804      	ldr	r0, [sp, #16]
 800ba12:	9905      	ldr	r1, [sp, #20]
 800ba14:	f7f6 fa40 	bl	8001e98 <__aeabi_dsub>
 800ba18:	9006      	str	r0, [sp, #24]
 800ba1a:	9107      	str	r1, [sp, #28]
 800ba1c:	9806      	ldr	r0, [sp, #24]
 800ba1e:	9907      	ldr	r1, [sp, #28]
 800ba20:	0032      	movs	r2, r6
 800ba22:	003b      	movs	r3, r7
 800ba24:	f7f5 f81c 	bl	8000a60 <__aeabi_dadd>
 800ba28:	2000      	movs	r0, #0
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	4b70      	ldr	r3, [pc, #448]	; (800bbf0 <__ieee754_pow+0x9cc>)
 800ba2e:	9004      	str	r0, [sp, #16]
 800ba30:	9105      	str	r1, [sp, #20]
 800ba32:	f7f5 ff6f 	bl	8001914 <__aeabi_dmul>
 800ba36:	9a06      	ldr	r2, [sp, #24]
 800ba38:	9b07      	ldr	r3, [sp, #28]
 800ba3a:	9008      	str	r0, [sp, #32]
 800ba3c:	9109      	str	r1, [sp, #36]	; 0x24
 800ba3e:	9804      	ldr	r0, [sp, #16]
 800ba40:	9905      	ldr	r1, [sp, #20]
 800ba42:	f7f6 fa29 	bl	8001e98 <__aeabi_dsub>
 800ba46:	0002      	movs	r2, r0
 800ba48:	000b      	movs	r3, r1
 800ba4a:	0030      	movs	r0, r6
 800ba4c:	0039      	movs	r1, r7
 800ba4e:	f7f6 fa23 	bl	8001e98 <__aeabi_dsub>
 800ba52:	4a68      	ldr	r2, [pc, #416]	; (800bbf4 <__ieee754_pow+0x9d0>)
 800ba54:	4b68      	ldr	r3, [pc, #416]	; (800bbf8 <__ieee754_pow+0x9d4>)
 800ba56:	f7f5 ff5d 	bl	8001914 <__aeabi_dmul>
 800ba5a:	4a68      	ldr	r2, [pc, #416]	; (800bbfc <__ieee754_pow+0x9d8>)
 800ba5c:	0004      	movs	r4, r0
 800ba5e:	000d      	movs	r5, r1
 800ba60:	9804      	ldr	r0, [sp, #16]
 800ba62:	9905      	ldr	r1, [sp, #20]
 800ba64:	4b66      	ldr	r3, [pc, #408]	; (800bc00 <__ieee754_pow+0x9dc>)
 800ba66:	f7f5 ff55 	bl	8001914 <__aeabi_dmul>
 800ba6a:	0002      	movs	r2, r0
 800ba6c:	000b      	movs	r3, r1
 800ba6e:	0020      	movs	r0, r4
 800ba70:	0029      	movs	r1, r5
 800ba72:	f7f4 fff5 	bl	8000a60 <__aeabi_dadd>
 800ba76:	0004      	movs	r4, r0
 800ba78:	000d      	movs	r5, r1
 800ba7a:	0002      	movs	r2, r0
 800ba7c:	000b      	movs	r3, r1
 800ba7e:	9808      	ldr	r0, [sp, #32]
 800ba80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba82:	f7f4 ffed 	bl	8000a60 <__aeabi_dadd>
 800ba86:	9a08      	ldr	r2, [sp, #32]
 800ba88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8a:	0006      	movs	r6, r0
 800ba8c:	000f      	movs	r7, r1
 800ba8e:	f7f6 fa03 	bl	8001e98 <__aeabi_dsub>
 800ba92:	0002      	movs	r2, r0
 800ba94:	000b      	movs	r3, r1
 800ba96:	0020      	movs	r0, r4
 800ba98:	0029      	movs	r1, r5
 800ba9a:	f7f6 f9fd 	bl	8001e98 <__aeabi_dsub>
 800ba9e:	0032      	movs	r2, r6
 800baa0:	9004      	str	r0, [sp, #16]
 800baa2:	9105      	str	r1, [sp, #20]
 800baa4:	003b      	movs	r3, r7
 800baa6:	0030      	movs	r0, r6
 800baa8:	0039      	movs	r1, r7
 800baaa:	f7f5 ff33 	bl	8001914 <__aeabi_dmul>
 800baae:	0004      	movs	r4, r0
 800bab0:	000d      	movs	r5, r1
 800bab2:	4a54      	ldr	r2, [pc, #336]	; (800bc04 <__ieee754_pow+0x9e0>)
 800bab4:	4b54      	ldr	r3, [pc, #336]	; (800bc08 <__ieee754_pow+0x9e4>)
 800bab6:	f7f5 ff2d 	bl	8001914 <__aeabi_dmul>
 800baba:	4a54      	ldr	r2, [pc, #336]	; (800bc0c <__ieee754_pow+0x9e8>)
 800babc:	4b54      	ldr	r3, [pc, #336]	; (800bc10 <__ieee754_pow+0x9ec>)
 800babe:	f7f6 f9eb 	bl	8001e98 <__aeabi_dsub>
 800bac2:	0022      	movs	r2, r4
 800bac4:	002b      	movs	r3, r5
 800bac6:	f7f5 ff25 	bl	8001914 <__aeabi_dmul>
 800baca:	4a52      	ldr	r2, [pc, #328]	; (800bc14 <__ieee754_pow+0x9f0>)
 800bacc:	4b52      	ldr	r3, [pc, #328]	; (800bc18 <__ieee754_pow+0x9f4>)
 800bace:	f7f4 ffc7 	bl	8000a60 <__aeabi_dadd>
 800bad2:	0022      	movs	r2, r4
 800bad4:	002b      	movs	r3, r5
 800bad6:	f7f5 ff1d 	bl	8001914 <__aeabi_dmul>
 800bada:	4a50      	ldr	r2, [pc, #320]	; (800bc1c <__ieee754_pow+0x9f8>)
 800badc:	4b50      	ldr	r3, [pc, #320]	; (800bc20 <__ieee754_pow+0x9fc>)
 800bade:	f7f6 f9db 	bl	8001e98 <__aeabi_dsub>
 800bae2:	0022      	movs	r2, r4
 800bae4:	002b      	movs	r3, r5
 800bae6:	f7f5 ff15 	bl	8001914 <__aeabi_dmul>
 800baea:	4a4e      	ldr	r2, [pc, #312]	; (800bc24 <__ieee754_pow+0xa00>)
 800baec:	4b4e      	ldr	r3, [pc, #312]	; (800bc28 <__ieee754_pow+0xa04>)
 800baee:	f7f4 ffb7 	bl	8000a60 <__aeabi_dadd>
 800baf2:	0022      	movs	r2, r4
 800baf4:	002b      	movs	r3, r5
 800baf6:	f7f5 ff0d 	bl	8001914 <__aeabi_dmul>
 800bafa:	0002      	movs	r2, r0
 800bafc:	000b      	movs	r3, r1
 800bafe:	0030      	movs	r0, r6
 800bb00:	0039      	movs	r1, r7
 800bb02:	f7f6 f9c9 	bl	8001e98 <__aeabi_dsub>
 800bb06:	0004      	movs	r4, r0
 800bb08:	000d      	movs	r5, r1
 800bb0a:	0002      	movs	r2, r0
 800bb0c:	000b      	movs	r3, r1
 800bb0e:	0030      	movs	r0, r6
 800bb10:	0039      	movs	r1, r7
 800bb12:	f7f5 feff 	bl	8001914 <__aeabi_dmul>
 800bb16:	2380      	movs	r3, #128	; 0x80
 800bb18:	9006      	str	r0, [sp, #24]
 800bb1a:	9107      	str	r1, [sp, #28]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	0020      	movs	r0, r4
 800bb20:	0029      	movs	r1, r5
 800bb22:	05db      	lsls	r3, r3, #23
 800bb24:	f7f6 f9b8 	bl	8001e98 <__aeabi_dsub>
 800bb28:	0002      	movs	r2, r0
 800bb2a:	000b      	movs	r3, r1
 800bb2c:	9806      	ldr	r0, [sp, #24]
 800bb2e:	9907      	ldr	r1, [sp, #28]
 800bb30:	f7f5 faf6 	bl	8001120 <__aeabi_ddiv>
 800bb34:	9a04      	ldr	r2, [sp, #16]
 800bb36:	9b05      	ldr	r3, [sp, #20]
 800bb38:	0004      	movs	r4, r0
 800bb3a:	000d      	movs	r5, r1
 800bb3c:	0030      	movs	r0, r6
 800bb3e:	0039      	movs	r1, r7
 800bb40:	f7f5 fee8 	bl	8001914 <__aeabi_dmul>
 800bb44:	9a04      	ldr	r2, [sp, #16]
 800bb46:	9b05      	ldr	r3, [sp, #20]
 800bb48:	f7f4 ff8a 	bl	8000a60 <__aeabi_dadd>
 800bb4c:	0002      	movs	r2, r0
 800bb4e:	000b      	movs	r3, r1
 800bb50:	0020      	movs	r0, r4
 800bb52:	0029      	movs	r1, r5
 800bb54:	f7f6 f9a0 	bl	8001e98 <__aeabi_dsub>
 800bb58:	0032      	movs	r2, r6
 800bb5a:	003b      	movs	r3, r7
 800bb5c:	f7f6 f99c 	bl	8001e98 <__aeabi_dsub>
 800bb60:	0002      	movs	r2, r0
 800bb62:	000b      	movs	r3, r1
 800bb64:	2000      	movs	r0, #0
 800bb66:	4931      	ldr	r1, [pc, #196]	; (800bc2c <__ieee754_pow+0xa08>)
 800bb68:	f7f6 f996 	bl	8001e98 <__aeabi_dsub>
 800bb6c:	9b02      	ldr	r3, [sp, #8]
 800bb6e:	051b      	lsls	r3, r3, #20
 800bb70:	185b      	adds	r3, r3, r1
 800bb72:	151a      	asrs	r2, r3, #20
 800bb74:	2a00      	cmp	r2, #0
 800bb76:	dc25      	bgt.n	800bbc4 <__ieee754_pow+0x9a0>
 800bb78:	9a02      	ldr	r2, [sp, #8]
 800bb7a:	f000 fa51 	bl	800c020 <scalbn>
 800bb7e:	9a00      	ldr	r2, [sp, #0]
 800bb80:	9b01      	ldr	r3, [sp, #4]
 800bb82:	f7ff fc33 	bl	800b3ec <__ieee754_pow+0x1c8>
 800bb86:	4a2a      	ldr	r2, [pc, #168]	; (800bc30 <__ieee754_pow+0xa0c>)
 800bb88:	004b      	lsls	r3, r1, #1
 800bb8a:	085b      	lsrs	r3, r3, #1
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	dc00      	bgt.n	800bb92 <__ieee754_pow+0x96e>
 800bb90:	e717      	b.n	800b9c2 <__ieee754_pow+0x79e>
 800bb92:	4b28      	ldr	r3, [pc, #160]	; (800bc34 <__ieee754_pow+0xa10>)
 800bb94:	18cb      	adds	r3, r1, r3
 800bb96:	4303      	orrs	r3, r0
 800bb98:	d008      	beq.n	800bbac <__ieee754_pow+0x988>
 800bb9a:	9800      	ldr	r0, [sp, #0]
 800bb9c:	9901      	ldr	r1, [sp, #4]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	2200      	movs	r2, #0
 800bba2:	f7f4 fc55 	bl	8000450 <__aeabi_dcmplt>
 800bba6:	1e43      	subs	r3, r0, #1
 800bba8:	4198      	sbcs	r0, r3
 800bbaa:	e462      	b.n	800b472 <__ieee754_pow+0x24e>
 800bbac:	9a04      	ldr	r2, [sp, #16]
 800bbae:	9b05      	ldr	r3, [sp, #20]
 800bbb0:	f7f6 f972 	bl	8001e98 <__aeabi_dsub>
 800bbb4:	0032      	movs	r2, r6
 800bbb6:	003b      	movs	r3, r7
 800bbb8:	f7f4 fc68 	bl	800048c <__aeabi_dcmpge>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d100      	bne.n	800bbc2 <__ieee754_pow+0x99e>
 800bbc0:	e6ff      	b.n	800b9c2 <__ieee754_pow+0x79e>
 800bbc2:	e7ea      	b.n	800bb9a <__ieee754_pow+0x976>
 800bbc4:	0019      	movs	r1, r3
 800bbc6:	e7da      	b.n	800bb7e <__ieee754_pow+0x95a>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4c18      	ldr	r4, [pc, #96]	; (800bc2c <__ieee754_pow+0xa08>)
 800bbcc:	f7ff fbf1 	bl	800b3b2 <__ieee754_pow+0x18e>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	2400      	movs	r4, #0
 800bbd4:	f7ff fbed 	bl	800b3b2 <__ieee754_pow+0x18e>
 800bbd8:	652b82fe 	.word	0x652b82fe
 800bbdc:	3c971547 	.word	0x3c971547
 800bbe0:	3fe00000 	.word	0x3fe00000
 800bbe4:	fffffc02 	.word	0xfffffc02
 800bbe8:	fffffc01 	.word	0xfffffc01
 800bbec:	fff00000 	.word	0xfff00000
 800bbf0:	3fe62e43 	.word	0x3fe62e43
 800bbf4:	fefa39ef 	.word	0xfefa39ef
 800bbf8:	3fe62e42 	.word	0x3fe62e42
 800bbfc:	0ca86c39 	.word	0x0ca86c39
 800bc00:	be205c61 	.word	0xbe205c61
 800bc04:	72bea4d0 	.word	0x72bea4d0
 800bc08:	3e663769 	.word	0x3e663769
 800bc0c:	c5d26bf1 	.word	0xc5d26bf1
 800bc10:	3ebbbd41 	.word	0x3ebbbd41
 800bc14:	af25de2c 	.word	0xaf25de2c
 800bc18:	3f11566a 	.word	0x3f11566a
 800bc1c:	16bebd93 	.word	0x16bebd93
 800bc20:	3f66c16c 	.word	0x3f66c16c
 800bc24:	5555553e 	.word	0x5555553e
 800bc28:	3fc55555 	.word	0x3fc55555
 800bc2c:	3ff00000 	.word	0x3ff00000
 800bc30:	4090cbff 	.word	0x4090cbff
 800bc34:	3f6f3400 	.word	0x3f6f3400

0800bc38 <__ieee754_rem_pio2>:
 800bc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc3a:	004b      	lsls	r3, r1, #1
 800bc3c:	b091      	sub	sp, #68	; 0x44
 800bc3e:	085b      	lsrs	r3, r3, #1
 800bc40:	9302      	str	r3, [sp, #8]
 800bc42:	0017      	movs	r7, r2
 800bc44:	4bb6      	ldr	r3, [pc, #728]	; (800bf20 <__ieee754_rem_pio2+0x2e8>)
 800bc46:	9a02      	ldr	r2, [sp, #8]
 800bc48:	0004      	movs	r4, r0
 800bc4a:	000d      	movs	r5, r1
 800bc4c:	9109      	str	r1, [sp, #36]	; 0x24
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	dc09      	bgt.n	800bc66 <__ieee754_rem_pio2+0x2e>
 800bc52:	0002      	movs	r2, r0
 800bc54:	000b      	movs	r3, r1
 800bc56:	603a      	str	r2, [r7, #0]
 800bc58:	607b      	str	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	60ba      	str	r2, [r7, #8]
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	2600      	movs	r6, #0
 800bc64:	e025      	b.n	800bcb2 <__ieee754_rem_pio2+0x7a>
 800bc66:	4baf      	ldr	r3, [pc, #700]	; (800bf24 <__ieee754_rem_pio2+0x2ec>)
 800bc68:	9a02      	ldr	r2, [sp, #8]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	dd00      	ble.n	800bc70 <__ieee754_rem_pio2+0x38>
 800bc6e:	e06e      	b.n	800bd4e <__ieee754_rem_pio2+0x116>
 800bc70:	4ead      	ldr	r6, [pc, #692]	; (800bf28 <__ieee754_rem_pio2+0x2f0>)
 800bc72:	4aae      	ldr	r2, [pc, #696]	; (800bf2c <__ieee754_rem_pio2+0x2f4>)
 800bc74:	2d00      	cmp	r5, #0
 800bc76:	dd35      	ble.n	800bce4 <__ieee754_rem_pio2+0xac>
 800bc78:	0020      	movs	r0, r4
 800bc7a:	0029      	movs	r1, r5
 800bc7c:	4baa      	ldr	r3, [pc, #680]	; (800bf28 <__ieee754_rem_pio2+0x2f0>)
 800bc7e:	f7f6 f90b 	bl	8001e98 <__aeabi_dsub>
 800bc82:	9b02      	ldr	r3, [sp, #8]
 800bc84:	0004      	movs	r4, r0
 800bc86:	000d      	movs	r5, r1
 800bc88:	42b3      	cmp	r3, r6
 800bc8a:	d015      	beq.n	800bcb8 <__ieee754_rem_pio2+0x80>
 800bc8c:	4aa8      	ldr	r2, [pc, #672]	; (800bf30 <__ieee754_rem_pio2+0x2f8>)
 800bc8e:	4ba9      	ldr	r3, [pc, #676]	; (800bf34 <__ieee754_rem_pio2+0x2fc>)
 800bc90:	f7f6 f902 	bl	8001e98 <__aeabi_dsub>
 800bc94:	0002      	movs	r2, r0
 800bc96:	000b      	movs	r3, r1
 800bc98:	0020      	movs	r0, r4
 800bc9a:	603a      	str	r2, [r7, #0]
 800bc9c:	607b      	str	r3, [r7, #4]
 800bc9e:	0029      	movs	r1, r5
 800bca0:	f7f6 f8fa 	bl	8001e98 <__aeabi_dsub>
 800bca4:	4aa2      	ldr	r2, [pc, #648]	; (800bf30 <__ieee754_rem_pio2+0x2f8>)
 800bca6:	4ba3      	ldr	r3, [pc, #652]	; (800bf34 <__ieee754_rem_pio2+0x2fc>)
 800bca8:	f7f6 f8f6 	bl	8001e98 <__aeabi_dsub>
 800bcac:	2601      	movs	r6, #1
 800bcae:	60b8      	str	r0, [r7, #8]
 800bcb0:	60f9      	str	r1, [r7, #12]
 800bcb2:	0030      	movs	r0, r6
 800bcb4:	b011      	add	sp, #68	; 0x44
 800bcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcb8:	22d3      	movs	r2, #211	; 0xd3
 800bcba:	4b9e      	ldr	r3, [pc, #632]	; (800bf34 <__ieee754_rem_pio2+0x2fc>)
 800bcbc:	0552      	lsls	r2, r2, #21
 800bcbe:	f7f6 f8eb 	bl	8001e98 <__aeabi_dsub>
 800bcc2:	4a9d      	ldr	r2, [pc, #628]	; (800bf38 <__ieee754_rem_pio2+0x300>)
 800bcc4:	4b9d      	ldr	r3, [pc, #628]	; (800bf3c <__ieee754_rem_pio2+0x304>)
 800bcc6:	0004      	movs	r4, r0
 800bcc8:	000d      	movs	r5, r1
 800bcca:	f7f6 f8e5 	bl	8001e98 <__aeabi_dsub>
 800bcce:	0002      	movs	r2, r0
 800bcd0:	000b      	movs	r3, r1
 800bcd2:	0020      	movs	r0, r4
 800bcd4:	603a      	str	r2, [r7, #0]
 800bcd6:	607b      	str	r3, [r7, #4]
 800bcd8:	0029      	movs	r1, r5
 800bcda:	f7f6 f8dd 	bl	8001e98 <__aeabi_dsub>
 800bcde:	4a96      	ldr	r2, [pc, #600]	; (800bf38 <__ieee754_rem_pio2+0x300>)
 800bce0:	4b96      	ldr	r3, [pc, #600]	; (800bf3c <__ieee754_rem_pio2+0x304>)
 800bce2:	e7e1      	b.n	800bca8 <__ieee754_rem_pio2+0x70>
 800bce4:	0020      	movs	r0, r4
 800bce6:	0029      	movs	r1, r5
 800bce8:	4b8f      	ldr	r3, [pc, #572]	; (800bf28 <__ieee754_rem_pio2+0x2f0>)
 800bcea:	f7f4 feb9 	bl	8000a60 <__aeabi_dadd>
 800bcee:	9b02      	ldr	r3, [sp, #8]
 800bcf0:	0004      	movs	r4, r0
 800bcf2:	000d      	movs	r5, r1
 800bcf4:	42b3      	cmp	r3, r6
 800bcf6:	d014      	beq.n	800bd22 <__ieee754_rem_pio2+0xea>
 800bcf8:	4a8d      	ldr	r2, [pc, #564]	; (800bf30 <__ieee754_rem_pio2+0x2f8>)
 800bcfa:	4b8e      	ldr	r3, [pc, #568]	; (800bf34 <__ieee754_rem_pio2+0x2fc>)
 800bcfc:	f7f4 feb0 	bl	8000a60 <__aeabi_dadd>
 800bd00:	0002      	movs	r2, r0
 800bd02:	000b      	movs	r3, r1
 800bd04:	0020      	movs	r0, r4
 800bd06:	603a      	str	r2, [r7, #0]
 800bd08:	607b      	str	r3, [r7, #4]
 800bd0a:	0029      	movs	r1, r5
 800bd0c:	f7f6 f8c4 	bl	8001e98 <__aeabi_dsub>
 800bd10:	4a87      	ldr	r2, [pc, #540]	; (800bf30 <__ieee754_rem_pio2+0x2f8>)
 800bd12:	4b88      	ldr	r3, [pc, #544]	; (800bf34 <__ieee754_rem_pio2+0x2fc>)
 800bd14:	f7f4 fea4 	bl	8000a60 <__aeabi_dadd>
 800bd18:	2601      	movs	r6, #1
 800bd1a:	60b8      	str	r0, [r7, #8]
 800bd1c:	60f9      	str	r1, [r7, #12]
 800bd1e:	4276      	negs	r6, r6
 800bd20:	e7c7      	b.n	800bcb2 <__ieee754_rem_pio2+0x7a>
 800bd22:	22d3      	movs	r2, #211	; 0xd3
 800bd24:	4b83      	ldr	r3, [pc, #524]	; (800bf34 <__ieee754_rem_pio2+0x2fc>)
 800bd26:	0552      	lsls	r2, r2, #21
 800bd28:	f7f4 fe9a 	bl	8000a60 <__aeabi_dadd>
 800bd2c:	4a82      	ldr	r2, [pc, #520]	; (800bf38 <__ieee754_rem_pio2+0x300>)
 800bd2e:	4b83      	ldr	r3, [pc, #524]	; (800bf3c <__ieee754_rem_pio2+0x304>)
 800bd30:	0004      	movs	r4, r0
 800bd32:	000d      	movs	r5, r1
 800bd34:	f7f4 fe94 	bl	8000a60 <__aeabi_dadd>
 800bd38:	0002      	movs	r2, r0
 800bd3a:	000b      	movs	r3, r1
 800bd3c:	0020      	movs	r0, r4
 800bd3e:	603a      	str	r2, [r7, #0]
 800bd40:	607b      	str	r3, [r7, #4]
 800bd42:	0029      	movs	r1, r5
 800bd44:	f7f6 f8a8 	bl	8001e98 <__aeabi_dsub>
 800bd48:	4a7b      	ldr	r2, [pc, #492]	; (800bf38 <__ieee754_rem_pio2+0x300>)
 800bd4a:	4b7c      	ldr	r3, [pc, #496]	; (800bf3c <__ieee754_rem_pio2+0x304>)
 800bd4c:	e7e2      	b.n	800bd14 <__ieee754_rem_pio2+0xdc>
 800bd4e:	4b7c      	ldr	r3, [pc, #496]	; (800bf40 <__ieee754_rem_pio2+0x308>)
 800bd50:	9a02      	ldr	r2, [sp, #8]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	dd00      	ble.n	800bd58 <__ieee754_rem_pio2+0x120>
 800bd56:	e0d3      	b.n	800bf00 <__ieee754_rem_pio2+0x2c8>
 800bd58:	0020      	movs	r0, r4
 800bd5a:	0029      	movs	r1, r5
 800bd5c:	f000 f95c 	bl	800c018 <fabs>
 800bd60:	4a78      	ldr	r2, [pc, #480]	; (800bf44 <__ieee754_rem_pio2+0x30c>)
 800bd62:	4b79      	ldr	r3, [pc, #484]	; (800bf48 <__ieee754_rem_pio2+0x310>)
 800bd64:	0004      	movs	r4, r0
 800bd66:	000d      	movs	r5, r1
 800bd68:	f7f5 fdd4 	bl	8001914 <__aeabi_dmul>
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	4b77      	ldr	r3, [pc, #476]	; (800bf4c <__ieee754_rem_pio2+0x314>)
 800bd70:	f7f4 fe76 	bl	8000a60 <__aeabi_dadd>
 800bd74:	f7f6 fc30 	bl	80025d8 <__aeabi_d2iz>
 800bd78:	0006      	movs	r6, r0
 800bd7a:	f7f6 fc63 	bl	8002644 <__aeabi_i2d>
 800bd7e:	4a6b      	ldr	r2, [pc, #428]	; (800bf2c <__ieee754_rem_pio2+0x2f4>)
 800bd80:	4b69      	ldr	r3, [pc, #420]	; (800bf28 <__ieee754_rem_pio2+0x2f0>)
 800bd82:	9006      	str	r0, [sp, #24]
 800bd84:	9107      	str	r1, [sp, #28]
 800bd86:	f7f5 fdc5 	bl	8001914 <__aeabi_dmul>
 800bd8a:	0002      	movs	r2, r0
 800bd8c:	000b      	movs	r3, r1
 800bd8e:	0020      	movs	r0, r4
 800bd90:	0029      	movs	r1, r5
 800bd92:	f7f6 f881 	bl	8001e98 <__aeabi_dsub>
 800bd96:	4a66      	ldr	r2, [pc, #408]	; (800bf30 <__ieee754_rem_pio2+0x2f8>)
 800bd98:	9004      	str	r0, [sp, #16]
 800bd9a:	9105      	str	r1, [sp, #20]
 800bd9c:	9806      	ldr	r0, [sp, #24]
 800bd9e:	9907      	ldr	r1, [sp, #28]
 800bda0:	4b64      	ldr	r3, [pc, #400]	; (800bf34 <__ieee754_rem_pio2+0x2fc>)
 800bda2:	f7f5 fdb7 	bl	8001914 <__aeabi_dmul>
 800bda6:	0004      	movs	r4, r0
 800bda8:	000d      	movs	r5, r1
 800bdaa:	2e1f      	cmp	r6, #31
 800bdac:	dc0f      	bgt.n	800bdce <__ieee754_rem_pio2+0x196>
 800bdae:	4b68      	ldr	r3, [pc, #416]	; (800bf50 <__ieee754_rem_pio2+0x318>)
 800bdb0:	1e72      	subs	r2, r6, #1
 800bdb2:	0092      	lsls	r2, r2, #2
 800bdb4:	58d3      	ldr	r3, [r2, r3]
 800bdb6:	9a02      	ldr	r2, [sp, #8]
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d008      	beq.n	800bdce <__ieee754_rem_pio2+0x196>
 800bdbc:	9804      	ldr	r0, [sp, #16]
 800bdbe:	9905      	ldr	r1, [sp, #20]
 800bdc0:	0022      	movs	r2, r4
 800bdc2:	002b      	movs	r3, r5
 800bdc4:	f7f6 f868 	bl	8001e98 <__aeabi_dsub>
 800bdc8:	6038      	str	r0, [r7, #0]
 800bdca:	6079      	str	r1, [r7, #4]
 800bdcc:	e012      	b.n	800bdf4 <__ieee754_rem_pio2+0x1bc>
 800bdce:	0022      	movs	r2, r4
 800bdd0:	9804      	ldr	r0, [sp, #16]
 800bdd2:	9905      	ldr	r1, [sp, #20]
 800bdd4:	002b      	movs	r3, r5
 800bdd6:	f7f6 f85f 	bl	8001e98 <__aeabi_dsub>
 800bdda:	9b02      	ldr	r3, [sp, #8]
 800bddc:	151b      	asrs	r3, r3, #20
 800bdde:	9308      	str	r3, [sp, #32]
 800bde0:	9a08      	ldr	r2, [sp, #32]
 800bde2:	004b      	lsls	r3, r1, #1
 800bde4:	0d5b      	lsrs	r3, r3, #21
 800bde6:	1ad3      	subs	r3, r2, r3
 800bde8:	2b10      	cmp	r3, #16
 800bdea:	dc21      	bgt.n	800be30 <__ieee754_rem_pio2+0x1f8>
 800bdec:	0002      	movs	r2, r0
 800bdee:	000b      	movs	r3, r1
 800bdf0:	603a      	str	r2, [r7, #0]
 800bdf2:	607b      	str	r3, [r7, #4]
 800bdf4:	9804      	ldr	r0, [sp, #16]
 800bdf6:	9905      	ldr	r1, [sp, #20]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	9302      	str	r3, [sp, #8]
 800bdfe:	9b02      	ldr	r3, [sp, #8]
 800be00:	f7f6 f84a 	bl	8001e98 <__aeabi_dsub>
 800be04:	0022      	movs	r2, r4
 800be06:	002b      	movs	r3, r5
 800be08:	f7f6 f846 	bl	8001e98 <__aeabi_dsub>
 800be0c:	000b      	movs	r3, r1
 800be0e:	0002      	movs	r2, r0
 800be10:	60ba      	str	r2, [r7, #8]
 800be12:	60fb      	str	r3, [r7, #12]
 800be14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be16:	2b00      	cmp	r3, #0
 800be18:	db00      	blt.n	800be1c <__ieee754_rem_pio2+0x1e4>
 800be1a:	e74a      	b.n	800bcb2 <__ieee754_rem_pio2+0x7a>
 800be1c:	2380      	movs	r3, #128	; 0x80
 800be1e:	061b      	lsls	r3, r3, #24
 800be20:	469c      	mov	ip, r3
 800be22:	9c02      	ldr	r4, [sp, #8]
 800be24:	18c9      	adds	r1, r1, r3
 800be26:	4464      	add	r4, ip
 800be28:	607c      	str	r4, [r7, #4]
 800be2a:	60b8      	str	r0, [r7, #8]
 800be2c:	60f9      	str	r1, [r7, #12]
 800be2e:	e776      	b.n	800bd1e <__ieee754_rem_pio2+0xe6>
 800be30:	22d3      	movs	r2, #211	; 0xd3
 800be32:	9806      	ldr	r0, [sp, #24]
 800be34:	9907      	ldr	r1, [sp, #28]
 800be36:	4b3f      	ldr	r3, [pc, #252]	; (800bf34 <__ieee754_rem_pio2+0x2fc>)
 800be38:	0552      	lsls	r2, r2, #21
 800be3a:	f7f5 fd6b 	bl	8001914 <__aeabi_dmul>
 800be3e:	0004      	movs	r4, r0
 800be40:	000d      	movs	r5, r1
 800be42:	0002      	movs	r2, r0
 800be44:	000b      	movs	r3, r1
 800be46:	9804      	ldr	r0, [sp, #16]
 800be48:	9905      	ldr	r1, [sp, #20]
 800be4a:	f7f6 f825 	bl	8001e98 <__aeabi_dsub>
 800be4e:	0002      	movs	r2, r0
 800be50:	000b      	movs	r3, r1
 800be52:	9002      	str	r0, [sp, #8]
 800be54:	9103      	str	r1, [sp, #12]
 800be56:	9804      	ldr	r0, [sp, #16]
 800be58:	9905      	ldr	r1, [sp, #20]
 800be5a:	f7f6 f81d 	bl	8001e98 <__aeabi_dsub>
 800be5e:	0022      	movs	r2, r4
 800be60:	002b      	movs	r3, r5
 800be62:	f7f6 f819 	bl	8001e98 <__aeabi_dsub>
 800be66:	0004      	movs	r4, r0
 800be68:	000d      	movs	r5, r1
 800be6a:	9806      	ldr	r0, [sp, #24]
 800be6c:	9907      	ldr	r1, [sp, #28]
 800be6e:	4a32      	ldr	r2, [pc, #200]	; (800bf38 <__ieee754_rem_pio2+0x300>)
 800be70:	4b32      	ldr	r3, [pc, #200]	; (800bf3c <__ieee754_rem_pio2+0x304>)
 800be72:	f7f5 fd4f 	bl	8001914 <__aeabi_dmul>
 800be76:	0022      	movs	r2, r4
 800be78:	002b      	movs	r3, r5
 800be7a:	f7f6 f80d 	bl	8001e98 <__aeabi_dsub>
 800be7e:	0002      	movs	r2, r0
 800be80:	000b      	movs	r3, r1
 800be82:	0004      	movs	r4, r0
 800be84:	000d      	movs	r5, r1
 800be86:	9802      	ldr	r0, [sp, #8]
 800be88:	9903      	ldr	r1, [sp, #12]
 800be8a:	f7f6 f805 	bl	8001e98 <__aeabi_dsub>
 800be8e:	9a08      	ldr	r2, [sp, #32]
 800be90:	004b      	lsls	r3, r1, #1
 800be92:	0d5b      	lsrs	r3, r3, #21
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	2b31      	cmp	r3, #49	; 0x31
 800be98:	dc08      	bgt.n	800beac <__ieee754_rem_pio2+0x274>
 800be9a:	0002      	movs	r2, r0
 800be9c:	000b      	movs	r3, r1
 800be9e:	603a      	str	r2, [r7, #0]
 800bea0:	607b      	str	r3, [r7, #4]
 800bea2:	9a02      	ldr	r2, [sp, #8]
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	9204      	str	r2, [sp, #16]
 800bea8:	9305      	str	r3, [sp, #20]
 800beaa:	e7a3      	b.n	800bdf4 <__ieee754_rem_pio2+0x1bc>
 800beac:	22b8      	movs	r2, #184	; 0xb8
 800beae:	9806      	ldr	r0, [sp, #24]
 800beb0:	9907      	ldr	r1, [sp, #28]
 800beb2:	4b22      	ldr	r3, [pc, #136]	; (800bf3c <__ieee754_rem_pio2+0x304>)
 800beb4:	0592      	lsls	r2, r2, #22
 800beb6:	f7f5 fd2d 	bl	8001914 <__aeabi_dmul>
 800beba:	0004      	movs	r4, r0
 800bebc:	000d      	movs	r5, r1
 800bebe:	0002      	movs	r2, r0
 800bec0:	000b      	movs	r3, r1
 800bec2:	9802      	ldr	r0, [sp, #8]
 800bec4:	9903      	ldr	r1, [sp, #12]
 800bec6:	f7f5 ffe7 	bl	8001e98 <__aeabi_dsub>
 800beca:	0002      	movs	r2, r0
 800becc:	000b      	movs	r3, r1
 800bece:	9004      	str	r0, [sp, #16]
 800bed0:	9105      	str	r1, [sp, #20]
 800bed2:	9802      	ldr	r0, [sp, #8]
 800bed4:	9903      	ldr	r1, [sp, #12]
 800bed6:	f7f5 ffdf 	bl	8001e98 <__aeabi_dsub>
 800beda:	0022      	movs	r2, r4
 800bedc:	002b      	movs	r3, r5
 800bede:	f7f5 ffdb 	bl	8001e98 <__aeabi_dsub>
 800bee2:	0004      	movs	r4, r0
 800bee4:	000d      	movs	r5, r1
 800bee6:	9806      	ldr	r0, [sp, #24]
 800bee8:	9907      	ldr	r1, [sp, #28]
 800beea:	4a1a      	ldr	r2, [pc, #104]	; (800bf54 <__ieee754_rem_pio2+0x31c>)
 800beec:	4b1a      	ldr	r3, [pc, #104]	; (800bf58 <__ieee754_rem_pio2+0x320>)
 800beee:	f7f5 fd11 	bl	8001914 <__aeabi_dmul>
 800bef2:	0022      	movs	r2, r4
 800bef4:	002b      	movs	r3, r5
 800bef6:	f7f5 ffcf 	bl	8001e98 <__aeabi_dsub>
 800befa:	0004      	movs	r4, r0
 800befc:	000d      	movs	r5, r1
 800befe:	e75d      	b.n	800bdbc <__ieee754_rem_pio2+0x184>
 800bf00:	4b16      	ldr	r3, [pc, #88]	; (800bf5c <__ieee754_rem_pio2+0x324>)
 800bf02:	9a02      	ldr	r2, [sp, #8]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	dd2b      	ble.n	800bf60 <__ieee754_rem_pio2+0x328>
 800bf08:	0022      	movs	r2, r4
 800bf0a:	002b      	movs	r3, r5
 800bf0c:	0020      	movs	r0, r4
 800bf0e:	0029      	movs	r1, r5
 800bf10:	f7f5 ffc2 	bl	8001e98 <__aeabi_dsub>
 800bf14:	60b8      	str	r0, [r7, #8]
 800bf16:	60f9      	str	r1, [r7, #12]
 800bf18:	6038      	str	r0, [r7, #0]
 800bf1a:	6079      	str	r1, [r7, #4]
 800bf1c:	e6a1      	b.n	800bc62 <__ieee754_rem_pio2+0x2a>
 800bf1e:	46c0      	nop			; (mov r8, r8)
 800bf20:	3fe921fb 	.word	0x3fe921fb
 800bf24:	4002d97b 	.word	0x4002d97b
 800bf28:	3ff921fb 	.word	0x3ff921fb
 800bf2c:	54400000 	.word	0x54400000
 800bf30:	1a626331 	.word	0x1a626331
 800bf34:	3dd0b461 	.word	0x3dd0b461
 800bf38:	2e037073 	.word	0x2e037073
 800bf3c:	3ba3198a 	.word	0x3ba3198a
 800bf40:	413921fb 	.word	0x413921fb
 800bf44:	6dc9c883 	.word	0x6dc9c883
 800bf48:	3fe45f30 	.word	0x3fe45f30
 800bf4c:	3fe00000 	.word	0x3fe00000
 800bf50:	0800d130 	.word	0x0800d130
 800bf54:	252049c1 	.word	0x252049c1
 800bf58:	397b839a 	.word	0x397b839a
 800bf5c:	7fefffff 	.word	0x7fefffff
 800bf60:	9a02      	ldr	r2, [sp, #8]
 800bf62:	0020      	movs	r0, r4
 800bf64:	1516      	asrs	r6, r2, #20
 800bf66:	4a29      	ldr	r2, [pc, #164]	; (800c00c <__ieee754_rem_pio2+0x3d4>)
 800bf68:	18b6      	adds	r6, r6, r2
 800bf6a:	9a02      	ldr	r2, [sp, #8]
 800bf6c:	0533      	lsls	r3, r6, #20
 800bf6e:	1ad5      	subs	r5, r2, r3
 800bf70:	0029      	movs	r1, r5
 800bf72:	f7f6 fb31 	bl	80025d8 <__aeabi_d2iz>
 800bf76:	f7f6 fb65 	bl	8002644 <__aeabi_i2d>
 800bf7a:	0002      	movs	r2, r0
 800bf7c:	000b      	movs	r3, r1
 800bf7e:	0020      	movs	r0, r4
 800bf80:	0029      	movs	r1, r5
 800bf82:	920a      	str	r2, [sp, #40]	; 0x28
 800bf84:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf86:	f7f5 ff87 	bl	8001e98 <__aeabi_dsub>
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	4b20      	ldr	r3, [pc, #128]	; (800c010 <__ieee754_rem_pio2+0x3d8>)
 800bf8e:	f7f5 fcc1 	bl	8001914 <__aeabi_dmul>
 800bf92:	000d      	movs	r5, r1
 800bf94:	0004      	movs	r4, r0
 800bf96:	f7f6 fb1f 	bl	80025d8 <__aeabi_d2iz>
 800bf9a:	f7f6 fb53 	bl	8002644 <__aeabi_i2d>
 800bf9e:	0002      	movs	r2, r0
 800bfa0:	000b      	movs	r3, r1
 800bfa2:	0020      	movs	r0, r4
 800bfa4:	0029      	movs	r1, r5
 800bfa6:	920c      	str	r2, [sp, #48]	; 0x30
 800bfa8:	930d      	str	r3, [sp, #52]	; 0x34
 800bfaa:	f7f5 ff75 	bl	8001e98 <__aeabi_dsub>
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4b17      	ldr	r3, [pc, #92]	; (800c010 <__ieee754_rem_pio2+0x3d8>)
 800bfb2:	f7f5 fcaf 	bl	8001914 <__aeabi_dmul>
 800bfb6:	2503      	movs	r5, #3
 800bfb8:	900e      	str	r0, [sp, #56]	; 0x38
 800bfba:	910f      	str	r1, [sp, #60]	; 0x3c
 800bfbc:	ac0a      	add	r4, sp, #40	; 0x28
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	6920      	ldr	r0, [r4, #16]
 800bfc2:	6961      	ldr	r1, [r4, #20]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9502      	str	r5, [sp, #8]
 800bfc8:	3c08      	subs	r4, #8
 800bfca:	3d01      	subs	r5, #1
 800bfcc:	f7f4 fa3a 	bl	8000444 <__aeabi_dcmpeq>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d1f4      	bne.n	800bfbe <__ieee754_rem_pio2+0x386>
 800bfd4:	4b0f      	ldr	r3, [pc, #60]	; (800c014 <__ieee754_rem_pio2+0x3dc>)
 800bfd6:	0032      	movs	r2, r6
 800bfd8:	9301      	str	r3, [sp, #4]
 800bfda:	2302      	movs	r3, #2
 800bfdc:	0039      	movs	r1, r7
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	a80a      	add	r0, sp, #40	; 0x28
 800bfe2:	9b02      	ldr	r3, [sp, #8]
 800bfe4:	f000 f9a4 	bl	800c330 <__kernel_rem_pio2>
 800bfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfea:	0006      	movs	r6, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	db00      	blt.n	800bff2 <__ieee754_rem_pio2+0x3ba>
 800bff0:	e65f      	b.n	800bcb2 <__ieee754_rem_pio2+0x7a>
 800bff2:	2080      	movs	r0, #128	; 0x80
 800bff4:	6879      	ldr	r1, [r7, #4]
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	0600      	lsls	r0, r0, #24
 800bffa:	180b      	adds	r3, r1, r0
 800bffc:	68f9      	ldr	r1, [r7, #12]
 800bffe:	603a      	str	r2, [r7, #0]
 800c000:	607b      	str	r3, [r7, #4]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	180b      	adds	r3, r1, r0
 800c006:	60ba      	str	r2, [r7, #8]
 800c008:	60fb      	str	r3, [r7, #12]
 800c00a:	e688      	b.n	800bd1e <__ieee754_rem_pio2+0xe6>
 800c00c:	fffffbea 	.word	0xfffffbea
 800c010:	41700000 	.word	0x41700000
 800c014:	0800d1b0 	.word	0x0800d1b0

0800c018 <fabs>:
 800c018:	0049      	lsls	r1, r1, #1
 800c01a:	084b      	lsrs	r3, r1, #1
 800c01c:	0019      	movs	r1, r3
 800c01e:	4770      	bx	lr

0800c020 <scalbn>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	0014      	movs	r4, r2
 800c024:	004a      	lsls	r2, r1, #1
 800c026:	000b      	movs	r3, r1
 800c028:	0d52      	lsrs	r2, r2, #21
 800c02a:	d10f      	bne.n	800c04c <scalbn+0x2c>
 800c02c:	004b      	lsls	r3, r1, #1
 800c02e:	085b      	lsrs	r3, r3, #1
 800c030:	4303      	orrs	r3, r0
 800c032:	d011      	beq.n	800c058 <scalbn+0x38>
 800c034:	4b22      	ldr	r3, [pc, #136]	; (800c0c0 <scalbn+0xa0>)
 800c036:	2200      	movs	r2, #0
 800c038:	f7f5 fc6c 	bl	8001914 <__aeabi_dmul>
 800c03c:	4b21      	ldr	r3, [pc, #132]	; (800c0c4 <scalbn+0xa4>)
 800c03e:	429c      	cmp	r4, r3
 800c040:	da0b      	bge.n	800c05a <scalbn+0x3a>
 800c042:	4a21      	ldr	r2, [pc, #132]	; (800c0c8 <scalbn+0xa8>)
 800c044:	4b21      	ldr	r3, [pc, #132]	; (800c0cc <scalbn+0xac>)
 800c046:	f7f5 fc65 	bl	8001914 <__aeabi_dmul>
 800c04a:	e005      	b.n	800c058 <scalbn+0x38>
 800c04c:	4d20      	ldr	r5, [pc, #128]	; (800c0d0 <scalbn+0xb0>)
 800c04e:	42aa      	cmp	r2, r5
 800c050:	d107      	bne.n	800c062 <scalbn+0x42>
 800c052:	0002      	movs	r2, r0
 800c054:	f7f4 fd04 	bl	8000a60 <__aeabi_dadd>
 800c058:	bd70      	pop	{r4, r5, r6, pc}
 800c05a:	000b      	movs	r3, r1
 800c05c:	004a      	lsls	r2, r1, #1
 800c05e:	0d52      	lsrs	r2, r2, #21
 800c060:	3a36      	subs	r2, #54	; 0x36
 800c062:	4d1c      	ldr	r5, [pc, #112]	; (800c0d4 <scalbn+0xb4>)
 800c064:	42ac      	cmp	r4, r5
 800c066:	dd0a      	ble.n	800c07e <scalbn+0x5e>
 800c068:	4c1b      	ldr	r4, [pc, #108]	; (800c0d8 <scalbn+0xb8>)
 800c06a:	4d1c      	ldr	r5, [pc, #112]	; (800c0dc <scalbn+0xbc>)
 800c06c:	2900      	cmp	r1, #0
 800c06e:	da01      	bge.n	800c074 <scalbn+0x54>
 800c070:	4c19      	ldr	r4, [pc, #100]	; (800c0d8 <scalbn+0xb8>)
 800c072:	4d1b      	ldr	r5, [pc, #108]	; (800c0e0 <scalbn+0xc0>)
 800c074:	4a18      	ldr	r2, [pc, #96]	; (800c0d8 <scalbn+0xb8>)
 800c076:	4b19      	ldr	r3, [pc, #100]	; (800c0dc <scalbn+0xbc>)
 800c078:	0020      	movs	r0, r4
 800c07a:	0029      	movs	r1, r5
 800c07c:	e7e3      	b.n	800c046 <scalbn+0x26>
 800c07e:	18a2      	adds	r2, r4, r2
 800c080:	4c18      	ldr	r4, [pc, #96]	; (800c0e4 <scalbn+0xc4>)
 800c082:	42a2      	cmp	r2, r4
 800c084:	dcf0      	bgt.n	800c068 <scalbn+0x48>
 800c086:	2a00      	cmp	r2, #0
 800c088:	dd05      	ble.n	800c096 <scalbn+0x76>
 800c08a:	4c17      	ldr	r4, [pc, #92]	; (800c0e8 <scalbn+0xc8>)
 800c08c:	0512      	lsls	r2, r2, #20
 800c08e:	4023      	ands	r3, r4
 800c090:	4313      	orrs	r3, r2
 800c092:	0019      	movs	r1, r3
 800c094:	e7e0      	b.n	800c058 <scalbn+0x38>
 800c096:	0014      	movs	r4, r2
 800c098:	3435      	adds	r4, #53	; 0x35
 800c09a:	da08      	bge.n	800c0ae <scalbn+0x8e>
 800c09c:	4c0a      	ldr	r4, [pc, #40]	; (800c0c8 <scalbn+0xa8>)
 800c09e:	4d0b      	ldr	r5, [pc, #44]	; (800c0cc <scalbn+0xac>)
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	da01      	bge.n	800c0a8 <scalbn+0x88>
 800c0a4:	4c08      	ldr	r4, [pc, #32]	; (800c0c8 <scalbn+0xa8>)
 800c0a6:	4d11      	ldr	r5, [pc, #68]	; (800c0ec <scalbn+0xcc>)
 800c0a8:	4a07      	ldr	r2, [pc, #28]	; (800c0c8 <scalbn+0xa8>)
 800c0aa:	4b08      	ldr	r3, [pc, #32]	; (800c0cc <scalbn+0xac>)
 800c0ac:	e7e4      	b.n	800c078 <scalbn+0x58>
 800c0ae:	4c0e      	ldr	r4, [pc, #56]	; (800c0e8 <scalbn+0xc8>)
 800c0b0:	3236      	adds	r2, #54	; 0x36
 800c0b2:	4023      	ands	r3, r4
 800c0b4:	0512      	lsls	r2, r2, #20
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	0011      	movs	r1, r2
 800c0ba:	4b0d      	ldr	r3, [pc, #52]	; (800c0f0 <scalbn+0xd0>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	e7c2      	b.n	800c046 <scalbn+0x26>
 800c0c0:	43500000 	.word	0x43500000
 800c0c4:	ffff3cb0 	.word	0xffff3cb0
 800c0c8:	c2f8f359 	.word	0xc2f8f359
 800c0cc:	01a56e1f 	.word	0x01a56e1f
 800c0d0:	000007ff 	.word	0x000007ff
 800c0d4:	0000c350 	.word	0x0000c350
 800c0d8:	8800759c 	.word	0x8800759c
 800c0dc:	7e37e43c 	.word	0x7e37e43c
 800c0e0:	fe37e43c 	.word	0xfe37e43c
 800c0e4:	000007fe 	.word	0x000007fe
 800c0e8:	800fffff 	.word	0x800fffff
 800c0ec:	81a56e1f 	.word	0x81a56e1f
 800c0f0:	3c900000 	.word	0x3c900000

0800c0f4 <with_errno>:
 800c0f4:	b570      	push	{r4, r5, r6, lr}
 800c0f6:	000d      	movs	r5, r1
 800c0f8:	0016      	movs	r6, r2
 800c0fa:	0004      	movs	r4, r0
 800c0fc:	f7fc feea 	bl	8008ed4 <__errno>
 800c100:	0029      	movs	r1, r5
 800c102:	6006      	str	r6, [r0, #0]
 800c104:	0020      	movs	r0, r4
 800c106:	bd70      	pop	{r4, r5, r6, pc}

0800c108 <xflow>:
 800c108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c10a:	0015      	movs	r5, r2
 800c10c:	001c      	movs	r4, r3
 800c10e:	2800      	cmp	r0, #0
 800c110:	d010      	beq.n	800c134 <xflow+0x2c>
 800c112:	2380      	movs	r3, #128	; 0x80
 800c114:	0010      	movs	r0, r2
 800c116:	061b      	lsls	r3, r3, #24
 800c118:	18e1      	adds	r1, r4, r3
 800c11a:	9000      	str	r0, [sp, #0]
 800c11c:	9101      	str	r1, [sp, #4]
 800c11e:	9a00      	ldr	r2, [sp, #0]
 800c120:	9b01      	ldr	r3, [sp, #4]
 800c122:	0028      	movs	r0, r5
 800c124:	0021      	movs	r1, r4
 800c126:	f7f5 fbf5 	bl	8001914 <__aeabi_dmul>
 800c12a:	2222      	movs	r2, #34	; 0x22
 800c12c:	f7ff ffe2 	bl	800c0f4 <with_errno>
 800c130:	b003      	add	sp, #12
 800c132:	bd30      	pop	{r4, r5, pc}
 800c134:	0010      	movs	r0, r2
 800c136:	0019      	movs	r1, r3
 800c138:	e7ef      	b.n	800c11a <xflow+0x12>

0800c13a <__math_uflow>:
 800c13a:	2380      	movs	r3, #128	; 0x80
 800c13c:	b510      	push	{r4, lr}
 800c13e:	2200      	movs	r2, #0
 800c140:	055b      	lsls	r3, r3, #21
 800c142:	f7ff ffe1 	bl	800c108 <xflow>
 800c146:	bd10      	pop	{r4, pc}

0800c148 <__math_oflow>:
 800c148:	23e0      	movs	r3, #224	; 0xe0
 800c14a:	b510      	push	{r4, lr}
 800c14c:	2200      	movs	r2, #0
 800c14e:	05db      	lsls	r3, r3, #23
 800c150:	f7ff ffda 	bl	800c108 <xflow>
 800c154:	bd10      	pop	{r4, pc}
	...

0800c158 <__ieee754_sqrt>:
 800c158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c15a:	000a      	movs	r2, r1
 800c15c:	000c      	movs	r4, r1
 800c15e:	496f      	ldr	r1, [pc, #444]	; (800c31c <__ieee754_sqrt+0x1c4>)
 800c160:	0005      	movs	r5, r0
 800c162:	0003      	movs	r3, r0
 800c164:	0008      	movs	r0, r1
 800c166:	b087      	sub	sp, #28
 800c168:	4020      	ands	r0, r4
 800c16a:	4288      	cmp	r0, r1
 800c16c:	d111      	bne.n	800c192 <__ieee754_sqrt+0x3a>
 800c16e:	002a      	movs	r2, r5
 800c170:	0023      	movs	r3, r4
 800c172:	0028      	movs	r0, r5
 800c174:	0021      	movs	r1, r4
 800c176:	f7f5 fbcd 	bl	8001914 <__aeabi_dmul>
 800c17a:	0002      	movs	r2, r0
 800c17c:	000b      	movs	r3, r1
 800c17e:	0028      	movs	r0, r5
 800c180:	0021      	movs	r1, r4
 800c182:	f7f4 fc6d 	bl	8000a60 <__aeabi_dadd>
 800c186:	0005      	movs	r5, r0
 800c188:	000c      	movs	r4, r1
 800c18a:	0028      	movs	r0, r5
 800c18c:	0021      	movs	r1, r4
 800c18e:	b007      	add	sp, #28
 800c190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c192:	2c00      	cmp	r4, #0
 800c194:	dc12      	bgt.n	800c1bc <__ieee754_sqrt+0x64>
 800c196:	0061      	lsls	r1, r4, #1
 800c198:	0849      	lsrs	r1, r1, #1
 800c19a:	4329      	orrs	r1, r5
 800c19c:	d0f5      	beq.n	800c18a <__ieee754_sqrt+0x32>
 800c19e:	2100      	movs	r1, #0
 800c1a0:	428c      	cmp	r4, r1
 800c1a2:	d100      	bne.n	800c1a6 <__ieee754_sqrt+0x4e>
 800c1a4:	e09f      	b.n	800c2e6 <__ieee754_sqrt+0x18e>
 800c1a6:	002a      	movs	r2, r5
 800c1a8:	0023      	movs	r3, r4
 800c1aa:	0028      	movs	r0, r5
 800c1ac:	0021      	movs	r1, r4
 800c1ae:	f7f5 fe73 	bl	8001e98 <__aeabi_dsub>
 800c1b2:	0002      	movs	r2, r0
 800c1b4:	000b      	movs	r3, r1
 800c1b6:	f7f4 ffb3 	bl	8001120 <__aeabi_ddiv>
 800c1ba:	e7e4      	b.n	800c186 <__ieee754_sqrt+0x2e>
 800c1bc:	1521      	asrs	r1, r4, #20
 800c1be:	d100      	bne.n	800c1c2 <__ieee754_sqrt+0x6a>
 800c1c0:	e091      	b.n	800c2e6 <__ieee754_sqrt+0x18e>
 800c1c2:	4857      	ldr	r0, [pc, #348]	; (800c320 <__ieee754_sqrt+0x1c8>)
 800c1c4:	0312      	lsls	r2, r2, #12
 800c1c6:	180c      	adds	r4, r1, r0
 800c1c8:	2080      	movs	r0, #128	; 0x80
 800c1ca:	0b12      	lsrs	r2, r2, #12
 800c1cc:	0340      	lsls	r0, r0, #13
 800c1ce:	4310      	orrs	r0, r2
 800c1d0:	07c9      	lsls	r1, r1, #31
 800c1d2:	d403      	bmi.n	800c1dc <__ieee754_sqrt+0x84>
 800c1d4:	0fda      	lsrs	r2, r3, #31
 800c1d6:	0040      	lsls	r0, r0, #1
 800c1d8:	1810      	adds	r0, r2, r0
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	2500      	movs	r5, #0
 800c1de:	1062      	asrs	r2, r4, #1
 800c1e0:	0040      	lsls	r0, r0, #1
 800c1e2:	2480      	movs	r4, #128	; 0x80
 800c1e4:	9205      	str	r2, [sp, #20]
 800c1e6:	0fda      	lsrs	r2, r3, #31
 800c1e8:	1812      	adds	r2, r2, r0
 800c1ea:	0029      	movs	r1, r5
 800c1ec:	2016      	movs	r0, #22
 800c1ee:	005b      	lsls	r3, r3, #1
 800c1f0:	03a4      	lsls	r4, r4, #14
 800c1f2:	190e      	adds	r6, r1, r4
 800c1f4:	4296      	cmp	r6, r2
 800c1f6:	dc02      	bgt.n	800c1fe <__ieee754_sqrt+0xa6>
 800c1f8:	1931      	adds	r1, r6, r4
 800c1fa:	1b92      	subs	r2, r2, r6
 800c1fc:	192d      	adds	r5, r5, r4
 800c1fe:	0fde      	lsrs	r6, r3, #31
 800c200:	0052      	lsls	r2, r2, #1
 800c202:	3801      	subs	r0, #1
 800c204:	18b2      	adds	r2, r6, r2
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	0864      	lsrs	r4, r4, #1
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d1f1      	bne.n	800c1f2 <__ieee754_sqrt+0x9a>
 800c20e:	2620      	movs	r6, #32
 800c210:	2780      	movs	r7, #128	; 0x80
 800c212:	0004      	movs	r4, r0
 800c214:	9604      	str	r6, [sp, #16]
 800c216:	063f      	lsls	r7, r7, #24
 800c218:	183e      	adds	r6, r7, r0
 800c21a:	46b4      	mov	ip, r6
 800c21c:	428a      	cmp	r2, r1
 800c21e:	dc02      	bgt.n	800c226 <__ieee754_sqrt+0xce>
 800c220:	d114      	bne.n	800c24c <__ieee754_sqrt+0xf4>
 800c222:	429e      	cmp	r6, r3
 800c224:	d812      	bhi.n	800c24c <__ieee754_sqrt+0xf4>
 800c226:	4660      	mov	r0, ip
 800c228:	4666      	mov	r6, ip
 800c22a:	19c0      	adds	r0, r0, r7
 800c22c:	9100      	str	r1, [sp, #0]
 800c22e:	2e00      	cmp	r6, #0
 800c230:	da03      	bge.n	800c23a <__ieee754_sqrt+0xe2>
 800c232:	43c6      	mvns	r6, r0
 800c234:	0ff6      	lsrs	r6, r6, #31
 800c236:	198e      	adds	r6, r1, r6
 800c238:	9600      	str	r6, [sp, #0]
 800c23a:	1a52      	subs	r2, r2, r1
 800c23c:	4563      	cmp	r3, ip
 800c23e:	4189      	sbcs	r1, r1
 800c240:	4249      	negs	r1, r1
 800c242:	1a52      	subs	r2, r2, r1
 800c244:	4661      	mov	r1, ip
 800c246:	1a5b      	subs	r3, r3, r1
 800c248:	9900      	ldr	r1, [sp, #0]
 800c24a:	19e4      	adds	r4, r4, r7
 800c24c:	0fde      	lsrs	r6, r3, #31
 800c24e:	0052      	lsls	r2, r2, #1
 800c250:	18b2      	adds	r2, r6, r2
 800c252:	9e04      	ldr	r6, [sp, #16]
 800c254:	005b      	lsls	r3, r3, #1
 800c256:	3e01      	subs	r6, #1
 800c258:	087f      	lsrs	r7, r7, #1
 800c25a:	9604      	str	r6, [sp, #16]
 800c25c:	2e00      	cmp	r6, #0
 800c25e:	d1db      	bne.n	800c218 <__ieee754_sqrt+0xc0>
 800c260:	431a      	orrs	r2, r3
 800c262:	d01f      	beq.n	800c2a4 <__ieee754_sqrt+0x14c>
 800c264:	4e2f      	ldr	r6, [pc, #188]	; (800c324 <__ieee754_sqrt+0x1cc>)
 800c266:	4f30      	ldr	r7, [pc, #192]	; (800c328 <__ieee754_sqrt+0x1d0>)
 800c268:	6830      	ldr	r0, [r6, #0]
 800c26a:	6871      	ldr	r1, [r6, #4]
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	9200      	str	r2, [sp, #0]
 800c272:	9301      	str	r3, [sp, #4]
 800c274:	6832      	ldr	r2, [r6, #0]
 800c276:	6873      	ldr	r3, [r6, #4]
 800c278:	9202      	str	r2, [sp, #8]
 800c27a:	9303      	str	r3, [sp, #12]
 800c27c:	9a00      	ldr	r2, [sp, #0]
 800c27e:	9b01      	ldr	r3, [sp, #4]
 800c280:	f7f5 fe0a 	bl	8001e98 <__aeabi_dsub>
 800c284:	0002      	movs	r2, r0
 800c286:	000b      	movs	r3, r1
 800c288:	9802      	ldr	r0, [sp, #8]
 800c28a:	9903      	ldr	r1, [sp, #12]
 800c28c:	f7f4 f8ea 	bl	8000464 <__aeabi_dcmple>
 800c290:	2800      	cmp	r0, #0
 800c292:	d007      	beq.n	800c2a4 <__ieee754_sqrt+0x14c>
 800c294:	6830      	ldr	r0, [r6, #0]
 800c296:	6871      	ldr	r1, [r6, #4]
 800c298:	683a      	ldr	r2, [r7, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	1c67      	adds	r7, r4, #1
 800c29e:	d127      	bne.n	800c2f0 <__ieee754_sqrt+0x198>
 800c2a0:	9c04      	ldr	r4, [sp, #16]
 800c2a2:	3501      	adds	r5, #1
 800c2a4:	4b21      	ldr	r3, [pc, #132]	; (800c32c <__ieee754_sqrt+0x1d4>)
 800c2a6:	1069      	asrs	r1, r5, #1
 800c2a8:	18c9      	adds	r1, r1, r3
 800c2aa:	0864      	lsrs	r4, r4, #1
 800c2ac:	07ed      	lsls	r5, r5, #31
 800c2ae:	d502      	bpl.n	800c2b6 <__ieee754_sqrt+0x15e>
 800c2b0:	2380      	movs	r3, #128	; 0x80
 800c2b2:	061b      	lsls	r3, r3, #24
 800c2b4:	431c      	orrs	r4, r3
 800c2b6:	9b05      	ldr	r3, [sp, #20]
 800c2b8:	0025      	movs	r5, r4
 800c2ba:	0518      	lsls	r0, r3, #20
 800c2bc:	1843      	adds	r3, r0, r1
 800c2be:	001c      	movs	r4, r3
 800c2c0:	e763      	b.n	800c18a <__ieee754_sqrt+0x32>
 800c2c2:	0ada      	lsrs	r2, r3, #11
 800c2c4:	3815      	subs	r0, #21
 800c2c6:	055b      	lsls	r3, r3, #21
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	d0fa      	beq.n	800c2c2 <__ieee754_sqrt+0x16a>
 800c2cc:	2480      	movs	r4, #128	; 0x80
 800c2ce:	0364      	lsls	r4, r4, #13
 800c2d0:	4222      	tst	r2, r4
 800c2d2:	d00a      	beq.n	800c2ea <__ieee754_sqrt+0x192>
 800c2d4:	2420      	movs	r4, #32
 800c2d6:	001e      	movs	r6, r3
 800c2d8:	1a64      	subs	r4, r4, r1
 800c2da:	40e6      	lsrs	r6, r4
 800c2dc:	1e4d      	subs	r5, r1, #1
 800c2de:	408b      	lsls	r3, r1
 800c2e0:	4332      	orrs	r2, r6
 800c2e2:	1b41      	subs	r1, r0, r5
 800c2e4:	e76d      	b.n	800c1c2 <__ieee754_sqrt+0x6a>
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	e7ee      	b.n	800c2c8 <__ieee754_sqrt+0x170>
 800c2ea:	0052      	lsls	r2, r2, #1
 800c2ec:	3101      	adds	r1, #1
 800c2ee:	e7ef      	b.n	800c2d0 <__ieee754_sqrt+0x178>
 800c2f0:	f7f4 fbb6 	bl	8000a60 <__aeabi_dadd>
 800c2f4:	6877      	ldr	r7, [r6, #4]
 800c2f6:	6836      	ldr	r6, [r6, #0]
 800c2f8:	0002      	movs	r2, r0
 800c2fa:	000b      	movs	r3, r1
 800c2fc:	0030      	movs	r0, r6
 800c2fe:	0039      	movs	r1, r7
 800c300:	f7f4 f8a6 	bl	8000450 <__aeabi_dcmplt>
 800c304:	2800      	cmp	r0, #0
 800c306:	d004      	beq.n	800c312 <__ieee754_sqrt+0x1ba>
 800c308:	3402      	adds	r4, #2
 800c30a:	4263      	negs	r3, r4
 800c30c:	4163      	adcs	r3, r4
 800c30e:	18ed      	adds	r5, r5, r3
 800c310:	e7c8      	b.n	800c2a4 <__ieee754_sqrt+0x14c>
 800c312:	2301      	movs	r3, #1
 800c314:	3401      	adds	r4, #1
 800c316:	439c      	bics	r4, r3
 800c318:	e7c4      	b.n	800c2a4 <__ieee754_sqrt+0x14c>
 800c31a:	46c0      	nop			; (mov r8, r8)
 800c31c:	7ff00000 	.word	0x7ff00000
 800c320:	fffffc01 	.word	0xfffffc01
 800c324:	20000220 	.word	0x20000220
 800c328:	20000228 	.word	0x20000228
 800c32c:	3fe00000 	.word	0x3fe00000

0800c330 <__kernel_rem_pio2>:
 800c330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c332:	4ccb      	ldr	r4, [pc, #812]	; (800c660 <__kernel_rem_pio2+0x330>)
 800c334:	44a5      	add	sp, r4
 800c336:	0014      	movs	r4, r2
 800c338:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800c33a:	930c      	str	r3, [sp, #48]	; 0x30
 800c33c:	4bc9      	ldr	r3, [pc, #804]	; (800c664 <__kernel_rem_pio2+0x334>)
 800c33e:	0092      	lsls	r2, r2, #2
 800c340:	58d3      	ldr	r3, [r2, r3]
 800c342:	900d      	str	r0, [sp, #52]	; 0x34
 800c344:	9308      	str	r3, [sp, #32]
 800c346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c348:	9106      	str	r1, [sp, #24]
 800c34a:	3b01      	subs	r3, #1
 800c34c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c34e:	2300      	movs	r3, #0
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	0023      	movs	r3, r4
 800c354:	3314      	adds	r3, #20
 800c356:	db04      	blt.n	800c362 <__kernel_rem_pio2+0x32>
 800c358:	2118      	movs	r1, #24
 800c35a:	1ee0      	subs	r0, r4, #3
 800c35c:	f7f3 ff76 	bl	800024c <__divsi3>
 800c360:	9000      	str	r0, [sp, #0]
 800c362:	9b00      	ldr	r3, [sp, #0]
 800c364:	ae24      	add	r6, sp, #144	; 0x90
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	2318      	movs	r3, #24
 800c36a:	425b      	negs	r3, r3
 800c36c:	4353      	muls	r3, r2
 800c36e:	191b      	adds	r3, r3, r4
 800c370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c372:	9302      	str	r3, [sp, #8]
 800c374:	9b00      	ldr	r3, [sp, #0]
 800c376:	1a9d      	subs	r5, r3, r2
 800c378:	002c      	movs	r4, r5
 800c37a:	9b08      	ldr	r3, [sp, #32]
 800c37c:	189f      	adds	r7, r3, r2
 800c37e:	1b63      	subs	r3, r4, r5
 800c380:	429f      	cmp	r7, r3
 800c382:	da0f      	bge.n	800c3a4 <__kernel_rem_pio2+0x74>
 800c384:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c386:	af74      	add	r7, sp, #464	; 0x1d0
 800c388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c38a:	9a08      	ldr	r2, [sp, #32]
 800c38c:	1af3      	subs	r3, r6, r3
 800c38e:	429a      	cmp	r2, r3
 800c390:	db30      	blt.n	800c3f4 <__kernel_rem_pio2+0xc4>
 800c392:	ab24      	add	r3, sp, #144	; 0x90
 800c394:	00f4      	lsls	r4, r6, #3
 800c396:	2200      	movs	r2, #0
 800c398:	18e4      	adds	r4, r4, r3
 800c39a:	2300      	movs	r3, #0
 800c39c:	2500      	movs	r5, #0
 800c39e:	9204      	str	r2, [sp, #16]
 800c3a0:	9305      	str	r3, [sp, #20]
 800c3a2:	e01e      	b.n	800c3e2 <__kernel_rem_pio2+0xb2>
 800c3a4:	2c00      	cmp	r4, #0
 800c3a6:	db07      	blt.n	800c3b8 <__kernel_rem_pio2+0x88>
 800c3a8:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 800c3aa:	00a3      	lsls	r3, r4, #2
 800c3ac:	58d0      	ldr	r0, [r2, r3]
 800c3ae:	f7f6 f949 	bl	8002644 <__aeabi_i2d>
 800c3b2:	c603      	stmia	r6!, {r0, r1}
 800c3b4:	3401      	adds	r4, #1
 800c3b6:	e7e2      	b.n	800c37e <__kernel_rem_pio2+0x4e>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	e7f9      	b.n	800c3b2 <__kernel_rem_pio2+0x82>
 800c3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c0:	00e9      	lsls	r1, r5, #3
 800c3c2:	1859      	adds	r1, r3, r1
 800c3c4:	6808      	ldr	r0, [r1, #0]
 800c3c6:	6849      	ldr	r1, [r1, #4]
 800c3c8:	6822      	ldr	r2, [r4, #0]
 800c3ca:	6863      	ldr	r3, [r4, #4]
 800c3cc:	f7f5 faa2 	bl	8001914 <__aeabi_dmul>
 800c3d0:	0002      	movs	r2, r0
 800c3d2:	000b      	movs	r3, r1
 800c3d4:	9804      	ldr	r0, [sp, #16]
 800c3d6:	9905      	ldr	r1, [sp, #20]
 800c3d8:	f7f4 fb42 	bl	8000a60 <__aeabi_dadd>
 800c3dc:	9004      	str	r0, [sp, #16]
 800c3de:	9105      	str	r1, [sp, #20]
 800c3e0:	3501      	adds	r5, #1
 800c3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e4:	3c08      	subs	r4, #8
 800c3e6:	429d      	cmp	r5, r3
 800c3e8:	dde9      	ble.n	800c3be <__kernel_rem_pio2+0x8e>
 800c3ea:	9b04      	ldr	r3, [sp, #16]
 800c3ec:	9c05      	ldr	r4, [sp, #20]
 800c3ee:	3601      	adds	r6, #1
 800c3f0:	c718      	stmia	r7!, {r3, r4}
 800c3f2:	e7c9      	b.n	800c388 <__kernel_rem_pio2+0x58>
 800c3f4:	9b08      	ldr	r3, [sp, #32]
 800c3f6:	aa10      	add	r2, sp, #64	; 0x40
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	189b      	adds	r3, r3, r2
 800c3fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3fe:	9b00      	ldr	r3, [sp, #0]
 800c400:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	18d3      	adds	r3, r2, r3
 800c406:	930e      	str	r3, [sp, #56]	; 0x38
 800c408:	9b08      	ldr	r3, [sp, #32]
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	9b04      	ldr	r3, [sp, #16]
 800c40e:	aa74      	add	r2, sp, #464	; 0x1d0
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	18d3      	adds	r3, r2, r3
 800c414:	681c      	ldr	r4, [r3, #0]
 800c416:	685d      	ldr	r5, [r3, #4]
 800c418:	ab10      	add	r3, sp, #64	; 0x40
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	930a      	str	r3, [sp, #40]	; 0x28
 800c41e:	9b04      	ldr	r3, [sp, #16]
 800c420:	9307      	str	r3, [sp, #28]
 800c422:	9b07      	ldr	r3, [sp, #28]
 800c424:	2b00      	cmp	r3, #0
 800c426:	dc74      	bgt.n	800c512 <__kernel_rem_pio2+0x1e2>
 800c428:	0020      	movs	r0, r4
 800c42a:	0029      	movs	r1, r5
 800c42c:	9a02      	ldr	r2, [sp, #8]
 800c42e:	f7ff fdf7 	bl	800c020 <scalbn>
 800c432:	23ff      	movs	r3, #255	; 0xff
 800c434:	2200      	movs	r2, #0
 800c436:	059b      	lsls	r3, r3, #22
 800c438:	0004      	movs	r4, r0
 800c43a:	000d      	movs	r5, r1
 800c43c:	f7f5 fa6a 	bl	8001914 <__aeabi_dmul>
 800c440:	f000 fae2 	bl	800ca08 <floor>
 800c444:	2200      	movs	r2, #0
 800c446:	4b88      	ldr	r3, [pc, #544]	; (800c668 <__kernel_rem_pio2+0x338>)
 800c448:	f7f5 fa64 	bl	8001914 <__aeabi_dmul>
 800c44c:	0002      	movs	r2, r0
 800c44e:	000b      	movs	r3, r1
 800c450:	0020      	movs	r0, r4
 800c452:	0029      	movs	r1, r5
 800c454:	f7f5 fd20 	bl	8001e98 <__aeabi_dsub>
 800c458:	000d      	movs	r5, r1
 800c45a:	0004      	movs	r4, r0
 800c45c:	f7f6 f8bc 	bl	80025d8 <__aeabi_d2iz>
 800c460:	900a      	str	r0, [sp, #40]	; 0x28
 800c462:	f7f6 f8ef 	bl	8002644 <__aeabi_i2d>
 800c466:	000b      	movs	r3, r1
 800c468:	0002      	movs	r2, r0
 800c46a:	0029      	movs	r1, r5
 800c46c:	0020      	movs	r0, r4
 800c46e:	f7f5 fd13 	bl	8001e98 <__aeabi_dsub>
 800c472:	9b02      	ldr	r3, [sp, #8]
 800c474:	0006      	movs	r6, r0
 800c476:	000f      	movs	r7, r1
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dd74      	ble.n	800c566 <__kernel_rem_pio2+0x236>
 800c47c:	2018      	movs	r0, #24
 800c47e:	9b04      	ldr	r3, [sp, #16]
 800c480:	aa10      	add	r2, sp, #64	; 0x40
 800c482:	3b01      	subs	r3, #1
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	589a      	ldr	r2, [r3, r2]
 800c488:	9902      	ldr	r1, [sp, #8]
 800c48a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c48c:	1a40      	subs	r0, r0, r1
 800c48e:	0011      	movs	r1, r2
 800c490:	4101      	asrs	r1, r0
 800c492:	1864      	adds	r4, r4, r1
 800c494:	4081      	lsls	r1, r0
 800c496:	1a52      	subs	r2, r2, r1
 800c498:	a910      	add	r1, sp, #64	; 0x40
 800c49a:	505a      	str	r2, [r3, r1]
 800c49c:	2317      	movs	r3, #23
 800c49e:	9902      	ldr	r1, [sp, #8]
 800c4a0:	940a      	str	r4, [sp, #40]	; 0x28
 800c4a2:	1a5b      	subs	r3, r3, r1
 800c4a4:	411a      	asrs	r2, r3
 800c4a6:	9207      	str	r2, [sp, #28]
 800c4a8:	9b07      	ldr	r3, [sp, #28]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	dd6d      	ble.n	800c58a <__kernel_rem_pio2+0x25a>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4b2:	2080      	movs	r0, #128	; 0x80
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c4b8:	4b6c      	ldr	r3, [pc, #432]	; (800c66c <__kernel_rem_pio2+0x33c>)
 800c4ba:	0014      	movs	r4, r2
 800c4bc:	469c      	mov	ip, r3
 800c4be:	2501      	movs	r5, #1
 800c4c0:	0440      	lsls	r0, r0, #17
 800c4c2:	9b04      	ldr	r3, [sp, #16]
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	dd00      	ble.n	800c4ca <__kernel_rem_pio2+0x19a>
 800c4c8:	e09b      	b.n	800c602 <__kernel_rem_pio2+0x2d2>
 800c4ca:	9b02      	ldr	r3, [sp, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dd05      	ble.n	800c4dc <__kernel_rem_pio2+0x1ac>
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d100      	bne.n	800c4d6 <__kernel_rem_pio2+0x1a6>
 800c4d4:	e0ab      	b.n	800c62e <__kernel_rem_pio2+0x2fe>
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d100      	bne.n	800c4dc <__kernel_rem_pio2+0x1ac>
 800c4da:	e0b2      	b.n	800c642 <__kernel_rem_pio2+0x312>
 800c4dc:	9b07      	ldr	r3, [sp, #28]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d153      	bne.n	800c58a <__kernel_rem_pio2+0x25a>
 800c4e2:	0032      	movs	r2, r6
 800c4e4:	003b      	movs	r3, r7
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	4961      	ldr	r1, [pc, #388]	; (800c670 <__kernel_rem_pio2+0x340>)
 800c4ea:	f7f5 fcd5 	bl	8001e98 <__aeabi_dsub>
 800c4ee:	0006      	movs	r6, r0
 800c4f0:	000f      	movs	r7, r1
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	d049      	beq.n	800c58a <__kernel_rem_pio2+0x25a>
 800c4f6:	9a02      	ldr	r2, [sp, #8]
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	495d      	ldr	r1, [pc, #372]	; (800c670 <__kernel_rem_pio2+0x340>)
 800c4fc:	f7ff fd90 	bl	800c020 <scalbn>
 800c500:	0002      	movs	r2, r0
 800c502:	000b      	movs	r3, r1
 800c504:	0030      	movs	r0, r6
 800c506:	0039      	movs	r1, r7
 800c508:	f7f5 fcc6 	bl	8001e98 <__aeabi_dsub>
 800c50c:	0006      	movs	r6, r0
 800c50e:	000f      	movs	r7, r1
 800c510:	e03b      	b.n	800c58a <__kernel_rem_pio2+0x25a>
 800c512:	2200      	movs	r2, #0
 800c514:	4b57      	ldr	r3, [pc, #348]	; (800c674 <__kernel_rem_pio2+0x344>)
 800c516:	0020      	movs	r0, r4
 800c518:	0029      	movs	r1, r5
 800c51a:	f7f5 f9fb 	bl	8001914 <__aeabi_dmul>
 800c51e:	f7f6 f85b 	bl	80025d8 <__aeabi_d2iz>
 800c522:	f7f6 f88f 	bl	8002644 <__aeabi_i2d>
 800c526:	2200      	movs	r2, #0
 800c528:	4b53      	ldr	r3, [pc, #332]	; (800c678 <__kernel_rem_pio2+0x348>)
 800c52a:	0006      	movs	r6, r0
 800c52c:	000f      	movs	r7, r1
 800c52e:	f7f5 f9f1 	bl	8001914 <__aeabi_dmul>
 800c532:	0002      	movs	r2, r0
 800c534:	000b      	movs	r3, r1
 800c536:	0020      	movs	r0, r4
 800c538:	0029      	movs	r1, r5
 800c53a:	f7f5 fcad 	bl	8001e98 <__aeabi_dsub>
 800c53e:	f7f6 f84b 	bl	80025d8 <__aeabi_d2iz>
 800c542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c544:	aa74      	add	r2, sp, #464	; 0x1d0
 800c546:	c301      	stmia	r3!, {r0}
 800c548:	930a      	str	r3, [sp, #40]	; 0x28
 800c54a:	9b07      	ldr	r3, [sp, #28]
 800c54c:	0030      	movs	r0, r6
 800c54e:	3b01      	subs	r3, #1
 800c550:	9307      	str	r3, [sp, #28]
 800c552:	00db      	lsls	r3, r3, #3
 800c554:	18d3      	adds	r3, r2, r3
 800c556:	0039      	movs	r1, r7
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	f7f4 fa80 	bl	8000a60 <__aeabi_dadd>
 800c560:	0004      	movs	r4, r0
 800c562:	000d      	movs	r5, r1
 800c564:	e75d      	b.n	800c422 <__kernel_rem_pio2+0xf2>
 800c566:	9b02      	ldr	r3, [sp, #8]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d107      	bne.n	800c57c <__kernel_rem_pio2+0x24c>
 800c56c:	9b04      	ldr	r3, [sp, #16]
 800c56e:	aa10      	add	r2, sp, #64	; 0x40
 800c570:	3b01      	subs	r3, #1
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	589b      	ldr	r3, [r3, r2]
 800c576:	15db      	asrs	r3, r3, #23
 800c578:	9307      	str	r3, [sp, #28]
 800c57a:	e795      	b.n	800c4a8 <__kernel_rem_pio2+0x178>
 800c57c:	2200      	movs	r2, #0
 800c57e:	4b3f      	ldr	r3, [pc, #252]	; (800c67c <__kernel_rem_pio2+0x34c>)
 800c580:	f7f3 ff84 	bl	800048c <__aeabi_dcmpge>
 800c584:	2800      	cmp	r0, #0
 800c586:	d139      	bne.n	800c5fc <__kernel_rem_pio2+0x2cc>
 800c588:	9007      	str	r0, [sp, #28]
 800c58a:	2200      	movs	r2, #0
 800c58c:	2300      	movs	r3, #0
 800c58e:	0030      	movs	r0, r6
 800c590:	0039      	movs	r1, r7
 800c592:	f7f3 ff57 	bl	8000444 <__aeabi_dcmpeq>
 800c596:	2800      	cmp	r0, #0
 800c598:	d100      	bne.n	800c59c <__kernel_rem_pio2+0x26c>
 800c59a:	e0bc      	b.n	800c716 <__kernel_rem_pio2+0x3e6>
 800c59c:	2200      	movs	r2, #0
 800c59e:	9b04      	ldr	r3, [sp, #16]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	9908      	ldr	r1, [sp, #32]
 800c5a6:	428b      	cmp	r3, r1
 800c5a8:	da53      	bge.n	800c652 <__kernel_rem_pio2+0x322>
 800c5aa:	2a00      	cmp	r2, #0
 800c5ac:	d100      	bne.n	800c5b0 <__kernel_rem_pio2+0x280>
 800c5ae:	e098      	b.n	800c6e2 <__kernel_rem_pio2+0x3b2>
 800c5b0:	9b02      	ldr	r3, [sp, #8]
 800c5b2:	aa10      	add	r2, sp, #64	; 0x40
 800c5b4:	3b18      	subs	r3, #24
 800c5b6:	9302      	str	r3, [sp, #8]
 800c5b8:	9b00      	ldr	r3, [sp, #0]
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	589b      	ldr	r3, [r3, r2]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d100      	bne.n	800c5c4 <__kernel_rem_pio2+0x294>
 800c5c2:	e0a4      	b.n	800c70e <__kernel_rem_pio2+0x3de>
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	9a02      	ldr	r2, [sp, #8]
 800c5c8:	4929      	ldr	r1, [pc, #164]	; (800c670 <__kernel_rem_pio2+0x340>)
 800c5ca:	f7ff fd29 	bl	800c020 <scalbn>
 800c5ce:	0006      	movs	r6, r0
 800c5d0:	000f      	movs	r7, r1
 800c5d2:	9c00      	ldr	r4, [sp, #0]
 800c5d4:	2c00      	cmp	r4, #0
 800c5d6:	db00      	blt.n	800c5da <__kernel_rem_pio2+0x2aa>
 800c5d8:	e0dc      	b.n	800c794 <__kernel_rem_pio2+0x464>
 800c5da:	4b29      	ldr	r3, [pc, #164]	; (800c680 <__kernel_rem_pio2+0x350>)
 800c5dc:	9c00      	ldr	r4, [sp, #0]
 800c5de:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5e0:	2c00      	cmp	r4, #0
 800c5e2:	da00      	bge.n	800c5e6 <__kernel_rem_pio2+0x2b6>
 800c5e4:	e10f      	b.n	800c806 <__kernel_rem_pio2+0x4d6>
 800c5e6:	00e6      	lsls	r6, r4, #3
 800c5e8:	ab74      	add	r3, sp, #464	; 0x1d0
 800c5ea:	18f3      	adds	r3, r6, r3
 800c5ec:	9302      	str	r3, [sp, #8]
 800c5ee:	9b00      	ldr	r3, [sp, #0]
 800c5f0:	2600      	movs	r6, #0
 800c5f2:	1b1b      	subs	r3, r3, r4
 800c5f4:	2700      	movs	r7, #0
 800c5f6:	2500      	movs	r5, #0
 800c5f8:	9304      	str	r3, [sp, #16]
 800c5fa:	e0f6      	b.n	800c7ea <__kernel_rem_pio2+0x4ba>
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	9307      	str	r3, [sp, #28]
 800c600:	e755      	b.n	800c4ae <__kernel_rem_pio2+0x17e>
 800c602:	9b00      	ldr	r3, [sp, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2c00      	cmp	r4, #0
 800c608:	d10b      	bne.n	800c622 <__kernel_rem_pio2+0x2f2>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <__kernel_rem_pio2+0x2e6>
 800c60e:	9c00      	ldr	r4, [sp, #0]
 800c610:	1ac3      	subs	r3, r0, r3
 800c612:	6023      	str	r3, [r4, #0]
 800c614:	002b      	movs	r3, r5
 800c616:	9c00      	ldr	r4, [sp, #0]
 800c618:	3201      	adds	r2, #1
 800c61a:	3404      	adds	r4, #4
 800c61c:	9400      	str	r4, [sp, #0]
 800c61e:	001c      	movs	r4, r3
 800c620:	e74f      	b.n	800c4c2 <__kernel_rem_pio2+0x192>
 800c622:	4661      	mov	r1, ip
 800c624:	1acb      	subs	r3, r1, r3
 800c626:	9900      	ldr	r1, [sp, #0]
 800c628:	600b      	str	r3, [r1, #0]
 800c62a:	0023      	movs	r3, r4
 800c62c:	e7f3      	b.n	800c616 <__kernel_rem_pio2+0x2e6>
 800c62e:	9b04      	ldr	r3, [sp, #16]
 800c630:	aa10      	add	r2, sp, #64	; 0x40
 800c632:	3b01      	subs	r3, #1
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	589a      	ldr	r2, [r3, r2]
 800c638:	0252      	lsls	r2, r2, #9
 800c63a:	0a52      	lsrs	r2, r2, #9
 800c63c:	a910      	add	r1, sp, #64	; 0x40
 800c63e:	505a      	str	r2, [r3, r1]
 800c640:	e74c      	b.n	800c4dc <__kernel_rem_pio2+0x1ac>
 800c642:	9b04      	ldr	r3, [sp, #16]
 800c644:	aa10      	add	r2, sp, #64	; 0x40
 800c646:	3b01      	subs	r3, #1
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	589a      	ldr	r2, [r3, r2]
 800c64c:	0292      	lsls	r2, r2, #10
 800c64e:	0a92      	lsrs	r2, r2, #10
 800c650:	e7f4      	b.n	800c63c <__kernel_rem_pio2+0x30c>
 800c652:	0099      	lsls	r1, r3, #2
 800c654:	a810      	add	r0, sp, #64	; 0x40
 800c656:	5809      	ldr	r1, [r1, r0]
 800c658:	3b01      	subs	r3, #1
 800c65a:	430a      	orrs	r2, r1
 800c65c:	e7a2      	b.n	800c5a4 <__kernel_rem_pio2+0x274>
 800c65e:	46c0      	nop			; (mov r8, r8)
 800c660:	fffffd8c 	.word	0xfffffd8c
 800c664:	0800d2f8 	.word	0x0800d2f8
 800c668:	40200000 	.word	0x40200000
 800c66c:	00ffffff 	.word	0x00ffffff
 800c670:	3ff00000 	.word	0x3ff00000
 800c674:	3e700000 	.word	0x3e700000
 800c678:	41700000 	.word	0x41700000
 800c67c:	3fe00000 	.word	0x3fe00000
 800c680:	0800d2b8 	.word	0x0800d2b8
 800c684:	3301      	adds	r3, #1
 800c686:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c688:	009a      	lsls	r2, r3, #2
 800c68a:	4252      	negs	r2, r2
 800c68c:	588a      	ldr	r2, [r1, r2]
 800c68e:	2a00      	cmp	r2, #0
 800c690:	d0f8      	beq.n	800c684 <__kernel_rem_pio2+0x354>
 800c692:	9a04      	ldr	r2, [sp, #16]
 800c694:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c696:	1c57      	adds	r7, r2, #1
 800c698:	1854      	adds	r4, r2, r1
 800c69a:	00e4      	lsls	r4, r4, #3
 800c69c:	aa24      	add	r2, sp, #144	; 0x90
 800c69e:	1914      	adds	r4, r2, r4
 800c6a0:	9a04      	ldr	r2, [sp, #16]
 800c6a2:	18d3      	adds	r3, r2, r3
 800c6a4:	9304      	str	r3, [sp, #16]
 800c6a6:	9b04      	ldr	r3, [sp, #16]
 800c6a8:	42bb      	cmp	r3, r7
 800c6aa:	da00      	bge.n	800c6ae <__kernel_rem_pio2+0x37e>
 800c6ac:	e6ae      	b.n	800c40c <__kernel_rem_pio2+0xdc>
 800c6ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6b0:	00bb      	lsls	r3, r7, #2
 800c6b2:	58d0      	ldr	r0, [r2, r3]
 800c6b4:	f7f5 ffc6 	bl	8002644 <__aeabi_i2d>
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	0026      	movs	r6, r4
 800c6be:	2500      	movs	r5, #0
 800c6c0:	6020      	str	r0, [r4, #0]
 800c6c2:	6061      	str	r1, [r4, #4]
 800c6c4:	9200      	str	r2, [sp, #0]
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6ca:	429d      	cmp	r5, r3
 800c6cc:	dd0b      	ble.n	800c6e6 <__kernel_rem_pio2+0x3b6>
 800c6ce:	00fb      	lsls	r3, r7, #3
 800c6d0:	aa74      	add	r2, sp, #464	; 0x1d0
 800c6d2:	18d3      	adds	r3, r2, r3
 800c6d4:	3701      	adds	r7, #1
 800c6d6:	9900      	ldr	r1, [sp, #0]
 800c6d8:	9a01      	ldr	r2, [sp, #4]
 800c6da:	3408      	adds	r4, #8
 800c6dc:	6019      	str	r1, [r3, #0]
 800c6de:	605a      	str	r2, [r3, #4]
 800c6e0:	e7e1      	b.n	800c6a6 <__kernel_rem_pio2+0x376>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e7cf      	b.n	800c686 <__kernel_rem_pio2+0x356>
 800c6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6e8:	00e9      	lsls	r1, r5, #3
 800c6ea:	1859      	adds	r1, r3, r1
 800c6ec:	6808      	ldr	r0, [r1, #0]
 800c6ee:	6849      	ldr	r1, [r1, #4]
 800c6f0:	6832      	ldr	r2, [r6, #0]
 800c6f2:	6873      	ldr	r3, [r6, #4]
 800c6f4:	f7f5 f90e 	bl	8001914 <__aeabi_dmul>
 800c6f8:	0002      	movs	r2, r0
 800c6fa:	000b      	movs	r3, r1
 800c6fc:	9800      	ldr	r0, [sp, #0]
 800c6fe:	9901      	ldr	r1, [sp, #4]
 800c700:	f7f4 f9ae 	bl	8000a60 <__aeabi_dadd>
 800c704:	3501      	adds	r5, #1
 800c706:	9000      	str	r0, [sp, #0]
 800c708:	9101      	str	r1, [sp, #4]
 800c70a:	3e08      	subs	r6, #8
 800c70c:	e7dc      	b.n	800c6c8 <__kernel_rem_pio2+0x398>
 800c70e:	9b00      	ldr	r3, [sp, #0]
 800c710:	3b01      	subs	r3, #1
 800c712:	9300      	str	r3, [sp, #0]
 800c714:	e74c      	b.n	800c5b0 <__kernel_rem_pio2+0x280>
 800c716:	9b02      	ldr	r3, [sp, #8]
 800c718:	0030      	movs	r0, r6
 800c71a:	425a      	negs	r2, r3
 800c71c:	0039      	movs	r1, r7
 800c71e:	f7ff fc7f 	bl	800c020 <scalbn>
 800c722:	2200      	movs	r2, #0
 800c724:	4bb6      	ldr	r3, [pc, #728]	; (800ca00 <__kernel_rem_pio2+0x6d0>)
 800c726:	0004      	movs	r4, r0
 800c728:	000d      	movs	r5, r1
 800c72a:	f7f3 feaf 	bl	800048c <__aeabi_dcmpge>
 800c72e:	2800      	cmp	r0, #0
 800c730:	d025      	beq.n	800c77e <__kernel_rem_pio2+0x44e>
 800c732:	2200      	movs	r2, #0
 800c734:	4bb3      	ldr	r3, [pc, #716]	; (800ca04 <__kernel_rem_pio2+0x6d4>)
 800c736:	0020      	movs	r0, r4
 800c738:	0029      	movs	r1, r5
 800c73a:	f7f5 f8eb 	bl	8001914 <__aeabi_dmul>
 800c73e:	f7f5 ff4b 	bl	80025d8 <__aeabi_d2iz>
 800c742:	9b04      	ldr	r3, [sp, #16]
 800c744:	0006      	movs	r6, r0
 800c746:	009f      	lsls	r7, r3, #2
 800c748:	f7f5 ff7c 	bl	8002644 <__aeabi_i2d>
 800c74c:	2200      	movs	r2, #0
 800c74e:	4bac      	ldr	r3, [pc, #688]	; (800ca00 <__kernel_rem_pio2+0x6d0>)
 800c750:	f7f5 f8e0 	bl	8001914 <__aeabi_dmul>
 800c754:	0002      	movs	r2, r0
 800c756:	000b      	movs	r3, r1
 800c758:	0020      	movs	r0, r4
 800c75a:	0029      	movs	r1, r5
 800c75c:	f7f5 fb9c 	bl	8001e98 <__aeabi_dsub>
 800c760:	f7f5 ff3a 	bl	80025d8 <__aeabi_d2iz>
 800c764:	ab10      	add	r3, sp, #64	; 0x40
 800c766:	51d8      	str	r0, [r3, r7]
 800c768:	9b04      	ldr	r3, [sp, #16]
 800c76a:	aa10      	add	r2, sp, #64	; 0x40
 800c76c:	3301      	adds	r3, #1
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	9b02      	ldr	r3, [sp, #8]
 800c772:	3318      	adds	r3, #24
 800c774:	9302      	str	r3, [sp, #8]
 800c776:	9b00      	ldr	r3, [sp, #0]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	509e      	str	r6, [r3, r2]
 800c77c:	e722      	b.n	800c5c4 <__kernel_rem_pio2+0x294>
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	0020      	movs	r0, r4
 800c782:	0029      	movs	r1, r5
 800c784:	009e      	lsls	r6, r3, #2
 800c786:	f7f5 ff27 	bl	80025d8 <__aeabi_d2iz>
 800c78a:	ab10      	add	r3, sp, #64	; 0x40
 800c78c:	5198      	str	r0, [r3, r6]
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	e717      	b.n	800c5c4 <__kernel_rem_pio2+0x294>
 800c794:	00e5      	lsls	r5, r4, #3
 800c796:	ab74      	add	r3, sp, #464	; 0x1d0
 800c798:	aa10      	add	r2, sp, #64	; 0x40
 800c79a:	195d      	adds	r5, r3, r5
 800c79c:	00a3      	lsls	r3, r4, #2
 800c79e:	5898      	ldr	r0, [r3, r2]
 800c7a0:	f7f5 ff50 	bl	8002644 <__aeabi_i2d>
 800c7a4:	0032      	movs	r2, r6
 800c7a6:	003b      	movs	r3, r7
 800c7a8:	f7f5 f8b4 	bl	8001914 <__aeabi_dmul>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	6028      	str	r0, [r5, #0]
 800c7b0:	6069      	str	r1, [r5, #4]
 800c7b2:	4b94      	ldr	r3, [pc, #592]	; (800ca04 <__kernel_rem_pio2+0x6d4>)
 800c7b4:	0030      	movs	r0, r6
 800c7b6:	0039      	movs	r1, r7
 800c7b8:	f7f5 f8ac 	bl	8001914 <__aeabi_dmul>
 800c7bc:	3c01      	subs	r4, #1
 800c7be:	0006      	movs	r6, r0
 800c7c0:	000f      	movs	r7, r1
 800c7c2:	e707      	b.n	800c5d4 <__kernel_rem_pio2+0x2a4>
 800c7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7c6:	9802      	ldr	r0, [sp, #8]
 800c7c8:	00e9      	lsls	r1, r5, #3
 800c7ca:	1859      	adds	r1, r3, r1
 800c7cc:	c80c      	ldmia	r0!, {r2, r3}
 800c7ce:	9002      	str	r0, [sp, #8]
 800c7d0:	6808      	ldr	r0, [r1, #0]
 800c7d2:	6849      	ldr	r1, [r1, #4]
 800c7d4:	f7f5 f89e 	bl	8001914 <__aeabi_dmul>
 800c7d8:	0002      	movs	r2, r0
 800c7da:	000b      	movs	r3, r1
 800c7dc:	0030      	movs	r0, r6
 800c7de:	0039      	movs	r1, r7
 800c7e0:	f7f4 f93e 	bl	8000a60 <__aeabi_dadd>
 800c7e4:	0006      	movs	r6, r0
 800c7e6:	000f      	movs	r7, r1
 800c7e8:	3501      	adds	r5, #1
 800c7ea:	9b08      	ldr	r3, [sp, #32]
 800c7ec:	429d      	cmp	r5, r3
 800c7ee:	dc02      	bgt.n	800c7f6 <__kernel_rem_pio2+0x4c6>
 800c7f0:	9b04      	ldr	r3, [sp, #16]
 800c7f2:	429d      	cmp	r5, r3
 800c7f4:	dde6      	ble.n	800c7c4 <__kernel_rem_pio2+0x494>
 800c7f6:	9b04      	ldr	r3, [sp, #16]
 800c7f8:	aa4c      	add	r2, sp, #304	; 0x130
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	18d3      	adds	r3, r2, r3
 800c7fe:	601e      	str	r6, [r3, #0]
 800c800:	605f      	str	r7, [r3, #4]
 800c802:	3c01      	subs	r4, #1
 800c804:	e6ec      	b.n	800c5e0 <__kernel_rem_pio2+0x2b0>
 800c806:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c808:	2b02      	cmp	r3, #2
 800c80a:	dc0e      	bgt.n	800c82a <__kernel_rem_pio2+0x4fa>
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dd00      	ble.n	800c812 <__kernel_rem_pio2+0x4e2>
 800c810:	e08c      	b.n	800c92c <__kernel_rem_pio2+0x5fc>
 800c812:	2500      	movs	r5, #0
 800c814:	002c      	movs	r4, r5
 800c816:	42ab      	cmp	r3, r5
 800c818:	d046      	beq.n	800c8a8 <__kernel_rem_pio2+0x578>
 800c81a:	2007      	movs	r0, #7
 800c81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c81e:	4003      	ands	r3, r0
 800c820:	0018      	movs	r0, r3
 800c822:	239d      	movs	r3, #157	; 0x9d
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	449d      	add	sp, r3
 800c828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c82a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c82c:	2b03      	cmp	r3, #3
 800c82e:	d1f4      	bne.n	800c81a <__kernel_rem_pio2+0x4ea>
 800c830:	9b00      	ldr	r3, [sp, #0]
 800c832:	aa4c      	add	r2, sp, #304	; 0x130
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	18d4      	adds	r4, r2, r3
 800c838:	0025      	movs	r5, r4
 800c83a:	9b00      	ldr	r3, [sp, #0]
 800c83c:	9302      	str	r3, [sp, #8]
 800c83e:	9b02      	ldr	r3, [sp, #8]
 800c840:	3d08      	subs	r5, #8
 800c842:	2b00      	cmp	r3, #0
 800c844:	dd00      	ble.n	800c848 <__kernel_rem_pio2+0x518>
 800c846:	e07f      	b.n	800c948 <__kernel_rem_pio2+0x618>
 800c848:	9d00      	ldr	r5, [sp, #0]
 800c84a:	3c08      	subs	r4, #8
 800c84c:	2d01      	cmp	r5, #1
 800c84e:	dd00      	ble.n	800c852 <__kernel_rem_pio2+0x522>
 800c850:	e09c      	b.n	800c98c <__kernel_rem_pio2+0x65c>
 800c852:	2400      	movs	r4, #0
 800c854:	0021      	movs	r1, r4
 800c856:	9b00      	ldr	r3, [sp, #0]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	dd00      	ble.n	800c85e <__kernel_rem_pio2+0x52e>
 800c85c:	e0b4      	b.n	800c9c8 <__kernel_rem_pio2+0x698>
 800c85e:	9b07      	ldr	r3, [sp, #28]
 800c860:	9f4c      	ldr	r7, [sp, #304]	; 0x130
 800c862:	9e4d      	ldr	r6, [sp, #308]	; 0x134
 800c864:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 800c866:	984f      	ldr	r0, [sp, #316]	; 0x13c
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d000      	beq.n	800c86e <__kernel_rem_pio2+0x53e>
 800c86c:	e0ba      	b.n	800c9e4 <__kernel_rem_pio2+0x6b4>
 800c86e:	0033      	movs	r3, r6
 800c870:	003a      	movs	r2, r7
 800c872:	9e06      	ldr	r6, [sp, #24]
 800c874:	6032      	str	r2, [r6, #0]
 800c876:	6073      	str	r3, [r6, #4]
 800c878:	002a      	movs	r2, r5
 800c87a:	0003      	movs	r3, r0
 800c87c:	60b2      	str	r2, [r6, #8]
 800c87e:	60f3      	str	r3, [r6, #12]
 800c880:	0022      	movs	r2, r4
 800c882:	000b      	movs	r3, r1
 800c884:	6132      	str	r2, [r6, #16]
 800c886:	6173      	str	r3, [r6, #20]
 800c888:	e7c7      	b.n	800c81a <__kernel_rem_pio2+0x4ea>
 800c88a:	9b00      	ldr	r3, [sp, #0]
 800c88c:	aa4c      	add	r2, sp, #304	; 0x130
 800c88e:	00db      	lsls	r3, r3, #3
 800c890:	18d3      	adds	r3, r2, r3
 800c892:	0028      	movs	r0, r5
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	0021      	movs	r1, r4
 800c89a:	f7f4 f8e1 	bl	8000a60 <__aeabi_dadd>
 800c89e:	0005      	movs	r5, r0
 800c8a0:	000c      	movs	r4, r1
 800c8a2:	9b00      	ldr	r3, [sp, #0]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	9b00      	ldr	r3, [sp, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	daed      	bge.n	800c88a <__kernel_rem_pio2+0x55a>
 800c8ae:	9b07      	ldr	r3, [sp, #28]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <__kernel_rem_pio2+0x58a>
 800c8b4:	2380      	movs	r3, #128	; 0x80
 800c8b6:	061b      	lsls	r3, r3, #24
 800c8b8:	18e4      	adds	r4, r4, r3
 800c8ba:	002a      	movs	r2, r5
 800c8bc:	0023      	movs	r3, r4
 800c8be:	9906      	ldr	r1, [sp, #24]
 800c8c0:	600a      	str	r2, [r1, #0]
 800c8c2:	604b      	str	r3, [r1, #4]
 800c8c4:	e7a9      	b.n	800c81a <__kernel_rem_pio2+0x4ea>
 800c8c6:	00e3      	lsls	r3, r4, #3
 800c8c8:	aa4c      	add	r2, sp, #304	; 0x130
 800c8ca:	18d3      	adds	r3, r2, r3
 800c8cc:	0030      	movs	r0, r6
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	0029      	movs	r1, r5
 800c8d4:	f7f4 f8c4 	bl	8000a60 <__aeabi_dadd>
 800c8d8:	0006      	movs	r6, r0
 800c8da:	000d      	movs	r5, r1
 800c8dc:	3c01      	subs	r4, #1
 800c8de:	2c00      	cmp	r4, #0
 800c8e0:	daf1      	bge.n	800c8c6 <__kernel_rem_pio2+0x596>
 800c8e2:	9b07      	ldr	r3, [sp, #28]
 800c8e4:	0029      	movs	r1, r5
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <__kernel_rem_pio2+0x5c0>
 800c8ea:	2380      	movs	r3, #128	; 0x80
 800c8ec:	061b      	lsls	r3, r3, #24
 800c8ee:	18e9      	adds	r1, r5, r3
 800c8f0:	0032      	movs	r2, r6
 800c8f2:	000b      	movs	r3, r1
 800c8f4:	9906      	ldr	r1, [sp, #24]
 800c8f6:	2401      	movs	r4, #1
 800c8f8:	600a      	str	r2, [r1, #0]
 800c8fa:	604b      	str	r3, [r1, #4]
 800c8fc:	984c      	ldr	r0, [sp, #304]	; 0x130
 800c8fe:	994d      	ldr	r1, [sp, #308]	; 0x134
 800c900:	002b      	movs	r3, r5
 800c902:	f7f5 fac9 	bl	8001e98 <__aeabi_dsub>
 800c906:	0007      	movs	r7, r0
 800c908:	000e      	movs	r6, r1
 800c90a:	ad4c      	add	r5, sp, #304	; 0x130
 800c90c:	9b00      	ldr	r3, [sp, #0]
 800c90e:	3508      	adds	r5, #8
 800c910:	42a3      	cmp	r3, r4
 800c912:	da0f      	bge.n	800c934 <__kernel_rem_pio2+0x604>
 800c914:	9b07      	ldr	r3, [sp, #28]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d002      	beq.n	800c920 <__kernel_rem_pio2+0x5f0>
 800c91a:	2380      	movs	r3, #128	; 0x80
 800c91c:	061b      	lsls	r3, r3, #24
 800c91e:	18f6      	adds	r6, r6, r3
 800c920:	003a      	movs	r2, r7
 800c922:	0033      	movs	r3, r6
 800c924:	9906      	ldr	r1, [sp, #24]
 800c926:	608a      	str	r2, [r1, #8]
 800c928:	60cb      	str	r3, [r1, #12]
 800c92a:	e776      	b.n	800c81a <__kernel_rem_pio2+0x4ea>
 800c92c:	2600      	movs	r6, #0
 800c92e:	9c00      	ldr	r4, [sp, #0]
 800c930:	0035      	movs	r5, r6
 800c932:	e7d4      	b.n	800c8de <__kernel_rem_pio2+0x5ae>
 800c934:	0038      	movs	r0, r7
 800c936:	682a      	ldr	r2, [r5, #0]
 800c938:	686b      	ldr	r3, [r5, #4]
 800c93a:	0031      	movs	r1, r6
 800c93c:	f7f4 f890 	bl	8000a60 <__aeabi_dadd>
 800c940:	3401      	adds	r4, #1
 800c942:	0007      	movs	r7, r0
 800c944:	000e      	movs	r6, r1
 800c946:	e7e1      	b.n	800c90c <__kernel_rem_pio2+0x5dc>
 800c948:	9b02      	ldr	r3, [sp, #8]
 800c94a:	68ae      	ldr	r6, [r5, #8]
 800c94c:	68ef      	ldr	r7, [r5, #12]
 800c94e:	3b01      	subs	r3, #1
 800c950:	9302      	str	r3, [sp, #8]
 800c952:	682a      	ldr	r2, [r5, #0]
 800c954:	686b      	ldr	r3, [r5, #4]
 800c956:	9204      	str	r2, [sp, #16]
 800c958:	9305      	str	r3, [sp, #20]
 800c95a:	9804      	ldr	r0, [sp, #16]
 800c95c:	9905      	ldr	r1, [sp, #20]
 800c95e:	0032      	movs	r2, r6
 800c960:	003b      	movs	r3, r7
 800c962:	f7f4 f87d 	bl	8000a60 <__aeabi_dadd>
 800c966:	0002      	movs	r2, r0
 800c968:	000b      	movs	r3, r1
 800c96a:	9008      	str	r0, [sp, #32]
 800c96c:	9109      	str	r1, [sp, #36]	; 0x24
 800c96e:	9804      	ldr	r0, [sp, #16]
 800c970:	9905      	ldr	r1, [sp, #20]
 800c972:	f7f5 fa91 	bl	8001e98 <__aeabi_dsub>
 800c976:	0032      	movs	r2, r6
 800c978:	003b      	movs	r3, r7
 800c97a:	f7f4 f871 	bl	8000a60 <__aeabi_dadd>
 800c97e:	9a08      	ldr	r2, [sp, #32]
 800c980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c982:	60a8      	str	r0, [r5, #8]
 800c984:	60e9      	str	r1, [r5, #12]
 800c986:	602a      	str	r2, [r5, #0]
 800c988:	606b      	str	r3, [r5, #4]
 800c98a:	e758      	b.n	800c83e <__kernel_rem_pio2+0x50e>
 800c98c:	6826      	ldr	r6, [r4, #0]
 800c98e:	6867      	ldr	r7, [r4, #4]
 800c990:	68a2      	ldr	r2, [r4, #8]
 800c992:	68e3      	ldr	r3, [r4, #12]
 800c994:	0030      	movs	r0, r6
 800c996:	0039      	movs	r1, r7
 800c998:	9202      	str	r2, [sp, #8]
 800c99a:	9303      	str	r3, [sp, #12]
 800c99c:	f7f4 f860 	bl	8000a60 <__aeabi_dadd>
 800c9a0:	0002      	movs	r2, r0
 800c9a2:	000b      	movs	r3, r1
 800c9a4:	9004      	str	r0, [sp, #16]
 800c9a6:	9105      	str	r1, [sp, #20]
 800c9a8:	0030      	movs	r0, r6
 800c9aa:	0039      	movs	r1, r7
 800c9ac:	f7f5 fa74 	bl	8001e98 <__aeabi_dsub>
 800c9b0:	9a02      	ldr	r2, [sp, #8]
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	f7f4 f854 	bl	8000a60 <__aeabi_dadd>
 800c9b8:	9a04      	ldr	r2, [sp, #16]
 800c9ba:	9b05      	ldr	r3, [sp, #20]
 800c9bc:	60a0      	str	r0, [r4, #8]
 800c9be:	60e1      	str	r1, [r4, #12]
 800c9c0:	6022      	str	r2, [r4, #0]
 800c9c2:	6063      	str	r3, [r4, #4]
 800c9c4:	3d01      	subs	r5, #1
 800c9c6:	e740      	b.n	800c84a <__kernel_rem_pio2+0x51a>
 800c9c8:	9b00      	ldr	r3, [sp, #0]
 800c9ca:	aa4c      	add	r2, sp, #304	; 0x130
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	18d3      	adds	r3, r2, r3
 800c9d0:	0020      	movs	r0, r4
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	f7f4 f843 	bl	8000a60 <__aeabi_dadd>
 800c9da:	9b00      	ldr	r3, [sp, #0]
 800c9dc:	0004      	movs	r4, r0
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	e738      	b.n	800c856 <__kernel_rem_pio2+0x526>
 800c9e4:	9b06      	ldr	r3, [sp, #24]
 800c9e6:	9a06      	ldr	r2, [sp, #24]
 800c9e8:	601f      	str	r7, [r3, #0]
 800c9ea:	2380      	movs	r3, #128	; 0x80
 800c9ec:	061b      	lsls	r3, r3, #24
 800c9ee:	18f6      	adds	r6, r6, r3
 800c9f0:	18c0      	adds	r0, r0, r3
 800c9f2:	18c9      	adds	r1, r1, r3
 800c9f4:	6056      	str	r6, [r2, #4]
 800c9f6:	6095      	str	r5, [r2, #8]
 800c9f8:	60d0      	str	r0, [r2, #12]
 800c9fa:	6114      	str	r4, [r2, #16]
 800c9fc:	6151      	str	r1, [r2, #20]
 800c9fe:	e70c      	b.n	800c81a <__kernel_rem_pio2+0x4ea>
 800ca00:	41700000 	.word	0x41700000
 800ca04:	3e700000 	.word	0x3e700000

0800ca08 <floor>:
 800ca08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca0a:	004b      	lsls	r3, r1, #1
 800ca0c:	4a3e      	ldr	r2, [pc, #248]	; (800cb08 <floor+0x100>)
 800ca0e:	0d5b      	lsrs	r3, r3, #21
 800ca10:	189f      	adds	r7, r3, r2
 800ca12:	4684      	mov	ip, r0
 800ca14:	000e      	movs	r6, r1
 800ca16:	000c      	movs	r4, r1
 800ca18:	0005      	movs	r5, r0
 800ca1a:	9001      	str	r0, [sp, #4]
 800ca1c:	2f13      	cmp	r7, #19
 800ca1e:	dc34      	bgt.n	800ca8a <floor+0x82>
 800ca20:	2f00      	cmp	r7, #0
 800ca22:	da16      	bge.n	800ca52 <floor+0x4a>
 800ca24:	4a39      	ldr	r2, [pc, #228]	; (800cb0c <floor+0x104>)
 800ca26:	4b3a      	ldr	r3, [pc, #232]	; (800cb10 <floor+0x108>)
 800ca28:	4660      	mov	r0, ip
 800ca2a:	0031      	movs	r1, r6
 800ca2c:	f7f4 f818 	bl	8000a60 <__aeabi_dadd>
 800ca30:	2200      	movs	r2, #0
 800ca32:	2300      	movs	r3, #0
 800ca34:	f7f3 fd20 	bl	8000478 <__aeabi_dcmpgt>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d007      	beq.n	800ca4c <floor+0x44>
 800ca3c:	2e00      	cmp	r6, #0
 800ca3e:	da5d      	bge.n	800cafc <floor+0xf4>
 800ca40:	0074      	lsls	r4, r6, #1
 800ca42:	0864      	lsrs	r4, r4, #1
 800ca44:	4325      	orrs	r5, r4
 800ca46:	d05c      	beq.n	800cb02 <floor+0xfa>
 800ca48:	2500      	movs	r5, #0
 800ca4a:	4c32      	ldr	r4, [pc, #200]	; (800cb14 <floor+0x10c>)
 800ca4c:	46ac      	mov	ip, r5
 800ca4e:	0026      	movs	r6, r4
 800ca50:	e029      	b.n	800caa6 <floor+0x9e>
 800ca52:	4b31      	ldr	r3, [pc, #196]	; (800cb18 <floor+0x110>)
 800ca54:	413b      	asrs	r3, r7
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	400b      	ands	r3, r1
 800ca5a:	4303      	orrs	r3, r0
 800ca5c:	d023      	beq.n	800caa6 <floor+0x9e>
 800ca5e:	4a2b      	ldr	r2, [pc, #172]	; (800cb0c <floor+0x104>)
 800ca60:	4b2b      	ldr	r3, [pc, #172]	; (800cb10 <floor+0x108>)
 800ca62:	4660      	mov	r0, ip
 800ca64:	0031      	movs	r1, r6
 800ca66:	f7f3 fffb 	bl	8000a60 <__aeabi_dadd>
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	f7f3 fd03 	bl	8000478 <__aeabi_dcmpgt>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d0ea      	beq.n	800ca4c <floor+0x44>
 800ca76:	2e00      	cmp	r6, #0
 800ca78:	da03      	bge.n	800ca82 <floor+0x7a>
 800ca7a:	2380      	movs	r3, #128	; 0x80
 800ca7c:	035b      	lsls	r3, r3, #13
 800ca7e:	413b      	asrs	r3, r7
 800ca80:	18f4      	adds	r4, r6, r3
 800ca82:	9b00      	ldr	r3, [sp, #0]
 800ca84:	2500      	movs	r5, #0
 800ca86:	439c      	bics	r4, r3
 800ca88:	e7e0      	b.n	800ca4c <floor+0x44>
 800ca8a:	2f33      	cmp	r7, #51	; 0x33
 800ca8c:	dd0f      	ble.n	800caae <floor+0xa6>
 800ca8e:	2380      	movs	r3, #128	; 0x80
 800ca90:	00db      	lsls	r3, r3, #3
 800ca92:	429f      	cmp	r7, r3
 800ca94:	d107      	bne.n	800caa6 <floor+0x9e>
 800ca96:	0002      	movs	r2, r0
 800ca98:	000b      	movs	r3, r1
 800ca9a:	4660      	mov	r0, ip
 800ca9c:	0031      	movs	r1, r6
 800ca9e:	f7f3 ffdf 	bl	8000a60 <__aeabi_dadd>
 800caa2:	4684      	mov	ip, r0
 800caa4:	000e      	movs	r6, r1
 800caa6:	4660      	mov	r0, ip
 800caa8:	0031      	movs	r1, r6
 800caaa:	b003      	add	sp, #12
 800caac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caae:	4a1b      	ldr	r2, [pc, #108]	; (800cb1c <floor+0x114>)
 800cab0:	189b      	adds	r3, r3, r2
 800cab2:	2201      	movs	r2, #1
 800cab4:	4252      	negs	r2, r2
 800cab6:	40da      	lsrs	r2, r3
 800cab8:	9200      	str	r2, [sp, #0]
 800caba:	4202      	tst	r2, r0
 800cabc:	d0f3      	beq.n	800caa6 <floor+0x9e>
 800cabe:	4a13      	ldr	r2, [pc, #76]	; (800cb0c <floor+0x104>)
 800cac0:	4b13      	ldr	r3, [pc, #76]	; (800cb10 <floor+0x108>)
 800cac2:	4660      	mov	r0, ip
 800cac4:	0031      	movs	r1, r6
 800cac6:	f7f3 ffcb 	bl	8000a60 <__aeabi_dadd>
 800caca:	2200      	movs	r2, #0
 800cacc:	2300      	movs	r3, #0
 800cace:	f7f3 fcd3 	bl	8000478 <__aeabi_dcmpgt>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	d0ba      	beq.n	800ca4c <floor+0x44>
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	da02      	bge.n	800cae0 <floor+0xd8>
 800cada:	2f14      	cmp	r7, #20
 800cadc:	d103      	bne.n	800cae6 <floor+0xde>
 800cade:	3401      	adds	r4, #1
 800cae0:	9b00      	ldr	r3, [sp, #0]
 800cae2:	439d      	bics	r5, r3
 800cae4:	e7b2      	b.n	800ca4c <floor+0x44>
 800cae6:	2234      	movs	r2, #52	; 0x34
 800cae8:	2301      	movs	r3, #1
 800caea:	1bd2      	subs	r2, r2, r7
 800caec:	4093      	lsls	r3, r2
 800caee:	18ed      	adds	r5, r5, r3
 800caf0:	9b01      	ldr	r3, [sp, #4]
 800caf2:	429d      	cmp	r5, r3
 800caf4:	419b      	sbcs	r3, r3
 800caf6:	425b      	negs	r3, r3
 800caf8:	18f4      	adds	r4, r6, r3
 800cafa:	e7f1      	b.n	800cae0 <floor+0xd8>
 800cafc:	2500      	movs	r5, #0
 800cafe:	002c      	movs	r4, r5
 800cb00:	e7a4      	b.n	800ca4c <floor+0x44>
 800cb02:	2480      	movs	r4, #128	; 0x80
 800cb04:	0624      	lsls	r4, r4, #24
 800cb06:	e7a1      	b.n	800ca4c <floor+0x44>
 800cb08:	fffffc01 	.word	0xfffffc01
 800cb0c:	8800759c 	.word	0x8800759c
 800cb10:	7e37e43c 	.word	0x7e37e43c
 800cb14:	bff00000 	.word	0xbff00000
 800cb18:	000fffff 	.word	0x000fffff
 800cb1c:	fffffbed 	.word	0xfffffbed

0800cb20 <_init>:
 800cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb22:	46c0      	nop			; (mov r8, r8)
 800cb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb26:	bc08      	pop	{r3}
 800cb28:	469e      	mov	lr, r3
 800cb2a:	4770      	bx	lr

0800cb2c <_fini>:
 800cb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2e:	46c0      	nop			; (mov r8, r8)
 800cb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb32:	bc08      	pop	{r3}
 800cb34:	469e      	mov	lr, r3
 800cb36:	4770      	bx	lr
