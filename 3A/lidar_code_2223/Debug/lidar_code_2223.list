
lidar_code_2223.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caf8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800cbb0  0800cbb0  0000dbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d378  0800d378  0000f230  2**0
                  CONTENTS
  4 .ARM          00000000  0800d378  0800d378  0000f230  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d378  0800d378  0000f230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d378  0800d378  0000e378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d37c  0800d37c  0000e37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800d380  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d7c  20000230  0800d5b0  0000f230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000fac  0800d5b0  0000ffac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017357  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000338e  00000000  00000000  000265af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00029940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc8  00000000  00000000  0002ad60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ded  00000000  00000000  0002bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cea  00000000  00000000  00044b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000957fc  00000000  00000000  0005e7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3ffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e2c  00000000  00000000  000f4040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f9e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000230 	.word	0x20000230
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800cb98 	.word	0x0800cb98

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000234 	.word	0x20000234
 80000fc:	0800cb98 	.word	0x0800cb98

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fa63 	bl	8001900 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f9a3 	bl	8001790 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fa55 	bl	8001900 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fa4b 	bl	8001900 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f9cd 	bl	8001818 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f9c3 	bl	8001818 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 f8e1 	bl	8000670 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 f861 	bl	8000580 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 f8d3 	bl	8000670 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 f8c9 	bl	8000670 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 f86f 	bl	80005d0 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 f865 	bl	80005d0 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_f2uiz>:
 8000514:	219e      	movs	r1, #158	@ 0x9e
 8000516:	b510      	push	{r4, lr}
 8000518:	05c9      	lsls	r1, r1, #23
 800051a:	1c04      	adds	r4, r0, #0
 800051c:	f7ff fff0 	bl	8000500 <__aeabi_fcmpge>
 8000520:	2800      	cmp	r0, #0
 8000522:	d103      	bne.n	800052c <__aeabi_f2uiz+0x18>
 8000524:	1c20      	adds	r0, r4, #0
 8000526:	f000 fa95 	bl	8000a54 <__aeabi_f2iz>
 800052a:	bd10      	pop	{r4, pc}
 800052c:	219e      	movs	r1, #158	@ 0x9e
 800052e:	1c20      	adds	r0, r4, #0
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	f000 f8eb 	bl	800070c <__aeabi_fsub>
 8000536:	f000 fa8d 	bl	8000a54 <__aeabi_f2iz>
 800053a:	2380      	movs	r3, #128	@ 0x80
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	469c      	mov	ip, r3
 8000540:	4460      	add	r0, ip
 8000542:	e7f2      	b.n	800052a <__aeabi_f2uiz+0x16>

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ff9d 	bl	800048c <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f8c9 	bl	80026f0 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fd04 	bl	8001f74 <__aeabi_dsub>
 800056c:	f002 f8c0 	bl	80026f0 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__eqsf2>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0042      	lsls	r2, r0, #1
 8000584:	024e      	lsls	r6, r1, #9
 8000586:	004c      	lsls	r4, r1, #1
 8000588:	0245      	lsls	r5, r0, #9
 800058a:	0a6d      	lsrs	r5, r5, #9
 800058c:	0e12      	lsrs	r2, r2, #24
 800058e:	0fc3      	lsrs	r3, r0, #31
 8000590:	0a76      	lsrs	r6, r6, #9
 8000592:	0e24      	lsrs	r4, r4, #24
 8000594:	0fc9      	lsrs	r1, r1, #31
 8000596:	2aff      	cmp	r2, #255	@ 0xff
 8000598:	d010      	beq.n	80005bc <__eqsf2+0x3c>
 800059a:	2cff      	cmp	r4, #255	@ 0xff
 800059c:	d00c      	beq.n	80005b8 <__eqsf2+0x38>
 800059e:	2001      	movs	r0, #1
 80005a0:	42a2      	cmp	r2, r4
 80005a2:	d10a      	bne.n	80005ba <__eqsf2+0x3a>
 80005a4:	42b5      	cmp	r5, r6
 80005a6:	d108      	bne.n	80005ba <__eqsf2+0x3a>
 80005a8:	428b      	cmp	r3, r1
 80005aa:	d00f      	beq.n	80005cc <__eqsf2+0x4c>
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	d104      	bne.n	80005ba <__eqsf2+0x3a>
 80005b0:	0028      	movs	r0, r5
 80005b2:	1e43      	subs	r3, r0, #1
 80005b4:	4198      	sbcs	r0, r3
 80005b6:	e000      	b.n	80005ba <__eqsf2+0x3a>
 80005b8:	2001      	movs	r0, #1
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	2001      	movs	r0, #1
 80005be:	2cff      	cmp	r4, #255	@ 0xff
 80005c0:	d1fb      	bne.n	80005ba <__eqsf2+0x3a>
 80005c2:	4335      	orrs	r5, r6
 80005c4:	d1f9      	bne.n	80005ba <__eqsf2+0x3a>
 80005c6:	404b      	eors	r3, r1
 80005c8:	0018      	movs	r0, r3
 80005ca:	e7f6      	b.n	80005ba <__eqsf2+0x3a>
 80005cc:	2000      	movs	r0, #0
 80005ce:	e7f4      	b.n	80005ba <__eqsf2+0x3a>

080005d0 <__gesf2>:
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	0042      	lsls	r2, r0, #1
 80005d4:	0244      	lsls	r4, r0, #9
 80005d6:	024d      	lsls	r5, r1, #9
 80005d8:	0fc3      	lsrs	r3, r0, #31
 80005da:	0048      	lsls	r0, r1, #1
 80005dc:	0a64      	lsrs	r4, r4, #9
 80005de:	0e12      	lsrs	r2, r2, #24
 80005e0:	0a6d      	lsrs	r5, r5, #9
 80005e2:	0e00      	lsrs	r0, r0, #24
 80005e4:	0fc9      	lsrs	r1, r1, #31
 80005e6:	2aff      	cmp	r2, #255	@ 0xff
 80005e8:	d019      	beq.n	800061e <__gesf2+0x4e>
 80005ea:	28ff      	cmp	r0, #255	@ 0xff
 80005ec:	d00b      	beq.n	8000606 <__gesf2+0x36>
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d11e      	bne.n	8000630 <__gesf2+0x60>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d10b      	bne.n	800060e <__gesf2+0x3e>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d027      	beq.n	800064a <__gesf2+0x7a>
 80005fa:	2c00      	cmp	r4, #0
 80005fc:	d134      	bne.n	8000668 <__gesf2+0x98>
 80005fe:	2900      	cmp	r1, #0
 8000600:	d02f      	beq.n	8000662 <__gesf2+0x92>
 8000602:	0008      	movs	r0, r1
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	2d00      	cmp	r5, #0
 8000608:	d128      	bne.n	800065c <__gesf2+0x8c>
 800060a:	2a00      	cmp	r2, #0
 800060c:	d101      	bne.n	8000612 <__gesf2+0x42>
 800060e:	2c00      	cmp	r4, #0
 8000610:	d0f5      	beq.n	80005fe <__gesf2+0x2e>
 8000612:	428b      	cmp	r3, r1
 8000614:	d107      	bne.n	8000626 <__gesf2+0x56>
 8000616:	2b00      	cmp	r3, #0
 8000618:	d023      	beq.n	8000662 <__gesf2+0x92>
 800061a:	0018      	movs	r0, r3
 800061c:	e7f2      	b.n	8000604 <__gesf2+0x34>
 800061e:	2c00      	cmp	r4, #0
 8000620:	d11c      	bne.n	800065c <__gesf2+0x8c>
 8000622:	28ff      	cmp	r0, #255	@ 0xff
 8000624:	d014      	beq.n	8000650 <__gesf2+0x80>
 8000626:	1e58      	subs	r0, r3, #1
 8000628:	2302      	movs	r3, #2
 800062a:	4018      	ands	r0, r3
 800062c:	3801      	subs	r0, #1
 800062e:	e7e9      	b.n	8000604 <__gesf2+0x34>
 8000630:	2800      	cmp	r0, #0
 8000632:	d0f8      	beq.n	8000626 <__gesf2+0x56>
 8000634:	428b      	cmp	r3, r1
 8000636:	d1f6      	bne.n	8000626 <__gesf2+0x56>
 8000638:	4282      	cmp	r2, r0
 800063a:	dcf4      	bgt.n	8000626 <__gesf2+0x56>
 800063c:	dbeb      	blt.n	8000616 <__gesf2+0x46>
 800063e:	42ac      	cmp	r4, r5
 8000640:	d8f1      	bhi.n	8000626 <__gesf2+0x56>
 8000642:	2000      	movs	r0, #0
 8000644:	42ac      	cmp	r4, r5
 8000646:	d2dd      	bcs.n	8000604 <__gesf2+0x34>
 8000648:	e7e5      	b.n	8000616 <__gesf2+0x46>
 800064a:	2c00      	cmp	r4, #0
 800064c:	d0da      	beq.n	8000604 <__gesf2+0x34>
 800064e:	e7ea      	b.n	8000626 <__gesf2+0x56>
 8000650:	2d00      	cmp	r5, #0
 8000652:	d103      	bne.n	800065c <__gesf2+0x8c>
 8000654:	428b      	cmp	r3, r1
 8000656:	d1e6      	bne.n	8000626 <__gesf2+0x56>
 8000658:	2000      	movs	r0, #0
 800065a:	e7d3      	b.n	8000604 <__gesf2+0x34>
 800065c:	2002      	movs	r0, #2
 800065e:	4240      	negs	r0, r0
 8000660:	e7d0      	b.n	8000604 <__gesf2+0x34>
 8000662:	2001      	movs	r0, #1
 8000664:	4240      	negs	r0, r0
 8000666:	e7cd      	b.n	8000604 <__gesf2+0x34>
 8000668:	428b      	cmp	r3, r1
 800066a:	d0e8      	beq.n	800063e <__gesf2+0x6e>
 800066c:	e7db      	b.n	8000626 <__gesf2+0x56>
 800066e:	46c0      	nop			@ (mov r8, r8)

08000670 <__lesf2>:
 8000670:	b530      	push	{r4, r5, lr}
 8000672:	0042      	lsls	r2, r0, #1
 8000674:	0244      	lsls	r4, r0, #9
 8000676:	024d      	lsls	r5, r1, #9
 8000678:	0fc3      	lsrs	r3, r0, #31
 800067a:	0048      	lsls	r0, r1, #1
 800067c:	0a64      	lsrs	r4, r4, #9
 800067e:	0e12      	lsrs	r2, r2, #24
 8000680:	0a6d      	lsrs	r5, r5, #9
 8000682:	0e00      	lsrs	r0, r0, #24
 8000684:	0fc9      	lsrs	r1, r1, #31
 8000686:	2aff      	cmp	r2, #255	@ 0xff
 8000688:	d01a      	beq.n	80006c0 <__lesf2+0x50>
 800068a:	28ff      	cmp	r0, #255	@ 0xff
 800068c:	d00e      	beq.n	80006ac <__lesf2+0x3c>
 800068e:	2a00      	cmp	r2, #0
 8000690:	d11e      	bne.n	80006d0 <__lesf2+0x60>
 8000692:	2800      	cmp	r0, #0
 8000694:	d10e      	bne.n	80006b4 <__lesf2+0x44>
 8000696:	2d00      	cmp	r5, #0
 8000698:	d02a      	beq.n	80006f0 <__lesf2+0x80>
 800069a:	2c00      	cmp	r4, #0
 800069c:	d00c      	beq.n	80006b8 <__lesf2+0x48>
 800069e:	428b      	cmp	r3, r1
 80006a0:	d01d      	beq.n	80006de <__lesf2+0x6e>
 80006a2:	1e58      	subs	r0, r3, #1
 80006a4:	2302      	movs	r3, #2
 80006a6:	4018      	ands	r0, r3
 80006a8:	3801      	subs	r0, #1
 80006aa:	e010      	b.n	80006ce <__lesf2+0x5e>
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d10d      	bne.n	80006cc <__lesf2+0x5c>
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d120      	bne.n	80006f6 <__lesf2+0x86>
 80006b4:	2c00      	cmp	r4, #0
 80006b6:	d11e      	bne.n	80006f6 <__lesf2+0x86>
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d023      	beq.n	8000704 <__lesf2+0x94>
 80006bc:	0008      	movs	r0, r1
 80006be:	e006      	b.n	80006ce <__lesf2+0x5e>
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	d103      	bne.n	80006cc <__lesf2+0x5c>
 80006c4:	28ff      	cmp	r0, #255	@ 0xff
 80006c6:	d1ec      	bne.n	80006a2 <__lesf2+0x32>
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	d017      	beq.n	80006fc <__lesf2+0x8c>
 80006cc:	2002      	movs	r0, #2
 80006ce:	bd30      	pop	{r4, r5, pc}
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d0e6      	beq.n	80006a2 <__lesf2+0x32>
 80006d4:	428b      	cmp	r3, r1
 80006d6:	d1e4      	bne.n	80006a2 <__lesf2+0x32>
 80006d8:	4282      	cmp	r2, r0
 80006da:	dce2      	bgt.n	80006a2 <__lesf2+0x32>
 80006dc:	db04      	blt.n	80006e8 <__lesf2+0x78>
 80006de:	42ac      	cmp	r4, r5
 80006e0:	d8df      	bhi.n	80006a2 <__lesf2+0x32>
 80006e2:	2000      	movs	r0, #0
 80006e4:	42ac      	cmp	r4, r5
 80006e6:	d2f2      	bcs.n	80006ce <__lesf2+0x5e>
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00b      	beq.n	8000704 <__lesf2+0x94>
 80006ec:	0018      	movs	r0, r3
 80006ee:	e7ee      	b.n	80006ce <__lesf2+0x5e>
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	d0ec      	beq.n	80006ce <__lesf2+0x5e>
 80006f4:	e7d5      	b.n	80006a2 <__lesf2+0x32>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d1d3      	bne.n	80006a2 <__lesf2+0x32>
 80006fa:	e7f5      	b.n	80006e8 <__lesf2+0x78>
 80006fc:	2000      	movs	r0, #0
 80006fe:	428b      	cmp	r3, r1
 8000700:	d0e5      	beq.n	80006ce <__lesf2+0x5e>
 8000702:	e7ce      	b.n	80006a2 <__lesf2+0x32>
 8000704:	2001      	movs	r0, #1
 8000706:	4240      	negs	r0, r0
 8000708:	e7e1      	b.n	80006ce <__lesf2+0x5e>
 800070a:	46c0      	nop			@ (mov r8, r8)

0800070c <__aeabi_fsub>:
 800070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070e:	4647      	mov	r7, r8
 8000710:	46ce      	mov	lr, r9
 8000712:	024e      	lsls	r6, r1, #9
 8000714:	0243      	lsls	r3, r0, #9
 8000716:	0045      	lsls	r5, r0, #1
 8000718:	0a72      	lsrs	r2, r6, #9
 800071a:	0fc4      	lsrs	r4, r0, #31
 800071c:	0048      	lsls	r0, r1, #1
 800071e:	b580      	push	{r7, lr}
 8000720:	4694      	mov	ip, r2
 8000722:	0a5f      	lsrs	r7, r3, #9
 8000724:	0e2d      	lsrs	r5, r5, #24
 8000726:	099b      	lsrs	r3, r3, #6
 8000728:	0e00      	lsrs	r0, r0, #24
 800072a:	0fc9      	lsrs	r1, r1, #31
 800072c:	09b6      	lsrs	r6, r6, #6
 800072e:	28ff      	cmp	r0, #255	@ 0xff
 8000730:	d024      	beq.n	800077c <__aeabi_fsub+0x70>
 8000732:	2201      	movs	r2, #1
 8000734:	4051      	eors	r1, r2
 8000736:	1a2a      	subs	r2, r5, r0
 8000738:	428c      	cmp	r4, r1
 800073a:	d00f      	beq.n	800075c <__aeabi_fsub+0x50>
 800073c:	2a00      	cmp	r2, #0
 800073e:	dc00      	bgt.n	8000742 <__aeabi_fsub+0x36>
 8000740:	e16a      	b.n	8000a18 <__aeabi_fsub+0x30c>
 8000742:	2800      	cmp	r0, #0
 8000744:	d135      	bne.n	80007b2 <__aeabi_fsub+0xa6>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fsub+0x40>
 800074a:	e0a2      	b.n	8000892 <__aeabi_fsub+0x186>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fsub+0x48>
 8000752:	e124      	b.n	800099e <__aeabi_fsub+0x292>
 8000754:	2aff      	cmp	r2, #255	@ 0xff
 8000756:	d021      	beq.n	800079c <__aeabi_fsub+0x90>
 8000758:	000a      	movs	r2, r1
 800075a:	e02f      	b.n	80007bc <__aeabi_fsub+0xb0>
 800075c:	2a00      	cmp	r2, #0
 800075e:	dc00      	bgt.n	8000762 <__aeabi_fsub+0x56>
 8000760:	e167      	b.n	8000a32 <__aeabi_fsub+0x326>
 8000762:	2800      	cmp	r0, #0
 8000764:	d05e      	beq.n	8000824 <__aeabi_fsub+0x118>
 8000766:	2dff      	cmp	r5, #255	@ 0xff
 8000768:	d018      	beq.n	800079c <__aeabi_fsub+0x90>
 800076a:	2180      	movs	r1, #128	@ 0x80
 800076c:	04c9      	lsls	r1, r1, #19
 800076e:	430e      	orrs	r6, r1
 8000770:	2a1b      	cmp	r2, #27
 8000772:	dc00      	bgt.n	8000776 <__aeabi_fsub+0x6a>
 8000774:	e076      	b.n	8000864 <__aeabi_fsub+0x158>
 8000776:	002a      	movs	r2, r5
 8000778:	3301      	adds	r3, #1
 800077a:	e032      	b.n	80007e2 <__aeabi_fsub+0xd6>
 800077c:	002a      	movs	r2, r5
 800077e:	3aff      	subs	r2, #255	@ 0xff
 8000780:	4691      	mov	r9, r2
 8000782:	2e00      	cmp	r6, #0
 8000784:	d042      	beq.n	800080c <__aeabi_fsub+0x100>
 8000786:	428c      	cmp	r4, r1
 8000788:	d055      	beq.n	8000836 <__aeabi_fsub+0x12a>
 800078a:	464a      	mov	r2, r9
 800078c:	2a00      	cmp	r2, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_fsub+0x86>
 8000790:	e09c      	b.n	80008cc <__aeabi_fsub+0x1c0>
 8000792:	2d00      	cmp	r5, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fsub+0x8c>
 8000796:	e077      	b.n	8000888 <__aeabi_fsub+0x17c>
 8000798:	000c      	movs	r4, r1
 800079a:	0033      	movs	r3, r6
 800079c:	08db      	lsrs	r3, r3, #3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fsub+0x98>
 80007a2:	e06e      	b.n	8000882 <__aeabi_fsub+0x176>
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	03d2      	lsls	r2, r2, #15
 80007a8:	4313      	orrs	r3, r2
 80007aa:	025b      	lsls	r3, r3, #9
 80007ac:	20ff      	movs	r0, #255	@ 0xff
 80007ae:	0a5b      	lsrs	r3, r3, #9
 80007b0:	e024      	b.n	80007fc <__aeabi_fsub+0xf0>
 80007b2:	2dff      	cmp	r5, #255	@ 0xff
 80007b4:	d0f2      	beq.n	800079c <__aeabi_fsub+0x90>
 80007b6:	2180      	movs	r1, #128	@ 0x80
 80007b8:	04c9      	lsls	r1, r1, #19
 80007ba:	430e      	orrs	r6, r1
 80007bc:	2101      	movs	r1, #1
 80007be:	2a1b      	cmp	r2, #27
 80007c0:	dc08      	bgt.n	80007d4 <__aeabi_fsub+0xc8>
 80007c2:	0031      	movs	r1, r6
 80007c4:	2020      	movs	r0, #32
 80007c6:	40d1      	lsrs	r1, r2
 80007c8:	1a82      	subs	r2, r0, r2
 80007ca:	4096      	lsls	r6, r2
 80007cc:	0032      	movs	r2, r6
 80007ce:	1e50      	subs	r0, r2, #1
 80007d0:	4182      	sbcs	r2, r0
 80007d2:	4311      	orrs	r1, r2
 80007d4:	1a5b      	subs	r3, r3, r1
 80007d6:	015a      	lsls	r2, r3, #5
 80007d8:	d460      	bmi.n	800089c <__aeabi_fsub+0x190>
 80007da:	2107      	movs	r1, #7
 80007dc:	002a      	movs	r2, r5
 80007de:	4019      	ands	r1, r3
 80007e0:	d057      	beq.n	8000892 <__aeabi_fsub+0x186>
 80007e2:	210f      	movs	r1, #15
 80007e4:	4019      	ands	r1, r3
 80007e6:	2904      	cmp	r1, #4
 80007e8:	d000      	beq.n	80007ec <__aeabi_fsub+0xe0>
 80007ea:	3304      	adds	r3, #4
 80007ec:	0159      	lsls	r1, r3, #5
 80007ee:	d550      	bpl.n	8000892 <__aeabi_fsub+0x186>
 80007f0:	1c50      	adds	r0, r2, #1
 80007f2:	2afe      	cmp	r2, #254	@ 0xfe
 80007f4:	d045      	beq.n	8000882 <__aeabi_fsub+0x176>
 80007f6:	019b      	lsls	r3, r3, #6
 80007f8:	b2c0      	uxtb	r0, r0
 80007fa:	0a5b      	lsrs	r3, r3, #9
 80007fc:	05c0      	lsls	r0, r0, #23
 80007fe:	4318      	orrs	r0, r3
 8000800:	07e4      	lsls	r4, r4, #31
 8000802:	4320      	orrs	r0, r4
 8000804:	bcc0      	pop	{r6, r7}
 8000806:	46b9      	mov	r9, r7
 8000808:	46b0      	mov	r8, r6
 800080a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800080c:	2201      	movs	r2, #1
 800080e:	4051      	eors	r1, r2
 8000810:	428c      	cmp	r4, r1
 8000812:	d1ba      	bne.n	800078a <__aeabi_fsub+0x7e>
 8000814:	464a      	mov	r2, r9
 8000816:	2a00      	cmp	r2, #0
 8000818:	d010      	beq.n	800083c <__aeabi_fsub+0x130>
 800081a:	2d00      	cmp	r5, #0
 800081c:	d100      	bne.n	8000820 <__aeabi_fsub+0x114>
 800081e:	e098      	b.n	8000952 <__aeabi_fsub+0x246>
 8000820:	2300      	movs	r3, #0
 8000822:	e7bb      	b.n	800079c <__aeabi_fsub+0x90>
 8000824:	2e00      	cmp	r6, #0
 8000826:	d034      	beq.n	8000892 <__aeabi_fsub+0x186>
 8000828:	1e51      	subs	r1, r2, #1
 800082a:	2a01      	cmp	r2, #1
 800082c:	d06e      	beq.n	800090c <__aeabi_fsub+0x200>
 800082e:	2aff      	cmp	r2, #255	@ 0xff
 8000830:	d0b4      	beq.n	800079c <__aeabi_fsub+0x90>
 8000832:	000a      	movs	r2, r1
 8000834:	e79c      	b.n	8000770 <__aeabi_fsub+0x64>
 8000836:	2a00      	cmp	r2, #0
 8000838:	d000      	beq.n	800083c <__aeabi_fsub+0x130>
 800083a:	e088      	b.n	800094e <__aeabi_fsub+0x242>
 800083c:	20fe      	movs	r0, #254	@ 0xfe
 800083e:	1c6a      	adds	r2, r5, #1
 8000840:	4210      	tst	r0, r2
 8000842:	d000      	beq.n	8000846 <__aeabi_fsub+0x13a>
 8000844:	e092      	b.n	800096c <__aeabi_fsub+0x260>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d000      	beq.n	800084c <__aeabi_fsub+0x140>
 800084a:	e0a4      	b.n	8000996 <__aeabi_fsub+0x28a>
 800084c:	2b00      	cmp	r3, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_fsub+0x146>
 8000850:	e0cb      	b.n	80009ea <__aeabi_fsub+0x2de>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d000      	beq.n	8000858 <__aeabi_fsub+0x14c>
 8000856:	e0ca      	b.n	80009ee <__aeabi_fsub+0x2e2>
 8000858:	2200      	movs	r2, #0
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	025b      	lsls	r3, r3, #9
 800085e:	0a5b      	lsrs	r3, r3, #9
 8000860:	b2d0      	uxtb	r0, r2
 8000862:	e7cb      	b.n	80007fc <__aeabi_fsub+0xf0>
 8000864:	0031      	movs	r1, r6
 8000866:	2020      	movs	r0, #32
 8000868:	40d1      	lsrs	r1, r2
 800086a:	1a82      	subs	r2, r0, r2
 800086c:	4096      	lsls	r6, r2
 800086e:	0032      	movs	r2, r6
 8000870:	1e50      	subs	r0, r2, #1
 8000872:	4182      	sbcs	r2, r0
 8000874:	430a      	orrs	r2, r1
 8000876:	189b      	adds	r3, r3, r2
 8000878:	015a      	lsls	r2, r3, #5
 800087a:	d5ae      	bpl.n	80007da <__aeabi_fsub+0xce>
 800087c:	1c6a      	adds	r2, r5, #1
 800087e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000880:	d14a      	bne.n	8000918 <__aeabi_fsub+0x20c>
 8000882:	20ff      	movs	r0, #255	@ 0xff
 8000884:	2300      	movs	r3, #0
 8000886:	e7b9      	b.n	80007fc <__aeabi_fsub+0xf0>
 8000888:	22ff      	movs	r2, #255	@ 0xff
 800088a:	2b00      	cmp	r3, #0
 800088c:	d14b      	bne.n	8000926 <__aeabi_fsub+0x21a>
 800088e:	000c      	movs	r4, r1
 8000890:	0033      	movs	r3, r6
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	2aff      	cmp	r2, #255	@ 0xff
 8000896:	d100      	bne.n	800089a <__aeabi_fsub+0x18e>
 8000898:	e781      	b.n	800079e <__aeabi_fsub+0x92>
 800089a:	e7df      	b.n	800085c <__aeabi_fsub+0x150>
 800089c:	019f      	lsls	r7, r3, #6
 800089e:	09bf      	lsrs	r7, r7, #6
 80008a0:	0038      	movs	r0, r7
 80008a2:	f002 f837 	bl	8002914 <__clzsi2>
 80008a6:	3805      	subs	r0, #5
 80008a8:	4087      	lsls	r7, r0
 80008aa:	4285      	cmp	r5, r0
 80008ac:	dc21      	bgt.n	80008f2 <__aeabi_fsub+0x1e6>
 80008ae:	003b      	movs	r3, r7
 80008b0:	2120      	movs	r1, #32
 80008b2:	1b42      	subs	r2, r0, r5
 80008b4:	3201      	adds	r2, #1
 80008b6:	40d3      	lsrs	r3, r2
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	4097      	lsls	r7, r2
 80008bc:	1e7a      	subs	r2, r7, #1
 80008be:	4197      	sbcs	r7, r2
 80008c0:	2200      	movs	r2, #0
 80008c2:	433b      	orrs	r3, r7
 80008c4:	0759      	lsls	r1, r3, #29
 80008c6:	d000      	beq.n	80008ca <__aeabi_fsub+0x1be>
 80008c8:	e78b      	b.n	80007e2 <__aeabi_fsub+0xd6>
 80008ca:	e78f      	b.n	80007ec <__aeabi_fsub+0xe0>
 80008cc:	20fe      	movs	r0, #254	@ 0xfe
 80008ce:	1c6a      	adds	r2, r5, #1
 80008d0:	4210      	tst	r0, r2
 80008d2:	d112      	bne.n	80008fa <__aeabi_fsub+0x1ee>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d152      	bne.n	800097e <__aeabi_fsub+0x272>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d07c      	beq.n	80009d6 <__aeabi_fsub+0x2ca>
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d0bb      	beq.n	8000858 <__aeabi_fsub+0x14c>
 80008e0:	1b9a      	subs	r2, r3, r6
 80008e2:	0150      	lsls	r0, r2, #5
 80008e4:	d400      	bmi.n	80008e8 <__aeabi_fsub+0x1dc>
 80008e6:	e08b      	b.n	8000a00 <__aeabi_fsub+0x2f4>
 80008e8:	2401      	movs	r4, #1
 80008ea:	2200      	movs	r2, #0
 80008ec:	1af3      	subs	r3, r6, r3
 80008ee:	400c      	ands	r4, r1
 80008f0:	e7e8      	b.n	80008c4 <__aeabi_fsub+0x1b8>
 80008f2:	4b56      	ldr	r3, [pc, #344]	@ (8000a4c <__aeabi_fsub+0x340>)
 80008f4:	1a2a      	subs	r2, r5, r0
 80008f6:	403b      	ands	r3, r7
 80008f8:	e7e4      	b.n	80008c4 <__aeabi_fsub+0x1b8>
 80008fa:	1b9f      	subs	r7, r3, r6
 80008fc:	017a      	lsls	r2, r7, #5
 80008fe:	d446      	bmi.n	800098e <__aeabi_fsub+0x282>
 8000900:	2f00      	cmp	r7, #0
 8000902:	d1cd      	bne.n	80008a0 <__aeabi_fsub+0x194>
 8000904:	2400      	movs	r4, #0
 8000906:	2000      	movs	r0, #0
 8000908:	2300      	movs	r3, #0
 800090a:	e777      	b.n	80007fc <__aeabi_fsub+0xf0>
 800090c:	199b      	adds	r3, r3, r6
 800090e:	2501      	movs	r5, #1
 8000910:	3201      	adds	r2, #1
 8000912:	0159      	lsls	r1, r3, #5
 8000914:	d400      	bmi.n	8000918 <__aeabi_fsub+0x20c>
 8000916:	e760      	b.n	80007da <__aeabi_fsub+0xce>
 8000918:	2101      	movs	r1, #1
 800091a:	484d      	ldr	r0, [pc, #308]	@ (8000a50 <__aeabi_fsub+0x344>)
 800091c:	4019      	ands	r1, r3
 800091e:	085b      	lsrs	r3, r3, #1
 8000920:	4003      	ands	r3, r0
 8000922:	430b      	orrs	r3, r1
 8000924:	e7ce      	b.n	80008c4 <__aeabi_fsub+0x1b8>
 8000926:	1e57      	subs	r7, r2, #1
 8000928:	2a01      	cmp	r2, #1
 800092a:	d05a      	beq.n	80009e2 <__aeabi_fsub+0x2d6>
 800092c:	000c      	movs	r4, r1
 800092e:	2aff      	cmp	r2, #255	@ 0xff
 8000930:	d033      	beq.n	800099a <__aeabi_fsub+0x28e>
 8000932:	2201      	movs	r2, #1
 8000934:	2f1b      	cmp	r7, #27
 8000936:	dc07      	bgt.n	8000948 <__aeabi_fsub+0x23c>
 8000938:	2120      	movs	r1, #32
 800093a:	1bc9      	subs	r1, r1, r7
 800093c:	001a      	movs	r2, r3
 800093e:	408b      	lsls	r3, r1
 8000940:	40fa      	lsrs	r2, r7
 8000942:	1e59      	subs	r1, r3, #1
 8000944:	418b      	sbcs	r3, r1
 8000946:	431a      	orrs	r2, r3
 8000948:	0005      	movs	r5, r0
 800094a:	1ab3      	subs	r3, r6, r2
 800094c:	e743      	b.n	80007d6 <__aeabi_fsub+0xca>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d123      	bne.n	800099a <__aeabi_fsub+0x28e>
 8000952:	22ff      	movs	r2, #255	@ 0xff
 8000954:	2b00      	cmp	r3, #0
 8000956:	d09b      	beq.n	8000890 <__aeabi_fsub+0x184>
 8000958:	1e51      	subs	r1, r2, #1
 800095a:	2a01      	cmp	r2, #1
 800095c:	d0d6      	beq.n	800090c <__aeabi_fsub+0x200>
 800095e:	2aff      	cmp	r2, #255	@ 0xff
 8000960:	d01b      	beq.n	800099a <__aeabi_fsub+0x28e>
 8000962:	291b      	cmp	r1, #27
 8000964:	dd2c      	ble.n	80009c0 <__aeabi_fsub+0x2b4>
 8000966:	0002      	movs	r2, r0
 8000968:	1c73      	adds	r3, r6, #1
 800096a:	e73a      	b.n	80007e2 <__aeabi_fsub+0xd6>
 800096c:	2aff      	cmp	r2, #255	@ 0xff
 800096e:	d088      	beq.n	8000882 <__aeabi_fsub+0x176>
 8000970:	199b      	adds	r3, r3, r6
 8000972:	085b      	lsrs	r3, r3, #1
 8000974:	0759      	lsls	r1, r3, #29
 8000976:	d000      	beq.n	800097a <__aeabi_fsub+0x26e>
 8000978:	e733      	b.n	80007e2 <__aeabi_fsub+0xd6>
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	e76e      	b.n	800085c <__aeabi_fsub+0x150>
 800097e:	2b00      	cmp	r3, #0
 8000980:	d110      	bne.n	80009a4 <__aeabi_fsub+0x298>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d043      	beq.n	8000a0e <__aeabi_fsub+0x302>
 8000986:	2401      	movs	r4, #1
 8000988:	0033      	movs	r3, r6
 800098a:	400c      	ands	r4, r1
 800098c:	e706      	b.n	800079c <__aeabi_fsub+0x90>
 800098e:	2401      	movs	r4, #1
 8000990:	1af7      	subs	r7, r6, r3
 8000992:	400c      	ands	r4, r1
 8000994:	e784      	b.n	80008a0 <__aeabi_fsub+0x194>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d104      	bne.n	80009a4 <__aeabi_fsub+0x298>
 800099a:	0033      	movs	r3, r6
 800099c:	e6fe      	b.n	800079c <__aeabi_fsub+0x90>
 800099e:	2501      	movs	r5, #1
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	e718      	b.n	80007d6 <__aeabi_fsub+0xca>
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fsub+0x29e>
 80009a8:	e6f8      	b.n	800079c <__aeabi_fsub+0x90>
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	03d2      	lsls	r2, r2, #15
 80009ae:	4297      	cmp	r7, r2
 80009b0:	d304      	bcc.n	80009bc <__aeabi_fsub+0x2b0>
 80009b2:	4594      	cmp	ip, r2
 80009b4:	d202      	bcs.n	80009bc <__aeabi_fsub+0x2b0>
 80009b6:	2401      	movs	r4, #1
 80009b8:	0033      	movs	r3, r6
 80009ba:	400c      	ands	r4, r1
 80009bc:	08db      	lsrs	r3, r3, #3
 80009be:	e6f1      	b.n	80007a4 <__aeabi_fsub+0x98>
 80009c0:	001a      	movs	r2, r3
 80009c2:	2520      	movs	r5, #32
 80009c4:	40ca      	lsrs	r2, r1
 80009c6:	1a69      	subs	r1, r5, r1
 80009c8:	408b      	lsls	r3, r1
 80009ca:	1e59      	subs	r1, r3, #1
 80009cc:	418b      	sbcs	r3, r1
 80009ce:	4313      	orrs	r3, r2
 80009d0:	0005      	movs	r5, r0
 80009d2:	199b      	adds	r3, r3, r6
 80009d4:	e750      	b.n	8000878 <__aeabi_fsub+0x16c>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d094      	beq.n	8000904 <__aeabi_fsub+0x1f8>
 80009da:	2401      	movs	r4, #1
 80009dc:	0033      	movs	r3, r6
 80009de:	400c      	ands	r4, r1
 80009e0:	e73a      	b.n	8000858 <__aeabi_fsub+0x14c>
 80009e2:	000c      	movs	r4, r1
 80009e4:	2501      	movs	r5, #1
 80009e6:	1af3      	subs	r3, r6, r3
 80009e8:	e6f5      	b.n	80007d6 <__aeabi_fsub+0xca>
 80009ea:	0033      	movs	r3, r6
 80009ec:	e734      	b.n	8000858 <__aeabi_fsub+0x14c>
 80009ee:	199b      	adds	r3, r3, r6
 80009f0:	2200      	movs	r2, #0
 80009f2:	0159      	lsls	r1, r3, #5
 80009f4:	d5c1      	bpl.n	800097a <__aeabi_fsub+0x26e>
 80009f6:	4a15      	ldr	r2, [pc, #84]	@ (8000a4c <__aeabi_fsub+0x340>)
 80009f8:	4013      	ands	r3, r2
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	2201      	movs	r2, #1
 80009fe:	e72d      	b.n	800085c <__aeabi_fsub+0x150>
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fsub+0x2fa>
 8000a04:	e77e      	b.n	8000904 <__aeabi_fsub+0x1f8>
 8000a06:	0013      	movs	r3, r2
 8000a08:	2200      	movs	r2, #0
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	e726      	b.n	800085c <__aeabi_fsub+0x150>
 8000a0e:	2380      	movs	r3, #128	@ 0x80
 8000a10:	2400      	movs	r4, #0
 8000a12:	20ff      	movs	r0, #255	@ 0xff
 8000a14:	03db      	lsls	r3, r3, #15
 8000a16:	e6f1      	b.n	80007fc <__aeabi_fsub+0xf0>
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fsub+0x312>
 8000a1c:	e756      	b.n	80008cc <__aeabi_fsub+0x1c0>
 8000a1e:	1b47      	subs	r7, r0, r5
 8000a20:	003a      	movs	r2, r7
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fsub+0x31c>
 8000a26:	e730      	b.n	800088a <__aeabi_fsub+0x17e>
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	04d2      	lsls	r2, r2, #19
 8000a2c:	000c      	movs	r4, r1
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	e77f      	b.n	8000932 <__aeabi_fsub+0x226>
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fsub+0x32c>
 8000a36:	e701      	b.n	800083c <__aeabi_fsub+0x130>
 8000a38:	1b41      	subs	r1, r0, r5
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d101      	bne.n	8000a42 <__aeabi_fsub+0x336>
 8000a3e:	000a      	movs	r2, r1
 8000a40:	e788      	b.n	8000954 <__aeabi_fsub+0x248>
 8000a42:	2280      	movs	r2, #128	@ 0x80
 8000a44:	04d2      	lsls	r2, r2, #19
 8000a46:	4313      	orrs	r3, r2
 8000a48:	e78b      	b.n	8000962 <__aeabi_fsub+0x256>
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	fbffffff 	.word	0xfbffffff
 8000a50:	7dffffff 	.word	0x7dffffff

08000a54 <__aeabi_f2iz>:
 8000a54:	0241      	lsls	r1, r0, #9
 8000a56:	0042      	lsls	r2, r0, #1
 8000a58:	0fc3      	lsrs	r3, r0, #31
 8000a5a:	0a49      	lsrs	r1, r1, #9
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	0e12      	lsrs	r2, r2, #24
 8000a60:	2a7e      	cmp	r2, #126	@ 0x7e
 8000a62:	dd03      	ble.n	8000a6c <__aeabi_f2iz+0x18>
 8000a64:	2a9d      	cmp	r2, #157	@ 0x9d
 8000a66:	dd02      	ble.n	8000a6e <__aeabi_f2iz+0x1a>
 8000a68:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <__aeabi_f2iz+0x3c>)
 8000a6a:	1898      	adds	r0, r3, r2
 8000a6c:	4770      	bx	lr
 8000a6e:	2080      	movs	r0, #128	@ 0x80
 8000a70:	0400      	lsls	r0, r0, #16
 8000a72:	4301      	orrs	r1, r0
 8000a74:	2a95      	cmp	r2, #149	@ 0x95
 8000a76:	dc07      	bgt.n	8000a88 <__aeabi_f2iz+0x34>
 8000a78:	2096      	movs	r0, #150	@ 0x96
 8000a7a:	1a82      	subs	r2, r0, r2
 8000a7c:	40d1      	lsrs	r1, r2
 8000a7e:	4248      	negs	r0, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f3      	bne.n	8000a6c <__aeabi_f2iz+0x18>
 8000a84:	0008      	movs	r0, r1
 8000a86:	e7f1      	b.n	8000a6c <__aeabi_f2iz+0x18>
 8000a88:	3a96      	subs	r2, #150	@ 0x96
 8000a8a:	4091      	lsls	r1, r2
 8000a8c:	e7f7      	b.n	8000a7e <__aeabi_f2iz+0x2a>
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	7fffffff 	.word	0x7fffffff

08000a94 <__aeabi_dadd>:
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a96:	4657      	mov	r7, sl
 8000a98:	464e      	mov	r6, r9
 8000a9a:	4645      	mov	r5, r8
 8000a9c:	46de      	mov	lr, fp
 8000a9e:	b5e0      	push	{r5, r6, r7, lr}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	9000      	str	r0, [sp, #0]
 8000aa4:	9101      	str	r1, [sp, #4]
 8000aa6:	030c      	lsls	r4, r1, #12
 8000aa8:	004f      	lsls	r7, r1, #1
 8000aaa:	0fce      	lsrs	r6, r1, #31
 8000aac:	0a61      	lsrs	r1, r4, #9
 8000aae:	9c00      	ldr	r4, [sp, #0]
 8000ab0:	031d      	lsls	r5, r3, #12
 8000ab2:	0f64      	lsrs	r4, r4, #29
 8000ab4:	430c      	orrs	r4, r1
 8000ab6:	9900      	ldr	r1, [sp, #0]
 8000ab8:	9200      	str	r2, [sp, #0]
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	00c8      	lsls	r0, r1, #3
 8000abe:	0059      	lsls	r1, r3, #1
 8000ac0:	0d4b      	lsrs	r3, r1, #21
 8000ac2:	4699      	mov	r9, r3
 8000ac4:	9a00      	ldr	r2, [sp, #0]
 8000ac6:	9b01      	ldr	r3, [sp, #4]
 8000ac8:	0a6d      	lsrs	r5, r5, #9
 8000aca:	0fd9      	lsrs	r1, r3, #31
 8000acc:	0f53      	lsrs	r3, r2, #29
 8000ace:	432b      	orrs	r3, r5
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	9b00      	ldr	r3, [sp, #0]
 8000ad4:	0d7f      	lsrs	r7, r7, #21
 8000ad6:	00da      	lsls	r2, r3, #3
 8000ad8:	4694      	mov	ip, r2
 8000ada:	464a      	mov	r2, r9
 8000adc:	46b0      	mov	r8, r6
 8000ade:	1aba      	subs	r2, r7, r2
 8000ae0:	428e      	cmp	r6, r1
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_dadd+0x52>
 8000ae4:	e0b0      	b.n	8000c48 <__aeabi_dadd+0x1b4>
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	dc00      	bgt.n	8000aec <__aeabi_dadd+0x58>
 8000aea:	e078      	b.n	8000bde <__aeabi_dadd+0x14a>
 8000aec:	4649      	mov	r1, r9
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dadd+0x60>
 8000af2:	e0e9      	b.n	8000cc8 <__aeabi_dadd+0x234>
 8000af4:	49c9      	ldr	r1, [pc, #804]	@ (8000e1c <__aeabi_dadd+0x388>)
 8000af6:	428f      	cmp	r7, r1
 8000af8:	d100      	bne.n	8000afc <__aeabi_dadd+0x68>
 8000afa:	e195      	b.n	8000e28 <__aeabi_dadd+0x394>
 8000afc:	2501      	movs	r5, #1
 8000afe:	2a38      	cmp	r2, #56	@ 0x38
 8000b00:	dc16      	bgt.n	8000b30 <__aeabi_dadd+0x9c>
 8000b02:	2180      	movs	r1, #128	@ 0x80
 8000b04:	4653      	mov	r3, sl
 8000b06:	0409      	lsls	r1, r1, #16
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	469a      	mov	sl, r3
 8000b0c:	2a1f      	cmp	r2, #31
 8000b0e:	dd00      	ble.n	8000b12 <__aeabi_dadd+0x7e>
 8000b10:	e1e7      	b.n	8000ee2 <__aeabi_dadd+0x44e>
 8000b12:	2120      	movs	r1, #32
 8000b14:	4655      	mov	r5, sl
 8000b16:	1a8b      	subs	r3, r1, r2
 8000b18:	4661      	mov	r1, ip
 8000b1a:	409d      	lsls	r5, r3
 8000b1c:	40d1      	lsrs	r1, r2
 8000b1e:	430d      	orrs	r5, r1
 8000b20:	4661      	mov	r1, ip
 8000b22:	4099      	lsls	r1, r3
 8000b24:	1e4b      	subs	r3, r1, #1
 8000b26:	4199      	sbcs	r1, r3
 8000b28:	4653      	mov	r3, sl
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	430d      	orrs	r5, r1
 8000b2e:	1ae4      	subs	r4, r4, r3
 8000b30:	1b45      	subs	r5, r0, r5
 8000b32:	42a8      	cmp	r0, r5
 8000b34:	4180      	sbcs	r0, r0
 8000b36:	4240      	negs	r0, r0
 8000b38:	1a24      	subs	r4, r4, r0
 8000b3a:	0223      	lsls	r3, r4, #8
 8000b3c:	d400      	bmi.n	8000b40 <__aeabi_dadd+0xac>
 8000b3e:	e10f      	b.n	8000d60 <__aeabi_dadd+0x2cc>
 8000b40:	0264      	lsls	r4, r4, #9
 8000b42:	0a64      	lsrs	r4, r4, #9
 8000b44:	2c00      	cmp	r4, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0xb6>
 8000b48:	e139      	b.n	8000dbe <__aeabi_dadd+0x32a>
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	f001 fee2 	bl	8002914 <__clzsi2>
 8000b50:	0003      	movs	r3, r0
 8000b52:	3b08      	subs	r3, #8
 8000b54:	2120      	movs	r1, #32
 8000b56:	0028      	movs	r0, r5
 8000b58:	1aca      	subs	r2, r1, r3
 8000b5a:	40d0      	lsrs	r0, r2
 8000b5c:	409c      	lsls	r4, r3
 8000b5e:	0002      	movs	r2, r0
 8000b60:	409d      	lsls	r5, r3
 8000b62:	4322      	orrs	r2, r4
 8000b64:	429f      	cmp	r7, r3
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_dadd+0xd6>
 8000b68:	e173      	b.n	8000e52 <__aeabi_dadd+0x3be>
 8000b6a:	1bd8      	subs	r0, r3, r7
 8000b6c:	3001      	adds	r0, #1
 8000b6e:	1a09      	subs	r1, r1, r0
 8000b70:	002c      	movs	r4, r5
 8000b72:	408d      	lsls	r5, r1
 8000b74:	40c4      	lsrs	r4, r0
 8000b76:	1e6b      	subs	r3, r5, #1
 8000b78:	419d      	sbcs	r5, r3
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	40c2      	lsrs	r2, r0
 8000b7e:	408b      	lsls	r3, r1
 8000b80:	4325      	orrs	r5, r4
 8000b82:	2700      	movs	r7, #0
 8000b84:	0014      	movs	r4, r2
 8000b86:	431d      	orrs	r5, r3
 8000b88:	076b      	lsls	r3, r5, #29
 8000b8a:	d009      	beq.n	8000ba0 <__aeabi_dadd+0x10c>
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	402b      	ands	r3, r5
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d005      	beq.n	8000ba0 <__aeabi_dadd+0x10c>
 8000b94:	1d2b      	adds	r3, r5, #4
 8000b96:	42ab      	cmp	r3, r5
 8000b98:	41ad      	sbcs	r5, r5
 8000b9a:	426d      	negs	r5, r5
 8000b9c:	1964      	adds	r4, r4, r5
 8000b9e:	001d      	movs	r5, r3
 8000ba0:	0223      	lsls	r3, r4, #8
 8000ba2:	d400      	bmi.n	8000ba6 <__aeabi_dadd+0x112>
 8000ba4:	e12d      	b.n	8000e02 <__aeabi_dadd+0x36e>
 8000ba6:	4a9d      	ldr	r2, [pc, #628]	@ (8000e1c <__aeabi_dadd+0x388>)
 8000ba8:	3701      	adds	r7, #1
 8000baa:	4297      	cmp	r7, r2
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_dadd+0x11c>
 8000bae:	e0d3      	b.n	8000d58 <__aeabi_dadd+0x2c4>
 8000bb0:	4646      	mov	r6, r8
 8000bb2:	499b      	ldr	r1, [pc, #620]	@ (8000e20 <__aeabi_dadd+0x38c>)
 8000bb4:	08ed      	lsrs	r5, r5, #3
 8000bb6:	4021      	ands	r1, r4
 8000bb8:	074a      	lsls	r2, r1, #29
 8000bba:	432a      	orrs	r2, r5
 8000bbc:	057c      	lsls	r4, r7, #21
 8000bbe:	024d      	lsls	r5, r1, #9
 8000bc0:	0b2d      	lsrs	r5, r5, #12
 8000bc2:	0d64      	lsrs	r4, r4, #21
 8000bc4:	0524      	lsls	r4, r4, #20
 8000bc6:	432c      	orrs	r4, r5
 8000bc8:	07f6      	lsls	r6, r6, #31
 8000bca:	4334      	orrs	r4, r6
 8000bcc:	0010      	movs	r0, r2
 8000bce:	0021      	movs	r1, r4
 8000bd0:	b003      	add	sp, #12
 8000bd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd4:	46bb      	mov	fp, r7
 8000bd6:	46b2      	mov	sl, r6
 8000bd8:	46a9      	mov	r9, r5
 8000bda:	46a0      	mov	r8, r4
 8000bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dadd+0x150>
 8000be2:	e084      	b.n	8000cee <__aeabi_dadd+0x25a>
 8000be4:	464a      	mov	r2, r9
 8000be6:	1bd2      	subs	r2, r2, r7
 8000be8:	2f00      	cmp	r7, #0
 8000bea:	d000      	beq.n	8000bee <__aeabi_dadd+0x15a>
 8000bec:	e16d      	b.n	8000eca <__aeabi_dadd+0x436>
 8000bee:	0025      	movs	r5, r4
 8000bf0:	4305      	orrs	r5, r0
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dadd+0x162>
 8000bf4:	e127      	b.n	8000e46 <__aeabi_dadd+0x3b2>
 8000bf6:	1e56      	subs	r6, r2, #1
 8000bf8:	2a01      	cmp	r2, #1
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x16a>
 8000bfc:	e23b      	b.n	8001076 <__aeabi_dadd+0x5e2>
 8000bfe:	4d87      	ldr	r5, [pc, #540]	@ (8000e1c <__aeabi_dadd+0x388>)
 8000c00:	42aa      	cmp	r2, r5
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x172>
 8000c04:	e26a      	b.n	80010dc <__aeabi_dadd+0x648>
 8000c06:	2501      	movs	r5, #1
 8000c08:	2e38      	cmp	r6, #56	@ 0x38
 8000c0a:	dc12      	bgt.n	8000c32 <__aeabi_dadd+0x19e>
 8000c0c:	0032      	movs	r2, r6
 8000c0e:	2a1f      	cmp	r2, #31
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_dadd+0x180>
 8000c12:	e1f8      	b.n	8001006 <__aeabi_dadd+0x572>
 8000c14:	2620      	movs	r6, #32
 8000c16:	0025      	movs	r5, r4
 8000c18:	1ab6      	subs	r6, r6, r2
 8000c1a:	0007      	movs	r7, r0
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	40b0      	lsls	r0, r6
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	40b5      	lsls	r5, r6
 8000c24:	40d7      	lsrs	r7, r2
 8000c26:	1e46      	subs	r6, r0, #1
 8000c28:	41b0      	sbcs	r0, r6
 8000c2a:	1b1b      	subs	r3, r3, r4
 8000c2c:	469a      	mov	sl, r3
 8000c2e:	433d      	orrs	r5, r7
 8000c30:	4305      	orrs	r5, r0
 8000c32:	4662      	mov	r2, ip
 8000c34:	1b55      	subs	r5, r2, r5
 8000c36:	45ac      	cmp	ip, r5
 8000c38:	4192      	sbcs	r2, r2
 8000c3a:	4653      	mov	r3, sl
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	000e      	movs	r6, r1
 8000c40:	464f      	mov	r7, r9
 8000c42:	4688      	mov	r8, r1
 8000c44:	1a9c      	subs	r4, r3, r2
 8000c46:	e778      	b.n	8000b3a <__aeabi_dadd+0xa6>
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	dc00      	bgt.n	8000c4e <__aeabi_dadd+0x1ba>
 8000c4c:	e08e      	b.n	8000d6c <__aeabi_dadd+0x2d8>
 8000c4e:	4649      	mov	r1, r9
 8000c50:	2900      	cmp	r1, #0
 8000c52:	d175      	bne.n	8000d40 <__aeabi_dadd+0x2ac>
 8000c54:	4661      	mov	r1, ip
 8000c56:	4653      	mov	r3, sl
 8000c58:	4319      	orrs	r1, r3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x1ca>
 8000c5c:	e0f6      	b.n	8000e4c <__aeabi_dadd+0x3b8>
 8000c5e:	1e51      	subs	r1, r2, #1
 8000c60:	2a01      	cmp	r2, #1
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x1d2>
 8000c64:	e191      	b.n	8000f8a <__aeabi_dadd+0x4f6>
 8000c66:	4d6d      	ldr	r5, [pc, #436]	@ (8000e1c <__aeabi_dadd+0x388>)
 8000c68:	42aa      	cmp	r2, r5
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x1da>
 8000c6c:	e0dc      	b.n	8000e28 <__aeabi_dadd+0x394>
 8000c6e:	2501      	movs	r5, #1
 8000c70:	2938      	cmp	r1, #56	@ 0x38
 8000c72:	dc14      	bgt.n	8000c9e <__aeabi_dadd+0x20a>
 8000c74:	000a      	movs	r2, r1
 8000c76:	2a1f      	cmp	r2, #31
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_dadd+0x1e8>
 8000c7a:	e1a2      	b.n	8000fc2 <__aeabi_dadd+0x52e>
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4653      	mov	r3, sl
 8000c80:	1a89      	subs	r1, r1, r2
 8000c82:	408b      	lsls	r3, r1
 8000c84:	001d      	movs	r5, r3
 8000c86:	4663      	mov	r3, ip
 8000c88:	40d3      	lsrs	r3, r2
 8000c8a:	431d      	orrs	r5, r3
 8000c8c:	4663      	mov	r3, ip
 8000c8e:	408b      	lsls	r3, r1
 8000c90:	0019      	movs	r1, r3
 8000c92:	1e4b      	subs	r3, r1, #1
 8000c94:	4199      	sbcs	r1, r3
 8000c96:	4653      	mov	r3, sl
 8000c98:	40d3      	lsrs	r3, r2
 8000c9a:	430d      	orrs	r5, r1
 8000c9c:	18e4      	adds	r4, r4, r3
 8000c9e:	182d      	adds	r5, r5, r0
 8000ca0:	4285      	cmp	r5, r0
 8000ca2:	4180      	sbcs	r0, r0
 8000ca4:	4240      	negs	r0, r0
 8000ca6:	1824      	adds	r4, r4, r0
 8000ca8:	0223      	lsls	r3, r4, #8
 8000caa:	d559      	bpl.n	8000d60 <__aeabi_dadd+0x2cc>
 8000cac:	4b5b      	ldr	r3, [pc, #364]	@ (8000e1c <__aeabi_dadd+0x388>)
 8000cae:	3701      	adds	r7, #1
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	d051      	beq.n	8000d58 <__aeabi_dadd+0x2c4>
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e20 <__aeabi_dadd+0x38c>)
 8000cb8:	086a      	lsrs	r2, r5, #1
 8000cba:	401c      	ands	r4, r3
 8000cbc:	4029      	ands	r1, r5
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	07e5      	lsls	r5, r4, #31
 8000cc2:	4315      	orrs	r5, r2
 8000cc4:	0864      	lsrs	r4, r4, #1
 8000cc6:	e75f      	b.n	8000b88 <__aeabi_dadd+0xf4>
 8000cc8:	4661      	mov	r1, ip
 8000cca:	4653      	mov	r3, sl
 8000ccc:	4319      	orrs	r1, r3
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dadd+0x23e>
 8000cd0:	e0bc      	b.n	8000e4c <__aeabi_dadd+0x3b8>
 8000cd2:	1e51      	subs	r1, r2, #1
 8000cd4:	2a01      	cmp	r2, #1
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x246>
 8000cd8:	e164      	b.n	8000fa4 <__aeabi_dadd+0x510>
 8000cda:	4d50      	ldr	r5, [pc, #320]	@ (8000e1c <__aeabi_dadd+0x388>)
 8000cdc:	42aa      	cmp	r2, r5
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dadd+0x24e>
 8000ce0:	e16a      	b.n	8000fb8 <__aeabi_dadd+0x524>
 8000ce2:	2501      	movs	r5, #1
 8000ce4:	2938      	cmp	r1, #56	@ 0x38
 8000ce6:	dd00      	ble.n	8000cea <__aeabi_dadd+0x256>
 8000ce8:	e722      	b.n	8000b30 <__aeabi_dadd+0x9c>
 8000cea:	000a      	movs	r2, r1
 8000cec:	e70e      	b.n	8000b0c <__aeabi_dadd+0x78>
 8000cee:	4a4d      	ldr	r2, [pc, #308]	@ (8000e24 <__aeabi_dadd+0x390>)
 8000cf0:	1c7d      	adds	r5, r7, #1
 8000cf2:	4215      	tst	r5, r2
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_dadd+0x264>
 8000cf6:	e0d0      	b.n	8000e9a <__aeabi_dadd+0x406>
 8000cf8:	0025      	movs	r5, r4
 8000cfa:	4662      	mov	r2, ip
 8000cfc:	4653      	mov	r3, sl
 8000cfe:	4305      	orrs	r5, r0
 8000d00:	431a      	orrs	r2, r3
 8000d02:	2f00      	cmp	r7, #0
 8000d04:	d000      	beq.n	8000d08 <__aeabi_dadd+0x274>
 8000d06:	e137      	b.n	8000f78 <__aeabi_dadd+0x4e4>
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x27a>
 8000d0c:	e1a8      	b.n	8001060 <__aeabi_dadd+0x5cc>
 8000d0e:	2a00      	cmp	r2, #0
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x280>
 8000d12:	e16a      	b.n	8000fea <__aeabi_dadd+0x556>
 8000d14:	4663      	mov	r3, ip
 8000d16:	1ac5      	subs	r5, r0, r3
 8000d18:	4653      	mov	r3, sl
 8000d1a:	1ae2      	subs	r2, r4, r3
 8000d1c:	42a8      	cmp	r0, r5
 8000d1e:	419b      	sbcs	r3, r3
 8000d20:	425b      	negs	r3, r3
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	021a      	lsls	r2, r3, #8
 8000d26:	d400      	bmi.n	8000d2a <__aeabi_dadd+0x296>
 8000d28:	e203      	b.n	8001132 <__aeabi_dadd+0x69e>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	1a1d      	subs	r5, r3, r0
 8000d2e:	45ac      	cmp	ip, r5
 8000d30:	4192      	sbcs	r2, r2
 8000d32:	4653      	mov	r3, sl
 8000d34:	4252      	negs	r2, r2
 8000d36:	1b1c      	subs	r4, r3, r4
 8000d38:	000e      	movs	r6, r1
 8000d3a:	4688      	mov	r8, r1
 8000d3c:	1aa4      	subs	r4, r4, r2
 8000d3e:	e723      	b.n	8000b88 <__aeabi_dadd+0xf4>
 8000d40:	4936      	ldr	r1, [pc, #216]	@ (8000e1c <__aeabi_dadd+0x388>)
 8000d42:	428f      	cmp	r7, r1
 8000d44:	d070      	beq.n	8000e28 <__aeabi_dadd+0x394>
 8000d46:	2501      	movs	r5, #1
 8000d48:	2a38      	cmp	r2, #56	@ 0x38
 8000d4a:	dca8      	bgt.n	8000c9e <__aeabi_dadd+0x20a>
 8000d4c:	2180      	movs	r1, #128	@ 0x80
 8000d4e:	4653      	mov	r3, sl
 8000d50:	0409      	lsls	r1, r1, #16
 8000d52:	430b      	orrs	r3, r1
 8000d54:	469a      	mov	sl, r3
 8000d56:	e78e      	b.n	8000c76 <__aeabi_dadd+0x1e2>
 8000d58:	003c      	movs	r4, r7
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	e731      	b.n	8000bc4 <__aeabi_dadd+0x130>
 8000d60:	2307      	movs	r3, #7
 8000d62:	402b      	ands	r3, r5
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d000      	beq.n	8000d6a <__aeabi_dadd+0x2d6>
 8000d68:	e710      	b.n	8000b8c <__aeabi_dadd+0xf8>
 8000d6a:	e093      	b.n	8000e94 <__aeabi_dadd+0x400>
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d074      	beq.n	8000e5a <__aeabi_dadd+0x3c6>
 8000d70:	464a      	mov	r2, r9
 8000d72:	1bd2      	subs	r2, r2, r7
 8000d74:	2f00      	cmp	r7, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dadd+0x2e6>
 8000d78:	e0c7      	b.n	8000f0a <__aeabi_dadd+0x476>
 8000d7a:	4928      	ldr	r1, [pc, #160]	@ (8000e1c <__aeabi_dadd+0x388>)
 8000d7c:	4589      	cmp	r9, r1
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x2ee>
 8000d80:	e185      	b.n	800108e <__aeabi_dadd+0x5fa>
 8000d82:	2501      	movs	r5, #1
 8000d84:	2a38      	cmp	r2, #56	@ 0x38
 8000d86:	dc12      	bgt.n	8000dae <__aeabi_dadd+0x31a>
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	0409      	lsls	r1, r1, #16
 8000d8c:	430c      	orrs	r4, r1
 8000d8e:	2a1f      	cmp	r2, #31
 8000d90:	dd00      	ble.n	8000d94 <__aeabi_dadd+0x300>
 8000d92:	e1ab      	b.n	80010ec <__aeabi_dadd+0x658>
 8000d94:	2120      	movs	r1, #32
 8000d96:	0025      	movs	r5, r4
 8000d98:	1a89      	subs	r1, r1, r2
 8000d9a:	0007      	movs	r7, r0
 8000d9c:	4088      	lsls	r0, r1
 8000d9e:	408d      	lsls	r5, r1
 8000da0:	40d7      	lsrs	r7, r2
 8000da2:	1e41      	subs	r1, r0, #1
 8000da4:	4188      	sbcs	r0, r1
 8000da6:	40d4      	lsrs	r4, r2
 8000da8:	433d      	orrs	r5, r7
 8000daa:	4305      	orrs	r5, r0
 8000dac:	44a2      	add	sl, r4
 8000dae:	4465      	add	r5, ip
 8000db0:	4565      	cmp	r5, ip
 8000db2:	4192      	sbcs	r2, r2
 8000db4:	4252      	negs	r2, r2
 8000db6:	4452      	add	r2, sl
 8000db8:	0014      	movs	r4, r2
 8000dba:	464f      	mov	r7, r9
 8000dbc:	e774      	b.n	8000ca8 <__aeabi_dadd+0x214>
 8000dbe:	0028      	movs	r0, r5
 8000dc0:	f001 fda8 	bl	8002914 <__clzsi2>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	3318      	adds	r3, #24
 8000dc8:	2b1f      	cmp	r3, #31
 8000dca:	dc00      	bgt.n	8000dce <__aeabi_dadd+0x33a>
 8000dcc:	e6c2      	b.n	8000b54 <__aeabi_dadd+0xc0>
 8000dce:	002a      	movs	r2, r5
 8000dd0:	3808      	subs	r0, #8
 8000dd2:	4082      	lsls	r2, r0
 8000dd4:	429f      	cmp	r7, r3
 8000dd6:	dd00      	ble.n	8000dda <__aeabi_dadd+0x346>
 8000dd8:	e0a9      	b.n	8000f2e <__aeabi_dadd+0x49a>
 8000dda:	1bdb      	subs	r3, r3, r7
 8000ddc:	1c58      	adds	r0, r3, #1
 8000dde:	281f      	cmp	r0, #31
 8000de0:	dc00      	bgt.n	8000de4 <__aeabi_dadd+0x350>
 8000de2:	e1ac      	b.n	800113e <__aeabi_dadd+0x6aa>
 8000de4:	0015      	movs	r5, r2
 8000de6:	3b1f      	subs	r3, #31
 8000de8:	40dd      	lsrs	r5, r3
 8000dea:	2820      	cmp	r0, #32
 8000dec:	d005      	beq.n	8000dfa <__aeabi_dadd+0x366>
 8000dee:	2340      	movs	r3, #64	@ 0x40
 8000df0:	1a1b      	subs	r3, r3, r0
 8000df2:	409a      	lsls	r2, r3
 8000df4:	1e53      	subs	r3, r2, #1
 8000df6:	419a      	sbcs	r2, r3
 8000df8:	4315      	orrs	r5, r2
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	2700      	movs	r7, #0
 8000dfe:	402b      	ands	r3, r5
 8000e00:	e7b0      	b.n	8000d64 <__aeabi_dadd+0x2d0>
 8000e02:	08ed      	lsrs	r5, r5, #3
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <__aeabi_dadd+0x388>)
 8000e06:	0762      	lsls	r2, r4, #29
 8000e08:	432a      	orrs	r2, r5
 8000e0a:	08e4      	lsrs	r4, r4, #3
 8000e0c:	429f      	cmp	r7, r3
 8000e0e:	d00f      	beq.n	8000e30 <__aeabi_dadd+0x39c>
 8000e10:	0324      	lsls	r4, r4, #12
 8000e12:	0b25      	lsrs	r5, r4, #12
 8000e14:	057c      	lsls	r4, r7, #21
 8000e16:	0d64      	lsrs	r4, r4, #21
 8000e18:	e6d4      	b.n	8000bc4 <__aeabi_dadd+0x130>
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	000007ff 	.word	0x000007ff
 8000e20:	ff7fffff 	.word	0xff7fffff
 8000e24:	000007fe 	.word	0x000007fe
 8000e28:	08c0      	lsrs	r0, r0, #3
 8000e2a:	0762      	lsls	r2, r4, #29
 8000e2c:	4302      	orrs	r2, r0
 8000e2e:	08e4      	lsrs	r4, r4, #3
 8000e30:	0013      	movs	r3, r2
 8000e32:	4323      	orrs	r3, r4
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dadd+0x3a4>
 8000e36:	e186      	b.n	8001146 <__aeabi_dadd+0x6b2>
 8000e38:	2580      	movs	r5, #128	@ 0x80
 8000e3a:	032d      	lsls	r5, r5, #12
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	032d      	lsls	r5, r5, #12
 8000e40:	4cc3      	ldr	r4, [pc, #780]	@ (8001150 <__aeabi_dadd+0x6bc>)
 8000e42:	0b2d      	lsrs	r5, r5, #12
 8000e44:	e6be      	b.n	8000bc4 <__aeabi_dadd+0x130>
 8000e46:	4660      	mov	r0, ip
 8000e48:	4654      	mov	r4, sl
 8000e4a:	000e      	movs	r6, r1
 8000e4c:	0017      	movs	r7, r2
 8000e4e:	08c5      	lsrs	r5, r0, #3
 8000e50:	e7d8      	b.n	8000e04 <__aeabi_dadd+0x370>
 8000e52:	4cc0      	ldr	r4, [pc, #768]	@ (8001154 <__aeabi_dadd+0x6c0>)
 8000e54:	1aff      	subs	r7, r7, r3
 8000e56:	4014      	ands	r4, r2
 8000e58:	e696      	b.n	8000b88 <__aeabi_dadd+0xf4>
 8000e5a:	4abf      	ldr	r2, [pc, #764]	@ (8001158 <__aeabi_dadd+0x6c4>)
 8000e5c:	1c79      	adds	r1, r7, #1
 8000e5e:	4211      	tst	r1, r2
 8000e60:	d16b      	bne.n	8000f3a <__aeabi_dadd+0x4a6>
 8000e62:	0022      	movs	r2, r4
 8000e64:	4302      	orrs	r2, r0
 8000e66:	2f00      	cmp	r7, #0
 8000e68:	d000      	beq.n	8000e6c <__aeabi_dadd+0x3d8>
 8000e6a:	e0db      	b.n	8001024 <__aeabi_dadd+0x590>
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dadd+0x3de>
 8000e70:	e12d      	b.n	80010ce <__aeabi_dadd+0x63a>
 8000e72:	4662      	mov	r2, ip
 8000e74:	4653      	mov	r3, sl
 8000e76:	431a      	orrs	r2, r3
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dadd+0x3e8>
 8000e7a:	e0b6      	b.n	8000fea <__aeabi_dadd+0x556>
 8000e7c:	4663      	mov	r3, ip
 8000e7e:	18c5      	adds	r5, r0, r3
 8000e80:	4285      	cmp	r5, r0
 8000e82:	4180      	sbcs	r0, r0
 8000e84:	4454      	add	r4, sl
 8000e86:	4240      	negs	r0, r0
 8000e88:	1824      	adds	r4, r4, r0
 8000e8a:	0223      	lsls	r3, r4, #8
 8000e8c:	d502      	bpl.n	8000e94 <__aeabi_dadd+0x400>
 8000e8e:	000f      	movs	r7, r1
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <__aeabi_dadd+0x6c0>)
 8000e92:	401c      	ands	r4, r3
 8000e94:	003a      	movs	r2, r7
 8000e96:	0028      	movs	r0, r5
 8000e98:	e7d8      	b.n	8000e4c <__aeabi_dadd+0x3b8>
 8000e9a:	4662      	mov	r2, ip
 8000e9c:	1a85      	subs	r5, r0, r2
 8000e9e:	42a8      	cmp	r0, r5
 8000ea0:	4192      	sbcs	r2, r2
 8000ea2:	4653      	mov	r3, sl
 8000ea4:	4252      	negs	r2, r2
 8000ea6:	4691      	mov	r9, r2
 8000ea8:	1ae3      	subs	r3, r4, r3
 8000eaa:	001a      	movs	r2, r3
 8000eac:	464b      	mov	r3, r9
 8000eae:	1ad2      	subs	r2, r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	4691      	mov	r9, r2
 8000eb4:	021a      	lsls	r2, r3, #8
 8000eb6:	d454      	bmi.n	8000f62 <__aeabi_dadd+0x4ce>
 8000eb8:	464a      	mov	r2, r9
 8000eba:	464c      	mov	r4, r9
 8000ebc:	432a      	orrs	r2, r5
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_dadd+0x42e>
 8000ec0:	e640      	b.n	8000b44 <__aeabi_dadd+0xb0>
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	e67c      	b.n	8000bc4 <__aeabi_dadd+0x130>
 8000eca:	4da1      	ldr	r5, [pc, #644]	@ (8001150 <__aeabi_dadd+0x6bc>)
 8000ecc:	45a9      	cmp	r9, r5
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_dadd+0x43e>
 8000ed0:	e090      	b.n	8000ff4 <__aeabi_dadd+0x560>
 8000ed2:	2501      	movs	r5, #1
 8000ed4:	2a38      	cmp	r2, #56	@ 0x38
 8000ed6:	dd00      	ble.n	8000eda <__aeabi_dadd+0x446>
 8000ed8:	e6ab      	b.n	8000c32 <__aeabi_dadd+0x19e>
 8000eda:	2580      	movs	r5, #128	@ 0x80
 8000edc:	042d      	lsls	r5, r5, #16
 8000ede:	432c      	orrs	r4, r5
 8000ee0:	e695      	b.n	8000c0e <__aeabi_dadd+0x17a>
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	4655      	mov	r5, sl
 8000ee6:	3920      	subs	r1, #32
 8000ee8:	40cd      	lsrs	r5, r1
 8000eea:	46a9      	mov	r9, r5
 8000eec:	2a20      	cmp	r2, #32
 8000eee:	d006      	beq.n	8000efe <__aeabi_dadd+0x46a>
 8000ef0:	2140      	movs	r1, #64	@ 0x40
 8000ef2:	4653      	mov	r3, sl
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	4093      	lsls	r3, r2
 8000ef8:	4662      	mov	r2, ip
 8000efa:	431a      	orrs	r2, r3
 8000efc:	4694      	mov	ip, r2
 8000efe:	4665      	mov	r5, ip
 8000f00:	1e6b      	subs	r3, r5, #1
 8000f02:	419d      	sbcs	r5, r3
 8000f04:	464b      	mov	r3, r9
 8000f06:	431d      	orrs	r5, r3
 8000f08:	e612      	b.n	8000b30 <__aeabi_dadd+0x9c>
 8000f0a:	0021      	movs	r1, r4
 8000f0c:	4301      	orrs	r1, r0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_dadd+0x47e>
 8000f10:	e0c4      	b.n	800109c <__aeabi_dadd+0x608>
 8000f12:	1e51      	subs	r1, r2, #1
 8000f14:	2a01      	cmp	r2, #1
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dadd+0x486>
 8000f18:	e0fb      	b.n	8001112 <__aeabi_dadd+0x67e>
 8000f1a:	4d8d      	ldr	r5, [pc, #564]	@ (8001150 <__aeabi_dadd+0x6bc>)
 8000f1c:	42aa      	cmp	r2, r5
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x48e>
 8000f20:	e0b5      	b.n	800108e <__aeabi_dadd+0x5fa>
 8000f22:	2501      	movs	r5, #1
 8000f24:	2938      	cmp	r1, #56	@ 0x38
 8000f26:	dd00      	ble.n	8000f2a <__aeabi_dadd+0x496>
 8000f28:	e741      	b.n	8000dae <__aeabi_dadd+0x31a>
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	e72f      	b.n	8000d8e <__aeabi_dadd+0x2fa>
 8000f2e:	4c89      	ldr	r4, [pc, #548]	@ (8001154 <__aeabi_dadd+0x6c0>)
 8000f30:	1aff      	subs	r7, r7, r3
 8000f32:	4014      	ands	r4, r2
 8000f34:	0762      	lsls	r2, r4, #29
 8000f36:	08e4      	lsrs	r4, r4, #3
 8000f38:	e76a      	b.n	8000e10 <__aeabi_dadd+0x37c>
 8000f3a:	4a85      	ldr	r2, [pc, #532]	@ (8001150 <__aeabi_dadd+0x6bc>)
 8000f3c:	4291      	cmp	r1, r2
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dadd+0x4ae>
 8000f40:	e0e3      	b.n	800110a <__aeabi_dadd+0x676>
 8000f42:	4663      	mov	r3, ip
 8000f44:	18c2      	adds	r2, r0, r3
 8000f46:	4282      	cmp	r2, r0
 8000f48:	4180      	sbcs	r0, r0
 8000f4a:	0023      	movs	r3, r4
 8000f4c:	4240      	negs	r0, r0
 8000f4e:	4453      	add	r3, sl
 8000f50:	181b      	adds	r3, r3, r0
 8000f52:	07dd      	lsls	r5, r3, #31
 8000f54:	085c      	lsrs	r4, r3, #1
 8000f56:	2307      	movs	r3, #7
 8000f58:	0852      	lsrs	r2, r2, #1
 8000f5a:	4315      	orrs	r5, r2
 8000f5c:	000f      	movs	r7, r1
 8000f5e:	402b      	ands	r3, r5
 8000f60:	e700      	b.n	8000d64 <__aeabi_dadd+0x2d0>
 8000f62:	4663      	mov	r3, ip
 8000f64:	1a1d      	subs	r5, r3, r0
 8000f66:	45ac      	cmp	ip, r5
 8000f68:	4192      	sbcs	r2, r2
 8000f6a:	4653      	mov	r3, sl
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	1b1c      	subs	r4, r3, r4
 8000f70:	000e      	movs	r6, r1
 8000f72:	4688      	mov	r8, r1
 8000f74:	1aa4      	subs	r4, r4, r2
 8000f76:	e5e5      	b.n	8000b44 <__aeabi_dadd+0xb0>
 8000f78:	2d00      	cmp	r5, #0
 8000f7a:	d000      	beq.n	8000f7e <__aeabi_dadd+0x4ea>
 8000f7c:	e091      	b.n	80010a2 <__aeabi_dadd+0x60e>
 8000f7e:	2a00      	cmp	r2, #0
 8000f80:	d138      	bne.n	8000ff4 <__aeabi_dadd+0x560>
 8000f82:	2480      	movs	r4, #128	@ 0x80
 8000f84:	2600      	movs	r6, #0
 8000f86:	0324      	lsls	r4, r4, #12
 8000f88:	e756      	b.n	8000e38 <__aeabi_dadd+0x3a4>
 8000f8a:	4663      	mov	r3, ip
 8000f8c:	18c5      	adds	r5, r0, r3
 8000f8e:	4285      	cmp	r5, r0
 8000f90:	4180      	sbcs	r0, r0
 8000f92:	4454      	add	r4, sl
 8000f94:	4240      	negs	r0, r0
 8000f96:	1824      	adds	r4, r4, r0
 8000f98:	2701      	movs	r7, #1
 8000f9a:	0223      	lsls	r3, r4, #8
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_dadd+0x50c>
 8000f9e:	e6df      	b.n	8000d60 <__aeabi_dadd+0x2cc>
 8000fa0:	2702      	movs	r7, #2
 8000fa2:	e687      	b.n	8000cb4 <__aeabi_dadd+0x220>
 8000fa4:	4663      	mov	r3, ip
 8000fa6:	1ac5      	subs	r5, r0, r3
 8000fa8:	42a8      	cmp	r0, r5
 8000faa:	4180      	sbcs	r0, r0
 8000fac:	4653      	mov	r3, sl
 8000fae:	4240      	negs	r0, r0
 8000fb0:	1ae4      	subs	r4, r4, r3
 8000fb2:	2701      	movs	r7, #1
 8000fb4:	1a24      	subs	r4, r4, r0
 8000fb6:	e5c0      	b.n	8000b3a <__aeabi_dadd+0xa6>
 8000fb8:	0762      	lsls	r2, r4, #29
 8000fba:	08c0      	lsrs	r0, r0, #3
 8000fbc:	4302      	orrs	r2, r0
 8000fbe:	08e4      	lsrs	r4, r4, #3
 8000fc0:	e736      	b.n	8000e30 <__aeabi_dadd+0x39c>
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	4653      	mov	r3, sl
 8000fc6:	3920      	subs	r1, #32
 8000fc8:	40cb      	lsrs	r3, r1
 8000fca:	4699      	mov	r9, r3
 8000fcc:	2a20      	cmp	r2, #32
 8000fce:	d006      	beq.n	8000fde <__aeabi_dadd+0x54a>
 8000fd0:	2140      	movs	r1, #64	@ 0x40
 8000fd2:	4653      	mov	r3, sl
 8000fd4:	1a8a      	subs	r2, r1, r2
 8000fd6:	4093      	lsls	r3, r2
 8000fd8:	4662      	mov	r2, ip
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	4694      	mov	ip, r2
 8000fde:	4665      	mov	r5, ip
 8000fe0:	1e6b      	subs	r3, r5, #1
 8000fe2:	419d      	sbcs	r5, r3
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	431d      	orrs	r5, r3
 8000fe8:	e659      	b.n	8000c9e <__aeabi_dadd+0x20a>
 8000fea:	0762      	lsls	r2, r4, #29
 8000fec:	08c0      	lsrs	r0, r0, #3
 8000fee:	4302      	orrs	r2, r0
 8000ff0:	08e4      	lsrs	r4, r4, #3
 8000ff2:	e70d      	b.n	8000e10 <__aeabi_dadd+0x37c>
 8000ff4:	4653      	mov	r3, sl
 8000ff6:	075a      	lsls	r2, r3, #29
 8000ff8:	4663      	mov	r3, ip
 8000ffa:	08d8      	lsrs	r0, r3, #3
 8000ffc:	4653      	mov	r3, sl
 8000ffe:	000e      	movs	r6, r1
 8001000:	4302      	orrs	r2, r0
 8001002:	08dc      	lsrs	r4, r3, #3
 8001004:	e714      	b.n	8000e30 <__aeabi_dadd+0x39c>
 8001006:	0015      	movs	r5, r2
 8001008:	0026      	movs	r6, r4
 800100a:	3d20      	subs	r5, #32
 800100c:	40ee      	lsrs	r6, r5
 800100e:	2a20      	cmp	r2, #32
 8001010:	d003      	beq.n	800101a <__aeabi_dadd+0x586>
 8001012:	2540      	movs	r5, #64	@ 0x40
 8001014:	1aaa      	subs	r2, r5, r2
 8001016:	4094      	lsls	r4, r2
 8001018:	4320      	orrs	r0, r4
 800101a:	1e42      	subs	r2, r0, #1
 800101c:	4190      	sbcs	r0, r2
 800101e:	0005      	movs	r5, r0
 8001020:	4335      	orrs	r5, r6
 8001022:	e606      	b.n	8000c32 <__aeabi_dadd+0x19e>
 8001024:	2a00      	cmp	r2, #0
 8001026:	d07c      	beq.n	8001122 <__aeabi_dadd+0x68e>
 8001028:	4662      	mov	r2, ip
 800102a:	4653      	mov	r3, sl
 800102c:	08c0      	lsrs	r0, r0, #3
 800102e:	431a      	orrs	r2, r3
 8001030:	d100      	bne.n	8001034 <__aeabi_dadd+0x5a0>
 8001032:	e6fa      	b.n	8000e2a <__aeabi_dadd+0x396>
 8001034:	0762      	lsls	r2, r4, #29
 8001036:	4310      	orrs	r0, r2
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	08e4      	lsrs	r4, r4, #3
 800103c:	0312      	lsls	r2, r2, #12
 800103e:	4214      	tst	r4, r2
 8001040:	d008      	beq.n	8001054 <__aeabi_dadd+0x5c0>
 8001042:	08d9      	lsrs	r1, r3, #3
 8001044:	4211      	tst	r1, r2
 8001046:	d105      	bne.n	8001054 <__aeabi_dadd+0x5c0>
 8001048:	4663      	mov	r3, ip
 800104a:	08d8      	lsrs	r0, r3, #3
 800104c:	4653      	mov	r3, sl
 800104e:	000c      	movs	r4, r1
 8001050:	075b      	lsls	r3, r3, #29
 8001052:	4318      	orrs	r0, r3
 8001054:	0f42      	lsrs	r2, r0, #29
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	08c0      	lsrs	r0, r0, #3
 800105a:	0752      	lsls	r2, r2, #29
 800105c:	4302      	orrs	r2, r0
 800105e:	e6e7      	b.n	8000e30 <__aeabi_dadd+0x39c>
 8001060:	2a00      	cmp	r2, #0
 8001062:	d100      	bne.n	8001066 <__aeabi_dadd+0x5d2>
 8001064:	e72d      	b.n	8000ec2 <__aeabi_dadd+0x42e>
 8001066:	4663      	mov	r3, ip
 8001068:	08d8      	lsrs	r0, r3, #3
 800106a:	4653      	mov	r3, sl
 800106c:	075a      	lsls	r2, r3, #29
 800106e:	000e      	movs	r6, r1
 8001070:	4302      	orrs	r2, r0
 8001072:	08dc      	lsrs	r4, r3, #3
 8001074:	e6cc      	b.n	8000e10 <__aeabi_dadd+0x37c>
 8001076:	4663      	mov	r3, ip
 8001078:	1a1d      	subs	r5, r3, r0
 800107a:	45ac      	cmp	ip, r5
 800107c:	4192      	sbcs	r2, r2
 800107e:	4653      	mov	r3, sl
 8001080:	4252      	negs	r2, r2
 8001082:	1b1c      	subs	r4, r3, r4
 8001084:	000e      	movs	r6, r1
 8001086:	4688      	mov	r8, r1
 8001088:	1aa4      	subs	r4, r4, r2
 800108a:	3701      	adds	r7, #1
 800108c:	e555      	b.n	8000b3a <__aeabi_dadd+0xa6>
 800108e:	4663      	mov	r3, ip
 8001090:	08d9      	lsrs	r1, r3, #3
 8001092:	4653      	mov	r3, sl
 8001094:	075a      	lsls	r2, r3, #29
 8001096:	430a      	orrs	r2, r1
 8001098:	08dc      	lsrs	r4, r3, #3
 800109a:	e6c9      	b.n	8000e30 <__aeabi_dadd+0x39c>
 800109c:	4660      	mov	r0, ip
 800109e:	4654      	mov	r4, sl
 80010a0:	e6d4      	b.n	8000e4c <__aeabi_dadd+0x3b8>
 80010a2:	08c0      	lsrs	r0, r0, #3
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d100      	bne.n	80010aa <__aeabi_dadd+0x616>
 80010a8:	e6bf      	b.n	8000e2a <__aeabi_dadd+0x396>
 80010aa:	0762      	lsls	r2, r4, #29
 80010ac:	4310      	orrs	r0, r2
 80010ae:	2280      	movs	r2, #128	@ 0x80
 80010b0:	08e4      	lsrs	r4, r4, #3
 80010b2:	0312      	lsls	r2, r2, #12
 80010b4:	4214      	tst	r4, r2
 80010b6:	d0cd      	beq.n	8001054 <__aeabi_dadd+0x5c0>
 80010b8:	08dd      	lsrs	r5, r3, #3
 80010ba:	4215      	tst	r5, r2
 80010bc:	d1ca      	bne.n	8001054 <__aeabi_dadd+0x5c0>
 80010be:	4663      	mov	r3, ip
 80010c0:	08d8      	lsrs	r0, r3, #3
 80010c2:	4653      	mov	r3, sl
 80010c4:	075b      	lsls	r3, r3, #29
 80010c6:	000e      	movs	r6, r1
 80010c8:	002c      	movs	r4, r5
 80010ca:	4318      	orrs	r0, r3
 80010cc:	e7c2      	b.n	8001054 <__aeabi_dadd+0x5c0>
 80010ce:	4663      	mov	r3, ip
 80010d0:	08d9      	lsrs	r1, r3, #3
 80010d2:	4653      	mov	r3, sl
 80010d4:	075a      	lsls	r2, r3, #29
 80010d6:	430a      	orrs	r2, r1
 80010d8:	08dc      	lsrs	r4, r3, #3
 80010da:	e699      	b.n	8000e10 <__aeabi_dadd+0x37c>
 80010dc:	4663      	mov	r3, ip
 80010de:	08d8      	lsrs	r0, r3, #3
 80010e0:	4653      	mov	r3, sl
 80010e2:	075a      	lsls	r2, r3, #29
 80010e4:	000e      	movs	r6, r1
 80010e6:	4302      	orrs	r2, r0
 80010e8:	08dc      	lsrs	r4, r3, #3
 80010ea:	e6a1      	b.n	8000e30 <__aeabi_dadd+0x39c>
 80010ec:	0011      	movs	r1, r2
 80010ee:	0027      	movs	r7, r4
 80010f0:	3920      	subs	r1, #32
 80010f2:	40cf      	lsrs	r7, r1
 80010f4:	2a20      	cmp	r2, #32
 80010f6:	d003      	beq.n	8001100 <__aeabi_dadd+0x66c>
 80010f8:	2140      	movs	r1, #64	@ 0x40
 80010fa:	1a8a      	subs	r2, r1, r2
 80010fc:	4094      	lsls	r4, r2
 80010fe:	4320      	orrs	r0, r4
 8001100:	1e42      	subs	r2, r0, #1
 8001102:	4190      	sbcs	r0, r2
 8001104:	0005      	movs	r5, r0
 8001106:	433d      	orrs	r5, r7
 8001108:	e651      	b.n	8000dae <__aeabi_dadd+0x31a>
 800110a:	000c      	movs	r4, r1
 800110c:	2500      	movs	r5, #0
 800110e:	2200      	movs	r2, #0
 8001110:	e558      	b.n	8000bc4 <__aeabi_dadd+0x130>
 8001112:	4460      	add	r0, ip
 8001114:	4560      	cmp	r0, ip
 8001116:	4192      	sbcs	r2, r2
 8001118:	4454      	add	r4, sl
 800111a:	4252      	negs	r2, r2
 800111c:	0005      	movs	r5, r0
 800111e:	18a4      	adds	r4, r4, r2
 8001120:	e73a      	b.n	8000f98 <__aeabi_dadd+0x504>
 8001122:	4653      	mov	r3, sl
 8001124:	075a      	lsls	r2, r3, #29
 8001126:	4663      	mov	r3, ip
 8001128:	08d9      	lsrs	r1, r3, #3
 800112a:	4653      	mov	r3, sl
 800112c:	430a      	orrs	r2, r1
 800112e:	08dc      	lsrs	r4, r3, #3
 8001130:	e67e      	b.n	8000e30 <__aeabi_dadd+0x39c>
 8001132:	001a      	movs	r2, r3
 8001134:	001c      	movs	r4, r3
 8001136:	432a      	orrs	r2, r5
 8001138:	d000      	beq.n	800113c <__aeabi_dadd+0x6a8>
 800113a:	e6ab      	b.n	8000e94 <__aeabi_dadd+0x400>
 800113c:	e6c1      	b.n	8000ec2 <__aeabi_dadd+0x42e>
 800113e:	2120      	movs	r1, #32
 8001140:	2500      	movs	r5, #0
 8001142:	1a09      	subs	r1, r1, r0
 8001144:	e519      	b.n	8000b7a <__aeabi_dadd+0xe6>
 8001146:	2200      	movs	r2, #0
 8001148:	2500      	movs	r5, #0
 800114a:	4c01      	ldr	r4, [pc, #4]	@ (8001150 <__aeabi_dadd+0x6bc>)
 800114c:	e53a      	b.n	8000bc4 <__aeabi_dadd+0x130>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	000007ff 	.word	0x000007ff
 8001154:	ff7fffff 	.word	0xff7fffff
 8001158:	000007fe 	.word	0x000007fe

0800115c <__aeabi_ddiv>:
 800115c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115e:	46de      	mov	lr, fp
 8001160:	4645      	mov	r5, r8
 8001162:	4657      	mov	r7, sl
 8001164:	464e      	mov	r6, r9
 8001166:	b5e0      	push	{r5, r6, r7, lr}
 8001168:	b087      	sub	sp, #28
 800116a:	9200      	str	r2, [sp, #0]
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	030b      	lsls	r3, r1, #12
 8001170:	0b1b      	lsrs	r3, r3, #12
 8001172:	469b      	mov	fp, r3
 8001174:	0fca      	lsrs	r2, r1, #31
 8001176:	004b      	lsls	r3, r1, #1
 8001178:	0004      	movs	r4, r0
 800117a:	4680      	mov	r8, r0
 800117c:	0d5b      	lsrs	r3, r3, #21
 800117e:	9202      	str	r2, [sp, #8]
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x28>
 8001182:	e16a      	b.n	800145a <__aeabi_ddiv+0x2fe>
 8001184:	4ad4      	ldr	r2, [pc, #848]	@ (80014d8 <__aeabi_ddiv+0x37c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x30>
 800118a:	e18c      	b.n	80014a6 <__aeabi_ddiv+0x34a>
 800118c:	4659      	mov	r1, fp
 800118e:	0f42      	lsrs	r2, r0, #29
 8001190:	00c9      	lsls	r1, r1, #3
 8001192:	430a      	orrs	r2, r1
 8001194:	2180      	movs	r1, #128	@ 0x80
 8001196:	0409      	lsls	r1, r1, #16
 8001198:	4311      	orrs	r1, r2
 800119a:	00c2      	lsls	r2, r0, #3
 800119c:	4690      	mov	r8, r2
 800119e:	4acf      	ldr	r2, [pc, #828]	@ (80014dc <__aeabi_ddiv+0x380>)
 80011a0:	4689      	mov	r9, r1
 80011a2:	4692      	mov	sl, r2
 80011a4:	449a      	add	sl, r3
 80011a6:	2300      	movs	r3, #0
 80011a8:	2400      	movs	r4, #0
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	9e00      	ldr	r6, [sp, #0]
 80011ae:	9f01      	ldr	r7, [sp, #4]
 80011b0:	033b      	lsls	r3, r7, #12
 80011b2:	0b1b      	lsrs	r3, r3, #12
 80011b4:	469b      	mov	fp, r3
 80011b6:	007b      	lsls	r3, r7, #1
 80011b8:	0030      	movs	r0, r6
 80011ba:	0d5b      	lsrs	r3, r3, #21
 80011bc:	0ffd      	lsrs	r5, r7, #31
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d100      	bne.n	80011c4 <__aeabi_ddiv+0x68>
 80011c2:	e128      	b.n	8001416 <__aeabi_ddiv+0x2ba>
 80011c4:	4ac4      	ldr	r2, [pc, #784]	@ (80014d8 <__aeabi_ddiv+0x37c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x70>
 80011ca:	e177      	b.n	80014bc <__aeabi_ddiv+0x360>
 80011cc:	4659      	mov	r1, fp
 80011ce:	0f72      	lsrs	r2, r6, #29
 80011d0:	00c9      	lsls	r1, r1, #3
 80011d2:	430a      	orrs	r2, r1
 80011d4:	2180      	movs	r1, #128	@ 0x80
 80011d6:	0409      	lsls	r1, r1, #16
 80011d8:	4311      	orrs	r1, r2
 80011da:	468b      	mov	fp, r1
 80011dc:	49bf      	ldr	r1, [pc, #764]	@ (80014dc <__aeabi_ddiv+0x380>)
 80011de:	00f2      	lsls	r2, r6, #3
 80011e0:	468c      	mov	ip, r1
 80011e2:	4651      	mov	r1, sl
 80011e4:	4463      	add	r3, ip
 80011e6:	1acb      	subs	r3, r1, r3
 80011e8:	469a      	mov	sl, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	9e02      	ldr	r6, [sp, #8]
 80011ee:	406e      	eors	r6, r5
 80011f0:	2c0f      	cmp	r4, #15
 80011f2:	d827      	bhi.n	8001244 <__aeabi_ddiv+0xe8>
 80011f4:	49ba      	ldr	r1, [pc, #744]	@ (80014e0 <__aeabi_ddiv+0x384>)
 80011f6:	00a4      	lsls	r4, r4, #2
 80011f8:	5909      	ldr	r1, [r1, r4]
 80011fa:	468f      	mov	pc, r1
 80011fc:	46cb      	mov	fp, r9
 80011fe:	4642      	mov	r2, r8
 8001200:	9e02      	ldr	r6, [sp, #8]
 8001202:	9b03      	ldr	r3, [sp, #12]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d016      	beq.n	8001236 <__aeabi_ddiv+0xda>
 8001208:	2b03      	cmp	r3, #3
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0xb2>
 800120c:	e2a6      	b.n	800175c <__aeabi_ddiv+0x600>
 800120e:	2b01      	cmp	r3, #1
 8001210:	d000      	beq.n	8001214 <__aeabi_ddiv+0xb8>
 8001212:	e0df      	b.n	80013d4 <__aeabi_ddiv+0x278>
 8001214:	2200      	movs	r2, #0
 8001216:	2300      	movs	r3, #0
 8001218:	2400      	movs	r4, #0
 800121a:	4690      	mov	r8, r2
 800121c:	051b      	lsls	r3, r3, #20
 800121e:	4323      	orrs	r3, r4
 8001220:	07f6      	lsls	r6, r6, #31
 8001222:	4333      	orrs	r3, r6
 8001224:	4640      	mov	r0, r8
 8001226:	0019      	movs	r1, r3
 8001228:	b007      	add	sp, #28
 800122a:	bcf0      	pop	{r4, r5, r6, r7}
 800122c:	46bb      	mov	fp, r7
 800122e:	46b2      	mov	sl, r6
 8001230:	46a9      	mov	r9, r5
 8001232:	46a0      	mov	r8, r4
 8001234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001236:	2200      	movs	r2, #0
 8001238:	2400      	movs	r4, #0
 800123a:	4690      	mov	r8, r2
 800123c:	4ba6      	ldr	r3, [pc, #664]	@ (80014d8 <__aeabi_ddiv+0x37c>)
 800123e:	e7ed      	b.n	800121c <__aeabi_ddiv+0xc0>
 8001240:	002e      	movs	r6, r5
 8001242:	e7df      	b.n	8001204 <__aeabi_ddiv+0xa8>
 8001244:	45cb      	cmp	fp, r9
 8001246:	d200      	bcs.n	800124a <__aeabi_ddiv+0xee>
 8001248:	e1d4      	b.n	80015f4 <__aeabi_ddiv+0x498>
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0xf2>
 800124c:	e1cf      	b.n	80015ee <__aeabi_ddiv+0x492>
 800124e:	2301      	movs	r3, #1
 8001250:	425b      	negs	r3, r3
 8001252:	469c      	mov	ip, r3
 8001254:	4644      	mov	r4, r8
 8001256:	4648      	mov	r0, r9
 8001258:	2700      	movs	r7, #0
 800125a:	44e2      	add	sl, ip
 800125c:	465b      	mov	r3, fp
 800125e:	0e15      	lsrs	r5, r2, #24
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	431d      	orrs	r5, r3
 8001264:	0c19      	lsrs	r1, r3, #16
 8001266:	042b      	lsls	r3, r5, #16
 8001268:	0212      	lsls	r2, r2, #8
 800126a:	9500      	str	r5, [sp, #0]
 800126c:	0c1d      	lsrs	r5, r3, #16
 800126e:	4691      	mov	r9, r2
 8001270:	9102      	str	r1, [sp, #8]
 8001272:	9503      	str	r5, [sp, #12]
 8001274:	f7fe ffe6 	bl	8000244 <__aeabi_uidivmod>
 8001278:	0002      	movs	r2, r0
 800127a:	436a      	muls	r2, r5
 800127c:	040b      	lsls	r3, r1, #16
 800127e:	0c21      	lsrs	r1, r4, #16
 8001280:	4680      	mov	r8, r0
 8001282:	4319      	orrs	r1, r3
 8001284:	428a      	cmp	r2, r1
 8001286:	d909      	bls.n	800129c <__aeabi_ddiv+0x140>
 8001288:	9d00      	ldr	r5, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	46ac      	mov	ip, r5
 800128e:	425b      	negs	r3, r3
 8001290:	4461      	add	r1, ip
 8001292:	469c      	mov	ip, r3
 8001294:	44e0      	add	r8, ip
 8001296:	428d      	cmp	r5, r1
 8001298:	d800      	bhi.n	800129c <__aeabi_ddiv+0x140>
 800129a:	e1fb      	b.n	8001694 <__aeabi_ddiv+0x538>
 800129c:	1a88      	subs	r0, r1, r2
 800129e:	9902      	ldr	r1, [sp, #8]
 80012a0:	f7fe ffd0 	bl	8000244 <__aeabi_uidivmod>
 80012a4:	9a03      	ldr	r2, [sp, #12]
 80012a6:	0424      	lsls	r4, r4, #16
 80012a8:	4342      	muls	r2, r0
 80012aa:	0409      	lsls	r1, r1, #16
 80012ac:	0c24      	lsrs	r4, r4, #16
 80012ae:	0003      	movs	r3, r0
 80012b0:	430c      	orrs	r4, r1
 80012b2:	42a2      	cmp	r2, r4
 80012b4:	d906      	bls.n	80012c4 <__aeabi_ddiv+0x168>
 80012b6:	9900      	ldr	r1, [sp, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	468c      	mov	ip, r1
 80012bc:	4464      	add	r4, ip
 80012be:	42a1      	cmp	r1, r4
 80012c0:	d800      	bhi.n	80012c4 <__aeabi_ddiv+0x168>
 80012c2:	e1e1      	b.n	8001688 <__aeabi_ddiv+0x52c>
 80012c4:	1aa0      	subs	r0, r4, r2
 80012c6:	4642      	mov	r2, r8
 80012c8:	0412      	lsls	r2, r2, #16
 80012ca:	431a      	orrs	r2, r3
 80012cc:	4693      	mov	fp, r2
 80012ce:	464b      	mov	r3, r9
 80012d0:	4659      	mov	r1, fp
 80012d2:	0c1b      	lsrs	r3, r3, #16
 80012d4:	001d      	movs	r5, r3
 80012d6:	9304      	str	r3, [sp, #16]
 80012d8:	040b      	lsls	r3, r1, #16
 80012da:	4649      	mov	r1, r9
 80012dc:	0409      	lsls	r1, r1, #16
 80012de:	0c09      	lsrs	r1, r1, #16
 80012e0:	000c      	movs	r4, r1
 80012e2:	0c1b      	lsrs	r3, r3, #16
 80012e4:	435c      	muls	r4, r3
 80012e6:	0c12      	lsrs	r2, r2, #16
 80012e8:	436b      	muls	r3, r5
 80012ea:	4688      	mov	r8, r1
 80012ec:	4351      	muls	r1, r2
 80012ee:	436a      	muls	r2, r5
 80012f0:	0c25      	lsrs	r5, r4, #16
 80012f2:	46ac      	mov	ip, r5
 80012f4:	185b      	adds	r3, r3, r1
 80012f6:	4463      	add	r3, ip
 80012f8:	4299      	cmp	r1, r3
 80012fa:	d903      	bls.n	8001304 <__aeabi_ddiv+0x1a8>
 80012fc:	2180      	movs	r1, #128	@ 0x80
 80012fe:	0249      	lsls	r1, r1, #9
 8001300:	468c      	mov	ip, r1
 8001302:	4462      	add	r2, ip
 8001304:	0c19      	lsrs	r1, r3, #16
 8001306:	0424      	lsls	r4, r4, #16
 8001308:	041b      	lsls	r3, r3, #16
 800130a:	0c24      	lsrs	r4, r4, #16
 800130c:	188a      	adds	r2, r1, r2
 800130e:	191c      	adds	r4, r3, r4
 8001310:	4290      	cmp	r0, r2
 8001312:	d302      	bcc.n	800131a <__aeabi_ddiv+0x1be>
 8001314:	d116      	bne.n	8001344 <__aeabi_ddiv+0x1e8>
 8001316:	42a7      	cmp	r7, r4
 8001318:	d214      	bcs.n	8001344 <__aeabi_ddiv+0x1e8>
 800131a:	465b      	mov	r3, fp
 800131c:	9d00      	ldr	r5, [sp, #0]
 800131e:	3b01      	subs	r3, #1
 8001320:	444f      	add	r7, r9
 8001322:	9305      	str	r3, [sp, #20]
 8001324:	454f      	cmp	r7, r9
 8001326:	419b      	sbcs	r3, r3
 8001328:	46ac      	mov	ip, r5
 800132a:	425b      	negs	r3, r3
 800132c:	4463      	add	r3, ip
 800132e:	18c0      	adds	r0, r0, r3
 8001330:	4285      	cmp	r5, r0
 8001332:	d300      	bcc.n	8001336 <__aeabi_ddiv+0x1da>
 8001334:	e1a1      	b.n	800167a <__aeabi_ddiv+0x51e>
 8001336:	4282      	cmp	r2, r0
 8001338:	d900      	bls.n	800133c <__aeabi_ddiv+0x1e0>
 800133a:	e1f6      	b.n	800172a <__aeabi_ddiv+0x5ce>
 800133c:	d100      	bne.n	8001340 <__aeabi_ddiv+0x1e4>
 800133e:	e1f1      	b.n	8001724 <__aeabi_ddiv+0x5c8>
 8001340:	9b05      	ldr	r3, [sp, #20]
 8001342:	469b      	mov	fp, r3
 8001344:	1b3c      	subs	r4, r7, r4
 8001346:	42a7      	cmp	r7, r4
 8001348:	41bf      	sbcs	r7, r7
 800134a:	9d00      	ldr	r5, [sp, #0]
 800134c:	1a80      	subs	r0, r0, r2
 800134e:	427f      	negs	r7, r7
 8001350:	1bc0      	subs	r0, r0, r7
 8001352:	4285      	cmp	r5, r0
 8001354:	d100      	bne.n	8001358 <__aeabi_ddiv+0x1fc>
 8001356:	e1d0      	b.n	80016fa <__aeabi_ddiv+0x59e>
 8001358:	9902      	ldr	r1, [sp, #8]
 800135a:	f7fe ff73 	bl	8000244 <__aeabi_uidivmod>
 800135e:	9a03      	ldr	r2, [sp, #12]
 8001360:	040b      	lsls	r3, r1, #16
 8001362:	4342      	muls	r2, r0
 8001364:	0c21      	lsrs	r1, r4, #16
 8001366:	0007      	movs	r7, r0
 8001368:	4319      	orrs	r1, r3
 800136a:	428a      	cmp	r2, r1
 800136c:	d900      	bls.n	8001370 <__aeabi_ddiv+0x214>
 800136e:	e178      	b.n	8001662 <__aeabi_ddiv+0x506>
 8001370:	1a88      	subs	r0, r1, r2
 8001372:	9902      	ldr	r1, [sp, #8]
 8001374:	f7fe ff66 	bl	8000244 <__aeabi_uidivmod>
 8001378:	9a03      	ldr	r2, [sp, #12]
 800137a:	0424      	lsls	r4, r4, #16
 800137c:	4342      	muls	r2, r0
 800137e:	0409      	lsls	r1, r1, #16
 8001380:	0c24      	lsrs	r4, r4, #16
 8001382:	0003      	movs	r3, r0
 8001384:	430c      	orrs	r4, r1
 8001386:	42a2      	cmp	r2, r4
 8001388:	d900      	bls.n	800138c <__aeabi_ddiv+0x230>
 800138a:	e15d      	b.n	8001648 <__aeabi_ddiv+0x4ec>
 800138c:	4641      	mov	r1, r8
 800138e:	1aa4      	subs	r4, r4, r2
 8001390:	043a      	lsls	r2, r7, #16
 8001392:	431a      	orrs	r2, r3
 8001394:	9d04      	ldr	r5, [sp, #16]
 8001396:	0413      	lsls	r3, r2, #16
 8001398:	0c1b      	lsrs	r3, r3, #16
 800139a:	4359      	muls	r1, r3
 800139c:	4647      	mov	r7, r8
 800139e:	436b      	muls	r3, r5
 80013a0:	469c      	mov	ip, r3
 80013a2:	0c10      	lsrs	r0, r2, #16
 80013a4:	4347      	muls	r7, r0
 80013a6:	0c0b      	lsrs	r3, r1, #16
 80013a8:	44bc      	add	ip, r7
 80013aa:	4463      	add	r3, ip
 80013ac:	4368      	muls	r0, r5
 80013ae:	429f      	cmp	r7, r3
 80013b0:	d903      	bls.n	80013ba <__aeabi_ddiv+0x25e>
 80013b2:	2580      	movs	r5, #128	@ 0x80
 80013b4:	026d      	lsls	r5, r5, #9
 80013b6:	46ac      	mov	ip, r5
 80013b8:	4460      	add	r0, ip
 80013ba:	0c1f      	lsrs	r7, r3, #16
 80013bc:	0409      	lsls	r1, r1, #16
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	0c09      	lsrs	r1, r1, #16
 80013c2:	183f      	adds	r7, r7, r0
 80013c4:	185b      	adds	r3, r3, r1
 80013c6:	42bc      	cmp	r4, r7
 80013c8:	d200      	bcs.n	80013cc <__aeabi_ddiv+0x270>
 80013ca:	e102      	b.n	80015d2 <__aeabi_ddiv+0x476>
 80013cc:	d100      	bne.n	80013d0 <__aeabi_ddiv+0x274>
 80013ce:	e0fd      	b.n	80015cc <__aeabi_ddiv+0x470>
 80013d0:	2301      	movs	r3, #1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	4b43      	ldr	r3, [pc, #268]	@ (80014e4 <__aeabi_ddiv+0x388>)
 80013d6:	4453      	add	r3, sl
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dc00      	bgt.n	80013de <__aeabi_ddiv+0x282>
 80013dc:	e0ae      	b.n	800153c <__aeabi_ddiv+0x3e0>
 80013de:	0751      	lsls	r1, r2, #29
 80013e0:	d000      	beq.n	80013e4 <__aeabi_ddiv+0x288>
 80013e2:	e198      	b.n	8001716 <__aeabi_ddiv+0x5ba>
 80013e4:	4659      	mov	r1, fp
 80013e6:	01c9      	lsls	r1, r1, #7
 80013e8:	d506      	bpl.n	80013f8 <__aeabi_ddiv+0x29c>
 80013ea:	4659      	mov	r1, fp
 80013ec:	4b3e      	ldr	r3, [pc, #248]	@ (80014e8 <__aeabi_ddiv+0x38c>)
 80013ee:	4019      	ands	r1, r3
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	468b      	mov	fp, r1
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4453      	add	r3, sl
 80013f8:	493c      	ldr	r1, [pc, #240]	@ (80014ec <__aeabi_ddiv+0x390>)
 80013fa:	428b      	cmp	r3, r1
 80013fc:	dd00      	ble.n	8001400 <__aeabi_ddiv+0x2a4>
 80013fe:	e71a      	b.n	8001236 <__aeabi_ddiv+0xda>
 8001400:	4659      	mov	r1, fp
 8001402:	08d2      	lsrs	r2, r2, #3
 8001404:	0749      	lsls	r1, r1, #29
 8001406:	4311      	orrs	r1, r2
 8001408:	465a      	mov	r2, fp
 800140a:	055b      	lsls	r3, r3, #21
 800140c:	0254      	lsls	r4, r2, #9
 800140e:	4688      	mov	r8, r1
 8001410:	0b24      	lsrs	r4, r4, #12
 8001412:	0d5b      	lsrs	r3, r3, #21
 8001414:	e702      	b.n	800121c <__aeabi_ddiv+0xc0>
 8001416:	465a      	mov	r2, fp
 8001418:	9b00      	ldr	r3, [sp, #0]
 800141a:	431a      	orrs	r2, r3
 800141c:	d100      	bne.n	8001420 <__aeabi_ddiv+0x2c4>
 800141e:	e07e      	b.n	800151e <__aeabi_ddiv+0x3c2>
 8001420:	465b      	mov	r3, fp
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_ddiv+0x2cc>
 8001426:	e100      	b.n	800162a <__aeabi_ddiv+0x4ce>
 8001428:	4658      	mov	r0, fp
 800142a:	f001 fa73 	bl	8002914 <__clzsi2>
 800142e:	0002      	movs	r2, r0
 8001430:	0003      	movs	r3, r0
 8001432:	3a0b      	subs	r2, #11
 8001434:	271d      	movs	r7, #29
 8001436:	9e00      	ldr	r6, [sp, #0]
 8001438:	1aba      	subs	r2, r7, r2
 800143a:	0019      	movs	r1, r3
 800143c:	4658      	mov	r0, fp
 800143e:	40d6      	lsrs	r6, r2
 8001440:	3908      	subs	r1, #8
 8001442:	4088      	lsls	r0, r1
 8001444:	0032      	movs	r2, r6
 8001446:	4302      	orrs	r2, r0
 8001448:	4693      	mov	fp, r2
 800144a:	9a00      	ldr	r2, [sp, #0]
 800144c:	408a      	lsls	r2, r1
 800144e:	4928      	ldr	r1, [pc, #160]	@ (80014f0 <__aeabi_ddiv+0x394>)
 8001450:	4453      	add	r3, sl
 8001452:	468a      	mov	sl, r1
 8001454:	449a      	add	sl, r3
 8001456:	2300      	movs	r3, #0
 8001458:	e6c8      	b.n	80011ec <__aeabi_ddiv+0x90>
 800145a:	465b      	mov	r3, fp
 800145c:	4303      	orrs	r3, r0
 800145e:	4699      	mov	r9, r3
 8001460:	d056      	beq.n	8001510 <__aeabi_ddiv+0x3b4>
 8001462:	465b      	mov	r3, fp
 8001464:	2b00      	cmp	r3, #0
 8001466:	d100      	bne.n	800146a <__aeabi_ddiv+0x30e>
 8001468:	e0cd      	b.n	8001606 <__aeabi_ddiv+0x4aa>
 800146a:	4658      	mov	r0, fp
 800146c:	f001 fa52 	bl	8002914 <__clzsi2>
 8001470:	230b      	movs	r3, #11
 8001472:	425b      	negs	r3, r3
 8001474:	469c      	mov	ip, r3
 8001476:	0002      	movs	r2, r0
 8001478:	4484      	add	ip, r0
 800147a:	4666      	mov	r6, ip
 800147c:	231d      	movs	r3, #29
 800147e:	1b9b      	subs	r3, r3, r6
 8001480:	0026      	movs	r6, r4
 8001482:	0011      	movs	r1, r2
 8001484:	4658      	mov	r0, fp
 8001486:	40de      	lsrs	r6, r3
 8001488:	3908      	subs	r1, #8
 800148a:	4088      	lsls	r0, r1
 800148c:	0033      	movs	r3, r6
 800148e:	4303      	orrs	r3, r0
 8001490:	4699      	mov	r9, r3
 8001492:	0023      	movs	r3, r4
 8001494:	408b      	lsls	r3, r1
 8001496:	4698      	mov	r8, r3
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <__aeabi_ddiv+0x398>)
 800149a:	2400      	movs	r4, #0
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	469a      	mov	sl, r3
 80014a0:	2300      	movs	r3, #0
 80014a2:	9303      	str	r3, [sp, #12]
 80014a4:	e682      	b.n	80011ac <__aeabi_ddiv+0x50>
 80014a6:	465a      	mov	r2, fp
 80014a8:	4302      	orrs	r2, r0
 80014aa:	4691      	mov	r9, r2
 80014ac:	d12a      	bne.n	8001504 <__aeabi_ddiv+0x3a8>
 80014ae:	2200      	movs	r2, #0
 80014b0:	469a      	mov	sl, r3
 80014b2:	2302      	movs	r3, #2
 80014b4:	4690      	mov	r8, r2
 80014b6:	2408      	movs	r4, #8
 80014b8:	9303      	str	r3, [sp, #12]
 80014ba:	e677      	b.n	80011ac <__aeabi_ddiv+0x50>
 80014bc:	465a      	mov	r2, fp
 80014be:	9b00      	ldr	r3, [sp, #0]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <__aeabi_ddiv+0x39c>)
 80014c4:	469c      	mov	ip, r3
 80014c6:	44e2      	add	sl, ip
 80014c8:	2a00      	cmp	r2, #0
 80014ca:	d117      	bne.n	80014fc <__aeabi_ddiv+0x3a0>
 80014cc:	2302      	movs	r3, #2
 80014ce:	431c      	orrs	r4, r3
 80014d0:	2300      	movs	r3, #0
 80014d2:	469b      	mov	fp, r3
 80014d4:	3302      	adds	r3, #2
 80014d6:	e689      	b.n	80011ec <__aeabi_ddiv+0x90>
 80014d8:	000007ff 	.word	0x000007ff
 80014dc:	fffffc01 	.word	0xfffffc01
 80014e0:	0800cbfc 	.word	0x0800cbfc
 80014e4:	000003ff 	.word	0x000003ff
 80014e8:	feffffff 	.word	0xfeffffff
 80014ec:	000007fe 	.word	0x000007fe
 80014f0:	000003f3 	.word	0x000003f3
 80014f4:	fffffc0d 	.word	0xfffffc0d
 80014f8:	fffff801 	.word	0xfffff801
 80014fc:	2303      	movs	r3, #3
 80014fe:	0032      	movs	r2, r6
 8001500:	431c      	orrs	r4, r3
 8001502:	e673      	b.n	80011ec <__aeabi_ddiv+0x90>
 8001504:	469a      	mov	sl, r3
 8001506:	2303      	movs	r3, #3
 8001508:	46d9      	mov	r9, fp
 800150a:	240c      	movs	r4, #12
 800150c:	9303      	str	r3, [sp, #12]
 800150e:	e64d      	b.n	80011ac <__aeabi_ddiv+0x50>
 8001510:	2300      	movs	r3, #0
 8001512:	4698      	mov	r8, r3
 8001514:	469a      	mov	sl, r3
 8001516:	3301      	adds	r3, #1
 8001518:	2404      	movs	r4, #4
 800151a:	9303      	str	r3, [sp, #12]
 800151c:	e646      	b.n	80011ac <__aeabi_ddiv+0x50>
 800151e:	2301      	movs	r3, #1
 8001520:	431c      	orrs	r4, r3
 8001522:	2300      	movs	r3, #0
 8001524:	469b      	mov	fp, r3
 8001526:	3301      	adds	r3, #1
 8001528:	e660      	b.n	80011ec <__aeabi_ddiv+0x90>
 800152a:	2300      	movs	r3, #0
 800152c:	2480      	movs	r4, #128	@ 0x80
 800152e:	4698      	mov	r8, r3
 8001530:	2600      	movs	r6, #0
 8001532:	4b92      	ldr	r3, [pc, #584]	@ (800177c <__aeabi_ddiv+0x620>)
 8001534:	0324      	lsls	r4, r4, #12
 8001536:	e671      	b.n	800121c <__aeabi_ddiv+0xc0>
 8001538:	2201      	movs	r2, #1
 800153a:	4252      	negs	r2, r2
 800153c:	2101      	movs	r1, #1
 800153e:	1ac9      	subs	r1, r1, r3
 8001540:	2938      	cmp	r1, #56	@ 0x38
 8001542:	dd00      	ble.n	8001546 <__aeabi_ddiv+0x3ea>
 8001544:	e666      	b.n	8001214 <__aeabi_ddiv+0xb8>
 8001546:	291f      	cmp	r1, #31
 8001548:	dc00      	bgt.n	800154c <__aeabi_ddiv+0x3f0>
 800154a:	e0ab      	b.n	80016a4 <__aeabi_ddiv+0x548>
 800154c:	201f      	movs	r0, #31
 800154e:	4240      	negs	r0, r0
 8001550:	1ac3      	subs	r3, r0, r3
 8001552:	4658      	mov	r0, fp
 8001554:	40d8      	lsrs	r0, r3
 8001556:	0003      	movs	r3, r0
 8001558:	2920      	cmp	r1, #32
 800155a:	d004      	beq.n	8001566 <__aeabi_ddiv+0x40a>
 800155c:	4658      	mov	r0, fp
 800155e:	4988      	ldr	r1, [pc, #544]	@ (8001780 <__aeabi_ddiv+0x624>)
 8001560:	4451      	add	r1, sl
 8001562:	4088      	lsls	r0, r1
 8001564:	4302      	orrs	r2, r0
 8001566:	1e51      	subs	r1, r2, #1
 8001568:	418a      	sbcs	r2, r1
 800156a:	431a      	orrs	r2, r3
 800156c:	2307      	movs	r3, #7
 800156e:	0019      	movs	r1, r3
 8001570:	2400      	movs	r4, #0
 8001572:	4011      	ands	r1, r2
 8001574:	4213      	tst	r3, r2
 8001576:	d00c      	beq.n	8001592 <__aeabi_ddiv+0x436>
 8001578:	230f      	movs	r3, #15
 800157a:	4013      	ands	r3, r2
 800157c:	2b04      	cmp	r3, #4
 800157e:	d100      	bne.n	8001582 <__aeabi_ddiv+0x426>
 8001580:	e0f9      	b.n	8001776 <__aeabi_ddiv+0x61a>
 8001582:	1d11      	adds	r1, r2, #4
 8001584:	4291      	cmp	r1, r2
 8001586:	419b      	sbcs	r3, r3
 8001588:	000a      	movs	r2, r1
 800158a:	425b      	negs	r3, r3
 800158c:	0759      	lsls	r1, r3, #29
 800158e:	025b      	lsls	r3, r3, #9
 8001590:	0b1c      	lsrs	r4, r3, #12
 8001592:	08d2      	lsrs	r2, r2, #3
 8001594:	430a      	orrs	r2, r1
 8001596:	4690      	mov	r8, r2
 8001598:	2300      	movs	r3, #0
 800159a:	e63f      	b.n	800121c <__aeabi_ddiv+0xc0>
 800159c:	2480      	movs	r4, #128	@ 0x80
 800159e:	464b      	mov	r3, r9
 80015a0:	0324      	lsls	r4, r4, #12
 80015a2:	4223      	tst	r3, r4
 80015a4:	d009      	beq.n	80015ba <__aeabi_ddiv+0x45e>
 80015a6:	465b      	mov	r3, fp
 80015a8:	4223      	tst	r3, r4
 80015aa:	d106      	bne.n	80015ba <__aeabi_ddiv+0x45e>
 80015ac:	431c      	orrs	r4, r3
 80015ae:	0324      	lsls	r4, r4, #12
 80015b0:	002e      	movs	r6, r5
 80015b2:	4690      	mov	r8, r2
 80015b4:	4b71      	ldr	r3, [pc, #452]	@ (800177c <__aeabi_ddiv+0x620>)
 80015b6:	0b24      	lsrs	r4, r4, #12
 80015b8:	e630      	b.n	800121c <__aeabi_ddiv+0xc0>
 80015ba:	2480      	movs	r4, #128	@ 0x80
 80015bc:	464b      	mov	r3, r9
 80015be:	0324      	lsls	r4, r4, #12
 80015c0:	431c      	orrs	r4, r3
 80015c2:	0324      	lsls	r4, r4, #12
 80015c4:	9e02      	ldr	r6, [sp, #8]
 80015c6:	4b6d      	ldr	r3, [pc, #436]	@ (800177c <__aeabi_ddiv+0x620>)
 80015c8:	0b24      	lsrs	r4, r4, #12
 80015ca:	e627      	b.n	800121c <__aeabi_ddiv+0xc0>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_ddiv+0x476>
 80015d0:	e700      	b.n	80013d4 <__aeabi_ddiv+0x278>
 80015d2:	9800      	ldr	r0, [sp, #0]
 80015d4:	1e51      	subs	r1, r2, #1
 80015d6:	4684      	mov	ip, r0
 80015d8:	4464      	add	r4, ip
 80015da:	4284      	cmp	r4, r0
 80015dc:	d200      	bcs.n	80015e0 <__aeabi_ddiv+0x484>
 80015de:	e084      	b.n	80016ea <__aeabi_ddiv+0x58e>
 80015e0:	42bc      	cmp	r4, r7
 80015e2:	d200      	bcs.n	80015e6 <__aeabi_ddiv+0x48a>
 80015e4:	e0ae      	b.n	8001744 <__aeabi_ddiv+0x5e8>
 80015e6:	d100      	bne.n	80015ea <__aeabi_ddiv+0x48e>
 80015e8:	e0c1      	b.n	800176e <__aeabi_ddiv+0x612>
 80015ea:	000a      	movs	r2, r1
 80015ec:	e6f0      	b.n	80013d0 <__aeabi_ddiv+0x274>
 80015ee:	4542      	cmp	r2, r8
 80015f0:	d900      	bls.n	80015f4 <__aeabi_ddiv+0x498>
 80015f2:	e62c      	b.n	800124e <__aeabi_ddiv+0xf2>
 80015f4:	464b      	mov	r3, r9
 80015f6:	07dc      	lsls	r4, r3, #31
 80015f8:	0858      	lsrs	r0, r3, #1
 80015fa:	4643      	mov	r3, r8
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	431c      	orrs	r4, r3
 8001600:	4643      	mov	r3, r8
 8001602:	07df      	lsls	r7, r3, #31
 8001604:	e62a      	b.n	800125c <__aeabi_ddiv+0x100>
 8001606:	f001 f985 	bl	8002914 <__clzsi2>
 800160a:	2315      	movs	r3, #21
 800160c:	469c      	mov	ip, r3
 800160e:	4484      	add	ip, r0
 8001610:	0002      	movs	r2, r0
 8001612:	4663      	mov	r3, ip
 8001614:	3220      	adds	r2, #32
 8001616:	2b1c      	cmp	r3, #28
 8001618:	dc00      	bgt.n	800161c <__aeabi_ddiv+0x4c0>
 800161a:	e72e      	b.n	800147a <__aeabi_ddiv+0x31e>
 800161c:	0023      	movs	r3, r4
 800161e:	3808      	subs	r0, #8
 8001620:	4083      	lsls	r3, r0
 8001622:	4699      	mov	r9, r3
 8001624:	2300      	movs	r3, #0
 8001626:	4698      	mov	r8, r3
 8001628:	e736      	b.n	8001498 <__aeabi_ddiv+0x33c>
 800162a:	f001 f973 	bl	8002914 <__clzsi2>
 800162e:	0002      	movs	r2, r0
 8001630:	0003      	movs	r3, r0
 8001632:	3215      	adds	r2, #21
 8001634:	3320      	adds	r3, #32
 8001636:	2a1c      	cmp	r2, #28
 8001638:	dc00      	bgt.n	800163c <__aeabi_ddiv+0x4e0>
 800163a:	e6fb      	b.n	8001434 <__aeabi_ddiv+0x2d8>
 800163c:	9900      	ldr	r1, [sp, #0]
 800163e:	3808      	subs	r0, #8
 8001640:	4081      	lsls	r1, r0
 8001642:	2200      	movs	r2, #0
 8001644:	468b      	mov	fp, r1
 8001646:	e702      	b.n	800144e <__aeabi_ddiv+0x2f2>
 8001648:	9900      	ldr	r1, [sp, #0]
 800164a:	3b01      	subs	r3, #1
 800164c:	468c      	mov	ip, r1
 800164e:	4464      	add	r4, ip
 8001650:	42a1      	cmp	r1, r4
 8001652:	d900      	bls.n	8001656 <__aeabi_ddiv+0x4fa>
 8001654:	e69a      	b.n	800138c <__aeabi_ddiv+0x230>
 8001656:	42a2      	cmp	r2, r4
 8001658:	d800      	bhi.n	800165c <__aeabi_ddiv+0x500>
 800165a:	e697      	b.n	800138c <__aeabi_ddiv+0x230>
 800165c:	1e83      	subs	r3, r0, #2
 800165e:	4464      	add	r4, ip
 8001660:	e694      	b.n	800138c <__aeabi_ddiv+0x230>
 8001662:	46ac      	mov	ip, r5
 8001664:	4461      	add	r1, ip
 8001666:	3f01      	subs	r7, #1
 8001668:	428d      	cmp	r5, r1
 800166a:	d900      	bls.n	800166e <__aeabi_ddiv+0x512>
 800166c:	e680      	b.n	8001370 <__aeabi_ddiv+0x214>
 800166e:	428a      	cmp	r2, r1
 8001670:	d800      	bhi.n	8001674 <__aeabi_ddiv+0x518>
 8001672:	e67d      	b.n	8001370 <__aeabi_ddiv+0x214>
 8001674:	1e87      	subs	r7, r0, #2
 8001676:	4461      	add	r1, ip
 8001678:	e67a      	b.n	8001370 <__aeabi_ddiv+0x214>
 800167a:	4285      	cmp	r5, r0
 800167c:	d000      	beq.n	8001680 <__aeabi_ddiv+0x524>
 800167e:	e65f      	b.n	8001340 <__aeabi_ddiv+0x1e4>
 8001680:	45b9      	cmp	r9, r7
 8001682:	d900      	bls.n	8001686 <__aeabi_ddiv+0x52a>
 8001684:	e65c      	b.n	8001340 <__aeabi_ddiv+0x1e4>
 8001686:	e656      	b.n	8001336 <__aeabi_ddiv+0x1da>
 8001688:	42a2      	cmp	r2, r4
 800168a:	d800      	bhi.n	800168e <__aeabi_ddiv+0x532>
 800168c:	e61a      	b.n	80012c4 <__aeabi_ddiv+0x168>
 800168e:	1e83      	subs	r3, r0, #2
 8001690:	4464      	add	r4, ip
 8001692:	e617      	b.n	80012c4 <__aeabi_ddiv+0x168>
 8001694:	428a      	cmp	r2, r1
 8001696:	d800      	bhi.n	800169a <__aeabi_ddiv+0x53e>
 8001698:	e600      	b.n	800129c <__aeabi_ddiv+0x140>
 800169a:	46ac      	mov	ip, r5
 800169c:	1e83      	subs	r3, r0, #2
 800169e:	4698      	mov	r8, r3
 80016a0:	4461      	add	r1, ip
 80016a2:	e5fb      	b.n	800129c <__aeabi_ddiv+0x140>
 80016a4:	4837      	ldr	r0, [pc, #220]	@ (8001784 <__aeabi_ddiv+0x628>)
 80016a6:	0014      	movs	r4, r2
 80016a8:	4450      	add	r0, sl
 80016aa:	4082      	lsls	r2, r0
 80016ac:	465b      	mov	r3, fp
 80016ae:	0017      	movs	r7, r2
 80016b0:	4083      	lsls	r3, r0
 80016b2:	40cc      	lsrs	r4, r1
 80016b4:	1e7a      	subs	r2, r7, #1
 80016b6:	4197      	sbcs	r7, r2
 80016b8:	4323      	orrs	r3, r4
 80016ba:	433b      	orrs	r3, r7
 80016bc:	001a      	movs	r2, r3
 80016be:	465b      	mov	r3, fp
 80016c0:	40cb      	lsrs	r3, r1
 80016c2:	0751      	lsls	r1, r2, #29
 80016c4:	d009      	beq.n	80016da <__aeabi_ddiv+0x57e>
 80016c6:	210f      	movs	r1, #15
 80016c8:	4011      	ands	r1, r2
 80016ca:	2904      	cmp	r1, #4
 80016cc:	d005      	beq.n	80016da <__aeabi_ddiv+0x57e>
 80016ce:	1d11      	adds	r1, r2, #4
 80016d0:	4291      	cmp	r1, r2
 80016d2:	4192      	sbcs	r2, r2
 80016d4:	4252      	negs	r2, r2
 80016d6:	189b      	adds	r3, r3, r2
 80016d8:	000a      	movs	r2, r1
 80016da:	0219      	lsls	r1, r3, #8
 80016dc:	d400      	bmi.n	80016e0 <__aeabi_ddiv+0x584>
 80016de:	e755      	b.n	800158c <__aeabi_ddiv+0x430>
 80016e0:	2200      	movs	r2, #0
 80016e2:	2301      	movs	r3, #1
 80016e4:	2400      	movs	r4, #0
 80016e6:	4690      	mov	r8, r2
 80016e8:	e598      	b.n	800121c <__aeabi_ddiv+0xc0>
 80016ea:	000a      	movs	r2, r1
 80016ec:	42bc      	cmp	r4, r7
 80016ee:	d000      	beq.n	80016f2 <__aeabi_ddiv+0x596>
 80016f0:	e66e      	b.n	80013d0 <__aeabi_ddiv+0x274>
 80016f2:	454b      	cmp	r3, r9
 80016f4:	d000      	beq.n	80016f8 <__aeabi_ddiv+0x59c>
 80016f6:	e66b      	b.n	80013d0 <__aeabi_ddiv+0x274>
 80016f8:	e66c      	b.n	80013d4 <__aeabi_ddiv+0x278>
 80016fa:	4b23      	ldr	r3, [pc, #140]	@ (8001788 <__aeabi_ddiv+0x62c>)
 80016fc:	4a23      	ldr	r2, [pc, #140]	@ (800178c <__aeabi_ddiv+0x630>)
 80016fe:	4453      	add	r3, sl
 8001700:	4592      	cmp	sl, r2
 8001702:	da00      	bge.n	8001706 <__aeabi_ddiv+0x5aa>
 8001704:	e718      	b.n	8001538 <__aeabi_ddiv+0x3dc>
 8001706:	2101      	movs	r1, #1
 8001708:	4249      	negs	r1, r1
 800170a:	1d0a      	adds	r2, r1, #4
 800170c:	428a      	cmp	r2, r1
 800170e:	4189      	sbcs	r1, r1
 8001710:	4249      	negs	r1, r1
 8001712:	448b      	add	fp, r1
 8001714:	e666      	b.n	80013e4 <__aeabi_ddiv+0x288>
 8001716:	210f      	movs	r1, #15
 8001718:	4011      	ands	r1, r2
 800171a:	2904      	cmp	r1, #4
 800171c:	d100      	bne.n	8001720 <__aeabi_ddiv+0x5c4>
 800171e:	e661      	b.n	80013e4 <__aeabi_ddiv+0x288>
 8001720:	0011      	movs	r1, r2
 8001722:	e7f2      	b.n	800170a <__aeabi_ddiv+0x5ae>
 8001724:	42bc      	cmp	r4, r7
 8001726:	d800      	bhi.n	800172a <__aeabi_ddiv+0x5ce>
 8001728:	e60a      	b.n	8001340 <__aeabi_ddiv+0x1e4>
 800172a:	2302      	movs	r3, #2
 800172c:	425b      	negs	r3, r3
 800172e:	469c      	mov	ip, r3
 8001730:	9900      	ldr	r1, [sp, #0]
 8001732:	444f      	add	r7, r9
 8001734:	454f      	cmp	r7, r9
 8001736:	419b      	sbcs	r3, r3
 8001738:	44e3      	add	fp, ip
 800173a:	468c      	mov	ip, r1
 800173c:	425b      	negs	r3, r3
 800173e:	4463      	add	r3, ip
 8001740:	18c0      	adds	r0, r0, r3
 8001742:	e5ff      	b.n	8001344 <__aeabi_ddiv+0x1e8>
 8001744:	4649      	mov	r1, r9
 8001746:	9d00      	ldr	r5, [sp, #0]
 8001748:	0048      	lsls	r0, r1, #1
 800174a:	4548      	cmp	r0, r9
 800174c:	4189      	sbcs	r1, r1
 800174e:	46ac      	mov	ip, r5
 8001750:	4249      	negs	r1, r1
 8001752:	4461      	add	r1, ip
 8001754:	4681      	mov	r9, r0
 8001756:	3a02      	subs	r2, #2
 8001758:	1864      	adds	r4, r4, r1
 800175a:	e7c7      	b.n	80016ec <__aeabi_ddiv+0x590>
 800175c:	2480      	movs	r4, #128	@ 0x80
 800175e:	465b      	mov	r3, fp
 8001760:	0324      	lsls	r4, r4, #12
 8001762:	431c      	orrs	r4, r3
 8001764:	0324      	lsls	r4, r4, #12
 8001766:	4690      	mov	r8, r2
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <__aeabi_ddiv+0x620>)
 800176a:	0b24      	lsrs	r4, r4, #12
 800176c:	e556      	b.n	800121c <__aeabi_ddiv+0xc0>
 800176e:	4599      	cmp	r9, r3
 8001770:	d3e8      	bcc.n	8001744 <__aeabi_ddiv+0x5e8>
 8001772:	000a      	movs	r2, r1
 8001774:	e7bd      	b.n	80016f2 <__aeabi_ddiv+0x596>
 8001776:	2300      	movs	r3, #0
 8001778:	e708      	b.n	800158c <__aeabi_ddiv+0x430>
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	000007ff 	.word	0x000007ff
 8001780:	0000043e 	.word	0x0000043e
 8001784:	0000041e 	.word	0x0000041e
 8001788:	000003ff 	.word	0x000003ff
 800178c:	fffffc02 	.word	0xfffffc02

08001790 <__eqdf2>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	4657      	mov	r7, sl
 8001794:	46de      	mov	lr, fp
 8001796:	464e      	mov	r6, r9
 8001798:	4645      	mov	r5, r8
 800179a:	b5e0      	push	{r5, r6, r7, lr}
 800179c:	000d      	movs	r5, r1
 800179e:	0004      	movs	r4, r0
 80017a0:	0fe8      	lsrs	r0, r5, #31
 80017a2:	4683      	mov	fp, r0
 80017a4:	0309      	lsls	r1, r1, #12
 80017a6:	0fd8      	lsrs	r0, r3, #31
 80017a8:	0b09      	lsrs	r1, r1, #12
 80017aa:	4682      	mov	sl, r0
 80017ac:	4819      	ldr	r0, [pc, #100]	@ (8001814 <__eqdf2+0x84>)
 80017ae:	468c      	mov	ip, r1
 80017b0:	031f      	lsls	r7, r3, #12
 80017b2:	0069      	lsls	r1, r5, #1
 80017b4:	005e      	lsls	r6, r3, #1
 80017b6:	0d49      	lsrs	r1, r1, #21
 80017b8:	0b3f      	lsrs	r7, r7, #12
 80017ba:	0d76      	lsrs	r6, r6, #21
 80017bc:	4281      	cmp	r1, r0
 80017be:	d018      	beq.n	80017f2 <__eqdf2+0x62>
 80017c0:	4286      	cmp	r6, r0
 80017c2:	d00f      	beq.n	80017e4 <__eqdf2+0x54>
 80017c4:	2001      	movs	r0, #1
 80017c6:	42b1      	cmp	r1, r6
 80017c8:	d10d      	bne.n	80017e6 <__eqdf2+0x56>
 80017ca:	45bc      	cmp	ip, r7
 80017cc:	d10b      	bne.n	80017e6 <__eqdf2+0x56>
 80017ce:	4294      	cmp	r4, r2
 80017d0:	d109      	bne.n	80017e6 <__eqdf2+0x56>
 80017d2:	45d3      	cmp	fp, sl
 80017d4:	d01c      	beq.n	8001810 <__eqdf2+0x80>
 80017d6:	2900      	cmp	r1, #0
 80017d8:	d105      	bne.n	80017e6 <__eqdf2+0x56>
 80017da:	4660      	mov	r0, ip
 80017dc:	4320      	orrs	r0, r4
 80017de:	1e43      	subs	r3, r0, #1
 80017e0:	4198      	sbcs	r0, r3
 80017e2:	e000      	b.n	80017e6 <__eqdf2+0x56>
 80017e4:	2001      	movs	r0, #1
 80017e6:	bcf0      	pop	{r4, r5, r6, r7}
 80017e8:	46bb      	mov	fp, r7
 80017ea:	46b2      	mov	sl, r6
 80017ec:	46a9      	mov	r9, r5
 80017ee:	46a0      	mov	r8, r4
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f2:	2001      	movs	r0, #1
 80017f4:	428e      	cmp	r6, r1
 80017f6:	d1f6      	bne.n	80017e6 <__eqdf2+0x56>
 80017f8:	4661      	mov	r1, ip
 80017fa:	4339      	orrs	r1, r7
 80017fc:	000f      	movs	r7, r1
 80017fe:	4317      	orrs	r7, r2
 8001800:	4327      	orrs	r7, r4
 8001802:	d1f0      	bne.n	80017e6 <__eqdf2+0x56>
 8001804:	465b      	mov	r3, fp
 8001806:	4652      	mov	r2, sl
 8001808:	1a98      	subs	r0, r3, r2
 800180a:	1e43      	subs	r3, r0, #1
 800180c:	4198      	sbcs	r0, r3
 800180e:	e7ea      	b.n	80017e6 <__eqdf2+0x56>
 8001810:	2000      	movs	r0, #0
 8001812:	e7e8      	b.n	80017e6 <__eqdf2+0x56>
 8001814:	000007ff 	.word	0x000007ff

08001818 <__gedf2>:
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	4657      	mov	r7, sl
 800181c:	464e      	mov	r6, r9
 800181e:	4645      	mov	r5, r8
 8001820:	46de      	mov	lr, fp
 8001822:	b5e0      	push	{r5, r6, r7, lr}
 8001824:	000d      	movs	r5, r1
 8001826:	030f      	lsls	r7, r1, #12
 8001828:	0b39      	lsrs	r1, r7, #12
 800182a:	b083      	sub	sp, #12
 800182c:	0004      	movs	r4, r0
 800182e:	4680      	mov	r8, r0
 8001830:	9101      	str	r1, [sp, #4]
 8001832:	0058      	lsls	r0, r3, #1
 8001834:	0fe9      	lsrs	r1, r5, #31
 8001836:	4f31      	ldr	r7, [pc, #196]	@ (80018fc <__gedf2+0xe4>)
 8001838:	0d40      	lsrs	r0, r0, #21
 800183a:	468c      	mov	ip, r1
 800183c:	006e      	lsls	r6, r5, #1
 800183e:	0319      	lsls	r1, r3, #12
 8001840:	4682      	mov	sl, r0
 8001842:	4691      	mov	r9, r2
 8001844:	0d76      	lsrs	r6, r6, #21
 8001846:	0b09      	lsrs	r1, r1, #12
 8001848:	0fd8      	lsrs	r0, r3, #31
 800184a:	42be      	cmp	r6, r7
 800184c:	d01f      	beq.n	800188e <__gedf2+0x76>
 800184e:	45ba      	cmp	sl, r7
 8001850:	d00f      	beq.n	8001872 <__gedf2+0x5a>
 8001852:	2e00      	cmp	r6, #0
 8001854:	d12f      	bne.n	80018b6 <__gedf2+0x9e>
 8001856:	4655      	mov	r5, sl
 8001858:	9e01      	ldr	r6, [sp, #4]
 800185a:	4334      	orrs	r4, r6
 800185c:	2d00      	cmp	r5, #0
 800185e:	d127      	bne.n	80018b0 <__gedf2+0x98>
 8001860:	430a      	orrs	r2, r1
 8001862:	d03a      	beq.n	80018da <__gedf2+0xc2>
 8001864:	2c00      	cmp	r4, #0
 8001866:	d145      	bne.n	80018f4 <__gedf2+0xdc>
 8001868:	2800      	cmp	r0, #0
 800186a:	d11a      	bne.n	80018a2 <__gedf2+0x8a>
 800186c:	2001      	movs	r0, #1
 800186e:	4240      	negs	r0, r0
 8001870:	e017      	b.n	80018a2 <__gedf2+0x8a>
 8001872:	4311      	orrs	r1, r2
 8001874:	d13b      	bne.n	80018ee <__gedf2+0xd6>
 8001876:	2e00      	cmp	r6, #0
 8001878:	d102      	bne.n	8001880 <__gedf2+0x68>
 800187a:	9f01      	ldr	r7, [sp, #4]
 800187c:	4327      	orrs	r7, r4
 800187e:	d0f3      	beq.n	8001868 <__gedf2+0x50>
 8001880:	4584      	cmp	ip, r0
 8001882:	d109      	bne.n	8001898 <__gedf2+0x80>
 8001884:	4663      	mov	r3, ip
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <__gedf2+0x54>
 800188a:	4660      	mov	r0, ip
 800188c:	e009      	b.n	80018a2 <__gedf2+0x8a>
 800188e:	9f01      	ldr	r7, [sp, #4]
 8001890:	4327      	orrs	r7, r4
 8001892:	d12c      	bne.n	80018ee <__gedf2+0xd6>
 8001894:	45b2      	cmp	sl, r6
 8001896:	d024      	beq.n	80018e2 <__gedf2+0xca>
 8001898:	4663      	mov	r3, ip
 800189a:	2002      	movs	r0, #2
 800189c:	3b01      	subs	r3, #1
 800189e:	4018      	ands	r0, r3
 80018a0:	3801      	subs	r0, #1
 80018a2:	b003      	add	sp, #12
 80018a4:	bcf0      	pop	{r4, r5, r6, r7}
 80018a6:	46bb      	mov	fp, r7
 80018a8:	46b2      	mov	sl, r6
 80018aa:	46a9      	mov	r9, r5
 80018ac:	46a0      	mov	r8, r4
 80018ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	d0d9      	beq.n	8001868 <__gedf2+0x50>
 80018b4:	e7e4      	b.n	8001880 <__gedf2+0x68>
 80018b6:	4654      	mov	r4, sl
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	d0ed      	beq.n	8001898 <__gedf2+0x80>
 80018bc:	4584      	cmp	ip, r0
 80018be:	d1eb      	bne.n	8001898 <__gedf2+0x80>
 80018c0:	4556      	cmp	r6, sl
 80018c2:	dce9      	bgt.n	8001898 <__gedf2+0x80>
 80018c4:	dbde      	blt.n	8001884 <__gedf2+0x6c>
 80018c6:	9b01      	ldr	r3, [sp, #4]
 80018c8:	428b      	cmp	r3, r1
 80018ca:	d8e5      	bhi.n	8001898 <__gedf2+0x80>
 80018cc:	d1da      	bne.n	8001884 <__gedf2+0x6c>
 80018ce:	45c8      	cmp	r8, r9
 80018d0:	d8e2      	bhi.n	8001898 <__gedf2+0x80>
 80018d2:	2000      	movs	r0, #0
 80018d4:	45c8      	cmp	r8, r9
 80018d6:	d2e4      	bcs.n	80018a2 <__gedf2+0x8a>
 80018d8:	e7d4      	b.n	8001884 <__gedf2+0x6c>
 80018da:	2000      	movs	r0, #0
 80018dc:	2c00      	cmp	r4, #0
 80018de:	d0e0      	beq.n	80018a2 <__gedf2+0x8a>
 80018e0:	e7da      	b.n	8001898 <__gedf2+0x80>
 80018e2:	4311      	orrs	r1, r2
 80018e4:	d103      	bne.n	80018ee <__gedf2+0xd6>
 80018e6:	4584      	cmp	ip, r0
 80018e8:	d1d6      	bne.n	8001898 <__gedf2+0x80>
 80018ea:	2000      	movs	r0, #0
 80018ec:	e7d9      	b.n	80018a2 <__gedf2+0x8a>
 80018ee:	2002      	movs	r0, #2
 80018f0:	4240      	negs	r0, r0
 80018f2:	e7d6      	b.n	80018a2 <__gedf2+0x8a>
 80018f4:	4584      	cmp	ip, r0
 80018f6:	d0e6      	beq.n	80018c6 <__gedf2+0xae>
 80018f8:	e7ce      	b.n	8001898 <__gedf2+0x80>
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	000007ff 	.word	0x000007ff

08001900 <__ledf2>:
 8001900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001902:	4657      	mov	r7, sl
 8001904:	464e      	mov	r6, r9
 8001906:	4645      	mov	r5, r8
 8001908:	46de      	mov	lr, fp
 800190a:	b5e0      	push	{r5, r6, r7, lr}
 800190c:	000d      	movs	r5, r1
 800190e:	030f      	lsls	r7, r1, #12
 8001910:	0004      	movs	r4, r0
 8001912:	4680      	mov	r8, r0
 8001914:	0fe8      	lsrs	r0, r5, #31
 8001916:	0b39      	lsrs	r1, r7, #12
 8001918:	4684      	mov	ip, r0
 800191a:	b083      	sub	sp, #12
 800191c:	0058      	lsls	r0, r3, #1
 800191e:	4f30      	ldr	r7, [pc, #192]	@ (80019e0 <__ledf2+0xe0>)
 8001920:	0d40      	lsrs	r0, r0, #21
 8001922:	9101      	str	r1, [sp, #4]
 8001924:	031e      	lsls	r6, r3, #12
 8001926:	0069      	lsls	r1, r5, #1
 8001928:	4682      	mov	sl, r0
 800192a:	4691      	mov	r9, r2
 800192c:	0d49      	lsrs	r1, r1, #21
 800192e:	0b36      	lsrs	r6, r6, #12
 8001930:	0fd8      	lsrs	r0, r3, #31
 8001932:	42b9      	cmp	r1, r7
 8001934:	d020      	beq.n	8001978 <__ledf2+0x78>
 8001936:	45ba      	cmp	sl, r7
 8001938:	d00f      	beq.n	800195a <__ledf2+0x5a>
 800193a:	2900      	cmp	r1, #0
 800193c:	d12b      	bne.n	8001996 <__ledf2+0x96>
 800193e:	9901      	ldr	r1, [sp, #4]
 8001940:	430c      	orrs	r4, r1
 8001942:	4651      	mov	r1, sl
 8001944:	2900      	cmp	r1, #0
 8001946:	d137      	bne.n	80019b8 <__ledf2+0xb8>
 8001948:	4332      	orrs	r2, r6
 800194a:	d038      	beq.n	80019be <__ledf2+0xbe>
 800194c:	2c00      	cmp	r4, #0
 800194e:	d144      	bne.n	80019da <__ledf2+0xda>
 8001950:	2800      	cmp	r0, #0
 8001952:	d119      	bne.n	8001988 <__ledf2+0x88>
 8001954:	2001      	movs	r0, #1
 8001956:	4240      	negs	r0, r0
 8001958:	e016      	b.n	8001988 <__ledf2+0x88>
 800195a:	4316      	orrs	r6, r2
 800195c:	d113      	bne.n	8001986 <__ledf2+0x86>
 800195e:	2900      	cmp	r1, #0
 8001960:	d102      	bne.n	8001968 <__ledf2+0x68>
 8001962:	9f01      	ldr	r7, [sp, #4]
 8001964:	4327      	orrs	r7, r4
 8001966:	d0f3      	beq.n	8001950 <__ledf2+0x50>
 8001968:	4584      	cmp	ip, r0
 800196a:	d020      	beq.n	80019ae <__ledf2+0xae>
 800196c:	4663      	mov	r3, ip
 800196e:	2002      	movs	r0, #2
 8001970:	3b01      	subs	r3, #1
 8001972:	4018      	ands	r0, r3
 8001974:	3801      	subs	r0, #1
 8001976:	e007      	b.n	8001988 <__ledf2+0x88>
 8001978:	9f01      	ldr	r7, [sp, #4]
 800197a:	4327      	orrs	r7, r4
 800197c:	d103      	bne.n	8001986 <__ledf2+0x86>
 800197e:	458a      	cmp	sl, r1
 8001980:	d1f4      	bne.n	800196c <__ledf2+0x6c>
 8001982:	4316      	orrs	r6, r2
 8001984:	d01f      	beq.n	80019c6 <__ledf2+0xc6>
 8001986:	2002      	movs	r0, #2
 8001988:	b003      	add	sp, #12
 800198a:	bcf0      	pop	{r4, r5, r6, r7}
 800198c:	46bb      	mov	fp, r7
 800198e:	46b2      	mov	sl, r6
 8001990:	46a9      	mov	r9, r5
 8001992:	46a0      	mov	r8, r4
 8001994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001996:	4654      	mov	r4, sl
 8001998:	2c00      	cmp	r4, #0
 800199a:	d0e7      	beq.n	800196c <__ledf2+0x6c>
 800199c:	4584      	cmp	ip, r0
 800199e:	d1e5      	bne.n	800196c <__ledf2+0x6c>
 80019a0:	4551      	cmp	r1, sl
 80019a2:	dce3      	bgt.n	800196c <__ledf2+0x6c>
 80019a4:	db03      	blt.n	80019ae <__ledf2+0xae>
 80019a6:	9b01      	ldr	r3, [sp, #4]
 80019a8:	42b3      	cmp	r3, r6
 80019aa:	d8df      	bhi.n	800196c <__ledf2+0x6c>
 80019ac:	d00f      	beq.n	80019ce <__ledf2+0xce>
 80019ae:	4663      	mov	r3, ip
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0cf      	beq.n	8001954 <__ledf2+0x54>
 80019b4:	4660      	mov	r0, ip
 80019b6:	e7e7      	b.n	8001988 <__ledf2+0x88>
 80019b8:	2c00      	cmp	r4, #0
 80019ba:	d0c9      	beq.n	8001950 <__ledf2+0x50>
 80019bc:	e7d4      	b.n	8001968 <__ledf2+0x68>
 80019be:	2000      	movs	r0, #0
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d0e1      	beq.n	8001988 <__ledf2+0x88>
 80019c4:	e7d2      	b.n	800196c <__ledf2+0x6c>
 80019c6:	4584      	cmp	ip, r0
 80019c8:	d1d0      	bne.n	800196c <__ledf2+0x6c>
 80019ca:	2000      	movs	r0, #0
 80019cc:	e7dc      	b.n	8001988 <__ledf2+0x88>
 80019ce:	45c8      	cmp	r8, r9
 80019d0:	d8cc      	bhi.n	800196c <__ledf2+0x6c>
 80019d2:	2000      	movs	r0, #0
 80019d4:	45c8      	cmp	r8, r9
 80019d6:	d2d7      	bcs.n	8001988 <__ledf2+0x88>
 80019d8:	e7e9      	b.n	80019ae <__ledf2+0xae>
 80019da:	4584      	cmp	ip, r0
 80019dc:	d0e3      	beq.n	80019a6 <__ledf2+0xa6>
 80019de:	e7c5      	b.n	800196c <__ledf2+0x6c>
 80019e0:	000007ff 	.word	0x000007ff

080019e4 <__aeabi_dmul>:
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e6:	4657      	mov	r7, sl
 80019e8:	46de      	mov	lr, fp
 80019ea:	464e      	mov	r6, r9
 80019ec:	4645      	mov	r5, r8
 80019ee:	b5e0      	push	{r5, r6, r7, lr}
 80019f0:	001f      	movs	r7, r3
 80019f2:	030b      	lsls	r3, r1, #12
 80019f4:	0b1b      	lsrs	r3, r3, #12
 80019f6:	0016      	movs	r6, r2
 80019f8:	469a      	mov	sl, r3
 80019fa:	0fca      	lsrs	r2, r1, #31
 80019fc:	004b      	lsls	r3, r1, #1
 80019fe:	0004      	movs	r4, r0
 8001a00:	4693      	mov	fp, r2
 8001a02:	b087      	sub	sp, #28
 8001a04:	0d5b      	lsrs	r3, r3, #21
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dmul+0x26>
 8001a08:	e0d5      	b.n	8001bb6 <__aeabi_dmul+0x1d2>
 8001a0a:	4abb      	ldr	r2, [pc, #748]	@ (8001cf8 <__aeabi_dmul+0x314>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dmul+0x2e>
 8001a10:	e0f8      	b.n	8001c04 <__aeabi_dmul+0x220>
 8001a12:	4651      	mov	r1, sl
 8001a14:	0f42      	lsrs	r2, r0, #29
 8001a16:	00c9      	lsls	r1, r1, #3
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	2180      	movs	r1, #128	@ 0x80
 8001a1c:	0409      	lsls	r1, r1, #16
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	00c2      	lsls	r2, r0, #3
 8001a22:	4691      	mov	r9, r2
 8001a24:	4ab5      	ldr	r2, [pc, #724]	@ (8001cfc <__aeabi_dmul+0x318>)
 8001a26:	468a      	mov	sl, r1
 8001a28:	189d      	adds	r5, r3, r2
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	4698      	mov	r8, r3
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	033c      	lsls	r4, r7, #12
 8001a32:	007b      	lsls	r3, r7, #1
 8001a34:	0ffa      	lsrs	r2, r7, #31
 8001a36:	0030      	movs	r0, r6
 8001a38:	0b24      	lsrs	r4, r4, #12
 8001a3a:	0d5b      	lsrs	r3, r3, #21
 8001a3c:	9200      	str	r2, [sp, #0]
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dmul+0x5e>
 8001a40:	e096      	b.n	8001b70 <__aeabi_dmul+0x18c>
 8001a42:	4aad      	ldr	r2, [pc, #692]	@ (8001cf8 <__aeabi_dmul+0x314>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d031      	beq.n	8001aac <__aeabi_dmul+0xc8>
 8001a48:	0f72      	lsrs	r2, r6, #29
 8001a4a:	00e4      	lsls	r4, r4, #3
 8001a4c:	4322      	orrs	r2, r4
 8001a4e:	2480      	movs	r4, #128	@ 0x80
 8001a50:	0424      	lsls	r4, r4, #16
 8001a52:	4314      	orrs	r4, r2
 8001a54:	4aa9      	ldr	r2, [pc, #676]	@ (8001cfc <__aeabi_dmul+0x318>)
 8001a56:	00f0      	lsls	r0, r6, #3
 8001a58:	4694      	mov	ip, r2
 8001a5a:	4463      	add	r3, ip
 8001a5c:	195b      	adds	r3, r3, r5
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	9201      	str	r2, [sp, #4]
 8001a62:	4642      	mov	r2, r8
 8001a64:	2600      	movs	r6, #0
 8001a66:	2a0a      	cmp	r2, #10
 8001a68:	dc42      	bgt.n	8001af0 <__aeabi_dmul+0x10c>
 8001a6a:	465a      	mov	r2, fp
 8001a6c:	9900      	ldr	r1, [sp, #0]
 8001a6e:	404a      	eors	r2, r1
 8001a70:	4693      	mov	fp, r2
 8001a72:	4642      	mov	r2, r8
 8001a74:	2a02      	cmp	r2, #2
 8001a76:	dc32      	bgt.n	8001ade <__aeabi_dmul+0xfa>
 8001a78:	3a01      	subs	r2, #1
 8001a7a:	2a01      	cmp	r2, #1
 8001a7c:	d900      	bls.n	8001a80 <__aeabi_dmul+0x9c>
 8001a7e:	e149      	b.n	8001d14 <__aeabi_dmul+0x330>
 8001a80:	2e02      	cmp	r6, #2
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0xa2>
 8001a84:	e0ca      	b.n	8001c1c <__aeabi_dmul+0x238>
 8001a86:	2e01      	cmp	r6, #1
 8001a88:	d13d      	bne.n	8001b06 <__aeabi_dmul+0x122>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2400      	movs	r4, #0
 8001a8e:	2200      	movs	r2, #0
 8001a90:	0010      	movs	r0, r2
 8001a92:	465a      	mov	r2, fp
 8001a94:	051b      	lsls	r3, r3, #20
 8001a96:	4323      	orrs	r3, r4
 8001a98:	07d2      	lsls	r2, r2, #31
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	b007      	add	sp, #28
 8001aa0:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa2:	46bb      	mov	fp, r7
 8001aa4:	46b2      	mov	sl, r6
 8001aa6:	46a9      	mov	r9, r5
 8001aa8:	46a0      	mov	r8, r4
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aac:	4b92      	ldr	r3, [pc, #584]	@ (8001cf8 <__aeabi_dmul+0x314>)
 8001aae:	4326      	orrs	r6, r4
 8001ab0:	18eb      	adds	r3, r5, r3
 8001ab2:	2e00      	cmp	r6, #0
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dmul+0xd4>
 8001ab6:	e0bb      	b.n	8001c30 <__aeabi_dmul+0x24c>
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4641      	mov	r1, r8
 8001abc:	4311      	orrs	r1, r2
 8001abe:	465a      	mov	r2, fp
 8001ac0:	4688      	mov	r8, r1
 8001ac2:	9900      	ldr	r1, [sp, #0]
 8001ac4:	404a      	eors	r2, r1
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	0109      	lsls	r1, r1, #4
 8001aca:	468c      	mov	ip, r1
 8001acc:	0029      	movs	r1, r5
 8001ace:	4461      	add	r1, ip
 8001ad0:	9101      	str	r1, [sp, #4]
 8001ad2:	4641      	mov	r1, r8
 8001ad4:	290a      	cmp	r1, #10
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_dmul+0xf6>
 8001ad8:	e233      	b.n	8001f42 <__aeabi_dmul+0x55e>
 8001ada:	4693      	mov	fp, r2
 8001adc:	2603      	movs	r6, #3
 8001ade:	4642      	mov	r2, r8
 8001ae0:	2701      	movs	r7, #1
 8001ae2:	4097      	lsls	r7, r2
 8001ae4:	21a6      	movs	r1, #166	@ 0xa6
 8001ae6:	003a      	movs	r2, r7
 8001ae8:	00c9      	lsls	r1, r1, #3
 8001aea:	400a      	ands	r2, r1
 8001aec:	420f      	tst	r7, r1
 8001aee:	d031      	beq.n	8001b54 <__aeabi_dmul+0x170>
 8001af0:	9e02      	ldr	r6, [sp, #8]
 8001af2:	2e02      	cmp	r6, #2
 8001af4:	d100      	bne.n	8001af8 <__aeabi_dmul+0x114>
 8001af6:	e235      	b.n	8001f64 <__aeabi_dmul+0x580>
 8001af8:	2e03      	cmp	r6, #3
 8001afa:	d100      	bne.n	8001afe <__aeabi_dmul+0x11a>
 8001afc:	e1d2      	b.n	8001ea4 <__aeabi_dmul+0x4c0>
 8001afe:	4654      	mov	r4, sl
 8001b00:	4648      	mov	r0, r9
 8001b02:	2e01      	cmp	r6, #1
 8001b04:	d0c1      	beq.n	8001a8a <__aeabi_dmul+0xa6>
 8001b06:	9a01      	ldr	r2, [sp, #4]
 8001b08:	4b7d      	ldr	r3, [pc, #500]	@ (8001d00 <__aeabi_dmul+0x31c>)
 8001b0a:	4694      	mov	ip, r2
 8001b0c:	4463      	add	r3, ip
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	dc00      	bgt.n	8001b14 <__aeabi_dmul+0x130>
 8001b12:	e0c0      	b.n	8001c96 <__aeabi_dmul+0x2b2>
 8001b14:	0742      	lsls	r2, r0, #29
 8001b16:	d009      	beq.n	8001b2c <__aeabi_dmul+0x148>
 8001b18:	220f      	movs	r2, #15
 8001b1a:	4002      	ands	r2, r0
 8001b1c:	2a04      	cmp	r2, #4
 8001b1e:	d005      	beq.n	8001b2c <__aeabi_dmul+0x148>
 8001b20:	1d02      	adds	r2, r0, #4
 8001b22:	4282      	cmp	r2, r0
 8001b24:	4180      	sbcs	r0, r0
 8001b26:	4240      	negs	r0, r0
 8001b28:	1824      	adds	r4, r4, r0
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	01e2      	lsls	r2, r4, #7
 8001b2e:	d506      	bpl.n	8001b3e <__aeabi_dmul+0x15a>
 8001b30:	4b74      	ldr	r3, [pc, #464]	@ (8001d04 <__aeabi_dmul+0x320>)
 8001b32:	9a01      	ldr	r2, [sp, #4]
 8001b34:	401c      	ands	r4, r3
 8001b36:	2380      	movs	r3, #128	@ 0x80
 8001b38:	4694      	mov	ip, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4463      	add	r3, ip
 8001b3e:	4a72      	ldr	r2, [pc, #456]	@ (8001d08 <__aeabi_dmul+0x324>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	dc6b      	bgt.n	8001c1c <__aeabi_dmul+0x238>
 8001b44:	0762      	lsls	r2, r4, #29
 8001b46:	08c0      	lsrs	r0, r0, #3
 8001b48:	0264      	lsls	r4, r4, #9
 8001b4a:	055b      	lsls	r3, r3, #21
 8001b4c:	4302      	orrs	r2, r0
 8001b4e:	0b24      	lsrs	r4, r4, #12
 8001b50:	0d5b      	lsrs	r3, r3, #21
 8001b52:	e79d      	b.n	8001a90 <__aeabi_dmul+0xac>
 8001b54:	2190      	movs	r1, #144	@ 0x90
 8001b56:	0089      	lsls	r1, r1, #2
 8001b58:	420f      	tst	r7, r1
 8001b5a:	d163      	bne.n	8001c24 <__aeabi_dmul+0x240>
 8001b5c:	2288      	movs	r2, #136	@ 0x88
 8001b5e:	423a      	tst	r2, r7
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dmul+0x180>
 8001b62:	e0d7      	b.n	8001d14 <__aeabi_dmul+0x330>
 8001b64:	9b00      	ldr	r3, [sp, #0]
 8001b66:	46a2      	mov	sl, r4
 8001b68:	469b      	mov	fp, r3
 8001b6a:	4681      	mov	r9, r0
 8001b6c:	9602      	str	r6, [sp, #8]
 8001b6e:	e7bf      	b.n	8001af0 <__aeabi_dmul+0x10c>
 8001b70:	0023      	movs	r3, r4
 8001b72:	4333      	orrs	r3, r6
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dmul+0x194>
 8001b76:	e07f      	b.n	8001c78 <__aeabi_dmul+0x294>
 8001b78:	2c00      	cmp	r4, #0
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dmul+0x19a>
 8001b7c:	e1ad      	b.n	8001eda <__aeabi_dmul+0x4f6>
 8001b7e:	0020      	movs	r0, r4
 8001b80:	f000 fec8 	bl	8002914 <__clzsi2>
 8001b84:	0002      	movs	r2, r0
 8001b86:	0003      	movs	r3, r0
 8001b88:	3a0b      	subs	r2, #11
 8001b8a:	201d      	movs	r0, #29
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	1a82      	subs	r2, r0, r2
 8001b90:	0030      	movs	r0, r6
 8001b92:	3908      	subs	r1, #8
 8001b94:	40d0      	lsrs	r0, r2
 8001b96:	408c      	lsls	r4, r1
 8001b98:	4304      	orrs	r4, r0
 8001b9a:	0030      	movs	r0, r6
 8001b9c:	4088      	lsls	r0, r1
 8001b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d0c <__aeabi_dmul+0x328>)
 8001ba0:	1aeb      	subs	r3, r5, r3
 8001ba2:	4694      	mov	ip, r2
 8001ba4:	4463      	add	r3, ip
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	9201      	str	r2, [sp, #4]
 8001baa:	4642      	mov	r2, r8
 8001bac:	2600      	movs	r6, #0
 8001bae:	2a0a      	cmp	r2, #10
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_dmul+0x1d0>
 8001bb2:	e75a      	b.n	8001a6a <__aeabi_dmul+0x86>
 8001bb4:	e79c      	b.n	8001af0 <__aeabi_dmul+0x10c>
 8001bb6:	4653      	mov	r3, sl
 8001bb8:	4303      	orrs	r3, r0
 8001bba:	4699      	mov	r9, r3
 8001bbc:	d054      	beq.n	8001c68 <__aeabi_dmul+0x284>
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dmul+0x1e2>
 8001bc4:	e177      	b.n	8001eb6 <__aeabi_dmul+0x4d2>
 8001bc6:	4650      	mov	r0, sl
 8001bc8:	f000 fea4 	bl	8002914 <__clzsi2>
 8001bcc:	230b      	movs	r3, #11
 8001bce:	425b      	negs	r3, r3
 8001bd0:	469c      	mov	ip, r3
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	4484      	add	ip, r0
 8001bd6:	0011      	movs	r1, r2
 8001bd8:	4650      	mov	r0, sl
 8001bda:	3908      	subs	r1, #8
 8001bdc:	4088      	lsls	r0, r1
 8001bde:	231d      	movs	r3, #29
 8001be0:	4680      	mov	r8, r0
 8001be2:	4660      	mov	r0, ip
 8001be4:	1a1b      	subs	r3, r3, r0
 8001be6:	0020      	movs	r0, r4
 8001be8:	40d8      	lsrs	r0, r3
 8001bea:	0003      	movs	r3, r0
 8001bec:	4640      	mov	r0, r8
 8001bee:	4303      	orrs	r3, r0
 8001bf0:	469a      	mov	sl, r3
 8001bf2:	0023      	movs	r3, r4
 8001bf4:	408b      	lsls	r3, r1
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4d44      	ldr	r5, [pc, #272]	@ (8001d0c <__aeabi_dmul+0x328>)
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	1aad      	subs	r5, r5, r2
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	e715      	b.n	8001a30 <__aeabi_dmul+0x4c>
 8001c04:	4652      	mov	r2, sl
 8001c06:	4302      	orrs	r2, r0
 8001c08:	4691      	mov	r9, r2
 8001c0a:	d126      	bne.n	8001c5a <__aeabi_dmul+0x276>
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	001d      	movs	r5, r3
 8001c10:	2302      	movs	r3, #2
 8001c12:	4692      	mov	sl, r2
 8001c14:	3208      	adds	r2, #8
 8001c16:	4690      	mov	r8, r2
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	e709      	b.n	8001a30 <__aeabi_dmul+0x4c>
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	4b35      	ldr	r3, [pc, #212]	@ (8001cf8 <__aeabi_dmul+0x314>)
 8001c22:	e735      	b.n	8001a90 <__aeabi_dmul+0xac>
 8001c24:	2300      	movs	r3, #0
 8001c26:	2480      	movs	r4, #128	@ 0x80
 8001c28:	469b      	mov	fp, r3
 8001c2a:	0324      	lsls	r4, r4, #12
 8001c2c:	4b32      	ldr	r3, [pc, #200]	@ (8001cf8 <__aeabi_dmul+0x314>)
 8001c2e:	e72f      	b.n	8001a90 <__aeabi_dmul+0xac>
 8001c30:	2202      	movs	r2, #2
 8001c32:	4641      	mov	r1, r8
 8001c34:	4311      	orrs	r1, r2
 8001c36:	2280      	movs	r2, #128	@ 0x80
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	4694      	mov	ip, r2
 8001c3c:	002a      	movs	r2, r5
 8001c3e:	4462      	add	r2, ip
 8001c40:	4688      	mov	r8, r1
 8001c42:	9201      	str	r2, [sp, #4]
 8001c44:	290a      	cmp	r1, #10
 8001c46:	dd00      	ble.n	8001c4a <__aeabi_dmul+0x266>
 8001c48:	e752      	b.n	8001af0 <__aeabi_dmul+0x10c>
 8001c4a:	465a      	mov	r2, fp
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	9900      	ldr	r1, [sp, #0]
 8001c50:	0004      	movs	r4, r0
 8001c52:	404a      	eors	r2, r1
 8001c54:	4693      	mov	fp, r2
 8001c56:	2602      	movs	r6, #2
 8001c58:	e70b      	b.n	8001a72 <__aeabi_dmul+0x8e>
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	001d      	movs	r5, r3
 8001c5e:	2303      	movs	r3, #3
 8001c60:	4681      	mov	r9, r0
 8001c62:	4690      	mov	r8, r2
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	e6e3      	b.n	8001a30 <__aeabi_dmul+0x4c>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	469a      	mov	sl, r3
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	4698      	mov	r8, r3
 8001c70:	3b03      	subs	r3, #3
 8001c72:	2500      	movs	r5, #0
 8001c74:	9302      	str	r3, [sp, #8]
 8001c76:	e6db      	b.n	8001a30 <__aeabi_dmul+0x4c>
 8001c78:	4642      	mov	r2, r8
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	002b      	movs	r3, r5
 8001c80:	4690      	mov	r8, r2
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	9201      	str	r2, [sp, #4]
 8001c86:	4642      	mov	r2, r8
 8001c88:	2400      	movs	r4, #0
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	2601      	movs	r6, #1
 8001c8e:	2a0a      	cmp	r2, #10
 8001c90:	dc00      	bgt.n	8001c94 <__aeabi_dmul+0x2b0>
 8001c92:	e6ea      	b.n	8001a6a <__aeabi_dmul+0x86>
 8001c94:	e72c      	b.n	8001af0 <__aeabi_dmul+0x10c>
 8001c96:	2201      	movs	r2, #1
 8001c98:	1ad2      	subs	r2, r2, r3
 8001c9a:	2a38      	cmp	r2, #56	@ 0x38
 8001c9c:	dd00      	ble.n	8001ca0 <__aeabi_dmul+0x2bc>
 8001c9e:	e6f4      	b.n	8001a8a <__aeabi_dmul+0xa6>
 8001ca0:	2a1f      	cmp	r2, #31
 8001ca2:	dc00      	bgt.n	8001ca6 <__aeabi_dmul+0x2c2>
 8001ca4:	e12a      	b.n	8001efc <__aeabi_dmul+0x518>
 8001ca6:	211f      	movs	r1, #31
 8001ca8:	4249      	negs	r1, r1
 8001caa:	1acb      	subs	r3, r1, r3
 8001cac:	0021      	movs	r1, r4
 8001cae:	40d9      	lsrs	r1, r3
 8001cb0:	000b      	movs	r3, r1
 8001cb2:	2a20      	cmp	r2, #32
 8001cb4:	d005      	beq.n	8001cc2 <__aeabi_dmul+0x2de>
 8001cb6:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <__aeabi_dmul+0x32c>)
 8001cb8:	9d01      	ldr	r5, [sp, #4]
 8001cba:	4694      	mov	ip, r2
 8001cbc:	4465      	add	r5, ip
 8001cbe:	40ac      	lsls	r4, r5
 8001cc0:	4320      	orrs	r0, r4
 8001cc2:	1e42      	subs	r2, r0, #1
 8001cc4:	4190      	sbcs	r0, r2
 8001cc6:	4318      	orrs	r0, r3
 8001cc8:	2307      	movs	r3, #7
 8001cca:	0019      	movs	r1, r3
 8001ccc:	2400      	movs	r4, #0
 8001cce:	4001      	ands	r1, r0
 8001cd0:	4203      	tst	r3, r0
 8001cd2:	d00c      	beq.n	8001cee <__aeabi_dmul+0x30a>
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	4003      	ands	r3, r0
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d100      	bne.n	8001cde <__aeabi_dmul+0x2fa>
 8001cdc:	e140      	b.n	8001f60 <__aeabi_dmul+0x57c>
 8001cde:	1d03      	adds	r3, r0, #4
 8001ce0:	4283      	cmp	r3, r0
 8001ce2:	41a4      	sbcs	r4, r4
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	4264      	negs	r4, r4
 8001ce8:	0761      	lsls	r1, r4, #29
 8001cea:	0264      	lsls	r4, r4, #9
 8001cec:	0b24      	lsrs	r4, r4, #12
 8001cee:	08c2      	lsrs	r2, r0, #3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	e6cc      	b.n	8001a90 <__aeabi_dmul+0xac>
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	000007ff 	.word	0x000007ff
 8001cfc:	fffffc01 	.word	0xfffffc01
 8001d00:	000003ff 	.word	0x000003ff
 8001d04:	feffffff 	.word	0xfeffffff
 8001d08:	000007fe 	.word	0x000007fe
 8001d0c:	fffffc0d 	.word	0xfffffc0d
 8001d10:	0000043e 	.word	0x0000043e
 8001d14:	4649      	mov	r1, r9
 8001d16:	464a      	mov	r2, r9
 8001d18:	0409      	lsls	r1, r1, #16
 8001d1a:	0c09      	lsrs	r1, r1, #16
 8001d1c:	000d      	movs	r5, r1
 8001d1e:	0c16      	lsrs	r6, r2, #16
 8001d20:	0c02      	lsrs	r2, r0, #16
 8001d22:	0400      	lsls	r0, r0, #16
 8001d24:	0c00      	lsrs	r0, r0, #16
 8001d26:	4345      	muls	r5, r0
 8001d28:	46ac      	mov	ip, r5
 8001d2a:	0005      	movs	r5, r0
 8001d2c:	4375      	muls	r5, r6
 8001d2e:	46a8      	mov	r8, r5
 8001d30:	0015      	movs	r5, r2
 8001d32:	000f      	movs	r7, r1
 8001d34:	4375      	muls	r5, r6
 8001d36:	9200      	str	r2, [sp, #0]
 8001d38:	9502      	str	r5, [sp, #8]
 8001d3a:	002a      	movs	r2, r5
 8001d3c:	9d00      	ldr	r5, [sp, #0]
 8001d3e:	436f      	muls	r7, r5
 8001d40:	4665      	mov	r5, ip
 8001d42:	0c2d      	lsrs	r5, r5, #16
 8001d44:	46a9      	mov	r9, r5
 8001d46:	4447      	add	r7, r8
 8001d48:	444f      	add	r7, r9
 8001d4a:	45b8      	cmp	r8, r7
 8001d4c:	d905      	bls.n	8001d5a <__aeabi_dmul+0x376>
 8001d4e:	0015      	movs	r5, r2
 8001d50:	2280      	movs	r2, #128	@ 0x80
 8001d52:	0252      	lsls	r2, r2, #9
 8001d54:	4690      	mov	r8, r2
 8001d56:	4445      	add	r5, r8
 8001d58:	9502      	str	r5, [sp, #8]
 8001d5a:	0c3d      	lsrs	r5, r7, #16
 8001d5c:	9503      	str	r5, [sp, #12]
 8001d5e:	4665      	mov	r5, ip
 8001d60:	042d      	lsls	r5, r5, #16
 8001d62:	043f      	lsls	r7, r7, #16
 8001d64:	0c2d      	lsrs	r5, r5, #16
 8001d66:	46ac      	mov	ip, r5
 8001d68:	003d      	movs	r5, r7
 8001d6a:	4465      	add	r5, ip
 8001d6c:	9504      	str	r5, [sp, #16]
 8001d6e:	0c25      	lsrs	r5, r4, #16
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	0c24      	lsrs	r4, r4, #16
 8001d74:	46ac      	mov	ip, r5
 8001d76:	0025      	movs	r5, r4
 8001d78:	4375      	muls	r5, r6
 8001d7a:	46a8      	mov	r8, r5
 8001d7c:	4665      	mov	r5, ip
 8001d7e:	000f      	movs	r7, r1
 8001d80:	4369      	muls	r1, r5
 8001d82:	4441      	add	r1, r8
 8001d84:	4689      	mov	r9, r1
 8001d86:	4367      	muls	r7, r4
 8001d88:	0c39      	lsrs	r1, r7, #16
 8001d8a:	4449      	add	r1, r9
 8001d8c:	436e      	muls	r6, r5
 8001d8e:	4588      	cmp	r8, r1
 8001d90:	d903      	bls.n	8001d9a <__aeabi_dmul+0x3b6>
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	0252      	lsls	r2, r2, #9
 8001d96:	4690      	mov	r8, r2
 8001d98:	4446      	add	r6, r8
 8001d9a:	0c0d      	lsrs	r5, r1, #16
 8001d9c:	46a8      	mov	r8, r5
 8001d9e:	0035      	movs	r5, r6
 8001da0:	4445      	add	r5, r8
 8001da2:	9505      	str	r5, [sp, #20]
 8001da4:	9d03      	ldr	r5, [sp, #12]
 8001da6:	043f      	lsls	r7, r7, #16
 8001da8:	46a8      	mov	r8, r5
 8001daa:	0c3f      	lsrs	r7, r7, #16
 8001dac:	0409      	lsls	r1, r1, #16
 8001dae:	19c9      	adds	r1, r1, r7
 8001db0:	4488      	add	r8, r1
 8001db2:	4645      	mov	r5, r8
 8001db4:	9503      	str	r5, [sp, #12]
 8001db6:	4655      	mov	r5, sl
 8001db8:	042e      	lsls	r6, r5, #16
 8001dba:	0c36      	lsrs	r6, r6, #16
 8001dbc:	0c2f      	lsrs	r7, r5, #16
 8001dbe:	0035      	movs	r5, r6
 8001dc0:	4345      	muls	r5, r0
 8001dc2:	4378      	muls	r0, r7
 8001dc4:	4681      	mov	r9, r0
 8001dc6:	0038      	movs	r0, r7
 8001dc8:	46a8      	mov	r8, r5
 8001dca:	0c2d      	lsrs	r5, r5, #16
 8001dcc:	46aa      	mov	sl, r5
 8001dce:	9a00      	ldr	r2, [sp, #0]
 8001dd0:	4350      	muls	r0, r2
 8001dd2:	4372      	muls	r2, r6
 8001dd4:	444a      	add	r2, r9
 8001dd6:	4452      	add	r2, sl
 8001dd8:	4591      	cmp	r9, r2
 8001dda:	d903      	bls.n	8001de4 <__aeabi_dmul+0x400>
 8001ddc:	2580      	movs	r5, #128	@ 0x80
 8001dde:	026d      	lsls	r5, r5, #9
 8001de0:	46a9      	mov	r9, r5
 8001de2:	4448      	add	r0, r9
 8001de4:	0c15      	lsrs	r5, r2, #16
 8001de6:	46a9      	mov	r9, r5
 8001de8:	4645      	mov	r5, r8
 8001dea:	042d      	lsls	r5, r5, #16
 8001dec:	0c2d      	lsrs	r5, r5, #16
 8001dee:	46a8      	mov	r8, r5
 8001df0:	4665      	mov	r5, ip
 8001df2:	437d      	muls	r5, r7
 8001df4:	0412      	lsls	r2, r2, #16
 8001df6:	4448      	add	r0, r9
 8001df8:	4490      	add	r8, r2
 8001dfa:	46a9      	mov	r9, r5
 8001dfc:	0032      	movs	r2, r6
 8001dfe:	4665      	mov	r5, ip
 8001e00:	4362      	muls	r2, r4
 8001e02:	436e      	muls	r6, r5
 8001e04:	437c      	muls	r4, r7
 8001e06:	0c17      	lsrs	r7, r2, #16
 8001e08:	1936      	adds	r6, r6, r4
 8001e0a:	19bf      	adds	r7, r7, r6
 8001e0c:	42bc      	cmp	r4, r7
 8001e0e:	d903      	bls.n	8001e18 <__aeabi_dmul+0x434>
 8001e10:	2480      	movs	r4, #128	@ 0x80
 8001e12:	0264      	lsls	r4, r4, #9
 8001e14:	46a4      	mov	ip, r4
 8001e16:	44e1      	add	r9, ip
 8001e18:	9c02      	ldr	r4, [sp, #8]
 8001e1a:	9e03      	ldr	r6, [sp, #12]
 8001e1c:	46a4      	mov	ip, r4
 8001e1e:	9d05      	ldr	r5, [sp, #20]
 8001e20:	4466      	add	r6, ip
 8001e22:	428e      	cmp	r6, r1
 8001e24:	4189      	sbcs	r1, r1
 8001e26:	46ac      	mov	ip, r5
 8001e28:	0412      	lsls	r2, r2, #16
 8001e2a:	043c      	lsls	r4, r7, #16
 8001e2c:	0c12      	lsrs	r2, r2, #16
 8001e2e:	18a2      	adds	r2, r4, r2
 8001e30:	4462      	add	r2, ip
 8001e32:	4249      	negs	r1, r1
 8001e34:	1854      	adds	r4, r2, r1
 8001e36:	4446      	add	r6, r8
 8001e38:	46a4      	mov	ip, r4
 8001e3a:	4546      	cmp	r6, r8
 8001e3c:	41a4      	sbcs	r4, r4
 8001e3e:	4682      	mov	sl, r0
 8001e40:	4264      	negs	r4, r4
 8001e42:	46a0      	mov	r8, r4
 8001e44:	42aa      	cmp	r2, r5
 8001e46:	4192      	sbcs	r2, r2
 8001e48:	458c      	cmp	ip, r1
 8001e4a:	4189      	sbcs	r1, r1
 8001e4c:	44e2      	add	sl, ip
 8001e4e:	44d0      	add	r8, sl
 8001e50:	4249      	negs	r1, r1
 8001e52:	4252      	negs	r2, r2
 8001e54:	430a      	orrs	r2, r1
 8001e56:	45a0      	cmp	r8, r4
 8001e58:	41a4      	sbcs	r4, r4
 8001e5a:	4582      	cmp	sl, r0
 8001e5c:	4189      	sbcs	r1, r1
 8001e5e:	4264      	negs	r4, r4
 8001e60:	4249      	negs	r1, r1
 8001e62:	430c      	orrs	r4, r1
 8001e64:	4641      	mov	r1, r8
 8001e66:	0c3f      	lsrs	r7, r7, #16
 8001e68:	19d2      	adds	r2, r2, r7
 8001e6a:	1912      	adds	r2, r2, r4
 8001e6c:	0dcc      	lsrs	r4, r1, #23
 8001e6e:	9904      	ldr	r1, [sp, #16]
 8001e70:	0270      	lsls	r0, r6, #9
 8001e72:	4308      	orrs	r0, r1
 8001e74:	1e41      	subs	r1, r0, #1
 8001e76:	4188      	sbcs	r0, r1
 8001e78:	4641      	mov	r1, r8
 8001e7a:	444a      	add	r2, r9
 8001e7c:	0df6      	lsrs	r6, r6, #23
 8001e7e:	0252      	lsls	r2, r2, #9
 8001e80:	4330      	orrs	r0, r6
 8001e82:	0249      	lsls	r1, r1, #9
 8001e84:	4314      	orrs	r4, r2
 8001e86:	4308      	orrs	r0, r1
 8001e88:	01d2      	lsls	r2, r2, #7
 8001e8a:	d535      	bpl.n	8001ef8 <__aeabi_dmul+0x514>
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	0843      	lsrs	r3, r0, #1
 8001e90:	4002      	ands	r2, r0
 8001e92:	4313      	orrs	r3, r2
 8001e94:	07e0      	lsls	r0, r4, #31
 8001e96:	4318      	orrs	r0, r3
 8001e98:	0864      	lsrs	r4, r4, #1
 8001e9a:	e634      	b.n	8001b06 <__aeabi_dmul+0x122>
 8001e9c:	9b00      	ldr	r3, [sp, #0]
 8001e9e:	46a2      	mov	sl, r4
 8001ea0:	469b      	mov	fp, r3
 8001ea2:	4681      	mov	r9, r0
 8001ea4:	2480      	movs	r4, #128	@ 0x80
 8001ea6:	4653      	mov	r3, sl
 8001ea8:	0324      	lsls	r4, r4, #12
 8001eaa:	431c      	orrs	r4, r3
 8001eac:	0324      	lsls	r4, r4, #12
 8001eae:	464a      	mov	r2, r9
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <__aeabi_dmul+0x588>)
 8001eb2:	0b24      	lsrs	r4, r4, #12
 8001eb4:	e5ec      	b.n	8001a90 <__aeabi_dmul+0xac>
 8001eb6:	f000 fd2d 	bl	8002914 <__clzsi2>
 8001eba:	2315      	movs	r3, #21
 8001ebc:	469c      	mov	ip, r3
 8001ebe:	4484      	add	ip, r0
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	4663      	mov	r3, ip
 8001ec4:	3220      	adds	r2, #32
 8001ec6:	2b1c      	cmp	r3, #28
 8001ec8:	dc00      	bgt.n	8001ecc <__aeabi_dmul+0x4e8>
 8001eca:	e684      	b.n	8001bd6 <__aeabi_dmul+0x1f2>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	4699      	mov	r9, r3
 8001ed0:	0023      	movs	r3, r4
 8001ed2:	3808      	subs	r0, #8
 8001ed4:	4083      	lsls	r3, r0
 8001ed6:	469a      	mov	sl, r3
 8001ed8:	e68e      	b.n	8001bf8 <__aeabi_dmul+0x214>
 8001eda:	f000 fd1b 	bl	8002914 <__clzsi2>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	3215      	adds	r2, #21
 8001ee4:	3320      	adds	r3, #32
 8001ee6:	2a1c      	cmp	r2, #28
 8001ee8:	dc00      	bgt.n	8001eec <__aeabi_dmul+0x508>
 8001eea:	e64e      	b.n	8001b8a <__aeabi_dmul+0x1a6>
 8001eec:	0002      	movs	r2, r0
 8001eee:	0034      	movs	r4, r6
 8001ef0:	3a08      	subs	r2, #8
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	4094      	lsls	r4, r2
 8001ef6:	e652      	b.n	8001b9e <__aeabi_dmul+0x1ba>
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	e604      	b.n	8001b06 <__aeabi_dmul+0x122>
 8001efc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <__aeabi_dmul+0x58c>)
 8001efe:	0021      	movs	r1, r4
 8001f00:	469c      	mov	ip, r3
 8001f02:	0003      	movs	r3, r0
 8001f04:	9d01      	ldr	r5, [sp, #4]
 8001f06:	40d3      	lsrs	r3, r2
 8001f08:	4465      	add	r5, ip
 8001f0a:	40a9      	lsls	r1, r5
 8001f0c:	4319      	orrs	r1, r3
 8001f0e:	0003      	movs	r3, r0
 8001f10:	40ab      	lsls	r3, r5
 8001f12:	1e58      	subs	r0, r3, #1
 8001f14:	4183      	sbcs	r3, r0
 8001f16:	4319      	orrs	r1, r3
 8001f18:	0008      	movs	r0, r1
 8001f1a:	40d4      	lsrs	r4, r2
 8001f1c:	074b      	lsls	r3, r1, #29
 8001f1e:	d009      	beq.n	8001f34 <__aeabi_dmul+0x550>
 8001f20:	230f      	movs	r3, #15
 8001f22:	400b      	ands	r3, r1
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d005      	beq.n	8001f34 <__aeabi_dmul+0x550>
 8001f28:	1d0b      	adds	r3, r1, #4
 8001f2a:	428b      	cmp	r3, r1
 8001f2c:	4180      	sbcs	r0, r0
 8001f2e:	4240      	negs	r0, r0
 8001f30:	1824      	adds	r4, r4, r0
 8001f32:	0018      	movs	r0, r3
 8001f34:	0223      	lsls	r3, r4, #8
 8001f36:	d400      	bmi.n	8001f3a <__aeabi_dmul+0x556>
 8001f38:	e6d6      	b.n	8001ce8 <__aeabi_dmul+0x304>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	2400      	movs	r4, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e5a6      	b.n	8001a90 <__aeabi_dmul+0xac>
 8001f42:	290f      	cmp	r1, #15
 8001f44:	d1aa      	bne.n	8001e9c <__aeabi_dmul+0x4b8>
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	4652      	mov	r2, sl
 8001f4a:	031b      	lsls	r3, r3, #12
 8001f4c:	421a      	tst	r2, r3
 8001f4e:	d0a9      	beq.n	8001ea4 <__aeabi_dmul+0x4c0>
 8001f50:	421c      	tst	r4, r3
 8001f52:	d1a7      	bne.n	8001ea4 <__aeabi_dmul+0x4c0>
 8001f54:	431c      	orrs	r4, r3
 8001f56:	9b00      	ldr	r3, [sp, #0]
 8001f58:	0002      	movs	r2, r0
 8001f5a:	469b      	mov	fp, r3
 8001f5c:	4b03      	ldr	r3, [pc, #12]	@ (8001f6c <__aeabi_dmul+0x588>)
 8001f5e:	e597      	b.n	8001a90 <__aeabi_dmul+0xac>
 8001f60:	2400      	movs	r4, #0
 8001f62:	e6c1      	b.n	8001ce8 <__aeabi_dmul+0x304>
 8001f64:	2400      	movs	r4, #0
 8001f66:	4b01      	ldr	r3, [pc, #4]	@ (8001f6c <__aeabi_dmul+0x588>)
 8001f68:	0022      	movs	r2, r4
 8001f6a:	e591      	b.n	8001a90 <__aeabi_dmul+0xac>
 8001f6c:	000007ff 	.word	0x000007ff
 8001f70:	0000041e 	.word	0x0000041e

08001f74 <__aeabi_dsub>:
 8001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f76:	464e      	mov	r6, r9
 8001f78:	4645      	mov	r5, r8
 8001f7a:	46de      	mov	lr, fp
 8001f7c:	4657      	mov	r7, sl
 8001f7e:	b5e0      	push	{r5, r6, r7, lr}
 8001f80:	b085      	sub	sp, #20
 8001f82:	9000      	str	r0, [sp, #0]
 8001f84:	9101      	str	r1, [sp, #4]
 8001f86:	030c      	lsls	r4, r1, #12
 8001f88:	004f      	lsls	r7, r1, #1
 8001f8a:	0fce      	lsrs	r6, r1, #31
 8001f8c:	0a61      	lsrs	r1, r4, #9
 8001f8e:	9c00      	ldr	r4, [sp, #0]
 8001f90:	46b0      	mov	r8, r6
 8001f92:	0f64      	lsrs	r4, r4, #29
 8001f94:	430c      	orrs	r4, r1
 8001f96:	9900      	ldr	r1, [sp, #0]
 8001f98:	0d7f      	lsrs	r7, r7, #21
 8001f9a:	00c8      	lsls	r0, r1, #3
 8001f9c:	0011      	movs	r1, r2
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	031b      	lsls	r3, r3, #12
 8001fa2:	469c      	mov	ip, r3
 8001fa4:	9100      	str	r1, [sp, #0]
 8001fa6:	9201      	str	r2, [sp, #4]
 8001fa8:	0051      	lsls	r1, r2, #1
 8001faa:	0d4b      	lsrs	r3, r1, #21
 8001fac:	4699      	mov	r9, r3
 8001fae:	9b01      	ldr	r3, [sp, #4]
 8001fb0:	9d00      	ldr	r5, [sp, #0]
 8001fb2:	0fd9      	lsrs	r1, r3, #31
 8001fb4:	4663      	mov	r3, ip
 8001fb6:	0f6a      	lsrs	r2, r5, #29
 8001fb8:	0a5b      	lsrs	r3, r3, #9
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	00ea      	lsls	r2, r5, #3
 8001fbe:	4694      	mov	ip, r2
 8001fc0:	4693      	mov	fp, r2
 8001fc2:	4ac1      	ldr	r2, [pc, #772]	@ (80022c8 <__aeabi_dsub+0x354>)
 8001fc4:	9003      	str	r0, [sp, #12]
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	4591      	cmp	r9, r2
 8001fca:	d100      	bne.n	8001fce <__aeabi_dsub+0x5a>
 8001fcc:	e0cd      	b.n	800216a <__aeabi_dsub+0x1f6>
 8001fce:	2501      	movs	r5, #1
 8001fd0:	4069      	eors	r1, r5
 8001fd2:	464d      	mov	r5, r9
 8001fd4:	1b7d      	subs	r5, r7, r5
 8001fd6:	46aa      	mov	sl, r5
 8001fd8:	428e      	cmp	r6, r1
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x6a>
 8001fdc:	e080      	b.n	80020e0 <__aeabi_dsub+0x16c>
 8001fde:	2d00      	cmp	r5, #0
 8001fe0:	dc00      	bgt.n	8001fe4 <__aeabi_dsub+0x70>
 8001fe2:	e335      	b.n	8002650 <__aeabi_dsub+0x6dc>
 8001fe4:	4649      	mov	r1, r9
 8001fe6:	2900      	cmp	r1, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x78>
 8001fea:	e0df      	b.n	80021ac <__aeabi_dsub+0x238>
 8001fec:	4297      	cmp	r7, r2
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x7e>
 8001ff0:	e194      	b.n	800231c <__aeabi_dsub+0x3a8>
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	2501      	movs	r5, #1
 8001ff6:	2a38      	cmp	r2, #56	@ 0x38
 8001ff8:	dc19      	bgt.n	800202e <__aeabi_dsub+0xba>
 8001ffa:	2280      	movs	r2, #128	@ 0x80
 8001ffc:	9b02      	ldr	r3, [sp, #8]
 8001ffe:	0412      	lsls	r2, r2, #16
 8002000:	4313      	orrs	r3, r2
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	4652      	mov	r2, sl
 8002006:	2a1f      	cmp	r2, #31
 8002008:	dd00      	ble.n	800200c <__aeabi_dsub+0x98>
 800200a:	e1e3      	b.n	80023d4 <__aeabi_dsub+0x460>
 800200c:	4653      	mov	r3, sl
 800200e:	2220      	movs	r2, #32
 8002010:	4661      	mov	r1, ip
 8002012:	9d02      	ldr	r5, [sp, #8]
 8002014:	1ad2      	subs	r2, r2, r3
 8002016:	4095      	lsls	r5, r2
 8002018:	40d9      	lsrs	r1, r3
 800201a:	430d      	orrs	r5, r1
 800201c:	4661      	mov	r1, ip
 800201e:	4091      	lsls	r1, r2
 8002020:	000a      	movs	r2, r1
 8002022:	1e51      	subs	r1, r2, #1
 8002024:	418a      	sbcs	r2, r1
 8002026:	4315      	orrs	r5, r2
 8002028:	9a02      	ldr	r2, [sp, #8]
 800202a:	40da      	lsrs	r2, r3
 800202c:	1aa4      	subs	r4, r4, r2
 800202e:	1b45      	subs	r5, r0, r5
 8002030:	42a8      	cmp	r0, r5
 8002032:	4180      	sbcs	r0, r0
 8002034:	4240      	negs	r0, r0
 8002036:	1a24      	subs	r4, r4, r0
 8002038:	0223      	lsls	r3, r4, #8
 800203a:	d400      	bmi.n	800203e <__aeabi_dsub+0xca>
 800203c:	e13d      	b.n	80022ba <__aeabi_dsub+0x346>
 800203e:	0264      	lsls	r4, r4, #9
 8002040:	0a64      	lsrs	r4, r4, #9
 8002042:	2c00      	cmp	r4, #0
 8002044:	d100      	bne.n	8002048 <__aeabi_dsub+0xd4>
 8002046:	e147      	b.n	80022d8 <__aeabi_dsub+0x364>
 8002048:	0020      	movs	r0, r4
 800204a:	f000 fc63 	bl	8002914 <__clzsi2>
 800204e:	0003      	movs	r3, r0
 8002050:	3b08      	subs	r3, #8
 8002052:	2120      	movs	r1, #32
 8002054:	0028      	movs	r0, r5
 8002056:	1aca      	subs	r2, r1, r3
 8002058:	40d0      	lsrs	r0, r2
 800205a:	409c      	lsls	r4, r3
 800205c:	0002      	movs	r2, r0
 800205e:	409d      	lsls	r5, r3
 8002060:	4322      	orrs	r2, r4
 8002062:	429f      	cmp	r7, r3
 8002064:	dd00      	ble.n	8002068 <__aeabi_dsub+0xf4>
 8002066:	e177      	b.n	8002358 <__aeabi_dsub+0x3e4>
 8002068:	1bd8      	subs	r0, r3, r7
 800206a:	3001      	adds	r0, #1
 800206c:	1a09      	subs	r1, r1, r0
 800206e:	002c      	movs	r4, r5
 8002070:	408d      	lsls	r5, r1
 8002072:	40c4      	lsrs	r4, r0
 8002074:	1e6b      	subs	r3, r5, #1
 8002076:	419d      	sbcs	r5, r3
 8002078:	0013      	movs	r3, r2
 800207a:	40c2      	lsrs	r2, r0
 800207c:	408b      	lsls	r3, r1
 800207e:	4325      	orrs	r5, r4
 8002080:	2700      	movs	r7, #0
 8002082:	0014      	movs	r4, r2
 8002084:	431d      	orrs	r5, r3
 8002086:	076b      	lsls	r3, r5, #29
 8002088:	d009      	beq.n	800209e <__aeabi_dsub+0x12a>
 800208a:	230f      	movs	r3, #15
 800208c:	402b      	ands	r3, r5
 800208e:	2b04      	cmp	r3, #4
 8002090:	d005      	beq.n	800209e <__aeabi_dsub+0x12a>
 8002092:	1d2b      	adds	r3, r5, #4
 8002094:	42ab      	cmp	r3, r5
 8002096:	41ad      	sbcs	r5, r5
 8002098:	426d      	negs	r5, r5
 800209a:	1964      	adds	r4, r4, r5
 800209c:	001d      	movs	r5, r3
 800209e:	0223      	lsls	r3, r4, #8
 80020a0:	d400      	bmi.n	80020a4 <__aeabi_dsub+0x130>
 80020a2:	e140      	b.n	8002326 <__aeabi_dsub+0x3b2>
 80020a4:	4a88      	ldr	r2, [pc, #544]	@ (80022c8 <__aeabi_dsub+0x354>)
 80020a6:	3701      	adds	r7, #1
 80020a8:	4297      	cmp	r7, r2
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x13a>
 80020ac:	e101      	b.n	80022b2 <__aeabi_dsub+0x33e>
 80020ae:	2601      	movs	r6, #1
 80020b0:	4643      	mov	r3, r8
 80020b2:	4986      	ldr	r1, [pc, #536]	@ (80022cc <__aeabi_dsub+0x358>)
 80020b4:	08ed      	lsrs	r5, r5, #3
 80020b6:	4021      	ands	r1, r4
 80020b8:	074a      	lsls	r2, r1, #29
 80020ba:	432a      	orrs	r2, r5
 80020bc:	057c      	lsls	r4, r7, #21
 80020be:	024d      	lsls	r5, r1, #9
 80020c0:	0b2d      	lsrs	r5, r5, #12
 80020c2:	0d64      	lsrs	r4, r4, #21
 80020c4:	401e      	ands	r6, r3
 80020c6:	0524      	lsls	r4, r4, #20
 80020c8:	432c      	orrs	r4, r5
 80020ca:	07f6      	lsls	r6, r6, #31
 80020cc:	4334      	orrs	r4, r6
 80020ce:	0010      	movs	r0, r2
 80020d0:	0021      	movs	r1, r4
 80020d2:	b005      	add	sp, #20
 80020d4:	bcf0      	pop	{r4, r5, r6, r7}
 80020d6:	46bb      	mov	fp, r7
 80020d8:	46b2      	mov	sl, r6
 80020da:	46a9      	mov	r9, r5
 80020dc:	46a0      	mov	r8, r4
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	2d00      	cmp	r5, #0
 80020e2:	dc00      	bgt.n	80020e6 <__aeabi_dsub+0x172>
 80020e4:	e2d0      	b.n	8002688 <__aeabi_dsub+0x714>
 80020e6:	4649      	mov	r1, r9
 80020e8:	2900      	cmp	r1, #0
 80020ea:	d000      	beq.n	80020ee <__aeabi_dsub+0x17a>
 80020ec:	e0d4      	b.n	8002298 <__aeabi_dsub+0x324>
 80020ee:	4661      	mov	r1, ip
 80020f0:	9b02      	ldr	r3, [sp, #8]
 80020f2:	4319      	orrs	r1, r3
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x184>
 80020f6:	e12b      	b.n	8002350 <__aeabi_dsub+0x3dc>
 80020f8:	1e69      	subs	r1, r5, #1
 80020fa:	2d01      	cmp	r5, #1
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x18c>
 80020fe:	e1d9      	b.n	80024b4 <__aeabi_dsub+0x540>
 8002100:	4295      	cmp	r5, r2
 8002102:	d100      	bne.n	8002106 <__aeabi_dsub+0x192>
 8002104:	e10a      	b.n	800231c <__aeabi_dsub+0x3a8>
 8002106:	2501      	movs	r5, #1
 8002108:	2938      	cmp	r1, #56	@ 0x38
 800210a:	dc17      	bgt.n	800213c <__aeabi_dsub+0x1c8>
 800210c:	468a      	mov	sl, r1
 800210e:	4653      	mov	r3, sl
 8002110:	2b1f      	cmp	r3, #31
 8002112:	dd00      	ble.n	8002116 <__aeabi_dsub+0x1a2>
 8002114:	e1e7      	b.n	80024e6 <__aeabi_dsub+0x572>
 8002116:	2220      	movs	r2, #32
 8002118:	1ad2      	subs	r2, r2, r3
 800211a:	9b02      	ldr	r3, [sp, #8]
 800211c:	4661      	mov	r1, ip
 800211e:	4093      	lsls	r3, r2
 8002120:	001d      	movs	r5, r3
 8002122:	4653      	mov	r3, sl
 8002124:	40d9      	lsrs	r1, r3
 8002126:	4663      	mov	r3, ip
 8002128:	4093      	lsls	r3, r2
 800212a:	001a      	movs	r2, r3
 800212c:	430d      	orrs	r5, r1
 800212e:	1e51      	subs	r1, r2, #1
 8002130:	418a      	sbcs	r2, r1
 8002132:	4653      	mov	r3, sl
 8002134:	4315      	orrs	r5, r2
 8002136:	9a02      	ldr	r2, [sp, #8]
 8002138:	40da      	lsrs	r2, r3
 800213a:	18a4      	adds	r4, r4, r2
 800213c:	182d      	adds	r5, r5, r0
 800213e:	4285      	cmp	r5, r0
 8002140:	4180      	sbcs	r0, r0
 8002142:	4240      	negs	r0, r0
 8002144:	1824      	adds	r4, r4, r0
 8002146:	0223      	lsls	r3, r4, #8
 8002148:	d400      	bmi.n	800214c <__aeabi_dsub+0x1d8>
 800214a:	e0b6      	b.n	80022ba <__aeabi_dsub+0x346>
 800214c:	4b5e      	ldr	r3, [pc, #376]	@ (80022c8 <__aeabi_dsub+0x354>)
 800214e:	3701      	adds	r7, #1
 8002150:	429f      	cmp	r7, r3
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x1e2>
 8002154:	e0ad      	b.n	80022b2 <__aeabi_dsub+0x33e>
 8002156:	2101      	movs	r1, #1
 8002158:	4b5c      	ldr	r3, [pc, #368]	@ (80022cc <__aeabi_dsub+0x358>)
 800215a:	086a      	lsrs	r2, r5, #1
 800215c:	401c      	ands	r4, r3
 800215e:	4029      	ands	r1, r5
 8002160:	430a      	orrs	r2, r1
 8002162:	07e5      	lsls	r5, r4, #31
 8002164:	4315      	orrs	r5, r2
 8002166:	0864      	lsrs	r4, r4, #1
 8002168:	e78d      	b.n	8002086 <__aeabi_dsub+0x112>
 800216a:	4a59      	ldr	r2, [pc, #356]	@ (80022d0 <__aeabi_dsub+0x35c>)
 800216c:	9b02      	ldr	r3, [sp, #8]
 800216e:	4692      	mov	sl, r2
 8002170:	4662      	mov	r2, ip
 8002172:	44ba      	add	sl, r7
 8002174:	431a      	orrs	r2, r3
 8002176:	d02c      	beq.n	80021d2 <__aeabi_dsub+0x25e>
 8002178:	428e      	cmp	r6, r1
 800217a:	d02e      	beq.n	80021da <__aeabi_dsub+0x266>
 800217c:	4652      	mov	r2, sl
 800217e:	2a00      	cmp	r2, #0
 8002180:	d060      	beq.n	8002244 <__aeabi_dsub+0x2d0>
 8002182:	2f00      	cmp	r7, #0
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x214>
 8002186:	e0db      	b.n	8002340 <__aeabi_dsub+0x3cc>
 8002188:	4663      	mov	r3, ip
 800218a:	000e      	movs	r6, r1
 800218c:	9c02      	ldr	r4, [sp, #8]
 800218e:	08d8      	lsrs	r0, r3, #3
 8002190:	0762      	lsls	r2, r4, #29
 8002192:	4302      	orrs	r2, r0
 8002194:	08e4      	lsrs	r4, r4, #3
 8002196:	0013      	movs	r3, r2
 8002198:	4323      	orrs	r3, r4
 800219a:	d100      	bne.n	800219e <__aeabi_dsub+0x22a>
 800219c:	e254      	b.n	8002648 <__aeabi_dsub+0x6d4>
 800219e:	2580      	movs	r5, #128	@ 0x80
 80021a0:	032d      	lsls	r5, r5, #12
 80021a2:	4325      	orrs	r5, r4
 80021a4:	032d      	lsls	r5, r5, #12
 80021a6:	4c48      	ldr	r4, [pc, #288]	@ (80022c8 <__aeabi_dsub+0x354>)
 80021a8:	0b2d      	lsrs	r5, r5, #12
 80021aa:	e78c      	b.n	80020c6 <__aeabi_dsub+0x152>
 80021ac:	4661      	mov	r1, ip
 80021ae:	9b02      	ldr	r3, [sp, #8]
 80021b0:	4319      	orrs	r1, r3
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x242>
 80021b4:	e0cc      	b.n	8002350 <__aeabi_dsub+0x3dc>
 80021b6:	0029      	movs	r1, r5
 80021b8:	3901      	subs	r1, #1
 80021ba:	2d01      	cmp	r5, #1
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x24c>
 80021be:	e188      	b.n	80024d2 <__aeabi_dsub+0x55e>
 80021c0:	4295      	cmp	r5, r2
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dsub+0x252>
 80021c4:	e0aa      	b.n	800231c <__aeabi_dsub+0x3a8>
 80021c6:	2501      	movs	r5, #1
 80021c8:	2938      	cmp	r1, #56	@ 0x38
 80021ca:	dd00      	ble.n	80021ce <__aeabi_dsub+0x25a>
 80021cc:	e72f      	b.n	800202e <__aeabi_dsub+0xba>
 80021ce:	468a      	mov	sl, r1
 80021d0:	e718      	b.n	8002004 <__aeabi_dsub+0x90>
 80021d2:	2201      	movs	r2, #1
 80021d4:	4051      	eors	r1, r2
 80021d6:	428e      	cmp	r6, r1
 80021d8:	d1d0      	bne.n	800217c <__aeabi_dsub+0x208>
 80021da:	4653      	mov	r3, sl
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d100      	bne.n	80021e2 <__aeabi_dsub+0x26e>
 80021e0:	e0be      	b.n	8002360 <__aeabi_dsub+0x3ec>
 80021e2:	2f00      	cmp	r7, #0
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dsub+0x274>
 80021e6:	e138      	b.n	800245a <__aeabi_dsub+0x4e6>
 80021e8:	46ca      	mov	sl, r9
 80021ea:	0022      	movs	r2, r4
 80021ec:	4302      	orrs	r2, r0
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dsub+0x27e>
 80021f0:	e1e2      	b.n	80025b8 <__aeabi_dsub+0x644>
 80021f2:	4653      	mov	r3, sl
 80021f4:	1e59      	subs	r1, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x288>
 80021fa:	e20d      	b.n	8002618 <__aeabi_dsub+0x6a4>
 80021fc:	4a32      	ldr	r2, [pc, #200]	@ (80022c8 <__aeabi_dsub+0x354>)
 80021fe:	4592      	cmp	sl, r2
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x290>
 8002202:	e1d2      	b.n	80025aa <__aeabi_dsub+0x636>
 8002204:	2701      	movs	r7, #1
 8002206:	2938      	cmp	r1, #56	@ 0x38
 8002208:	dc13      	bgt.n	8002232 <__aeabi_dsub+0x2be>
 800220a:	291f      	cmp	r1, #31
 800220c:	dd00      	ble.n	8002210 <__aeabi_dsub+0x29c>
 800220e:	e1ee      	b.n	80025ee <__aeabi_dsub+0x67a>
 8002210:	2220      	movs	r2, #32
 8002212:	9b02      	ldr	r3, [sp, #8]
 8002214:	1a52      	subs	r2, r2, r1
 8002216:	0025      	movs	r5, r4
 8002218:	0007      	movs	r7, r0
 800221a:	469a      	mov	sl, r3
 800221c:	40cc      	lsrs	r4, r1
 800221e:	4090      	lsls	r0, r2
 8002220:	4095      	lsls	r5, r2
 8002222:	40cf      	lsrs	r7, r1
 8002224:	44a2      	add	sl, r4
 8002226:	1e42      	subs	r2, r0, #1
 8002228:	4190      	sbcs	r0, r2
 800222a:	4653      	mov	r3, sl
 800222c:	432f      	orrs	r7, r5
 800222e:	4307      	orrs	r7, r0
 8002230:	9302      	str	r3, [sp, #8]
 8002232:	003d      	movs	r5, r7
 8002234:	4465      	add	r5, ip
 8002236:	4565      	cmp	r5, ip
 8002238:	4192      	sbcs	r2, r2
 800223a:	9b02      	ldr	r3, [sp, #8]
 800223c:	4252      	negs	r2, r2
 800223e:	464f      	mov	r7, r9
 8002240:	18d4      	adds	r4, r2, r3
 8002242:	e780      	b.n	8002146 <__aeabi_dsub+0x1d2>
 8002244:	4a23      	ldr	r2, [pc, #140]	@ (80022d4 <__aeabi_dsub+0x360>)
 8002246:	1c7d      	adds	r5, r7, #1
 8002248:	4215      	tst	r5, r2
 800224a:	d000      	beq.n	800224e <__aeabi_dsub+0x2da>
 800224c:	e0aa      	b.n	80023a4 <__aeabi_dsub+0x430>
 800224e:	4662      	mov	r2, ip
 8002250:	0025      	movs	r5, r4
 8002252:	9b02      	ldr	r3, [sp, #8]
 8002254:	4305      	orrs	r5, r0
 8002256:	431a      	orrs	r2, r3
 8002258:	2f00      	cmp	r7, #0
 800225a:	d000      	beq.n	800225e <__aeabi_dsub+0x2ea>
 800225c:	e0f5      	b.n	800244a <__aeabi_dsub+0x4d6>
 800225e:	2d00      	cmp	r5, #0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x2f0>
 8002262:	e16b      	b.n	800253c <__aeabi_dsub+0x5c8>
 8002264:	2a00      	cmp	r2, #0
 8002266:	d100      	bne.n	800226a <__aeabi_dsub+0x2f6>
 8002268:	e152      	b.n	8002510 <__aeabi_dsub+0x59c>
 800226a:	4663      	mov	r3, ip
 800226c:	1ac5      	subs	r5, r0, r3
 800226e:	9b02      	ldr	r3, [sp, #8]
 8002270:	1ae2      	subs	r2, r4, r3
 8002272:	42a8      	cmp	r0, r5
 8002274:	419b      	sbcs	r3, r3
 8002276:	425b      	negs	r3, r3
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	021a      	lsls	r2, r3, #8
 800227c:	d400      	bmi.n	8002280 <__aeabi_dsub+0x30c>
 800227e:	e1d5      	b.n	800262c <__aeabi_dsub+0x6b8>
 8002280:	4663      	mov	r3, ip
 8002282:	1a1d      	subs	r5, r3, r0
 8002284:	45ac      	cmp	ip, r5
 8002286:	4192      	sbcs	r2, r2
 8002288:	2601      	movs	r6, #1
 800228a:	9b02      	ldr	r3, [sp, #8]
 800228c:	4252      	negs	r2, r2
 800228e:	1b1c      	subs	r4, r3, r4
 8002290:	4688      	mov	r8, r1
 8002292:	1aa4      	subs	r4, r4, r2
 8002294:	400e      	ands	r6, r1
 8002296:	e6f6      	b.n	8002086 <__aeabi_dsub+0x112>
 8002298:	4297      	cmp	r7, r2
 800229a:	d03f      	beq.n	800231c <__aeabi_dsub+0x3a8>
 800229c:	4652      	mov	r2, sl
 800229e:	2501      	movs	r5, #1
 80022a0:	2a38      	cmp	r2, #56	@ 0x38
 80022a2:	dd00      	ble.n	80022a6 <__aeabi_dsub+0x332>
 80022a4:	e74a      	b.n	800213c <__aeabi_dsub+0x1c8>
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	9b02      	ldr	r3, [sp, #8]
 80022aa:	0412      	lsls	r2, r2, #16
 80022ac:	4313      	orrs	r3, r2
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	e72d      	b.n	800210e <__aeabi_dsub+0x19a>
 80022b2:	003c      	movs	r4, r7
 80022b4:	2500      	movs	r5, #0
 80022b6:	2200      	movs	r2, #0
 80022b8:	e705      	b.n	80020c6 <__aeabi_dsub+0x152>
 80022ba:	2307      	movs	r3, #7
 80022bc:	402b      	ands	r3, r5
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d000      	beq.n	80022c4 <__aeabi_dsub+0x350>
 80022c2:	e6e2      	b.n	800208a <__aeabi_dsub+0x116>
 80022c4:	e06b      	b.n	800239e <__aeabi_dsub+0x42a>
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	000007ff 	.word	0x000007ff
 80022cc:	ff7fffff 	.word	0xff7fffff
 80022d0:	fffff801 	.word	0xfffff801
 80022d4:	000007fe 	.word	0x000007fe
 80022d8:	0028      	movs	r0, r5
 80022da:	f000 fb1b 	bl	8002914 <__clzsi2>
 80022de:	0003      	movs	r3, r0
 80022e0:	3318      	adds	r3, #24
 80022e2:	2b1f      	cmp	r3, #31
 80022e4:	dc00      	bgt.n	80022e8 <__aeabi_dsub+0x374>
 80022e6:	e6b4      	b.n	8002052 <__aeabi_dsub+0xde>
 80022e8:	002a      	movs	r2, r5
 80022ea:	3808      	subs	r0, #8
 80022ec:	4082      	lsls	r2, r0
 80022ee:	429f      	cmp	r7, r3
 80022f0:	dd00      	ble.n	80022f4 <__aeabi_dsub+0x380>
 80022f2:	e0b9      	b.n	8002468 <__aeabi_dsub+0x4f4>
 80022f4:	1bdb      	subs	r3, r3, r7
 80022f6:	1c58      	adds	r0, r3, #1
 80022f8:	281f      	cmp	r0, #31
 80022fa:	dc00      	bgt.n	80022fe <__aeabi_dsub+0x38a>
 80022fc:	e1a0      	b.n	8002640 <__aeabi_dsub+0x6cc>
 80022fe:	0015      	movs	r5, r2
 8002300:	3b1f      	subs	r3, #31
 8002302:	40dd      	lsrs	r5, r3
 8002304:	2820      	cmp	r0, #32
 8002306:	d005      	beq.n	8002314 <__aeabi_dsub+0x3a0>
 8002308:	2340      	movs	r3, #64	@ 0x40
 800230a:	1a1b      	subs	r3, r3, r0
 800230c:	409a      	lsls	r2, r3
 800230e:	1e53      	subs	r3, r2, #1
 8002310:	419a      	sbcs	r2, r3
 8002312:	4315      	orrs	r5, r2
 8002314:	2307      	movs	r3, #7
 8002316:	2700      	movs	r7, #0
 8002318:	402b      	ands	r3, r5
 800231a:	e7d0      	b.n	80022be <__aeabi_dsub+0x34a>
 800231c:	08c0      	lsrs	r0, r0, #3
 800231e:	0762      	lsls	r2, r4, #29
 8002320:	4302      	orrs	r2, r0
 8002322:	08e4      	lsrs	r4, r4, #3
 8002324:	e737      	b.n	8002196 <__aeabi_dsub+0x222>
 8002326:	08ea      	lsrs	r2, r5, #3
 8002328:	0763      	lsls	r3, r4, #29
 800232a:	431a      	orrs	r2, r3
 800232c:	4bd3      	ldr	r3, [pc, #844]	@ (800267c <__aeabi_dsub+0x708>)
 800232e:	08e4      	lsrs	r4, r4, #3
 8002330:	429f      	cmp	r7, r3
 8002332:	d100      	bne.n	8002336 <__aeabi_dsub+0x3c2>
 8002334:	e72f      	b.n	8002196 <__aeabi_dsub+0x222>
 8002336:	0324      	lsls	r4, r4, #12
 8002338:	0b25      	lsrs	r5, r4, #12
 800233a:	057c      	lsls	r4, r7, #21
 800233c:	0d64      	lsrs	r4, r4, #21
 800233e:	e6c2      	b.n	80020c6 <__aeabi_dsub+0x152>
 8002340:	46ca      	mov	sl, r9
 8002342:	0022      	movs	r2, r4
 8002344:	4302      	orrs	r2, r0
 8002346:	d158      	bne.n	80023fa <__aeabi_dsub+0x486>
 8002348:	4663      	mov	r3, ip
 800234a:	000e      	movs	r6, r1
 800234c:	9c02      	ldr	r4, [sp, #8]
 800234e:	9303      	str	r3, [sp, #12]
 8002350:	9b03      	ldr	r3, [sp, #12]
 8002352:	4657      	mov	r7, sl
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	e7e7      	b.n	8002328 <__aeabi_dsub+0x3b4>
 8002358:	4cc9      	ldr	r4, [pc, #804]	@ (8002680 <__aeabi_dsub+0x70c>)
 800235a:	1aff      	subs	r7, r7, r3
 800235c:	4014      	ands	r4, r2
 800235e:	e692      	b.n	8002086 <__aeabi_dsub+0x112>
 8002360:	4dc8      	ldr	r5, [pc, #800]	@ (8002684 <__aeabi_dsub+0x710>)
 8002362:	1c7a      	adds	r2, r7, #1
 8002364:	422a      	tst	r2, r5
 8002366:	d000      	beq.n	800236a <__aeabi_dsub+0x3f6>
 8002368:	e084      	b.n	8002474 <__aeabi_dsub+0x500>
 800236a:	0022      	movs	r2, r4
 800236c:	4302      	orrs	r2, r0
 800236e:	2f00      	cmp	r7, #0
 8002370:	d000      	beq.n	8002374 <__aeabi_dsub+0x400>
 8002372:	e0ef      	b.n	8002554 <__aeabi_dsub+0x5e0>
 8002374:	2a00      	cmp	r2, #0
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x406>
 8002378:	e0e5      	b.n	8002546 <__aeabi_dsub+0x5d2>
 800237a:	4662      	mov	r2, ip
 800237c:	9902      	ldr	r1, [sp, #8]
 800237e:	430a      	orrs	r2, r1
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x410>
 8002382:	e0c5      	b.n	8002510 <__aeabi_dsub+0x59c>
 8002384:	4663      	mov	r3, ip
 8002386:	18c5      	adds	r5, r0, r3
 8002388:	468c      	mov	ip, r1
 800238a:	4285      	cmp	r5, r0
 800238c:	4180      	sbcs	r0, r0
 800238e:	4464      	add	r4, ip
 8002390:	4240      	negs	r0, r0
 8002392:	1824      	adds	r4, r4, r0
 8002394:	0223      	lsls	r3, r4, #8
 8002396:	d502      	bpl.n	800239e <__aeabi_dsub+0x42a>
 8002398:	4bb9      	ldr	r3, [pc, #740]	@ (8002680 <__aeabi_dsub+0x70c>)
 800239a:	3701      	adds	r7, #1
 800239c:	401c      	ands	r4, r3
 800239e:	46ba      	mov	sl, r7
 80023a0:	9503      	str	r5, [sp, #12]
 80023a2:	e7d5      	b.n	8002350 <__aeabi_dsub+0x3dc>
 80023a4:	4662      	mov	r2, ip
 80023a6:	1a85      	subs	r5, r0, r2
 80023a8:	42a8      	cmp	r0, r5
 80023aa:	4192      	sbcs	r2, r2
 80023ac:	4252      	negs	r2, r2
 80023ae:	4691      	mov	r9, r2
 80023b0:	9b02      	ldr	r3, [sp, #8]
 80023b2:	1ae3      	subs	r3, r4, r3
 80023b4:	001a      	movs	r2, r3
 80023b6:	464b      	mov	r3, r9
 80023b8:	1ad2      	subs	r2, r2, r3
 80023ba:	0013      	movs	r3, r2
 80023bc:	4691      	mov	r9, r2
 80023be:	021a      	lsls	r2, r3, #8
 80023c0:	d46c      	bmi.n	800249c <__aeabi_dsub+0x528>
 80023c2:	464a      	mov	r2, r9
 80023c4:	464c      	mov	r4, r9
 80023c6:	432a      	orrs	r2, r5
 80023c8:	d000      	beq.n	80023cc <__aeabi_dsub+0x458>
 80023ca:	e63a      	b.n	8002042 <__aeabi_dsub+0xce>
 80023cc:	2600      	movs	r6, #0
 80023ce:	2400      	movs	r4, #0
 80023d0:	2500      	movs	r5, #0
 80023d2:	e678      	b.n	80020c6 <__aeabi_dsub+0x152>
 80023d4:	9902      	ldr	r1, [sp, #8]
 80023d6:	4653      	mov	r3, sl
 80023d8:	000d      	movs	r5, r1
 80023da:	3a20      	subs	r2, #32
 80023dc:	40d5      	lsrs	r5, r2
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d006      	beq.n	80023f0 <__aeabi_dsub+0x47c>
 80023e2:	2240      	movs	r2, #64	@ 0x40
 80023e4:	1ad2      	subs	r2, r2, r3
 80023e6:	000b      	movs	r3, r1
 80023e8:	4093      	lsls	r3, r2
 80023ea:	4662      	mov	r2, ip
 80023ec:	431a      	orrs	r2, r3
 80023ee:	4693      	mov	fp, r2
 80023f0:	465b      	mov	r3, fp
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	4193      	sbcs	r3, r2
 80023f6:	431d      	orrs	r5, r3
 80023f8:	e619      	b.n	800202e <__aeabi_dsub+0xba>
 80023fa:	4653      	mov	r3, sl
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x490>
 8002402:	e0c6      	b.n	8002592 <__aeabi_dsub+0x61e>
 8002404:	4e9d      	ldr	r6, [pc, #628]	@ (800267c <__aeabi_dsub+0x708>)
 8002406:	45b2      	cmp	sl, r6
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x498>
 800240a:	e6bd      	b.n	8002188 <__aeabi_dsub+0x214>
 800240c:	4688      	mov	r8, r1
 800240e:	000e      	movs	r6, r1
 8002410:	2501      	movs	r5, #1
 8002412:	2a38      	cmp	r2, #56	@ 0x38
 8002414:	dc10      	bgt.n	8002438 <__aeabi_dsub+0x4c4>
 8002416:	2a1f      	cmp	r2, #31
 8002418:	dc7f      	bgt.n	800251a <__aeabi_dsub+0x5a6>
 800241a:	2120      	movs	r1, #32
 800241c:	0025      	movs	r5, r4
 800241e:	1a89      	subs	r1, r1, r2
 8002420:	0007      	movs	r7, r0
 8002422:	4088      	lsls	r0, r1
 8002424:	408d      	lsls	r5, r1
 8002426:	40d7      	lsrs	r7, r2
 8002428:	40d4      	lsrs	r4, r2
 800242a:	1e41      	subs	r1, r0, #1
 800242c:	4188      	sbcs	r0, r1
 800242e:	9b02      	ldr	r3, [sp, #8]
 8002430:	433d      	orrs	r5, r7
 8002432:	1b1b      	subs	r3, r3, r4
 8002434:	4305      	orrs	r5, r0
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	4662      	mov	r2, ip
 800243a:	1b55      	subs	r5, r2, r5
 800243c:	45ac      	cmp	ip, r5
 800243e:	4192      	sbcs	r2, r2
 8002440:	9b02      	ldr	r3, [sp, #8]
 8002442:	4252      	negs	r2, r2
 8002444:	464f      	mov	r7, r9
 8002446:	1a9c      	subs	r4, r3, r2
 8002448:	e5f6      	b.n	8002038 <__aeabi_dsub+0xc4>
 800244a:	2d00      	cmp	r5, #0
 800244c:	d000      	beq.n	8002450 <__aeabi_dsub+0x4dc>
 800244e:	e0b7      	b.n	80025c0 <__aeabi_dsub+0x64c>
 8002450:	2a00      	cmp	r2, #0
 8002452:	d100      	bne.n	8002456 <__aeabi_dsub+0x4e2>
 8002454:	e0f0      	b.n	8002638 <__aeabi_dsub+0x6c4>
 8002456:	2601      	movs	r6, #1
 8002458:	400e      	ands	r6, r1
 800245a:	4663      	mov	r3, ip
 800245c:	9802      	ldr	r0, [sp, #8]
 800245e:	08d9      	lsrs	r1, r3, #3
 8002460:	0742      	lsls	r2, r0, #29
 8002462:	430a      	orrs	r2, r1
 8002464:	08c4      	lsrs	r4, r0, #3
 8002466:	e696      	b.n	8002196 <__aeabi_dsub+0x222>
 8002468:	4c85      	ldr	r4, [pc, #532]	@ (8002680 <__aeabi_dsub+0x70c>)
 800246a:	1aff      	subs	r7, r7, r3
 800246c:	4014      	ands	r4, r2
 800246e:	0762      	lsls	r2, r4, #29
 8002470:	08e4      	lsrs	r4, r4, #3
 8002472:	e760      	b.n	8002336 <__aeabi_dsub+0x3c2>
 8002474:	4981      	ldr	r1, [pc, #516]	@ (800267c <__aeabi_dsub+0x708>)
 8002476:	428a      	cmp	r2, r1
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x508>
 800247a:	e0c9      	b.n	8002610 <__aeabi_dsub+0x69c>
 800247c:	4663      	mov	r3, ip
 800247e:	18c1      	adds	r1, r0, r3
 8002480:	4281      	cmp	r1, r0
 8002482:	4180      	sbcs	r0, r0
 8002484:	9b02      	ldr	r3, [sp, #8]
 8002486:	4240      	negs	r0, r0
 8002488:	18e3      	adds	r3, r4, r3
 800248a:	181b      	adds	r3, r3, r0
 800248c:	07dd      	lsls	r5, r3, #31
 800248e:	085c      	lsrs	r4, r3, #1
 8002490:	2307      	movs	r3, #7
 8002492:	0849      	lsrs	r1, r1, #1
 8002494:	430d      	orrs	r5, r1
 8002496:	0017      	movs	r7, r2
 8002498:	402b      	ands	r3, r5
 800249a:	e710      	b.n	80022be <__aeabi_dsub+0x34a>
 800249c:	4663      	mov	r3, ip
 800249e:	1a1d      	subs	r5, r3, r0
 80024a0:	45ac      	cmp	ip, r5
 80024a2:	4192      	sbcs	r2, r2
 80024a4:	2601      	movs	r6, #1
 80024a6:	9b02      	ldr	r3, [sp, #8]
 80024a8:	4252      	negs	r2, r2
 80024aa:	1b1c      	subs	r4, r3, r4
 80024ac:	4688      	mov	r8, r1
 80024ae:	1aa4      	subs	r4, r4, r2
 80024b0:	400e      	ands	r6, r1
 80024b2:	e5c6      	b.n	8002042 <__aeabi_dsub+0xce>
 80024b4:	4663      	mov	r3, ip
 80024b6:	18c5      	adds	r5, r0, r3
 80024b8:	9b02      	ldr	r3, [sp, #8]
 80024ba:	4285      	cmp	r5, r0
 80024bc:	4180      	sbcs	r0, r0
 80024be:	469c      	mov	ip, r3
 80024c0:	4240      	negs	r0, r0
 80024c2:	4464      	add	r4, ip
 80024c4:	1824      	adds	r4, r4, r0
 80024c6:	2701      	movs	r7, #1
 80024c8:	0223      	lsls	r3, r4, #8
 80024ca:	d400      	bmi.n	80024ce <__aeabi_dsub+0x55a>
 80024cc:	e6f5      	b.n	80022ba <__aeabi_dsub+0x346>
 80024ce:	2702      	movs	r7, #2
 80024d0:	e641      	b.n	8002156 <__aeabi_dsub+0x1e2>
 80024d2:	4663      	mov	r3, ip
 80024d4:	1ac5      	subs	r5, r0, r3
 80024d6:	42a8      	cmp	r0, r5
 80024d8:	4180      	sbcs	r0, r0
 80024da:	9b02      	ldr	r3, [sp, #8]
 80024dc:	4240      	negs	r0, r0
 80024de:	1ae4      	subs	r4, r4, r3
 80024e0:	2701      	movs	r7, #1
 80024e2:	1a24      	subs	r4, r4, r0
 80024e4:	e5a8      	b.n	8002038 <__aeabi_dsub+0xc4>
 80024e6:	9d02      	ldr	r5, [sp, #8]
 80024e8:	4652      	mov	r2, sl
 80024ea:	002b      	movs	r3, r5
 80024ec:	3a20      	subs	r2, #32
 80024ee:	40d3      	lsrs	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	4653      	mov	r3, sl
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d006      	beq.n	8002506 <__aeabi_dsub+0x592>
 80024f8:	2240      	movs	r2, #64	@ 0x40
 80024fa:	1ad2      	subs	r2, r2, r3
 80024fc:	002b      	movs	r3, r5
 80024fe:	4093      	lsls	r3, r2
 8002500:	4662      	mov	r2, ip
 8002502:	431a      	orrs	r2, r3
 8002504:	4693      	mov	fp, r2
 8002506:	465d      	mov	r5, fp
 8002508:	1e6b      	subs	r3, r5, #1
 800250a:	419d      	sbcs	r5, r3
 800250c:	430d      	orrs	r5, r1
 800250e:	e615      	b.n	800213c <__aeabi_dsub+0x1c8>
 8002510:	0762      	lsls	r2, r4, #29
 8002512:	08c0      	lsrs	r0, r0, #3
 8002514:	4302      	orrs	r2, r0
 8002516:	08e4      	lsrs	r4, r4, #3
 8002518:	e70d      	b.n	8002336 <__aeabi_dsub+0x3c2>
 800251a:	0011      	movs	r1, r2
 800251c:	0027      	movs	r7, r4
 800251e:	3920      	subs	r1, #32
 8002520:	40cf      	lsrs	r7, r1
 8002522:	2a20      	cmp	r2, #32
 8002524:	d005      	beq.n	8002532 <__aeabi_dsub+0x5be>
 8002526:	2140      	movs	r1, #64	@ 0x40
 8002528:	1a8a      	subs	r2, r1, r2
 800252a:	4094      	lsls	r4, r2
 800252c:	0025      	movs	r5, r4
 800252e:	4305      	orrs	r5, r0
 8002530:	9503      	str	r5, [sp, #12]
 8002532:	9d03      	ldr	r5, [sp, #12]
 8002534:	1e6a      	subs	r2, r5, #1
 8002536:	4195      	sbcs	r5, r2
 8002538:	433d      	orrs	r5, r7
 800253a:	e77d      	b.n	8002438 <__aeabi_dsub+0x4c4>
 800253c:	2a00      	cmp	r2, #0
 800253e:	d100      	bne.n	8002542 <__aeabi_dsub+0x5ce>
 8002540:	e744      	b.n	80023cc <__aeabi_dsub+0x458>
 8002542:	2601      	movs	r6, #1
 8002544:	400e      	ands	r6, r1
 8002546:	4663      	mov	r3, ip
 8002548:	08d9      	lsrs	r1, r3, #3
 800254a:	9b02      	ldr	r3, [sp, #8]
 800254c:	075a      	lsls	r2, r3, #29
 800254e:	430a      	orrs	r2, r1
 8002550:	08dc      	lsrs	r4, r3, #3
 8002552:	e6f0      	b.n	8002336 <__aeabi_dsub+0x3c2>
 8002554:	2a00      	cmp	r2, #0
 8002556:	d028      	beq.n	80025aa <__aeabi_dsub+0x636>
 8002558:	4662      	mov	r2, ip
 800255a:	9f02      	ldr	r7, [sp, #8]
 800255c:	08c0      	lsrs	r0, r0, #3
 800255e:	433a      	orrs	r2, r7
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x5f0>
 8002562:	e6dc      	b.n	800231e <__aeabi_dsub+0x3aa>
 8002564:	0762      	lsls	r2, r4, #29
 8002566:	4310      	orrs	r0, r2
 8002568:	2280      	movs	r2, #128	@ 0x80
 800256a:	08e4      	lsrs	r4, r4, #3
 800256c:	0312      	lsls	r2, r2, #12
 800256e:	4214      	tst	r4, r2
 8002570:	d009      	beq.n	8002586 <__aeabi_dsub+0x612>
 8002572:	08fd      	lsrs	r5, r7, #3
 8002574:	4215      	tst	r5, r2
 8002576:	d106      	bne.n	8002586 <__aeabi_dsub+0x612>
 8002578:	4663      	mov	r3, ip
 800257a:	2601      	movs	r6, #1
 800257c:	002c      	movs	r4, r5
 800257e:	08d8      	lsrs	r0, r3, #3
 8002580:	077b      	lsls	r3, r7, #29
 8002582:	4318      	orrs	r0, r3
 8002584:	400e      	ands	r6, r1
 8002586:	0f42      	lsrs	r2, r0, #29
 8002588:	00c0      	lsls	r0, r0, #3
 800258a:	08c0      	lsrs	r0, r0, #3
 800258c:	0752      	lsls	r2, r2, #29
 800258e:	4302      	orrs	r2, r0
 8002590:	e601      	b.n	8002196 <__aeabi_dsub+0x222>
 8002592:	4663      	mov	r3, ip
 8002594:	1a1d      	subs	r5, r3, r0
 8002596:	45ac      	cmp	ip, r5
 8002598:	4192      	sbcs	r2, r2
 800259a:	9b02      	ldr	r3, [sp, #8]
 800259c:	4252      	negs	r2, r2
 800259e:	1b1c      	subs	r4, r3, r4
 80025a0:	000e      	movs	r6, r1
 80025a2:	4688      	mov	r8, r1
 80025a4:	2701      	movs	r7, #1
 80025a6:	1aa4      	subs	r4, r4, r2
 80025a8:	e546      	b.n	8002038 <__aeabi_dsub+0xc4>
 80025aa:	4663      	mov	r3, ip
 80025ac:	08d9      	lsrs	r1, r3, #3
 80025ae:	9b02      	ldr	r3, [sp, #8]
 80025b0:	075a      	lsls	r2, r3, #29
 80025b2:	430a      	orrs	r2, r1
 80025b4:	08dc      	lsrs	r4, r3, #3
 80025b6:	e5ee      	b.n	8002196 <__aeabi_dsub+0x222>
 80025b8:	4663      	mov	r3, ip
 80025ba:	9c02      	ldr	r4, [sp, #8]
 80025bc:	9303      	str	r3, [sp, #12]
 80025be:	e6c7      	b.n	8002350 <__aeabi_dsub+0x3dc>
 80025c0:	08c0      	lsrs	r0, r0, #3
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	d100      	bne.n	80025c8 <__aeabi_dsub+0x654>
 80025c6:	e6aa      	b.n	800231e <__aeabi_dsub+0x3aa>
 80025c8:	0762      	lsls	r2, r4, #29
 80025ca:	4310      	orrs	r0, r2
 80025cc:	2280      	movs	r2, #128	@ 0x80
 80025ce:	08e4      	lsrs	r4, r4, #3
 80025d0:	0312      	lsls	r2, r2, #12
 80025d2:	4214      	tst	r4, r2
 80025d4:	d0d7      	beq.n	8002586 <__aeabi_dsub+0x612>
 80025d6:	9f02      	ldr	r7, [sp, #8]
 80025d8:	08fd      	lsrs	r5, r7, #3
 80025da:	4215      	tst	r5, r2
 80025dc:	d1d3      	bne.n	8002586 <__aeabi_dsub+0x612>
 80025de:	4663      	mov	r3, ip
 80025e0:	2601      	movs	r6, #1
 80025e2:	08d8      	lsrs	r0, r3, #3
 80025e4:	077b      	lsls	r3, r7, #29
 80025e6:	002c      	movs	r4, r5
 80025e8:	4318      	orrs	r0, r3
 80025ea:	400e      	ands	r6, r1
 80025ec:	e7cb      	b.n	8002586 <__aeabi_dsub+0x612>
 80025ee:	000a      	movs	r2, r1
 80025f0:	0027      	movs	r7, r4
 80025f2:	3a20      	subs	r2, #32
 80025f4:	40d7      	lsrs	r7, r2
 80025f6:	2920      	cmp	r1, #32
 80025f8:	d005      	beq.n	8002606 <__aeabi_dsub+0x692>
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	1a52      	subs	r2, r2, r1
 80025fe:	4094      	lsls	r4, r2
 8002600:	0025      	movs	r5, r4
 8002602:	4305      	orrs	r5, r0
 8002604:	9503      	str	r5, [sp, #12]
 8002606:	9d03      	ldr	r5, [sp, #12]
 8002608:	1e6a      	subs	r2, r5, #1
 800260a:	4195      	sbcs	r5, r2
 800260c:	432f      	orrs	r7, r5
 800260e:	e610      	b.n	8002232 <__aeabi_dsub+0x2be>
 8002610:	0014      	movs	r4, r2
 8002612:	2500      	movs	r5, #0
 8002614:	2200      	movs	r2, #0
 8002616:	e556      	b.n	80020c6 <__aeabi_dsub+0x152>
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4460      	add	r0, ip
 800261c:	4699      	mov	r9, r3
 800261e:	4560      	cmp	r0, ip
 8002620:	4192      	sbcs	r2, r2
 8002622:	444c      	add	r4, r9
 8002624:	4252      	negs	r2, r2
 8002626:	0005      	movs	r5, r0
 8002628:	18a4      	adds	r4, r4, r2
 800262a:	e74c      	b.n	80024c6 <__aeabi_dsub+0x552>
 800262c:	001a      	movs	r2, r3
 800262e:	001c      	movs	r4, r3
 8002630:	432a      	orrs	r2, r5
 8002632:	d000      	beq.n	8002636 <__aeabi_dsub+0x6c2>
 8002634:	e6b3      	b.n	800239e <__aeabi_dsub+0x42a>
 8002636:	e6c9      	b.n	80023cc <__aeabi_dsub+0x458>
 8002638:	2480      	movs	r4, #128	@ 0x80
 800263a:	2600      	movs	r6, #0
 800263c:	0324      	lsls	r4, r4, #12
 800263e:	e5ae      	b.n	800219e <__aeabi_dsub+0x22a>
 8002640:	2120      	movs	r1, #32
 8002642:	2500      	movs	r5, #0
 8002644:	1a09      	subs	r1, r1, r0
 8002646:	e517      	b.n	8002078 <__aeabi_dsub+0x104>
 8002648:	2200      	movs	r2, #0
 800264a:	2500      	movs	r5, #0
 800264c:	4c0b      	ldr	r4, [pc, #44]	@ (800267c <__aeabi_dsub+0x708>)
 800264e:	e53a      	b.n	80020c6 <__aeabi_dsub+0x152>
 8002650:	2d00      	cmp	r5, #0
 8002652:	d100      	bne.n	8002656 <__aeabi_dsub+0x6e2>
 8002654:	e5f6      	b.n	8002244 <__aeabi_dsub+0x2d0>
 8002656:	464b      	mov	r3, r9
 8002658:	1bda      	subs	r2, r3, r7
 800265a:	4692      	mov	sl, r2
 800265c:	2f00      	cmp	r7, #0
 800265e:	d100      	bne.n	8002662 <__aeabi_dsub+0x6ee>
 8002660:	e66f      	b.n	8002342 <__aeabi_dsub+0x3ce>
 8002662:	2a38      	cmp	r2, #56	@ 0x38
 8002664:	dc05      	bgt.n	8002672 <__aeabi_dsub+0x6fe>
 8002666:	2680      	movs	r6, #128	@ 0x80
 8002668:	0436      	lsls	r6, r6, #16
 800266a:	4334      	orrs	r4, r6
 800266c:	4688      	mov	r8, r1
 800266e:	000e      	movs	r6, r1
 8002670:	e6d1      	b.n	8002416 <__aeabi_dsub+0x4a2>
 8002672:	4688      	mov	r8, r1
 8002674:	000e      	movs	r6, r1
 8002676:	2501      	movs	r5, #1
 8002678:	e6de      	b.n	8002438 <__aeabi_dsub+0x4c4>
 800267a:	46c0      	nop			@ (mov r8, r8)
 800267c:	000007ff 	.word	0x000007ff
 8002680:	ff7fffff 	.word	0xff7fffff
 8002684:	000007fe 	.word	0x000007fe
 8002688:	2d00      	cmp	r5, #0
 800268a:	d100      	bne.n	800268e <__aeabi_dsub+0x71a>
 800268c:	e668      	b.n	8002360 <__aeabi_dsub+0x3ec>
 800268e:	464b      	mov	r3, r9
 8002690:	1bd9      	subs	r1, r3, r7
 8002692:	2f00      	cmp	r7, #0
 8002694:	d101      	bne.n	800269a <__aeabi_dsub+0x726>
 8002696:	468a      	mov	sl, r1
 8002698:	e5a7      	b.n	80021ea <__aeabi_dsub+0x276>
 800269a:	2701      	movs	r7, #1
 800269c:	2938      	cmp	r1, #56	@ 0x38
 800269e:	dd00      	ble.n	80026a2 <__aeabi_dsub+0x72e>
 80026a0:	e5c7      	b.n	8002232 <__aeabi_dsub+0x2be>
 80026a2:	2280      	movs	r2, #128	@ 0x80
 80026a4:	0412      	lsls	r2, r2, #16
 80026a6:	4314      	orrs	r4, r2
 80026a8:	e5af      	b.n	800220a <__aeabi_dsub+0x296>
 80026aa:	46c0      	nop			@ (mov r8, r8)

080026ac <__aeabi_dcmpun>:
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	46c6      	mov	lr, r8
 80026b0:	031e      	lsls	r6, r3, #12
 80026b2:	0b36      	lsrs	r6, r6, #12
 80026b4:	46b0      	mov	r8, r6
 80026b6:	4e0d      	ldr	r6, [pc, #52]	@ (80026ec <__aeabi_dcmpun+0x40>)
 80026b8:	030c      	lsls	r4, r1, #12
 80026ba:	004d      	lsls	r5, r1, #1
 80026bc:	005f      	lsls	r7, r3, #1
 80026be:	b500      	push	{lr}
 80026c0:	0b24      	lsrs	r4, r4, #12
 80026c2:	0d6d      	lsrs	r5, r5, #21
 80026c4:	0d7f      	lsrs	r7, r7, #21
 80026c6:	42b5      	cmp	r5, r6
 80026c8:	d00b      	beq.n	80026e2 <__aeabi_dcmpun+0x36>
 80026ca:	4908      	ldr	r1, [pc, #32]	@ (80026ec <__aeabi_dcmpun+0x40>)
 80026cc:	2000      	movs	r0, #0
 80026ce:	428f      	cmp	r7, r1
 80026d0:	d104      	bne.n	80026dc <__aeabi_dcmpun+0x30>
 80026d2:	4646      	mov	r6, r8
 80026d4:	4316      	orrs	r6, r2
 80026d6:	0030      	movs	r0, r6
 80026d8:	1e43      	subs	r3, r0, #1
 80026da:	4198      	sbcs	r0, r3
 80026dc:	bc80      	pop	{r7}
 80026de:	46b8      	mov	r8, r7
 80026e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e2:	4304      	orrs	r4, r0
 80026e4:	2001      	movs	r0, #1
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	d1f8      	bne.n	80026dc <__aeabi_dcmpun+0x30>
 80026ea:	e7ee      	b.n	80026ca <__aeabi_dcmpun+0x1e>
 80026ec:	000007ff 	.word	0x000007ff

080026f0 <__aeabi_d2iz>:
 80026f0:	000b      	movs	r3, r1
 80026f2:	0002      	movs	r2, r0
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4d16      	ldr	r5, [pc, #88]	@ (8002750 <__aeabi_d2iz+0x60>)
 80026f8:	030c      	lsls	r4, r1, #12
 80026fa:	b082      	sub	sp, #8
 80026fc:	0049      	lsls	r1, r1, #1
 80026fe:	2000      	movs	r0, #0
 8002700:	9200      	str	r2, [sp, #0]
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	0b24      	lsrs	r4, r4, #12
 8002706:	0d49      	lsrs	r1, r1, #21
 8002708:	0fde      	lsrs	r6, r3, #31
 800270a:	42a9      	cmp	r1, r5
 800270c:	dd04      	ble.n	8002718 <__aeabi_d2iz+0x28>
 800270e:	4811      	ldr	r0, [pc, #68]	@ (8002754 <__aeabi_d2iz+0x64>)
 8002710:	4281      	cmp	r1, r0
 8002712:	dd03      	ble.n	800271c <__aeabi_d2iz+0x2c>
 8002714:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <__aeabi_d2iz+0x68>)
 8002716:	18f0      	adds	r0, r6, r3
 8002718:	b002      	add	sp, #8
 800271a:	bd70      	pop	{r4, r5, r6, pc}
 800271c:	2080      	movs	r0, #128	@ 0x80
 800271e:	0340      	lsls	r0, r0, #13
 8002720:	4320      	orrs	r0, r4
 8002722:	4c0e      	ldr	r4, [pc, #56]	@ (800275c <__aeabi_d2iz+0x6c>)
 8002724:	1a64      	subs	r4, r4, r1
 8002726:	2c1f      	cmp	r4, #31
 8002728:	dd08      	ble.n	800273c <__aeabi_d2iz+0x4c>
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <__aeabi_d2iz+0x70>)
 800272c:	1a5b      	subs	r3, r3, r1
 800272e:	40d8      	lsrs	r0, r3
 8002730:	0003      	movs	r3, r0
 8002732:	4258      	negs	r0, r3
 8002734:	2e00      	cmp	r6, #0
 8002736:	d1ef      	bne.n	8002718 <__aeabi_d2iz+0x28>
 8002738:	0018      	movs	r0, r3
 800273a:	e7ed      	b.n	8002718 <__aeabi_d2iz+0x28>
 800273c:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <__aeabi_d2iz+0x74>)
 800273e:	9a00      	ldr	r2, [sp, #0]
 8002740:	469c      	mov	ip, r3
 8002742:	0003      	movs	r3, r0
 8002744:	4461      	add	r1, ip
 8002746:	408b      	lsls	r3, r1
 8002748:	40e2      	lsrs	r2, r4
 800274a:	4313      	orrs	r3, r2
 800274c:	e7f1      	b.n	8002732 <__aeabi_d2iz+0x42>
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	000003fe 	.word	0x000003fe
 8002754:	0000041d 	.word	0x0000041d
 8002758:	7fffffff 	.word	0x7fffffff
 800275c:	00000433 	.word	0x00000433
 8002760:	00000413 	.word	0x00000413
 8002764:	fffffbed 	.word	0xfffffbed

08002768 <__aeabi_i2d>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	2800      	cmp	r0, #0
 800276c:	d016      	beq.n	800279c <__aeabi_i2d+0x34>
 800276e:	17c3      	asrs	r3, r0, #31
 8002770:	18c5      	adds	r5, r0, r3
 8002772:	405d      	eors	r5, r3
 8002774:	0fc4      	lsrs	r4, r0, #31
 8002776:	0028      	movs	r0, r5
 8002778:	f000 f8cc 	bl	8002914 <__clzsi2>
 800277c:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <__aeabi_i2d+0x58>)
 800277e:	1a1b      	subs	r3, r3, r0
 8002780:	055b      	lsls	r3, r3, #21
 8002782:	0d5b      	lsrs	r3, r3, #21
 8002784:	280a      	cmp	r0, #10
 8002786:	dc14      	bgt.n	80027b2 <__aeabi_i2d+0x4a>
 8002788:	0002      	movs	r2, r0
 800278a:	002e      	movs	r6, r5
 800278c:	3215      	adds	r2, #21
 800278e:	4096      	lsls	r6, r2
 8002790:	220b      	movs	r2, #11
 8002792:	1a12      	subs	r2, r2, r0
 8002794:	40d5      	lsrs	r5, r2
 8002796:	032d      	lsls	r5, r5, #12
 8002798:	0b2d      	lsrs	r5, r5, #12
 800279a:	e003      	b.n	80027a4 <__aeabi_i2d+0x3c>
 800279c:	2400      	movs	r4, #0
 800279e:	2300      	movs	r3, #0
 80027a0:	2500      	movs	r5, #0
 80027a2:	2600      	movs	r6, #0
 80027a4:	051b      	lsls	r3, r3, #20
 80027a6:	432b      	orrs	r3, r5
 80027a8:	07e4      	lsls	r4, r4, #31
 80027aa:	4323      	orrs	r3, r4
 80027ac:	0030      	movs	r0, r6
 80027ae:	0019      	movs	r1, r3
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
 80027b2:	380b      	subs	r0, #11
 80027b4:	4085      	lsls	r5, r0
 80027b6:	032d      	lsls	r5, r5, #12
 80027b8:	2600      	movs	r6, #0
 80027ba:	0b2d      	lsrs	r5, r5, #12
 80027bc:	e7f2      	b.n	80027a4 <__aeabi_i2d+0x3c>
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	0000041e 	.word	0x0000041e

080027c4 <__aeabi_ui2d>:
 80027c4:	b510      	push	{r4, lr}
 80027c6:	1e04      	subs	r4, r0, #0
 80027c8:	d010      	beq.n	80027ec <__aeabi_ui2d+0x28>
 80027ca:	f000 f8a3 	bl	8002914 <__clzsi2>
 80027ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <__aeabi_ui2d+0x44>)
 80027d0:	1a1b      	subs	r3, r3, r0
 80027d2:	055b      	lsls	r3, r3, #21
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	280a      	cmp	r0, #10
 80027d8:	dc0f      	bgt.n	80027fa <__aeabi_ui2d+0x36>
 80027da:	220b      	movs	r2, #11
 80027dc:	0021      	movs	r1, r4
 80027de:	1a12      	subs	r2, r2, r0
 80027e0:	40d1      	lsrs	r1, r2
 80027e2:	3015      	adds	r0, #21
 80027e4:	030a      	lsls	r2, r1, #12
 80027e6:	4084      	lsls	r4, r0
 80027e8:	0b12      	lsrs	r2, r2, #12
 80027ea:	e001      	b.n	80027f0 <__aeabi_ui2d+0x2c>
 80027ec:	2300      	movs	r3, #0
 80027ee:	2200      	movs	r2, #0
 80027f0:	051b      	lsls	r3, r3, #20
 80027f2:	4313      	orrs	r3, r2
 80027f4:	0020      	movs	r0, r4
 80027f6:	0019      	movs	r1, r3
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	0022      	movs	r2, r4
 80027fc:	380b      	subs	r0, #11
 80027fe:	4082      	lsls	r2, r0
 8002800:	0312      	lsls	r2, r2, #12
 8002802:	2400      	movs	r4, #0
 8002804:	0b12      	lsrs	r2, r2, #12
 8002806:	e7f3      	b.n	80027f0 <__aeabi_ui2d+0x2c>
 8002808:	0000041e 	.word	0x0000041e

0800280c <__aeabi_d2f>:
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	004b      	lsls	r3, r1, #1
 8002810:	030f      	lsls	r7, r1, #12
 8002812:	0d5b      	lsrs	r3, r3, #21
 8002814:	4c3b      	ldr	r4, [pc, #236]	@ (8002904 <__aeabi_d2f+0xf8>)
 8002816:	0f45      	lsrs	r5, r0, #29
 8002818:	b083      	sub	sp, #12
 800281a:	0a7f      	lsrs	r7, r7, #9
 800281c:	1c5e      	adds	r6, r3, #1
 800281e:	432f      	orrs	r7, r5
 8002820:	9000      	str	r0, [sp, #0]
 8002822:	9101      	str	r1, [sp, #4]
 8002824:	0fca      	lsrs	r2, r1, #31
 8002826:	00c5      	lsls	r5, r0, #3
 8002828:	4226      	tst	r6, r4
 800282a:	d00b      	beq.n	8002844 <__aeabi_d2f+0x38>
 800282c:	4936      	ldr	r1, [pc, #216]	@ (8002908 <__aeabi_d2f+0xfc>)
 800282e:	185c      	adds	r4, r3, r1
 8002830:	2cfe      	cmp	r4, #254	@ 0xfe
 8002832:	dd13      	ble.n	800285c <__aeabi_d2f+0x50>
 8002834:	20ff      	movs	r0, #255	@ 0xff
 8002836:	2300      	movs	r3, #0
 8002838:	05c0      	lsls	r0, r0, #23
 800283a:	4318      	orrs	r0, r3
 800283c:	07d2      	lsls	r2, r2, #31
 800283e:	4310      	orrs	r0, r2
 8002840:	b003      	add	sp, #12
 8002842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <__aeabi_d2f+0x42>
 8002848:	2000      	movs	r0, #0
 800284a:	2300      	movs	r3, #0
 800284c:	e7f4      	b.n	8002838 <__aeabi_d2f+0x2c>
 800284e:	433d      	orrs	r5, r7
 8002850:	d0f0      	beq.n	8002834 <__aeabi_d2f+0x28>
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	03db      	lsls	r3, r3, #15
 8002856:	20ff      	movs	r0, #255	@ 0xff
 8002858:	433b      	orrs	r3, r7
 800285a:	e7ed      	b.n	8002838 <__aeabi_d2f+0x2c>
 800285c:	2c00      	cmp	r4, #0
 800285e:	dd14      	ble.n	800288a <__aeabi_d2f+0x7e>
 8002860:	9b00      	ldr	r3, [sp, #0]
 8002862:	00ff      	lsls	r7, r7, #3
 8002864:	019b      	lsls	r3, r3, #6
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	4183      	sbcs	r3, r0
 800286a:	0f69      	lsrs	r1, r5, #29
 800286c:	433b      	orrs	r3, r7
 800286e:	430b      	orrs	r3, r1
 8002870:	0759      	lsls	r1, r3, #29
 8002872:	d041      	beq.n	80028f8 <__aeabi_d2f+0xec>
 8002874:	210f      	movs	r1, #15
 8002876:	4019      	ands	r1, r3
 8002878:	2904      	cmp	r1, #4
 800287a:	d028      	beq.n	80028ce <__aeabi_d2f+0xc2>
 800287c:	3304      	adds	r3, #4
 800287e:	0159      	lsls	r1, r3, #5
 8002880:	d525      	bpl.n	80028ce <__aeabi_d2f+0xc2>
 8002882:	3401      	adds	r4, #1
 8002884:	2300      	movs	r3, #0
 8002886:	b2e0      	uxtb	r0, r4
 8002888:	e7d6      	b.n	8002838 <__aeabi_d2f+0x2c>
 800288a:	0021      	movs	r1, r4
 800288c:	3117      	adds	r1, #23
 800288e:	dbdb      	blt.n	8002848 <__aeabi_d2f+0x3c>
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	201e      	movs	r0, #30
 8002894:	0409      	lsls	r1, r1, #16
 8002896:	4339      	orrs	r1, r7
 8002898:	1b00      	subs	r0, r0, r4
 800289a:	281f      	cmp	r0, #31
 800289c:	dd1b      	ble.n	80028d6 <__aeabi_d2f+0xca>
 800289e:	2602      	movs	r6, #2
 80028a0:	4276      	negs	r6, r6
 80028a2:	1b34      	subs	r4, r6, r4
 80028a4:	000e      	movs	r6, r1
 80028a6:	40e6      	lsrs	r6, r4
 80028a8:	0034      	movs	r4, r6
 80028aa:	2820      	cmp	r0, #32
 80028ac:	d004      	beq.n	80028b8 <__aeabi_d2f+0xac>
 80028ae:	4817      	ldr	r0, [pc, #92]	@ (800290c <__aeabi_d2f+0x100>)
 80028b0:	4684      	mov	ip, r0
 80028b2:	4463      	add	r3, ip
 80028b4:	4099      	lsls	r1, r3
 80028b6:	430d      	orrs	r5, r1
 80028b8:	002b      	movs	r3, r5
 80028ba:	1e59      	subs	r1, r3, #1
 80028bc:	418b      	sbcs	r3, r1
 80028be:	4323      	orrs	r3, r4
 80028c0:	0759      	lsls	r1, r3, #29
 80028c2:	d015      	beq.n	80028f0 <__aeabi_d2f+0xe4>
 80028c4:	210f      	movs	r1, #15
 80028c6:	2400      	movs	r4, #0
 80028c8:	4019      	ands	r1, r3
 80028ca:	2904      	cmp	r1, #4
 80028cc:	d117      	bne.n	80028fe <__aeabi_d2f+0xf2>
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	0a5b      	lsrs	r3, r3, #9
 80028d2:	b2e0      	uxtb	r0, r4
 80028d4:	e7b0      	b.n	8002838 <__aeabi_d2f+0x2c>
 80028d6:	4c0e      	ldr	r4, [pc, #56]	@ (8002910 <__aeabi_d2f+0x104>)
 80028d8:	191c      	adds	r4, r3, r4
 80028da:	002b      	movs	r3, r5
 80028dc:	40a5      	lsls	r5, r4
 80028de:	40c3      	lsrs	r3, r0
 80028e0:	40a1      	lsls	r1, r4
 80028e2:	1e68      	subs	r0, r5, #1
 80028e4:	4185      	sbcs	r5, r0
 80028e6:	4329      	orrs	r1, r5
 80028e8:	430b      	orrs	r3, r1
 80028ea:	2400      	movs	r4, #0
 80028ec:	0759      	lsls	r1, r3, #29
 80028ee:	d1c1      	bne.n	8002874 <__aeabi_d2f+0x68>
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	2000      	movs	r0, #0
 80028f4:	0a5b      	lsrs	r3, r3, #9
 80028f6:	e79f      	b.n	8002838 <__aeabi_d2f+0x2c>
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	b2e0      	uxtb	r0, r4
 80028fc:	e79c      	b.n	8002838 <__aeabi_d2f+0x2c>
 80028fe:	3304      	adds	r3, #4
 8002900:	e7e5      	b.n	80028ce <__aeabi_d2f+0xc2>
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	000007fe 	.word	0x000007fe
 8002908:	fffffc80 	.word	0xfffffc80
 800290c:	fffffca2 	.word	0xfffffca2
 8002910:	fffffc82 	.word	0xfffffc82

08002914 <__clzsi2>:
 8002914:	211c      	movs	r1, #28
 8002916:	2301      	movs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	4298      	cmp	r0, r3
 800291c:	d301      	bcc.n	8002922 <__clzsi2+0xe>
 800291e:	0c00      	lsrs	r0, r0, #16
 8002920:	3910      	subs	r1, #16
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	4298      	cmp	r0, r3
 8002926:	d301      	bcc.n	800292c <__clzsi2+0x18>
 8002928:	0a00      	lsrs	r0, r0, #8
 800292a:	3908      	subs	r1, #8
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	4298      	cmp	r0, r3
 8002930:	d301      	bcc.n	8002936 <__clzsi2+0x22>
 8002932:	0900      	lsrs	r0, r0, #4
 8002934:	3904      	subs	r1, #4
 8002936:	a202      	add	r2, pc, #8	@ (adr r2, 8002940 <__clzsi2+0x2c>)
 8002938:	5c10      	ldrb	r0, [r2, r0]
 800293a:	1840      	adds	r0, r0, r1
 800293c:	4770      	bx	lr
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	02020304 	.word	0x02020304
 8002944:	01010101 	.word	0x01010101
	...

08002950 <LEDs_init>:

//extern NumOfTOFSensors;
extern uint16_t ActiveCaptors;


void LEDs_init(void){
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);		// LED 1
 8002954:	4b36      	ldr	r3, [pc, #216]	@ (8002a30 <LEDs_init+0xe0>)
 8002956:	2200      	movs	r2, #0
 8002958:	2108      	movs	r1, #8
 800295a:	0018      	movs	r0, r3
 800295c:	f002 f858 	bl	8004a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);		// LED 2
 8002960:	4b33      	ldr	r3, [pc, #204]	@ (8002a30 <LEDs_init+0xe0>)
 8002962:	2200      	movs	r2, #0
 8002964:	2101      	movs	r1, #1
 8002966:	0018      	movs	r0, r3
 8002968:	f002 f852 	bl	8004a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// LED 3
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	019b      	lsls	r3, r3, #6
 8002970:	482f      	ldr	r0, [pc, #188]	@ (8002a30 <LEDs_init+0xe0>)
 8002972:	2200      	movs	r2, #0
 8002974:	0019      	movs	r1, r3
 8002976:	f002 f84b 	bl	8004a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);	// LED 4
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	482c      	ldr	r0, [pc, #176]	@ (8002a30 <LEDs_init+0xe0>)
 8002980:	2200      	movs	r2, #0
 8002982:	0019      	movs	r1, r3
 8002984:	f002 f844 	bl	8004a10 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		// LED 5
 8002988:	4b2a      	ldr	r3, [pc, #168]	@ (8002a34 <LEDs_init+0xe4>)
 800298a:	2200      	movs	r2, #0
 800298c:	2180      	movs	r1, #128	@ 0x80
 800298e:	0018      	movs	r0, r3
 8002990:	f002 f83e 	bl	8004a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);		// LED 6
 8002994:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <LEDs_init+0xe4>)
 8002996:	2200      	movs	r2, #0
 8002998:	2110      	movs	r1, #16
 800299a:	0018      	movs	r0, r3
 800299c:	f002 f838 	bl	8004a10 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);		// LED 7
 80029a0:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <LEDs_init+0xe8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	2108      	movs	r1, #8
 80029a6:	0018      	movs	r0, r3
 80029a8:	f002 f832 	bl	8004a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);		// LED 8
 80029ac:	4b22      	ldr	r3, [pc, #136]	@ (8002a38 <LEDs_init+0xe8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	2101      	movs	r1, #1
 80029b2:	0018      	movs	r0, r3
 80029b4:	f002 f82c 	bl	8004a10 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);	// LED 9
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	0219      	lsls	r1, r3, #8
 80029bc:	23a0      	movs	r3, #160	@ 0xa0
 80029be:	05db      	lsls	r3, r3, #23
 80029c0:	2200      	movs	r2, #0
 80029c2:	0018      	movs	r0, r3
 80029c4:	f002 f824 	bl	8004a10 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);		// LED 10
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	481a      	ldr	r0, [pc, #104]	@ (8002a38 <LEDs_init+0xe8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	0019      	movs	r1, r3
 80029d2:	f002 f81d 	bl	8004a10 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);	// LED 11
 80029d6:	2380      	movs	r3, #128	@ 0x80
 80029d8:	0119      	lsls	r1, r3, #4
 80029da:	23a0      	movs	r3, #160	@ 0xa0
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	2200      	movs	r2, #0
 80029e0:	0018      	movs	r0, r3
 80029e2:	f002 f815 	bl	8004a10 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);	// LED 12
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	01db      	lsls	r3, r3, #7
 80029ea:	4812      	ldr	r0, [pc, #72]	@ (8002a34 <LEDs_init+0xe4>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	0019      	movs	r1, r3
 80029f0:	f002 f80e 	bl	8004a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);	// LED 13
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	480e      	ldr	r0, [pc, #56]	@ (8002a34 <LEDs_init+0xe4>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	0019      	movs	r1, r3
 80029fe:	f002 f807 	bl	8004a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);		// LED 14
 8002a02:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <LEDs_init+0xe4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	2102      	movs	r1, #2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f002 f801 	bl	8004a10 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);		// LED 15
 8002a0e:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <LEDs_init+0xe0>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	2110      	movs	r1, #16
 8002a14:	0018      	movs	r0, r3
 8002a16:	f001 fffb 	bl	8004a10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);		// LED 16
 8002a1a:	23a0      	movs	r3, #160	@ 0xa0
 8002a1c:	05db      	lsls	r3, r3, #23
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2120      	movs	r1, #32
 8002a22:	0018      	movs	r0, r3
 8002a24:	f001 fff4 	bl	8004a10 <HAL_GPIO_WritePin>
}
 8002a28:	46c0      	nop			@ (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	50000800 	.word	0x50000800
 8002a34:	50000400 	.word	0x50000400
 8002a38:	50000c00 	.word	0x50000c00

08002a3c <LEDtoggle>:


uint8_t LEDtoggle(uint16_t n){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	0002      	movs	r2, r0
 8002a44:	1dbb      	adds	r3, r7, #6
 8002a46:	801a      	strh	r2, [r3, #0]
	if(n<=0 || n>16)
 8002a48:	1dbb      	adds	r3, r7, #6
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <LEDtoggle+0x1c>
 8002a50:	1dbb      	adds	r3, r7, #6
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d901      	bls.n	8002a5c <LEDtoggle+0x20>
		return 1;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e07b      	b.n	8002b54 <LEDtoggle+0x118>

	switch (n){
 8002a5c:	1dbb      	adds	r3, r7, #6
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d900      	bls.n	8002a66 <LEDtoggle+0x2a>
 8002a64:	e075      	b.n	8002b52 <LEDtoggle+0x116>
 8002a66:	009a      	lsls	r2, r3, #2
 8002a68:	4b3c      	ldr	r3, [pc, #240]	@ (8002b5c <LEDtoggle+0x120>)
 8002a6a:	18d3      	adds	r3, r2, r3
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	469f      	mov	pc, r3
	case 1:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8002a70:	4b3b      	ldr	r3, [pc, #236]	@ (8002b60 <LEDtoggle+0x124>)
 8002a72:	2108      	movs	r1, #8
 8002a74:	0018      	movs	r0, r3
 8002a76:	f001 ffe8 	bl	8004a4a <HAL_GPIO_TogglePin>
		break;
 8002a7a:	e06a      	b.n	8002b52 <LEDtoggle+0x116>
	case 2:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8002a7c:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <LEDtoggle+0x124>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	0018      	movs	r0, r3
 8002a82:	f001 ffe2 	bl	8004a4a <HAL_GPIO_TogglePin>
		break;
 8002a86:	e064      	b.n	8002b52 <LEDtoggle+0x116>
	case 3:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	019b      	lsls	r3, r3, #6
 8002a8c:	4a34      	ldr	r2, [pc, #208]	@ (8002b60 <LEDtoggle+0x124>)
 8002a8e:	0019      	movs	r1, r3
 8002a90:	0010      	movs	r0, r2
 8002a92:	f001 ffda 	bl	8004a4a <HAL_GPIO_TogglePin>
		break;
 8002a96:	e05c      	b.n	8002b52 <LEDtoggle+0x116>
	case 4:
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4a30      	ldr	r2, [pc, #192]	@ (8002b60 <LEDtoggle+0x124>)
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	f001 ffd2 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002aa6:	e054      	b.n	8002b52 <LEDtoggle+0x116>
	case 5:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b64 <LEDtoggle+0x128>)
 8002aaa:	2180      	movs	r1, #128	@ 0x80
 8002aac:	0018      	movs	r0, r3
 8002aae:	f001 ffcc 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002ab2:	e04e      	b.n	8002b52 <LEDtoggle+0x116>
	case 6:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b64 <LEDtoggle+0x128>)
 8002ab6:	2110      	movs	r1, #16
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f001 ffc6 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002abe:	e048      	b.n	8002b52 <LEDtoggle+0x116>
	case 7:
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 8002ac0:	4b29      	ldr	r3, [pc, #164]	@ (8002b68 <LEDtoggle+0x12c>)
 8002ac2:	2108      	movs	r1, #8
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f001 ffc0 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002aca:	e042      	b.n	8002b52 <LEDtoggle+0x116>
	case 8:
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0);
 8002acc:	4b26      	ldr	r3, [pc, #152]	@ (8002b68 <LEDtoggle+0x12c>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f001 ffba 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002ad6:	e03c      	b.n	8002b52 <LEDtoggle+0x116>
	case 9:
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	021a      	lsls	r2, r3, #8
 8002adc:	23a0      	movs	r3, #160	@ 0xa0
 8002ade:	05db      	lsls	r3, r3, #23
 8002ae0:	0011      	movs	r1, r2
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f001 ffb1 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002ae8:	e033      	b.n	8002b52 <LEDtoggle+0x116>
	case 10:
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4a1e      	ldr	r2, [pc, #120]	@ (8002b68 <LEDtoggle+0x12c>)
 8002af0:	0019      	movs	r1, r3
 8002af2:	0010      	movs	r0, r2
 8002af4:	f001 ffa9 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002af8:	e02b      	b.n	8002b52 <LEDtoggle+0x116>
	case 11:
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	011a      	lsls	r2, r3, #4
 8002afe:	23a0      	movs	r3, #160	@ 0xa0
 8002b00:	05db      	lsls	r3, r3, #23
 8002b02:	0011      	movs	r1, r2
 8002b04:	0018      	movs	r0, r3
 8002b06:	f001 ffa0 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002b0a:	e022      	b.n	8002b52 <LEDtoggle+0x116>
	case 12:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	01db      	lsls	r3, r3, #7
 8002b10:	4a14      	ldr	r2, [pc, #80]	@ (8002b64 <LEDtoggle+0x128>)
 8002b12:	0019      	movs	r1, r3
 8002b14:	0010      	movs	r0, r2
 8002b16:	f001 ff98 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002b1a:	e01a      	b.n	8002b52 <LEDtoggle+0x116>
	case 13:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4a10      	ldr	r2, [pc, #64]	@ (8002b64 <LEDtoggle+0x128>)
 8002b22:	0019      	movs	r1, r3
 8002b24:	0010      	movs	r0, r2
 8002b26:	f001 ff90 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002b2a:	e012      	b.n	8002b52 <LEDtoggle+0x116>
	case 14:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <LEDtoggle+0x128>)
 8002b2e:	2102      	movs	r1, #2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f001 ff8a 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002b36:	e00c      	b.n	8002b52 <LEDtoggle+0x116>
	case 15:
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002b38:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <LEDtoggle+0x124>)
 8002b3a:	2110      	movs	r1, #16
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f001 ff84 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002b42:	e006      	b.n	8002b52 <LEDtoggle+0x116>
	case 16:
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002b44:	23a0      	movs	r3, #160	@ 0xa0
 8002b46:	05db      	lsls	r3, r3, #23
 8002b48:	2120      	movs	r1, #32
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f001 ff7d 	bl	8004a4a <HAL_GPIO_TogglePin>
			break;
 8002b50:	46c0      	nop			@ (mov r8, r8)
	}

	return 0;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	0800cc3c 	.word	0x0800cc3c
 8002b60:	50000800 	.word	0x50000800
 8002b64:	50000400 	.word	0x50000400
 8002b68:	50000c00 	.word	0x50000c00

08002b6c <toggleInactiveCaptors>:
			}
		}
}


void toggleInactiveCaptors(void){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	e012      	b.n	8002b9e <toggleInactiveCaptors+0x32>
			if(!(ActiveCaptors & (1<<j))){
 8002b78:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <toggleInactiveCaptors+0x44>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	411a      	asrs	r2, r3
 8002b82:	0013      	movs	r3, r2
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d106      	bne.n	8002b98 <toggleInactiveCaptors+0x2c>
				LEDtoggle( j + 1 );
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	0018      	movs	r0, r3
 8002b94:	f7ff ff52 	bl	8002a3c <LEDtoggle>
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b0f      	cmp	r3, #15
 8002ba2:	dde9      	ble.n	8002b78 <toggleInactiveCaptors+0xc>
			}
		}
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b002      	add	sp, #8
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	2000004a 	.word	0x2000004a

08002bb4 <LEDset>:


uint8_t LEDset(uint16_t n, uint8_t state){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	0002      	movs	r2, r0
 8002bbc:	1dbb      	adds	r3, r7, #6
 8002bbe:	801a      	strh	r2, [r3, #0]
 8002bc0:	1d7b      	adds	r3, r7, #5
 8002bc2:	1c0a      	adds	r2, r1, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
	if(n<=0 || n>16)
 8002bc6:	1dbb      	adds	r3, r7, #6
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <LEDset+0x22>
 8002bce:	1dbb      	adds	r3, r7, #6
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d901      	bls.n	8002bda <LEDset+0x26>
		return 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0b4      	b.n	8002d44 <LEDset+0x190>

	GPIO_PinState LEDstate;
	if(state != 0 || state != 1){
 8002bda:	1d7b      	adds	r3, r7, #5
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <LEDset+0x36>
 8002be2:	1d7b      	adds	r3, r7, #5
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d001      	beq.n	8002bee <LEDset+0x3a>
		return 2;
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0aa      	b.n	8002d44 <LEDset+0x190>
	}
	else{
		switch(state){
 8002bee:	1d7b      	adds	r3, r7, #5
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <LEDset+0x48>
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d005      	beq.n	8002c06 <LEDset+0x52>
 8002bfa:	e009      	b.n	8002c10 <LEDset+0x5c>
		case 0:
			LEDstate = GPIO_PIN_SET;
 8002bfc:	230f      	movs	r3, #15
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
			break;
 8002c04:	e004      	b.n	8002c10 <LEDset+0x5c>
		case 1:
			LEDstate = GPIO_PIN_RESET;
 8002c06:	230f      	movs	r3, #15
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
			break;
 8002c0e:	46c0      	nop			@ (mov r8, r8)
		}
	}

	switch (n){
 8002c10:	1dbb      	adds	r3, r7, #6
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d900      	bls.n	8002c1a <LEDset+0x66>
 8002c18:	e093      	b.n	8002d42 <LEDset+0x18e>
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d4c <LEDset+0x198>)
 8002c1e:	18d3      	adds	r3, r2, r3
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	469f      	mov	pc, r3
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, LEDstate);
 8002c24:	230f      	movs	r3, #15
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	4849      	ldr	r0, [pc, #292]	@ (8002d50 <LEDset+0x19c>)
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	2108      	movs	r1, #8
 8002c30:	f001 feee 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002c34:	e085      	b.n	8002d42 <LEDset+0x18e>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, LEDstate);
 8002c36:	230f      	movs	r3, #15
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4844      	ldr	r0, [pc, #272]	@ (8002d50 <LEDset+0x19c>)
 8002c3e:	001a      	movs	r2, r3
 8002c40:	2101      	movs	r1, #1
 8002c42:	f001 fee5 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002c46:	e07c      	b.n	8002d42 <LEDset+0x18e>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, LEDstate);
 8002c48:	230f      	movs	r3, #15
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	483f      	ldr	r0, [pc, #252]	@ (8002d50 <LEDset+0x19c>)
 8002c54:	0019      	movs	r1, r3
 8002c56:	f001 fedb 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002c5a:	e072      	b.n	8002d42 <LEDset+0x18e>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, LEDstate);
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	@ 0x80
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	483a      	ldr	r0, [pc, #232]	@ (8002d50 <LEDset+0x19c>)
 8002c68:	0019      	movs	r1, r3
 8002c6a:	f001 fed1 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002c6e:	e068      	b.n	8002d42 <LEDset+0x18e>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, LEDstate);
 8002c70:	230f      	movs	r3, #15
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4837      	ldr	r0, [pc, #220]	@ (8002d54 <LEDset+0x1a0>)
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2180      	movs	r1, #128	@ 0x80
 8002c7c:	f001 fec8 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002c80:	e05f      	b.n	8002d42 <LEDset+0x18e>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, LEDstate);
 8002c82:	230f      	movs	r3, #15
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4832      	ldr	r0, [pc, #200]	@ (8002d54 <LEDset+0x1a0>)
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	2110      	movs	r1, #16
 8002c8e:	f001 febf 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002c92:	e056      	b.n	8002d42 <LEDset+0x18e>
	case 7:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, LEDstate);
 8002c94:	230f      	movs	r3, #15
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	482f      	ldr	r0, [pc, #188]	@ (8002d58 <LEDset+0x1a4>)
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	2108      	movs	r1, #8
 8002ca0:	f001 feb6 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002ca4:	e04d      	b.n	8002d42 <LEDset+0x18e>
	case 8:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, LEDstate);
 8002ca6:	230f      	movs	r3, #15
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	482a      	ldr	r0, [pc, #168]	@ (8002d58 <LEDset+0x1a4>)
 8002cae:	001a      	movs	r2, r3
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	f001 fead 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002cb6:	e044      	b.n	8002d42 <LEDset+0x18e>
	case 9:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, LEDstate);
 8002cb8:	230f      	movs	r3, #15
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	0219      	lsls	r1, r3, #8
 8002cc2:	23a0      	movs	r3, #160	@ 0xa0
 8002cc4:	05db      	lsls	r3, r3, #23
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f001 fea2 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002ccc:	e039      	b.n	8002d42 <LEDset+0x18e>
	case 10:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, LEDstate);
 8002cce:	230f      	movs	r3, #15
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	481f      	ldr	r0, [pc, #124]	@ (8002d58 <LEDset+0x1a4>)
 8002cda:	0019      	movs	r1, r3
 8002cdc:	f001 fe98 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002ce0:	e02f      	b.n	8002d42 <LEDset+0x18e>
	case 11:
			//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LEDstate); // Pin de l'I2C, l'utiliser peut causer les problemes
			break;
	case 12:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, LEDstate);
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	01db      	lsls	r3, r3, #7
 8002cec:	4819      	ldr	r0, [pc, #100]	@ (8002d54 <LEDset+0x1a0>)
 8002cee:	0019      	movs	r1, r3
 8002cf0:	f001 fe8e 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002cf4:	e025      	b.n	8002d42 <LEDset+0x18e>
	case 13:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, LEDstate);
 8002cf6:	230f      	movs	r3, #15
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	2380      	movs	r3, #128	@ 0x80
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	4814      	ldr	r0, [pc, #80]	@ (8002d54 <LEDset+0x1a0>)
 8002d02:	0019      	movs	r1, r3
 8002d04:	f001 fe84 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002d08:	e01b      	b.n	8002d42 <LEDset+0x18e>
	case 14:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, LEDstate);
 8002d0a:	230f      	movs	r3, #15
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4810      	ldr	r0, [pc, #64]	@ (8002d54 <LEDset+0x1a0>)
 8002d12:	001a      	movs	r2, r3
 8002d14:	2102      	movs	r1, #2
 8002d16:	f001 fe7b 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002d1a:	e012      	b.n	8002d42 <LEDset+0x18e>
	case 15:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, LEDstate);
 8002d1c:	230f      	movs	r3, #15
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	480b      	ldr	r0, [pc, #44]	@ (8002d50 <LEDset+0x19c>)
 8002d24:	001a      	movs	r2, r3
 8002d26:	2110      	movs	r1, #16
 8002d28:	f001 fe72 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002d2c:	e009      	b.n	8002d42 <LEDset+0x18e>
	case 16:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, LEDstate);
 8002d2e:	230f      	movs	r3, #15
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	23a0      	movs	r3, #160	@ 0xa0
 8002d36:	05db      	lsls	r3, r3, #23
 8002d38:	2120      	movs	r1, #32
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f001 fe68 	bl	8004a10 <HAL_GPIO_WritePin>
		break;
 8002d40:	46c0      	nop			@ (mov r8, r8)
	}

	return 0;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b004      	add	sp, #16
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	0800cc80 	.word	0x0800cc80
 8002d50:	50000800 	.word	0x50000800
 8002d54:	50000400 	.word	0x50000400
 8002d58:	50000c00 	.word	0x50000c00

08002d5c <setActiveCaptors>:


void setActiveCaptors(uint8_t state){
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	0002      	movs	r2, r0
 8002d64:	1dfb      	adds	r3, r7, #7
 8002d66:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e015      	b.n	8002d9a <setActiveCaptors+0x3e>
			if(ActiveCaptors & (1<<j)){
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <setActiveCaptors+0x50>)
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	001a      	movs	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	411a      	asrs	r2, r3
 8002d78:	0013      	movs	r3, r2
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <setActiveCaptors+0x38>
				LEDset( j + 1 , state);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	0010      	movs	r0, r2
 8002d90:	f7ff ff10 	bl	8002bb4 <LEDset>
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	dde6      	ble.n	8002d6e <setActiveCaptors+0x12>
			}
		}
}
 8002da0:	46c0      	nop			@ (mov r8, r8)
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	2000004a 	.word	0x2000004a

08002db0 <setInactiveCaptors>:


void setInactiveCaptors(uint8_t state){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	0002      	movs	r2, r0
 8002db8:	1dfb      	adds	r3, r7, #7
 8002dba:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e015      	b.n	8002dee <setInactiveCaptors+0x3e>
			if(!(ActiveCaptors & (1<<j))){
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <setInactiveCaptors+0x50>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	001a      	movs	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	411a      	asrs	r2, r3
 8002dcc:	0013      	movs	r3, r2
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d109      	bne.n	8002de8 <setInactiveCaptors+0x38>
				LEDset( j + 1 , state);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	1dfb      	adds	r3, r7, #7
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	0019      	movs	r1, r3
 8002de2:	0010      	movs	r0, r2
 8002de4:	f7ff fee6 	bl	8002bb4 <LEDset>
	for(int j = 0; j < NumOfTOFSensors; j++){
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b0f      	cmp	r3, #15
 8002df2:	dde6      	ble.n	8002dc2 <setInactiveCaptors+0x12>
			}
		}
}
 8002df4:	46c0      	nop			@ (mov r8, r8)
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	2000004a 	.word	0x2000004a

08002e04 <ResetAndInitializeAllSensors>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t dataRead;
void ResetAndInitializeAllSensors(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
	uint8_t i,counter, Sensor, error = 0;
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
	uint8_t Bootstate = 0;
 8002e10:	1cfb      	adds	r3, r7, #3
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
	int16_t Offset;
	ResetAllSensors();
 8002e16:	f000 fad1 	bl	80033bc <ResetAllSensors>
	HAL_Delay(10);
 8002e1a:	200a      	movs	r0, #10
 8002e1c:	f001 fb7c 	bl	8004518 <HAL_Delay>
	for (i = 0; i < NumOfTOFSensors; i++)
 8002e20:	1dfb      	adds	r3, r7, #7
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	e078      	b.n	8002f1a <ResetAndInitializeAllSensors+0x116>
	{
		FailedBoot = i;
 8002e28:	1dfb      	adds	r3, r7, #7
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b87      	ldr	r3, [pc, #540]	@ (800304c <ResetAndInitializeAllSensors+0x248>)
 8002e30:	801a      	strh	r2, [r3, #0]
		TurnOnSensor(i);
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fa28 	bl	800328c <TurnOnSensor>
		HAL_Delay(60);
 8002e3c:	203c      	movs	r0, #60	@ 0x3c
 8002e3e:	f001 fb6b 	bl	8004518 <HAL_Delay>
		error += VL53L1X_BootState(Dev_init, &Bootstate);
 8002e42:	4b83      	ldr	r3, [pc, #524]	@ (8003050 <ResetAndInitializeAllSensors+0x24c>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	1cfa      	adds	r2, r7, #3
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f004 ff20 	bl	8007c90 <VL53L1X_BootState>
 8002e50:	0003      	movs	r3, r0
 8002e52:	b2d9      	uxtb	r1, r3
 8002e54:	1d3b      	adds	r3, r7, #4
 8002e56:	1d3a      	adds	r2, r7, #4
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	188a      	adds	r2, r1, r2
 8002e5c:	701a      	strb	r2, [r3, #0]
		while (Bootstate != 0x03 && counter < 10)
 8002e5e:	e015      	b.n	8002e8c <ResetAndInitializeAllSensors+0x88>
		{
			//ITM_Port32(31) = Bootstate;
			HAL_Delay(60);
 8002e60:	203c      	movs	r0, #60	@ 0x3c
 8002e62:	f001 fb59 	bl	8004518 <HAL_Delay>
			error += VL53L1X_BootState(Dev_init, &Bootstate);
 8002e66:	4b7a      	ldr	r3, [pc, #488]	@ (8003050 <ResetAndInitializeAllSensors+0x24c>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	1cfa      	adds	r2, r7, #3
 8002e6c:	0011      	movs	r1, r2
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f004 ff0e 	bl	8007c90 <VL53L1X_BootState>
 8002e74:	0003      	movs	r3, r0
 8002e76:	b2d9      	uxtb	r1, r3
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	1d3a      	adds	r2, r7, #4
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	188a      	adds	r2, r1, r2
 8002e80:	701a      	strb	r2, [r3, #0]
			counter++;
 8002e82:	1dbb      	adds	r3, r7, #6
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	1dbb      	adds	r3, r7, #6
 8002e88:	3201      	adds	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
		while (Bootstate != 0x03 && counter < 10)
 8002e8c:	1cfb      	adds	r3, r7, #3
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d003      	beq.n	8002e9c <ResetAndInitializeAllSensors+0x98>
 8002e94:	1dbb      	adds	r3, r7, #6
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b09      	cmp	r3, #9
 8002e9a:	d9e1      	bls.n	8002e60 <ResetAndInitializeAllSensors+0x5c>
		}
		counter = 0;
 8002e9c:	1dbb      	adds	r3, r7, #6
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
		VL53L1X_SensorInit(Dev_init);	/* Initialize sensor  */HAL_Delay(1);
 8002ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8003050 <ResetAndInitializeAllSensors+0x24c>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f004 fa9e 	bl	80073e8 <VL53L1X_SensorInit>
 8002eac:	2001      	movs	r0, #1
 8002eae:	f001 fb33 	bl	8004518 <HAL_Delay>
		VL53L1X_SetI2CAddress(Dev_init, Devs[i]);HAL_Delay(1);	/* Change i2c address Left is now 0x62 and Dev1 */
 8002eb2:	4b67      	ldr	r3, [pc, #412]	@ (8003050 <ResetAndInitializeAllSensors+0x24c>)
 8002eb4:	8818      	ldrh	r0, [r3, #0]
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	4b66      	ldr	r3, [pc, #408]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002ebc:	0052      	lsls	r2, r2, #1
 8002ebe:	5ad3      	ldrh	r3, [r2, r3]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	f004 fa6e 	bl	80073a4 <VL53L1X_SetI2CAddress>
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f001 fb25 	bl	8004518 <HAL_Delay>
		dataRead = ReadRegister8(Devs[i], 0x10f);HAL_Delay(1);
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	4b60      	ldr	r3, [pc, #384]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002ed4:	0052      	lsls	r2, r2, #1
 8002ed6:	5ad3      	ldrh	r3, [r2, r3]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	32ff      	adds	r2, #255	@ 0xff
 8002edc:	0011      	movs	r1, r2
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f005 f862 	bl	8007fa8 <ReadRegister8>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	001a      	movs	r2, r3
 8002ee8:	4b5b      	ldr	r3, [pc, #364]	@ (8003058 <ResetAndInitializeAllSensors+0x254>)
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	2001      	movs	r0, #1
 8002eee:	f001 fb13 	bl	8004518 <HAL_Delay>
		dataRead = ReadRegister8(Devs[i], 0x110);
 8002ef2:	1dfb      	adds	r3, r7, #7
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	4b57      	ldr	r3, [pc, #348]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002ef8:	0052      	lsls	r2, r2, #1
 8002efa:	5ad3      	ldrh	r3, [r2, r3]
 8002efc:	2288      	movs	r2, #136	@ 0x88
 8002efe:	0052      	lsls	r2, r2, #1
 8002f00:	0011      	movs	r1, r2
 8002f02:	0018      	movs	r0, r3
 8002f04:	f005 f850 	bl	8007fa8 <ReadRegister8>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	4b52      	ldr	r3, [pc, #328]	@ (8003058 <ResetAndInitializeAllSensors+0x254>)
 8002f0e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NumOfTOFSensors; i++)
 8002f10:	1dfb      	adds	r3, r7, #7
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	1dfb      	adds	r3, r7, #7
 8002f16:	3201      	adds	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	d800      	bhi.n	8002f24 <ResetAndInitializeAllSensors+0x120>
 8002f22:	e781      	b.n	8002e28 <ResetAndInitializeAllSensors+0x24>
	}
	UART_Print("All Chips booted\n");
 8002f24:	4b4d      	ldr	r3, [pc, #308]	@ (800305c <ResetAndInitializeAllSensors+0x258>)
 8002f26:	0018      	movs	r0, r3
 8002f28:	f005 fa66 	bl	80083f8 <UART_Print>

	for (Sensor = 0; Sensor < NumOfTOFSensors; Sensor++)
 8002f2c:	1d7b      	adds	r3, r7, #5
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	e057      	b.n	8002fe4 <ResetAndInitializeAllSensors+0x1e0>
	{
		VL53L1X_SetDistanceMode(Devs[Sensor], 1);
 8002f34:	1d7b      	adds	r3, r7, #5
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	4b46      	ldr	r3, [pc, #280]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002f3a:	0052      	lsls	r2, r2, #1
 8002f3c:	5ad3      	ldrh	r3, [r2, r3]
 8002f3e:	2101      	movs	r1, #1
 8002f40:	0018      	movs	r0, r3
 8002f42:	f004 fd6b 	bl	8007a1c <VL53L1X_SetDistanceMode>
		VL53L1X_SetTimingBudgetInMs(Devs[Sensor], TimingBudget);
 8002f46:	1d7b      	adds	r3, r7, #5
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	4b42      	ldr	r3, [pc, #264]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002f4c:	0052      	lsls	r2, r2, #1
 8002f4e:	5ad2      	ldrh	r2, [r2, r3]
 8002f50:	4b43      	ldr	r3, [pc, #268]	@ (8003060 <ResetAndInitializeAllSensors+0x25c>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	0019      	movs	r1, r3
 8002f56:	0010      	movs	r0, r2
 8002f58:	f004 fb80 	bl	800765c <VL53L1X_SetTimingBudgetInMs>
		VL53L1X_SetInterMeasurementInMs(Devs[Sensor], TimingBudget);
 8002f5c:	1d7b      	adds	r3, r7, #5
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	4b3c      	ldr	r3, [pc, #240]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002f62:	0052      	lsls	r2, r2, #1
 8002f64:	5ad2      	ldrh	r2, [r2, r3]
 8002f66:	4b3e      	ldr	r3, [pc, #248]	@ (8003060 <ResetAndInitializeAllSensors+0x25c>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	0010      	movs	r0, r2
 8002f6e:	f004 fe4d 	bl	8007c0c <VL53L1X_SetInterMeasurementInMs>
		VL53L1X_SetROI(Devs[Sensor], WidthOfSPADsPerZone, 6);
 8002f72:	1d7b      	adds	r3, r7, #5
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	4b37      	ldr	r3, [pc, #220]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002f78:	0052      	lsls	r2, r2, #1
 8002f7a:	5ad3      	ldrh	r3, [r2, r3]
 8002f7c:	2206      	movs	r2, #6
 8002f7e:	2104      	movs	r1, #4
 8002f80:	0018      	movs	r0, r3
 8002f82:	f004 ff60 	bl	8007e46 <VL53L1X_SetROI>
		WriteRegister8(Devs[Sensor], ROI_CONFIG__USER_ROI_CENTRE_SPAD, zone_center[0] - 0);
 8002f86:	1d7b      	adds	r3, r7, #5
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	4b32      	ldr	r3, [pc, #200]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002f8c:	0052      	lsls	r2, r2, #1
 8002f8e:	5ad0      	ldrh	r0, [r2, r3]
 8002f90:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <ResetAndInitializeAllSensors+0x260>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	001a      	movs	r2, r3
 8002f98:	217f      	movs	r1, #127	@ 0x7f
 8002f9a:	f005 f849 	bl	8008030 <WriteRegister8>
		error = VL53L1X_GetOffset(Devs[Sensor], &Offset);
 8002f9e:	1d7b      	adds	r3, r7, #5
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002fa4:	0052      	lsls	r2, r2, #1
 8002fa6:	5ad3      	ldrh	r3, [r2, r3]
 8002fa8:	003a      	movs	r2, r7
 8002faa:	0011      	movs	r1, r2
 8002fac:	0018      	movs	r0, r3
 8002fae:	f004 ff1c 	bl	8007dea <VL53L1X_GetOffset>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	701a      	strb	r2, [r3, #0]
		VL53L1X_SetOffset(Devs[Sensor], Offset + 40);
 8002fba:	1d7b      	adds	r3, r7, #5
 8002fbc:	781a      	ldrb	r2, [r3, #0]
 8002fbe:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 8002fc0:	0052      	lsls	r2, r2, #1
 8002fc2:	5ad2      	ldrh	r2, [r2, r3]
 8002fc4:	003b      	movs	r3, r7
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5e5b      	ldrsh	r3, [r3, r1]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3328      	adds	r3, #40	@ 0x28
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b21b      	sxth	r3, r3
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	0010      	movs	r0, r2
 8002fd6:	f004 fed7 	bl	8007d88 <VL53L1X_SetOffset>
	for (Sensor = 0; Sensor < NumOfTOFSensors; Sensor++)
 8002fda:	1d7b      	adds	r3, r7, #5
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	1d7b      	adds	r3, r7, #5
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	1d7b      	adds	r3, r7, #5
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d9a3      	bls.n	8002f34 <ResetAndInitializeAllSensors+0x130>
	}
	for (Sensor = 0; Sensor < NumOfTOFSensors; Sensor++)
 8002fec:	1d7b      	adds	r3, r7, #5
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e019      	b.n	8003028 <ResetAndInitializeAllSensors+0x224>
	{
		if((ActiveCaptors>>Sensor)&1){
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <ResetAndInitializeAllSensors+0x264>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	1d7b      	adds	r3, r7, #5
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	411a      	asrs	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	2201      	movs	r2, #1
 8003004:	4013      	ands	r3, r2
 8003006:	d007      	beq.n	8003018 <ResetAndInitializeAllSensors+0x214>
			VL53L1X_StartRanging(Devs[Sensor]);
 8003008:	1d7b      	adds	r3, r7, #5
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <ResetAndInitializeAllSensors+0x250>)
 800300e:	0052      	lsls	r2, r2, #1
 8003010:	5ad3      	ldrh	r3, [r2, r3]
 8003012:	0018      	movs	r0, r3
 8003014:	f004 faad 	bl	8007572 <VL53L1X_StartRanging>
		}
		HAL_Delay(1);
 8003018:	2001      	movs	r0, #1
 800301a:	f001 fa7d 	bl	8004518 <HAL_Delay>
	for (Sensor = 0; Sensor < NumOfTOFSensors; Sensor++)
 800301e:	1d7b      	adds	r3, r7, #5
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	1d7b      	adds	r3, r7, #5
 8003024:	3201      	adds	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	1d7b      	adds	r3, r7, #5
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b0f      	cmp	r3, #15
 800302e:	d9e1      	bls.n	8002ff4 <ResetAndInitializeAllSensors+0x1f0>
	}
	if (ActiveCaptors != 0xFFFF)
 8003030:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <ResetAndInitializeAllSensors+0x264>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	4a0d      	ldr	r2, [pc, #52]	@ (800306c <ResetAndInitializeAllSensors+0x268>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <ResetAndInitializeAllSensors+0x23e>
	{
		UART_Print("Not all captors were initialized\r\n");
 800303a:	4b0d      	ldr	r3, [pc, #52]	@ (8003070 <ResetAndInitializeAllSensors+0x26c>)
 800303c:	0018      	movs	r0, r3
 800303e:	f005 f9db 	bl	80083f8 <UART_Print>
	}

}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	20000d38 	.word	0x20000d38
 8003050:	20000000 	.word	0x20000000
 8003054:	20000004 	.word	0x20000004
 8003058:	20000d3a 	.word	0x20000d3a
 800305c:	0800cbb0 	.word	0x0800cbb0
 8003060:	20000048 	.word	0x20000048
 8003064:	20000024 	.word	0x20000024
 8003068:	2000004a 	.word	0x2000004a
 800306c:	0000ffff 	.word	0x0000ffff
 8003070:	0800cbc4 	.word	0x0800cbc4

08003074 <PlotPolarData>:

float OldAngle;
double SystemAngle;
void PlotPolarData(uint8_t SensorNum, uint8_t CurrentZone, uint8_t NumOfZones, uint16_t Distance)
{
 8003074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003076:	b089      	sub	sp, #36	@ 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	0005      	movs	r5, r0
 800307c:	000c      	movs	r4, r1
 800307e:	0010      	movs	r0, r2
 8003080:	0019      	movs	r1, r3
 8003082:	230f      	movs	r3, #15
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	1c2a      	adds	r2, r5, #0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	230e      	movs	r3, #14
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	1c22      	adds	r2, r4, #0
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	230d      	movs	r3, #13
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	1c02      	adds	r2, r0, #0
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	200a      	movs	r0, #10
 800309c:	183b      	adds	r3, r7, r0
 800309e:	1c0a      	adds	r2, r1, #0
 80030a0:	801a      	strh	r2, [r3, #0]
	double PartZoneAngle;

	float CorrectedDistance = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]

	if (Distance > 60000)
 80030a6:	183b      	adds	r3, r7, r0
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	4a67      	ldr	r2, [pc, #412]	@ (8003248 <PlotPolarData+0x1d4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d902      	bls.n	80030b6 <PlotPolarData+0x42>
	{
		Distance = 0;
 80030b0:	183b      	adds	r3, r7, r0
 80030b2:	2200      	movs	r2, #0
 80030b4:	801a      	strh	r2, [r3, #0]
	}
	PartZoneAngle = (StartingZoneAngle + ZoneFOVChangePerStep*CurrentZone) - (HorizontalFOVofSensor / 2.0);
 80030b6:	230e      	movs	r3, #14
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	0018      	movs	r0, r3
 80030be:	f7ff fb53 	bl	8002768 <__aeabi_i2d>
 80030c2:	4a62      	ldr	r2, [pc, #392]	@ (800324c <PlotPolarData+0x1d8>)
 80030c4:	4b62      	ldr	r3, [pc, #392]	@ (8003250 <PlotPolarData+0x1dc>)
 80030c6:	f7fe fc8d 	bl	80019e4 <__aeabi_dmul>
 80030ca:	0002      	movs	r2, r0
 80030cc:	000b      	movs	r3, r1
 80030ce:	0010      	movs	r0, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	4a5e      	ldr	r2, [pc, #376]	@ (800324c <PlotPolarData+0x1d8>)
 80030d4:	4b5f      	ldr	r3, [pc, #380]	@ (8003254 <PlotPolarData+0x1e0>)
 80030d6:	f7fd fcdd 	bl	8000a94 <__aeabi_dadd>
 80030da:	0002      	movs	r2, r0
 80030dc:	000b      	movs	r3, r1
 80030de:	0010      	movs	r0, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	4a5a      	ldr	r2, [pc, #360]	@ (800324c <PlotPolarData+0x1d8>)
 80030e4:	4b5c      	ldr	r3, [pc, #368]	@ (8003258 <PlotPolarData+0x1e4>)
 80030e6:	f7fe ff45 	bl	8001f74 <__aeabi_dsub>
 80030ea:	0002      	movs	r2, r0
 80030ec:	000b      	movs	r3, r1
 80030ee:	613a      	str	r2, [r7, #16]
 80030f0:	617b      	str	r3, [r7, #20]
	SystemAngle = -80 + 20.0*SensorNum + PartZoneAngle;
 80030f2:	230f      	movs	r3, #15
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff fb35 	bl	8002768 <__aeabi_i2d>
 80030fe:	2200      	movs	r2, #0
 8003100:	4b56      	ldr	r3, [pc, #344]	@ (800325c <PlotPolarData+0x1e8>)
 8003102:	f7fe fc6f 	bl	80019e4 <__aeabi_dmul>
 8003106:	0002      	movs	r2, r0
 8003108:	000b      	movs	r3, r1
 800310a:	0010      	movs	r0, r2
 800310c:	0019      	movs	r1, r3
 800310e:	2200      	movs	r2, #0
 8003110:	4b53      	ldr	r3, [pc, #332]	@ (8003260 <PlotPolarData+0x1ec>)
 8003112:	f7fe ff2f 	bl	8001f74 <__aeabi_dsub>
 8003116:	0002      	movs	r2, r0
 8003118:	000b      	movs	r3, r1
 800311a:	0010      	movs	r0, r2
 800311c:	0019      	movs	r1, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f7fd fcb7 	bl	8000a94 <__aeabi_dadd>
 8003126:	0002      	movs	r2, r0
 8003128:	000b      	movs	r3, r1
 800312a:	494e      	ldr	r1, [pc, #312]	@ (8003264 <PlotPolarData+0x1f0>)
 800312c:	600a      	str	r2, [r1, #0]
 800312e:	604b      	str	r3, [r1, #4]
	CorrectedDistance = pow(pow(RadarCircleRadius,2) + pow(Distance, 2) - (2 * RadarCircleRadius * Distance * cos((180 - PartZoneAngle)/(180) * Pi)), 0.5);
 8003130:	260a      	movs	r6, #10
 8003132:	19bb      	adds	r3, r7, r6
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	0018      	movs	r0, r3
 8003138:	f7ff fb44 	bl	80027c4 <__aeabi_ui2d>
 800313c:	2200      	movs	r2, #0
 800313e:	2380      	movs	r3, #128	@ 0x80
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	f007 feab 	bl	800ae9c <pow>
 8003146:	2200      	movs	r2, #0
 8003148:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <PlotPolarData+0x1f4>)
 800314a:	f7fd fca3 	bl	8000a94 <__aeabi_dadd>
 800314e:	0002      	movs	r2, r0
 8003150:	000b      	movs	r3, r1
 8003152:	0014      	movs	r4, r2
 8003154:	001d      	movs	r5, r3
 8003156:	19bb      	adds	r3, r7, r6
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff fb04 	bl	8002768 <__aeabi_i2d>
 8003160:	2200      	movs	r2, #0
 8003162:	4b42      	ldr	r3, [pc, #264]	@ (800326c <PlotPolarData+0x1f8>)
 8003164:	f7fe fc3e 	bl	80019e4 <__aeabi_dmul>
 8003168:	0002      	movs	r2, r0
 800316a:	000b      	movs	r3, r1
 800316c:	603a      	str	r2, [r7, #0]
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2000      	movs	r0, #0
 8003176:	493e      	ldr	r1, [pc, #248]	@ (8003270 <PlotPolarData+0x1fc>)
 8003178:	f7fe fefc 	bl	8001f74 <__aeabi_dsub>
 800317c:	0002      	movs	r2, r0
 800317e:	000b      	movs	r3, r1
 8003180:	0010      	movs	r0, r2
 8003182:	0019      	movs	r1, r3
 8003184:	2200      	movs	r2, #0
 8003186:	4b3a      	ldr	r3, [pc, #232]	@ (8003270 <PlotPolarData+0x1fc>)
 8003188:	f7fd ffe8 	bl	800115c <__aeabi_ddiv>
 800318c:	0002      	movs	r2, r0
 800318e:	000b      	movs	r3, r1
 8003190:	0010      	movs	r0, r2
 8003192:	0019      	movs	r1, r3
 8003194:	4a37      	ldr	r2, [pc, #220]	@ (8003274 <PlotPolarData+0x200>)
 8003196:	4b38      	ldr	r3, [pc, #224]	@ (8003278 <PlotPolarData+0x204>)
 8003198:	f7fe fc24 	bl	80019e4 <__aeabi_dmul>
 800319c:	0002      	movs	r2, r0
 800319e:	000b      	movs	r3, r1
 80031a0:	0010      	movs	r0, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	f007 fee8 	bl	800af78 <cos>
 80031a8:	0002      	movs	r2, r0
 80031aa:	000b      	movs	r3, r1
 80031ac:	6838      	ldr	r0, [r7, #0]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	f7fe fc18 	bl	80019e4 <__aeabi_dmul>
 80031b4:	0002      	movs	r2, r0
 80031b6:	000b      	movs	r3, r1
 80031b8:	0020      	movs	r0, r4
 80031ba:	0029      	movs	r1, r5
 80031bc:	f7fe feda 	bl	8001f74 <__aeabi_dsub>
 80031c0:	0002      	movs	r2, r0
 80031c2:	000b      	movs	r3, r1
 80031c4:	0010      	movs	r0, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	2200      	movs	r2, #0
 80031ca:	4b2c      	ldr	r3, [pc, #176]	@ (800327c <PlotPolarData+0x208>)
 80031cc:	f007 fe66 	bl	800ae9c <pow>
 80031d0:	0002      	movs	r2, r0
 80031d2:	000b      	movs	r3, r1
 80031d4:	0010      	movs	r0, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	f7ff fb18 	bl	800280c <__aeabi_d2f>
 80031dc:	1c03      	adds	r3, r0, #0
 80031de:	61fb      	str	r3, [r7, #28]
	if (CorrectedDistance < 55)
 80031e0:	4927      	ldr	r1, [pc, #156]	@ (8003280 <PlotPolarData+0x20c>)
 80031e2:	69f8      	ldr	r0, [r7, #28]
 80031e4:	f7fd f96e 	bl	80004c4 <__aeabi_fcmplt>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d001      	beq.n	80031f0 <PlotPolarData+0x17c>
	{
		CorrectedDistance = 55;
 80031ec:	4b24      	ldr	r3, [pc, #144]	@ (8003280 <PlotPolarData+0x20c>)
 80031ee:	61fb      	str	r3, [r7, #28]
	}
	LidarAngle[SensorNum*13+CurrentZone] = SystemAngle;
 80031f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <PlotPolarData+0x1f0>)
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	260f      	movs	r6, #15
 80031f8:	19bb      	adds	r3, r7, r6
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	0013      	movs	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	189b      	adds	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	189a      	adds	r2, r3, r2
 8003206:	250e      	movs	r5, #14
 8003208:	197b      	adds	r3, r7, r5
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	18d4      	adds	r4, r2, r3
 800320e:	f7ff fafd 	bl	800280c <__aeabi_d2f>
 8003212:	1c01      	adds	r1, r0, #0
 8003214:	4b1b      	ldr	r3, [pc, #108]	@ (8003284 <PlotPolarData+0x210>)
 8003216:	00a2      	lsls	r2, r4, #2
 8003218:	50d1      	str	r1, [r2, r3]
	LidarDistance[SensorNum*13+CurrentZone] = (uint16_t)CorrectedDistance;
 800321a:	19bb      	adds	r3, r7, r6
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	0013      	movs	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	189b      	adds	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	189a      	adds	r2, r3, r2
 8003228:	197b      	adds	r3, r7, r5
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	18d4      	adds	r4, r2, r3
 800322e:	69f8      	ldr	r0, [r7, #28]
 8003230:	f7fd f970 	bl	8000514 <__aeabi_f2uiz>
 8003234:	0003      	movs	r3, r0
 8003236:	b299      	uxth	r1, r3
 8003238:	4b13      	ldr	r3, [pc, #76]	@ (8003288 <PlotPolarData+0x214>)
 800323a:	0062      	lsls	r2, r4, #1
 800323c:	52d1      	strh	r1, [r2, r3]
}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b009      	add	sp, #36	@ 0x24
 8003244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	0000ea60 	.word	0x0000ea60
 800324c:	3d70a3d7 	.word	0x3d70a3d7
 8003250:	3ff3170a 	.word	0x3ff3170a
 8003254:	4003170a 	.word	0x4003170a
 8003258:	4023170a 	.word	0x4023170a
 800325c:	40340000 	.word	0x40340000
 8003260:	40540000 	.word	0x40540000
 8003264:	20000d40 	.word	0x20000d40
 8003268:	40a7a200 	.word	0x40a7a200
 800326c:	405b8000 	.word	0x405b8000
 8003270:	40668000 	.word	0x40668000
 8003274:	c083126f 	.word	0xc083126f
 8003278:	400921ca 	.word	0x400921ca
 800327c:	3fe00000 	.word	0x3fe00000
 8003280:	425c0000 	.word	0x425c0000
 8003284:	20000374 	.word	0x20000374
 8003288:	200006b4 	.word	0x200006b4

0800328c <TurnOnSensor>:

void TurnOnSensor(uint8_t SensorNum)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	0002      	movs	r2, r0
 8003294:	1dfb      	adds	r3, r7, #7
 8003296:	701a      	strb	r2, [r3, #0]
	switch (SensorNum)
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b0f      	cmp	r3, #15
 800329e:	d900      	bls.n	80032a2 <TurnOnSensor+0x16>
 80032a0:	e080      	b.n	80033a4 <TurnOnSensor+0x118>
 80032a2:	009a      	lsls	r2, r3, #2
 80032a4:	4b41      	ldr	r3, [pc, #260]	@ (80033ac <TurnOnSensor+0x120>)
 80032a6:	18d3      	adds	r3, r2, r3
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	469f      	mov	pc, r3
	{
		case 0:
			// GPIO PC2
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80032ac:	4b40      	ldr	r3, [pc, #256]	@ (80033b0 <TurnOnSensor+0x124>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	2104      	movs	r1, #4
 80032b2:	0018      	movs	r0, r3
 80032b4:	f001 fbac 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 80032b8:	e074      	b.n	80033a4 <TurnOnSensor+0x118>
		case 1:
			// GPIO PC15
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	483c      	ldr	r0, [pc, #240]	@ (80033b0 <TurnOnSensor+0x124>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	0019      	movs	r1, r3
 80032c4:	f001 fba4 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 80032c8:	e06c      	b.n	80033a4 <TurnOnSensor+0x118>
		case 2:
			// GPIO PC12
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80032ca:	2380      	movs	r3, #128	@ 0x80
 80032cc:	015b      	lsls	r3, r3, #5
 80032ce:	4838      	ldr	r0, [pc, #224]	@ (80033b0 <TurnOnSensor+0x124>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	0019      	movs	r1, r3
 80032d4:	f001 fb9c 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 80032d8:	e064      	b.n	80033a4 <TurnOnSensor+0x118>
		case 3:
			// GPIO PB9
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80032da:	2380      	movs	r3, #128	@ 0x80
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4835      	ldr	r0, [pc, #212]	@ (80033b4 <TurnOnSensor+0x128>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	0019      	movs	r1, r3
 80032e4:	f001 fb94 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 80032e8:	e05c      	b.n	80033a4 <TurnOnSensor+0x118>
		case 4:
			// GPIO PB6
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80032ea:	4b32      	ldr	r3, [pc, #200]	@ (80033b4 <TurnOnSensor+0x128>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	2140      	movs	r1, #64	@ 0x40
 80032f0:	0018      	movs	r0, r3
 80032f2:	f001 fb8d 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 80032f6:	e055      	b.n	80033a4 <TurnOnSensor+0x118>
		case 5:
			// GPIO PB3
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80032f8:	4b2e      	ldr	r3, [pc, #184]	@ (80033b4 <TurnOnSensor+0x128>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	2108      	movs	r1, #8
 80032fe:	0018      	movs	r0, r3
 8003300:	f001 fb86 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003304:	e04e      	b.n	80033a4 <TurnOnSensor+0x118>
		case 6:
			// GPIO PD2
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8003306:	4b2c      	ldr	r3, [pc, #176]	@ (80033b8 <TurnOnSensor+0x12c>)
 8003308:	2201      	movs	r2, #1
 800330a:	2104      	movs	r1, #4
 800330c:	0018      	movs	r0, r3
 800330e:	f001 fb7f 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003312:	e047      	b.n	80033a4 <TurnOnSensor+0x118>
		case 7:
			// GPIO PC9
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4825      	ldr	r0, [pc, #148]	@ (80033b0 <TurnOnSensor+0x124>)
 800331a:	2201      	movs	r2, #1
 800331c:	0019      	movs	r1, r3
 800331e:	f001 fb77 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003322:	e03f      	b.n	80033a4 <TurnOnSensor+0x118>
		case 8:
			// GPIO PA12
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	23a0      	movs	r3, #160	@ 0xa0
 800332a:	05db      	lsls	r3, r3, #23
 800332c:	2201      	movs	r2, #1
 800332e:	0018      	movs	r0, r3
 8003330:	f001 fb6e 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003334:	e036      	b.n	80033a4 <TurnOnSensor+0x118>
		case 9:
			// GPIO PC7
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003336:	4b1e      	ldr	r3, [pc, #120]	@ (80033b0 <TurnOnSensor+0x124>)
 8003338:	2201      	movs	r2, #1
 800333a:	2180      	movs	r1, #128	@ 0x80
 800333c:	0018      	movs	r0, r3
 800333e:	f001 fb67 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003342:	e02f      	b.n	80033a4 <TurnOnSensor+0x118>
		case 10:
			// GPIO PA8
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8003344:	2380      	movs	r3, #128	@ 0x80
 8003346:	0059      	lsls	r1, r3, #1
 8003348:	23a0      	movs	r3, #160	@ 0xa0
 800334a:	05db      	lsls	r3, r3, #23
 800334c:	2201      	movs	r2, #1
 800334e:	0018      	movs	r0, r3
 8003350:	f001 fb5e 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003354:	e026      	b.n	80033a4 <TurnOnSensor+0x118>
		case 11:
			// GPIO PB13
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	019b      	lsls	r3, r3, #6
 800335a:	4816      	ldr	r0, [pc, #88]	@ (80033b4 <TurnOnSensor+0x128>)
 800335c:	2201      	movs	r2, #1
 800335e:	0019      	movs	r1, r3
 8003360:	f001 fb56 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003364:	e01e      	b.n	80033a4 <TurnOnSensor+0x118>
		case 12:
			// GPIO PB10
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8003366:	2380      	movs	r3, #128	@ 0x80
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4812      	ldr	r0, [pc, #72]	@ (80033b4 <TurnOnSensor+0x128>)
 800336c:	2201      	movs	r2, #1
 800336e:	0019      	movs	r1, r3
 8003370:	f001 fb4e 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003374:	e016      	b.n	80033a4 <TurnOnSensor+0x118>
		case 13:
			// GPIO PB0
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8003376:	4b0f      	ldr	r3, [pc, #60]	@ (80033b4 <TurnOnSensor+0x128>)
 8003378:	2201      	movs	r2, #1
 800337a:	2101      	movs	r1, #1
 800337c:	0018      	movs	r0, r3
 800337e:	f001 fb47 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003382:	e00f      	b.n	80033a4 <TurnOnSensor+0x118>
		case 14:
			// GPIO PA7
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003384:	23a0      	movs	r3, #160	@ 0xa0
 8003386:	05db      	lsls	r3, r3, #23
 8003388:	2201      	movs	r2, #1
 800338a:	2180      	movs	r1, #128	@ 0x80
 800338c:	0018      	movs	r0, r3
 800338e:	f001 fb3f 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 8003392:	e007      	b.n	80033a4 <TurnOnSensor+0x118>
		case 15:
			// GPIO PA4
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003394:	23a0      	movs	r3, #160	@ 0xa0
 8003396:	05db      	lsls	r3, r3, #23
 8003398:	2201      	movs	r2, #1
 800339a:	2110      	movs	r1, #16
 800339c:	0018      	movs	r0, r3
 800339e:	f001 fb37 	bl	8004a10 <HAL_GPIO_WritePin>
			break;
 80033a2:	46c0      	nop			@ (mov r8, r8)


	}
}
 80033a4:	46c0      	nop			@ (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	0800ccc4 	.word	0x0800ccc4
 80033b0:	50000800 	.word	0x50000800
 80033b4:	50000400 	.word	0x50000400
 80033b8:	50000c00 	.word	0x50000c00

080033bc <ResetAllSensors>:

void ResetAllSensors(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);  // Capt 0
 80033c0:	4b36      	ldr	r3, [pc, #216]	@ (800349c <ResetAllSensors+0xe0>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	2104      	movs	r1, #4
 80033c6:	0018      	movs	r0, r3
 80033c8:	f001 fb22 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET); // Capt 1
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	4832      	ldr	r0, [pc, #200]	@ (800349c <ResetAllSensors+0xe0>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	0019      	movs	r1, r3
 80033d6:	f001 fb1b 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Capt 2
 80033da:	4b31      	ldr	r3, [pc, #196]	@ (80034a0 <ResetAllSensors+0xe4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	2101      	movs	r1, #1
 80033e0:	0018      	movs	r0, r3
 80033e2:	f001 fb15 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);  // Capt 3
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	482d      	ldr	r0, [pc, #180]	@ (80034a0 <ResetAllSensors+0xe4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	0019      	movs	r1, r3
 80033f0:	f001 fb0e 	bl	8004a10 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // Capt 4
 80033f4:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <ResetAllSensors+0xe4>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	2140      	movs	r1, #64	@ 0x40
 80033fa:	0018      	movs	r0, r3
 80033fc:	f001 fb08 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);  // Capt 5
 8003400:	4b27      	ldr	r3, [pc, #156]	@ (80034a0 <ResetAllSensors+0xe4>)
 8003402:	2200      	movs	r2, #0
 8003404:	2108      	movs	r1, #8
 8003406:	0018      	movs	r0, r3
 8003408:	f001 fb02 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);  // Capt 6
 800340c:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <ResetAllSensors+0xe8>)
 800340e:	2200      	movs	r2, #0
 8003410:	2104      	movs	r1, #4
 8003412:	0018      	movs	r0, r3
 8003414:	f001 fafc 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);  // Capt 7
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	481f      	ldr	r0, [pc, #124]	@ (800349c <ResetAllSensors+0xe0>)
 800341e:	2200      	movs	r2, #0
 8003420:	0019      	movs	r1, r3
 8003422:	f001 faf5 	bl	8004a10 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Capt 8
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	0159      	lsls	r1, r3, #5
 800342a:	23a0      	movs	r3, #160	@ 0xa0
 800342c:	05db      	lsls	r3, r3, #23
 800342e:	2200      	movs	r2, #0
 8003430:	0018      	movs	r0, r3
 8003432:	f001 faed 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);  // Capt 9
 8003436:	4b19      	ldr	r3, [pc, #100]	@ (800349c <ResetAllSensors+0xe0>)
 8003438:	2200      	movs	r2, #0
 800343a:	2180      	movs	r1, #128	@ 0x80
 800343c:	0018      	movs	r0, r3
 800343e:	f001 fae7 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  // Capt 10
 8003442:	2380      	movs	r3, #128	@ 0x80
 8003444:	0059      	lsls	r1, r3, #1
 8003446:	23a0      	movs	r3, #160	@ 0xa0
 8003448:	05db      	lsls	r3, r3, #23
 800344a:	2200      	movs	r2, #0
 800344c:	0018      	movs	r0, r3
 800344e:	f001 fadf 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Capt 11
 8003452:	2380      	movs	r3, #128	@ 0x80
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	4812      	ldr	r0, [pc, #72]	@ (80034a0 <ResetAllSensors+0xe4>)
 8003458:	2200      	movs	r2, #0
 800345a:	0019      	movs	r1, r3
 800345c:	f001 fad8 	bl	8004a10 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Capt 12
 8003460:	2380      	movs	r3, #128	@ 0x80
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	480e      	ldr	r0, [pc, #56]	@ (80034a0 <ResetAllSensors+0xe4>)
 8003466:	2200      	movs	r2, #0
 8003468:	0019      	movs	r1, r3
 800346a:	f001 fad1 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // Capt 13
 800346e:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <ResetAllSensors+0xe4>)
 8003470:	2200      	movs	r2, #0
 8003472:	2101      	movs	r1, #1
 8003474:	0018      	movs	r0, r3
 8003476:	f001 facb 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);  // Capt 14
 800347a:	23a0      	movs	r3, #160	@ 0xa0
 800347c:	05db      	lsls	r3, r3, #23
 800347e:	2200      	movs	r2, #0
 8003480:	2180      	movs	r1, #128	@ 0x80
 8003482:	0018      	movs	r0, r3
 8003484:	f001 fac4 	bl	8004a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Capt 15
 8003488:	23a0      	movs	r3, #160	@ 0xa0
 800348a:	05db      	lsls	r3, r3, #23
 800348c:	2200      	movs	r2, #0
 800348e:	2110      	movs	r1, #16
 8003490:	0018      	movs	r0, r3
 8003492:	f001 fabd 	bl	8004a10 <HAL_GPIO_WritePin>
}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	50000800 	.word	0x50000800
 80034a0:	50000400 	.word	0x50000400
 80034a4:	50000c00 	.word	0x50000c00

080034a8 <SendOneROIMesurement>:
	}*/
	setInactiveCaptors(0);
	setActiveCaptors(1);
}

void SendOneROIMesurement(uint32_t TotalTime, uint8_t selectedZone){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	000a      	movs	r2, r1
 80034b2:	1cfb      	adds	r3, r7, #3
 80034b4:	701a      	strb	r2, [r3, #0]
	UART_Send_Mesures(LidarDistance , selectedZone, TotalTime);
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	1cfb      	adds	r3, r7, #3
 80034ba:	7819      	ldrb	r1, [r3, #0]
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <SendOneROIMesurement+0x30>)
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 fdc4 	bl	800404c <UART_Send_Mesures>
		UART_Print(SmallBuff);
		UART_Print(BigBuff);


	}*/
	setInactiveCaptors(0);
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7ff fc73 	bl	8002db0 <setInactiveCaptors>
	setActiveCaptors(1);
 80034ca:	2001      	movs	r0, #1
 80034cc:	f7ff fc46 	bl	8002d5c <setActiveCaptors>
}
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	200006b4 	.word	0x200006b4

080034dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034de:	b089      	sub	sp, #36	@ 0x24
 80034e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	VL53L1X_ERROR error = 0;
 80034e2:	231f      	movs	r3, #31
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
	uint32_t i=0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034ee:	f000 ff8d 	bl	800440c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034f2:	f000 f9bf 	bl	8003874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034f6:	f000 fae9 	bl	8003acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80034fa:	f000 fa8f 	bl	8003a1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80034fe:	f000 fa0d 	bl	800391c <MX_I2C1_Init>
  MX_TIM6_Init();
 8003502:	f000 fa4d 	bl	80039a0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ResetAndInitializeAllSensors();
 8003506:	f7ff fc7d 	bl	8002e04 <ResetAndInitializeAllSensors>
  LEDs_init();
 800350a:	f7ff fa21 	bl	8002950 <LEDs_init>
  HAL_TIM_Base_Start_IT(&htim6);
 800350e:	4bce      	ldr	r3, [pc, #824]	@ (8003848 <main+0x36c>)
 8003510:	0018      	movs	r0, r3
 8003512:	f002 ff1b 	bl	800634c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	error = 0;
 8003516:	231f      	movs	r3, #31
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
		TimeStart = HAL_GetTick();
 800351e:	f000 fff1 	bl	8004504 <HAL_GetTick>
 8003522:	0003      	movs	r3, r0
 8003524:	613b      	str	r3, [r7, #16]
		Timeout = 0;
 8003526:	2315      	movs	r3, #21
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
		for(Zone = 0; Zone < NumOfZonesPerSensor; Zone++)
 800352e:	2317      	movs	r3, #23
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e15d      	b.n	80037f4 <main+0x318>
		{
			for (Sensor=0; Sensor < NumOfTOFSensors ; Sensor++)
 8003538:	2316      	movs	r3, #22
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e021      	b.n	8003586 <main+0xaa>
			{
				if((ActiveCaptors>>Sensor)&1)
 8003542:	4bc2      	ldr	r3, [pc, #776]	@ (800384c <main+0x370>)
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	001a      	movs	r2, r3
 8003548:	2116      	movs	r1, #22
 800354a:	187b      	adds	r3, r7, r1
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	411a      	asrs	r2, r3
 8003550:	0013      	movs	r3, r2
 8003552:	2201      	movs	r2, #1
 8003554:	4013      	ands	r3, r2
 8003556:	d010      	beq.n	800357a <main+0x9e>
					WriteRegister8(Devs[Sensor], ROI_CONFIG__USER_ROI_CENTRE_SPAD, zone_center[Zone+1] - 0);
 8003558:	187b      	adds	r3, r7, r1
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	4bbc      	ldr	r3, [pc, #752]	@ (8003850 <main+0x374>)
 800355e:	0052      	lsls	r2, r2, #1
 8003560:	5ad0      	ldrh	r0, [r2, r3]
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	4bba      	ldr	r3, [pc, #744]	@ (8003854 <main+0x378>)
 800356c:	0052      	lsls	r2, r2, #1
 800356e:	5ad3      	ldrh	r3, [r2, r3]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	001a      	movs	r2, r3
 8003574:	217f      	movs	r1, #127	@ 0x7f
 8003576:	f004 fd5b 	bl	8008030 <WriteRegister8>
			for (Sensor=0; Sensor < NumOfTOFSensors ; Sensor++)
 800357a:	2116      	movs	r1, #22
 800357c:	187b      	adds	r3, r7, r1
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	187b      	adds	r3, r7, r1
 8003582:	3201      	adds	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	2216      	movs	r2, #22
 8003588:	18bb      	adds	r3, r7, r2
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b0f      	cmp	r3, #15
 800358e:	d9d8      	bls.n	8003542 <main+0x66>
			}
			i=i+1;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	3301      	adds	r3, #1
 8003594:	61bb      	str	r3, [r7, #24]
			for (Sensor=0; Sensor < NumOfTOFSensors ; Sensor++)
 8003596:	18bb      	adds	r3, r7, r2
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e107      	b.n	80037ae <main+0x2d2>
			{
				if((ActiveCaptors>>Sensor)&1){
 800359e:	4bab      	ldr	r3, [pc, #684]	@ (800384c <main+0x370>)
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	001a      	movs	r2, r3
 80035a4:	2116      	movs	r1, #22
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	411a      	asrs	r2, r3
 80035ac:	0013      	movs	r3, r2
 80035ae:	2201      	movs	r2, #1
 80035b0:	4013      	ands	r3, r2
 80035b2:	d100      	bne.n	80035b6 <main+0xda>
 80035b4:	e0f5      	b.n	80037a2 <main+0x2c6>
					error = VL53L1X_CheckForDataReady(Devs[Sensor], &Sensorcheck);
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	4ba5      	ldr	r3, [pc, #660]	@ (8003850 <main+0x374>)
 80035bc:	0052      	lsls	r2, r2, #1
 80035be:	5ad3      	ldrh	r3, [r2, r3]
 80035c0:	221f      	movs	r2, #31
 80035c2:	18bc      	adds	r4, r7, r2
 80035c4:	1cfa      	adds	r2, r7, #3
 80035c6:	0011      	movs	r1, r2
 80035c8:	0018      	movs	r0, r3
 80035ca:	f004 f808 	bl	80075de <VL53L1X_CheckForDataReady>
 80035ce:	0003      	movs	r3, r0
 80035d0:	7023      	strb	r3, [r4, #0]
					while ((Sensorcheck == 0) && (Timeout == 0))
 80035d2:	e034      	b.n	800363e <main+0x162>
					{
						HAL_Delay(1);
 80035d4:	2001      	movs	r0, #1
 80035d6:	f000 ff9f 	bl	8004518 <HAL_Delay>
						CurrentTime = HAL_GetTick();
 80035da:	f000 ff93 	bl	8004504 <HAL_GetTick>
 80035de:	0003      	movs	r3, r0
 80035e0:	607b      	str	r3, [r7, #4]
						if (CurrentTime > (TimeStart + (NumOfZonesPerSensor + 1) * TimingBudget * 2))
 80035e2:	4b9d      	ldr	r3, [pc, #628]	@ (8003858 <main+0x37c>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	001a      	movs	r2, r3
 80035e8:	0013      	movs	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	001a      	movs	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	18d3      	adds	r3, r2, r3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d90c      	bls.n	8003616 <main+0x13a>
						{
							Timeout = 1;
 80035fc:	2315      	movs	r3, #21
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
							Sensor = NumOfTOFSensors;
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2210      	movs	r2, #16
 800360a:	701a      	strb	r2, [r3, #0]
							Zone = NumOfZonesPerSensor;
 800360c:	2317      	movs	r3, #23
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	220d      	movs	r2, #13
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e013      	b.n	800363e <main+0x162>
						}
						else
						{
							error += VL53L1X_CheckForDataReady(Devs[Sensor], &Sensorcheck);
 8003616:	2316      	movs	r3, #22
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	4b8c      	ldr	r3, [pc, #560]	@ (8003850 <main+0x374>)
 800361e:	0052      	lsls	r2, r2, #1
 8003620:	5ad3      	ldrh	r3, [r2, r3]
 8003622:	1cfa      	adds	r2, r7, #3
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f003 ffd9 	bl	80075de <VL53L1X_CheckForDataReady>
 800362c:	0003      	movs	r3, r0
 800362e:	b2da      	uxtb	r2, r3
 8003630:	211f      	movs	r1, #31
 8003632:	187b      	adds	r3, r7, r1
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	18d3      	adds	r3, r2, r3
 8003638:	b2da      	uxtb	r2, r3
 800363a:	187b      	adds	r3, r7, r1
 800363c:	701a      	strb	r2, [r3, #0]
					while ((Sensorcheck == 0) && (Timeout == 0))
 800363e:	1cfb      	adds	r3, r7, #3
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d104      	bne.n	8003650 <main+0x174>
 8003646:	2315      	movs	r3, #21
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0c1      	beq.n	80035d4 <main+0xf8>
						}
					}


				if (Timeout == 0)
 8003650:	2315      	movs	r3, #21
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d000      	beq.n	800365c <main+0x180>
 800365a:	e0a2      	b.n	80037a2 <main+0x2c6>
				{
					WriteRegister8(Devs[Sensor], ROI_CONFIG__USER_ROI_CENTRE_SPAD, zone_center[Zone+1] - 0);
 800365c:	2416      	movs	r4, #22
 800365e:	193b      	adds	r3, r7, r4
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	4b7b      	ldr	r3, [pc, #492]	@ (8003850 <main+0x374>)
 8003664:	0052      	lsls	r2, r2, #1
 8003666:	5ad0      	ldrh	r0, [r2, r3]
 8003668:	2617      	movs	r6, #23
 800366a:	19bb      	adds	r3, r7, r6
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	4b78      	ldr	r3, [pc, #480]	@ (8003854 <main+0x378>)
 8003672:	0052      	lsls	r2, r2, #1
 8003674:	5ad3      	ldrh	r3, [r2, r3]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	001a      	movs	r2, r3
 800367a:	217f      	movs	r1, #127	@ 0x7f
 800367c:	f004 fcd8 	bl	8008030 <WriteRegister8>
					TimeStamp[Sensor*13+ Zone] = HAL_GetTick();
 8003680:	0025      	movs	r5, r4
 8003682:	193b      	adds	r3, r7, r4
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	0013      	movs	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	189b      	adds	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	189a      	adds	r2, r3, r2
 8003690:	19bb      	adds	r3, r7, r6
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	18d4      	adds	r4, r2, r3
 8003696:	f000 ff35 	bl	8004504 <HAL_GetTick>
 800369a:	0001      	movs	r1, r0
 800369c:	4b6f      	ldr	r3, [pc, #444]	@ (800385c <main+0x380>)
 800369e:	00a2      	lsls	r2, r4, #2
 80036a0:	50d1      	str	r1, [r2, r3]
					VL53L1X_ClearInterrupt(Devs[Sensor]);
 80036a2:	002c      	movs	r4, r5
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	4b69      	ldr	r3, [pc, #420]	@ (8003850 <main+0x374>)
 80036aa:	0052      	lsls	r2, r2, #1
 80036ac:	5ad3      	ldrh	r3, [r2, r3]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f003 ff16 	bl	80074e0 <VL53L1X_ClearInterrupt>

					error += VL53L1X_GetDistance(Devs[Sensor], &Distance);
 80036b4:	193b      	adds	r3, r7, r4
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	4b65      	ldr	r3, [pc, #404]	@ (8003850 <main+0x374>)
 80036ba:	0052      	lsls	r2, r2, #1
 80036bc:	5ad3      	ldrh	r3, [r2, r3]
 80036be:	4a68      	ldr	r2, [pc, #416]	@ (8003860 <main+0x384>)
 80036c0:	0011      	movs	r1, r2
 80036c2:	0018      	movs	r0, r3
 80036c4:	f004 fb08 	bl	8007cd8 <VL53L1X_GetDistance>
 80036c8:	0003      	movs	r3, r0
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	251f      	movs	r5, #31
 80036ce:	197b      	adds	r3, r7, r5
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	18d3      	adds	r3, r2, r3
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	197b      	adds	r3, r7, r5
 80036d8:	701a      	strb	r2, [r3, #0]
					error += VL53L1X_GetRangeStatus(Devs[Sensor], &RangeStatus);
 80036da:	193b      	adds	r3, r7, r4
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	4b5c      	ldr	r3, [pc, #368]	@ (8003850 <main+0x374>)
 80036e0:	0052      	lsls	r2, r2, #1
 80036e2:	5ad3      	ldrh	r3, [r2, r3]
 80036e4:	4a5f      	ldr	r2, [pc, #380]	@ (8003864 <main+0x388>)
 80036e6:	0011      	movs	r1, r2
 80036e8:	0018      	movs	r0, r3
 80036ea:	f004 fb17 	bl	8007d1c <VL53L1X_GetRangeStatus>
 80036ee:	0003      	movs	r3, r0
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	197b      	adds	r3, r7, r5
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	18d3      	adds	r3, r2, r3
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	197b      	adds	r3, r7, r5
 80036fc:	701a      	strb	r2, [r3, #0]
					if ((RangeStatus== 0) || (RangeStatus == 7))
 80036fe:	4b59      	ldr	r3, [pc, #356]	@ (8003864 <main+0x388>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <main+0x232>
 8003706:	4b57      	ldr	r3, [pc, #348]	@ (8003864 <main+0x388>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b07      	cmp	r3, #7
 800370c:	d13d      	bne.n	800378a <main+0x2ae>
					{
						if (Distance > 60000)
 800370e:	4b54      	ldr	r3, [pc, #336]	@ (8003860 <main+0x384>)
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	4a55      	ldr	r2, [pc, #340]	@ (8003868 <main+0x38c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d90d      	bls.n	8003734 <main+0x258>
						{
							Distance = 0;
 8003718:	4b51      	ldr	r3, [pc, #324]	@ (8003860 <main+0x384>)
 800371a:	2200      	movs	r2, #0
 800371c:	801a      	strh	r2, [r3, #0]
							PlotPolarData(Sensor, Zone, 13, 0);
 800371e:	2317      	movs	r3, #23
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	7819      	ldrb	r1, [r3, #0]
 8003724:	2316      	movs	r3, #22
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	7818      	ldrb	r0, [r3, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	220d      	movs	r2, #13
 800372e:	f7ff fca1 	bl	8003074 <PlotPolarData>
						if (Distance > 60000)
 8003732:	e036      	b.n	80037a2 <main+0x2c6>
						}
						else
						{
							Distance = Distance + OffsetCal[Sensor*13 + Zone];
 8003734:	2316      	movs	r3, #22
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	0013      	movs	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	189b      	adds	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	189a      	adds	r2, r3, r2
 8003744:	2317      	movs	r3, #23
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	18d2      	adds	r2, r2, r3
 800374c:	4b47      	ldr	r3, [pc, #284]	@ (800386c <main+0x390>)
 800374e:	0052      	lsls	r2, r2, #1
 8003750:	5ed3      	ldrsh	r3, [r2, r3]
 8003752:	b29a      	uxth	r2, r3
 8003754:	4b42      	ldr	r3, [pc, #264]	@ (8003860 <main+0x384>)
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	18d3      	adds	r3, r2, r3
 800375a:	b29a      	uxth	r2, r3
 800375c:	4b40      	ldr	r3, [pc, #256]	@ (8003860 <main+0x384>)
 800375e:	801a      	strh	r2, [r3, #0]
							if (Distance > 60000)
 8003760:	4b3f      	ldr	r3, [pc, #252]	@ (8003860 <main+0x384>)
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	4a40      	ldr	r2, [pc, #256]	@ (8003868 <main+0x38c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d902      	bls.n	8003770 <main+0x294>
							{
								Distance = 0;
 800376a:	4b3d      	ldr	r3, [pc, #244]	@ (8003860 <main+0x384>)
 800376c:	2200      	movs	r2, #0
 800376e:	801a      	strh	r2, [r3, #0]
							}
							PlotPolarData(Sensor, Zone, 13, Distance);
 8003770:	4b3b      	ldr	r3, [pc, #236]	@ (8003860 <main+0x384>)
 8003772:	881a      	ldrh	r2, [r3, #0]
 8003774:	2317      	movs	r3, #23
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	7819      	ldrb	r1, [r3, #0]
 800377a:	2316      	movs	r3, #22
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	7818      	ldrb	r0, [r3, #0]
 8003780:	0013      	movs	r3, r2
 8003782:	220d      	movs	r2, #13
 8003784:	f7ff fc76 	bl	8003074 <PlotPolarData>
						if (Distance > 60000)
 8003788:	e00b      	b.n	80037a2 <main+0x2c6>
						}
					}
					else
					{
						PlotPolarData(Sensor, Zone, 13, 4000);
 800378a:	23fa      	movs	r3, #250	@ 0xfa
 800378c:	011a      	lsls	r2, r3, #4
 800378e:	2317      	movs	r3, #23
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	7819      	ldrb	r1, [r3, #0]
 8003794:	2316      	movs	r3, #22
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	7818      	ldrb	r0, [r3, #0]
 800379a:	0013      	movs	r3, r2
 800379c:	220d      	movs	r2, #13
 800379e:	f7ff fc69 	bl	8003074 <PlotPolarData>
			for (Sensor=0; Sensor < NumOfTOFSensors ; Sensor++)
 80037a2:	2116      	movs	r1, #22
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	781a      	ldrb	r2, [r3, #0]
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	3201      	adds	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	2316      	movs	r3, #22
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b0f      	cmp	r3, #15
 80037b6:	d800      	bhi.n	80037ba <main+0x2de>
 80037b8:	e6f1      	b.n	800359e <main+0xc2>
					}
				}
				}
			}
			toggleInactiveCaptors();
 80037ba:	f7ff f9d7 	bl	8002b6c <toggleInactiveCaptors>
			if(Timeout != 1){
 80037be:	2315      	movs	r3, #21
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d00f      	beq.n	80037e8 <main+0x30c>
				TimeEnd = HAL_GetTick();;
 80037c8:	f000 fe9c 	bl	8004504 <HAL_GetTick>
 80037cc:	0003      	movs	r3, r0
 80037ce:	60fb      	str	r3, [r7, #12]
				TotalTime = (TimeEnd - TimeStart);
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	60bb      	str	r3, [r7, #8]
				SendOneROIMesurement(TotalTime, Zone);
 80037d8:	2317      	movs	r3, #23
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	0011      	movs	r1, r2
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7ff fe60 	bl	80034a8 <SendOneROIMesurement>
		for(Zone = 0; Zone < NumOfZonesPerSensor; Zone++)
 80037e8:	2117      	movs	r1, #23
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	3201      	adds	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	2317      	movs	r3, #23
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d800      	bhi.n	8003800 <main+0x324>
 80037fe:	e69b      	b.n	8003538 <main+0x5c>
			}
		}
		if (Timeout == 1)
 8003800:	2415      	movs	r4, #21
 8003802:	193b      	adds	r3, r7, r4
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d105      	bne.n	8003816 <main+0x33a>
		{
			ResetAndInitializeAllSensors();
 800380a:	f7ff fafb 	bl	8002e04 <ResetAndInitializeAllSensors>
			Timeout = 0;
 800380e:	193b      	adds	r3, r7, r4
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00c      	b.n	8003830 <main+0x354>
			//UART_Print("Reset Performed\n");
		}
		else
		{
			HAL_Delay(TimingBudget);
 8003816:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <main+0x37c>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	0018      	movs	r0, r3
 800381c:	f000 fe7c 	bl	8004518 <HAL_Delay>
			TimeEnd = HAL_GetTick();;
 8003820:	f000 fe70 	bl	8004504 <HAL_GetTick>
 8003824:	0003      	movs	r3, r0
 8003826:	60fb      	str	r3, [r7, #12]
			TotalTime = (TimeEnd - TimeStart);
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	60bb      	str	r3, [r7, #8]
			//snprintf(BigBuff, sizeof(BigBuff), "Time: %ld\n", TotalTime);
			//UART_Print(BigBuff);
			//SendAllMesurements(TotalTime);
		}
		if (error !=0)
 8003830:	231f      	movs	r3, #31
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b25b      	sxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d100      	bne.n	800383e <main+0x362>
 800383c:	e66b      	b.n	8003516 <main+0x3a>
		{
			UART_Print("Some Errors seen\n");
 800383e:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <main+0x394>)
 8003840:	0018      	movs	r0, r3
 8003842:	f004 fdd9 	bl	80083f8 <UART_Print>
	  	error = 0;
 8003846:	e666      	b.n	8003516 <main+0x3a>
 8003848:	20000298 	.word	0x20000298
 800384c:	2000004a 	.word	0x2000004a
 8003850:	20000004 	.word	0x20000004
 8003854:	20000024 	.word	0x20000024
 8003858:	20000048 	.word	0x20000048
 800385c:	20000854 	.word	0x20000854
 8003860:	20000b94 	.word	0x20000b94
 8003864:	20000b96 	.word	0x20000b96
 8003868:	0000ea60 	.word	0x0000ea60
 800386c:	20000b98 	.word	0x20000b98
 8003870:	0800cbe8 	.word	0x0800cbe8

08003874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b093      	sub	sp, #76	@ 0x4c
 8003878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800387a:	2414      	movs	r4, #20
 800387c:	193b      	adds	r3, r7, r4
 800387e:	0018      	movs	r0, r3
 8003880:	2334      	movs	r3, #52	@ 0x34
 8003882:	001a      	movs	r2, r3
 8003884:	2100      	movs	r1, #0
 8003886:	f005 fb3f 	bl	8008f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	0018      	movs	r0, r3
 800388e:	2310      	movs	r3, #16
 8003890:	001a      	movs	r2, r3
 8003892:	2100      	movs	r1, #0
 8003894:	f005 fb38 	bl	8008f08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	0018      	movs	r0, r3
 800389e:	f001 fec5 	bl	800562c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038a2:	193b      	adds	r3, r7, r4
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	2280      	movs	r2, #128	@ 0x80
 80038ac:	0252      	lsls	r2, r2, #9
 80038ae:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038b0:	0021      	movs	r1, r4
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	2202      	movs	r2, #2
 80038b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	2203      	movs	r2, #3
 80038bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	2200      	movs	r2, #0
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	2208      	movs	r2, #8
 80038c8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	2280      	movs	r2, #128	@ 0x80
 80038ce:	0292      	lsls	r2, r2, #10
 80038d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	2280      	movs	r2, #128	@ 0x80
 80038d6:	0592      	lsls	r2, r2, #22
 80038d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	0018      	movs	r0, r3
 80038de:	f001 fef1 	bl	80056c4 <HAL_RCC_OscConfig>
 80038e2:	1e03      	subs	r3, r0, #0
 80038e4:	d001      	beq.n	80038ea <SystemClock_Config+0x76>
  {
    Error_Handler();
 80038e6:	f000 f9af 	bl	8003c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	2207      	movs	r2, #7
 80038ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	2202      	movs	r2, #2
 80038f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038f6:	1d3b      	adds	r3, r7, #4
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	2102      	movs	r1, #2
 8003906:	0018      	movs	r0, r3
 8003908:	f002 f9ec 	bl	8005ce4 <HAL_RCC_ClockConfig>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d001      	beq.n	8003914 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003910:	f000 f99a 	bl	8003c48 <Error_Handler>
  }
}
 8003914:	46c0      	nop			@ (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	b013      	add	sp, #76	@ 0x4c
 800391a:	bd90      	pop	{r4, r7, pc}

0800391c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003920:	4b1c      	ldr	r3, [pc, #112]	@ (8003994 <MX_I2C1_Init+0x78>)
 8003922:	4a1d      	ldr	r2, [pc, #116]	@ (8003998 <MX_I2C1_Init+0x7c>)
 8003924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8003926:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <MX_I2C1_Init+0x78>)
 8003928:	4a1c      	ldr	r2, [pc, #112]	@ (800399c <MX_I2C1_Init+0x80>)
 800392a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800392c:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <MX_I2C1_Init+0x78>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003932:	4b18      	ldr	r3, [pc, #96]	@ (8003994 <MX_I2C1_Init+0x78>)
 8003934:	2201      	movs	r2, #1
 8003936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003938:	4b16      	ldr	r3, [pc, #88]	@ (8003994 <MX_I2C1_Init+0x78>)
 800393a:	2200      	movs	r2, #0
 800393c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800393e:	4b15      	ldr	r3, [pc, #84]	@ (8003994 <MX_I2C1_Init+0x78>)
 8003940:	2200      	movs	r2, #0
 8003942:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003944:	4b13      	ldr	r3, [pc, #76]	@ (8003994 <MX_I2C1_Init+0x78>)
 8003946:	2200      	movs	r2, #0
 8003948:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800394a:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <MX_I2C1_Init+0x78>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003950:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <MX_I2C1_Init+0x78>)
 8003952:	2200      	movs	r2, #0
 8003954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003956:	4b0f      	ldr	r3, [pc, #60]	@ (8003994 <MX_I2C1_Init+0x78>)
 8003958:	0018      	movs	r0, r3
 800395a:	f001 f891 	bl	8004a80 <HAL_I2C_Init>
 800395e:	1e03      	subs	r3, r0, #0
 8003960:	d001      	beq.n	8003966 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003962:	f000 f971 	bl	8003c48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003966:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <MX_I2C1_Init+0x78>)
 8003968:	2100      	movs	r1, #0
 800396a:	0018      	movs	r0, r3
 800396c:	f001 fdc6 	bl	80054fc <HAL_I2CEx_ConfigAnalogFilter>
 8003970:	1e03      	subs	r3, r0, #0
 8003972:	d001      	beq.n	8003978 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003974:	f000 f968 	bl	8003c48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003978:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <MX_I2C1_Init+0x78>)
 800397a:	2100      	movs	r1, #0
 800397c:	0018      	movs	r0, r3
 800397e:	f001 fe09 	bl	8005594 <HAL_I2CEx_ConfigDigitalFilter>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d001      	beq.n	800398a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003986:	f000 f95f 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  I2C_Init();
 800398a:	f004 fc8d 	bl	80082a8 <I2C_Init>
  /* USER CODE END I2C1_Init 2 */

}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	2000024c 	.word	0x2000024c
 8003998:	40005400 	.word	0x40005400
 800399c:	00602173 	.word	0x00602173

080039a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	0018      	movs	r0, r3
 80039aa:	230c      	movs	r3, #12
 80039ac:	001a      	movs	r2, r3
 80039ae:	2100      	movs	r1, #0
 80039b0:	f005 faaa 	bl	8008f08 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80039b4:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <MX_TIM6_Init+0x6c>)
 80039b6:	4a16      	ldr	r2, [pc, #88]	@ (8003a10 <MX_TIM6_Init+0x70>)
 80039b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 80039ba:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <MX_TIM6_Init+0x6c>)
 80039bc:	4a15      	ldr	r2, [pc, #84]	@ (8003a14 <MX_TIM6_Init+0x74>)
 80039be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <MX_TIM6_Init+0x6c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80039c6:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <MX_TIM6_Init+0x6c>)
 80039c8:	4a13      	ldr	r2, [pc, #76]	@ (8003a18 <MX_TIM6_Init+0x78>)
 80039ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039cc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <MX_TIM6_Init+0x6c>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80039d2:	4b0e      	ldr	r3, [pc, #56]	@ (8003a0c <MX_TIM6_Init+0x6c>)
 80039d4:	0018      	movs	r0, r3
 80039d6:	f002 fc61 	bl	800629c <HAL_TIM_Base_Init>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80039de:	f000 f933 	bl	8003c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80039ee:	1d3a      	adds	r2, r7, #4
 80039f0:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <MX_TIM6_Init+0x6c>)
 80039f2:	0011      	movs	r1, r2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f002 fecf 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d001      	beq.n	8003a02 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80039fe:	f000 f923 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	20000298 	.word	0x20000298
 8003a10:	40001000 	.word	0x40001000
 8003a14:	00000f9f 	.word	0x00000f9f
 8003a18:	0000ffff 	.word	0x0000ffff

08003a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a20:	4b28      	ldr	r3, [pc, #160]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a22:	4a29      	ldr	r2, [pc, #164]	@ (8003ac8 <MX_USART2_UART_Init+0xac>)
 8003a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a26:	4b27      	ldr	r3, [pc, #156]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a28:	22e1      	movs	r2, #225	@ 0xe1
 8003a2a:	0252      	lsls	r2, r2, #9
 8003a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a2e:	4b25      	ldr	r3, [pc, #148]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a34:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a3a:	4b22      	ldr	r3, [pc, #136]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a40:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a42:	220c      	movs	r2, #12
 8003a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a46:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a52:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003a5e:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a60:	2230      	movs	r2, #48	@ 0x30
 8003a62:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003a64:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a66:	2280      	movs	r2, #128	@ 0x80
 8003a68:	0152      	lsls	r2, r2, #5
 8003a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003a6c:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a6e:	2280      	movs	r2, #128	@ 0x80
 8003a70:	0192      	lsls	r2, r2, #6
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a74:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a76:	0018      	movs	r0, r3
 8003a78:	f002 ff0e 	bl	8006898 <HAL_UART_Init>
 8003a7c:	1e03      	subs	r3, r0, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8003a80:	f000 f8e2 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a86:	2100      	movs	r1, #0
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f003 fbab 	bl	80071e4 <HAL_UARTEx_SetTxFifoThreshold>
 8003a8e:	1e03      	subs	r3, r0, #0
 8003a90:	d001      	beq.n	8003a96 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8003a92:	f000 f8d9 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003a98:	2100      	movs	r1, #0
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f003 fbe2 	bl	8007264 <HAL_UARTEx_SetRxFifoThreshold>
 8003aa0:	1e03      	subs	r3, r0, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003aa4:	f000 f8d0 	bl	8003c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <MX_USART2_UART_Init+0xa8>)
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f003 fb60 	bl	8007170 <HAL_UARTEx_DisableFifoMode>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_USART2_UART_Init+0x9c>
  {
    Error_Handler();
 8003ab4:	f000 f8c8 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  UART_Init();
 8003ab8:	f004 fc3c 	bl	8008334 <UART_Init>
  /* USER CODE END USART2_Init 2 */

}
 8003abc:	46c0      	nop			@ (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	200002e4 	.word	0x200002e4
 8003ac8:	40004400 	.word	0x40004400

08003acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b08b      	sub	sp, #44	@ 0x2c
 8003ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad2:	2414      	movs	r4, #20
 8003ad4:	193b      	adds	r3, r7, r4
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	2314      	movs	r3, #20
 8003ada:	001a      	movs	r2, r3
 8003adc:	2100      	movs	r1, #0
 8003ade:	f005 fa13 	bl	8008f08 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae2:	4b52      	ldr	r3, [pc, #328]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae6:	4b51      	ldr	r3, [pc, #324]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003ae8:	2104      	movs	r1, #4
 8003aea:	430a      	orrs	r2, r1
 8003aec:	635a      	str	r2, [r3, #52]	@ 0x34
 8003aee:	4b4f      	ldr	r3, [pc, #316]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af2:	2204      	movs	r2, #4
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003afa:	4b4c      	ldr	r3, [pc, #304]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003afe:	4b4b      	ldr	r3, [pc, #300]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b00:	2120      	movs	r1, #32
 8003b02:	430a      	orrs	r2, r1
 8003b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b06:	4b49      	ldr	r3, [pc, #292]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b12:	4b46      	ldr	r3, [pc, #280]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b16:	4b45      	ldr	r3, [pc, #276]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b18:	2101      	movs	r1, #1
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b1e:	4b43      	ldr	r3, [pc, #268]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b22:	2201      	movs	r2, #1
 8003b24:	4013      	ands	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2a:	4b40      	ldr	r3, [pc, #256]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b30:	2102      	movs	r1, #2
 8003b32:	430a      	orrs	r2, r1
 8003b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b36:	4b3d      	ldr	r3, [pc, #244]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b42:	4b3a      	ldr	r3, [pc, #232]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b46:	4b39      	ldr	r3, [pc, #228]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b48:	2108      	movs	r1, #8
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b4e:	4b37      	ldr	r3, [pc, #220]	@ (8003c2c <MX_GPIO_Init+0x160>)
 8003b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b52:	2208      	movs	r2, #8
 8003b54:	4013      	ands	r3, r2
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 8003b5a:	4935      	ldr	r1, [pc, #212]	@ (8003c30 <MX_GPIO_Init+0x164>)
 8003b5c:	4b35      	ldr	r3, [pc, #212]	@ (8003c34 <MX_GPIO_Init+0x168>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 ff55 	bl	8004a10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8003b66:	4934      	ldr	r1, [pc, #208]	@ (8003c38 <MX_GPIO_Init+0x16c>)
 8003b68:	23a0      	movs	r3, #160	@ 0xa0
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 ff4e 	bl	8004a10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8003b74:	4931      	ldr	r1, [pc, #196]	@ (8003c3c <MX_GPIO_Init+0x170>)
 8003b76:	4b32      	ldr	r3, [pc, #200]	@ (8003c40 <MX_GPIO_Init+0x174>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f000 ff48 	bl	8004a10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003b80:	230e      	movs	r3, #14
 8003b82:	33ff      	adds	r3, #255	@ 0xff
 8003b84:	482f      	ldr	r0, [pc, #188]	@ (8003c44 <MX_GPIO_Init+0x178>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	0019      	movs	r1, r3
 8003b8a:	f000 ff41 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC12 PC13 PC15 PC0
                           PC2 PC3 PC4 PC7
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	4a27      	ldr	r2, [pc, #156]	@ (8003c30 <MX_GPIO_Init+0x164>)
 8003b92:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b94:	193b      	adds	r3, r7, r4
 8003b96:	2201      	movs	r2, #1
 8003b98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	193b      	adds	r3, r7, r4
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba0:	193b      	adds	r3, r7, r4
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	4a22      	ldr	r2, [pc, #136]	@ (8003c34 <MX_GPIO_Init+0x168>)
 8003baa:	0019      	movs	r1, r3
 8003bac:	0010      	movs	r0, r2
 8003bae:	f000 fdcb 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA7 PA8
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
 8003bb2:	193b      	adds	r3, r7, r4
 8003bb4:	4a20      	ldr	r2, [pc, #128]	@ (8003c38 <MX_GPIO_Init+0x16c>)
 8003bb6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb8:	193b      	adds	r3, r7, r4
 8003bba:	2201      	movs	r2, #1
 8003bbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	193b      	adds	r3, r7, r4
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc4:	193b      	adds	r3, r7, r4
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bca:	193a      	adds	r2, r7, r4
 8003bcc:	23a0      	movs	r3, #160	@ 0xa0
 8003bce:	05db      	lsls	r3, r3, #23
 8003bd0:	0011      	movs	r1, r2
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 fdb8 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB13 PB14 PB3 PB4
                           PB6 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	4a18      	ldr	r2, [pc, #96]	@ (8003c3c <MX_GPIO_Init+0x170>)
 8003bdc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bde:	193b      	adds	r3, r7, r4
 8003be0:	2201      	movs	r2, #1
 8003be2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	193b      	adds	r3, r7, r4
 8003be6:	2200      	movs	r2, #0
 8003be8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bea:	193b      	adds	r3, r7, r4
 8003bec:	2200      	movs	r2, #0
 8003bee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf0:	193b      	adds	r3, r7, r4
 8003bf2:	4a13      	ldr	r2, [pc, #76]	@ (8003c40 <MX_GPIO_Init+0x174>)
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	0010      	movs	r0, r2
 8003bf8:	f000 fda6 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD0 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8003bfc:	0021      	movs	r1, r4
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	220e      	movs	r2, #14
 8003c02:	32ff      	adds	r2, #255	@ 0xff
 8003c04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	2201      	movs	r2, #1
 8003c0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2200      	movs	r2, #0
 8003c16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c44 <MX_GPIO_Init+0x178>)
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	0010      	movs	r0, r2
 8003c20:	f000 fd92 	bl	8004748 <HAL_GPIO_Init>

}
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b00b      	add	sp, #44	@ 0x2c
 8003c2a:	bd90      	pop	{r4, r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	0000b69d 	.word	0x0000b69d
 8003c34:	50000800 	.word	0x50000800
 8003c38:	000099b0 	.word	0x000099b0
 8003c3c:	00006edb 	.word	0x00006edb
 8003c40:	50000400 	.word	0x50000400
 8003c44:	50000c00 	.word	0x50000c00

08003c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c4c:	b672      	cpsid	i
}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c50:	46c0      	nop			@ (mov r8, r8)
 8003c52:	e7fd      	b.n	8003c50 <Error_Handler+0x8>

08003c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c60:	2101      	movs	r1, #1
 8003c62:	430a      	orrs	r2, r1
 8003c64:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c78:	2180      	movs	r1, #128	@ 0x80
 8003c7a:	0549      	lsls	r1, r1, #21
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c80:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	055b      	lsls	r3, r3, #21
 8003c88:	4013      	ands	r3, r2
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003c8e:	23c0      	movs	r3, #192	@ 0xc0
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 fc64 	bl	8004560 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000

08003ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b091      	sub	sp, #68	@ 0x44
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cac:	232c      	movs	r3, #44	@ 0x2c
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	2314      	movs	r3, #20
 8003cb4:	001a      	movs	r2, r3
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f005 f926 	bl	8008f08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cbc:	2410      	movs	r4, #16
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	231c      	movs	r3, #28
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f005 f91e 	bl	8008f08 <memset>
  if(hi2c->Instance==I2C1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	@ (8003d60 <HAL_I2C_MspInit+0xbc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d13f      	bne.n	8003d56 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	2220      	movs	r2, #32
 8003cda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003cdc:	193b      	adds	r3, r7, r4
 8003cde:	2200      	movs	r2, #0
 8003ce0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ce2:	193b      	adds	r3, r7, r4
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f002 f9a5 	bl	8006034 <HAL_RCCEx_PeriphCLKConfig>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003cee:	f7ff ffab 	bl	8003c48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d64 <HAL_I2C_MspInit+0xc0>)
 8003cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_I2C_MspInit+0xc0>)
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cfe:	4b19      	ldr	r3, [pc, #100]	@ (8003d64 <HAL_I2C_MspInit+0xc0>)
 8003d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d02:	2201      	movs	r2, #1
 8003d04:	4013      	ands	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d0a:	212c      	movs	r1, #44	@ 0x2c
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	22c0      	movs	r2, #192	@ 0xc0
 8003d10:	00d2      	lsls	r2, r2, #3
 8003d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d14:	187b      	adds	r3, r7, r1
 8003d16:	2212      	movs	r2, #18
 8003d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	2206      	movs	r2, #6
 8003d2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2c:	187a      	adds	r2, r7, r1
 8003d2e:	23a0      	movs	r3, #160	@ 0xa0
 8003d30:	05db      	lsls	r3, r3, #23
 8003d32:	0011      	movs	r1, r2
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 fd07 	bl	8004748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <HAL_I2C_MspInit+0xc0>)
 8003d3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d3e:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_I2C_MspInit+0xc0>)
 8003d40:	2180      	movs	r1, #128	@ 0x80
 8003d42:	0389      	lsls	r1, r1, #14
 8003d44:	430a      	orrs	r2, r1
 8003d46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d48:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <HAL_I2C_MspInit+0xc0>)
 8003d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d4c:	2380      	movs	r3, #128	@ 0x80
 8003d4e:	039b      	lsls	r3, r3, #14
 8003d50:	4013      	ands	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b011      	add	sp, #68	@ 0x44
 8003d5c:	bd90      	pop	{r4, r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	40005400 	.word	0x40005400
 8003d64:	40021000 	.word	0x40021000

08003d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <HAL_TIM_Base_MspInit+0x44>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d113      	bne.n	8003da2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <HAL_TIM_Base_MspInit+0x48>)
 8003d7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <HAL_TIM_Base_MspInit+0x48>)
 8003d80:	2110      	movs	r1, #16
 8003d82:	430a      	orrs	r2, r1
 8003d84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d86:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <HAL_TIM_Base_MspInit+0x48>)
 8003d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2100      	movs	r1, #0
 8003d96:	2011      	movs	r0, #17
 8003d98:	f000 fca4 	bl	80046e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003d9c:	2011      	movs	r0, #17
 8003d9e:	f000 fcb6 	bl	800470e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	40001000 	.word	0x40001000
 8003db0:	40021000 	.word	0x40021000

08003db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b091      	sub	sp, #68	@ 0x44
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbc:	232c      	movs	r3, #44	@ 0x2c
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	2314      	movs	r3, #20
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	f005 f89e 	bl	8008f08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dcc:	2410      	movs	r4, #16
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	231c      	movs	r3, #28
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f005 f896 	bl	8008f08 <memset>
  if(huart->Instance==USART2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <HAL_UART_MspInit+0xb8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d13d      	bne.n	8003e62 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003de6:	193b      	adds	r3, r7, r4
 8003de8:	2202      	movs	r2, #2
 8003dea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003dec:	193b      	adds	r3, r7, r4
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	0018      	movs	r0, r3
 8003df6:	f002 f91d 	bl	8006034 <HAL_RCCEx_PeriphCLKConfig>
 8003dfa:	1e03      	subs	r3, r0, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003dfe:	f7ff ff23 	bl	8003c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e02:	4b1b      	ldr	r3, [pc, #108]	@ (8003e70 <HAL_UART_MspInit+0xbc>)
 8003e04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e06:	4b1a      	ldr	r3, [pc, #104]	@ (8003e70 <HAL_UART_MspInit+0xbc>)
 8003e08:	2180      	movs	r1, #128	@ 0x80
 8003e0a:	0289      	lsls	r1, r1, #10
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e10:	4b17      	ldr	r3, [pc, #92]	@ (8003e70 <HAL_UART_MspInit+0xbc>)
 8003e12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e14:	2380      	movs	r3, #128	@ 0x80
 8003e16:	029b      	lsls	r3, r3, #10
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e1e:	4b14      	ldr	r3, [pc, #80]	@ (8003e70 <HAL_UART_MspInit+0xbc>)
 8003e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e22:	4b13      	ldr	r3, [pc, #76]	@ (8003e70 <HAL_UART_MspInit+0xbc>)
 8003e24:	2108      	movs	r1, #8
 8003e26:	430a      	orrs	r2, r1
 8003e28:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e2a:	4b11      	ldr	r3, [pc, #68]	@ (8003e70 <HAL_UART_MspInit+0xbc>)
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2e:	2208      	movs	r2, #8
 8003e30:	4013      	ands	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e36:	212c      	movs	r1, #44	@ 0x2c
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	2260      	movs	r2, #96	@ 0x60
 8003e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	2202      	movs	r2, #2
 8003e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	187b      	adds	r3, r7, r1
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4a:	187b      	adds	r3, r7, r1
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8003e50:	187b      	adds	r3, r7, r1
 8003e52:	2200      	movs	r2, #0
 8003e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	4a06      	ldr	r2, [pc, #24]	@ (8003e74 <HAL_UART_MspInit+0xc0>)
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	0010      	movs	r0, r2
 8003e5e:	f000 fc73 	bl	8004748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b011      	add	sp, #68	@ 0x44
 8003e68:	bd90      	pop	{r4, r7, pc}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	40004400 	.word	0x40004400
 8003e70:	40021000 	.word	0x40021000
 8003e74:	50000c00 	.word	0x50000c00

08003e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e7c:	46c0      	nop			@ (mov r8, r8)
 8003e7e:	e7fd      	b.n	8003e7c <NMI_Handler+0x4>

08003e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e84:	46c0      	nop			@ (mov r8, r8)
 8003e86:	e7fd      	b.n	8003e84 <HardFault_Handler+0x4>

08003e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e8c:	46c0      	nop			@ (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ea0:	f000 fb1e 	bl	80044e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003eb0:	4b03      	ldr	r3, [pc, #12]	@ (8003ec0 <TIM6_IRQHandler+0x14>)
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f002 faa0 	bl	80063f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003eb8:	46c0      	nop			@ (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	20000298 	.word	0x20000298

08003ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
	return 1;
 8003ec8:	2301      	movs	r3, #1
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_kill>:

int _kill(int pid, int sig)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003eda:	f005 f86f 	bl	8008fbc <__errno>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	2216      	movs	r2, #22
 8003ee2:	601a      	str	r2, [r3, #0]
	return -1;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	425b      	negs	r3, r3
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b002      	add	sp, #8
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_exit>:

void _exit (int status)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ef8:	2301      	movs	r3, #1
 8003efa:	425a      	negs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0011      	movs	r1, r2
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7ff ffe5 	bl	8003ed0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	e7fd      	b.n	8003f06 <_exit+0x16>

08003f0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e00a      	b.n	8003f32 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f1c:	e000      	b.n	8003f20 <_read+0x16>
 8003f1e:	bf00      	nop
 8003f20:	0001      	movs	r1, r0
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	60ba      	str	r2, [r7, #8]
 8003f28:	b2ca      	uxtb	r2, r1
 8003f2a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	dbf0      	blt.n	8003f1c <_read+0x12>
	}

return len;
 8003f3a:	687b      	ldr	r3, [r7, #4]
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b006      	add	sp, #24
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e009      	b.n	8003f6a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	60ba      	str	r2, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	e000      	b.n	8003f64 <_write+0x20>
 8003f62:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3301      	adds	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	dbf1      	blt.n	8003f56 <_write+0x12>
	}
	return len;
 8003f72:	687b      	ldr	r3, [r7, #4]
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b006      	add	sp, #24
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_close>:

int _close(int file)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	return -1;
 8003f84:	2301      	movs	r3, #1
 8003f86:	425b      	negs	r3, r3
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b002      	add	sp, #8
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2280      	movs	r2, #128	@ 0x80
 8003f9e:	0192      	lsls	r2, r2, #6
 8003fa0:	605a      	str	r2, [r3, #4]
	return 0;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_isatty>:

int _isatty(int file)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	return 1;
 8003fb4:	2301      	movs	r3, #1
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
	return 0;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fdc:	4a14      	ldr	r2, [pc, #80]	@ (8004030 <_sbrk+0x5c>)
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <_sbrk+0x60>)
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fe8:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <_sbrk+0x64>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ff0:	4b11      	ldr	r3, [pc, #68]	@ (8004038 <_sbrk+0x64>)
 8003ff2:	4a12      	ldr	r2, [pc, #72]	@ (800403c <_sbrk+0x68>)
 8003ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ff6:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <_sbrk+0x64>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	18d3      	adds	r3, r2, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	429a      	cmp	r2, r3
 8004002:	d207      	bcs.n	8004014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004004:	f004 ffda 	bl	8008fbc <__errno>
 8004008:	0003      	movs	r3, r0
 800400a:	220c      	movs	r2, #12
 800400c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800400e:	2301      	movs	r3, #1
 8004010:	425b      	negs	r3, r3
 8004012:	e009      	b.n	8004028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004014:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <_sbrk+0x64>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800401a:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <_sbrk+0x64>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	18d2      	adds	r2, r2, r3
 8004022:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <_sbrk+0x64>)
 8004024:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b006      	add	sp, #24
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20009000 	.word	0x20009000
 8004034:	00000400 	.word	0x00000400
 8004038:	20000d48 	.word	0x20000d48
 800403c:	20000fb0 	.word	0x20000fb0

08004040 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004044:	46c0      	nop			@ (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <UART_Send_Mesures>:

extern uint32_t refreshTime;

uint8_t listOfMesures[3*NumOfTOFSensors + 1]={0};

void UART_Send_Mesures(uint16_t * mesuredDistances , uint8_t Zone,  uint32_t TotalTime){
 800404c:	b590      	push	{r4, r7, lr}
 800404e:	b08b      	sub	sp, #44	@ 0x2c
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	230b      	movs	r3, #11
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	1c0a      	adds	r2, r1, #0
 800405c:	701a      	strb	r2, [r3, #0]
	uint8_t openCloseBuf[4] = {0xFF,0xFF, 0xFF};
 800405e:	2314      	movs	r3, #20
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	4a43      	ldr	r2, [pc, #268]	@ (8004170 <UART_Send_Mesures+0x124>)
 8004064:	601a      	str	r2, [r3, #0]

	uint8_t NcaptActifs = 0;
 8004066:	2327      	movs	r3, #39	@ 0x27
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i =0;i<16;i++){
 800406e:	2326      	movs	r3, #38	@ 0x26
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e016      	b.n	80040a6 <UART_Send_Mesures+0x5a>
		NcaptActifs += (ActiveCaptors & (1<<i)) ? 1 : 0;
 8004078:	4b3e      	ldr	r3, [pc, #248]	@ (8004174 <UART_Send_Mesures+0x128>)
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	001a      	movs	r2, r3
 800407e:	2026      	movs	r0, #38	@ 0x26
 8004080:	183b      	adds	r3, r7, r0
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	411a      	asrs	r2, r3
 8004086:	0013      	movs	r3, r2
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2201      	movs	r2, #1
 800408c:	4013      	ands	r3, r2
 800408e:	b2d9      	uxtb	r1, r3
 8004090:	2227      	movs	r2, #39	@ 0x27
 8004092:	18bb      	adds	r3, r7, r2
 8004094:	18ba      	adds	r2, r7, r2
 8004096:	7812      	ldrb	r2, [r2, #0]
 8004098:	188a      	adds	r2, r1, r2
 800409a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i =0;i<16;i++){
 800409c:	183b      	adds	r3, r7, r0
 800409e:	781a      	ldrb	r2, [r3, #0]
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	3201      	adds	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	2326      	movs	r3, #38	@ 0x26
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b0f      	cmp	r3, #15
 80040ae:	d9e3      	bls.n	8004078 <UART_Send_Mesures+0x2c>




	uint8_t * mesures;
	if(Zone == NumOfZonesPerSensor + 1){
 80040b0:	230b      	movs	r3, #11
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b0e      	cmp	r3, #14
 80040b8:	d106      	bne.n	80040c8 <UART_Send_Mesures+0x7c>
		mesures = UART_makeList(mesuredDistances);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	0018      	movs	r0, r3
 80040be:	f000 f85f 	bl	8004180 <UART_makeList>
 80040c2:	0003      	movs	r3, r0
 80040c4:	623b      	str	r3, [r7, #32]
 80040c6:	e009      	b.n	80040dc <UART_Send_Mesures+0x90>
	}
	else{
		mesures = UART_monoROIList( mesuredDistances, Zone);
 80040c8:	230b      	movs	r3, #11
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	781a      	ldrb	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f90a 	bl	80042ec <UART_monoROIList>
 80040d8:	0003      	movs	r3, r0
 80040da:	623b      	str	r3, [r7, #32]
	}
	uint16_t NbreMesures = listOfMesures[0];
 80040dc:	4b26      	ldr	r3, [pc, #152]	@ (8004178 <UART_Send_Mesures+0x12c>)
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	211a      	movs	r1, #26
 80040e2:	187b      	adds	r3, r7, r1
 80040e4:	801a      	strh	r2, [r3, #0]

	uint8_t batchStats[3] = {NcaptActifs, (uint8_t)NumOfZonesPerSensor, (uint8_t)NbreMesures};
 80040e6:	2410      	movs	r4, #16
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	2227      	movs	r2, #39	@ 0x27
 80040ec:	18ba      	adds	r2, r7, r2
 80040ee:	7812      	ldrb	r2, [r2, #0]
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	193b      	adds	r3, r7, r4
 80040f4:	220d      	movs	r2, #13
 80040f6:	705a      	strb	r2, [r3, #1]
 80040f8:	187b      	adds	r3, r7, r1
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	193b      	adds	r3, r7, r4
 8004100:	709a      	strb	r2, [r3, #2]
	 A = mesures[1];

	 A = mesures[2];*/

	// 0xFF		0xFF					0xFF
	HAL_UART_Transmit(&SERIAL_UART, openCloseBuf, 3, HAL_MAX_DELAY);
 8004102:	2301      	movs	r3, #1
 8004104:	425b      	negs	r3, r3
 8004106:	2214      	movs	r2, #20
 8004108:	18b9      	adds	r1, r7, r2
 800410a:	481c      	ldr	r0, [pc, #112]	@ (800417c <UART_Send_Mesures+0x130>)
 800410c:	2203      	movs	r2, #3
 800410e:	f002 fc19 	bl	8006944 <HAL_UART_Transmit>
	//HAL_Delay(5);

	// Ncapteurs	Nbre de zones utilisees	Distance min
	HAL_UART_Transmit(&SERIAL_UART, batchStats, 3, HAL_MAX_DELAY);
 8004112:	2301      	movs	r3, #1
 8004114:	425b      	negs	r3, r3
 8004116:	1939      	adds	r1, r7, r4
 8004118:	4818      	ldr	r0, [pc, #96]	@ (800417c <UART_Send_Mesures+0x130>)
 800411a:	2203      	movs	r2, #3
 800411c:	f002 fc12 	bl	8006944 <HAL_UART_Transmit>
	//HAL_Delay(5);

	// Capteur Zone i	Distance i (part1)	Distance i (part2)
	for(int j=0;j<NbreMesures;j++){
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	e012      	b.n	800414c <UART_Send_Mesures+0x100>
	HAL_UART_Transmit(&SERIAL_UART,  &listOfMesures[3*j+1], 3, HAL_MAX_DELAY);
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	0013      	movs	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	189b      	adds	r3, r3, r2
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <UART_Send_Mesures+0x12c>)
 8004132:	18d1      	adds	r1, r2, r3
 8004134:	2301      	movs	r3, #1
 8004136:	425b      	negs	r3, r3
 8004138:	4810      	ldr	r0, [pc, #64]	@ (800417c <UART_Send_Mesures+0x130>)
 800413a:	2203      	movs	r2, #3
 800413c:	f002 fc02 	bl	8006944 <HAL_UART_Transmit>
	mesures+=3;
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	3303      	adds	r3, #3
 8004144:	623b      	str	r3, [r7, #32]
	for(int j=0;j<NbreMesures;j++){
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3301      	adds	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	231a      	movs	r3, #26
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	429a      	cmp	r2, r3
 8004156:	dbe6      	blt.n	8004126 <UART_Send_Mesures+0xda>
	//HAL_Delay(5);
	}

	// 0xFF		0xFF					0xFF
	HAL_UART_Transmit(&SERIAL_UART, openCloseBuf, 3, HAL_MAX_DELAY);
 8004158:	2301      	movs	r3, #1
 800415a:	425b      	negs	r3, r3
 800415c:	2214      	movs	r2, #20
 800415e:	18b9      	adds	r1, r7, r2
 8004160:	4806      	ldr	r0, [pc, #24]	@ (800417c <UART_Send_Mesures+0x130>)
 8004162:	2203      	movs	r2, #3
 8004164:	f002 fbee 	bl	8006944 <HAL_UART_Transmit>
	//HAL_Delay(5);

}
 8004168:	46c0      	nop			@ (mov r8, r8)
 800416a:	46bd      	mov	sp, r7
 800416c:	b00b      	add	sp, #44	@ 0x2c
 800416e:	bd90      	pop	{r4, r7, pc}
 8004170:	00ffffff 	.word	0x00ffffff
 8004174:	2000004a 	.word	0x2000004a
 8004178:	20000d4c 	.word	0x20000d4c
 800417c:	20000dd0 	.word	0x20000dd0

08004180 <UART_makeList>:

uint8_t * UART_makeList(uint16_t * LidarDistance){
 8004180:	b5b0      	push	{r4, r5, r7, lr}
 8004182:	4c56      	ldr	r4, [pc, #344]	@ (80042dc <UART_makeList+0x15c>)
 8004184:	44a5      	add	sp, r4
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
	uint8_t listOfMesures[3*NumOfZonesPerSensor*NumOfTOFSensors + 1];
	int ZonePosition;
	int Nmesure = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	22a3      	movs	r2, #163	@ 0xa3
 800418e:	0092      	lsls	r2, r2, #2
 8004190:	18ba      	adds	r2, r7, r2
 8004192:	6013      	str	r3, [r2, #0]

	for(int CurrentSensor = 0; CurrentSensor<16; CurrentSensor++){
 8004194:	2300      	movs	r3, #0
 8004196:	22a2      	movs	r2, #162	@ 0xa2
 8004198:	0092      	lsls	r2, r2, #2
 800419a:	18ba      	adds	r2, r7, r2
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e07c      	b.n	800429a <UART_makeList+0x11a>
		if(ActiveCaptors & (1<<CurrentSensor)){
 80041a0:	4b4f      	ldr	r3, [pc, #316]	@ (80042e0 <UART_makeList+0x160>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	001a      	movs	r2, r3
 80041a6:	23a2      	movs	r3, #162	@ 0xa2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	411a      	asrs	r2, r3
 80041b0:	0013      	movs	r3, r2
 80041b2:	2201      	movs	r2, #1
 80041b4:	4013      	ands	r3, r2
 80041b6:	d069      	beq.n	800428c <UART_makeList+0x10c>

			for(int CurrentZone = 0; CurrentZone<NumOfZonesPerSensor; CurrentZone++){
 80041b8:	2300      	movs	r3, #0
 80041ba:	22a1      	movs	r2, #161	@ 0xa1
 80041bc:	0092      	lsls	r2, r2, #2
 80041be:	18ba      	adds	r2, r7, r2
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e05d      	b.n	8004280 <UART_makeList+0x100>

				ZonePosition = NumOfZonesPerSensor*CurrentSensor + CurrentZone;
 80041c4:	23a2      	movs	r3, #162	@ 0xa2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	0013      	movs	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	189b      	adds	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	22a1      	movs	r2, #161	@ 0xa1
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	18ba      	adds	r2, r7, r2
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	18d3      	adds	r3, r2, r3
 80041e0:	209f      	movs	r0, #159	@ 0x9f
 80041e2:	0080      	lsls	r0, r0, #2
 80041e4:	183a      	adds	r2, r7, r0
 80041e6:	6013      	str	r3, [r2, #0]

				if(LidarDistance[ZonePosition] < MaxInterestDistance){
 80041e8:	183b      	adds	r3, r7, r0
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	4a3b      	ldr	r2, [pc, #236]	@ (80042e4 <UART_makeList+0x164>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d83b      	bhi.n	8004272 <UART_makeList+0xf2>

					listOfMesures[3*Nmesure+1] 		= (uint8_t)(ZonePosition+1); //Pour que le premier element de la chaine de caracteres ne soit pas '\0'
 80041fa:	183b      	adds	r3, r7, r0
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	b2d9      	uxtb	r1, r3
 8004200:	24a3      	movs	r4, #163	@ 0xa3
 8004202:	00a4      	lsls	r4, r4, #2
 8004204:	193b      	adds	r3, r7, r4
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	0013      	movs	r3, r2
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	189b      	adds	r3, r3, r2
 800420e:	3301      	adds	r3, #1
 8004210:	1c4a      	adds	r2, r1, #1
 8004212:	b2d1      	uxtb	r1, r2
 8004214:	4a34      	ldr	r2, [pc, #208]	@ (80042e8 <UART_makeList+0x168>)
 8004216:	25a4      	movs	r5, #164	@ 0xa4
 8004218:	00ad      	lsls	r5, r5, #2
 800421a:	1952      	adds	r2, r2, r5
 800421c:	19d2      	adds	r2, r2, r7
 800421e:	54d1      	strb	r1, [r2, r3]
					listOfMesures[3*Nmesure + 1+1] 	= (uint8_t)((LidarDistance[ZonePosition] & 0xFF00)>>8); 	//Bits de poids forts de la mesure
 8004220:	183b      	adds	r3, r7, r0
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	18d3      	adds	r3, r2, r3
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	b299      	uxth	r1, r3
 8004230:	193b      	adds	r3, r7, r4
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	0013      	movs	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	189b      	adds	r3, r3, r2
 800423a:	3302      	adds	r3, #2
 800423c:	b2c9      	uxtb	r1, r1
 800423e:	4a2a      	ldr	r2, [pc, #168]	@ (80042e8 <UART_makeList+0x168>)
 8004240:	1952      	adds	r2, r2, r5
 8004242:	19d2      	adds	r2, r2, r7
 8004244:	54d1      	strb	r1, [r2, r3]
					listOfMesures[3*Nmesure + 2+1] 	= (uint8_t)(LidarDistance[ZonePosition] & 0xFF);			//Bits de poids faible de la mesure
 8004246:	183b      	adds	r3, r7, r0
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	18d3      	adds	r3, r2, r3
 8004250:	8819      	ldrh	r1, [r3, #0]
 8004252:	193b      	adds	r3, r7, r4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	0013      	movs	r3, r2
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	189b      	adds	r3, r3, r2
 800425e:	b2c9      	uxtb	r1, r1
 8004260:	4a21      	ldr	r2, [pc, #132]	@ (80042e8 <UART_makeList+0x168>)
 8004262:	1952      	adds	r2, r2, r5
 8004264:	19d2      	adds	r2, r2, r7
 8004266:	54d1      	strb	r1, [r2, r3]

					Nmesure++;
 8004268:	193b      	adds	r3, r7, r4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3301      	adds	r3, #1
 800426e:	193a      	adds	r2, r7, r4
 8004270:	6013      	str	r3, [r2, #0]
			for(int CurrentZone = 0; CurrentZone<NumOfZonesPerSensor; CurrentZone++){
 8004272:	22a1      	movs	r2, #161	@ 0xa1
 8004274:	0092      	lsls	r2, r2, #2
 8004276:	18bb      	adds	r3, r7, r2
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3301      	adds	r3, #1
 800427c:	18ba      	adds	r2, r7, r2
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	23a1      	movs	r3, #161	@ 0xa1
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b0c      	cmp	r3, #12
 800428a:	dd9b      	ble.n	80041c4 <UART_makeList+0x44>
	for(int CurrentSensor = 0; CurrentSensor<16; CurrentSensor++){
 800428c:	22a2      	movs	r2, #162	@ 0xa2
 800428e:	0092      	lsls	r2, r2, #2
 8004290:	18bb      	adds	r3, r7, r2
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3301      	adds	r3, #1
 8004296:	18ba      	adds	r2, r7, r2
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	23a2      	movs	r3, #162	@ 0xa2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b0f      	cmp	r3, #15
 80042a4:	dc00      	bgt.n	80042a8 <UART_makeList+0x128>
 80042a6:	e77b      	b.n	80041a0 <UART_makeList+0x20>
				}
			}
		}
	}
	listOfMesures[0] = Nmesure;
 80042a8:	23a3      	movs	r3, #163	@ 0xa3
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4b0d      	ldr	r3, [pc, #52]	@ (80042e8 <UART_makeList+0x168>)
 80042b4:	21a4      	movs	r1, #164	@ 0xa4
 80042b6:	0089      	lsls	r1, r1, #2
 80042b8:	185b      	adds	r3, r3, r1
 80042ba:	19db      	adds	r3, r3, r7
 80042bc:	701a      	strb	r2, [r3, #0]

	uint8_t * exitVar =listOfMesures;
 80042be:	2308      	movs	r3, #8
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	22a0      	movs	r2, #160	@ 0xa0
 80042c4:	0092      	lsls	r2, r2, #2
 80042c6:	18b9      	adds	r1, r7, r2
 80042c8:	600b      	str	r3, [r1, #0]

	return exitVar;
 80042ca:	18bb      	adds	r3, r7, r2
 80042cc:	681b      	ldr	r3, [r3, #0]
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	23a4      	movs	r3, #164	@ 0xa4
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	449d      	add	sp, r3
 80042d8:	bdb0      	pop	{r4, r5, r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	fffffd70 	.word	0xfffffd70
 80042e0:	2000004a 	.word	0x2000004a
 80042e4:	00001387 	.word	0x00001387
 80042e8:	fffffd78 	.word	0xfffffd78

080042ec <UART_monoROIList>:

uint8_t * UART_monoROIList(uint16_t * LidarDistance, uint8_t Zone){
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	000a      	movs	r2, r1
 80042f6:	1cfb      	adds	r3, r7, #3
 80042f8:	701a      	strb	r2, [r3, #0]

	int ZonePosition;
	int Nmesure = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]

	for(int CurrentSensor = 0; CurrentSensor<16; CurrentSensor++){
 80042fe:	2300      	movs	r3, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	e047      	b.n	8004394 <UART_monoROIList+0xa8>
		if(ActiveCaptors & (1<<CurrentSensor)){
 8004304:	4b29      	ldr	r3, [pc, #164]	@ (80043ac <UART_monoROIList+0xc0>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	001a      	movs	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	411a      	asrs	r2, r3
 800430e:	0013      	movs	r3, r2
 8004310:	2201      	movs	r2, #1
 8004312:	4013      	ands	r3, r2
 8004314:	d03b      	beq.n	800438e <UART_monoROIList+0xa2>

			/*for(int CurrentZone = 0; CurrentZone<NumOfZonesPerSensor; CurrentZone++){*/

				ZonePosition = NumOfZonesPerSensor*CurrentSensor + Zone;
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	0013      	movs	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	189b      	adds	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	189a      	adds	r2, r3, r2
 8004322:	1cfb      	adds	r3, r7, #3
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	18d3      	adds	r3, r2, r3
 8004328:	60bb      	str	r3, [r7, #8]

				if(LidarDistance[ZonePosition] < MaxInterestDistance){
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	18d3      	adds	r3, r2, r3
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	4a1e      	ldr	r2, [pc, #120]	@ (80043b0 <UART_monoROIList+0xc4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d829      	bhi.n	800438e <UART_monoROIList+0xa2>

					listOfMesures[3*Nmesure+1] 		= (uint8_t)(ZonePosition+1); //Pour que le premier element de la chaine de caracteres ne soit pas '\0'
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	b2d9      	uxtb	r1, r3
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	0013      	movs	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	189b      	adds	r3, r3, r2
 8004346:	3301      	adds	r3, #1
 8004348:	1c4a      	adds	r2, r1, #1
 800434a:	b2d1      	uxtb	r1, r2
 800434c:	4a19      	ldr	r2, [pc, #100]	@ (80043b4 <UART_monoROIList+0xc8>)
 800434e:	54d1      	strb	r1, [r2, r3]
					listOfMesures[3*Nmesure + 1+1] 	= (uint8_t)((LidarDistance[ZonePosition] & 0xFF00)>>8); 	//Bits de poids forts de la mesure
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	18d3      	adds	r3, r2, r3
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	b299      	uxth	r1, r3
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	0013      	movs	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	189b      	adds	r3, r3, r2
 8004366:	3302      	adds	r3, #2
 8004368:	b2c9      	uxtb	r1, r1
 800436a:	4a12      	ldr	r2, [pc, #72]	@ (80043b4 <UART_monoROIList+0xc8>)
 800436c:	54d1      	strb	r1, [r2, r3]
					listOfMesures[3*Nmesure + 2+1] 	= (uint8_t)(LidarDistance[ZonePosition] & 0xFF);			//Bits de poids faible de la mesure
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	18d3      	adds	r3, r2, r3
 8004376:	8819      	ldrh	r1, [r3, #0]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	0013      	movs	r3, r2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	189b      	adds	r3, r3, r2
 8004382:	b2c9      	uxtb	r1, r1
 8004384:	4a0b      	ldr	r2, [pc, #44]	@ (80043b4 <UART_monoROIList+0xc8>)
 8004386:	54d1      	strb	r1, [r2, r3]

					Nmesure++;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3301      	adds	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
	for(int CurrentSensor = 0; CurrentSensor<16; CurrentSensor++){
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3301      	adds	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	ddb4      	ble.n	8004304 <UART_monoROIList+0x18>
				}
			/*}*/
		}
	}
	listOfMesures[0] = Nmesure;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <UART_monoROIList+0xc8>)
 80043a0:	701a      	strb	r2, [r3, #0]

	uint8_t * exitVar;

	return exitVar;
 80043a2:	68fb      	ldr	r3, [r7, #12]
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b006      	add	sp, #24
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	2000004a 	.word	0x2000004a
 80043b0:	00001387 	.word	0x00001387
 80043b4:	20000d4c 	.word	0x20000d4c

080043b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043b8:	480d      	ldr	r0, [pc, #52]	@ (80043f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043bc:	f7ff fe40 	bl	8004040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043c0:	480c      	ldr	r0, [pc, #48]	@ (80043f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80043c2:	490d      	ldr	r1, [pc, #52]	@ (80043f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043c4:	4a0d      	ldr	r2, [pc, #52]	@ (80043fc <LoopForever+0xe>)
  movs r3, #0
 80043c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043c8:	e002      	b.n	80043d0 <LoopCopyDataInit>

080043ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ce:	3304      	adds	r3, #4

080043d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043d4:	d3f9      	bcc.n	80043ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043d8:	4c0a      	ldr	r4, [pc, #40]	@ (8004404 <LoopForever+0x16>)
  movs r3, #0
 80043da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043dc:	e001      	b.n	80043e2 <LoopFillZerobss>

080043de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043e0:	3204      	adds	r2, #4

080043e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043e4:	d3fb      	bcc.n	80043de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80043e6:	f004 fdef 	bl	8008fc8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80043ea:	f7ff f877 	bl	80034dc <main>

080043ee <LoopForever>:

LoopForever:
  b LoopForever
 80043ee:	e7fe      	b.n	80043ee <LoopForever>
  ldr   r0, =_estack
 80043f0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80043f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043f8:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80043fc:	0800d380 	.word	0x0800d380
  ldr r2, =_sbss
 8004400:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004404:	20000fac 	.word	0x20000fac

08004408 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004408:	e7fe      	b.n	8004408 <ADC1_IRQHandler>
	...

0800440c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004412:	1dfb      	adds	r3, r7, #7
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004418:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <HAL_Init+0x3c>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <HAL_Init+0x3c>)
 800441e:	2180      	movs	r1, #128	@ 0x80
 8004420:	0049      	lsls	r1, r1, #1
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004426:	2003      	movs	r0, #3
 8004428:	f000 f810 	bl	800444c <HAL_InitTick>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d003      	beq.n	8004438 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004430:	1dfb      	adds	r3, r7, #7
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	e001      	b.n	800443c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004438:	f7ff fc0c 	bl	8003c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800443c:	1dfb      	adds	r3, r7, #7
 800443e:	781b      	ldrb	r3, [r3, #0]
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	b002      	add	sp, #8
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40022000 	.word	0x40022000

0800444c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004454:	230f      	movs	r3, #15
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800445c:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <HAL_InitTick+0x88>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02b      	beq.n	80044bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004464:	4b1c      	ldr	r3, [pc, #112]	@ (80044d8 <HAL_InitTick+0x8c>)
 8004466:	681c      	ldr	r4, [r3, #0]
 8004468:	4b1a      	ldr	r3, [pc, #104]	@ (80044d4 <HAL_InitTick+0x88>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	0019      	movs	r1, r3
 800446e:	23fa      	movs	r3, #250	@ 0xfa
 8004470:	0098      	lsls	r0, r3, #2
 8004472:	f7fb fe61 	bl	8000138 <__udivsi3>
 8004476:	0003      	movs	r3, r0
 8004478:	0019      	movs	r1, r3
 800447a:	0020      	movs	r0, r4
 800447c:	f7fb fe5c 	bl	8000138 <__udivsi3>
 8004480:	0003      	movs	r3, r0
 8004482:	0018      	movs	r0, r3
 8004484:	f000 f953 	bl	800472e <HAL_SYSTICK_Config>
 8004488:	1e03      	subs	r3, r0, #0
 800448a:	d112      	bne.n	80044b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d80a      	bhi.n	80044a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	2301      	movs	r3, #1
 8004496:	425b      	negs	r3, r3
 8004498:	2200      	movs	r2, #0
 800449a:	0018      	movs	r0, r3
 800449c:	f000 f922 	bl	80046e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044a0:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <HAL_InitTick+0x90>)
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e00d      	b.n	80044c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80044a8:	230f      	movs	r3, #15
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	e008      	b.n	80044c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80044b2:	230f      	movs	r3, #15
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	e003      	b.n	80044c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044bc:	230f      	movs	r3, #15
 80044be:	18fb      	adds	r3, r7, r3
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80044c4:	230f      	movs	r3, #15
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	781b      	ldrb	r3, [r3, #0]
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b005      	add	sp, #20
 80044d0:	bd90      	pop	{r4, r7, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	20000054 	.word	0x20000054
 80044d8:	2000004c 	.word	0x2000004c
 80044dc:	20000050 	.word	0x20000050

080044e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044e4:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <HAL_IncTick+0x1c>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	001a      	movs	r2, r3
 80044ea:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <HAL_IncTick+0x20>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	18d2      	adds	r2, r2, r3
 80044f0:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <HAL_IncTick+0x20>)
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	46c0      	nop			@ (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	20000054 	.word	0x20000054
 8004500:	20000d80 	.word	0x20000d80

08004504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  return uwTick;
 8004508:	4b02      	ldr	r3, [pc, #8]	@ (8004514 <HAL_GetTick+0x10>)
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	20000d80 	.word	0x20000d80

08004518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004520:	f7ff fff0 	bl	8004504 <HAL_GetTick>
 8004524:	0003      	movs	r3, r0
 8004526:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	d005      	beq.n	800453e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004532:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <HAL_Delay+0x44>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	001a      	movs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	189b      	adds	r3, r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	f7ff ffe0 	bl	8004504 <HAL_GetTick>
 8004544:	0002      	movs	r2, r0
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	429a      	cmp	r2, r3
 800454e:	d8f7      	bhi.n	8004540 <HAL_Delay+0x28>
  {
  }
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	46bd      	mov	sp, r7
 8004556:	b004      	add	sp, #16
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	20000054 	.word	0x20000054

08004560 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004568:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a06      	ldr	r2, [pc, #24]	@ (8004588 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800456e:	4013      	ands	r3, r2
 8004570:	0019      	movs	r1, r3
 8004572:	4b04      	ldr	r3, [pc, #16]	@ (8004584 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]
}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	46bd      	mov	sp, r7
 800457e:	b002      	add	sp, #8
 8004580:	bd80      	pop	{r7, pc}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	40010000 	.word	0x40010000
 8004588:	fffff9ff 	.word	0xfffff9ff

0800458c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	0002      	movs	r2, r0
 8004594:	1dfb      	adds	r3, r7, #7
 8004596:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004598:	1dfb      	adds	r3, r7, #7
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b7f      	cmp	r3, #127	@ 0x7f
 800459e:	d809      	bhi.n	80045b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a0:	1dfb      	adds	r3, r7, #7
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	001a      	movs	r2, r3
 80045a6:	231f      	movs	r3, #31
 80045a8:	401a      	ands	r2, r3
 80045aa:	4b04      	ldr	r3, [pc, #16]	@ (80045bc <__NVIC_EnableIRQ+0x30>)
 80045ac:	2101      	movs	r1, #1
 80045ae:	4091      	lsls	r1, r2
 80045b0:	000a      	movs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80045b4:	46c0      	nop			@ (mov r8, r8)
 80045b6:	46bd      	mov	sp, r7
 80045b8:	b002      	add	sp, #8
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	e000e100 	.word	0xe000e100

080045c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	0002      	movs	r2, r0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	1dfb      	adds	r3, r7, #7
 80045cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045ce:	1dfb      	adds	r3, r7, #7
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80045d4:	d828      	bhi.n	8004628 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004694 <__NVIC_SetPriority+0xd4>)
 80045d8:	1dfb      	adds	r3, r7, #7
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	33c0      	adds	r3, #192	@ 0xc0
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	589b      	ldr	r3, [r3, r2]
 80045e6:	1dfa      	adds	r2, r7, #7
 80045e8:	7812      	ldrb	r2, [r2, #0]
 80045ea:	0011      	movs	r1, r2
 80045ec:	2203      	movs	r2, #3
 80045ee:	400a      	ands	r2, r1
 80045f0:	00d2      	lsls	r2, r2, #3
 80045f2:	21ff      	movs	r1, #255	@ 0xff
 80045f4:	4091      	lsls	r1, r2
 80045f6:	000a      	movs	r2, r1
 80045f8:	43d2      	mvns	r2, r2
 80045fa:	401a      	ands	r2, r3
 80045fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	019b      	lsls	r3, r3, #6
 8004602:	22ff      	movs	r2, #255	@ 0xff
 8004604:	401a      	ands	r2, r3
 8004606:	1dfb      	adds	r3, r7, #7
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	0018      	movs	r0, r3
 800460c:	2303      	movs	r3, #3
 800460e:	4003      	ands	r3, r0
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004614:	481f      	ldr	r0, [pc, #124]	@ (8004694 <__NVIC_SetPriority+0xd4>)
 8004616:	1dfb      	adds	r3, r7, #7
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b25b      	sxtb	r3, r3
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	430a      	orrs	r2, r1
 8004620:	33c0      	adds	r3, #192	@ 0xc0
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004626:	e031      	b.n	800468c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004628:	4a1b      	ldr	r2, [pc, #108]	@ (8004698 <__NVIC_SetPriority+0xd8>)
 800462a:	1dfb      	adds	r3, r7, #7
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	0019      	movs	r1, r3
 8004630:	230f      	movs	r3, #15
 8004632:	400b      	ands	r3, r1
 8004634:	3b08      	subs	r3, #8
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	3306      	adds	r3, #6
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	18d3      	adds	r3, r2, r3
 800463e:	3304      	adds	r3, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	1dfa      	adds	r2, r7, #7
 8004644:	7812      	ldrb	r2, [r2, #0]
 8004646:	0011      	movs	r1, r2
 8004648:	2203      	movs	r2, #3
 800464a:	400a      	ands	r2, r1
 800464c:	00d2      	lsls	r2, r2, #3
 800464e:	21ff      	movs	r1, #255	@ 0xff
 8004650:	4091      	lsls	r1, r2
 8004652:	000a      	movs	r2, r1
 8004654:	43d2      	mvns	r2, r2
 8004656:	401a      	ands	r2, r3
 8004658:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	22ff      	movs	r2, #255	@ 0xff
 8004660:	401a      	ands	r2, r3
 8004662:	1dfb      	adds	r3, r7, #7
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	0018      	movs	r0, r3
 8004668:	2303      	movs	r3, #3
 800466a:	4003      	ands	r3, r0
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004670:	4809      	ldr	r0, [pc, #36]	@ (8004698 <__NVIC_SetPriority+0xd8>)
 8004672:	1dfb      	adds	r3, r7, #7
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	001c      	movs	r4, r3
 8004678:	230f      	movs	r3, #15
 800467a:	4023      	ands	r3, r4
 800467c:	3b08      	subs	r3, #8
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	430a      	orrs	r2, r1
 8004682:	3306      	adds	r3, #6
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	18c3      	adds	r3, r0, r3
 8004688:	3304      	adds	r3, #4
 800468a:	601a      	str	r2, [r3, #0]
}
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b003      	add	sp, #12
 8004692:	bd90      	pop	{r4, r7, pc}
 8004694:	e000e100 	.word	0xe000e100
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	1e5a      	subs	r2, r3, #1
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	045b      	lsls	r3, r3, #17
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d301      	bcc.n	80046b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b0:	2301      	movs	r3, #1
 80046b2:	e010      	b.n	80046d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b4:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <SysTick_Config+0x44>)
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	3a01      	subs	r2, #1
 80046ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046bc:	2301      	movs	r3, #1
 80046be:	425b      	negs	r3, r3
 80046c0:	2103      	movs	r1, #3
 80046c2:	0018      	movs	r0, r3
 80046c4:	f7ff ff7c 	bl	80045c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <SysTick_Config+0x44>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ce:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <SysTick_Config+0x44>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	e000e010 	.word	0xe000e010

080046e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	210f      	movs	r1, #15
 80046f0:	187b      	adds	r3, r7, r1
 80046f2:	1c02      	adds	r2, r0, #0
 80046f4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b25b      	sxtb	r3, r3
 80046fe:	0011      	movs	r1, r2
 8004700:	0018      	movs	r0, r3
 8004702:	f7ff ff5d 	bl	80045c0 <__NVIC_SetPriority>
}
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b004      	add	sp, #16
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	0002      	movs	r2, r0
 8004716:	1dfb      	adds	r3, r7, #7
 8004718:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800471a:	1dfb      	adds	r3, r7, #7
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b25b      	sxtb	r3, r3
 8004720:	0018      	movs	r0, r3
 8004722:	f7ff ff33 	bl	800458c <__NVIC_EnableIRQ>
}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b002      	add	sp, #8
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0018      	movs	r0, r3
 800473a:	f7ff ffaf 	bl	800469c <SysTick_Config>
 800473e:	0003      	movs	r3, r0
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b002      	add	sp, #8
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004756:	e147      	b.n	80049e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2101      	movs	r1, #1
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4091      	lsls	r1, r2
 8004762:	000a      	movs	r2, r1
 8004764:	4013      	ands	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d100      	bne.n	8004770 <HAL_GPIO_Init+0x28>
 800476e:	e138      	b.n	80049e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2203      	movs	r2, #3
 8004776:	4013      	ands	r3, r2
 8004778:	2b01      	cmp	r3, #1
 800477a:	d005      	beq.n	8004788 <HAL_GPIO_Init+0x40>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2203      	movs	r2, #3
 8004782:	4013      	ands	r3, r2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d130      	bne.n	80047ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	2203      	movs	r2, #3
 8004794:	409a      	lsls	r2, r3
 8004796:	0013      	movs	r3, r2
 8004798:	43da      	mvns	r2, r3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	409a      	lsls	r2, r3
 80047aa:	0013      	movs	r3, r2
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047be:	2201      	movs	r2, #1
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	409a      	lsls	r2, r3
 80047c4:	0013      	movs	r3, r2
 80047c6:	43da      	mvns	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4013      	ands	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	2201      	movs	r2, #1
 80047d6:	401a      	ands	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	409a      	lsls	r2, r3
 80047dc:	0013      	movs	r3, r2
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2203      	movs	r2, #3
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d017      	beq.n	8004826 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	2203      	movs	r2, #3
 8004802:	409a      	lsls	r2, r3
 8004804:	0013      	movs	r3, r2
 8004806:	43da      	mvns	r2, r3
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	409a      	lsls	r2, r3
 8004818:	0013      	movs	r3, r2
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2203      	movs	r2, #3
 800482c:	4013      	ands	r3, r2
 800482e:	2b02      	cmp	r3, #2
 8004830:	d123      	bne.n	800487a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	08da      	lsrs	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3208      	adds	r2, #8
 800483a:	0092      	lsls	r2, r2, #2
 800483c:	58d3      	ldr	r3, [r2, r3]
 800483e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2207      	movs	r2, #7
 8004844:	4013      	ands	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	220f      	movs	r2, #15
 800484a:	409a      	lsls	r2, r3
 800484c:	0013      	movs	r3, r2
 800484e:	43da      	mvns	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2107      	movs	r1, #7
 800485e:	400b      	ands	r3, r1
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	409a      	lsls	r2, r3
 8004864:	0013      	movs	r3, r2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	08da      	lsrs	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3208      	adds	r2, #8
 8004874:	0092      	lsls	r2, r2, #2
 8004876:	6939      	ldr	r1, [r7, #16]
 8004878:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	2203      	movs	r2, #3
 8004886:	409a      	lsls	r2, r3
 8004888:	0013      	movs	r3, r2
 800488a:	43da      	mvns	r2, r3
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4013      	ands	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2203      	movs	r2, #3
 8004898:	401a      	ands	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	409a      	lsls	r2, r3
 80048a0:	0013      	movs	r3, r2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	23c0      	movs	r3, #192	@ 0xc0
 80048b4:	029b      	lsls	r3, r3, #10
 80048b6:	4013      	ands	r3, r2
 80048b8:	d100      	bne.n	80048bc <HAL_GPIO_Init+0x174>
 80048ba:	e092      	b.n	80049e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80048bc:	4a50      	ldr	r2, [pc, #320]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	3318      	adds	r3, #24
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	589b      	ldr	r3, [r3, r2]
 80048c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2203      	movs	r2, #3
 80048ce:	4013      	ands	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	220f      	movs	r2, #15
 80048d4:	409a      	lsls	r2, r3
 80048d6:	0013      	movs	r3, r2
 80048d8:	43da      	mvns	r2, r3
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4013      	ands	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	23a0      	movs	r3, #160	@ 0xa0
 80048e4:	05db      	lsls	r3, r3, #23
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d013      	beq.n	8004912 <HAL_GPIO_Init+0x1ca>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a45      	ldr	r2, [pc, #276]	@ (8004a04 <HAL_GPIO_Init+0x2bc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00d      	beq.n	800490e <HAL_GPIO_Init+0x1c6>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a44      	ldr	r2, [pc, #272]	@ (8004a08 <HAL_GPIO_Init+0x2c0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <HAL_GPIO_Init+0x1c2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a43      	ldr	r2, [pc, #268]	@ (8004a0c <HAL_GPIO_Init+0x2c4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <HAL_GPIO_Init+0x1be>
 8004902:	2303      	movs	r3, #3
 8004904:	e006      	b.n	8004914 <HAL_GPIO_Init+0x1cc>
 8004906:	2305      	movs	r3, #5
 8004908:	e004      	b.n	8004914 <HAL_GPIO_Init+0x1cc>
 800490a:	2302      	movs	r3, #2
 800490c:	e002      	b.n	8004914 <HAL_GPIO_Init+0x1cc>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_GPIO_Init+0x1cc>
 8004912:	2300      	movs	r3, #0
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	2103      	movs	r1, #3
 8004918:	400a      	ands	r2, r1
 800491a:	00d2      	lsls	r2, r2, #3
 800491c:	4093      	lsls	r3, r2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004924:	4936      	ldr	r1, [pc, #216]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	3318      	adds	r3, #24
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004932:	4b33      	ldr	r3, [pc, #204]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	43da      	mvns	r2, r3
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4013      	ands	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	035b      	lsls	r3, r3, #13
 800494a:	4013      	ands	r3, r2
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004956:	4b2a      	ldr	r3, [pc, #168]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800495c:	4b28      	ldr	r3, [pc, #160]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	43da      	mvns	r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4013      	ands	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	2380      	movs	r3, #128	@ 0x80
 8004972:	039b      	lsls	r3, r3, #14
 8004974:	4013      	ands	r3, r2
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004980:	4b1f      	ldr	r3, [pc, #124]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004986:	4a1e      	ldr	r2, [pc, #120]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 8004988:	2384      	movs	r3, #132	@ 0x84
 800498a:	58d3      	ldr	r3, [r2, r3]
 800498c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	43da      	mvns	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	2380      	movs	r3, #128	@ 0x80
 800499e:	029b      	lsls	r3, r3, #10
 80049a0:	4013      	ands	r3, r2
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049ac:	4914      	ldr	r1, [pc, #80]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 80049ae:	2284      	movs	r2, #132	@ 0x84
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80049b4:	4a12      	ldr	r2, [pc, #72]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 80049b6:	2380      	movs	r3, #128	@ 0x80
 80049b8:	58d3      	ldr	r3, [r2, r3]
 80049ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	43da      	mvns	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4013      	ands	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	025b      	lsls	r3, r3, #9
 80049ce:	4013      	ands	r3, r2
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049da:	4909      	ldr	r1, [pc, #36]	@ (8004a00 <HAL_GPIO_Init+0x2b8>)
 80049dc:	2280      	movs	r2, #128	@ 0x80
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	3301      	adds	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	40da      	lsrs	r2, r3
 80049f0:	1e13      	subs	r3, r2, #0
 80049f2:	d000      	beq.n	80049f6 <HAL_GPIO_Init+0x2ae>
 80049f4:	e6b0      	b.n	8004758 <HAL_GPIO_Init+0x10>
  }
}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b006      	add	sp, #24
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40021800 	.word	0x40021800
 8004a04:	50000400 	.word	0x50000400
 8004a08:	50000800 	.word	0x50000800
 8004a0c:	50000c00 	.word	0x50000c00

08004a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	0008      	movs	r0, r1
 8004a1a:	0011      	movs	r1, r2
 8004a1c:	1cbb      	adds	r3, r7, #2
 8004a1e:	1c02      	adds	r2, r0, #0
 8004a20:	801a      	strh	r2, [r3, #0]
 8004a22:	1c7b      	adds	r3, r7, #1
 8004a24:	1c0a      	adds	r2, r1, #0
 8004a26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a28:	1c7b      	adds	r3, r7, #1
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a30:	1cbb      	adds	r3, r7, #2
 8004a32:	881a      	ldrh	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a38:	e003      	b.n	8004a42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a3a:	1cbb      	adds	r3, r7, #2
 8004a3c:	881a      	ldrh	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b002      	add	sp, #8
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	000a      	movs	r2, r1
 8004a54:	1cbb      	adds	r3, r7, #2
 8004a56:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a5e:	1cbb      	adds	r3, r7, #2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4013      	ands	r3, r2
 8004a66:	041a      	lsls	r2, r3, #16
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	1cb9      	adds	r1, r7, #2
 8004a6e:	8809      	ldrh	r1, [r1, #0]
 8004a70:	400b      	ands	r3, r1
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]
}
 8004a78:	46c0      	nop			@ (mov r8, r8)
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b004      	add	sp, #16
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e082      	b.n	8004b98 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2241      	movs	r2, #65	@ 0x41
 8004a96:	5c9b      	ldrb	r3, [r3, r2]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d107      	bne.n	8004aae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2240      	movs	r2, #64	@ 0x40
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7ff f8fb 	bl	8003ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2241      	movs	r2, #65	@ 0x41
 8004ab2:	2124      	movs	r1, #36	@ 0x24
 8004ab4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	438a      	bics	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4934      	ldr	r1, [pc, #208]	@ (8004ba0 <HAL_I2C_Init+0x120>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4931      	ldr	r1, [pc, #196]	@ (8004ba4 <HAL_I2C_Init+0x124>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d108      	bne.n	8004afe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2180      	movs	r1, #128	@ 0x80
 8004af6:	0209      	lsls	r1, r1, #8
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	e007      	b.n	8004b0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2184      	movs	r1, #132	@ 0x84
 8004b08:	0209      	lsls	r1, r1, #8
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d104      	bne.n	8004b20 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2280      	movs	r2, #128	@ 0x80
 8004b1c:	0112      	lsls	r2, r2, #4
 8004b1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	491f      	ldr	r1, [pc, #124]	@ (8004ba8 <HAL_I2C_Init+0x128>)
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	491a      	ldr	r1, [pc, #104]	@ (8004ba4 <HAL_I2C_Init+0x124>)
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69d9      	ldr	r1, [r3, #28]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2101      	movs	r1, #1
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2241      	movs	r2, #65	@ 0x41
 8004b84:	2120      	movs	r1, #32
 8004b86:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2242      	movs	r2, #66	@ 0x42
 8004b92:	2100      	movs	r1, #0
 8004b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	f0ffffff 	.word	0xf0ffffff
 8004ba4:	ffff7fff 	.word	0xffff7fff
 8004ba8:	02008000 	.word	0x02008000

08004bac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004bac:	b590      	push	{r4, r7, lr}
 8004bae:	b089      	sub	sp, #36	@ 0x24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	0008      	movs	r0, r1
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	0019      	movs	r1, r3
 8004bba:	230a      	movs	r3, #10
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	1c02      	adds	r2, r0, #0
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	1c0a      	adds	r2, r1, #0
 8004bc8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2241      	movs	r2, #65	@ 0x41
 8004bce:	5c9b      	ldrb	r3, [r3, r2]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d000      	beq.n	8004bd8 <HAL_I2C_Master_Transmit+0x2c>
 8004bd6:	e0e7      	b.n	8004da8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2240      	movs	r2, #64	@ 0x40
 8004bdc:	5c9b      	ldrb	r3, [r3, r2]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_I2C_Master_Transmit+0x3a>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e0e1      	b.n	8004daa <HAL_I2C_Master_Transmit+0x1fe>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2240      	movs	r2, #64	@ 0x40
 8004bea:	2101      	movs	r1, #1
 8004bec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bee:	f7ff fc89 	bl	8004504 <HAL_GetTick>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bf6:	2380      	movs	r3, #128	@ 0x80
 8004bf8:	0219      	lsls	r1, r3, #8
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2319      	movs	r3, #25
 8004c02:	2201      	movs	r2, #1
 8004c04:	f000 fa04 	bl	8005010 <I2C_WaitOnFlagUntilTimeout>
 8004c08:	1e03      	subs	r3, r0, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e0cc      	b.n	8004daa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2241      	movs	r2, #65	@ 0x41
 8004c14:	2121      	movs	r1, #33	@ 0x21
 8004c16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2242      	movs	r2, #66	@ 0x42
 8004c1c:	2110      	movs	r1, #16
 8004c1e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2208      	movs	r2, #8
 8004c30:	18ba      	adds	r2, r7, r2
 8004c32:	8812      	ldrh	r2, [r2, #0]
 8004c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2bff      	cmp	r3, #255	@ 0xff
 8004c44:	d911      	bls.n	8004c6a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	22ff      	movs	r2, #255	@ 0xff
 8004c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	2380      	movs	r3, #128	@ 0x80
 8004c54:	045c      	lsls	r4, r3, #17
 8004c56:	230a      	movs	r3, #10
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	8819      	ldrh	r1, [r3, #0]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	4b55      	ldr	r3, [pc, #340]	@ (8004db4 <HAL_I2C_Master_Transmit+0x208>)
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	0023      	movs	r3, r4
 8004c64:	f000 fc10 	bl	8005488 <I2C_TransferConfig>
 8004c68:	e075      	b.n	8004d56 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	2380      	movs	r3, #128	@ 0x80
 8004c7c:	049c      	lsls	r4, r3, #18
 8004c7e:	230a      	movs	r3, #10
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	8819      	ldrh	r1, [r3, #0]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	4b4b      	ldr	r3, [pc, #300]	@ (8004db4 <HAL_I2C_Master_Transmit+0x208>)
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	0023      	movs	r3, r4
 8004c8c:	f000 fbfc 	bl	8005488 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c90:	e061      	b.n	8004d56 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f000 f9f8 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004c9e:	1e03      	subs	r3, r0, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e081      	b.n	8004daa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	781a      	ldrb	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d03a      	beq.n	8004d56 <HAL_I2C_Master_Transmit+0x1aa>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d136      	bne.n	8004d56 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	0013      	movs	r3, r2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2180      	movs	r1, #128	@ 0x80
 8004cf6:	f000 f98b 	bl	8005010 <I2C_WaitOnFlagUntilTimeout>
 8004cfa:	1e03      	subs	r3, r0, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e053      	b.n	8004daa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2bff      	cmp	r3, #255	@ 0xff
 8004d0a:	d911      	bls.n	8004d30 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	22ff      	movs	r2, #255	@ 0xff
 8004d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	2380      	movs	r3, #128	@ 0x80
 8004d1a:	045c      	lsls	r4, r3, #17
 8004d1c:	230a      	movs	r3, #10
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	8819      	ldrh	r1, [r3, #0]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	2300      	movs	r3, #0
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	0023      	movs	r3, r4
 8004d2a:	f000 fbad 	bl	8005488 <I2C_TransferConfig>
 8004d2e:	e012      	b.n	8004d56 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	2380      	movs	r3, #128	@ 0x80
 8004d42:	049c      	lsls	r4, r3, #18
 8004d44:	230a      	movs	r3, #10
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	8819      	ldrh	r1, [r3, #0]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	0023      	movs	r3, r4
 8004d52:	f000 fb99 	bl	8005488 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d198      	bne.n	8004c92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 f9d0 	bl	800510c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d6c:	1e03      	subs	r3, r0, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e01a      	b.n	8004daa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	490c      	ldr	r1, [pc, #48]	@ (8004db8 <HAL_I2C_Master_Transmit+0x20c>)
 8004d88:	400a      	ands	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2241      	movs	r2, #65	@ 0x41
 8004d90:	2120      	movs	r1, #32
 8004d92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2242      	movs	r2, #66	@ 0x42
 8004d98:	2100      	movs	r1, #0
 8004d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2240      	movs	r2, #64	@ 0x40
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b007      	add	sp, #28
 8004db0:	bd90      	pop	{r4, r7, pc}
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	80002000 	.word	0x80002000
 8004db8:	fe00e800 	.word	0xfe00e800

08004dbc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b089      	sub	sp, #36	@ 0x24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	0008      	movs	r0, r1
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	0019      	movs	r1, r3
 8004dca:	230a      	movs	r3, #10
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	1c02      	adds	r2, r0, #0
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	1c0a      	adds	r2, r1, #0
 8004dd8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2241      	movs	r2, #65	@ 0x41
 8004dde:	5c9b      	ldrb	r3, [r3, r2]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d000      	beq.n	8004de8 <HAL_I2C_Master_Receive+0x2c>
 8004de6:	e0e8      	b.n	8004fba <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2240      	movs	r2, #64	@ 0x40
 8004dec:	5c9b      	ldrb	r3, [r3, r2]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_I2C_Master_Receive+0x3a>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e0e2      	b.n	8004fbc <HAL_I2C_Master_Receive+0x200>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2240      	movs	r2, #64	@ 0x40
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dfe:	f7ff fb81 	bl	8004504 <HAL_GetTick>
 8004e02:	0003      	movs	r3, r0
 8004e04:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e06:	2380      	movs	r3, #128	@ 0x80
 8004e08:	0219      	lsls	r1, r3, #8
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2319      	movs	r3, #25
 8004e12:	2201      	movs	r2, #1
 8004e14:	f000 f8fc 	bl	8005010 <I2C_WaitOnFlagUntilTimeout>
 8004e18:	1e03      	subs	r3, r0, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0cd      	b.n	8004fbc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2241      	movs	r2, #65	@ 0x41
 8004e24:	2122      	movs	r1, #34	@ 0x22
 8004e26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2242      	movs	r2, #66	@ 0x42
 8004e2c:	2110      	movs	r1, #16
 8004e2e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2208      	movs	r2, #8
 8004e40:	18ba      	adds	r2, r7, r2
 8004e42:	8812      	ldrh	r2, [r2, #0]
 8004e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2bff      	cmp	r3, #255	@ 0xff
 8004e54:	d911      	bls.n	8004e7a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	22ff      	movs	r2, #255	@ 0xff
 8004e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	045c      	lsls	r4, r3, #17
 8004e66:	230a      	movs	r3, #10
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	8819      	ldrh	r1, [r3, #0]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	4b55      	ldr	r3, [pc, #340]	@ (8004fc4 <HAL_I2C_Master_Receive+0x208>)
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	0023      	movs	r3, r4
 8004e74:	f000 fb08 	bl	8005488 <I2C_TransferConfig>
 8004e78:	e076      	b.n	8004f68 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	2380      	movs	r3, #128	@ 0x80
 8004e8c:	049c      	lsls	r4, r3, #18
 8004e8e:	230a      	movs	r3, #10
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	8819      	ldrh	r1, [r3, #0]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc4 <HAL_I2C_Master_Receive+0x208>)
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	0023      	movs	r3, r4
 8004e9c:	f000 faf4 	bl	8005488 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004ea0:	e062      	b.n	8004f68 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f000 f96b 	bl	8005184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eae:	1e03      	subs	r3, r0, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e082      	b.n	8004fbc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d03a      	beq.n	8004f68 <HAL_I2C_Master_Receive+0x1ac>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d136      	bne.n	8004f68 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004efa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	0013      	movs	r3, r2
 8004f04:	2200      	movs	r2, #0
 8004f06:	2180      	movs	r1, #128	@ 0x80
 8004f08:	f000 f882 	bl	8005010 <I2C_WaitOnFlagUntilTimeout>
 8004f0c:	1e03      	subs	r3, r0, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e053      	b.n	8004fbc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2bff      	cmp	r3, #255	@ 0xff
 8004f1c:	d911      	bls.n	8004f42 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	22ff      	movs	r2, #255	@ 0xff
 8004f22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	2380      	movs	r3, #128	@ 0x80
 8004f2c:	045c      	lsls	r4, r3, #17
 8004f2e:	230a      	movs	r3, #10
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	8819      	ldrh	r1, [r3, #0]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	2300      	movs	r3, #0
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	0023      	movs	r3, r4
 8004f3c:	f000 faa4 	bl	8005488 <I2C_TransferConfig>
 8004f40:	e012      	b.n	8004f68 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	2380      	movs	r3, #128	@ 0x80
 8004f54:	049c      	lsls	r4, r3, #18
 8004f56:	230a      	movs	r3, #10
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	8819      	ldrh	r1, [r3, #0]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	0023      	movs	r3, r4
 8004f64:	f000 fa90 	bl	8005488 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d197      	bne.n	8004ea2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 f8c7 	bl	800510c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f7e:	1e03      	subs	r3, r0, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e01a      	b.n	8004fbc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	490b      	ldr	r1, [pc, #44]	@ (8004fc8 <HAL_I2C_Master_Receive+0x20c>)
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2241      	movs	r2, #65	@ 0x41
 8004fa2:	2120      	movs	r1, #32
 8004fa4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2242      	movs	r2, #66	@ 0x42
 8004faa:	2100      	movs	r1, #0
 8004fac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2240      	movs	r2, #64	@ 0x40
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e000      	b.n	8004fbc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
  }
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b007      	add	sp, #28
 8004fc2:	bd90      	pop	{r4, r7, pc}
 8004fc4:	80002400 	.word	0x80002400
 8004fc8:	fe00e800 	.word	0xfe00e800

08004fcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d103      	bne.n	8004fea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d007      	beq.n	8005008 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2101      	movs	r1, #1
 8005004:	430a      	orrs	r2, r1
 8005006:	619a      	str	r2, [r3, #24]
  }
}
 8005008:	46c0      	nop			@ (mov r8, r8)
 800500a:	46bd      	mov	sp, r7
 800500c:	b002      	add	sp, #8
 800500e:	bd80      	pop	{r7, pc}

08005010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	1dfb      	adds	r3, r7, #7
 800501e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005020:	e021      	b.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	d01e      	beq.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005028:	f7ff fa6c 	bl	8004504 <HAL_GetTick>
 800502c:	0002      	movs	r2, r0
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d302      	bcc.n	800503e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d113      	bne.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005042:	2220      	movs	r2, #32
 8005044:	431a      	orrs	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2241      	movs	r2, #65	@ 0x41
 800504e:	2120      	movs	r1, #32
 8005050:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2242      	movs	r2, #66	@ 0x42
 8005056:	2100      	movs	r1, #0
 8005058:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2240      	movs	r2, #64	@ 0x40
 800505e:	2100      	movs	r1, #0
 8005060:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e00f      	b.n	8005086 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	425a      	negs	r2, r3
 8005076:	4153      	adcs	r3, r2
 8005078:	b2db      	uxtb	r3, r3
 800507a:	001a      	movs	r2, r3
 800507c:	1dfb      	adds	r3, r7, #7
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d0ce      	beq.n	8005022 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	0018      	movs	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	b004      	add	sp, #16
 800508c:	bd80      	pop	{r7, pc}

0800508e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800509a:	e02b      	b.n	80050f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 f8e8 	bl	8005278 <I2C_IsErrorOccurred>
 80050a8:	1e03      	subs	r3, r0, #0
 80050aa:	d001      	beq.n	80050b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e029      	b.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3301      	adds	r3, #1
 80050b4:	d01e      	beq.n	80050f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7ff fa25 	bl	8004504 <HAL_GetTick>
 80050ba:	0002      	movs	r2, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d113      	bne.n	80050f4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d0:	2220      	movs	r2, #32
 80050d2:	431a      	orrs	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2241      	movs	r2, #65	@ 0x41
 80050dc:	2120      	movs	r1, #32
 80050de:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2242      	movs	r2, #66	@ 0x42
 80050e4:	2100      	movs	r1, #0
 80050e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2240      	movs	r2, #64	@ 0x40
 80050ec:	2100      	movs	r1, #0
 80050ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e007      	b.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2202      	movs	r2, #2
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d1cc      	bne.n	800509c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	0018      	movs	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	b004      	add	sp, #16
 800510a:	bd80      	pop	{r7, pc}

0800510c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005118:	e028      	b.n	800516c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	0018      	movs	r0, r3
 8005122:	f000 f8a9 	bl	8005278 <I2C_IsErrorOccurred>
 8005126:	1e03      	subs	r3, r0, #0
 8005128:	d001      	beq.n	800512e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e026      	b.n	800517c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512e:	f7ff f9e9 	bl	8004504 <HAL_GetTick>
 8005132:	0002      	movs	r2, r0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d113      	bne.n	800516c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005148:	2220      	movs	r2, #32
 800514a:	431a      	orrs	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2241      	movs	r2, #65	@ 0x41
 8005154:	2120      	movs	r1, #32
 8005156:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2242      	movs	r2, #66	@ 0x42
 800515c:	2100      	movs	r1, #0
 800515e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2240      	movs	r2, #64	@ 0x40
 8005164:	2100      	movs	r1, #0
 8005166:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e007      	b.n	800517c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	2220      	movs	r2, #32
 8005174:	4013      	ands	r3, r2
 8005176:	2b20      	cmp	r3, #32
 8005178:	d1cf      	bne.n	800511a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b004      	add	sp, #16
 8005182:	bd80      	pop	{r7, pc}

08005184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005190:	e064      	b.n	800525c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	0018      	movs	r0, r3
 800519a:	f000 f86d 	bl	8005278 <I2C_IsErrorOccurred>
 800519e:	1e03      	subs	r3, r0, #0
 80051a0:	d001      	beq.n	80051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e062      	b.n	800526c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2220      	movs	r2, #32
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d138      	bne.n	8005226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2204      	movs	r2, #4
 80051bc:	4013      	ands	r3, r2
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d105      	bne.n	80051ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e04e      	b.n	800526c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2210      	movs	r2, #16
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d107      	bne.n	80051ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2210      	movs	r2, #16
 80051e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2204      	movs	r2, #4
 80051e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80051ea:	e002      	b.n	80051f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2220      	movs	r2, #32
 80051f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	491b      	ldr	r1, [pc, #108]	@ (8005274 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005206:	400a      	ands	r2, r1
 8005208:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2241      	movs	r2, #65	@ 0x41
 800520e:	2120      	movs	r1, #32
 8005210:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2242      	movs	r2, #66	@ 0x42
 8005216:	2100      	movs	r1, #0
 8005218:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2240      	movs	r2, #64	@ 0x40
 800521e:	2100      	movs	r1, #0
 8005220:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e022      	b.n	800526c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7ff f96d 	bl	8004504 <HAL_GetTick>
 800522a:	0002      	movs	r2, r0
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	d302      	bcc.n	800523c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10f      	bne.n	800525c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005240:	2220      	movs	r2, #32
 8005242:	431a      	orrs	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2241      	movs	r2, #65	@ 0x41
 800524c:	2120      	movs	r1, #32
 800524e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2240      	movs	r2, #64	@ 0x40
 8005254:	2100      	movs	r1, #0
 8005256:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e007      	b.n	800526c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	2204      	movs	r2, #4
 8005264:	4013      	ands	r3, r2
 8005266:	2b04      	cmp	r3, #4
 8005268:	d193      	bne.n	8005192 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	0018      	movs	r0, r3
 800526e:	46bd      	mov	sp, r7
 8005270:	b004      	add	sp, #16
 8005272:	bd80      	pop	{r7, pc}
 8005274:	fe00e800 	.word	0xfe00e800

08005278 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	@ 0x28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2327      	movs	r3, #39	@ 0x27
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2210      	movs	r2, #16
 80052a0:	4013      	ands	r3, r2
 80052a2:	d100      	bne.n	80052a6 <I2C_IsErrorOccurred+0x2e>
 80052a4:	e08a      	b.n	80053bc <I2C_IsErrorOccurred+0x144>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2210      	movs	r2, #16
 80052ac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052ae:	e068      	b.n	8005382 <I2C_IsErrorOccurred+0x10a>
 80052b0:	2227      	movs	r2, #39	@ 0x27
 80052b2:	18bb      	adds	r3, r7, r2
 80052b4:	18ba      	adds	r2, r7, r2
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	3301      	adds	r3, #1
 80052be:	d060      	beq.n	8005382 <I2C_IsErrorOccurred+0x10a>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052c0:	f7ff f920 	bl	8004504 <HAL_GetTick>
 80052c4:	0002      	movs	r2, r0
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <I2C_IsErrorOccurred+0x5e>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d155      	bne.n	8005382 <I2C_IsErrorOccurred+0x10a>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	01db      	lsls	r3, r3, #7
 80052e0:	4013      	ands	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052e4:	2013      	movs	r0, #19
 80052e6:	183b      	adds	r3, r7, r0
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	2142      	movs	r1, #66	@ 0x42
 80052ec:	5c52      	ldrb	r2, [r2, r1]
 80052ee:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	401a      	ands	r2, r3
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	429a      	cmp	r2, r3
 8005302:	d137      	bne.n	8005374 <I2C_IsErrorOccurred+0xfc>
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	2380      	movs	r3, #128	@ 0x80
 8005308:	01db      	lsls	r3, r3, #7
 800530a:	429a      	cmp	r2, r3
 800530c:	d032      	beq.n	8005374 <I2C_IsErrorOccurred+0xfc>
              (tmp1 != I2C_CR2_STOP) && \
 800530e:	183b      	adds	r3, r7, r0
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b20      	cmp	r3, #32
 8005314:	d02e      	beq.n	8005374 <I2C_IsErrorOccurred+0xfc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2180      	movs	r1, #128	@ 0x80
 8005322:	01c9      	lsls	r1, r1, #7
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005328:	f7ff f8ec 	bl	8004504 <HAL_GetTick>
 800532c:	0003      	movs	r3, r0
 800532e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005330:	e020      	b.n	8005374 <I2C_IsErrorOccurred+0xfc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005332:	f7ff f8e7 	bl	8004504 <HAL_GetTick>
 8005336:	0002      	movs	r2, r0
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2027      	movs	r0, #39	@ 0x27
 800533e:	183a      	adds	r2, r7, r0
 8005340:	1839      	adds	r1, r7, r0
 8005342:	7809      	ldrb	r1, [r1, #0]
 8005344:	7011      	strb	r1, [r2, #0]
 8005346:	2b19      	cmp	r3, #25
 8005348:	d914      	bls.n	8005374 <I2C_IsErrorOccurred+0xfc>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534e:	2220      	movs	r2, #32
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2241      	movs	r2, #65	@ 0x41
 800535a:	2120      	movs	r1, #32
 800535c:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2242      	movs	r2, #66	@ 0x42
 8005362:	2100      	movs	r1, #0
 8005364:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2240      	movs	r2, #64	@ 0x40
 800536a:	2100      	movs	r1, #0
 800536c:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 800536e:	183b      	adds	r3, r7, r0
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2220      	movs	r2, #32
 800537c:	4013      	ands	r3, r2
 800537e:	2b20      	cmp	r3, #32
 8005380:	d1d7      	bne.n	8005332 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2220      	movs	r2, #32
 800538a:	4013      	ands	r3, r2
 800538c:	2b20      	cmp	r3, #32
 800538e:	d004      	beq.n	800539a <I2C_IsErrorOccurred+0x122>
 8005390:	2327      	movs	r3, #39	@ 0x27
 8005392:	18fb      	adds	r3, r7, r3
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d08a      	beq.n	80052b0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800539a:	2327      	movs	r3, #39	@ 0x27
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <I2C_IsErrorOccurred+0x134>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2220      	movs	r2, #32
 80053aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	2204      	movs	r2, #4
 80053b0:	4313      	orrs	r3, r2
 80053b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053b4:	2327      	movs	r3, #39	@ 0x27
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	2380      	movs	r3, #128	@ 0x80
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4013      	ands	r3, r2
 80053cc:	d00c      	beq.n	80053e8 <I2C_IsErrorOccurred+0x170>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	2201      	movs	r2, #1
 80053d2:	4313      	orrs	r3, r2
 80053d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2280      	movs	r2, #128	@ 0x80
 80053dc:	0052      	lsls	r2, r2, #1
 80053de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053e0:	2327      	movs	r3, #39	@ 0x27
 80053e2:	18fb      	adds	r3, r7, r3
 80053e4:	2201      	movs	r2, #1
 80053e6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	2380      	movs	r3, #128	@ 0x80
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4013      	ands	r3, r2
 80053f0:	d00c      	beq.n	800540c <I2C_IsErrorOccurred+0x194>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	2208      	movs	r2, #8
 80053f6:	4313      	orrs	r3, r2
 80053f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2280      	movs	r2, #128	@ 0x80
 8005400:	00d2      	lsls	r2, r2, #3
 8005402:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005404:	2327      	movs	r3, #39	@ 0x27
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4013      	ands	r3, r2
 8005414:	d00c      	beq.n	8005430 <I2C_IsErrorOccurred+0x1b8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	2202      	movs	r2, #2
 800541a:	4313      	orrs	r3, r2
 800541c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2280      	movs	r2, #128	@ 0x80
 8005424:	0092      	lsls	r2, r2, #2
 8005426:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005428:	2327      	movs	r3, #39	@ 0x27
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	2201      	movs	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005430:	2327      	movs	r3, #39	@ 0x27
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01d      	beq.n	8005476 <I2C_IsErrorOccurred+0x1fe>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	0018      	movs	r0, r3
 800543e:	f7ff fdc5 	bl	8004fcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	490d      	ldr	r1, [pc, #52]	@ (8005484 <I2C_IsErrorOccurred+0x20c>)
 800544e:	400a      	ands	r2, r1
 8005450:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2241      	movs	r2, #65	@ 0x41
 8005462:	2120      	movs	r1, #32
 8005464:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2242      	movs	r2, #66	@ 0x42
 800546a:	2100      	movs	r1, #0
 800546c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2240      	movs	r2, #64	@ 0x40
 8005472:	2100      	movs	r1, #0
 8005474:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005476:	2327      	movs	r3, #39	@ 0x27
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	781b      	ldrb	r3, [r3, #0]
}
 800547c:	0018      	movs	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	b00a      	add	sp, #40	@ 0x28
 8005482:	bd80      	pop	{r7, pc}
 8005484:	fe00e800 	.word	0xfe00e800

08005488 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	0008      	movs	r0, r1
 8005492:	0011      	movs	r1, r2
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	240a      	movs	r4, #10
 8005498:	193b      	adds	r3, r7, r4
 800549a:	1c02      	adds	r2, r0, #0
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	2009      	movs	r0, #9
 80054a0:	183b      	adds	r3, r7, r0
 80054a2:	1c0a      	adds	r2, r1, #0
 80054a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054a6:	193b      	adds	r3, r7, r4
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	059b      	lsls	r3, r3, #22
 80054ac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054ae:	183b      	adds	r3, r7, r0
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	0419      	lsls	r1, r3, #16
 80054b4:	23ff      	movs	r3, #255	@ 0xff
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054ba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c2:	4313      	orrs	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054d2:	0d51      	lsrs	r1, r2, #21
 80054d4:	2280      	movs	r2, #128	@ 0x80
 80054d6:	00d2      	lsls	r2, r2, #3
 80054d8:	400a      	ands	r2, r1
 80054da:	4907      	ldr	r1, [pc, #28]	@ (80054f8 <I2C_TransferConfig+0x70>)
 80054dc:	430a      	orrs	r2, r1
 80054de:	43d2      	mvns	r2, r2
 80054e0:	401a      	ands	r2, r3
 80054e2:	0011      	movs	r1, r2
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b007      	add	sp, #28
 80054f4:	bd90      	pop	{r4, r7, pc}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	03ff63ff 	.word	0x03ff63ff

080054fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2241      	movs	r2, #65	@ 0x41
 800550a:	5c9b      	ldrb	r3, [r3, r2]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b20      	cmp	r3, #32
 8005510:	d138      	bne.n	8005584 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2240      	movs	r2, #64	@ 0x40
 8005516:	5c9b      	ldrb	r3, [r3, r2]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800551c:	2302      	movs	r3, #2
 800551e:	e032      	b.n	8005586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2240      	movs	r2, #64	@ 0x40
 8005524:	2101      	movs	r1, #1
 8005526:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2241      	movs	r2, #65	@ 0x41
 800552c:	2124      	movs	r1, #36	@ 0x24
 800552e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2101      	movs	r1, #1
 800553c:	438a      	bics	r2, r1
 800553e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4911      	ldr	r1, [pc, #68]	@ (8005590 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800554c:	400a      	ands	r2, r1
 800554e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6819      	ldr	r1, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2101      	movs	r1, #1
 800556c:	430a      	orrs	r2, r1
 800556e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2241      	movs	r2, #65	@ 0x41
 8005574:	2120      	movs	r1, #32
 8005576:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2240      	movs	r2, #64	@ 0x40
 800557c:	2100      	movs	r1, #0
 800557e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	e000      	b.n	8005586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005584:	2302      	movs	r3, #2
  }
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b002      	add	sp, #8
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	ffffefff 	.word	0xffffefff

08005594 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2241      	movs	r2, #65	@ 0x41
 80055a2:	5c9b      	ldrb	r3, [r3, r2]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d139      	bne.n	800561e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2240      	movs	r2, #64	@ 0x40
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e033      	b.n	8005620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2240      	movs	r2, #64	@ 0x40
 80055bc:	2101      	movs	r1, #1
 80055be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2241      	movs	r2, #65	@ 0x41
 80055c4:	2124      	movs	r1, #36	@ 0x24
 80055c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2101      	movs	r1, #1
 80055d4:	438a      	bics	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a11      	ldr	r2, [pc, #68]	@ (8005628 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2101      	movs	r1, #1
 8005606:	430a      	orrs	r2, r1
 8005608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2241      	movs	r2, #65	@ 0x41
 800560e:	2120      	movs	r1, #32
 8005610:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2240      	movs	r2, #64	@ 0x40
 8005616:	2100      	movs	r1, #0
 8005618:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	e000      	b.n	8005620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
  }
}
 8005620:	0018      	movs	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	b004      	add	sp, #16
 8005626:	bd80      	pop	{r7, pc}
 8005628:	fffff0ff 	.word	0xfffff0ff

0800562c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005634:	4b19      	ldr	r3, [pc, #100]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a19      	ldr	r2, [pc, #100]	@ (80056a0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800563a:	4013      	ands	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	4b17      	ldr	r3, [pc, #92]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	429a      	cmp	r2, r3
 800564e:	d11f      	bne.n	8005690 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005650:	4b14      	ldr	r3, [pc, #80]	@ (80056a4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	0013      	movs	r3, r2
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	189b      	adds	r3, r3, r2
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	4912      	ldr	r1, [pc, #72]	@ (80056a8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800565e:	0018      	movs	r0, r3
 8005660:	f7fa fd6a 	bl	8000138 <__udivsi3>
 8005664:	0003      	movs	r3, r0
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800566a:	e008      	b.n	800567e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3b01      	subs	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e001      	b.n	800567e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e009      	b.n	8005692 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800567e:	4b07      	ldr	r3, [pc, #28]	@ (800569c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	2380      	movs	r3, #128	@ 0x80
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	401a      	ands	r2, r3
 8005688:	2380      	movs	r3, #128	@ 0x80
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	429a      	cmp	r2, r3
 800568e:	d0ed      	beq.n	800566c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	b004      	add	sp, #16
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			@ (mov r8, r8)
 800569c:	40007000 	.word	0x40007000
 80056a0:	fffff9ff 	.word	0xfffff9ff
 80056a4:	2000004c 	.word	0x2000004c
 80056a8:	000f4240 	.word	0x000f4240

080056ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80056b0:	4b03      	ldr	r3, [pc, #12]	@ (80056c0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	23e0      	movs	r3, #224	@ 0xe0
 80056b6:	01db      	lsls	r3, r3, #7
 80056b8:	4013      	ands	r3, r2
}
 80056ba:	0018      	movs	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40021000 	.word	0x40021000

080056c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e2f3      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2201      	movs	r2, #1
 80056dc:	4013      	ands	r3, r2
 80056de:	d100      	bne.n	80056e2 <HAL_RCC_OscConfig+0x1e>
 80056e0:	e07c      	b.n	80057dc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e2:	4bc3      	ldr	r3, [pc, #780]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2238      	movs	r2, #56	@ 0x38
 80056e8:	4013      	ands	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ec:	4bc0      	ldr	r3, [pc, #768]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2203      	movs	r2, #3
 80056f2:	4013      	ands	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d102      	bne.n	8005702 <HAL_RCC_OscConfig+0x3e>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d002      	beq.n	8005708 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b08      	cmp	r3, #8
 8005706:	d10b      	bne.n	8005720 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005708:	4bb9      	ldr	r3, [pc, #740]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	2380      	movs	r3, #128	@ 0x80
 800570e:	029b      	lsls	r3, r3, #10
 8005710:	4013      	ands	r3, r2
 8005712:	d062      	beq.n	80057da <HAL_RCC_OscConfig+0x116>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d15e      	bne.n	80057da <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e2ce      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	2380      	movs	r3, #128	@ 0x80
 8005726:	025b      	lsls	r3, r3, #9
 8005728:	429a      	cmp	r2, r3
 800572a:	d107      	bne.n	800573c <HAL_RCC_OscConfig+0x78>
 800572c:	4bb0      	ldr	r3, [pc, #704]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4baf      	ldr	r3, [pc, #700]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005732:	2180      	movs	r1, #128	@ 0x80
 8005734:	0249      	lsls	r1, r1, #9
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e020      	b.n	800577e <HAL_RCC_OscConfig+0xba>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	23a0      	movs	r3, #160	@ 0xa0
 8005742:	02db      	lsls	r3, r3, #11
 8005744:	429a      	cmp	r2, r3
 8005746:	d10e      	bne.n	8005766 <HAL_RCC_OscConfig+0xa2>
 8005748:	4ba9      	ldr	r3, [pc, #676]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	4ba8      	ldr	r3, [pc, #672]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800574e:	2180      	movs	r1, #128	@ 0x80
 8005750:	02c9      	lsls	r1, r1, #11
 8005752:	430a      	orrs	r2, r1
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	4ba6      	ldr	r3, [pc, #664]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4ba5      	ldr	r3, [pc, #660]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800575c:	2180      	movs	r1, #128	@ 0x80
 800575e:	0249      	lsls	r1, r1, #9
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e00b      	b.n	800577e <HAL_RCC_OscConfig+0xba>
 8005766:	4ba2      	ldr	r3, [pc, #648]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4ba1      	ldr	r3, [pc, #644]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800576c:	49a1      	ldr	r1, [pc, #644]	@ (80059f4 <HAL_RCC_OscConfig+0x330>)
 800576e:	400a      	ands	r2, r1
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	4b9f      	ldr	r3, [pc, #636]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b9e      	ldr	r3, [pc, #632]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005778:	499f      	ldr	r1, [pc, #636]	@ (80059f8 <HAL_RCC_OscConfig+0x334>)
 800577a:	400a      	ands	r2, r1
 800577c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d014      	beq.n	80057b0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005786:	f7fe febd 	bl	8004504 <HAL_GetTick>
 800578a:	0003      	movs	r3, r0
 800578c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005790:	f7fe feb8 	bl	8004504 <HAL_GetTick>
 8005794:	0002      	movs	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b64      	cmp	r3, #100	@ 0x64
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e28d      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a2:	4b93      	ldr	r3, [pc, #588]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	2380      	movs	r3, #128	@ 0x80
 80057a8:	029b      	lsls	r3, r3, #10
 80057aa:	4013      	ands	r3, r2
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0xcc>
 80057ae:	e015      	b.n	80057dc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fe fea8 	bl	8004504 <HAL_GetTick>
 80057b4:	0003      	movs	r3, r0
 80057b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ba:	f7fe fea3 	bl	8004504 <HAL_GetTick>
 80057be:	0002      	movs	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b64      	cmp	r3, #100	@ 0x64
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e278      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057cc:	4b88      	ldr	r3, [pc, #544]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	2380      	movs	r3, #128	@ 0x80
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	4013      	ands	r3, r2
 80057d6:	d1f0      	bne.n	80057ba <HAL_RCC_OscConfig+0xf6>
 80057d8:	e000      	b.n	80057dc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2202      	movs	r2, #2
 80057e2:	4013      	ands	r3, r2
 80057e4:	d100      	bne.n	80057e8 <HAL_RCC_OscConfig+0x124>
 80057e6:	e099      	b.n	800591c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e8:	4b81      	ldr	r3, [pc, #516]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2238      	movs	r2, #56	@ 0x38
 80057ee:	4013      	ands	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057f2:	4b7f      	ldr	r3, [pc, #508]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	2203      	movs	r2, #3
 80057f8:	4013      	ands	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b10      	cmp	r3, #16
 8005800:	d102      	bne.n	8005808 <HAL_RCC_OscConfig+0x144>
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d002      	beq.n	800580e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d135      	bne.n	800587a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800580e:	4b78      	ldr	r3, [pc, #480]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	2380      	movs	r3, #128	@ 0x80
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4013      	ands	r3, r2
 8005818:	d005      	beq.n	8005826 <HAL_RCC_OscConfig+0x162>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e24b      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005826:	4b72      	ldr	r3, [pc, #456]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4a74      	ldr	r2, [pc, #464]	@ (80059fc <HAL_RCC_OscConfig+0x338>)
 800582c:	4013      	ands	r3, r2
 800582e:	0019      	movs	r1, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	021a      	lsls	r2, r3, #8
 8005836:	4b6e      	ldr	r3, [pc, #440]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d112      	bne.n	8005868 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005842:	4b6b      	ldr	r3, [pc, #428]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a6e      	ldr	r2, [pc, #440]	@ (8005a00 <HAL_RCC_OscConfig+0x33c>)
 8005848:	4013      	ands	r3, r2
 800584a:	0019      	movs	r1, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	4b67      	ldr	r3, [pc, #412]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005852:	430a      	orrs	r2, r1
 8005854:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005856:	4b66      	ldr	r3, [pc, #408]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	0adb      	lsrs	r3, r3, #11
 800585c:	2207      	movs	r2, #7
 800585e:	4013      	ands	r3, r2
 8005860:	4a68      	ldr	r2, [pc, #416]	@ (8005a04 <HAL_RCC_OscConfig+0x340>)
 8005862:	40da      	lsrs	r2, r3
 8005864:	4b68      	ldr	r3, [pc, #416]	@ (8005a08 <HAL_RCC_OscConfig+0x344>)
 8005866:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005868:	4b68      	ldr	r3, [pc, #416]	@ (8005a0c <HAL_RCC_OscConfig+0x348>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	0018      	movs	r0, r3
 800586e:	f7fe fded 	bl	800444c <HAL_InitTick>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d051      	beq.n	800591a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e221      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d030      	beq.n	80058e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005882:	4b5b      	ldr	r3, [pc, #364]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a5e      	ldr	r2, [pc, #376]	@ (8005a00 <HAL_RCC_OscConfig+0x33c>)
 8005888:	4013      	ands	r3, r2
 800588a:	0019      	movs	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	4b57      	ldr	r3, [pc, #348]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005896:	4b56      	ldr	r3, [pc, #344]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b55      	ldr	r3, [pc, #340]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800589c:	2180      	movs	r1, #128	@ 0x80
 800589e:	0049      	lsls	r1, r1, #1
 80058a0:	430a      	orrs	r2, r1
 80058a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fe fe2e 	bl	8004504 <HAL_GetTick>
 80058a8:	0003      	movs	r3, r0
 80058aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ae:	f7fe fe29 	bl	8004504 <HAL_GetTick>
 80058b2:	0002      	movs	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e1fe      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058c0:	4b4b      	ldr	r3, [pc, #300]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	2380      	movs	r3, #128	@ 0x80
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	4013      	ands	r3, r2
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058cc:	4b48      	ldr	r3, [pc, #288]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	4a4a      	ldr	r2, [pc, #296]	@ (80059fc <HAL_RCC_OscConfig+0x338>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	0019      	movs	r1, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	4b44      	ldr	r3, [pc, #272]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	e01b      	b.n	800591c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80058e4:	4b42      	ldr	r3, [pc, #264]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	4b41      	ldr	r3, [pc, #260]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80058ea:	4949      	ldr	r1, [pc, #292]	@ (8005a10 <HAL_RCC_OscConfig+0x34c>)
 80058ec:	400a      	ands	r2, r1
 80058ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fe fe08 	bl	8004504 <HAL_GetTick>
 80058f4:	0003      	movs	r3, r0
 80058f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058fa:	f7fe fe03 	bl	8004504 <HAL_GetTick>
 80058fe:	0002      	movs	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e1d8      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800590c:	4b38      	ldr	r3, [pc, #224]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	2380      	movs	r3, #128	@ 0x80
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4013      	ands	r3, r2
 8005916:	d1f0      	bne.n	80058fa <HAL_RCC_OscConfig+0x236>
 8005918:	e000      	b.n	800591c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800591a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2208      	movs	r2, #8
 8005922:	4013      	ands	r3, r2
 8005924:	d047      	beq.n	80059b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005926:	4b32      	ldr	r3, [pc, #200]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2238      	movs	r2, #56	@ 0x38
 800592c:	4013      	ands	r3, r2
 800592e:	2b18      	cmp	r3, #24
 8005930:	d10a      	bne.n	8005948 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005932:	4b2f      	ldr	r3, [pc, #188]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005936:	2202      	movs	r2, #2
 8005938:	4013      	ands	r3, r2
 800593a:	d03c      	beq.n	80059b6 <HAL_RCC_OscConfig+0x2f2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d138      	bne.n	80059b6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e1ba      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d019      	beq.n	8005984 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005950:	4b27      	ldr	r3, [pc, #156]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005952:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005954:	4b26      	ldr	r3, [pc, #152]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005956:	2101      	movs	r1, #1
 8005958:	430a      	orrs	r2, r1
 800595a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fe fdd2 	bl	8004504 <HAL_GetTick>
 8005960:	0003      	movs	r3, r0
 8005962:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005966:	f7fe fdcd 	bl	8004504 <HAL_GetTick>
 800596a:	0002      	movs	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e1a2      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005978:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800597a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800597c:	2202      	movs	r2, #2
 800597e:	4013      	ands	r3, r2
 8005980:	d0f1      	beq.n	8005966 <HAL_RCC_OscConfig+0x2a2>
 8005982:	e018      	b.n	80059b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005984:	4b1a      	ldr	r3, [pc, #104]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 8005986:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005988:	4b19      	ldr	r3, [pc, #100]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 800598a:	2101      	movs	r1, #1
 800598c:	438a      	bics	r2, r1
 800598e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fe fdb8 	bl	8004504 <HAL_GetTick>
 8005994:	0003      	movs	r3, r0
 8005996:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800599a:	f7fe fdb3 	bl	8004504 <HAL_GetTick>
 800599e:	0002      	movs	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e188      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059ac:	4b10      	ldr	r3, [pc, #64]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80059ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b0:	2202      	movs	r2, #2
 80059b2:	4013      	ands	r3, r2
 80059b4:	d1f1      	bne.n	800599a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2204      	movs	r2, #4
 80059bc:	4013      	ands	r3, r2
 80059be:	d100      	bne.n	80059c2 <HAL_RCC_OscConfig+0x2fe>
 80059c0:	e0c6      	b.n	8005b50 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059c2:	231f      	movs	r3, #31
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80059ca:	4b09      	ldr	r3, [pc, #36]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2238      	movs	r2, #56	@ 0x38
 80059d0:	4013      	ands	r3, r2
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d11e      	bne.n	8005a14 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80059d6:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <HAL_RCC_OscConfig+0x32c>)
 80059d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059da:	2202      	movs	r2, #2
 80059dc:	4013      	ands	r3, r2
 80059de:	d100      	bne.n	80059e2 <HAL_RCC_OscConfig+0x31e>
 80059e0:	e0b6      	b.n	8005b50 <HAL_RCC_OscConfig+0x48c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d000      	beq.n	80059ec <HAL_RCC_OscConfig+0x328>
 80059ea:	e0b1      	b.n	8005b50 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e166      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
 80059f0:	40021000 	.word	0x40021000
 80059f4:	fffeffff 	.word	0xfffeffff
 80059f8:	fffbffff 	.word	0xfffbffff
 80059fc:	ffff80ff 	.word	0xffff80ff
 8005a00:	ffffc7ff 	.word	0xffffc7ff
 8005a04:	00f42400 	.word	0x00f42400
 8005a08:	2000004c 	.word	0x2000004c
 8005a0c:	20000050 	.word	0x20000050
 8005a10:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a14:	4bac      	ldr	r3, [pc, #688]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a18:	2380      	movs	r3, #128	@ 0x80
 8005a1a:	055b      	lsls	r3, r3, #21
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_OscConfig+0x360>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <HAL_RCC_OscConfig+0x362>
 8005a24:	2300      	movs	r3, #0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d011      	beq.n	8005a4e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a2a:	4ba7      	ldr	r3, [pc, #668]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a2e:	4ba6      	ldr	r3, [pc, #664]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005a30:	2180      	movs	r1, #128	@ 0x80
 8005a32:	0549      	lsls	r1, r1, #21
 8005a34:	430a      	orrs	r2, r1
 8005a36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a38:	4ba3      	ldr	r3, [pc, #652]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	055b      	lsls	r3, r3, #21
 8005a40:	4013      	ands	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005a46:	231f      	movs	r3, #31
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a4e:	4b9f      	ldr	r3, [pc, #636]	@ (8005ccc <HAL_RCC_OscConfig+0x608>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	2380      	movs	r3, #128	@ 0x80
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4013      	ands	r3, r2
 8005a58:	d11a      	bne.n	8005a90 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a5a:	4b9c      	ldr	r3, [pc, #624]	@ (8005ccc <HAL_RCC_OscConfig+0x608>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4b9b      	ldr	r3, [pc, #620]	@ (8005ccc <HAL_RCC_OscConfig+0x608>)
 8005a60:	2180      	movs	r1, #128	@ 0x80
 8005a62:	0049      	lsls	r1, r1, #1
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005a68:	f7fe fd4c 	bl	8004504 <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a72:	f7fe fd47 	bl	8004504 <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e11c      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a84:	4b91      	ldr	r3, [pc, #580]	@ (8005ccc <HAL_RCC_OscConfig+0x608>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	2380      	movs	r3, #128	@ 0x80
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d0f0      	beq.n	8005a72 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d106      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x3e2>
 8005a98:	4b8b      	ldr	r3, [pc, #556]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005a9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a9c:	4b8a      	ldr	r3, [pc, #552]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005aa4:	e01c      	b.n	8005ae0 <HAL_RCC_OscConfig+0x41c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x404>
 8005aae:	4b86      	ldr	r3, [pc, #536]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005ab0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ab2:	4b85      	ldr	r3, [pc, #532]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005ab4:	2104      	movs	r1, #4
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005aba:	4b83      	ldr	r3, [pc, #524]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005abc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005abe:	4b82      	ldr	r3, [pc, #520]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ac6:	e00b      	b.n	8005ae0 <HAL_RCC_OscConfig+0x41c>
 8005ac8:	4b7f      	ldr	r3, [pc, #508]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005aca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005acc:	4b7e      	ldr	r3, [pc, #504]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005ace:	2101      	movs	r1, #1
 8005ad0:	438a      	bics	r2, r1
 8005ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ad4:	4b7c      	ldr	r3, [pc, #496]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005ad6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ad8:	4b7b      	ldr	r3, [pc, #492]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005ada:	2104      	movs	r1, #4
 8005adc:	438a      	bics	r2, r1
 8005ade:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d014      	beq.n	8005b12 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fe fd0c 	bl	8004504 <HAL_GetTick>
 8005aec:	0003      	movs	r3, r0
 8005aee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af0:	e009      	b.n	8005b06 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af2:	f7fe fd07 	bl	8004504 <HAL_GetTick>
 8005af6:	0002      	movs	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	4a74      	ldr	r2, [pc, #464]	@ (8005cd0 <HAL_RCC_OscConfig+0x60c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e0db      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b06:	4b70      	ldr	r3, [pc, #448]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCC_OscConfig+0x42e>
 8005b10:	e013      	b.n	8005b3a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b12:	f7fe fcf7 	bl	8004504 <HAL_GetTick>
 8005b16:	0003      	movs	r3, r0
 8005b18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b1a:	e009      	b.n	8005b30 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1c:	f7fe fcf2 	bl	8004504 <HAL_GetTick>
 8005b20:	0002      	movs	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	4a6a      	ldr	r2, [pc, #424]	@ (8005cd0 <HAL_RCC_OscConfig+0x60c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e0c6      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b30:	4b65      	ldr	r3, [pc, #404]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b34:	2202      	movs	r2, #2
 8005b36:	4013      	ands	r3, r2
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005b3a:	231f      	movs	r3, #31
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d105      	bne.n	8005b50 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b44:	4b60      	ldr	r3, [pc, #384]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b48:	4b5f      	ldr	r3, [pc, #380]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005b4a:	4962      	ldr	r1, [pc, #392]	@ (8005cd4 <HAL_RCC_OscConfig+0x610>)
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d100      	bne.n	8005b5a <HAL_RCC_OscConfig+0x496>
 8005b58:	e0b0      	b.n	8005cbc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2238      	movs	r2, #56	@ 0x38
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d100      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4a4>
 8005b66:	e078      	b.n	8005c5a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d153      	bne.n	8005c18 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b70:	4b55      	ldr	r3, [pc, #340]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b54      	ldr	r3, [pc, #336]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005b76:	4958      	ldr	r1, [pc, #352]	@ (8005cd8 <HAL_RCC_OscConfig+0x614>)
 8005b78:	400a      	ands	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7c:	f7fe fcc2 	bl	8004504 <HAL_GetTick>
 8005b80:	0003      	movs	r3, r0
 8005b82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b86:	f7fe fcbd 	bl	8004504 <HAL_GetTick>
 8005b8a:	0002      	movs	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e092      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b98:	4b4b      	ldr	r3, [pc, #300]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	2380      	movs	r3, #128	@ 0x80
 8005b9e:	049b      	lsls	r3, r3, #18
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d1f0      	bne.n	8005b86 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ba4:	4b48      	ldr	r3, [pc, #288]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8005cdc <HAL_RCC_OscConfig+0x618>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	0019      	movs	r1, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1a      	ldr	r2, [r3, #32]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005bd8:	2180      	movs	r1, #128	@ 0x80
 8005bda:	0449      	lsls	r1, r1, #17
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005be0:	4b39      	ldr	r3, [pc, #228]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	4b38      	ldr	r3, [pc, #224]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005be6:	2180      	movs	r1, #128	@ 0x80
 8005be8:	0549      	lsls	r1, r1, #21
 8005bea:	430a      	orrs	r2, r1
 8005bec:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bee:	f7fe fc89 	bl	8004504 <HAL_GetTick>
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf8:	f7fe fc84 	bl	8004504 <HAL_GetTick>
 8005bfc:	0002      	movs	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e059      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	2380      	movs	r3, #128	@ 0x80
 8005c10:	049b      	lsls	r3, r3, #18
 8005c12:	4013      	ands	r3, r2
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x534>
 8005c16:	e051      	b.n	8005cbc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c18:	4b2b      	ldr	r3, [pc, #172]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005c1e:	492e      	ldr	r1, [pc, #184]	@ (8005cd8 <HAL_RCC_OscConfig+0x614>)
 8005c20:	400a      	ands	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c24:	f7fe fc6e 	bl	8004504 <HAL_GetTick>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2e:	f7fe fc69 	bl	8004504 <HAL_GetTick>
 8005c32:	0002      	movs	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e03e      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c40:	4b21      	ldr	r3, [pc, #132]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	2380      	movs	r3, #128	@ 0x80
 8005c46:	049b      	lsls	r3, r3, #18
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d1f0      	bne.n	8005c2e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005c52:	4923      	ldr	r1, [pc, #140]	@ (8005ce0 <HAL_RCC_OscConfig+0x61c>)
 8005c54:	400a      	ands	r2, r1
 8005c56:	60da      	str	r2, [r3, #12]
 8005c58:	e030      	b.n	8005cbc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e02b      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005c66:	4b18      	ldr	r3, [pc, #96]	@ (8005cc8 <HAL_RCC_OscConfig+0x604>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2203      	movs	r2, #3
 8005c70:	401a      	ands	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d11e      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2270      	movs	r2, #112	@ 0x70
 8005c7e:	401a      	ands	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d117      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	23fe      	movs	r3, #254	@ 0xfe
 8005c8c:	01db      	lsls	r3, r3, #7
 8005c8e:	401a      	ands	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d10e      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	23f8      	movs	r3, #248	@ 0xf8
 8005c9e:	039b      	lsls	r3, r3, #14
 8005ca0:	401a      	ands	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	0f5b      	lsrs	r3, r3, #29
 8005cae:	075a      	lsls	r2, r3, #29
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b008      	add	sp, #32
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40007000 	.word	0x40007000
 8005cd0:	00001388 	.word	0x00001388
 8005cd4:	efffffff 	.word	0xefffffff
 8005cd8:	feffffff 	.word	0xfeffffff
 8005cdc:	1fc1808c 	.word	0x1fc1808c
 8005ce0:	effefffc 	.word	0xeffefffc

08005ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0e9      	b.n	8005ecc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf8:	4b76      	ldr	r3, [pc, #472]	@ (8005ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2207      	movs	r2, #7
 8005cfe:	4013      	ands	r3, r2
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d91e      	bls.n	8005d44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d06:	4b73      	ldr	r3, [pc, #460]	@ (8005ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2207      	movs	r2, #7
 8005d0c:	4393      	bics	r3, r2
 8005d0e:	0019      	movs	r1, r3
 8005d10:	4b70      	ldr	r3, [pc, #448]	@ (8005ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d18:	f7fe fbf4 	bl	8004504 <HAL_GetTick>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d20:	e009      	b.n	8005d36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d22:	f7fe fbef 	bl	8004504 <HAL_GetTick>
 8005d26:	0002      	movs	r2, r0
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8005ed8 <HAL_RCC_ClockConfig+0x1f4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e0ca      	b.n	8005ecc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d36:	4b67      	ldr	r3, [pc, #412]	@ (8005ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2207      	movs	r2, #7
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d1ee      	bne.n	8005d22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d015      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2204      	movs	r2, #4
 8005d54:	4013      	ands	r3, r2
 8005d56:	d006      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d58:	4b60      	ldr	r3, [pc, #384]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	4b5f      	ldr	r3, [pc, #380]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005d5e:	21e0      	movs	r1, #224	@ 0xe0
 8005d60:	01c9      	lsls	r1, r1, #7
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d66:	4b5d      	ldr	r3, [pc, #372]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	4a5d      	ldr	r2, [pc, #372]	@ (8005ee0 <HAL_RCC_ClockConfig+0x1fc>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	0019      	movs	r1, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	4b59      	ldr	r3, [pc, #356]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005d76:	430a      	orrs	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4013      	ands	r3, r2
 8005d82:	d057      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d8c:	4b53      	ldr	r3, [pc, #332]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	2380      	movs	r3, #128	@ 0x80
 8005d92:	029b      	lsls	r3, r3, #10
 8005d94:	4013      	ands	r3, r2
 8005d96:	d12b      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e097      	b.n	8005ecc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d107      	bne.n	8005db4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da4:	4b4d      	ldr	r3, [pc, #308]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	2380      	movs	r3, #128	@ 0x80
 8005daa:	049b      	lsls	r3, r3, #18
 8005dac:	4013      	ands	r3, r2
 8005dae:	d11f      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e08b      	b.n	8005ecc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d107      	bne.n	8005dcc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dbc:	4b47      	ldr	r3, [pc, #284]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	2380      	movs	r3, #128	@ 0x80
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	d113      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e07f      	b.n	8005ecc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dd4:	4b41      	ldr	r3, [pc, #260]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd8:	2202      	movs	r2, #2
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d108      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e074      	b.n	8005ecc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de2:	4b3e      	ldr	r3, [pc, #248]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de6:	2202      	movs	r2, #2
 8005de8:	4013      	ands	r3, r2
 8005dea:	d101      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e06d      	b.n	8005ecc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005df0:	4b3a      	ldr	r3, [pc, #232]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2207      	movs	r2, #7
 8005df6:	4393      	bics	r3, r2
 8005df8:	0019      	movs	r1, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	4b37      	ldr	r3, [pc, #220]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005e00:	430a      	orrs	r2, r1
 8005e02:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e04:	f7fe fb7e 	bl	8004504 <HAL_GetTick>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0c:	e009      	b.n	8005e22 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e0e:	f7fe fb79 	bl	8004504 <HAL_GetTick>
 8005e12:	0002      	movs	r2, r0
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	4a2f      	ldr	r2, [pc, #188]	@ (8005ed8 <HAL_RCC_ClockConfig+0x1f4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e054      	b.n	8005ecc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e22:	4b2e      	ldr	r3, [pc, #184]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2238      	movs	r2, #56	@ 0x38
 8005e28:	401a      	ands	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d1ec      	bne.n	8005e0e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e34:	4b27      	ldr	r3, [pc, #156]	@ (8005ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2207      	movs	r2, #7
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d21e      	bcs.n	8005e80 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e42:	4b24      	ldr	r3, [pc, #144]	@ (8005ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2207      	movs	r2, #7
 8005e48:	4393      	bics	r3, r2
 8005e4a:	0019      	movs	r1, r3
 8005e4c:	4b21      	ldr	r3, [pc, #132]	@ (8005ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e54:	f7fe fb56 	bl	8004504 <HAL_GetTick>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e5c:	e009      	b.n	8005e72 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e5e:	f7fe fb51 	bl	8004504 <HAL_GetTick>
 8005e62:	0002      	movs	r2, r0
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed8 <HAL_RCC_ClockConfig+0x1f4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e02c      	b.n	8005ecc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e72:	4b18      	ldr	r3, [pc, #96]	@ (8005ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2207      	movs	r2, #7
 8005e78:	4013      	ands	r3, r2
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d1ee      	bne.n	8005e5e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2204      	movs	r2, #4
 8005e86:	4013      	ands	r3, r2
 8005e88:	d009      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005e8a:	4b14      	ldr	r3, [pc, #80]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ee4 <HAL_RCC_ClockConfig+0x200>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	0019      	movs	r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	4b10      	ldr	r3, [pc, #64]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005e9e:	f000 f829 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8005ea2:	0001      	movs	r1, r0
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8005edc <HAL_RCC_ClockConfig+0x1f8>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	220f      	movs	r2, #15
 8005eac:	401a      	ands	r2, r3
 8005eae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <HAL_RCC_ClockConfig+0x204>)
 8005eb0:	0092      	lsls	r2, r2, #2
 8005eb2:	58d3      	ldr	r3, [r2, r3]
 8005eb4:	221f      	movs	r2, #31
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	000a      	movs	r2, r1
 8005eba:	40da      	lsrs	r2, r3
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <HAL_RCC_ClockConfig+0x208>)
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <HAL_RCC_ClockConfig+0x20c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f7fe fac1 	bl	800444c <HAL_InitTick>
 8005eca:	0003      	movs	r3, r0
}
 8005ecc:	0018      	movs	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b004      	add	sp, #16
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40022000 	.word	0x40022000
 8005ed8:	00001388 	.word	0x00001388
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	fffff0ff 	.word	0xfffff0ff
 8005ee4:	ffff8fff 	.word	0xffff8fff
 8005ee8:	0800cd04 	.word	0x0800cd04
 8005eec:	2000004c 	.word	0x2000004c
 8005ef0:	20000050 	.word	0x20000050

08005ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005efa:	4b3c      	ldr	r3, [pc, #240]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2238      	movs	r2, #56	@ 0x38
 8005f00:	4013      	ands	r3, r2
 8005f02:	d10f      	bne.n	8005f24 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005f04:	4b39      	ldr	r3, [pc, #228]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	0adb      	lsrs	r3, r3, #11
 8005f0a:	2207      	movs	r2, #7
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2201      	movs	r2, #1
 8005f10:	409a      	lsls	r2, r3
 8005f12:	0013      	movs	r3, r2
 8005f14:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	4835      	ldr	r0, [pc, #212]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f1a:	f7fa f90d 	bl	8000138 <__udivsi3>
 8005f1e:	0003      	movs	r3, r0
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	e05d      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f24:	4b31      	ldr	r3, [pc, #196]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2238      	movs	r2, #56	@ 0x38
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d102      	bne.n	8005f36 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f30:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	e054      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f36:	4b2d      	ldr	r3, [pc, #180]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2238      	movs	r2, #56	@ 0x38
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d138      	bne.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005f42:	4b2a      	ldr	r3, [pc, #168]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	2203      	movs	r2, #3
 8005f48:	4013      	ands	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f4c:	4b27      	ldr	r3, [pc, #156]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	091b      	lsrs	r3, r3, #4
 8005f52:	2207      	movs	r2, #7
 8005f54:	4013      	ands	r3, r2
 8005f56:	3301      	adds	r3, #1
 8005f58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d10d      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	4823      	ldr	r0, [pc, #140]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f64:	f7fa f8e8 	bl	8000138 <__udivsi3>
 8005f68:	0003      	movs	r3, r0
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	227f      	movs	r2, #127	@ 0x7f
 8005f74:	4013      	ands	r3, r2
 8005f76:	434b      	muls	r3, r1
 8005f78:	617b      	str	r3, [r7, #20]
        break;
 8005f7a:	e00d      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	481c      	ldr	r0, [pc, #112]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f80:	f7fa f8da 	bl	8000138 <__udivsi3>
 8005f84:	0003      	movs	r3, r0
 8005f86:	0019      	movs	r1, r3
 8005f88:	4b18      	ldr	r3, [pc, #96]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	227f      	movs	r2, #127	@ 0x7f
 8005f90:	4013      	ands	r3, r2
 8005f92:	434b      	muls	r3, r1
 8005f94:	617b      	str	r3, [r7, #20]
        break;
 8005f96:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005f98:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	0f5b      	lsrs	r3, r3, #29
 8005f9e:	2207      	movs	r2, #7
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	6978      	ldr	r0, [r7, #20]
 8005faa:	f7fa f8c5 	bl	8000138 <__udivsi3>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	e015      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2238      	movs	r2, #56	@ 0x38
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d103      	bne.n	8005fc8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	e00b      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005fc8:	4b08      	ldr	r3, [pc, #32]	@ (8005fec <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2238      	movs	r2, #56	@ 0x38
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b18      	cmp	r3, #24
 8005fd2:	d103      	bne.n	8005fdc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005fd4:	23fa      	movs	r3, #250	@ 0xfa
 8005fd6:	01db      	lsls	r3, r3, #7
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	e001      	b.n	8005fe0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fe0:	693b      	ldr	r3, [r7, #16]
}
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	b006      	add	sp, #24
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			@ (mov r8, r8)
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	00f42400 	.word	0x00f42400

08005ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ff8:	4b02      	ldr	r3, [pc, #8]	@ (8006004 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
}
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	2000004c 	.word	0x2000004c

08006008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006008:	b5b0      	push	{r4, r5, r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800600c:	f7ff fff2 	bl	8005ff4 <HAL_RCC_GetHCLKFreq>
 8006010:	0004      	movs	r4, r0
 8006012:	f7ff fb4b 	bl	80056ac <LL_RCC_GetAPB1Prescaler>
 8006016:	0003      	movs	r3, r0
 8006018:	0b1a      	lsrs	r2, r3, #12
 800601a:	4b05      	ldr	r3, [pc, #20]	@ (8006030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800601c:	0092      	lsls	r2, r2, #2
 800601e:	58d3      	ldr	r3, [r2, r3]
 8006020:	221f      	movs	r2, #31
 8006022:	4013      	ands	r3, r2
 8006024:	40dc      	lsrs	r4, r3
 8006026:	0023      	movs	r3, r4
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	bdb0      	pop	{r4, r5, r7, pc}
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	0800cd44 	.word	0x0800cd44

08006034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800603c:	2313      	movs	r3, #19
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006044:	2312      	movs	r3, #18
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	2380      	movs	r3, #128	@ 0x80
 8006052:	029b      	lsls	r3, r3, #10
 8006054:	4013      	ands	r3, r2
 8006056:	d100      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006058:	e0a3      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800605a:	2011      	movs	r0, #17
 800605c:	183b      	adds	r3, r7, r0
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006062:	4b86      	ldr	r3, [pc, #536]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006064:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006066:	2380      	movs	r3, #128	@ 0x80
 8006068:	055b      	lsls	r3, r3, #21
 800606a:	4013      	ands	r3, r2
 800606c:	d110      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800606e:	4b83      	ldr	r3, [pc, #524]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006072:	4b82      	ldr	r3, [pc, #520]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006074:	2180      	movs	r1, #128	@ 0x80
 8006076:	0549      	lsls	r1, r1, #21
 8006078:	430a      	orrs	r2, r1
 800607a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800607c:	4b7f      	ldr	r3, [pc, #508]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800607e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006080:	2380      	movs	r3, #128	@ 0x80
 8006082:	055b      	lsls	r3, r3, #21
 8006084:	4013      	ands	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800608a:	183b      	adds	r3, r7, r0
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006090:	4b7b      	ldr	r3, [pc, #492]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4b7a      	ldr	r3, [pc, #488]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006096:	2180      	movs	r1, #128	@ 0x80
 8006098:	0049      	lsls	r1, r1, #1
 800609a:	430a      	orrs	r2, r1
 800609c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800609e:	f7fe fa31 	bl	8004504 <HAL_GetTick>
 80060a2:	0003      	movs	r3, r0
 80060a4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060a6:	e00b      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060a8:	f7fe fa2c 	bl	8004504 <HAL_GetTick>
 80060ac:	0002      	movs	r2, r0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d904      	bls.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80060b6:	2313      	movs	r3, #19
 80060b8:	18fb      	adds	r3, r7, r3
 80060ba:	2203      	movs	r2, #3
 80060bc:	701a      	strb	r2, [r3, #0]
        break;
 80060be:	e005      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	2380      	movs	r3, #128	@ 0x80
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4013      	ands	r3, r2
 80060ca:	d0ed      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80060cc:	2313      	movs	r3, #19
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d154      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060d6:	4b69      	ldr	r3, [pc, #420]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060da:	23c0      	movs	r3, #192	@ 0xc0
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4013      	ands	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d019      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d014      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060f2:	4b62      	ldr	r3, [pc, #392]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f6:	4a63      	ldr	r2, [pc, #396]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060fc:	4b5f      	ldr	r3, [pc, #380]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80060fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006100:	4b5e      	ldr	r3, [pc, #376]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006102:	2180      	movs	r1, #128	@ 0x80
 8006104:	0249      	lsls	r1, r1, #9
 8006106:	430a      	orrs	r2, r1
 8006108:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800610a:	4b5c      	ldr	r3, [pc, #368]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800610c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800610e:	4b5b      	ldr	r3, [pc, #364]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006110:	495d      	ldr	r1, [pc, #372]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006112:	400a      	ands	r2, r1
 8006114:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006116:	4b59      	ldr	r3, [pc, #356]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2201      	movs	r2, #1
 8006120:	4013      	ands	r3, r2
 8006122:	d016      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fe f9ee 	bl	8004504 <HAL_GetTick>
 8006128:	0003      	movs	r3, r0
 800612a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800612c:	e00c      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612e:	f7fe f9e9 	bl	8004504 <HAL_GetTick>
 8006132:	0002      	movs	r2, r0
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	4a54      	ldr	r2, [pc, #336]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d904      	bls.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800613e:	2313      	movs	r3, #19
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	2203      	movs	r2, #3
 8006144:	701a      	strb	r2, [r3, #0]
            break;
 8006146:	e004      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006148:	4b4c      	ldr	r3, [pc, #304]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800614a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800614c:	2202      	movs	r2, #2
 800614e:	4013      	ands	r3, r2
 8006150:	d0ed      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006152:	2313      	movs	r3, #19
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800615c:	4b47      	ldr	r3, [pc, #284]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800615e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006160:	4a48      	ldr	r2, [pc, #288]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006162:	4013      	ands	r3, r2
 8006164:	0019      	movs	r1, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	4b44      	ldr	r3, [pc, #272]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800616c:	430a      	orrs	r2, r1
 800616e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006170:	e00c      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006172:	2312      	movs	r3, #18
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	2213      	movs	r2, #19
 8006178:	18ba      	adds	r2, r7, r2
 800617a:	7812      	ldrb	r2, [r2, #0]
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e005      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006180:	2312      	movs	r3, #18
 8006182:	18fb      	adds	r3, r7, r3
 8006184:	2213      	movs	r2, #19
 8006186:	18ba      	adds	r2, r7, r2
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800618c:	2311      	movs	r3, #17
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006196:	4b39      	ldr	r3, [pc, #228]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006198:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800619a:	4b38      	ldr	r3, [pc, #224]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800619c:	493c      	ldr	r1, [pc, #240]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800619e:	400a      	ands	r2, r1
 80061a0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	d009      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061ac:	4b33      	ldr	r3, [pc, #204]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b0:	2203      	movs	r2, #3
 80061b2:	4393      	bics	r3, r2
 80061b4:	0019      	movs	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	4b30      	ldr	r3, [pc, #192]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061bc:	430a      	orrs	r2, r1
 80061be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2202      	movs	r2, #2
 80061c6:	4013      	ands	r3, r2
 80061c8:	d009      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061ca:	4b2c      	ldr	r3, [pc, #176]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ce:	220c      	movs	r2, #12
 80061d0:	4393      	bics	r3, r2
 80061d2:	0019      	movs	r1, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	4b28      	ldr	r3, [pc, #160]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061da:	430a      	orrs	r2, r1
 80061dc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2220      	movs	r2, #32
 80061e4:	4013      	ands	r3, r2
 80061e6:	d009      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061e8:	4b24      	ldr	r3, [pc, #144]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ec:	4a29      	ldr	r2, [pc, #164]	@ (8006294 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ee:	4013      	ands	r3, r2
 80061f0:	0019      	movs	r1, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	4b21      	ldr	r3, [pc, #132]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80061f8:	430a      	orrs	r2, r1
 80061fa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	2380      	movs	r3, #128	@ 0x80
 8006202:	01db      	lsls	r3, r3, #7
 8006204:	4013      	ands	r3, r2
 8006206:	d015      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006208:	4b1c      	ldr	r3, [pc, #112]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800620a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	0899      	lsrs	r1, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	4b19      	ldr	r3, [pc, #100]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006216:	430a      	orrs	r2, r1
 8006218:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	2380      	movs	r3, #128	@ 0x80
 8006220:	05db      	lsls	r3, r3, #23
 8006222:	429a      	cmp	r2, r3
 8006224:	d106      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006226:	4b15      	ldr	r3, [pc, #84]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	4b14      	ldr	r3, [pc, #80]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800622c:	2180      	movs	r1, #128	@ 0x80
 800622e:	0249      	lsls	r1, r1, #9
 8006230:	430a      	orrs	r2, r1
 8006232:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	2380      	movs	r3, #128	@ 0x80
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	4013      	ands	r3, r2
 800623e:	d016      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006240:	4b0e      	ldr	r3, [pc, #56]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	4a14      	ldr	r2, [pc, #80]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006246:	4013      	ands	r3, r2
 8006248:	0019      	movs	r1, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	4b0b      	ldr	r3, [pc, #44]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006250:	430a      	orrs	r2, r1
 8006252:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	2380      	movs	r3, #128	@ 0x80
 800625a:	01db      	lsls	r3, r3, #7
 800625c:	429a      	cmp	r2, r3
 800625e:	d106      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006260:	4b06      	ldr	r3, [pc, #24]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	4b05      	ldr	r3, [pc, #20]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006266:	2180      	movs	r1, #128	@ 0x80
 8006268:	0249      	lsls	r1, r1, #9
 800626a:	430a      	orrs	r2, r1
 800626c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800626e:	2312      	movs	r3, #18
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	781b      	ldrb	r3, [r3, #0]
}
 8006274:	0018      	movs	r0, r3
 8006276:	46bd      	mov	sp, r7
 8006278:	b006      	add	sp, #24
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40021000 	.word	0x40021000
 8006280:	40007000 	.word	0x40007000
 8006284:	fffffcff 	.word	0xfffffcff
 8006288:	fffeffff 	.word	0xfffeffff
 800628c:	00001388 	.word	0x00001388
 8006290:	efffffff 	.word	0xefffffff
 8006294:	ffffcfff 	.word	0xffffcfff
 8006298:	ffff3fff 	.word	0xffff3fff

0800629c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e04a      	b.n	8006344 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	223d      	movs	r2, #61	@ 0x3d
 80062b2:	5c9b      	ldrb	r3, [r3, r2]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d107      	bne.n	80062ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	223c      	movs	r2, #60	@ 0x3c
 80062be:	2100      	movs	r1, #0
 80062c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7fd fd4f 	bl	8003d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	223d      	movs	r2, #61	@ 0x3d
 80062ce:	2102      	movs	r1, #2
 80062d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3304      	adds	r3, #4
 80062da:	0019      	movs	r1, r3
 80062dc:	0010      	movs	r0, r2
 80062de:	f000 f9e5 	bl	80066ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2248      	movs	r2, #72	@ 0x48
 80062e6:	2101      	movs	r1, #1
 80062e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	223e      	movs	r2, #62	@ 0x3e
 80062ee:	2101      	movs	r1, #1
 80062f0:	5499      	strb	r1, [r3, r2]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	223f      	movs	r2, #63	@ 0x3f
 80062f6:	2101      	movs	r1, #1
 80062f8:	5499      	strb	r1, [r3, r2]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2240      	movs	r2, #64	@ 0x40
 80062fe:	2101      	movs	r1, #1
 8006300:	5499      	strb	r1, [r3, r2]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2241      	movs	r2, #65	@ 0x41
 8006306:	2101      	movs	r1, #1
 8006308:	5499      	strb	r1, [r3, r2]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2242      	movs	r2, #66	@ 0x42
 800630e:	2101      	movs	r1, #1
 8006310:	5499      	strb	r1, [r3, r2]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2243      	movs	r2, #67	@ 0x43
 8006316:	2101      	movs	r1, #1
 8006318:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2244      	movs	r2, #68	@ 0x44
 800631e:	2101      	movs	r1, #1
 8006320:	5499      	strb	r1, [r3, r2]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2245      	movs	r2, #69	@ 0x45
 8006326:	2101      	movs	r1, #1
 8006328:	5499      	strb	r1, [r3, r2]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2246      	movs	r2, #70	@ 0x46
 800632e:	2101      	movs	r1, #1
 8006330:	5499      	strb	r1, [r3, r2]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2247      	movs	r2, #71	@ 0x47
 8006336:	2101      	movs	r1, #1
 8006338:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	223d      	movs	r2, #61	@ 0x3d
 800633e:	2101      	movs	r1, #1
 8006340:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	0018      	movs	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	b002      	add	sp, #8
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	223d      	movs	r2, #61	@ 0x3d
 8006358:	5c9b      	ldrb	r3, [r3, r2]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d001      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e03c      	b.n	80063de <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	223d      	movs	r2, #61	@ 0x3d
 8006368:	2102      	movs	r1, #2
 800636a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2101      	movs	r1, #1
 8006378:	430a      	orrs	r2, r1
 800637a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a19      	ldr	r2, [pc, #100]	@ (80063e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_TIM_Base_Start_IT+0x4e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a18      	ldr	r2, [pc, #96]	@ (80063ec <HAL_TIM_Base_Start_IT+0xa0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_TIM_Base_Start_IT+0x4e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a16      	ldr	r2, [pc, #88]	@ (80063f0 <HAL_TIM_Base_Start_IT+0xa4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d116      	bne.n	80063c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4a14      	ldr	r2, [pc, #80]	@ (80063f4 <HAL_TIM_Base_Start_IT+0xa8>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b06      	cmp	r3, #6
 80063aa:	d016      	beq.n	80063da <HAL_TIM_Base_Start_IT+0x8e>
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	2380      	movs	r3, #128	@ 0x80
 80063b0:	025b      	lsls	r3, r3, #9
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d011      	beq.n	80063da <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2101      	movs	r1, #1
 80063c2:	430a      	orrs	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c6:	e008      	b.n	80063da <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2101      	movs	r1, #1
 80063d4:	430a      	orrs	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e000      	b.n	80063dc <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063da:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	0018      	movs	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	b004      	add	sp, #16
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	46c0      	nop			@ (mov r8, r8)
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	00010007 	.word	0x00010007

080063f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2202      	movs	r2, #2
 8006408:	4013      	ands	r3, r2
 800640a:	2b02      	cmp	r3, #2
 800640c:	d124      	bne.n	8006458 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2202      	movs	r2, #2
 8006416:	4013      	ands	r3, r2
 8006418:	2b02      	cmp	r3, #2
 800641a:	d11d      	bne.n	8006458 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2203      	movs	r2, #3
 8006422:	4252      	negs	r2, r2
 8006424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2203      	movs	r2, #3
 8006434:	4013      	ands	r3, r2
 8006436:	d004      	beq.n	8006442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	0018      	movs	r0, r3
 800643c:	f000 f91e 	bl	800667c <HAL_TIM_IC_CaptureCallback>
 8006440:	e007      	b.n	8006452 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	0018      	movs	r0, r3
 8006446:	f000 f911 	bl	800666c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	0018      	movs	r0, r3
 800644e:	f000 f91d 	bl	800668c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2204      	movs	r2, #4
 8006460:	4013      	ands	r3, r2
 8006462:	2b04      	cmp	r3, #4
 8006464:	d125      	bne.n	80064b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2204      	movs	r2, #4
 800646e:	4013      	ands	r3, r2
 8006470:	2b04      	cmp	r3, #4
 8006472:	d11e      	bne.n	80064b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2205      	movs	r2, #5
 800647a:	4252      	negs	r2, r2
 800647c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2202      	movs	r2, #2
 8006482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	23c0      	movs	r3, #192	@ 0xc0
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4013      	ands	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0018      	movs	r0, r3
 8006496:	f000 f8f1 	bl	800667c <HAL_TIM_IC_CaptureCallback>
 800649a:	e007      	b.n	80064ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f8e4 	bl	800666c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f000 f8f0 	bl	800668c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2208      	movs	r2, #8
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d124      	bne.n	800650a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	2208      	movs	r2, #8
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d11d      	bne.n	800650a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2209      	movs	r2, #9
 80064d4:	4252      	negs	r2, r2
 80064d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2204      	movs	r2, #4
 80064dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	2203      	movs	r2, #3
 80064e6:	4013      	ands	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f000 f8c5 	bl	800667c <HAL_TIM_IC_CaptureCallback>
 80064f2:	e007      	b.n	8006504 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	0018      	movs	r0, r3
 80064f8:	f000 f8b8 	bl	800666c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	0018      	movs	r0, r3
 8006500:	f000 f8c4 	bl	800668c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2210      	movs	r2, #16
 8006512:	4013      	ands	r3, r2
 8006514:	2b10      	cmp	r3, #16
 8006516:	d125      	bne.n	8006564 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2210      	movs	r2, #16
 8006520:	4013      	ands	r3, r2
 8006522:	2b10      	cmp	r3, #16
 8006524:	d11e      	bne.n	8006564 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2211      	movs	r2, #17
 800652c:	4252      	negs	r2, r2
 800652e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2208      	movs	r2, #8
 8006534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	23c0      	movs	r3, #192	@ 0xc0
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4013      	ands	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	0018      	movs	r0, r3
 8006548:	f000 f898 	bl	800667c <HAL_TIM_IC_CaptureCallback>
 800654c:	e007      	b.n	800655e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	0018      	movs	r0, r3
 8006552:	f000 f88b 	bl	800666c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	0018      	movs	r0, r3
 800655a:	f000 f897 	bl	800668c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2201      	movs	r2, #1
 800656c:	4013      	ands	r3, r2
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10f      	bne.n	8006592 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	4013      	ands	r3, r2
 800657c:	2b01      	cmp	r3, #1
 800657e:	d108      	bne.n	8006592 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2202      	movs	r2, #2
 8006586:	4252      	negs	r2, r2
 8006588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	0018      	movs	r0, r3
 800658e:	f000 f865 	bl	800665c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2280      	movs	r2, #128	@ 0x80
 800659a:	4013      	ands	r3, r2
 800659c:	2b80      	cmp	r3, #128	@ 0x80
 800659e:	d10f      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2280      	movs	r2, #128	@ 0x80
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b80      	cmp	r3, #128	@ 0x80
 80065ac:	d108      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2281      	movs	r2, #129	@ 0x81
 80065b4:	4252      	negs	r2, r2
 80065b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	0018      	movs	r0, r3
 80065bc:	f000 f95c 	bl	8006878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691a      	ldr	r2, [r3, #16]
 80065c6:	2380      	movs	r3, #128	@ 0x80
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	401a      	ands	r2, r3
 80065cc:	2380      	movs	r3, #128	@ 0x80
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d10e      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2280      	movs	r2, #128	@ 0x80
 80065dc:	4013      	ands	r3, r2
 80065de:	2b80      	cmp	r3, #128	@ 0x80
 80065e0:	d107      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006658 <HAL_TIM_IRQHandler+0x260>)
 80065e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 f94b 	bl	8006888 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2240      	movs	r2, #64	@ 0x40
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b40      	cmp	r3, #64	@ 0x40
 80065fe:	d10f      	bne.n	8006620 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2240      	movs	r2, #64	@ 0x40
 8006608:	4013      	ands	r3, r2
 800660a:	2b40      	cmp	r3, #64	@ 0x40
 800660c:	d108      	bne.n	8006620 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2241      	movs	r2, #65	@ 0x41
 8006614:	4252      	negs	r2, r2
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	0018      	movs	r0, r3
 800661c:	f000 f83e 	bl	800669c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2220      	movs	r2, #32
 8006628:	4013      	ands	r3, r2
 800662a:	2b20      	cmp	r3, #32
 800662c:	d10f      	bne.n	800664e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	4013      	ands	r3, r2
 8006638:	2b20      	cmp	r3, #32
 800663a:	d108      	bne.n	800664e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2221      	movs	r2, #33	@ 0x21
 8006642:	4252      	negs	r2, r2
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	0018      	movs	r0, r3
 800664a:	f000 f90d 	bl	8006868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	46bd      	mov	sp, r7
 8006652:	b002      	add	sp, #8
 8006654:	bd80      	pop	{r7, pc}
 8006656:	46c0      	nop			@ (mov r8, r8)
 8006658:	fffffeff 	.word	0xfffffeff

0800665c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006664:	46c0      	nop			@ (mov r8, r8)
 8006666:	46bd      	mov	sp, r7
 8006668:	b002      	add	sp, #8
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006674:	46c0      	nop			@ (mov r8, r8)
 8006676:	46bd      	mov	sp, r7
 8006678:	b002      	add	sp, #8
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006684:	46c0      	nop			@ (mov r8, r8)
 8006686:	46bd      	mov	sp, r7
 8006688:	b002      	add	sp, #8
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006694:	46c0      	nop			@ (mov r8, r8)
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066a4:	46c0      	nop			@ (mov r8, r8)
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b002      	add	sp, #8
 80066aa:	bd80      	pop	{r7, pc}

080066ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a2f      	ldr	r2, [pc, #188]	@ (800677c <TIM_Base_SetConfig+0xd0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_Base_SetConfig+0x20>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006780 <TIM_Base_SetConfig+0xd4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d108      	bne.n	80066de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2270      	movs	r2, #112	@ 0x70
 80066d0:	4393      	bics	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a26      	ldr	r2, [pc, #152]	@ (800677c <TIM_Base_SetConfig+0xd0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <TIM_Base_SetConfig+0x62>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a25      	ldr	r2, [pc, #148]	@ (8006780 <TIM_Base_SetConfig+0xd4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00f      	beq.n	800670e <TIM_Base_SetConfig+0x62>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a24      	ldr	r2, [pc, #144]	@ (8006784 <TIM_Base_SetConfig+0xd8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00b      	beq.n	800670e <TIM_Base_SetConfig+0x62>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a23      	ldr	r2, [pc, #140]	@ (8006788 <TIM_Base_SetConfig+0xdc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d007      	beq.n	800670e <TIM_Base_SetConfig+0x62>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a22      	ldr	r2, [pc, #136]	@ (800678c <TIM_Base_SetConfig+0xe0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d003      	beq.n	800670e <TIM_Base_SetConfig+0x62>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a21      	ldr	r2, [pc, #132]	@ (8006790 <TIM_Base_SetConfig+0xe4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d108      	bne.n	8006720 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4a20      	ldr	r2, [pc, #128]	@ (8006794 <TIM_Base_SetConfig+0xe8>)
 8006712:	4013      	ands	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2280      	movs	r2, #128	@ 0x80
 8006724:	4393      	bics	r3, r2
 8006726:	001a      	movs	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a0c      	ldr	r2, [pc, #48]	@ (800677c <TIM_Base_SetConfig+0xd0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00b      	beq.n	8006766 <TIM_Base_SetConfig+0xba>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a0d      	ldr	r2, [pc, #52]	@ (8006788 <TIM_Base_SetConfig+0xdc>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d007      	beq.n	8006766 <TIM_Base_SetConfig+0xba>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a0c      	ldr	r2, [pc, #48]	@ (800678c <TIM_Base_SetConfig+0xe0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d003      	beq.n	8006766 <TIM_Base_SetConfig+0xba>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a0b      	ldr	r2, [pc, #44]	@ (8006790 <TIM_Base_SetConfig+0xe4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d103      	bne.n	800676e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	615a      	str	r2, [r3, #20]
}
 8006774:	46c0      	nop			@ (mov r8, r8)
 8006776:	46bd      	mov	sp, r7
 8006778:	b004      	add	sp, #16
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40000400 	.word	0x40000400
 8006784:	40002000 	.word	0x40002000
 8006788:	40014000 	.word	0x40014000
 800678c:	40014400 	.word	0x40014400
 8006790:	40014800 	.word	0x40014800
 8006794:	fffffcff 	.word	0xfffffcff

08006798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	223c      	movs	r2, #60	@ 0x3c
 80067a6:	5c9b      	ldrb	r3, [r3, r2]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e04f      	b.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	223c      	movs	r2, #60	@ 0x3c
 80067b4:	2101      	movs	r1, #1
 80067b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	223d      	movs	r2, #61	@ 0x3d
 80067bc:	2102      	movs	r1, #2
 80067be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a20      	ldr	r2, [pc, #128]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a1f      	ldr	r2, [pc, #124]	@ (800685c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067de:	4013      	ands	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2270      	movs	r2, #112	@ 0x70
 80067f0:	4393      	bics	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a13      	ldr	r2, [pc, #76]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a12      	ldr	r2, [pc, #72]	@ (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a11      	ldr	r2, [pc, #68]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d10c      	bne.n	800683e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2280      	movs	r2, #128	@ 0x80
 8006828:	4393      	bics	r3, r2
 800682a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	4313      	orrs	r3, r2
 8006834:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	223d      	movs	r2, #61	@ 0x3d
 8006842:	2101      	movs	r1, #1
 8006844:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	223c      	movs	r2, #60	@ 0x3c
 800684a:	2100      	movs	r1, #0
 800684c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	0018      	movs	r0, r3
 8006852:	46bd      	mov	sp, r7
 8006854:	b004      	add	sp, #16
 8006856:	bd80      	pop	{r7, pc}
 8006858:	40012c00 	.word	0x40012c00
 800685c:	ff0fffff 	.word	0xff0fffff
 8006860:	40000400 	.word	0x40000400
 8006864:	40014000 	.word	0x40014000

08006868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006870:	46c0      	nop			@ (mov r8, r8)
 8006872:	46bd      	mov	sp, r7
 8006874:	b002      	add	sp, #8
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006880:	46c0      	nop			@ (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	b002      	add	sp, #8
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006890:	46c0      	nop			@ (mov r8, r8)
 8006892:	46bd      	mov	sp, r7
 8006894:	b002      	add	sp, #8
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e046      	b.n	8006938 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2284      	movs	r2, #132	@ 0x84
 80068ae:	589b      	ldr	r3, [r3, r2]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d107      	bne.n	80068c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2280      	movs	r2, #128	@ 0x80
 80068b8:	2100      	movs	r1, #0
 80068ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	0018      	movs	r0, r3
 80068c0:	f7fd fa78 	bl	8003db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2284      	movs	r2, #132	@ 0x84
 80068c8:	2124      	movs	r1, #36	@ 0x24
 80068ca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2101      	movs	r1, #1
 80068d8:	438a      	bics	r2, r1
 80068da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0018      	movs	r0, r3
 80068e0:	f000 f8dc 	bl	8006a9c <UART_SetConfig>
 80068e4:	0003      	movs	r3, r0
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e024      	b.n	8006938 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	0018      	movs	r0, r3
 80068fa:	f000 fa73 	bl	8006de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	490d      	ldr	r1, [pc, #52]	@ (8006940 <HAL_UART_Init+0xa8>)
 800690a:	400a      	ands	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	212a      	movs	r1, #42	@ 0x2a
 800691a:	438a      	bics	r2, r1
 800691c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2101      	movs	r1, #1
 800692a:	430a      	orrs	r2, r1
 800692c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	0018      	movs	r0, r3
 8006932:	f000 fb0b 	bl	8006f4c <UART_CheckIdleState>
 8006936:	0003      	movs	r3, r0
}
 8006938:	0018      	movs	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	b002      	add	sp, #8
 800693e:	bd80      	pop	{r7, pc}
 8006940:	ffffb7ff 	.word	0xffffb7ff

08006944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	@ 0x28
 8006948:	af02      	add	r7, sp, #8
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	1dbb      	adds	r3, r7, #6
 8006952:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2284      	movs	r2, #132	@ 0x84
 8006958:	589b      	ldr	r3, [r3, r2]
 800695a:	2b20      	cmp	r3, #32
 800695c:	d000      	beq.n	8006960 <HAL_UART_Transmit+0x1c>
 800695e:	e097      	b.n	8006a90 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_UART_Transmit+0x2a>
 8006966:	1dbb      	adds	r3, r7, #6
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e08f      	b.n	8006a92 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	2380      	movs	r3, #128	@ 0x80
 8006978:	015b      	lsls	r3, r3, #5
 800697a:	429a      	cmp	r2, r3
 800697c:	d109      	bne.n	8006992 <HAL_UART_Transmit+0x4e>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2201      	movs	r2, #1
 800698a:	4013      	ands	r3, r2
 800698c:	d001      	beq.n	8006992 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e07f      	b.n	8006a92 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2280      	movs	r2, #128	@ 0x80
 8006996:	5c9b      	ldrb	r3, [r3, r2]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_UART_Transmit+0x5c>
 800699c:	2302      	movs	r3, #2
 800699e:	e078      	b.n	8006a92 <HAL_UART_Transmit+0x14e>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2280      	movs	r2, #128	@ 0x80
 80069a4:	2101      	movs	r1, #1
 80069a6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	228c      	movs	r2, #140	@ 0x8c
 80069ac:	2100      	movs	r1, #0
 80069ae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2284      	movs	r2, #132	@ 0x84
 80069b4:	2121      	movs	r1, #33	@ 0x21
 80069b6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b8:	f7fd fda4 	bl	8004504 <HAL_GetTick>
 80069bc:	0003      	movs	r3, r0
 80069be:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	1dba      	adds	r2, r7, #6
 80069c4:	2154      	movs	r1, #84	@ 0x54
 80069c6:	8812      	ldrh	r2, [r2, #0]
 80069c8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1dba      	adds	r2, r7, #6
 80069ce:	2156      	movs	r1, #86	@ 0x56
 80069d0:	8812      	ldrh	r2, [r2, #0]
 80069d2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	2380      	movs	r3, #128	@ 0x80
 80069da:	015b      	lsls	r3, r3, #5
 80069dc:	429a      	cmp	r2, r3
 80069de:	d108      	bne.n	80069f2 <HAL_UART_Transmit+0xae>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e003      	b.n	80069fa <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2280      	movs	r2, #128	@ 0x80
 80069fe:	2100      	movs	r1, #0
 8006a00:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006a02:	e02c      	b.n	8006a5e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	0013      	movs	r3, r2
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2180      	movs	r1, #128	@ 0x80
 8006a12:	f000 fae5 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006a16:	1e03      	subs	r3, r0, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e039      	b.n	8006a92 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	001a      	movs	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	05d2      	lsls	r2, r2, #23
 8006a30:	0dd2      	lsrs	r2, r2, #23
 8006a32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	3302      	adds	r3, #2
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	e007      	b.n	8006a4c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2256      	movs	r2, #86	@ 0x56
 8006a50:	5a9b      	ldrh	r3, [r3, r2]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b299      	uxth	r1, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2256      	movs	r2, #86	@ 0x56
 8006a5c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2256      	movs	r2, #86	@ 0x56
 8006a62:	5a9b      	ldrh	r3, [r3, r2]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1cc      	bne.n	8006a04 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	0013      	movs	r3, r2
 8006a74:	2200      	movs	r2, #0
 8006a76:	2140      	movs	r1, #64	@ 0x40
 8006a78:	f000 fab2 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006a7c:	1e03      	subs	r3, r0, #0
 8006a7e:	d001      	beq.n	8006a84 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e006      	b.n	8006a92 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2284      	movs	r2, #132	@ 0x84
 8006a88:	2120      	movs	r1, #32
 8006a8a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e000      	b.n	8006a92 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8006a90:	2302      	movs	r3, #2
  }
}
 8006a92:	0018      	movs	r0, r3
 8006a94:	46bd      	mov	sp, r7
 8006a96:	b008      	add	sp, #32
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aa4:	231a      	movs	r3, #26
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4abc      	ldr	r2, [pc, #752]	@ (8006dbc <UART_SetConfig+0x320>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	0019      	movs	r1, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69fa      	ldr	r2, [r7, #28]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4ab7      	ldr	r2, [pc, #732]	@ (8006dc0 <UART_SetConfig+0x324>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	4aae      	ldr	r2, [pc, #696]	@ (8006dc4 <UART_SetConfig+0x328>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1e:	220f      	movs	r2, #15
 8006b20:	4393      	bics	r3, r2
 8006b22:	0019      	movs	r1, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4aa4      	ldr	r2, [pc, #656]	@ (8006dc8 <UART_SetConfig+0x32c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d127      	bne.n	8006b8a <UART_SetConfig+0xee>
 8006b3a:	4ba4      	ldr	r3, [pc, #656]	@ (8006dcc <UART_SetConfig+0x330>)
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b3e:	2203      	movs	r2, #3
 8006b40:	4013      	ands	r3, r2
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d017      	beq.n	8006b76 <UART_SetConfig+0xda>
 8006b46:	d81b      	bhi.n	8006b80 <UART_SetConfig+0xe4>
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d00a      	beq.n	8006b62 <UART_SetConfig+0xc6>
 8006b4c:	d818      	bhi.n	8006b80 <UART_SetConfig+0xe4>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <UART_SetConfig+0xbc>
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d00a      	beq.n	8006b6c <UART_SetConfig+0xd0>
 8006b56:	e013      	b.n	8006b80 <UART_SetConfig+0xe4>
 8006b58:	231b      	movs	r3, #27
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	e058      	b.n	8006c14 <UART_SetConfig+0x178>
 8006b62:	231b      	movs	r3, #27
 8006b64:	18fb      	adds	r3, r7, r3
 8006b66:	2202      	movs	r2, #2
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	e053      	b.n	8006c14 <UART_SetConfig+0x178>
 8006b6c:	231b      	movs	r3, #27
 8006b6e:	18fb      	adds	r3, r7, r3
 8006b70:	2204      	movs	r2, #4
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	e04e      	b.n	8006c14 <UART_SetConfig+0x178>
 8006b76:	231b      	movs	r3, #27
 8006b78:	18fb      	adds	r3, r7, r3
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e049      	b.n	8006c14 <UART_SetConfig+0x178>
 8006b80:	231b      	movs	r3, #27
 8006b82:	18fb      	adds	r3, r7, r3
 8006b84:	2210      	movs	r2, #16
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e044      	b.n	8006c14 <UART_SetConfig+0x178>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a90      	ldr	r2, [pc, #576]	@ (8006dd0 <UART_SetConfig+0x334>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d127      	bne.n	8006be4 <UART_SetConfig+0x148>
 8006b94:	4b8d      	ldr	r3, [pc, #564]	@ (8006dcc <UART_SetConfig+0x330>)
 8006b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b98:	220c      	movs	r2, #12
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b0c      	cmp	r3, #12
 8006b9e:	d017      	beq.n	8006bd0 <UART_SetConfig+0x134>
 8006ba0:	d81b      	bhi.n	8006bda <UART_SetConfig+0x13e>
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d00a      	beq.n	8006bbc <UART_SetConfig+0x120>
 8006ba6:	d818      	bhi.n	8006bda <UART_SetConfig+0x13e>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <UART_SetConfig+0x116>
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d00a      	beq.n	8006bc6 <UART_SetConfig+0x12a>
 8006bb0:	e013      	b.n	8006bda <UART_SetConfig+0x13e>
 8006bb2:	231b      	movs	r3, #27
 8006bb4:	18fb      	adds	r3, r7, r3
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	e02b      	b.n	8006c14 <UART_SetConfig+0x178>
 8006bbc:	231b      	movs	r3, #27
 8006bbe:	18fb      	adds	r3, r7, r3
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	e026      	b.n	8006c14 <UART_SetConfig+0x178>
 8006bc6:	231b      	movs	r3, #27
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	2204      	movs	r2, #4
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	e021      	b.n	8006c14 <UART_SetConfig+0x178>
 8006bd0:	231b      	movs	r3, #27
 8006bd2:	18fb      	adds	r3, r7, r3
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	e01c      	b.n	8006c14 <UART_SetConfig+0x178>
 8006bda:	231b      	movs	r3, #27
 8006bdc:	18fb      	adds	r3, r7, r3
 8006bde:	2210      	movs	r2, #16
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	e017      	b.n	8006c14 <UART_SetConfig+0x178>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a7a      	ldr	r2, [pc, #488]	@ (8006dd4 <UART_SetConfig+0x338>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d104      	bne.n	8006bf8 <UART_SetConfig+0x15c>
 8006bee:	231b      	movs	r3, #27
 8006bf0:	18fb      	adds	r3, r7, r3
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e00d      	b.n	8006c14 <UART_SetConfig+0x178>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a76      	ldr	r2, [pc, #472]	@ (8006dd8 <UART_SetConfig+0x33c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d104      	bne.n	8006c0c <UART_SetConfig+0x170>
 8006c02:	231b      	movs	r3, #27
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e003      	b.n	8006c14 <UART_SetConfig+0x178>
 8006c0c:	231b      	movs	r3, #27
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	2210      	movs	r2, #16
 8006c12:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	2380      	movs	r3, #128	@ 0x80
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d000      	beq.n	8006c22 <UART_SetConfig+0x186>
 8006c20:	e065      	b.n	8006cee <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006c22:	231b      	movs	r3, #27
 8006c24:	18fb      	adds	r3, r7, r3
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d015      	beq.n	8006c58 <UART_SetConfig+0x1bc>
 8006c2c:	dc18      	bgt.n	8006c60 <UART_SetConfig+0x1c4>
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d00d      	beq.n	8006c4e <UART_SetConfig+0x1b2>
 8006c32:	dc15      	bgt.n	8006c60 <UART_SetConfig+0x1c4>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <UART_SetConfig+0x1a2>
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d005      	beq.n	8006c48 <UART_SetConfig+0x1ac>
 8006c3c:	e010      	b.n	8006c60 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c3e:	f7ff f9e3 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8006c42:	0003      	movs	r3, r0
 8006c44:	617b      	str	r3, [r7, #20]
        break;
 8006c46:	e012      	b.n	8006c6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c48:	4b64      	ldr	r3, [pc, #400]	@ (8006ddc <UART_SetConfig+0x340>)
 8006c4a:	617b      	str	r3, [r7, #20]
        break;
 8006c4c:	e00f      	b.n	8006c6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4e:	f7ff f951 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8006c52:	0003      	movs	r3, r0
 8006c54:	617b      	str	r3, [r7, #20]
        break;
 8006c56:	e00a      	b.n	8006c6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c58:	2380      	movs	r3, #128	@ 0x80
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	617b      	str	r3, [r7, #20]
        break;
 8006c5e:	e006      	b.n	8006c6e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c64:	231a      	movs	r3, #26
 8006c66:	18fb      	adds	r3, r7, r3
 8006c68:	2201      	movs	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]
        break;
 8006c6c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d100      	bne.n	8006c76 <UART_SetConfig+0x1da>
 8006c74:	e08d      	b.n	8006d92 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c7a:	4b59      	ldr	r3, [pc, #356]	@ (8006de0 <UART_SetConfig+0x344>)
 8006c7c:	0052      	lsls	r2, r2, #1
 8006c7e:	5ad3      	ldrh	r3, [r2, r3]
 8006c80:	0019      	movs	r1, r3
 8006c82:	6978      	ldr	r0, [r7, #20]
 8006c84:	f7f9 fa58 	bl	8000138 <__udivsi3>
 8006c88:	0003      	movs	r3, r0
 8006c8a:	005a      	lsls	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	18d2      	adds	r2, r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	0019      	movs	r1, r3
 8006c9a:	0010      	movs	r0, r2
 8006c9c:	f7f9 fa4c 	bl	8000138 <__udivsi3>
 8006ca0:	0003      	movs	r3, r0
 8006ca2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	d91c      	bls.n	8006ce4 <UART_SetConfig+0x248>
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	2380      	movs	r3, #128	@ 0x80
 8006cae:	025b      	lsls	r3, r3, #9
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d217      	bcs.n	8006ce4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	200e      	movs	r0, #14
 8006cba:	183b      	adds	r3, r7, r0
 8006cbc:	210f      	movs	r1, #15
 8006cbe:	438a      	bics	r2, r1
 8006cc0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	085b      	lsrs	r3, r3, #1
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2207      	movs	r2, #7
 8006cca:	4013      	ands	r3, r2
 8006ccc:	b299      	uxth	r1, r3
 8006cce:	183b      	adds	r3, r7, r0
 8006cd0:	183a      	adds	r2, r7, r0
 8006cd2:	8812      	ldrh	r2, [r2, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	183a      	adds	r2, r7, r0
 8006cde:	8812      	ldrh	r2, [r2, #0]
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	e056      	b.n	8006d92 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006ce4:	231a      	movs	r3, #26
 8006ce6:	18fb      	adds	r3, r7, r3
 8006ce8:	2201      	movs	r2, #1
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	e051      	b.n	8006d92 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cee:	231b      	movs	r3, #27
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d015      	beq.n	8006d24 <UART_SetConfig+0x288>
 8006cf8:	dc18      	bgt.n	8006d2c <UART_SetConfig+0x290>
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d00d      	beq.n	8006d1a <UART_SetConfig+0x27e>
 8006cfe:	dc15      	bgt.n	8006d2c <UART_SetConfig+0x290>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <UART_SetConfig+0x26e>
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d005      	beq.n	8006d14 <UART_SetConfig+0x278>
 8006d08:	e010      	b.n	8006d2c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d0a:	f7ff f97d 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8006d0e:	0003      	movs	r3, r0
 8006d10:	617b      	str	r3, [r7, #20]
        break;
 8006d12:	e012      	b.n	8006d3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d14:	4b31      	ldr	r3, [pc, #196]	@ (8006ddc <UART_SetConfig+0x340>)
 8006d16:	617b      	str	r3, [r7, #20]
        break;
 8006d18:	e00f      	b.n	8006d3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d1a:	f7ff f8eb 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8006d1e:	0003      	movs	r3, r0
 8006d20:	617b      	str	r3, [r7, #20]
        break;
 8006d22:	e00a      	b.n	8006d3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d24:	2380      	movs	r3, #128	@ 0x80
 8006d26:	021b      	lsls	r3, r3, #8
 8006d28:	617b      	str	r3, [r7, #20]
        break;
 8006d2a:	e006      	b.n	8006d3a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d30:	231a      	movs	r3, #26
 8006d32:	18fb      	adds	r3, r7, r3
 8006d34:	2201      	movs	r2, #1
 8006d36:	701a      	strb	r2, [r3, #0]
        break;
 8006d38:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d028      	beq.n	8006d92 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d44:	4b26      	ldr	r3, [pc, #152]	@ (8006de0 <UART_SetConfig+0x344>)
 8006d46:	0052      	lsls	r2, r2, #1
 8006d48:	5ad3      	ldrh	r3, [r2, r3]
 8006d4a:	0019      	movs	r1, r3
 8006d4c:	6978      	ldr	r0, [r7, #20]
 8006d4e:	f7f9 f9f3 	bl	8000138 <__udivsi3>
 8006d52:	0003      	movs	r3, r0
 8006d54:	001a      	movs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	18d2      	adds	r2, r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	0019      	movs	r1, r3
 8006d64:	0010      	movs	r0, r2
 8006d66:	f7f9 f9e7 	bl	8000138 <__udivsi3>
 8006d6a:	0003      	movs	r3, r0
 8006d6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b0f      	cmp	r3, #15
 8006d72:	d90a      	bls.n	8006d8a <UART_SetConfig+0x2ee>
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	2380      	movs	r3, #128	@ 0x80
 8006d78:	025b      	lsls	r3, r3, #9
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d205      	bcs.n	8006d8a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60da      	str	r2, [r3, #12]
 8006d88:	e003      	b.n	8006d92 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006d8a:	231a      	movs	r3, #26
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	2201      	movs	r2, #1
 8006d90:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	226a      	movs	r2, #106	@ 0x6a
 8006d96:	2101      	movs	r1, #1
 8006d98:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2268      	movs	r2, #104	@ 0x68
 8006d9e:	2101      	movs	r1, #1
 8006da0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8006dae:	231a      	movs	r3, #26
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	781b      	ldrb	r3, [r3, #0]
}
 8006db4:	0018      	movs	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b008      	add	sp, #32
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	cfff69f3 	.word	0xcfff69f3
 8006dc0:	ffffcfff 	.word	0xffffcfff
 8006dc4:	11fff4ff 	.word	0x11fff4ff
 8006dc8:	40013800 	.word	0x40013800
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	40004400 	.word	0x40004400
 8006dd4:	40004800 	.word	0x40004800
 8006dd8:	40004c00 	.word	0x40004c00
 8006ddc:	00f42400 	.word	0x00f42400
 8006de0:	0800cd64 	.word	0x0800cd64

08006de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df0:	2201      	movs	r2, #1
 8006df2:	4013      	ands	r3, r2
 8006df4:	d00b      	beq.n	8006e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	4a4a      	ldr	r2, [pc, #296]	@ (8006f28 <UART_AdvFeatureConfig+0x144>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	0019      	movs	r1, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	2202      	movs	r2, #2
 8006e14:	4013      	ands	r3, r2
 8006e16:	d00b      	beq.n	8006e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	4a43      	ldr	r2, [pc, #268]	@ (8006f2c <UART_AdvFeatureConfig+0x148>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	0019      	movs	r1, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	2204      	movs	r2, #4
 8006e36:	4013      	ands	r3, r2
 8006e38:	d00b      	beq.n	8006e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4a3b      	ldr	r2, [pc, #236]	@ (8006f30 <UART_AdvFeatureConfig+0x14c>)
 8006e42:	4013      	ands	r3, r2
 8006e44:	0019      	movs	r1, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	2208      	movs	r2, #8
 8006e58:	4013      	ands	r3, r2
 8006e5a:	d00b      	beq.n	8006e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	4a34      	ldr	r2, [pc, #208]	@ (8006f34 <UART_AdvFeatureConfig+0x150>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	0019      	movs	r1, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e78:	2210      	movs	r2, #16
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d00b      	beq.n	8006e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	4a2c      	ldr	r2, [pc, #176]	@ (8006f38 <UART_AdvFeatureConfig+0x154>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	0019      	movs	r1, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	d00b      	beq.n	8006eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	4a25      	ldr	r2, [pc, #148]	@ (8006f3c <UART_AdvFeatureConfig+0x158>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	0019      	movs	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	2240      	movs	r2, #64	@ 0x40
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	d01d      	beq.n	8006efe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f40 <UART_AdvFeatureConfig+0x15c>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	0019      	movs	r1, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ede:	2380      	movs	r3, #128	@ 0x80
 8006ee0:	035b      	lsls	r3, r3, #13
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d10b      	bne.n	8006efe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	4a15      	ldr	r2, [pc, #84]	@ (8006f44 <UART_AdvFeatureConfig+0x160>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f02:	2280      	movs	r2, #128	@ 0x80
 8006f04:	4013      	ands	r3, r2
 8006f06:	d00b      	beq.n	8006f20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8006f48 <UART_AdvFeatureConfig+0x164>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	0019      	movs	r1, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
  }
}
 8006f20:	46c0      	nop			@ (mov r8, r8)
 8006f22:	46bd      	mov	sp, r7
 8006f24:	b002      	add	sp, #8
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	fffdffff 	.word	0xfffdffff
 8006f2c:	fffeffff 	.word	0xfffeffff
 8006f30:	fffbffff 	.word	0xfffbffff
 8006f34:	ffff7fff 	.word	0xffff7fff
 8006f38:	ffffefff 	.word	0xffffefff
 8006f3c:	ffffdfff 	.word	0xffffdfff
 8006f40:	ffefffff 	.word	0xffefffff
 8006f44:	ff9fffff 	.word	0xff9fffff
 8006f48:	fff7ffff 	.word	0xfff7ffff

08006f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	228c      	movs	r2, #140	@ 0x8c
 8006f58:	2100      	movs	r1, #0
 8006f5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f5c:	f7fd fad2 	bl	8004504 <HAL_GetTick>
 8006f60:	0003      	movs	r3, r0
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d10c      	bne.n	8006f8c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2280      	movs	r2, #128	@ 0x80
 8006f76:	0391      	lsls	r1, r2, #14
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4a18      	ldr	r2, [pc, #96]	@ (8006fdc <UART_CheckIdleState+0x90>)
 8006f7c:	9200      	str	r2, [sp, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f000 f82e 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006f84:	1e03      	subs	r3, r0, #0
 8006f86:	d001      	beq.n	8006f8c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e023      	b.n	8006fd4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2204      	movs	r2, #4
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d10c      	bne.n	8006fb4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2280      	movs	r2, #128	@ 0x80
 8006f9e:	03d1      	lsls	r1, r2, #15
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8006fdc <UART_CheckIdleState+0x90>)
 8006fa4:	9200      	str	r2, [sp, #0]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f000 f81a 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006fac:	1e03      	subs	r3, r0, #0
 8006fae:	d001      	beq.n	8006fb4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e00f      	b.n	8006fd4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2284      	movs	r2, #132	@ 0x84
 8006fb8:	2120      	movs	r1, #32
 8006fba:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2288      	movs	r2, #136	@ 0x88
 8006fc0:	2120      	movs	r1, #32
 8006fc2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2280      	movs	r2, #128	@ 0x80
 8006fce:	2100      	movs	r1, #0
 8006fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b004      	add	sp, #16
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	01ffffff 	.word	0x01ffffff

08006fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b094      	sub	sp, #80	@ 0x50
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	1dfb      	adds	r3, r7, #7
 8006fee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff0:	e0a7      	b.n	8007142 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	d100      	bne.n	8006ffa <UART_WaitOnFlagUntilTimeout+0x1a>
 8006ff8:	e0a3      	b.n	8007142 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ffa:	f7fd fa83 	bl	8004504 <HAL_GetTick>
 8006ffe:	0002      	movs	r2, r0
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007006:	429a      	cmp	r2, r3
 8007008:	d302      	bcc.n	8007010 <UART_WaitOnFlagUntilTimeout+0x30>
 800700a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800700c:	2b00      	cmp	r3, #0
 800700e:	d13f      	bne.n	8007090 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007010:	f3ef 8310 	mrs	r3, PRIMASK
 8007014:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8007016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007018:	647b      	str	r3, [r7, #68]	@ 0x44
 800701a:	2301      	movs	r3, #1
 800701c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	f383 8810 	msr	PRIMASK, r3
}
 8007024:	46c0      	nop			@ (mov r8, r8)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	494e      	ldr	r1, [pc, #312]	@ (800716c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007032:	400a      	ands	r2, r1
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007038:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	f383 8810 	msr	PRIMASK, r3
}
 8007040:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007042:	f3ef 8310 	mrs	r3, PRIMASK
 8007046:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8007048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	643b      	str	r3, [r7, #64]	@ 0x40
 800704c:	2301      	movs	r3, #1
 800704e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007052:	f383 8810 	msr	PRIMASK, r3
}
 8007056:	46c0      	nop			@ (mov r8, r8)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2101      	movs	r1, #1
 8007064:	438a      	bics	r2, r1
 8007066:	609a      	str	r2, [r3, #8]
 8007068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800706a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706e:	f383 8810 	msr	PRIMASK, r3
}
 8007072:	46c0      	nop			@ (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2284      	movs	r2, #132	@ 0x84
 8007078:	2120      	movs	r1, #32
 800707a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2288      	movs	r2, #136	@ 0x88
 8007080:	2120      	movs	r1, #32
 8007082:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2280      	movs	r2, #128	@ 0x80
 8007088:	2100      	movs	r1, #0
 800708a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e069      	b.n	8007164 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2204      	movs	r2, #4
 8007098:	4013      	ands	r3, r2
 800709a:	d052      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69da      	ldr	r2, [r3, #28]
 80070a2:	2380      	movs	r3, #128	@ 0x80
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	401a      	ands	r2, r3
 80070a8:	2380      	movs	r3, #128	@ 0x80
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d148      	bne.n	8007142 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2280      	movs	r2, #128	@ 0x80
 80070b6:	0112      	lsls	r2, r2, #4
 80070b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ba:	f3ef 8310 	mrs	r3, PRIMASK
 80070be:	613b      	str	r3, [r7, #16]
  return(result);
 80070c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80070c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070c4:	2301      	movs	r3, #1
 80070c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f383 8810 	msr	PRIMASK, r3
}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4924      	ldr	r1, [pc, #144]	@ (800716c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80070dc:	400a      	ands	r2, r1
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f383 8810 	msr	PRIMASK, r3
}
 80070ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ec:	f3ef 8310 	mrs	r3, PRIMASK
 80070f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80070f2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070f6:	2301      	movs	r3, #1
 80070f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	f383 8810 	msr	PRIMASK, r3
}
 8007100:	46c0      	nop			@ (mov r8, r8)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2101      	movs	r1, #1
 800710e:	438a      	bics	r2, r1
 8007110:	609a      	str	r2, [r3, #8]
 8007112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	f383 8810 	msr	PRIMASK, r3
}
 800711c:	46c0      	nop			@ (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2284      	movs	r2, #132	@ 0x84
 8007122:	2120      	movs	r1, #32
 8007124:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2288      	movs	r2, #136	@ 0x88
 800712a:	2120      	movs	r1, #32
 800712c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	228c      	movs	r2, #140	@ 0x8c
 8007132:	2120      	movs	r1, #32
 8007134:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2280      	movs	r2, #128	@ 0x80
 800713a:	2100      	movs	r1, #0
 800713c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e010      	b.n	8007164 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	4013      	ands	r3, r2
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	425a      	negs	r2, r3
 8007152:	4153      	adcs	r3, r2
 8007154:	b2db      	uxtb	r3, r3
 8007156:	001a      	movs	r2, r3
 8007158:	1dfb      	adds	r3, r7, #7
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d100      	bne.n	8007162 <UART_WaitOnFlagUntilTimeout+0x182>
 8007160:	e747      	b.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	0018      	movs	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	b014      	add	sp, #80	@ 0x50
 800716a:	bd80      	pop	{r7, pc}
 800716c:	fffffe5f 	.word	0xfffffe5f

08007170 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2280      	movs	r2, #128	@ 0x80
 800717c:	5c9b      	ldrb	r3, [r3, r2]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_UARTEx_DisableFifoMode+0x16>
 8007182:	2302      	movs	r3, #2
 8007184:	e027      	b.n	80071d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2280      	movs	r2, #128	@ 0x80
 800718a:	2101      	movs	r1, #1
 800718c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2284      	movs	r2, #132	@ 0x84
 8007192:	2124      	movs	r1, #36	@ 0x24
 8007194:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2101      	movs	r1, #1
 80071aa:	438a      	bics	r2, r1
 80071ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4a0b      	ldr	r2, [pc, #44]	@ (80071e0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80071b2:	4013      	ands	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2284      	movs	r2, #132	@ 0x84
 80071c8:	2120      	movs	r1, #32
 80071ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2280      	movs	r2, #128	@ 0x80
 80071d0:	2100      	movs	r1, #0
 80071d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	0018      	movs	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	b004      	add	sp, #16
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	46c0      	nop			@ (mov r8, r8)
 80071e0:	dfffffff 	.word	0xdfffffff

080071e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2280      	movs	r2, #128	@ 0x80
 80071f2:	5c9b      	ldrb	r3, [r3, r2]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e02e      	b.n	800725a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2280      	movs	r2, #128	@ 0x80
 8007200:	2101      	movs	r1, #1
 8007202:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2284      	movs	r2, #132	@ 0x84
 8007208:	2124      	movs	r1, #36	@ 0x24
 800720a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2101      	movs	r1, #1
 8007220:	438a      	bics	r2, r1
 8007222:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	08d9      	lsrs	r1, r3, #3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	0018      	movs	r0, r3
 800723c:	f000 f854 	bl	80072e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2284      	movs	r2, #132	@ 0x84
 800724c:	2120      	movs	r1, #32
 800724e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2280      	movs	r2, #128	@ 0x80
 8007254:	2100      	movs	r1, #0
 8007256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	0018      	movs	r0, r3
 800725c:	46bd      	mov	sp, r7
 800725e:	b004      	add	sp, #16
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2280      	movs	r2, #128	@ 0x80
 8007272:	5c9b      	ldrb	r3, [r3, r2]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007278:	2302      	movs	r3, #2
 800727a:	e02f      	b.n	80072dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2280      	movs	r2, #128	@ 0x80
 8007280:	2101      	movs	r1, #1
 8007282:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2284      	movs	r2, #132	@ 0x84
 8007288:	2124      	movs	r1, #36	@ 0x24
 800728a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2101      	movs	r1, #1
 80072a0:	438a      	bics	r2, r1
 80072a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	4a0e      	ldr	r2, [pc, #56]	@ (80072e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	0019      	movs	r1, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	0018      	movs	r0, r3
 80072be:	f000 f813 	bl	80072e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2284      	movs	r2, #132	@ 0x84
 80072ce:	2120      	movs	r1, #32
 80072d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2280      	movs	r2, #128	@ 0x80
 80072d6:	2100      	movs	r1, #0
 80072d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	0018      	movs	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	b004      	add	sp, #16
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	f1ffffff 	.word	0xf1ffffff

080072e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d108      	bne.n	800730a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	226a      	movs	r2, #106	@ 0x6a
 80072fc:	2101      	movs	r1, #1
 80072fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2268      	movs	r2, #104	@ 0x68
 8007304:	2101      	movs	r1, #1
 8007306:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007308:	e043      	b.n	8007392 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800730a:	260f      	movs	r6, #15
 800730c:	19bb      	adds	r3, r7, r6
 800730e:	2208      	movs	r2, #8
 8007310:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007312:	200e      	movs	r0, #14
 8007314:	183b      	adds	r3, r7, r0
 8007316:	2208      	movs	r2, #8
 8007318:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	0e5b      	lsrs	r3, r3, #25
 8007322:	b2da      	uxtb	r2, r3
 8007324:	240d      	movs	r4, #13
 8007326:	193b      	adds	r3, r7, r4
 8007328:	2107      	movs	r1, #7
 800732a:	400a      	ands	r2, r1
 800732c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	0f5b      	lsrs	r3, r3, #29
 8007336:	b2da      	uxtb	r2, r3
 8007338:	250c      	movs	r5, #12
 800733a:	197b      	adds	r3, r7, r5
 800733c:	2107      	movs	r1, #7
 800733e:	400a      	ands	r2, r1
 8007340:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007342:	183b      	adds	r3, r7, r0
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	197a      	adds	r2, r7, r5
 8007348:	7812      	ldrb	r2, [r2, #0]
 800734a:	4914      	ldr	r1, [pc, #80]	@ (800739c <UARTEx_SetNbDataToProcess+0xb4>)
 800734c:	5c8a      	ldrb	r2, [r1, r2]
 800734e:	435a      	muls	r2, r3
 8007350:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007352:	197b      	adds	r3, r7, r5
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	4a12      	ldr	r2, [pc, #72]	@ (80073a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007358:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800735a:	0019      	movs	r1, r3
 800735c:	f7f8 ff76 	bl	800024c <__divsi3>
 8007360:	0003      	movs	r3, r0
 8007362:	b299      	uxth	r1, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	226a      	movs	r2, #106	@ 0x6a
 8007368:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800736a:	19bb      	adds	r3, r7, r6
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	193a      	adds	r2, r7, r4
 8007370:	7812      	ldrb	r2, [r2, #0]
 8007372:	490a      	ldr	r1, [pc, #40]	@ (800739c <UARTEx_SetNbDataToProcess+0xb4>)
 8007374:	5c8a      	ldrb	r2, [r1, r2]
 8007376:	435a      	muls	r2, r3
 8007378:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800737a:	193b      	adds	r3, r7, r4
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	4a08      	ldr	r2, [pc, #32]	@ (80073a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007380:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007382:	0019      	movs	r1, r3
 8007384:	f7f8 ff62 	bl	800024c <__divsi3>
 8007388:	0003      	movs	r3, r0
 800738a:	b299      	uxth	r1, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2268      	movs	r2, #104	@ 0x68
 8007390:	5299      	strh	r1, [r3, r2]
}
 8007392:	46c0      	nop			@ (mov r8, r8)
 8007394:	46bd      	mov	sp, r7
 8007396:	b005      	add	sp, #20
 8007398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739a:	46c0      	nop			@ (mov r8, r8)
 800739c:	0800cd7c 	.word	0x0800cd7c
 80073a0:	0800cd84 	.word	0x0800cd84

080073a4 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 80073a4:	b5b0      	push	{r4, r5, r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	0002      	movs	r2, r0
 80073ac:	1dbb      	adds	r3, r7, #6
 80073ae:	801a      	strh	r2, [r3, #0]
 80073b0:	1d7b      	adds	r3, r7, #5
 80073b2:	1c0a      	adds	r2, r1, #0
 80073b4:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80073b6:	210f      	movs	r1, #15
 80073b8:	187b      	adds	r3, r7, r1
 80073ba:	2200      	movs	r2, #0
 80073bc:	701a      	strb	r2, [r3, #0]

	status = VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 80073be:	1d7b      	adds	r3, r7, #5
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	085b      	lsrs	r3, r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	000d      	movs	r5, r1
 80073c8:	187c      	adds	r4, r7, r1
 80073ca:	1dbb      	adds	r3, r7, #6
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	2101      	movs	r1, #1
 80073d0:	0018      	movs	r0, r3
 80073d2:	f000 fe67 	bl	80080a4 <VL53L1_WrByte>
 80073d6:	0003      	movs	r3, r0
 80073d8:	7023      	strb	r3, [r4, #0]
	return status;
 80073da:	197b      	adds	r3, r7, r5
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b25b      	sxtb	r3, r3
}
 80073e0:	0018      	movs	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b004      	add	sp, #16
 80073e6:	bdb0      	pop	{r4, r5, r7, pc}

080073e8 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80073e8:	b5b0      	push	{r4, r5, r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	0002      	movs	r2, r0
 80073f0:	1dbb      	adds	r3, r7, #6
 80073f2:	801a      	strh	r2, [r3, #0]

	VL53L1X_ERROR status = 0;
 80073f4:	230e      	movs	r3, #14
 80073f6:	18fb      	adds	r3, r7, r3
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 80073fc:	210f      	movs	r1, #15
 80073fe:	187b      	adds	r3, r7, r1
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 8007404:	187b      	adds	r3, r7, r1
 8007406:	222d      	movs	r2, #45	@ 0x2d
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	e016      	b.n	800743a <VL53L1X_SensorInit+0x52>
	{
		status = VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 800740c:	250f      	movs	r5, #15
 800740e:	197b      	adds	r3, r7, r5
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	b299      	uxth	r1, r3
 8007414:	197b      	adds	r3, r7, r5
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	3b2d      	subs	r3, #45	@ 0x2d
 800741a:	4a30      	ldr	r2, [pc, #192]	@ (80074dc <VL53L1X_SensorInit+0xf4>)
 800741c:	5cd2      	ldrb	r2, [r2, r3]
 800741e:	230e      	movs	r3, #14
 8007420:	18fc      	adds	r4, r7, r3
 8007422:	1dbb      	adds	r3, r7, #6
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	0018      	movs	r0, r3
 8007428:	f000 fe3c 	bl	80080a4 <VL53L1_WrByte>
 800742c:	0003      	movs	r3, r0
 800742e:	7023      	strb	r3, [r4, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 8007430:	197b      	adds	r3, r7, r5
 8007432:	781a      	ldrb	r2, [r3, #0]
 8007434:	197b      	adds	r3, r7, r5
 8007436:	3201      	adds	r2, #1
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	230f      	movs	r3, #15
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b87      	cmp	r3, #135	@ 0x87
 8007442:	d9e3      	bls.n	800740c <VL53L1X_SensorInit+0x24>
	}
	status = VL53L1X_StartRanging(dev);
 8007444:	230e      	movs	r3, #14
 8007446:	18fc      	adds	r4, r7, r3
 8007448:	1dbb      	adds	r3, r7, #6
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	0018      	movs	r0, r3
 800744e:	f000 f890 	bl	8007572 <VL53L1X_StartRanging>
 8007452:	0003      	movs	r3, r0
 8007454:	7023      	strb	r3, [r4, #0]
	tmp  = 0;
 8007456:	230d      	movs	r3, #13
 8007458:	18fb      	adds	r3, r7, r3
 800745a:	2200      	movs	r2, #0
 800745c:	701a      	strb	r2, [r3, #0]
	while(tmp==0)
 800745e:	e00b      	b.n	8007478 <VL53L1X_SensorInit+0x90>
	{
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 8007460:	230e      	movs	r3, #14
 8007462:	18fc      	adds	r4, r7, r3
 8007464:	230d      	movs	r3, #13
 8007466:	18fa      	adds	r2, r7, r3
 8007468:	1dbb      	adds	r3, r7, #6
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	0011      	movs	r1, r2
 800746e:	0018      	movs	r0, r3
 8007470:	f000 f8b5 	bl	80075de <VL53L1X_CheckForDataReady>
 8007474:	0003      	movs	r3, r0
 8007476:	7023      	strb	r3, [r4, #0]
	while(tmp==0)
 8007478:	230d      	movs	r3, #13
 800747a:	18fb      	adds	r3, r7, r3
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0ee      	beq.n	8007460 <VL53L1X_SensorInit+0x78>
	}
	status = VL53L1X_ClearInterrupt(dev);
 8007482:	250e      	movs	r5, #14
 8007484:	197c      	adds	r4, r7, r5
 8007486:	1dbb      	adds	r3, r7, #6
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	0018      	movs	r0, r3
 800748c:	f000 f828 	bl	80074e0 <VL53L1X_ClearInterrupt>
 8007490:	0003      	movs	r3, r0
 8007492:	7023      	strb	r3, [r4, #0]
	status = VL53L1X_StopRanging(dev);
 8007494:	197c      	adds	r4, r7, r5
 8007496:	1dbb      	adds	r3, r7, #6
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	0018      	movs	r0, r3
 800749c:	f000 f884 	bl	80075a8 <VL53L1X_StopRanging>
 80074a0:	0003      	movs	r3, r0
 80074a2:	7023      	strb	r3, [r4, #0]
	status = VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); // two bounds VHV
 80074a4:	197c      	adds	r4, r7, r5
 80074a6:	1dbb      	adds	r3, r7, #6
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	2209      	movs	r2, #9
 80074ac:	2108      	movs	r1, #8
 80074ae:	0018      	movs	r0, r3
 80074b0:	f000 fdf8 	bl	80080a4 <VL53L1_WrByte>
 80074b4:	0003      	movs	r3, r0
 80074b6:	7023      	strb	r3, [r4, #0]
	status = VL53L1_WrByte(dev, 0x0B, 0); // start VHV from the previous temperature
 80074b8:	197c      	adds	r4, r7, r5
 80074ba:	1dbb      	adds	r3, r7, #6
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	210b      	movs	r1, #11
 80074c2:	0018      	movs	r0, r3
 80074c4:	f000 fdee 	bl	80080a4 <VL53L1_WrByte>
 80074c8:	0003      	movs	r3, r0
 80074ca:	7023      	strb	r3, [r4, #0]
	return status;
 80074cc:	197b      	adds	r3, r7, r5
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	b25b      	sxtb	r3, r3
	}
 80074d2:	0018      	movs	r0, r3
 80074d4:	46bd      	mov	sp, r7
 80074d6:	b004      	add	sp, #16
 80074d8:	bdb0      	pop	{r4, r5, r7, pc}
 80074da:	46c0      	nop			@ (mov r8, r8)
 80074dc:	0800cd8c 	.word	0x0800cd8c

080074e0 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80074e0:	b5b0      	push	{r4, r5, r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	0002      	movs	r2, r0
 80074e8:	1dbb      	adds	r3, r7, #6
 80074ea:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80074ec:	250f      	movs	r5, #15
 80074ee:	197b      	adds	r3, r7, r5
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]

	status = VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80074f4:	197c      	adds	r4, r7, r5
 80074f6:	1dbb      	adds	r3, r7, #6
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	2201      	movs	r2, #1
 80074fc:	2186      	movs	r1, #134	@ 0x86
 80074fe:	0018      	movs	r0, r3
 8007500:	f000 fdd0 	bl	80080a4 <VL53L1_WrByte>
 8007504:	0003      	movs	r3, r0
 8007506:	7023      	strb	r3, [r4, #0]
	return status;
 8007508:	197b      	adds	r3, r7, r5
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	b25b      	sxtb	r3, r3
}
 800750e:	0018      	movs	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	b004      	add	sp, #16
 8007514:	bdb0      	pop	{r4, r5, r7, pc}

08007516 <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8007516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	0002      	movs	r2, r0
 800751e:	6039      	str	r1, [r7, #0]
 8007520:	1dbb      	adds	r3, r7, #6
 8007522:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8007524:	260f      	movs	r6, #15
 8007526:	19bb      	adds	r3, r7, r6
 8007528:	2200      	movs	r2, #0
 800752a:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 800752c:	19bc      	adds	r4, r7, r6
 800752e:	250e      	movs	r5, #14
 8007530:	197a      	adds	r2, r7, r5
 8007532:	1dbb      	adds	r3, r7, #6
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	2130      	movs	r1, #48	@ 0x30
 8007538:	0018      	movs	r0, r3
 800753a:	f000 fe7f 	bl	800823c <VL53L1_RdByte>
 800753e:	0003      	movs	r3, r0
 8007540:	7023      	strb	r3, [r4, #0]
	Temp = Temp & 0x10;
 8007542:	197b      	adds	r3, r7, r5
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2210      	movs	r2, #16
 8007548:	4013      	ands	r3, r2
 800754a:	b2da      	uxtb	r2, r3
 800754c:	197b      	adds	r3, r7, r5
 800754e:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8007550:	197b      	adds	r3, r7, r5
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	091b      	lsrs	r3, r3, #4
 8007556:	b2db      	uxtb	r3, r3
 8007558:	425a      	negs	r2, r3
 800755a:	4153      	adcs	r3, r2
 800755c:	b2db      	uxtb	r3, r3
 800755e:	001a      	movs	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	701a      	strb	r2, [r3, #0]
	return status;
 8007564:	19bb      	adds	r3, r7, r6
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	b25b      	sxtb	r3, r3
}
 800756a:	0018      	movs	r0, r3
 800756c:	46bd      	mov	sp, r7
 800756e:	b005      	add	sp, #20
 8007570:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007572 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8007572:	b5b0      	push	{r4, r5, r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	0002      	movs	r2, r0
 800757a:	1dbb      	adds	r3, r7, #6
 800757c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800757e:	250f      	movs	r5, #15
 8007580:	197b      	adds	r3, r7, r5
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8007586:	197c      	adds	r4, r7, r5
 8007588:	1dbb      	adds	r3, r7, #6
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	2240      	movs	r2, #64	@ 0x40
 800758e:	2187      	movs	r1, #135	@ 0x87
 8007590:	0018      	movs	r0, r3
 8007592:	f000 fd87 	bl	80080a4 <VL53L1_WrByte>
 8007596:	0003      	movs	r3, r0
 8007598:	7023      	strb	r3, [r4, #0]
	return status;
 800759a:	197b      	adds	r3, r7, r5
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b25b      	sxtb	r3, r3
}
 80075a0:	0018      	movs	r0, r3
 80075a2:	46bd      	mov	sp, r7
 80075a4:	b004      	add	sp, #16
 80075a6:	bdb0      	pop	{r4, r5, r7, pc}

080075a8 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80075a8:	b5b0      	push	{r4, r5, r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	0002      	movs	r2, r0
 80075b0:	1dbb      	adds	r3, r7, #6
 80075b2:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80075b4:	250f      	movs	r5, #15
 80075b6:	197b      	adds	r3, r7, r5
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]

	status = VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80075bc:	197c      	adds	r4, r7, r5
 80075be:	1dbb      	adds	r3, r7, #6
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	2200      	movs	r2, #0
 80075c4:	2187      	movs	r1, #135	@ 0x87
 80075c6:	0018      	movs	r0, r3
 80075c8:	f000 fd6c 	bl	80080a4 <VL53L1_WrByte>
 80075cc:	0003      	movs	r3, r0
 80075ce:	7023      	strb	r3, [r4, #0]
	return status;
 80075d0:	197b      	adds	r3, r7, r5
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	b25b      	sxtb	r3, r3
}
 80075d6:	0018      	movs	r0, r3
 80075d8:	46bd      	mov	sp, r7
 80075da:	b004      	add	sp, #16
 80075dc:	bdb0      	pop	{r4, r5, r7, pc}

080075de <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80075de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	0002      	movs	r2, r0
 80075e6:	6039      	str	r1, [r7, #0]
 80075e8:	1dbb      	adds	r3, r7, #6
 80075ea:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80075ec:	250f      	movs	r5, #15
 80075ee:	197b      	adds	r3, r7, r5
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80075f4:	197c      	adds	r4, r7, r5
 80075f6:	260d      	movs	r6, #13
 80075f8:	19ba      	adds	r2, r7, r6
 80075fa:	1dbb      	adds	r3, r7, #6
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	0011      	movs	r1, r2
 8007600:	0018      	movs	r0, r3
 8007602:	f7ff ff88 	bl	8007516 <VL53L1X_GetInterruptPolarity>
 8007606:	0003      	movs	r3, r0
 8007608:	7023      	strb	r3, [r4, #0]
	status = VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 800760a:	197c      	adds	r4, r7, r5
 800760c:	230e      	movs	r3, #14
 800760e:	18fa      	adds	r2, r7, r3
 8007610:	1dbb      	adds	r3, r7, #6
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	2131      	movs	r1, #49	@ 0x31
 8007616:	0018      	movs	r0, r3
 8007618:	f000 fe10 	bl	800823c <VL53L1_RdByte>
 800761c:	0003      	movs	r3, r0
 800761e:	7023      	strb	r3, [r4, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0)
 8007620:	197b      	adds	r3, r7, r5
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	b25b      	sxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d110      	bne.n	800764c <VL53L1X_CheckForDataReady+0x6e>
	{
		if ((Temp & 1) == IntPol)
 800762a:	230e      	movs	r3, #14
 800762c:	18fb      	adds	r3, r7, r3
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	001a      	movs	r2, r3
 8007632:	2301      	movs	r3, #1
 8007634:	4013      	ands	r3, r2
 8007636:	19ba      	adds	r2, r7, r6
 8007638:	7812      	ldrb	r2, [r2, #0]
 800763a:	4293      	cmp	r3, r2
 800763c:	d103      	bne.n	8007646 <VL53L1X_CheckForDataReady+0x68>
		{
			*isDataReady = 1;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2201      	movs	r2, #1
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	e002      	b.n	800764c <VL53L1X_CheckForDataReady+0x6e>
		}
		else
		{
			*isDataReady = 0;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2200      	movs	r2, #0
 800764a:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
 800764c:	230f      	movs	r3, #15
 800764e:	18fb      	adds	r3, r7, r3
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	b25b      	sxtb	r3, r3
}
 8007654:	0018      	movs	r0, r3
 8007656:	46bd      	mov	sp, r7
 8007658:	b005      	add	sp, #20
 800765a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800765c <VL53L1X_SetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_SetTimingBudgetInMs(uint16_t dev, uint16_t TimingBudgetInMs)
{
 800765c:	b5b0      	push	{r4, r5, r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	0002      	movs	r2, r0
 8007664:	1dbb      	adds	r3, r7, #6
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	1d3b      	adds	r3, r7, #4
 800766a:	1c0a      	adds	r2, r1, #0
 800766c:	801a      	strh	r2, [r3, #0]
	uint16_t DM;
	VL53L1X_ERROR  status=0;
 800766e:	210f      	movs	r1, #15
 8007670:	187b      	adds	r3, r7, r1
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]

	status = VL53L1X_GetDistanceMode(dev, &DM);
 8007676:	187c      	adds	r4, r7, r1
 8007678:	250c      	movs	r5, #12
 800767a:	197a      	adds	r2, r7, r5
 800767c:	1dbb      	adds	r3, r7, #6
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	0011      	movs	r1, r2
 8007682:	0018      	movs	r0, r3
 8007684:	f000 fa94 	bl	8007bb0 <VL53L1X_GetDistanceMode>
 8007688:	0003      	movs	r3, r0
 800768a:	7023      	strb	r3, [r4, #0]
	if (DM == 0)
 800768c:	197b      	adds	r3, r7, r5
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <VL53L1X_SetTimingBudgetInMs+0x3c>
		return 1;
 8007694:	2301      	movs	r3, #1
 8007696:	e11a      	b.n	80078ce <VL53L1X_SetTimingBudgetInMs+0x272>
	else if (DM == 1) {	/* Short DistanceMode */
 8007698:	230c      	movs	r3, #12
 800769a:	18fb      	adds	r3, r7, r3
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d000      	beq.n	80076a4 <VL53L1X_SetTimingBudgetInMs+0x48>
 80076a2:	e092      	b.n	80077ca <VL53L1X_SetTimingBudgetInMs+0x16e>
		switch (TimingBudgetInMs) {
 80076a4:	1d3b      	adds	r3, r7, #4
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	22fa      	movs	r2, #250	@ 0xfa
 80076aa:	0052      	lsls	r2, r2, #1
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d100      	bne.n	80076b2 <VL53L1X_SetTimingBudgetInMs+0x56>
 80076b0:	e077      	b.n	80077a2 <VL53L1X_SetTimingBudgetInMs+0x146>
 80076b2:	22fa      	movs	r2, #250	@ 0xfa
 80076b4:	0052      	lsls	r2, r2, #1
 80076b6:	4293      	cmp	r3, r2
 80076b8:	dd00      	ble.n	80076bc <VL53L1X_SetTimingBudgetInMs+0x60>
 80076ba:	e081      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x164>
 80076bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80076be:	d100      	bne.n	80076c2 <VL53L1X_SetTimingBudgetInMs+0x66>
 80076c0:	e060      	b.n	8007784 <VL53L1X_SetTimingBudgetInMs+0x128>
 80076c2:	dd00      	ble.n	80076c6 <VL53L1X_SetTimingBudgetInMs+0x6a>
 80076c4:	e07c      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x164>
 80076c6:	2b64      	cmp	r3, #100	@ 0x64
 80076c8:	d04c      	beq.n	8007764 <VL53L1X_SetTimingBudgetInMs+0x108>
 80076ca:	dd00      	ble.n	80076ce <VL53L1X_SetTimingBudgetInMs+0x72>
 80076cc:	e078      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x164>
 80076ce:	2b32      	cmp	r3, #50	@ 0x32
 80076d0:	d037      	beq.n	8007742 <VL53L1X_SetTimingBudgetInMs+0xe6>
 80076d2:	dd00      	ble.n	80076d6 <VL53L1X_SetTimingBudgetInMs+0x7a>
 80076d4:	e074      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x164>
 80076d6:	2b21      	cmp	r3, #33	@ 0x21
 80076d8:	d024      	beq.n	8007724 <VL53L1X_SetTimingBudgetInMs+0xc8>
 80076da:	dd00      	ble.n	80076de <VL53L1X_SetTimingBudgetInMs+0x82>
 80076dc:	e070      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x164>
 80076de:	2b0f      	cmp	r3, #15
 80076e0:	d002      	beq.n	80076e8 <VL53L1X_SetTimingBudgetInMs+0x8c>
 80076e2:	2b14      	cmp	r3, #20
 80076e4:	d00f      	beq.n	8007706 <VL53L1X_SetTimingBudgetInMs+0xaa>
 80076e6:	e06b      	b.n	80077c0 <VL53L1X_SetTimingBudgetInMs+0x164>
		case 15: /* only available in short distance mode */
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80076e8:	1dbb      	adds	r3, r7, #6
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	221d      	movs	r2, #29
 80076ee:	215e      	movs	r1, #94	@ 0x5e
 80076f0:	0018      	movs	r0, r3
 80076f2:	f000 fd15 	bl	8008120 <VL53L1_WrWord>
					0x01D);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80076f6:	1dbb      	adds	r3, r7, #6
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	2227      	movs	r2, #39	@ 0x27
 80076fc:	2161      	movs	r1, #97	@ 0x61
 80076fe:	0018      	movs	r0, r3
 8007700:	f000 fd0e 	bl	8008120 <VL53L1_WrWord>
					0x0027);
			break;
 8007704:	e0df      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007706:	1dbb      	adds	r3, r7, #6
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	2251      	movs	r2, #81	@ 0x51
 800770c:	215e      	movs	r1, #94	@ 0x5e
 800770e:	0018      	movs	r0, r3
 8007710:	f000 fd06 	bl	8008120 <VL53L1_WrWord>
					0x0051);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007714:	1dbb      	adds	r3, r7, #6
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	226e      	movs	r2, #110	@ 0x6e
 800771a:	2161      	movs	r1, #97	@ 0x61
 800771c:	0018      	movs	r0, r3
 800771e:	f000 fcff 	bl	8008120 <VL53L1_WrWord>
					0x006E);
			break;
 8007722:	e0d0      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007724:	1dbb      	adds	r3, r7, #6
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	22d6      	movs	r2, #214	@ 0xd6
 800772a:	215e      	movs	r1, #94	@ 0x5e
 800772c:	0018      	movs	r0, r3
 800772e:	f000 fcf7 	bl	8008120 <VL53L1_WrWord>
					0x00D6);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007732:	1dbb      	adds	r3, r7, #6
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	226e      	movs	r2, #110	@ 0x6e
 8007738:	2161      	movs	r1, #97	@ 0x61
 800773a:	0018      	movs	r0, r3
 800773c:	f000 fcf0 	bl	8008120 <VL53L1_WrWord>
					0x006E);
			break;
 8007740:	e0c1      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007742:	23d7      	movs	r3, #215	@ 0xd7
 8007744:	005a      	lsls	r2, r3, #1
 8007746:	1dbb      	adds	r3, r7, #6
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	215e      	movs	r1, #94	@ 0x5e
 800774c:	0018      	movs	r0, r3
 800774e:	f000 fce7 	bl	8008120 <VL53L1_WrWord>
					0x1AE);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007752:	23f4      	movs	r3, #244	@ 0xf4
 8007754:	005a      	lsls	r2, r3, #1
 8007756:	1dbb      	adds	r3, r7, #6
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	2161      	movs	r1, #97	@ 0x61
 800775c:	0018      	movs	r0, r3
 800775e:	f000 fcdf 	bl	8008120 <VL53L1_WrWord>
					0x01E8);
			break;
 8007762:	e0b0      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007764:	4a5c      	ldr	r2, [pc, #368]	@ (80078d8 <VL53L1X_SetTimingBudgetInMs+0x27c>)
 8007766:	1dbb      	adds	r3, r7, #6
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	215e      	movs	r1, #94	@ 0x5e
 800776c:	0018      	movs	r0, r3
 800776e:	f000 fcd7 	bl	8008120 <VL53L1_WrWord>
					0x02E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007772:	23e2      	movs	r3, #226	@ 0xe2
 8007774:	009a      	lsls	r2, r3, #2
 8007776:	1dbb      	adds	r3, r7, #6
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	2161      	movs	r1, #97	@ 0x61
 800777c:	0018      	movs	r0, r3
 800777e:	f000 fccf 	bl	8008120 <VL53L1_WrWord>
					0x0388);
			break;
 8007782:	e0a0      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007784:	4a55      	ldr	r2, [pc, #340]	@ (80078dc <VL53L1X_SetTimingBudgetInMs+0x280>)
 8007786:	1dbb      	adds	r3, r7, #6
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	215e      	movs	r1, #94	@ 0x5e
 800778c:	0018      	movs	r0, r3
 800778e:	f000 fcc7 	bl	8008120 <VL53L1_WrWord>
					0x03E1);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007792:	4a53      	ldr	r2, [pc, #332]	@ (80078e0 <VL53L1X_SetTimingBudgetInMs+0x284>)
 8007794:	1dbb      	adds	r3, r7, #6
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	2161      	movs	r1, #97	@ 0x61
 800779a:	0018      	movs	r0, r3
 800779c:	f000 fcc0 	bl	8008120 <VL53L1_WrWord>
					0x0496);
			break;
 80077a0:	e091      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 80077a2:	4a50      	ldr	r2, [pc, #320]	@ (80078e4 <VL53L1X_SetTimingBudgetInMs+0x288>)
 80077a4:	1dbb      	adds	r3, r7, #6
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	215e      	movs	r1, #94	@ 0x5e
 80077aa:	0018      	movs	r0, r3
 80077ac:	f000 fcb8 	bl	8008120 <VL53L1_WrWord>
					0x0591);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80077b0:	4a4d      	ldr	r2, [pc, #308]	@ (80078e8 <VL53L1X_SetTimingBudgetInMs+0x28c>)
 80077b2:	1dbb      	adds	r3, r7, #6
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	2161      	movs	r1, #97	@ 0x61
 80077b8:	0018      	movs	r0, r3
 80077ba:	f000 fcb1 	bl	8008120 <VL53L1_WrWord>
					0x05C1);
			break;
 80077be:	e082      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		default:
			status = 1;
 80077c0:	230f      	movs	r3, #15
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	2201      	movs	r2, #1
 80077c6:	701a      	strb	r2, [r3, #0]
			break;
 80077c8:	e07d      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		}
	} else {
		switch (TimingBudgetInMs) {
 80077ca:	1d3b      	adds	r3, r7, #4
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	22fa      	movs	r2, #250	@ 0xfa
 80077d0:	0052      	lsls	r2, r2, #1
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d100      	bne.n	80077d8 <VL53L1X_SetTimingBudgetInMs+0x17c>
 80077d6:	e062      	b.n	800789e <VL53L1X_SetTimingBudgetInMs+0x242>
 80077d8:	22fa      	movs	r2, #250	@ 0xfa
 80077da:	0052      	lsls	r2, r2, #1
 80077dc:	4293      	cmp	r3, r2
 80077de:	dd00      	ble.n	80077e2 <VL53L1X_SetTimingBudgetInMs+0x186>
 80077e0:	e06c      	b.n	80078bc <VL53L1X_SetTimingBudgetInMs+0x260>
 80077e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80077e4:	d04b      	beq.n	800787e <VL53L1X_SetTimingBudgetInMs+0x222>
 80077e6:	dd00      	ble.n	80077ea <VL53L1X_SetTimingBudgetInMs+0x18e>
 80077e8:	e068      	b.n	80078bc <VL53L1X_SetTimingBudgetInMs+0x260>
 80077ea:	2b64      	cmp	r3, #100	@ 0x64
 80077ec:	d036      	beq.n	800785c <VL53L1X_SetTimingBudgetInMs+0x200>
 80077ee:	dd00      	ble.n	80077f2 <VL53L1X_SetTimingBudgetInMs+0x196>
 80077f0:	e064      	b.n	80078bc <VL53L1X_SetTimingBudgetInMs+0x260>
 80077f2:	2b32      	cmp	r3, #50	@ 0x32
 80077f4:	d023      	beq.n	800783e <VL53L1X_SetTimingBudgetInMs+0x1e2>
 80077f6:	dc61      	bgt.n	80078bc <VL53L1X_SetTimingBudgetInMs+0x260>
 80077f8:	2b14      	cmp	r3, #20
 80077fa:	d002      	beq.n	8007802 <VL53L1X_SetTimingBudgetInMs+0x1a6>
 80077fc:	2b21      	cmp	r3, #33	@ 0x21
 80077fe:	d00f      	beq.n	8007820 <VL53L1X_SetTimingBudgetInMs+0x1c4>
 8007800:	e05c      	b.n	80078bc <VL53L1X_SetTimingBudgetInMs+0x260>
		case 20:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007802:	1dbb      	adds	r3, r7, #6
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	221e      	movs	r2, #30
 8007808:	215e      	movs	r1, #94	@ 0x5e
 800780a:	0018      	movs	r0, r3
 800780c:	f000 fc88 	bl	8008120 <VL53L1_WrWord>
					0x001E);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8007810:	1dbb      	adds	r3, r7, #6
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	2222      	movs	r2, #34	@ 0x22
 8007816:	2161      	movs	r1, #97	@ 0x61
 8007818:	0018      	movs	r0, r3
 800781a:	f000 fc81 	bl	8008120 <VL53L1_WrWord>
					0x0022);
			break;
 800781e:	e052      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 33:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8007820:	1dbb      	adds	r3, r7, #6
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	2260      	movs	r2, #96	@ 0x60
 8007826:	215e      	movs	r1, #94	@ 0x5e
 8007828:	0018      	movs	r0, r3
 800782a:	f000 fc79 	bl	8008120 <VL53L1_WrWord>
					0x0060);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800782e:	1dbb      	adds	r3, r7, #6
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	226e      	movs	r2, #110	@ 0x6e
 8007834:	2161      	movs	r1, #97	@ 0x61
 8007836:	0018      	movs	r0, r3
 8007838:	f000 fc72 	bl	8008120 <VL53L1_WrWord>
					0x006E);
			break;
 800783c:	e043      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 50:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800783e:	1dbb      	adds	r3, r7, #6
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	22ad      	movs	r2, #173	@ 0xad
 8007844:	215e      	movs	r1, #94	@ 0x5e
 8007846:	0018      	movs	r0, r3
 8007848:	f000 fc6a 	bl	8008120 <VL53L1_WrWord>
					0x00AD);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800784c:	1dbb      	adds	r3, r7, #6
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	22c6      	movs	r2, #198	@ 0xc6
 8007852:	2161      	movs	r1, #97	@ 0x61
 8007854:	0018      	movs	r0, r3
 8007856:	f000 fc63 	bl	8008120 <VL53L1_WrWord>
					0x00C6);
			break;
 800785a:	e034      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 100:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800785c:	23e6      	movs	r3, #230	@ 0xe6
 800785e:	005a      	lsls	r2, r3, #1
 8007860:	1dbb      	adds	r3, r7, #6
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	215e      	movs	r1, #94	@ 0x5e
 8007866:	0018      	movs	r0, r3
 8007868:	f000 fc5a 	bl	8008120 <VL53L1_WrWord>
					0x01CC);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800786c:	23f5      	movs	r3, #245	@ 0xf5
 800786e:	005a      	lsls	r2, r3, #1
 8007870:	1dbb      	adds	r3, r7, #6
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	2161      	movs	r1, #97	@ 0x61
 8007876:	0018      	movs	r0, r3
 8007878:	f000 fc52 	bl	8008120 <VL53L1_WrWord>
					0x01EA);
			break;
 800787c:	e023      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 200:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800787e:	4a1b      	ldr	r2, [pc, #108]	@ (80078ec <VL53L1X_SetTimingBudgetInMs+0x290>)
 8007880:	1dbb      	adds	r3, r7, #6
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	215e      	movs	r1, #94	@ 0x5e
 8007886:	0018      	movs	r0, r3
 8007888:	f000 fc4a 	bl	8008120 <VL53L1_WrWord>
					0x02D9);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 800788c:	23be      	movs	r3, #190	@ 0xbe
 800788e:	009a      	lsls	r2, r3, #2
 8007890:	1dbb      	adds	r3, r7, #6
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	2161      	movs	r1, #97	@ 0x61
 8007896:	0018      	movs	r0, r3
 8007898:	f000 fc42 	bl	8008120 <VL53L1_WrWord>
					0x02F8);
			break;
 800789c:	e013      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		case 500:
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 800789e:	4a14      	ldr	r2, [pc, #80]	@ (80078f0 <VL53L1X_SetTimingBudgetInMs+0x294>)
 80078a0:	1dbb      	adds	r3, r7, #6
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	215e      	movs	r1, #94	@ 0x5e
 80078a6:	0018      	movs	r0, r3
 80078a8:	f000 fc3a 	bl	8008120 <VL53L1_WrWord>
					0x048F);
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 80078ac:	4a11      	ldr	r2, [pc, #68]	@ (80078f4 <VL53L1X_SetTimingBudgetInMs+0x298>)
 80078ae:	1dbb      	adds	r3, r7, #6
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	2161      	movs	r1, #97	@ 0x61
 80078b4:	0018      	movs	r0, r3
 80078b6:	f000 fc33 	bl	8008120 <VL53L1_WrWord>
					0x04A4);
			break;
 80078ba:	e004      	b.n	80078c6 <VL53L1X_SetTimingBudgetInMs+0x26a>
		default:
			status = 1;
 80078bc:	230f      	movs	r3, #15
 80078be:	18fb      	adds	r3, r7, r3
 80078c0:	2201      	movs	r2, #1
 80078c2:	701a      	strb	r2, [r3, #0]
			break;
 80078c4:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return status;
 80078c6:	230f      	movs	r3, #15
 80078c8:	18fb      	adds	r3, r7, r3
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b25b      	sxtb	r3, r3
}
 80078ce:	0018      	movs	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	b004      	add	sp, #16
 80078d4:	bdb0      	pop	{r4, r5, r7, pc}
 80078d6:	46c0      	nop			@ (mov r8, r8)
 80078d8:	000002e1 	.word	0x000002e1
 80078dc:	000003e1 	.word	0x000003e1
 80078e0:	00000496 	.word	0x00000496
 80078e4:	00000591 	.word	0x00000591
 80078e8:	000005c1 	.word	0x000005c1
 80078ec:	000002d9 	.word	0x000002d9
 80078f0:	0000048f 	.word	0x0000048f
 80078f4:	000004a4 	.word	0x000004a4

080078f8 <VL53L1X_GetTimingBudgetInMs>:

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 80078f8:	b5b0      	push	{r4, r5, r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	0002      	movs	r2, r0
 8007900:	6039      	str	r1, [r7, #0]
 8007902:	1dbb      	adds	r3, r7, #6
 8007904:	801a      	strh	r2, [r3, #0]
	uint16_t Temp;
	VL53L1X_ERROR status = 0;
 8007906:	210f      	movs	r1, #15
 8007908:	187b      	adds	r3, r7, r1
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 800790e:	187c      	adds	r4, r7, r1
 8007910:	250c      	movs	r5, #12
 8007912:	197a      	adds	r2, r7, r5
 8007914:	1dbb      	adds	r3, r7, #6
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	215e      	movs	r1, #94	@ 0x5e
 800791a:	0018      	movs	r0, r3
 800791c:	f000 fca9 	bl	8008272 <VL53L1_RdWord>
 8007920:	0003      	movs	r3, r0
 8007922:	7023      	strb	r3, [r4, #0]
	switch (Temp) {
 8007924:	197b      	adds	r3, r7, r5
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	4a37      	ldr	r2, [pc, #220]	@ (8007a08 <VL53L1X_GetTimingBudgetInMs+0x110>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d100      	bne.n	8007930 <VL53L1X_GetTimingBudgetInMs+0x38>
 800792e:	e057      	b.n	80079e0 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8007930:	4a35      	ldr	r2, [pc, #212]	@ (8007a08 <VL53L1X_GetTimingBudgetInMs+0x110>)
 8007932:	4293      	cmp	r3, r2
 8007934:	dd00      	ble.n	8007938 <VL53L1X_GetTimingBudgetInMs+0x40>
 8007936:	e058      	b.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 8007938:	4a34      	ldr	r2, [pc, #208]	@ (8007a0c <VL53L1X_GetTimingBudgetInMs+0x114>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d100      	bne.n	8007940 <VL53L1X_GetTimingBudgetInMs+0x48>
 800793e:	e04f      	b.n	80079e0 <VL53L1X_GetTimingBudgetInMs+0xe8>
 8007940:	2292      	movs	r2, #146	@ 0x92
 8007942:	00d2      	lsls	r2, r2, #3
 8007944:	4293      	cmp	r3, r2
 8007946:	db00      	blt.n	800794a <VL53L1X_GetTimingBudgetInMs+0x52>
 8007948:	e04f      	b.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 800794a:	4a31      	ldr	r2, [pc, #196]	@ (8007a10 <VL53L1X_GetTimingBudgetInMs+0x118>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d043      	beq.n	80079d8 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8007950:	4a2f      	ldr	r2, [pc, #188]	@ (8007a10 <VL53L1X_GetTimingBudgetInMs+0x118>)
 8007952:	4293      	cmp	r3, r2
 8007954:	dc49      	bgt.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 8007956:	4a2f      	ldr	r2, [pc, #188]	@ (8007a14 <VL53L1X_GetTimingBudgetInMs+0x11c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d039      	beq.n	80079d0 <VL53L1X_GetTimingBudgetInMs+0xd8>
 800795c:	4a2d      	ldr	r2, [pc, #180]	@ (8007a14 <VL53L1X_GetTimingBudgetInMs+0x11c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	dc43      	bgt.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 8007962:	4a2d      	ldr	r2, [pc, #180]	@ (8007a18 <VL53L1X_GetTimingBudgetInMs+0x120>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d037      	beq.n	80079d8 <VL53L1X_GetTimingBudgetInMs+0xe0>
 8007968:	4a2b      	ldr	r2, [pc, #172]	@ (8007a18 <VL53L1X_GetTimingBudgetInMs+0x120>)
 800796a:	4293      	cmp	r3, r2
 800796c:	dc3d      	bgt.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 800796e:	22e6      	movs	r2, #230	@ 0xe6
 8007970:	0052      	lsls	r2, r2, #1
 8007972:	4293      	cmp	r3, r2
 8007974:	d02c      	beq.n	80079d0 <VL53L1X_GetTimingBudgetInMs+0xd8>
 8007976:	22e6      	movs	r2, #230	@ 0xe6
 8007978:	0052      	lsls	r2, r2, #1
 800797a:	4293      	cmp	r3, r2
 800797c:	dc35      	bgt.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 800797e:	22d7      	movs	r2, #215	@ 0xd7
 8007980:	0052      	lsls	r2, r2, #1
 8007982:	4293      	cmp	r3, r2
 8007984:	d020      	beq.n	80079c8 <VL53L1X_GetTimingBudgetInMs+0xd0>
 8007986:	22d7      	movs	r2, #215	@ 0xd7
 8007988:	0052      	lsls	r2, r2, #1
 800798a:	4293      	cmp	r3, r2
 800798c:	dc2d      	bgt.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 800798e:	2bd6      	cmp	r3, #214	@ 0xd6
 8007990:	d016      	beq.n	80079c0 <VL53L1X_GetTimingBudgetInMs+0xc8>
 8007992:	dc2a      	bgt.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 8007994:	2bad      	cmp	r3, #173	@ 0xad
 8007996:	d017      	beq.n	80079c8 <VL53L1X_GetTimingBudgetInMs+0xd0>
 8007998:	dc27      	bgt.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 800799a:	2b60      	cmp	r3, #96	@ 0x60
 800799c:	d010      	beq.n	80079c0 <VL53L1X_GetTimingBudgetInMs+0xc8>
 800799e:	dc24      	bgt.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 80079a0:	2b51      	cmp	r3, #81	@ 0x51
 80079a2:	d009      	beq.n	80079b8 <VL53L1X_GetTimingBudgetInMs+0xc0>
 80079a4:	dc21      	bgt.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
 80079a6:	2b1d      	cmp	r3, #29
 80079a8:	d002      	beq.n	80079b0 <VL53L1X_GetTimingBudgetInMs+0xb8>
 80079aa:	2b1e      	cmp	r3, #30
 80079ac:	d004      	beq.n	80079b8 <VL53L1X_GetTimingBudgetInMs+0xc0>
 80079ae:	e01c      	b.n	80079ea <VL53L1X_GetTimingBudgetInMs+0xf2>
		case 0x001D :
			*pTimingBudget = 15;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	220f      	movs	r2, #15
 80079b4:	801a      	strh	r2, [r3, #0]
			break;
 80079b6:	e01f      	b.n	80079f8 <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x0051 :
		case 0x001E :
			*pTimingBudget = 20;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2214      	movs	r2, #20
 80079bc:	801a      	strh	r2, [r3, #0]
			break;
 80079be:	e01b      	b.n	80079f8 <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2221      	movs	r2, #33	@ 0x21
 80079c4:	801a      	strh	r2, [r3, #0]
			break;
 80079c6:	e017      	b.n	80079f8 <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x1AE :
		case 0x00AD :
			*pTimingBudget = 50;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2232      	movs	r2, #50	@ 0x32
 80079cc:	801a      	strh	r2, [r3, #0]
			break;
 80079ce:	e013      	b.n	80079f8 <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x02E1 :
		case 0x01CC :
			*pTimingBudget = 100;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2264      	movs	r2, #100	@ 0x64
 80079d4:	801a      	strh	r2, [r3, #0]
			break;
 80079d6:	e00f      	b.n	80079f8 <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x03E1 :
		case 0x02D9 :
			*pTimingBudget = 200;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	22c8      	movs	r2, #200	@ 0xc8
 80079dc:	801a      	strh	r2, [r3, #0]
			break;
 80079de:	e00b      	b.n	80079f8 <VL53L1X_GetTimingBudgetInMs+0x100>
		case 0x0591 :
		case 0x048F :
			*pTimingBudget = 500;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	22fa      	movs	r2, #250	@ 0xfa
 80079e4:	0052      	lsls	r2, r2, #1
 80079e6:	801a      	strh	r2, [r3, #0]
			break;
 80079e8:	e006      	b.n	80079f8 <VL53L1X_GetTimingBudgetInMs+0x100>
		default:
			status = 1;
 80079ea:	230f      	movs	r3, #15
 80079ec:	18fb      	adds	r3, r7, r3
 80079ee:	2201      	movs	r2, #1
 80079f0:	701a      	strb	r2, [r3, #0]
			*pTimingBudget = 0;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2200      	movs	r2, #0
 80079f6:	801a      	strh	r2, [r3, #0]
	}
	return status;
 80079f8:	230f      	movs	r3, #15
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b25b      	sxtb	r3, r3
}
 8007a00:	0018      	movs	r0, r3
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b004      	add	sp, #16
 8007a06:	bdb0      	pop	{r4, r5, r7, pc}
 8007a08:	00000591 	.word	0x00000591
 8007a0c:	0000048f 	.word	0x0000048f
 8007a10:	000003e1 	.word	0x000003e1
 8007a14:	000002e1 	.word	0x000002e1
 8007a18:	000002d9 	.word	0x000002d9

08007a1c <VL53L1X_SetDistanceMode>:

VL53L1X_ERROR VL53L1X_SetDistanceMode(uint16_t dev, uint16_t DM)
{
 8007a1c:	b5b0      	push	{r4, r5, r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	0002      	movs	r2, r0
 8007a24:	1dbb      	adds	r3, r7, #6
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	1d3b      	adds	r3, r7, #4
 8007a2a:	1c0a      	adds	r2, r1, #0
 8007a2c:	801a      	strh	r2, [r3, #0]
	uint16_t TB;
	VL53L1X_ERROR status = 0;
 8007a2e:	250f      	movs	r5, #15
 8007a30:	197b      	adds	r3, r7, r5
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]

	status = VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8007a36:	197c      	adds	r4, r7, r5
 8007a38:	230c      	movs	r3, #12
 8007a3a:	18fa      	adds	r2, r7, r3
 8007a3c:	1dbb      	adds	r3, r7, #6
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	0011      	movs	r1, r2
 8007a42:	0018      	movs	r0, r3
 8007a44:	f7ff ff58 	bl	80078f8 <VL53L1X_GetTimingBudgetInMs>
 8007a48:	0003      	movs	r3, r0
 8007a4a:	7023      	strb	r3, [r4, #0]
	if (status != 0)
 8007a4c:	197b      	adds	r3, r7, r5
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b25b      	sxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <VL53L1X_SetDistanceMode+0x3e>
		return 1;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e09d      	b.n	8007b96 <VL53L1X_SetDistanceMode+0x17a>
	switch (DM) {
 8007a5a:	1d3b      	adds	r3, r7, #4
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d002      	beq.n	8007a68 <VL53L1X_SetDistanceMode+0x4c>
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d03e      	beq.n	8007ae4 <VL53L1X_SetDistanceMode+0xc8>
 8007a66:	e07b      	b.n	8007b60 <VL53L1X_SetDistanceMode+0x144>
	case 1:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8007a68:	250f      	movs	r5, #15
 8007a6a:	197c      	adds	r4, r7, r5
 8007a6c:	1dbb      	adds	r3, r7, #6
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	2214      	movs	r2, #20
 8007a72:	214b      	movs	r1, #75	@ 0x4b
 8007a74:	0018      	movs	r0, r3
 8007a76:	f000 fb15 	bl	80080a4 <VL53L1_WrByte>
 8007a7a:	0003      	movs	r3, r0
 8007a7c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8007a7e:	197c      	adds	r4, r7, r5
 8007a80:	1dbb      	adds	r3, r7, #6
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	2207      	movs	r2, #7
 8007a86:	2160      	movs	r1, #96	@ 0x60
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f000 fb0b 	bl	80080a4 <VL53L1_WrByte>
 8007a8e:	0003      	movs	r3, r0
 8007a90:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8007a92:	197c      	adds	r4, r7, r5
 8007a94:	1dbb      	adds	r3, r7, #6
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	2205      	movs	r2, #5
 8007a9a:	2163      	movs	r1, #99	@ 0x63
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f000 fb01 	bl	80080a4 <VL53L1_WrByte>
 8007aa2:	0003      	movs	r3, r0
 8007aa4:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8007aa6:	197c      	adds	r4, r7, r5
 8007aa8:	1dbb      	adds	r3, r7, #6
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	2238      	movs	r2, #56	@ 0x38
 8007aae:	2169      	movs	r1, #105	@ 0x69
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f000 faf7 	bl	80080a4 <VL53L1_WrByte>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8007aba:	197c      	adds	r4, r7, r5
 8007abc:	4a38      	ldr	r2, [pc, #224]	@ (8007ba0 <VL53L1X_SetDistanceMode+0x184>)
 8007abe:	1dbb      	adds	r3, r7, #6
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	2178      	movs	r1, #120	@ 0x78
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f000 fb2b 	bl	8008120 <VL53L1_WrWord>
 8007aca:	0003      	movs	r3, r0
 8007acc:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8007ace:	197c      	adds	r4, r7, r5
 8007ad0:	4a34      	ldr	r2, [pc, #208]	@ (8007ba4 <VL53L1X_SetDistanceMode+0x188>)
 8007ad2:	1dbb      	adds	r3, r7, #6
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	217a      	movs	r1, #122	@ 0x7a
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f000 fb21 	bl	8008120 <VL53L1_WrWord>
 8007ade:	0003      	movs	r3, r0
 8007ae0:	7023      	strb	r3, [r4, #0]
		break;
 8007ae2:	e042      	b.n	8007b6a <VL53L1X_SetDistanceMode+0x14e>
	case 2:
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8007ae4:	250f      	movs	r5, #15
 8007ae6:	197c      	adds	r4, r7, r5
 8007ae8:	1dbb      	adds	r3, r7, #6
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	220a      	movs	r2, #10
 8007aee:	214b      	movs	r1, #75	@ 0x4b
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 fad7 	bl	80080a4 <VL53L1_WrByte>
 8007af6:	0003      	movs	r3, r0
 8007af8:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8007afa:	197c      	adds	r4, r7, r5
 8007afc:	1dbb      	adds	r3, r7, #6
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	220f      	movs	r2, #15
 8007b02:	2160      	movs	r1, #96	@ 0x60
 8007b04:	0018      	movs	r0, r3
 8007b06:	f000 facd 	bl	80080a4 <VL53L1_WrByte>
 8007b0a:	0003      	movs	r3, r0
 8007b0c:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8007b0e:	197c      	adds	r4, r7, r5
 8007b10:	1dbb      	adds	r3, r7, #6
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	220d      	movs	r2, #13
 8007b16:	2163      	movs	r1, #99	@ 0x63
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f000 fac3 	bl	80080a4 <VL53L1_WrByte>
 8007b1e:	0003      	movs	r3, r0
 8007b20:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8007b22:	197c      	adds	r4, r7, r5
 8007b24:	1dbb      	adds	r3, r7, #6
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	22b8      	movs	r2, #184	@ 0xb8
 8007b2a:	2169      	movs	r1, #105	@ 0x69
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f000 fab9 	bl	80080a4 <VL53L1_WrByte>
 8007b32:	0003      	movs	r3, r0
 8007b34:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8007b36:	197c      	adds	r4, r7, r5
 8007b38:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba8 <VL53L1X_SetDistanceMode+0x18c>)
 8007b3a:	1dbb      	adds	r3, r7, #6
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	2178      	movs	r1, #120	@ 0x78
 8007b40:	0018      	movs	r0, r3
 8007b42:	f000 faed 	bl	8008120 <VL53L1_WrWord>
 8007b46:	0003      	movs	r3, r0
 8007b48:	7023      	strb	r3, [r4, #0]
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8007b4a:	197c      	adds	r4, r7, r5
 8007b4c:	4a17      	ldr	r2, [pc, #92]	@ (8007bac <VL53L1X_SetDistanceMode+0x190>)
 8007b4e:	1dbb      	adds	r3, r7, #6
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	217a      	movs	r1, #122	@ 0x7a
 8007b54:	0018      	movs	r0, r3
 8007b56:	f000 fae3 	bl	8008120 <VL53L1_WrWord>
 8007b5a:	0003      	movs	r3, r0
 8007b5c:	7023      	strb	r3, [r4, #0]
		break;
 8007b5e:	e004      	b.n	8007b6a <VL53L1X_SetDistanceMode+0x14e>
	default:
		status = 1;
 8007b60:	230f      	movs	r3, #15
 8007b62:	18fb      	adds	r3, r7, r3
 8007b64:	2201      	movs	r2, #1
 8007b66:	701a      	strb	r2, [r3, #0]
		break;
 8007b68:	46c0      	nop			@ (mov r8, r8)
	}

	if (status == 0)
 8007b6a:	210f      	movs	r1, #15
 8007b6c:	187b      	adds	r3, r7, r1
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <VL53L1X_SetDistanceMode+0x172>
		status = VL53L1X_SetTimingBudgetInMs(dev, TB);
 8007b76:	230c      	movs	r3, #12
 8007b78:	18fb      	adds	r3, r7, r3
 8007b7a:	881a      	ldrh	r2, [r3, #0]
 8007b7c:	187c      	adds	r4, r7, r1
 8007b7e:	1dbb      	adds	r3, r7, #6
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	0011      	movs	r1, r2
 8007b84:	0018      	movs	r0, r3
 8007b86:	f7ff fd69 	bl	800765c <VL53L1X_SetTimingBudgetInMs>
 8007b8a:	0003      	movs	r3, r0
 8007b8c:	7023      	strb	r3, [r4, #0]
	return status;
 8007b8e:	230f      	movs	r3, #15
 8007b90:	18fb      	adds	r3, r7, r3
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	b25b      	sxtb	r3, r3
}
 8007b96:	0018      	movs	r0, r3
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	b004      	add	sp, #16
 8007b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b9e:	46c0      	nop			@ (mov r8, r8)
 8007ba0:	00000705 	.word	0x00000705
 8007ba4:	00000606 	.word	0x00000606
 8007ba8:	00000f0d 	.word	0x00000f0d
 8007bac:	00000e0e 	.word	0x00000e0e

08007bb0 <VL53L1X_GetDistanceMode>:

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8007bb0:	b5b0      	push	{r4, r5, r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	0002      	movs	r2, r0
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	1dbb      	adds	r3, r7, #6
 8007bbc:	801a      	strh	r2, [r3, #0]
	uint8_t TempDM, status=0;
 8007bbe:	240f      	movs	r4, #15
 8007bc0:	193b      	adds	r3, r7, r4
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8007bc6:	250e      	movs	r5, #14
 8007bc8:	197a      	adds	r2, r7, r5
 8007bca:	1dbb      	adds	r3, r7, #6
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	214b      	movs	r1, #75	@ 0x4b
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f000 fb33 	bl	800823c <VL53L1_RdByte>
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	001a      	movs	r2, r3
 8007bda:	193b      	adds	r3, r7, r4
 8007bdc:	701a      	strb	r2, [r3, #0]
	if (TempDM == 0x14)
 8007bde:	197b      	adds	r3, r7, r5
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b14      	cmp	r3, #20
 8007be4:	d102      	bne.n	8007bec <VL53L1X_GetDistanceMode+0x3c>
		*DM=1;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2201      	movs	r2, #1
 8007bea:	801a      	strh	r2, [r3, #0]
	if(TempDM == 0x0A)
 8007bec:	230e      	movs	r3, #14
 8007bee:	18fb      	adds	r3, r7, r3
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b0a      	cmp	r3, #10
 8007bf4:	d102      	bne.n	8007bfc <VL53L1X_GetDistanceMode+0x4c>
		*DM=2;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	801a      	strh	r2, [r3, #0]
	return status;
 8007bfc:	230f      	movs	r3, #15
 8007bfe:	18fb      	adds	r3, r7, r3
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	b25b      	sxtb	r3, r3
}
 8007c04:	0018      	movs	r0, r3
 8007c06:	46bd      	mov	sp, r7
 8007c08:	b004      	add	sp, #16
 8007c0a:	bdb0      	pop	{r4, r5, r7, pc}

08007c0c <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	0002      	movs	r2, r0
 8007c14:	6039      	str	r1, [r7, #0]
 8007c16:	1dbb      	adds	r3, r7, #6
 8007c18:	801a      	strh	r2, [r3, #0]
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;
 8007c1a:	260f      	movs	r6, #15
 8007c1c:	19bb      	adds	r3, r7, r6
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8007c22:	19bc      	adds	r4, r7, r6
 8007c24:	250c      	movs	r5, #12
 8007c26:	197a      	adds	r2, r7, r5
 8007c28:	1dbb      	adds	r3, r7, #6
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	21de      	movs	r1, #222	@ 0xde
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f000 fb1f 	bl	8008272 <VL53L1_RdWord>
 8007c34:	0003      	movs	r3, r0
 8007c36:	7023      	strb	r3, [r4, #0]
	ClockPLL = ClockPLL&0x3FF;
 8007c38:	0029      	movs	r1, r5
 8007c3a:	187b      	adds	r3, r7, r1
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	059b      	lsls	r3, r3, #22
 8007c40:	0d9b      	lsrs	r3, r3, #22
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	187b      	adds	r3, r7, r1
 8007c46:	801a      	strh	r2, [r3, #0]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8007c48:	187b      	adds	r3, r7, r1
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	001a      	movs	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	4353      	muls	r3, r2
 8007c52:	0018      	movs	r0, r3
 8007c54:	f7fa fdb6 	bl	80027c4 <__aeabi_ui2d>
 8007c58:	4a0b      	ldr	r2, [pc, #44]	@ (8007c88 <VL53L1X_SetInterMeasurementInMs+0x7c>)
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <VL53L1X_SetInterMeasurementInMs+0x80>)
 8007c5c:	f7f9 fec2 	bl	80019e4 <__aeabi_dmul>
 8007c60:	0002      	movs	r2, r0
 8007c62:	000b      	movs	r3, r1
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8007c64:	0010      	movs	r0, r2
 8007c66:	0019      	movs	r1, r3
 8007c68:	f7f8 fc6c 	bl	8000544 <__aeabi_d2uiz>
 8007c6c:	0002      	movs	r2, r0
 8007c6e:	1dbb      	adds	r3, r7, #6
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	216c      	movs	r1, #108	@ 0x6c
 8007c74:	0018      	movs	r0, r3
 8007c76:	f000 fa99 	bl	80081ac <VL53L1_WrDWord>
	return status;
 8007c7a:	19bb      	adds	r3, r7, r6
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	b25b      	sxtb	r3, r3

}
 8007c80:	0018      	movs	r0, r3
 8007c82:	46bd      	mov	sp, r7
 8007c84:	b005      	add	sp, #20
 8007c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c88:	33333333 	.word	0x33333333
 8007c8c:	3ff13333 	.word	0x3ff13333

08007c90 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8007c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	0002      	movs	r2, r0
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	1dbb      	adds	r3, r7, #6
 8007c9c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007c9e:	250f      	movs	r5, #15
 8007ca0:	197b      	adds	r3, r7, r5
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
	uint8_t tmp = 0;
 8007ca6:	260e      	movs	r6, #14
 8007ca8:	19bb      	adds	r3, r7, r6
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]

	status = VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8007cae:	197c      	adds	r4, r7, r5
 8007cb0:	19ba      	adds	r2, r7, r6
 8007cb2:	1dbb      	adds	r3, r7, #6
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	21e5      	movs	r1, #229	@ 0xe5
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f000 fabf 	bl	800823c <VL53L1_RdByte>
 8007cbe:	0003      	movs	r3, r0
 8007cc0:	7023      	strb	r3, [r4, #0]
	*state = tmp;
 8007cc2:	19bb      	adds	r3, r7, r6
 8007cc4:	781a      	ldrb	r2, [r3, #0]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	701a      	strb	r2, [r3, #0]
	return status;
 8007cca:	197b      	adds	r3, r7, r5
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b25b      	sxtb	r3, r3
}
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b005      	add	sp, #20
 8007cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cd8 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8007cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	0002      	movs	r2, r0
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	1dbb      	adds	r3, r7, #6
 8007ce4:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007ce6:	250f      	movs	r5, #15
 8007ce8:	197b      	adds	r3, r7, r5
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status = (VL53L1_RdWord(dev,
 8007cee:	197c      	adds	r4, r7, r5
 8007cf0:	260c      	movs	r6, #12
 8007cf2:	19ba      	adds	r2, r7, r6
 8007cf4:	1dbb      	adds	r3, r7, #6
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	2196      	movs	r1, #150	@ 0x96
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	f000 fab9 	bl	8008272 <VL53L1_RdWord>
 8007d00:	0003      	movs	r3, r0
 8007d02:	7023      	strb	r3, [r4, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8007d04:	19bb      	adds	r3, r7, r6
 8007d06:	881a      	ldrh	r2, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	801a      	strh	r2, [r3, #0]
	return status;
 8007d0c:	197b      	adds	r3, r7, r5
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	b25b      	sxtb	r3, r3
}
 8007d12:	0018      	movs	r0, r3
 8007d14:	46bd      	mov	sp, r7
 8007d16:	b005      	add	sp, #20
 8007d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007d1c <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8007d1c:	b5b0      	push	{r4, r5, r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	0002      	movs	r2, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	1dbb      	adds	r3, r7, #6
 8007d28:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007d2a:	210f      	movs	r1, #15
 8007d2c:	187b      	adds	r3, r7, r1
 8007d2e:	2200      	movs	r2, #0
 8007d30:	701a      	strb	r2, [r3, #0]
	uint8_t RgSt;

	*rangeStatus = 255;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	22ff      	movs	r2, #255	@ 0xff
 8007d36:	701a      	strb	r2, [r3, #0]
	status = VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8007d38:	187c      	adds	r4, r7, r1
 8007d3a:	250e      	movs	r5, #14
 8007d3c:	197a      	adds	r2, r7, r5
 8007d3e:	1dbb      	adds	r3, r7, #6
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	2189      	movs	r1, #137	@ 0x89
 8007d44:	0018      	movs	r0, r3
 8007d46:	f000 fa79 	bl	800823c <VL53L1_RdByte>
 8007d4a:	0003      	movs	r3, r0
 8007d4c:	7023      	strb	r3, [r4, #0]
	RgSt = RgSt & 0x1F;
 8007d4e:	197b      	adds	r3, r7, r5
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	221f      	movs	r2, #31
 8007d54:	4013      	ands	r3, r2
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	197b      	adds	r3, r7, r5
 8007d5a:	701a      	strb	r2, [r3, #0]
	if (RgSt < 24)
 8007d5c:	197b      	adds	r3, r7, r5
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b17      	cmp	r3, #23
 8007d62:	d806      	bhi.n	8007d72 <VL53L1X_GetRangeStatus+0x56>
		*rangeStatus = status_rtn[RgSt];
 8007d64:	197b      	adds	r3, r7, r5
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	001a      	movs	r2, r3
 8007d6a:	4b06      	ldr	r3, [pc, #24]	@ (8007d84 <VL53L1X_GetRangeStatus+0x68>)
 8007d6c:	5c9a      	ldrb	r2, [r3, r2]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	701a      	strb	r2, [r3, #0]
	return status;
 8007d72:	230f      	movs	r3, #15
 8007d74:	18fb      	adds	r3, r7, r3
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	b25b      	sxtb	r3, r3
}
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b004      	add	sp, #16
 8007d80:	bdb0      	pop	{r4, r5, r7, pc}
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	0800cde8 	.word	0x0800cde8

08007d88 <VL53L1X_SetOffset>:

	return status;
}

VL53L1X_ERROR VL53L1X_SetOffset(uint16_t dev, int16_t OffsetValue)
{
 8007d88:	b590      	push	{r4, r7, lr}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	0002      	movs	r2, r0
 8007d90:	1dbb      	adds	r3, r7, #6
 8007d92:	801a      	strh	r2, [r3, #0]
 8007d94:	1d3b      	adds	r3, r7, #4
 8007d96:	1c0a      	adds	r2, r1, #0
 8007d98:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007d9a:	240f      	movs	r4, #15
 8007d9c:	193b      	adds	r3, r7, r4
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
	int16_t Temp;

	Temp = (OffsetValue*4);
 8007da2:	1d3b      	adds	r3, r7, #4
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	210c      	movs	r1, #12
 8007dac:	187b      	adds	r3, r7, r1
 8007dae:	801a      	strh	r2, [r3, #0]
	VL53L1_WrWord(dev, ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 8007db0:	187b      	adds	r3, r7, r1
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	1dbb      	adds	r3, r7, #6
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	211e      	movs	r1, #30
 8007dba:	0018      	movs	r0, r3
 8007dbc:	f000 f9b0 	bl	8008120 <VL53L1_WrWord>
			(uint16_t)Temp);
	VL53L1_WrWord(dev, MM_CONFIG__INNER_OFFSET_MM, 0x0);
 8007dc0:	1dbb      	adds	r3, r7, #6
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2120      	movs	r1, #32
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f000 f9a9 	bl	8008120 <VL53L1_WrWord>
	VL53L1_WrWord(dev, MM_CONFIG__OUTER_OFFSET_MM, 0x0);
 8007dce:	1dbb      	adds	r3, r7, #6
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2122      	movs	r1, #34	@ 0x22
 8007dd6:	0018      	movs	r0, r3
 8007dd8:	f000 f9a2 	bl	8008120 <VL53L1_WrWord>
	return status;
 8007ddc:	193b      	adds	r3, r7, r4
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b25b      	sxtb	r3, r3
}
 8007de2:	0018      	movs	r0, r3
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b005      	add	sp, #20
 8007de8:	bd90      	pop	{r4, r7, pc}

08007dea <VL53L1X_GetOffset>:

VL53L1X_ERROR  VL53L1X_GetOffset(uint16_t dev, int16_t *offset)
{
 8007dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	0002      	movs	r2, r0
 8007df2:	6039      	str	r1, [r7, #0]
 8007df4:	1dbb      	adds	r3, r7, #6
 8007df6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8007df8:	260f      	movs	r6, #15
 8007dfa:	19bb      	adds	r3, r7, r6
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	701a      	strb	r2, [r3, #0]
	uint16_t Temp;

	status = VL53L1_RdWord(dev,ALGO__PART_TO_PART_RANGE_OFFSET_MM, &Temp);
 8007e00:	19bc      	adds	r4, r7, r6
 8007e02:	250c      	movs	r5, #12
 8007e04:	197a      	adds	r2, r7, r5
 8007e06:	1dbb      	adds	r3, r7, #6
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	211e      	movs	r1, #30
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f000 fa30 	bl	8008272 <VL53L1_RdWord>
 8007e12:	0003      	movs	r3, r0
 8007e14:	7023      	strb	r3, [r4, #0]
	Temp = Temp<<3;
 8007e16:	197b      	adds	r3, r7, r5
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	197b      	adds	r3, r7, r5
 8007e20:	801a      	strh	r2, [r3, #0]
	Temp = Temp>>5;
 8007e22:	197b      	adds	r3, r7, r5
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	095b      	lsrs	r3, r3, #5
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	197b      	adds	r3, r7, r5
 8007e2c:	801a      	strh	r2, [r3, #0]
	*offset = (int16_t)(Temp);
 8007e2e:	197b      	adds	r3, r7, r5
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	b21a      	sxth	r2, r3
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	801a      	strh	r2, [r3, #0]
	return status;
 8007e38:	19bb      	adds	r3, r7, r6
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b25b      	sxtb	r3, r3
}
 8007e3e:	0018      	movs	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b005      	add	sp, #20
 8007e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e46 <VL53L1X_SetROI>:
	*ROICenter = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_SetROI(uint16_t dev, uint16_t X, uint16_t Y)
{
 8007e46:	b5b0      	push	{r4, r5, r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	0004      	movs	r4, r0
 8007e4e:	0008      	movs	r0, r1
 8007e50:	0011      	movs	r1, r2
 8007e52:	1dbb      	adds	r3, r7, #6
 8007e54:	1c22      	adds	r2, r4, #0
 8007e56:	801a      	strh	r2, [r3, #0]
 8007e58:	1d3b      	adds	r3, r7, #4
 8007e5a:	1c02      	adds	r2, r0, #0
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	1cbb      	adds	r3, r7, #2
 8007e60:	1c0a      	adds	r2, r1, #0
 8007e62:	801a      	strh	r2, [r3, #0]
	uint8_t OpticalCenter;
	VL53L1X_ERROR status = 0;
 8007e64:	210f      	movs	r1, #15
 8007e66:	187b      	adds	r3, r7, r1
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]

	status =VL53L1_RdByte(dev, VL53L1_ROI_CONFIG__MODE_ROI_CENTRE_SPAD, &OpticalCenter);
 8007e6c:	187c      	adds	r4, r7, r1
 8007e6e:	230e      	movs	r3, #14
 8007e70:	18fa      	adds	r2, r7, r3
 8007e72:	239f      	movs	r3, #159	@ 0x9f
 8007e74:	0059      	lsls	r1, r3, #1
 8007e76:	1dbb      	adds	r3, r7, #6
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f000 f9de 	bl	800823c <VL53L1_RdByte>
 8007e80:	0003      	movs	r3, r0
 8007e82:	7023      	strb	r3, [r4, #0]
	if (X > 16)
 8007e84:	1d3b      	adds	r3, r7, #4
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	2b10      	cmp	r3, #16
 8007e8a:	d902      	bls.n	8007e92 <VL53L1X_SetROI+0x4c>
		X = 16;
 8007e8c:	1d3b      	adds	r3, r7, #4
 8007e8e:	2210      	movs	r2, #16
 8007e90:	801a      	strh	r2, [r3, #0]
	if (Y > 16)
 8007e92:	1cbb      	adds	r3, r7, #2
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	2b10      	cmp	r3, #16
 8007e98:	d902      	bls.n	8007ea0 <VL53L1X_SetROI+0x5a>
		Y = 16;
 8007e9a:	1cbb      	adds	r3, r7, #2
 8007e9c:	2210      	movs	r2, #16
 8007e9e:	801a      	strh	r2, [r3, #0]
	if (X > 10 || Y > 10){
 8007ea0:	1d3b      	adds	r3, r7, #4
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	2b0a      	cmp	r3, #10
 8007ea6:	d803      	bhi.n	8007eb0 <VL53L1X_SetROI+0x6a>
 8007ea8:	1cbb      	adds	r3, r7, #2
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	2b0a      	cmp	r3, #10
 8007eae:	d903      	bls.n	8007eb8 <VL53L1X_SetROI+0x72>
		OpticalCenter = 199;
 8007eb0:	230e      	movs	r3, #14
 8007eb2:	18fb      	adds	r3, r7, r3
 8007eb4:	22c7      	movs	r2, #199	@ 0xc7
 8007eb6:	701a      	strb	r2, [r3, #0]
	}
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_CENTRE_SPAD, OpticalCenter);
 8007eb8:	230e      	movs	r3, #14
 8007eba:	18fb      	adds	r3, r7, r3
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	250f      	movs	r5, #15
 8007ec0:	197c      	adds	r4, r7, r5
 8007ec2:	1dbb      	adds	r3, r7, #6
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	217f      	movs	r1, #127	@ 0x7f
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f000 f8eb 	bl	80080a4 <VL53L1_WrByte>
 8007ece:	0003      	movs	r3, r0
 8007ed0:	7023      	strb	r3, [r4, #0]
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
		       (Y - 1) << 4 | (X - 1));
 8007ed2:	1cbb      	adds	r3, r7, #2
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	011b      	lsls	r3, r3, #4
 8007eda:	b25a      	sxtb	r2, r3
 8007edc:	1d3b      	adds	r3, r7, #4
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	b25b      	sxtb	r3, r3
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	b25b      	sxtb	r3, r3
	status = VL53L1_WrByte(dev, ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE,
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	197c      	adds	r4, r7, r5
 8007ef0:	1dbb      	adds	r3, r7, #6
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	2180      	movs	r1, #128	@ 0x80
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f000 f8d4 	bl	80080a4 <VL53L1_WrByte>
 8007efc:	0003      	movs	r3, r0
 8007efe:	7023      	strb	r3, [r4, #0]
	return status;
 8007f00:	197b      	adds	r3, r7, r5
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b25b      	sxtb	r3, r3
}
 8007f06:	0018      	movs	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	b004      	add	sp, #16
 8007f0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007f10 <ReadRegister16>:
	}
	return ((data_read[0] << 24) | (data_read[1]<<16) | (data_read[2]<<8)| (data_read[3]));
}

uint16_t ReadRegister16(uint16_t dev, uint16_t RegisterAdress)
{
 8007f10:	b5b0      	push	{r4, r5, r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	0002      	movs	r2, r0
 8007f18:	1dbb      	adds	r3, r7, #6
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	1d3b      	adds	r3, r7, #4
 8007f1e:	1c0a      	adds	r2, r1, #0
 8007f20:	801a      	strh	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	210c      	movs	r1, #12
 8007f2e:	187b      	adds	r3, r7, r1
 8007f30:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8007f32:	1d3b      	adds	r3, r7, #4
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	187b      	adds	r3, r7, r1
 8007f3a:	705a      	strb	r2, [r3, #1]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, dev, data_write, 2, 100);
 8007f3c:	250f      	movs	r5, #15
 8007f3e:	197c      	adds	r4, r7, r5
 8007f40:	187a      	adds	r2, r7, r1
 8007f42:	1dbb      	adds	r3, r7, #6
 8007f44:	8819      	ldrh	r1, [r3, #0]
 8007f46:	4817      	ldr	r0, [pc, #92]	@ (8007fa4 <ReadRegister16+0x94>)
 8007f48:	2364      	movs	r3, #100	@ 0x64
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	f7fc fe2d 	bl	8004bac <HAL_I2C_Master_Transmit>
 8007f52:	0003      	movs	r3, r0
 8007f54:	7023      	strb	r3, [r4, #0]
	Status += HAL_I2C_Master_Receive(&I2C_HANDLE, dev, data_read, 2, 100);
 8007f56:	2308      	movs	r3, #8
 8007f58:	18fa      	adds	r2, r7, r3
 8007f5a:	1dbb      	adds	r3, r7, #6
 8007f5c:	8819      	ldrh	r1, [r3, #0]
 8007f5e:	4811      	ldr	r0, [pc, #68]	@ (8007fa4 <ReadRegister16+0x94>)
 8007f60:	2364      	movs	r3, #100	@ 0x64
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	2302      	movs	r3, #2
 8007f66:	f7fc ff29 	bl	8004dbc <HAL_I2C_Master_Receive>
 8007f6a:	0003      	movs	r3, r0
 8007f6c:	0019      	movs	r1, r3
 8007f6e:	197b      	adds	r3, r7, r5
 8007f70:	197a      	adds	r2, r7, r5
 8007f72:	7812      	ldrb	r2, [r2, #0]
 8007f74:	188a      	adds	r2, r1, r2
 8007f76:	701a      	strb	r2, [r3, #0]
	if (Status)
 8007f78:	197b      	adds	r3, r7, r5
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <ReadRegister16+0x74>
	{
		_I2cFailRecover();
 8007f80:	f000 f9bc 	bl	80082fc <_I2cFailRecover>
	}
	return (data_read[0] << 8) | (data_read[1]);
 8007f84:	2108      	movs	r1, #8
 8007f86:	187b      	adds	r3, r7, r1
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	b21a      	sxth	r2, r3
 8007f8e:	187b      	adds	r3, r7, r1
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	b21b      	sxth	r3, r3
 8007f94:	4313      	orrs	r3, r2
 8007f96:	b21b      	sxth	r3, r3
 8007f98:	b29b      	uxth	r3, r3
}
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b004      	add	sp, #16
 8007fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fa2:	46c0      	nop			@ (mov r8, r8)
 8007fa4:	20000d84 	.word	0x20000d84

08007fa8 <ReadRegister8>:

uint8_t ReadRegister8(uint16_t dev, uint16_t RegisterAdress)
{
 8007fa8:	b5b0      	push	{r4, r5, r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	0002      	movs	r2, r0
 8007fb0:	1dbb      	adds	r3, r7, #6
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	1d3b      	adds	r3, r7, #4
 8007fb6:	1c0a      	adds	r2, r1, #0
 8007fb8:	801a      	strh	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8007fba:	1d3b      	adds	r3, r7, #4
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	0a1b      	lsrs	r3, r3, #8
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	210c      	movs	r1, #12
 8007fc6:	187b      	adds	r3, r7, r1
 8007fc8:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 8007fca:	1d3b      	adds	r3, r7, #4
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	187b      	adds	r3, r7, r1
 8007fd2:	705a      	strb	r2, [r3, #1]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, dev, data_write, 2, 100);
 8007fd4:	250f      	movs	r5, #15
 8007fd6:	197c      	adds	r4, r7, r5
 8007fd8:	187a      	adds	r2, r7, r1
 8007fda:	1dbb      	adds	r3, r7, #6
 8007fdc:	8819      	ldrh	r1, [r3, #0]
 8007fde:	4813      	ldr	r0, [pc, #76]	@ (800802c <ReadRegister8+0x84>)
 8007fe0:	2364      	movs	r3, #100	@ 0x64
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	f7fc fde1 	bl	8004bac <HAL_I2C_Master_Transmit>
 8007fea:	0003      	movs	r3, r0
 8007fec:	7023      	strb	r3, [r4, #0]
	Status += HAL_I2C_Master_Receive(&I2C_HANDLE, dev, data_read, 1, 100);
 8007fee:	2308      	movs	r3, #8
 8007ff0:	18fa      	adds	r2, r7, r3
 8007ff2:	1dbb      	adds	r3, r7, #6
 8007ff4:	8819      	ldrh	r1, [r3, #0]
 8007ff6:	480d      	ldr	r0, [pc, #52]	@ (800802c <ReadRegister8+0x84>)
 8007ff8:	2364      	movs	r3, #100	@ 0x64
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f7fc fedd 	bl	8004dbc <HAL_I2C_Master_Receive>
 8008002:	0003      	movs	r3, r0
 8008004:	0019      	movs	r1, r3
 8008006:	197b      	adds	r3, r7, r5
 8008008:	197a      	adds	r2, r7, r5
 800800a:	7812      	ldrb	r2, [r2, #0]
 800800c:	188a      	adds	r2, r1, r2
 800800e:	701a      	strb	r2, [r3, #0]
	if (Status)
 8008010:	197b      	adds	r3, r7, r5
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <ReadRegister8+0x74>
	{
		_I2cFailRecover();
 8008018:	f000 f970 	bl	80082fc <_I2cFailRecover>
	}
	return data_read[0];
 800801c:	2308      	movs	r3, #8
 800801e:	18fb      	adds	r3, r7, r3
 8008020:	781b      	ldrb	r3, [r3, #0]
}
 8008022:	0018      	movs	r0, r3
 8008024:	46bd      	mov	sp, r7
 8008026:	b004      	add	sp, #16
 8008028:	bdb0      	pop	{r4, r5, r7, pc}
 800802a:	46c0      	nop			@ (mov r8, r8)
 800802c:	20000d84 	.word	0x20000d84

08008030 <WriteRegister8>:

void WriteRegister8(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8008030:	b5b0      	push	{r4, r5, r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af02      	add	r7, sp, #8
 8008036:	0004      	movs	r4, r0
 8008038:	0008      	movs	r0, r1
 800803a:	0011      	movs	r1, r2
 800803c:	1dbb      	adds	r3, r7, #6
 800803e:	1c22      	adds	r2, r4, #0
 8008040:	801a      	strh	r2, [r3, #0]
 8008042:	1d3b      	adds	r3, r7, #4
 8008044:	1c02      	adds	r2, r0, #0
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	1cfb      	adds	r3, r7, #3
 800804a:	1c0a      	adds	r2, r1, #0
 800804c:	701a      	strb	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[3];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 800804e:	1d3b      	adds	r3, r7, #4
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	0a1b      	lsrs	r3, r3, #8
 8008054:	b29b      	uxth	r3, r3
 8008056:	b2da      	uxtb	r2, r3
 8008058:	210c      	movs	r1, #12
 800805a:	187b      	adds	r3, r7, r1
 800805c:	701a      	strb	r2, [r3, #0]
	data_write[1] = RegisterAdress & 0xFF;
 800805e:	1d3b      	adds	r3, r7, #4
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	b2da      	uxtb	r2, r3
 8008064:	187b      	adds	r3, r7, r1
 8008066:	705a      	strb	r2, [r3, #1]
	data_write[2] = value & 0xFF;
 8008068:	187b      	adds	r3, r7, r1
 800806a:	1cfa      	adds	r2, r7, #3
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	709a      	strb	r2, [r3, #2]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, dev, data_write, 3, 100);
 8008070:	250f      	movs	r5, #15
 8008072:	197c      	adds	r4, r7, r5
 8008074:	187a      	adds	r2, r7, r1
 8008076:	1dbb      	adds	r3, r7, #6
 8008078:	8819      	ldrh	r1, [r3, #0]
 800807a:	4809      	ldr	r0, [pc, #36]	@ (80080a0 <WriteRegister8+0x70>)
 800807c:	2364      	movs	r3, #100	@ 0x64
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	2303      	movs	r3, #3
 8008082:	f7fc fd93 	bl	8004bac <HAL_I2C_Master_Transmit>
 8008086:	0003      	movs	r3, r0
 8008088:	7023      	strb	r3, [r4, #0]
	if (Status)
 800808a:	197b      	adds	r3, r7, r5
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <WriteRegister8+0x66>
	{
		_I2cFailRecover();
 8008092:	f000 f933 	bl	80082fc <_I2cFailRecover>
	}
}
 8008096:	46c0      	nop			@ (mov r8, r8)
 8008098:	46bd      	mov	sp, r7
 800809a:	b004      	add	sp, #16
 800809c:	bdb0      	pop	{r4, r5, r7, pc}
 800809e:	46c0      	nop			@ (mov r8, r8)
 80080a0:	20000d84 	.word	0x20000d84

080080a4 <VL53L1_WrByte>:




VL53L1_Error VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data)
{
 80080a4:	b5b0      	push	{r4, r5, r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af02      	add	r7, sp, #8
 80080aa:	0004      	movs	r4, r0
 80080ac:	0008      	movs	r0, r1
 80080ae:	0011      	movs	r1, r2
 80080b0:	1dbb      	adds	r3, r7, #6
 80080b2:	1c22      	adds	r2, r4, #0
 80080b4:	801a      	strh	r2, [r3, #0]
 80080b6:	1d3b      	adds	r3, r7, #4
 80080b8:	1c02      	adds	r2, r0, #0
 80080ba:	801a      	strh	r2, [r3, #0]
 80080bc:	1cfb      	adds	r3, r7, #3
 80080be:	1c0a      	adds	r2, r1, #0
 80080c0:	701a      	strb	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[3];

	data_write[0] = (index >> 8) & 0xFF;
 80080c2:	1d3b      	adds	r3, r7, #4
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	0a1b      	lsrs	r3, r3, #8
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	210c      	movs	r1, #12
 80080ce:	187b      	adds	r3, r7, r1
 80080d0:	701a      	strb	r2, [r3, #0]
	data_write[1] = index & 0xFF;
 80080d2:	1d3b      	adds	r3, r7, #4
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	187b      	adds	r3, r7, r1
 80080da:	705a      	strb	r2, [r3, #1]
	data_write[2] = data & 0xFF;
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	1cfa      	adds	r2, r7, #3
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	709a      	strb	r2, [r3, #2]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, Dev, data_write, 3, 100);
 80080e4:	250f      	movs	r5, #15
 80080e6:	197c      	adds	r4, r7, r5
 80080e8:	187a      	adds	r2, r7, r1
 80080ea:	1dbb      	adds	r3, r7, #6
 80080ec:	8819      	ldrh	r1, [r3, #0]
 80080ee:	480b      	ldr	r0, [pc, #44]	@ (800811c <VL53L1_WrByte+0x78>)
 80080f0:	2364      	movs	r3, #100	@ 0x64
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2303      	movs	r3, #3
 80080f6:	f7fc fd59 	bl	8004bac <HAL_I2C_Master_Transmit>
 80080fa:	0003      	movs	r3, r0
 80080fc:	7023      	strb	r3, [r4, #0]
	if (Status)
 80080fe:	197b      	adds	r3, r7, r5
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <VL53L1_WrByte+0x66>
	{
		_I2cFailRecover();
 8008106:	f000 f8f9 	bl	80082fc <_I2cFailRecover>
	}
	return Status;
 800810a:	230f      	movs	r3, #15
 800810c:	18fb      	adds	r3, r7, r3
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	b25b      	sxtb	r3, r3
}
 8008112:	0018      	movs	r0, r3
 8008114:	46bd      	mov	sp, r7
 8008116:	b004      	add	sp, #16
 8008118:	bdb0      	pop	{r4, r5, r7, pc}
 800811a:	46c0      	nop			@ (mov r8, r8)
 800811c:	20000d84 	.word	0x20000d84

08008120 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data)
{
 8008120:	b5b0      	push	{r4, r5, r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af02      	add	r7, sp, #8
 8008126:	0004      	movs	r4, r0
 8008128:	0008      	movs	r0, r1
 800812a:	0011      	movs	r1, r2
 800812c:	1dbb      	adds	r3, r7, #6
 800812e:	1c22      	adds	r2, r4, #0
 8008130:	801a      	strh	r2, [r3, #0]
 8008132:	1d3b      	adds	r3, r7, #4
 8008134:	1c02      	adds	r2, r0, #0
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	1cbb      	adds	r3, r7, #2
 800813a:	1c0a      	adds	r2, r1, #0
 800813c:	801a      	strh	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[4];

	data_write[0] = (index >> 8) & 0xFF;
 800813e:	1d3b      	adds	r3, r7, #4
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	b29b      	uxth	r3, r3
 8008146:	b2da      	uxtb	r2, r3
 8008148:	2108      	movs	r1, #8
 800814a:	187b      	adds	r3, r7, r1
 800814c:	701a      	strb	r2, [r3, #0]
	data_write[1] = index & 0xFF;
 800814e:	1d3b      	adds	r3, r7, #4
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b2da      	uxtb	r2, r3
 8008154:	187b      	adds	r3, r7, r1
 8008156:	705a      	strb	r2, [r3, #1]
	data_write[2] = (data >> 8) & 0xFF;
 8008158:	1cbb      	adds	r3, r7, #2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	0a1b      	lsrs	r3, r3, #8
 800815e:	b29b      	uxth	r3, r3
 8008160:	b2da      	uxtb	r2, r3
 8008162:	187b      	adds	r3, r7, r1
 8008164:	709a      	strb	r2, [r3, #2]
	data_write[3] = data & 0xFF;
 8008166:	1cbb      	adds	r3, r7, #2
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b2da      	uxtb	r2, r3
 800816c:	187b      	adds	r3, r7, r1
 800816e:	70da      	strb	r2, [r3, #3]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, Dev, data_write, 4, 100);
 8008170:	250f      	movs	r5, #15
 8008172:	197c      	adds	r4, r7, r5
 8008174:	187a      	adds	r2, r7, r1
 8008176:	1dbb      	adds	r3, r7, #6
 8008178:	8819      	ldrh	r1, [r3, #0]
 800817a:	480b      	ldr	r0, [pc, #44]	@ (80081a8 <VL53L1_WrWord+0x88>)
 800817c:	2364      	movs	r3, #100	@ 0x64
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	2304      	movs	r3, #4
 8008182:	f7fc fd13 	bl	8004bac <HAL_I2C_Master_Transmit>
 8008186:	0003      	movs	r3, r0
 8008188:	7023      	strb	r3, [r4, #0]
	if (Status)
 800818a:	197b      	adds	r3, r7, r5
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <VL53L1_WrWord+0x76>
	{
		_I2cFailRecover();
 8008192:	f000 f8b3 	bl	80082fc <_I2cFailRecover>
	}
	return Status;
 8008196:	230f      	movs	r3, #15
 8008198:	18fb      	adds	r3, r7, r3
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	b25b      	sxtb	r3, r3
}
 800819e:	0018      	movs	r0, r3
 80081a0:	46bd      	mov	sp, r7
 80081a2:	b004      	add	sp, #16
 80081a4:	bdb0      	pop	{r4, r5, r7, pc}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	20000d84 	.word	0x20000d84

080081ac <VL53L1_WrDWord>:

VL53L1_Error VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data)
{
 80081ac:	b5b0      	push	{r4, r5, r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	603a      	str	r2, [r7, #0]
 80081b4:	1dbb      	adds	r3, r7, #6
 80081b6:	1c02      	adds	r2, r0, #0
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	1d3b      	adds	r3, r7, #4
 80081bc:	1c0a      	adds	r2, r1, #0
 80081be:	801a      	strh	r2, [r3, #0]
	uint8_t Status;
	uint8_t data_write[6];

	data_write[0] = (index >> 8) & 0xFF;
 80081c0:	1d3b      	adds	r3, r7, #4
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	0a1b      	lsrs	r3, r3, #8
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	2108      	movs	r1, #8
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	701a      	strb	r2, [r3, #0]
	data_write[1] = index & 0xFF;
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	881b      	ldrh	r3, [r3, #0]
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	187b      	adds	r3, r7, r1
 80081d8:	705a      	strb	r2, [r3, #1]
	data_write[2] = (data >> 24) & 0xFF;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	0e1b      	lsrs	r3, r3, #24
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	187b      	adds	r3, r7, r1
 80081e2:	709a      	strb	r2, [r3, #2]
	data_write[3] = (data >> 16) & 0xFF;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	0c1b      	lsrs	r3, r3, #16
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	187b      	adds	r3, r7, r1
 80081ec:	70da      	strb	r2, [r3, #3]
	data_write[4] = (data >> 8) & 0xFF;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	0a1b      	lsrs	r3, r3, #8
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	187b      	adds	r3, r7, r1
 80081f6:	711a      	strb	r2, [r3, #4]
	data_write[5] = data & 0xFF;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	187b      	adds	r3, r7, r1
 80081fe:	715a      	strb	r2, [r3, #5]
	Status = HAL_I2C_Master_Transmit(&I2C_HANDLE, Dev, data_write, 6, 100);
 8008200:	250f      	movs	r5, #15
 8008202:	197c      	adds	r4, r7, r5
 8008204:	187a      	adds	r2, r7, r1
 8008206:	1dbb      	adds	r3, r7, #6
 8008208:	8819      	ldrh	r1, [r3, #0]
 800820a:	480b      	ldr	r0, [pc, #44]	@ (8008238 <VL53L1_WrDWord+0x8c>)
 800820c:	2364      	movs	r3, #100	@ 0x64
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	2306      	movs	r3, #6
 8008212:	f7fc fccb 	bl	8004bac <HAL_I2C_Master_Transmit>
 8008216:	0003      	movs	r3, r0
 8008218:	7023      	strb	r3, [r4, #0]
	if (Status)
 800821a:	197b      	adds	r3, r7, r5
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <VL53L1_WrDWord+0x7a>
	{
		_I2cFailRecover();
 8008222:	f000 f86b 	bl	80082fc <_I2cFailRecover>
	}
	return Status;
 8008226:	230f      	movs	r3, #15
 8008228:	18fb      	adds	r3, r7, r3
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	b25b      	sxtb	r3, r3
}
 800822e:	0018      	movs	r0, r3
 8008230:	46bd      	mov	sp, r7
 8008232:	b004      	add	sp, #16
 8008234:	bdb0      	pop	{r4, r5, r7, pc}
 8008236:	46c0      	nop			@ (mov r8, r8)
 8008238:	20000d84 	.word	0x20000d84

0800823c <VL53L1_RdByte>:
    //Status += VL53L1_WriteMulti(Dev, index, &data, 1);
    return Status;
}

VL53L1_Error VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	603a      	str	r2, [r7, #0]
 8008244:	1dbb      	adds	r3, r7, #6
 8008246:	1c02      	adds	r2, r0, #0
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	1d3b      	adds	r3, r7, #4
 800824c:	1c0a      	adds	r2, r1, #0
 800824e:	801a      	strh	r2, [r3, #0]
	*data = ReadRegister8(Dev, index);
 8008250:	1d3b      	adds	r3, r7, #4
 8008252:	881a      	ldrh	r2, [r3, #0]
 8008254:	1dbb      	adds	r3, r7, #6
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	0011      	movs	r1, r2
 800825a:	0018      	movs	r0, r3
 800825c:	f7ff fea4 	bl	8007fa8 <ReadRegister8>
 8008260:	0003      	movs	r3, r0
 8008262:	001a      	movs	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	701a      	strb	r2, [r3, #0]
	return 0;
 8008268:	2300      	movs	r3, #0
}
 800826a:	0018      	movs	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	b002      	add	sp, #8
 8008270:	bd80      	pop	{r7, pc}

08008272 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	603a      	str	r2, [r7, #0]
 800827a:	1dbb      	adds	r3, r7, #6
 800827c:	1c02      	adds	r2, r0, #0
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	1d3b      	adds	r3, r7, #4
 8008282:	1c0a      	adds	r2, r1, #0
 8008284:	801a      	strh	r2, [r3, #0]

	*data = ReadRegister16(Dev, index);
 8008286:	1d3b      	adds	r3, r7, #4
 8008288:	881a      	ldrh	r2, [r3, #0]
 800828a:	1dbb      	adds	r3, r7, #6
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	0011      	movs	r1, r2
 8008290:	0018      	movs	r0, r3
 8008292:	f7ff fe3d 	bl	8007f10 <ReadRegister16>
 8008296:	0003      	movs	r3, r0
 8008298:	001a      	movs	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	801a      	strh	r2, [r3, #0]
	return 0;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	0018      	movs	r0, r3
 80082a2:	46bd      	mov	sp, r7
 80082a4:	b002      	add	sp, #8
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <I2C_Init>:
int UART_Active;				/* Flag to see if UART is active */
int UART_Ready;					/* Flag to see if a new command is available */


void I2C_Init(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
	    //_I2cFailRecover();

	    /* Peripheral clock enable */
	    //__I2C1_CLK_ENABLE();

	    I2C_HANDLE.Instance = I2C1;
 80082ac:	4b10      	ldr	r3, [pc, #64]	@ (80082f0 <I2C_Init+0x48>)
 80082ae:	4a11      	ldr	r2, [pc, #68]	@ (80082f4 <I2C_Init+0x4c>)
 80082b0:	601a      	str	r2, [r3, #0]
	    I2C_HANDLE.Init.Timing = 0x00602173;
 80082b2:	4b0f      	ldr	r3, [pc, #60]	@ (80082f0 <I2C_Init+0x48>)
 80082b4:	4a10      	ldr	r2, [pc, #64]	@ (80082f8 <I2C_Init+0x50>)
 80082b6:	605a      	str	r2, [r3, #4]
	    //I2C_HANDLE.Init.DutyCycle = I2C_DUTYCYCLE_2;
	    I2C_HANDLE.Init.OwnAddress1 = 0;
 80082b8:	4b0d      	ldr	r3, [pc, #52]	@ (80082f0 <I2C_Init+0x48>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	609a      	str	r2, [r3, #8]
	    I2C_HANDLE.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80082be:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <I2C_Init+0x48>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	60da      	str	r2, [r3, #12]
	    I2C_HANDLE.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80082c4:	4b0a      	ldr	r3, [pc, #40]	@ (80082f0 <I2C_Init+0x48>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	611a      	str	r2, [r3, #16]
	    I2C_HANDLE.Init.OwnAddress2 = 0;
 80082ca:	4b09      	ldr	r3, [pc, #36]	@ (80082f0 <I2C_Init+0x48>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	615a      	str	r2, [r3, #20]
	    I2C_HANDLE.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80082d0:	4b07      	ldr	r3, [pc, #28]	@ (80082f0 <I2C_Init+0x48>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	619a      	str	r2, [r3, #24]
	    I2C_HANDLE.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80082d6:	4b06      	ldr	r3, [pc, #24]	@ (80082f0 <I2C_Init+0x48>)
 80082d8:	2200      	movs	r2, #0
 80082da:	61da      	str	r2, [r3, #28]
	    I2C_HANDLE.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80082dc:	4b04      	ldr	r3, [pc, #16]	@ (80082f0 <I2C_Init+0x48>)
 80082de:	2200      	movs	r2, #0
 80082e0:	621a      	str	r2, [r3, #32]

	    HAL_I2C_Init(&I2C_HANDLE);
 80082e2:	4b03      	ldr	r3, [pc, #12]	@ (80082f0 <I2C_Init+0x48>)
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7fc fbcb 	bl	8004a80 <HAL_I2C_Init>
	    //SYSCFG->CFGR1 = SYSCFG->CFGR1 | 0x00400000;	//bit 22 at 1
	    //HAL_SYSCFG_EnableRemap (SYSCFG_REMAP_PA12);
	    //HAL_SYSCFG_DisableRemap (SYSCFG_REMAP_PA11);
	    //HAL_SYSCFG_EnableRemap (SYSCFG_REMAP_PA11); // Permet que les fonctions s'adressant a PA9 activent la broche PA11
	    //Pas de Remap dans la 1.2 !!!
}
 80082ea:	46c0      	nop			@ (mov r8, r8)
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20000d84 	.word	0x20000d84
 80082f4:	40005400 	.word	0x40005400
 80082f8:	00602173 	.word	0x00602173

080082fc <_I2cFailRecover>:



void _I2cFailRecover(void){
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0

	uint16_t cap = ~(1<<FailedBoot);
 8008302:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <_I2cFailRecover+0x30>)
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	001a      	movs	r2, r3
 8008308:	2301      	movs	r3, #1
 800830a:	4093      	lsls	r3, r2
 800830c:	b29a      	uxth	r2, r3
 800830e:	1dbb      	adds	r3, r7, #6
 8008310:	43d2      	mvns	r2, r2
 8008312:	801a      	strh	r2, [r3, #0]
	ActiveCaptors = ActiveCaptors & cap;
 8008314:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <_I2cFailRecover+0x34>)
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	1dba      	adds	r2, r7, #6
 800831a:	8812      	ldrh	r2, [r2, #0]
 800831c:	4013      	ands	r3, r2
 800831e:	b29a      	uxth	r2, r3
 8008320:	4b03      	ldr	r3, [pc, #12]	@ (8008330 <_I2cFailRecover+0x34>)
 8008322:	801a      	strh	r2, [r3, #0]
            HAL_Delay(33*20);
        	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
        	HAL_Delay(333);
        }while(1);
    }*/
}
 8008324:	46c0      	nop			@ (mov r8, r8)
 8008326:	46bd      	mov	sp, r7
 8008328:	b002      	add	sp, #8
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20000d38 	.word	0x20000d38
 8008330:	2000004a 	.word	0x2000004a

08008334 <UART_Init>:


void UART_Init(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800833a:	4b2c      	ldr	r3, [pc, #176]	@ (80083ec <UART_Init+0xb8>)
 800833c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800833e:	4b2b      	ldr	r3, [pc, #172]	@ (80083ec <UART_Init+0xb8>)
 8008340:	2101      	movs	r1, #1
 8008342:	430a      	orrs	r2, r1
 8008344:	635a      	str	r2, [r3, #52]	@ 0x34
 8008346:	4b29      	ldr	r3, [pc, #164]	@ (80083ec <UART_Init+0xb8>)
 8008348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800834a:	2201      	movs	r2, #1
 800834c:	4013      	ands	r3, r2
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
	__DMA1_CLK_ENABLE();
 8008352:	4b26      	ldr	r3, [pc, #152]	@ (80083ec <UART_Init+0xb8>)
 8008354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008356:	4b25      	ldr	r3, [pc, #148]	@ (80083ec <UART_Init+0xb8>)
 8008358:	2101      	movs	r1, #1
 800835a:	430a      	orrs	r2, r1
 800835c:	639a      	str	r2, [r3, #56]	@ 0x38
 800835e:	4b23      	ldr	r3, [pc, #140]	@ (80083ec <UART_Init+0xb8>)
 8008360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008362:	2201      	movs	r2, #1
 8008364:	4013      	ands	r3, r2
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	683b      	ldr	r3, [r7, #0]
	SERIAL_UART.Init.OverSampling = UART_OVERSAMPLING_16;
	HAL_UART_Init(&SERIAL_UART);

	SERIAL_UART.Instance->CR1 = 0x202C;*/

	SERIAL_UART.Instance = USART2;
 800836a:	4b21      	ldr	r3, [pc, #132]	@ (80083f0 <UART_Init+0xbc>)
 800836c:	4a21      	ldr	r2, [pc, #132]	@ (80083f4 <UART_Init+0xc0>)
 800836e:	601a      	str	r2, [r3, #0]
	SERIAL_UART.Init.BaudRate = 115200;
 8008370:	4b1f      	ldr	r3, [pc, #124]	@ (80083f0 <UART_Init+0xbc>)
 8008372:	22e1      	movs	r2, #225	@ 0xe1
 8008374:	0252      	lsls	r2, r2, #9
 8008376:	605a      	str	r2, [r3, #4]
	SERIAL_UART.Init.WordLength = UART_WORDLENGTH_8B;
 8008378:	4b1d      	ldr	r3, [pc, #116]	@ (80083f0 <UART_Init+0xbc>)
 800837a:	2200      	movs	r2, #0
 800837c:	609a      	str	r2, [r3, #8]
	SERIAL_UART.Init.StopBits = UART_STOPBITS_1;
 800837e:	4b1c      	ldr	r3, [pc, #112]	@ (80083f0 <UART_Init+0xbc>)
 8008380:	2200      	movs	r2, #0
 8008382:	60da      	str	r2, [r3, #12]
	SERIAL_UART.Init.Parity = UART_PARITY_NONE;
 8008384:	4b1a      	ldr	r3, [pc, #104]	@ (80083f0 <UART_Init+0xbc>)
 8008386:	2200      	movs	r2, #0
 8008388:	611a      	str	r2, [r3, #16]
	SERIAL_UART.Init.Mode = UART_MODE_TX_RX;
 800838a:	4b19      	ldr	r3, [pc, #100]	@ (80083f0 <UART_Init+0xbc>)
 800838c:	220c      	movs	r2, #12
 800838e:	615a      	str	r2, [r3, #20]
	SERIAL_UART.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008390:	4b17      	ldr	r3, [pc, #92]	@ (80083f0 <UART_Init+0xbc>)
 8008392:	2200      	movs	r2, #0
 8008394:	619a      	str	r2, [r3, #24]
	SERIAL_UART.Init.OverSampling = UART_OVERSAMPLING_16;
 8008396:	4b16      	ldr	r3, [pc, #88]	@ (80083f0 <UART_Init+0xbc>)
 8008398:	2200      	movs	r2, #0
 800839a:	61da      	str	r2, [r3, #28]
	SERIAL_UART.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800839c:	4b14      	ldr	r3, [pc, #80]	@ (80083f0 <UART_Init+0xbc>)
 800839e:	2200      	movs	r2, #0
 80083a0:	621a      	str	r2, [r3, #32]
	SERIAL_UART.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80083a2:	4b13      	ldr	r3, [pc, #76]	@ (80083f0 <UART_Init+0xbc>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	625a      	str	r2, [r3, #36]	@ 0x24
	//SERIAL_UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	SERIAL_UART.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80083a8:	4b11      	ldr	r3, [pc, #68]	@ (80083f0 <UART_Init+0xbc>)
 80083aa:	2230      	movs	r2, #48	@ 0x30
 80083ac:	629a      	str	r2, [r3, #40]	@ 0x28
	SERIAL_UART.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80083ae:	4b10      	ldr	r3, [pc, #64]	@ (80083f0 <UART_Init+0xbc>)
 80083b0:	2280      	movs	r2, #128	@ 0x80
 80083b2:	0152      	lsls	r2, r2, #5
 80083b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	SERIAL_UART.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80083b6:	4b0e      	ldr	r3, [pc, #56]	@ (80083f0 <UART_Init+0xbc>)
 80083b8:	2280      	movs	r2, #128	@ 0x80
 80083ba:	0192      	lsls	r2, r2, #6
 80083bc:	641a      	str	r2, [r3, #64]	@ 0x40

	 HAL_UART_Init(&SERIAL_UART);
 80083be:	4b0c      	ldr	r3, [pc, #48]	@ (80083f0 <UART_Init+0xbc>)
 80083c0:	0018      	movs	r0, r3
 80083c2:	f7fe fa69 	bl	8006898 <HAL_UART_Init>
	 HAL_UARTEx_SetTxFifoThreshold(&SERIAL_UART, UART_TXFIFO_THRESHOLD_1_8);
 80083c6:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <UART_Init+0xbc>)
 80083c8:	2100      	movs	r1, #0
 80083ca:	0018      	movs	r0, r3
 80083cc:	f7fe ff0a 	bl	80071e4 <HAL_UARTEx_SetTxFifoThreshold>
	 HAL_UARTEx_SetRxFifoThreshold(&SERIAL_UART, UART_RXFIFO_THRESHOLD_1_8);
 80083d0:	4b07      	ldr	r3, [pc, #28]	@ (80083f0 <UART_Init+0xbc>)
 80083d2:	2100      	movs	r1, #0
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7fe ff45 	bl	8007264 <HAL_UARTEx_SetRxFifoThreshold>
	 HAL_UARTEx_DisableFifoMode(&SERIAL_UART);
 80083da:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <UART_Init+0xbc>)
 80083dc:	0018      	movs	r0, r3
 80083de:	f7fe fec7 	bl	8007170 <HAL_UARTEx_DisableFifoMode>
}
 80083e2:	46c0      	nop			@ (mov r8, r8)
 80083e4:	46bd      	mov	sp, r7
 80083e6:	b002      	add	sp, #8
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	46c0      	nop			@ (mov r8, r8)
 80083ec:	40021000 	.word	0x40021000
 80083f0:	20000dd0 	.word	0x20000dd0
 80083f4:	40004400 	.word	0x40004400

080083f8 <UART_Print>:
	*UART_Ready = 0;
	HAL_UART_Receive_IT(&SERIAL_UART, (uint8_t *) Uart_RXBuffer, 1);
}

void UART_Print(const char *msg)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&SERIAL_UART, (uint8_t *) msg, strlen(msg), 100);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	0018      	movs	r0, r3
 8008404:	f7f7 fe7c 	bl	8000100 <strlen>
 8008408:	0003      	movs	r3, r0
 800840a:	b29a      	uxth	r2, r3
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	4804      	ldr	r0, [pc, #16]	@ (8008420 <UART_Print+0x28>)
 8008410:	2364      	movs	r3, #100	@ 0x64
 8008412:	f7fe fa97 	bl	8006944 <HAL_UART_Transmit>
}
 8008416:	46c0      	nop			@ (mov r8, r8)
 8008418:	46bd      	mov	sp, r7
 800841a:	b002      	add	sp, #8
 800841c:	bd80      	pop	{r7, pc}
 800841e:	46c0      	nop			@ (mov r8, r8)
 8008420:	20000dd0 	.word	0x20000dd0

08008424 <__cvt>:
 8008424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008426:	001f      	movs	r7, r3
 8008428:	2300      	movs	r3, #0
 800842a:	0016      	movs	r6, r2
 800842c:	b08b      	sub	sp, #44	@ 0x2c
 800842e:	429f      	cmp	r7, r3
 8008430:	da04      	bge.n	800843c <__cvt+0x18>
 8008432:	2180      	movs	r1, #128	@ 0x80
 8008434:	0609      	lsls	r1, r1, #24
 8008436:	187b      	adds	r3, r7, r1
 8008438:	001f      	movs	r7, r3
 800843a:	232d      	movs	r3, #45	@ 0x2d
 800843c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800843e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008440:	7013      	strb	r3, [r2, #0]
 8008442:	2320      	movs	r3, #32
 8008444:	2203      	movs	r2, #3
 8008446:	439d      	bics	r5, r3
 8008448:	2d46      	cmp	r5, #70	@ 0x46
 800844a:	d007      	beq.n	800845c <__cvt+0x38>
 800844c:	002b      	movs	r3, r5
 800844e:	3b45      	subs	r3, #69	@ 0x45
 8008450:	4259      	negs	r1, r3
 8008452:	414b      	adcs	r3, r1
 8008454:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008456:	3a01      	subs	r2, #1
 8008458:	18cb      	adds	r3, r1, r3
 800845a:	9310      	str	r3, [sp, #64]	@ 0x40
 800845c:	ab09      	add	r3, sp, #36	@ 0x24
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	ab08      	add	r3, sp, #32
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008466:	9200      	str	r2, [sp, #0]
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800846c:	0032      	movs	r2, r6
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	003b      	movs	r3, r7
 8008472:	f000 fe73 	bl	800915c <_dtoa_r>
 8008476:	0004      	movs	r4, r0
 8008478:	2d47      	cmp	r5, #71	@ 0x47
 800847a:	d11b      	bne.n	80084b4 <__cvt+0x90>
 800847c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800847e:	07db      	lsls	r3, r3, #31
 8008480:	d511      	bpl.n	80084a6 <__cvt+0x82>
 8008482:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008484:	18c3      	adds	r3, r0, r3
 8008486:	9307      	str	r3, [sp, #28]
 8008488:	2200      	movs	r2, #0
 800848a:	2300      	movs	r3, #0
 800848c:	0030      	movs	r0, r6
 800848e:	0039      	movs	r1, r7
 8008490:	f7f7 ffd8 	bl	8000444 <__aeabi_dcmpeq>
 8008494:	2800      	cmp	r0, #0
 8008496:	d001      	beq.n	800849c <__cvt+0x78>
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	9309      	str	r3, [sp, #36]	@ 0x24
 800849c:	2230      	movs	r2, #48	@ 0x30
 800849e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a0:	9907      	ldr	r1, [sp, #28]
 80084a2:	428b      	cmp	r3, r1
 80084a4:	d320      	bcc.n	80084e8 <__cvt+0xc4>
 80084a6:	0020      	movs	r0, r4
 80084a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80084ac:	1b1b      	subs	r3, r3, r4
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	b00b      	add	sp, #44	@ 0x2c
 80084b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084b6:	18c3      	adds	r3, r0, r3
 80084b8:	9307      	str	r3, [sp, #28]
 80084ba:	2d46      	cmp	r5, #70	@ 0x46
 80084bc:	d1e4      	bne.n	8008488 <__cvt+0x64>
 80084be:	7803      	ldrb	r3, [r0, #0]
 80084c0:	2b30      	cmp	r3, #48	@ 0x30
 80084c2:	d10c      	bne.n	80084de <__cvt+0xba>
 80084c4:	2200      	movs	r2, #0
 80084c6:	2300      	movs	r3, #0
 80084c8:	0030      	movs	r0, r6
 80084ca:	0039      	movs	r1, r7
 80084cc:	f7f7 ffba 	bl	8000444 <__aeabi_dcmpeq>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d104      	bne.n	80084de <__cvt+0xba>
 80084d4:	2301      	movs	r3, #1
 80084d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80084d8:	1a9b      	subs	r3, r3, r2
 80084da:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084e0:	9a07      	ldr	r2, [sp, #28]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	18d3      	adds	r3, r2, r3
 80084e6:	e7ce      	b.n	8008486 <__cvt+0x62>
 80084e8:	1c59      	adds	r1, r3, #1
 80084ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	e7d6      	b.n	800849e <__cvt+0x7a>

080084f0 <__exponent>:
 80084f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f2:	232b      	movs	r3, #43	@ 0x2b
 80084f4:	0005      	movs	r5, r0
 80084f6:	000c      	movs	r4, r1
 80084f8:	b085      	sub	sp, #20
 80084fa:	7002      	strb	r2, [r0, #0]
 80084fc:	2900      	cmp	r1, #0
 80084fe:	da01      	bge.n	8008504 <__exponent+0x14>
 8008500:	424c      	negs	r4, r1
 8008502:	3302      	adds	r3, #2
 8008504:	706b      	strb	r3, [r5, #1]
 8008506:	2c09      	cmp	r4, #9
 8008508:	dd2c      	ble.n	8008564 <__exponent+0x74>
 800850a:	ab02      	add	r3, sp, #8
 800850c:	1dde      	adds	r6, r3, #7
 800850e:	0020      	movs	r0, r4
 8008510:	210a      	movs	r1, #10
 8008512:	f7f7 ff81 	bl	8000418 <__aeabi_idivmod>
 8008516:	0037      	movs	r7, r6
 8008518:	3130      	adds	r1, #48	@ 0x30
 800851a:	3e01      	subs	r6, #1
 800851c:	0020      	movs	r0, r4
 800851e:	7031      	strb	r1, [r6, #0]
 8008520:	210a      	movs	r1, #10
 8008522:	9401      	str	r4, [sp, #4]
 8008524:	f7f7 fe92 	bl	800024c <__divsi3>
 8008528:	9b01      	ldr	r3, [sp, #4]
 800852a:	0004      	movs	r4, r0
 800852c:	2b63      	cmp	r3, #99	@ 0x63
 800852e:	dcee      	bgt.n	800850e <__exponent+0x1e>
 8008530:	1eba      	subs	r2, r7, #2
 8008532:	1ca8      	adds	r0, r5, #2
 8008534:	0001      	movs	r1, r0
 8008536:	0013      	movs	r3, r2
 8008538:	3430      	adds	r4, #48	@ 0x30
 800853a:	7014      	strb	r4, [r2, #0]
 800853c:	ac02      	add	r4, sp, #8
 800853e:	3407      	adds	r4, #7
 8008540:	429c      	cmp	r4, r3
 8008542:	d80a      	bhi.n	800855a <__exponent+0x6a>
 8008544:	2300      	movs	r3, #0
 8008546:	42a2      	cmp	r2, r4
 8008548:	d803      	bhi.n	8008552 <__exponent+0x62>
 800854a:	3309      	adds	r3, #9
 800854c:	aa02      	add	r2, sp, #8
 800854e:	189b      	adds	r3, r3, r2
 8008550:	1bdb      	subs	r3, r3, r7
 8008552:	18c0      	adds	r0, r0, r3
 8008554:	1b40      	subs	r0, r0, r5
 8008556:	b005      	add	sp, #20
 8008558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855a:	781c      	ldrb	r4, [r3, #0]
 800855c:	3301      	adds	r3, #1
 800855e:	700c      	strb	r4, [r1, #0]
 8008560:	3101      	adds	r1, #1
 8008562:	e7eb      	b.n	800853c <__exponent+0x4c>
 8008564:	2330      	movs	r3, #48	@ 0x30
 8008566:	18e4      	adds	r4, r4, r3
 8008568:	70ab      	strb	r3, [r5, #2]
 800856a:	1d28      	adds	r0, r5, #4
 800856c:	70ec      	strb	r4, [r5, #3]
 800856e:	e7f1      	b.n	8008554 <__exponent+0x64>

08008570 <_printf_float>:
 8008570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008572:	b097      	sub	sp, #92	@ 0x5c
 8008574:	000d      	movs	r5, r1
 8008576:	920a      	str	r2, [sp, #40]	@ 0x28
 8008578:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800857a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800857c:	9009      	str	r0, [sp, #36]	@ 0x24
 800857e:	f000 fccb 	bl	8008f18 <_localeconv_r>
 8008582:	6803      	ldr	r3, [r0, #0]
 8008584:	0018      	movs	r0, r3
 8008586:	930d      	str	r3, [sp, #52]	@ 0x34
 8008588:	f7f7 fdba 	bl	8000100 <strlen>
 800858c:	2300      	movs	r3, #0
 800858e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008590:	9314      	str	r3, [sp, #80]	@ 0x50
 8008592:	7e2b      	ldrb	r3, [r5, #24]
 8008594:	2207      	movs	r2, #7
 8008596:	930c      	str	r3, [sp, #48]	@ 0x30
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	930e      	str	r3, [sp, #56]	@ 0x38
 800859c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	05c9      	lsls	r1, r1, #23
 80085a2:	d545      	bpl.n	8008630 <_printf_float+0xc0>
 80085a4:	189b      	adds	r3, r3, r2
 80085a6:	4393      	bics	r3, r2
 80085a8:	001a      	movs	r2, r3
 80085aa:	3208      	adds	r2, #8
 80085ac:	6022      	str	r2, [r4, #0]
 80085ae:	2201      	movs	r2, #1
 80085b0:	681e      	ldr	r6, [r3, #0]
 80085b2:	685f      	ldr	r7, [r3, #4]
 80085b4:	007b      	lsls	r3, r7, #1
 80085b6:	085b      	lsrs	r3, r3, #1
 80085b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80085ba:	9610      	str	r6, [sp, #64]	@ 0x40
 80085bc:	64ae      	str	r6, [r5, #72]	@ 0x48
 80085be:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80085c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80085c2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80085c4:	4ba7      	ldr	r3, [pc, #668]	@ (8008864 <_printf_float+0x2f4>)
 80085c6:	4252      	negs	r2, r2
 80085c8:	f7fa f870 	bl	80026ac <__aeabi_dcmpun>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d131      	bne.n	8008634 <_printf_float+0xc4>
 80085d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80085d2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80085d4:	2201      	movs	r2, #1
 80085d6:	4ba3      	ldr	r3, [pc, #652]	@ (8008864 <_printf_float+0x2f4>)
 80085d8:	4252      	negs	r2, r2
 80085da:	f7f7 ff43 	bl	8000464 <__aeabi_dcmple>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d128      	bne.n	8008634 <_printf_float+0xc4>
 80085e2:	2200      	movs	r2, #0
 80085e4:	2300      	movs	r3, #0
 80085e6:	0030      	movs	r0, r6
 80085e8:	0039      	movs	r1, r7
 80085ea:	f7f7 ff31 	bl	8000450 <__aeabi_dcmplt>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d003      	beq.n	80085fa <_printf_float+0x8a>
 80085f2:	002b      	movs	r3, r5
 80085f4:	222d      	movs	r2, #45	@ 0x2d
 80085f6:	3343      	adds	r3, #67	@ 0x43
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085fc:	4f9a      	ldr	r7, [pc, #616]	@ (8008868 <_printf_float+0x2f8>)
 80085fe:	2b47      	cmp	r3, #71	@ 0x47
 8008600:	d900      	bls.n	8008604 <_printf_float+0x94>
 8008602:	4f9a      	ldr	r7, [pc, #616]	@ (800886c <_printf_float+0x2fc>)
 8008604:	2303      	movs	r3, #3
 8008606:	2400      	movs	r4, #0
 8008608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800860a:	612b      	str	r3, [r5, #16]
 800860c:	3301      	adds	r3, #1
 800860e:	439a      	bics	r2, r3
 8008610:	602a      	str	r2, [r5, #0]
 8008612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008614:	0029      	movs	r1, r5
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800861a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800861c:	aa15      	add	r2, sp, #84	@ 0x54
 800861e:	f000 f9e5 	bl	80089ec <_printf_common>
 8008622:	3001      	adds	r0, #1
 8008624:	d000      	beq.n	8008628 <_printf_float+0xb8>
 8008626:	e09f      	b.n	8008768 <_printf_float+0x1f8>
 8008628:	2001      	movs	r0, #1
 800862a:	4240      	negs	r0, r0
 800862c:	b017      	add	sp, #92	@ 0x5c
 800862e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008630:	3307      	adds	r3, #7
 8008632:	e7b8      	b.n	80085a6 <_printf_float+0x36>
 8008634:	0032      	movs	r2, r6
 8008636:	003b      	movs	r3, r7
 8008638:	0030      	movs	r0, r6
 800863a:	0039      	movs	r1, r7
 800863c:	f7fa f836 	bl	80026ac <__aeabi_dcmpun>
 8008640:	2800      	cmp	r0, #0
 8008642:	d00b      	beq.n	800865c <_printf_float+0xec>
 8008644:	2f00      	cmp	r7, #0
 8008646:	da03      	bge.n	8008650 <_printf_float+0xe0>
 8008648:	002b      	movs	r3, r5
 800864a:	222d      	movs	r2, #45	@ 0x2d
 800864c:	3343      	adds	r3, #67	@ 0x43
 800864e:	701a      	strb	r2, [r3, #0]
 8008650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008652:	4f87      	ldr	r7, [pc, #540]	@ (8008870 <_printf_float+0x300>)
 8008654:	2b47      	cmp	r3, #71	@ 0x47
 8008656:	d9d5      	bls.n	8008604 <_printf_float+0x94>
 8008658:	4f86      	ldr	r7, [pc, #536]	@ (8008874 <_printf_float+0x304>)
 800865a:	e7d3      	b.n	8008604 <_printf_float+0x94>
 800865c:	2220      	movs	r2, #32
 800865e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008660:	686b      	ldr	r3, [r5, #4]
 8008662:	4394      	bics	r4, r2
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	d146      	bne.n	80086f6 <_printf_float+0x186>
 8008668:	3307      	adds	r3, #7
 800866a:	606b      	str	r3, [r5, #4]
 800866c:	2380      	movs	r3, #128	@ 0x80
 800866e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	4313      	orrs	r3, r2
 8008674:	2200      	movs	r2, #0
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	9206      	str	r2, [sp, #24]
 800867a:	aa14      	add	r2, sp, #80	@ 0x50
 800867c:	9205      	str	r2, [sp, #20]
 800867e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008680:	a90a      	add	r1, sp, #40	@ 0x28
 8008682:	9204      	str	r2, [sp, #16]
 8008684:	aa13      	add	r2, sp, #76	@ 0x4c
 8008686:	9203      	str	r2, [sp, #12]
 8008688:	2223      	movs	r2, #35	@ 0x23
 800868a:	1852      	adds	r2, r2, r1
 800868c:	9202      	str	r2, [sp, #8]
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	686b      	ldr	r3, [r5, #4]
 8008692:	0032      	movs	r2, r6
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008698:	003b      	movs	r3, r7
 800869a:	f7ff fec3 	bl	8008424 <__cvt>
 800869e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086a0:	0007      	movs	r7, r0
 80086a2:	2c47      	cmp	r4, #71	@ 0x47
 80086a4:	d12d      	bne.n	8008702 <_printf_float+0x192>
 80086a6:	1cd3      	adds	r3, r2, #3
 80086a8:	db02      	blt.n	80086b0 <_printf_float+0x140>
 80086aa:	686b      	ldr	r3, [r5, #4]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	dd48      	ble.n	8008742 <_printf_float+0x1d2>
 80086b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80086b4:	3b02      	subs	r3, #2
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80086ba:	0028      	movs	r0, r5
 80086bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80086be:	3901      	subs	r1, #1
 80086c0:	3050      	adds	r0, #80	@ 0x50
 80086c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80086c4:	f7ff ff14 	bl	80084f0 <__exponent>
 80086c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80086ca:	0004      	movs	r4, r0
 80086cc:	1813      	adds	r3, r2, r0
 80086ce:	612b      	str	r3, [r5, #16]
 80086d0:	2a01      	cmp	r2, #1
 80086d2:	dc02      	bgt.n	80086da <_printf_float+0x16a>
 80086d4:	682a      	ldr	r2, [r5, #0]
 80086d6:	07d2      	lsls	r2, r2, #31
 80086d8:	d501      	bpl.n	80086de <_printf_float+0x16e>
 80086da:	3301      	adds	r3, #1
 80086dc:	612b      	str	r3, [r5, #16]
 80086de:	2323      	movs	r3, #35	@ 0x23
 80086e0:	aa0a      	add	r2, sp, #40	@ 0x28
 80086e2:	189b      	adds	r3, r3, r2
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d100      	bne.n	80086ec <_printf_float+0x17c>
 80086ea:	e792      	b.n	8008612 <_printf_float+0xa2>
 80086ec:	002b      	movs	r3, r5
 80086ee:	222d      	movs	r2, #45	@ 0x2d
 80086f0:	3343      	adds	r3, #67	@ 0x43
 80086f2:	701a      	strb	r2, [r3, #0]
 80086f4:	e78d      	b.n	8008612 <_printf_float+0xa2>
 80086f6:	2c47      	cmp	r4, #71	@ 0x47
 80086f8:	d1b8      	bne.n	800866c <_printf_float+0xfc>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1b6      	bne.n	800866c <_printf_float+0xfc>
 80086fe:	3301      	adds	r3, #1
 8008700:	e7b3      	b.n	800866a <_printf_float+0xfa>
 8008702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008704:	0011      	movs	r1, r2
 8008706:	2b65      	cmp	r3, #101	@ 0x65
 8008708:	d9d7      	bls.n	80086ba <_printf_float+0x14a>
 800870a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800870c:	2b66      	cmp	r3, #102	@ 0x66
 800870e:	d11a      	bne.n	8008746 <_printf_float+0x1d6>
 8008710:	686b      	ldr	r3, [r5, #4]
 8008712:	2a00      	cmp	r2, #0
 8008714:	dd09      	ble.n	800872a <_printf_float+0x1ba>
 8008716:	612a      	str	r2, [r5, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <_printf_float+0x1b2>
 800871c:	6829      	ldr	r1, [r5, #0]
 800871e:	07c9      	lsls	r1, r1, #31
 8008720:	d50b      	bpl.n	800873a <_printf_float+0x1ca>
 8008722:	3301      	adds	r3, #1
 8008724:	189b      	adds	r3, r3, r2
 8008726:	612b      	str	r3, [r5, #16]
 8008728:	e007      	b.n	800873a <_printf_float+0x1ca>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d103      	bne.n	8008736 <_printf_float+0x1c6>
 800872e:	2201      	movs	r2, #1
 8008730:	6829      	ldr	r1, [r5, #0]
 8008732:	4211      	tst	r1, r2
 8008734:	d000      	beq.n	8008738 <_printf_float+0x1c8>
 8008736:	1c9a      	adds	r2, r3, #2
 8008738:	612a      	str	r2, [r5, #16]
 800873a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800873c:	2400      	movs	r4, #0
 800873e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8008740:	e7cd      	b.n	80086de <_printf_float+0x16e>
 8008742:	2367      	movs	r3, #103	@ 0x67
 8008744:	930c      	str	r3, [sp, #48]	@ 0x30
 8008746:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008748:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800874a:	4299      	cmp	r1, r3
 800874c:	db06      	blt.n	800875c <_printf_float+0x1ec>
 800874e:	682b      	ldr	r3, [r5, #0]
 8008750:	6129      	str	r1, [r5, #16]
 8008752:	07db      	lsls	r3, r3, #31
 8008754:	d5f1      	bpl.n	800873a <_printf_float+0x1ca>
 8008756:	3101      	adds	r1, #1
 8008758:	6129      	str	r1, [r5, #16]
 800875a:	e7ee      	b.n	800873a <_printf_float+0x1ca>
 800875c:	2201      	movs	r2, #1
 800875e:	2900      	cmp	r1, #0
 8008760:	dce0      	bgt.n	8008724 <_printf_float+0x1b4>
 8008762:	1892      	adds	r2, r2, r2
 8008764:	1a52      	subs	r2, r2, r1
 8008766:	e7dd      	b.n	8008724 <_printf_float+0x1b4>
 8008768:	682a      	ldr	r2, [r5, #0]
 800876a:	0553      	lsls	r3, r2, #21
 800876c:	d408      	bmi.n	8008780 <_printf_float+0x210>
 800876e:	692b      	ldr	r3, [r5, #16]
 8008770:	003a      	movs	r2, r7
 8008772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008774:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008776:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008778:	47a0      	blx	r4
 800877a:	3001      	adds	r0, #1
 800877c:	d129      	bne.n	80087d2 <_printf_float+0x262>
 800877e:	e753      	b.n	8008628 <_printf_float+0xb8>
 8008780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008782:	2b65      	cmp	r3, #101	@ 0x65
 8008784:	d800      	bhi.n	8008788 <_printf_float+0x218>
 8008786:	e0da      	b.n	800893e <_printf_float+0x3ce>
 8008788:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800878a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800878c:	2200      	movs	r2, #0
 800878e:	2300      	movs	r3, #0
 8008790:	f7f7 fe58 	bl	8000444 <__aeabi_dcmpeq>
 8008794:	2800      	cmp	r0, #0
 8008796:	d033      	beq.n	8008800 <_printf_float+0x290>
 8008798:	2301      	movs	r3, #1
 800879a:	4a37      	ldr	r2, [pc, #220]	@ (8008878 <_printf_float+0x308>)
 800879c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800879e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80087a2:	47a0      	blx	r4
 80087a4:	3001      	adds	r0, #1
 80087a6:	d100      	bne.n	80087aa <_printf_float+0x23a>
 80087a8:	e73e      	b.n	8008628 <_printf_float+0xb8>
 80087aa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80087ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087ae:	42b3      	cmp	r3, r6
 80087b0:	db02      	blt.n	80087b8 <_printf_float+0x248>
 80087b2:	682b      	ldr	r3, [r5, #0]
 80087b4:	07db      	lsls	r3, r3, #31
 80087b6:	d50c      	bpl.n	80087d2 <_printf_float+0x262>
 80087b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80087ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80087be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80087c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087c2:	47a0      	blx	r4
 80087c4:	2400      	movs	r4, #0
 80087c6:	3001      	adds	r0, #1
 80087c8:	d100      	bne.n	80087cc <_printf_float+0x25c>
 80087ca:	e72d      	b.n	8008628 <_printf_float+0xb8>
 80087cc:	1e73      	subs	r3, r6, #1
 80087ce:	42a3      	cmp	r3, r4
 80087d0:	dc0a      	bgt.n	80087e8 <_printf_float+0x278>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	079b      	lsls	r3, r3, #30
 80087d6:	d500      	bpl.n	80087da <_printf_float+0x26a>
 80087d8:	e105      	b.n	80089e6 <_printf_float+0x476>
 80087da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80087dc:	68e8      	ldr	r0, [r5, #12]
 80087de:	4298      	cmp	r0, r3
 80087e0:	db00      	blt.n	80087e4 <_printf_float+0x274>
 80087e2:	e723      	b.n	800862c <_printf_float+0xbc>
 80087e4:	0018      	movs	r0, r3
 80087e6:	e721      	b.n	800862c <_printf_float+0xbc>
 80087e8:	002a      	movs	r2, r5
 80087ea:	2301      	movs	r3, #1
 80087ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80087ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80087f2:	321a      	adds	r2, #26
 80087f4:	47b8      	blx	r7
 80087f6:	3001      	adds	r0, #1
 80087f8:	d100      	bne.n	80087fc <_printf_float+0x28c>
 80087fa:	e715      	b.n	8008628 <_printf_float+0xb8>
 80087fc:	3401      	adds	r4, #1
 80087fe:	e7e5      	b.n	80087cc <_printf_float+0x25c>
 8008800:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008802:	2b00      	cmp	r3, #0
 8008804:	dc3a      	bgt.n	800887c <_printf_float+0x30c>
 8008806:	2301      	movs	r3, #1
 8008808:	4a1b      	ldr	r2, [pc, #108]	@ (8008878 <_printf_float+0x308>)
 800880a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800880c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800880e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008810:	47a0      	blx	r4
 8008812:	3001      	adds	r0, #1
 8008814:	d100      	bne.n	8008818 <_printf_float+0x2a8>
 8008816:	e707      	b.n	8008628 <_printf_float+0xb8>
 8008818:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800881a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800881c:	4333      	orrs	r3, r6
 800881e:	d102      	bne.n	8008826 <_printf_float+0x2b6>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	07db      	lsls	r3, r3, #31
 8008824:	d5d5      	bpl.n	80087d2 <_printf_float+0x262>
 8008826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008828:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800882a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800882c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800882e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008830:	47a0      	blx	r4
 8008832:	2300      	movs	r3, #0
 8008834:	3001      	adds	r0, #1
 8008836:	d100      	bne.n	800883a <_printf_float+0x2ca>
 8008838:	e6f6      	b.n	8008628 <_printf_float+0xb8>
 800883a:	930c      	str	r3, [sp, #48]	@ 0x30
 800883c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800883e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008840:	425b      	negs	r3, r3
 8008842:	4293      	cmp	r3, r2
 8008844:	dc01      	bgt.n	800884a <_printf_float+0x2da>
 8008846:	0033      	movs	r3, r6
 8008848:	e792      	b.n	8008770 <_printf_float+0x200>
 800884a:	002a      	movs	r2, r5
 800884c:	2301      	movs	r3, #1
 800884e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008850:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008852:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008854:	321a      	adds	r2, #26
 8008856:	47a0      	blx	r4
 8008858:	3001      	adds	r0, #1
 800885a:	d100      	bne.n	800885e <_printf_float+0x2ee>
 800885c:	e6e4      	b.n	8008628 <_printf_float+0xb8>
 800885e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008860:	3301      	adds	r3, #1
 8008862:	e7ea      	b.n	800883a <_printf_float+0x2ca>
 8008864:	7fefffff 	.word	0x7fefffff
 8008868:	0800ce00 	.word	0x0800ce00
 800886c:	0800ce04 	.word	0x0800ce04
 8008870:	0800ce08 	.word	0x0800ce08
 8008874:	0800ce0c 	.word	0x0800ce0c
 8008878:	0800ce10 	.word	0x0800ce10
 800887c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800887e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008880:	930c      	str	r3, [sp, #48]	@ 0x30
 8008882:	429e      	cmp	r6, r3
 8008884:	dd00      	ble.n	8008888 <_printf_float+0x318>
 8008886:	001e      	movs	r6, r3
 8008888:	2e00      	cmp	r6, #0
 800888a:	dc31      	bgt.n	80088f0 <_printf_float+0x380>
 800888c:	43f3      	mvns	r3, r6
 800888e:	2400      	movs	r4, #0
 8008890:	17db      	asrs	r3, r3, #31
 8008892:	4033      	ands	r3, r6
 8008894:	930e      	str	r3, [sp, #56]	@ 0x38
 8008896:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800889a:	1af3      	subs	r3, r6, r3
 800889c:	42a3      	cmp	r3, r4
 800889e:	dc30      	bgt.n	8008902 <_printf_float+0x392>
 80088a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088a4:	429a      	cmp	r2, r3
 80088a6:	dc38      	bgt.n	800891a <_printf_float+0x3aa>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	07db      	lsls	r3, r3, #31
 80088ac:	d435      	bmi.n	800891a <_printf_float+0x3aa>
 80088ae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80088b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088b4:	1b9b      	subs	r3, r3, r6
 80088b6:	1b14      	subs	r4, r2, r4
 80088b8:	429c      	cmp	r4, r3
 80088ba:	dd00      	ble.n	80088be <_printf_float+0x34e>
 80088bc:	001c      	movs	r4, r3
 80088be:	2c00      	cmp	r4, #0
 80088c0:	dc34      	bgt.n	800892c <_printf_float+0x3bc>
 80088c2:	43e3      	mvns	r3, r4
 80088c4:	2600      	movs	r6, #0
 80088c6:	17db      	asrs	r3, r3, #31
 80088c8:	401c      	ands	r4, r3
 80088ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	1b1b      	subs	r3, r3, r4
 80088d2:	42b3      	cmp	r3, r6
 80088d4:	dc00      	bgt.n	80088d8 <_printf_float+0x368>
 80088d6:	e77c      	b.n	80087d2 <_printf_float+0x262>
 80088d8:	002a      	movs	r2, r5
 80088da:	2301      	movs	r3, #1
 80088dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80088e2:	321a      	adds	r2, #26
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d100      	bne.n	80088ec <_printf_float+0x37c>
 80088ea:	e69d      	b.n	8008628 <_printf_float+0xb8>
 80088ec:	3601      	adds	r6, #1
 80088ee:	e7ec      	b.n	80088ca <_printf_float+0x35a>
 80088f0:	0033      	movs	r3, r6
 80088f2:	003a      	movs	r2, r7
 80088f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80088fa:	47a0      	blx	r4
 80088fc:	3001      	adds	r0, #1
 80088fe:	d1c5      	bne.n	800888c <_printf_float+0x31c>
 8008900:	e692      	b.n	8008628 <_printf_float+0xb8>
 8008902:	002a      	movs	r2, r5
 8008904:	2301      	movs	r3, #1
 8008906:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008908:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800890a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800890c:	321a      	adds	r2, #26
 800890e:	47b0      	blx	r6
 8008910:	3001      	adds	r0, #1
 8008912:	d100      	bne.n	8008916 <_printf_float+0x3a6>
 8008914:	e688      	b.n	8008628 <_printf_float+0xb8>
 8008916:	3401      	adds	r4, #1
 8008918:	e7bd      	b.n	8008896 <_printf_float+0x326>
 800891a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800891c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800891e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008920:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008922:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008924:	47a0      	blx	r4
 8008926:	3001      	adds	r0, #1
 8008928:	d1c1      	bne.n	80088ae <_printf_float+0x33e>
 800892a:	e67d      	b.n	8008628 <_printf_float+0xb8>
 800892c:	19ba      	adds	r2, r7, r6
 800892e:	0023      	movs	r3, r4
 8008930:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008934:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008936:	47b0      	blx	r6
 8008938:	3001      	adds	r0, #1
 800893a:	d1c2      	bne.n	80088c2 <_printf_float+0x352>
 800893c:	e674      	b.n	8008628 <_printf_float+0xb8>
 800893e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008940:	930c      	str	r3, [sp, #48]	@ 0x30
 8008942:	2b01      	cmp	r3, #1
 8008944:	dc02      	bgt.n	800894c <_printf_float+0x3dc>
 8008946:	2301      	movs	r3, #1
 8008948:	421a      	tst	r2, r3
 800894a:	d039      	beq.n	80089c0 <_printf_float+0x450>
 800894c:	2301      	movs	r3, #1
 800894e:	003a      	movs	r2, r7
 8008950:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008954:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008956:	47b0      	blx	r6
 8008958:	3001      	adds	r0, #1
 800895a:	d100      	bne.n	800895e <_printf_float+0x3ee>
 800895c:	e664      	b.n	8008628 <_printf_float+0xb8>
 800895e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008960:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008962:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008964:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008966:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008968:	47b0      	blx	r6
 800896a:	3001      	adds	r0, #1
 800896c:	d100      	bne.n	8008970 <_printf_float+0x400>
 800896e:	e65b      	b.n	8008628 <_printf_float+0xb8>
 8008970:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008972:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008976:	2200      	movs	r2, #0
 8008978:	3b01      	subs	r3, #1
 800897a:	930c      	str	r3, [sp, #48]	@ 0x30
 800897c:	2300      	movs	r3, #0
 800897e:	f7f7 fd61 	bl	8000444 <__aeabi_dcmpeq>
 8008982:	2800      	cmp	r0, #0
 8008984:	d11a      	bne.n	80089bc <_printf_float+0x44c>
 8008986:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008988:	1c7a      	adds	r2, r7, #1
 800898a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800898c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800898e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008990:	47b0      	blx	r6
 8008992:	3001      	adds	r0, #1
 8008994:	d10e      	bne.n	80089b4 <_printf_float+0x444>
 8008996:	e647      	b.n	8008628 <_printf_float+0xb8>
 8008998:	002a      	movs	r2, r5
 800899a:	2301      	movs	r3, #1
 800899c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800899e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80089a2:	321a      	adds	r2, #26
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	d100      	bne.n	80089ac <_printf_float+0x43c>
 80089aa:	e63d      	b.n	8008628 <_printf_float+0xb8>
 80089ac:	3601      	adds	r6, #1
 80089ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089b0:	429e      	cmp	r6, r3
 80089b2:	dbf1      	blt.n	8008998 <_printf_float+0x428>
 80089b4:	002a      	movs	r2, r5
 80089b6:	0023      	movs	r3, r4
 80089b8:	3250      	adds	r2, #80	@ 0x50
 80089ba:	e6da      	b.n	8008772 <_printf_float+0x202>
 80089bc:	2600      	movs	r6, #0
 80089be:	e7f6      	b.n	80089ae <_printf_float+0x43e>
 80089c0:	003a      	movs	r2, r7
 80089c2:	e7e2      	b.n	800898a <_printf_float+0x41a>
 80089c4:	002a      	movs	r2, r5
 80089c6:	2301      	movs	r3, #1
 80089c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80089ce:	3219      	adds	r2, #25
 80089d0:	47b0      	blx	r6
 80089d2:	3001      	adds	r0, #1
 80089d4:	d100      	bne.n	80089d8 <_printf_float+0x468>
 80089d6:	e627      	b.n	8008628 <_printf_float+0xb8>
 80089d8:	3401      	adds	r4, #1
 80089da:	68eb      	ldr	r3, [r5, #12]
 80089dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	dcef      	bgt.n	80089c4 <_printf_float+0x454>
 80089e4:	e6f9      	b.n	80087da <_printf_float+0x26a>
 80089e6:	2400      	movs	r4, #0
 80089e8:	e7f7      	b.n	80089da <_printf_float+0x46a>
 80089ea:	46c0      	nop			@ (mov r8, r8)

080089ec <_printf_common>:
 80089ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ee:	0016      	movs	r6, r2
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	688a      	ldr	r2, [r1, #8]
 80089f4:	690b      	ldr	r3, [r1, #16]
 80089f6:	000c      	movs	r4, r1
 80089f8:	9000      	str	r0, [sp, #0]
 80089fa:	4293      	cmp	r3, r2
 80089fc:	da00      	bge.n	8008a00 <_printf_common+0x14>
 80089fe:	0013      	movs	r3, r2
 8008a00:	0022      	movs	r2, r4
 8008a02:	6033      	str	r3, [r6, #0]
 8008a04:	3243      	adds	r2, #67	@ 0x43
 8008a06:	7812      	ldrb	r2, [r2, #0]
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	d001      	beq.n	8008a10 <_printf_common+0x24>
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	6033      	str	r3, [r6, #0]
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	069b      	lsls	r3, r3, #26
 8008a14:	d502      	bpl.n	8008a1c <_printf_common+0x30>
 8008a16:	6833      	ldr	r3, [r6, #0]
 8008a18:	3302      	adds	r3, #2
 8008a1a:	6033      	str	r3, [r6, #0]
 8008a1c:	6822      	ldr	r2, [r4, #0]
 8008a1e:	2306      	movs	r3, #6
 8008a20:	0015      	movs	r5, r2
 8008a22:	401d      	ands	r5, r3
 8008a24:	421a      	tst	r2, r3
 8008a26:	d027      	beq.n	8008a78 <_printf_common+0x8c>
 8008a28:	0023      	movs	r3, r4
 8008a2a:	3343      	adds	r3, #67	@ 0x43
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	1e5a      	subs	r2, r3, #1
 8008a30:	4193      	sbcs	r3, r2
 8008a32:	6822      	ldr	r2, [r4, #0]
 8008a34:	0692      	lsls	r2, r2, #26
 8008a36:	d430      	bmi.n	8008a9a <_printf_common+0xae>
 8008a38:	0022      	movs	r2, r4
 8008a3a:	9901      	ldr	r1, [sp, #4]
 8008a3c:	9800      	ldr	r0, [sp, #0]
 8008a3e:	9d08      	ldr	r5, [sp, #32]
 8008a40:	3243      	adds	r2, #67	@ 0x43
 8008a42:	47a8      	blx	r5
 8008a44:	3001      	adds	r0, #1
 8008a46:	d025      	beq.n	8008a94 <_printf_common+0xa8>
 8008a48:	2206      	movs	r2, #6
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	2500      	movs	r5, #0
 8008a4e:	4013      	ands	r3, r2
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d105      	bne.n	8008a60 <_printf_common+0x74>
 8008a54:	6833      	ldr	r3, [r6, #0]
 8008a56:	68e5      	ldr	r5, [r4, #12]
 8008a58:	1aed      	subs	r5, r5, r3
 8008a5a:	43eb      	mvns	r3, r5
 8008a5c:	17db      	asrs	r3, r3, #31
 8008a5e:	401d      	ands	r5, r3
 8008a60:	68a3      	ldr	r3, [r4, #8]
 8008a62:	6922      	ldr	r2, [r4, #16]
 8008a64:	4293      	cmp	r3, r2
 8008a66:	dd01      	ble.n	8008a6c <_printf_common+0x80>
 8008a68:	1a9b      	subs	r3, r3, r2
 8008a6a:	18ed      	adds	r5, r5, r3
 8008a6c:	2600      	movs	r6, #0
 8008a6e:	42b5      	cmp	r5, r6
 8008a70:	d120      	bne.n	8008ab4 <_printf_common+0xc8>
 8008a72:	2000      	movs	r0, #0
 8008a74:	e010      	b.n	8008a98 <_printf_common+0xac>
 8008a76:	3501      	adds	r5, #1
 8008a78:	68e3      	ldr	r3, [r4, #12]
 8008a7a:	6832      	ldr	r2, [r6, #0]
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	42ab      	cmp	r3, r5
 8008a80:	ddd2      	ble.n	8008a28 <_printf_common+0x3c>
 8008a82:	0022      	movs	r2, r4
 8008a84:	2301      	movs	r3, #1
 8008a86:	9901      	ldr	r1, [sp, #4]
 8008a88:	9800      	ldr	r0, [sp, #0]
 8008a8a:	9f08      	ldr	r7, [sp, #32]
 8008a8c:	3219      	adds	r2, #25
 8008a8e:	47b8      	blx	r7
 8008a90:	3001      	adds	r0, #1
 8008a92:	d1f0      	bne.n	8008a76 <_printf_common+0x8a>
 8008a94:	2001      	movs	r0, #1
 8008a96:	4240      	negs	r0, r0
 8008a98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a9a:	2030      	movs	r0, #48	@ 0x30
 8008a9c:	18e1      	adds	r1, r4, r3
 8008a9e:	3143      	adds	r1, #67	@ 0x43
 8008aa0:	7008      	strb	r0, [r1, #0]
 8008aa2:	0021      	movs	r1, r4
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	3145      	adds	r1, #69	@ 0x45
 8008aa8:	7809      	ldrb	r1, [r1, #0]
 8008aaa:	18a2      	adds	r2, r4, r2
 8008aac:	3243      	adds	r2, #67	@ 0x43
 8008aae:	3302      	adds	r3, #2
 8008ab0:	7011      	strb	r1, [r2, #0]
 8008ab2:	e7c1      	b.n	8008a38 <_printf_common+0x4c>
 8008ab4:	0022      	movs	r2, r4
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	9901      	ldr	r1, [sp, #4]
 8008aba:	9800      	ldr	r0, [sp, #0]
 8008abc:	9f08      	ldr	r7, [sp, #32]
 8008abe:	321a      	adds	r2, #26
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	d0e6      	beq.n	8008a94 <_printf_common+0xa8>
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	e7d1      	b.n	8008a6e <_printf_common+0x82>
	...

08008acc <_printf_i>:
 8008acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ace:	b08b      	sub	sp, #44	@ 0x2c
 8008ad0:	9206      	str	r2, [sp, #24]
 8008ad2:	000a      	movs	r2, r1
 8008ad4:	3243      	adds	r2, #67	@ 0x43
 8008ad6:	9307      	str	r3, [sp, #28]
 8008ad8:	9005      	str	r0, [sp, #20]
 8008ada:	9203      	str	r2, [sp, #12]
 8008adc:	7e0a      	ldrb	r2, [r1, #24]
 8008ade:	000c      	movs	r4, r1
 8008ae0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ae2:	2a78      	cmp	r2, #120	@ 0x78
 8008ae4:	d809      	bhi.n	8008afa <_printf_i+0x2e>
 8008ae6:	2a62      	cmp	r2, #98	@ 0x62
 8008ae8:	d80b      	bhi.n	8008b02 <_printf_i+0x36>
 8008aea:	2a00      	cmp	r2, #0
 8008aec:	d100      	bne.n	8008af0 <_printf_i+0x24>
 8008aee:	e0bc      	b.n	8008c6a <_printf_i+0x19e>
 8008af0:	497b      	ldr	r1, [pc, #492]	@ (8008ce0 <_printf_i+0x214>)
 8008af2:	9104      	str	r1, [sp, #16]
 8008af4:	2a58      	cmp	r2, #88	@ 0x58
 8008af6:	d100      	bne.n	8008afa <_printf_i+0x2e>
 8008af8:	e090      	b.n	8008c1c <_printf_i+0x150>
 8008afa:	0025      	movs	r5, r4
 8008afc:	3542      	adds	r5, #66	@ 0x42
 8008afe:	702a      	strb	r2, [r5, #0]
 8008b00:	e022      	b.n	8008b48 <_printf_i+0x7c>
 8008b02:	0010      	movs	r0, r2
 8008b04:	3863      	subs	r0, #99	@ 0x63
 8008b06:	2815      	cmp	r0, #21
 8008b08:	d8f7      	bhi.n	8008afa <_printf_i+0x2e>
 8008b0a:	f7f7 fb0b 	bl	8000124 <__gnu_thumb1_case_shi>
 8008b0e:	0016      	.short	0x0016
 8008b10:	fff6001f 	.word	0xfff6001f
 8008b14:	fff6fff6 	.word	0xfff6fff6
 8008b18:	001ffff6 	.word	0x001ffff6
 8008b1c:	fff6fff6 	.word	0xfff6fff6
 8008b20:	fff6fff6 	.word	0xfff6fff6
 8008b24:	003600a1 	.word	0x003600a1
 8008b28:	fff60080 	.word	0xfff60080
 8008b2c:	00b2fff6 	.word	0x00b2fff6
 8008b30:	0036fff6 	.word	0x0036fff6
 8008b34:	fff6fff6 	.word	0xfff6fff6
 8008b38:	0084      	.short	0x0084
 8008b3a:	0025      	movs	r5, r4
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	3542      	adds	r5, #66	@ 0x42
 8008b40:	1d11      	adds	r1, r2, #4
 8008b42:	6019      	str	r1, [r3, #0]
 8008b44:	6813      	ldr	r3, [r2, #0]
 8008b46:	702b      	strb	r3, [r5, #0]
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e0a0      	b.n	8008c8e <_printf_i+0x1c2>
 8008b4c:	6818      	ldr	r0, [r3, #0]
 8008b4e:	6809      	ldr	r1, [r1, #0]
 8008b50:	1d02      	adds	r2, r0, #4
 8008b52:	060d      	lsls	r5, r1, #24
 8008b54:	d50b      	bpl.n	8008b6e <_printf_i+0xa2>
 8008b56:	6806      	ldr	r6, [r0, #0]
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	2e00      	cmp	r6, #0
 8008b5c:	da03      	bge.n	8008b66 <_printf_i+0x9a>
 8008b5e:	232d      	movs	r3, #45	@ 0x2d
 8008b60:	9a03      	ldr	r2, [sp, #12]
 8008b62:	4276      	negs	r6, r6
 8008b64:	7013      	strb	r3, [r2, #0]
 8008b66:	4b5e      	ldr	r3, [pc, #376]	@ (8008ce0 <_printf_i+0x214>)
 8008b68:	270a      	movs	r7, #10
 8008b6a:	9304      	str	r3, [sp, #16]
 8008b6c:	e018      	b.n	8008ba0 <_printf_i+0xd4>
 8008b6e:	6806      	ldr	r6, [r0, #0]
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	0649      	lsls	r1, r1, #25
 8008b74:	d5f1      	bpl.n	8008b5a <_printf_i+0x8e>
 8008b76:	b236      	sxth	r6, r6
 8008b78:	e7ef      	b.n	8008b5a <_printf_i+0x8e>
 8008b7a:	6808      	ldr	r0, [r1, #0]
 8008b7c:	6819      	ldr	r1, [r3, #0]
 8008b7e:	c940      	ldmia	r1!, {r6}
 8008b80:	0605      	lsls	r5, r0, #24
 8008b82:	d402      	bmi.n	8008b8a <_printf_i+0xbe>
 8008b84:	0640      	lsls	r0, r0, #25
 8008b86:	d500      	bpl.n	8008b8a <_printf_i+0xbe>
 8008b88:	b2b6      	uxth	r6, r6
 8008b8a:	6019      	str	r1, [r3, #0]
 8008b8c:	4b54      	ldr	r3, [pc, #336]	@ (8008ce0 <_printf_i+0x214>)
 8008b8e:	270a      	movs	r7, #10
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	2a6f      	cmp	r2, #111	@ 0x6f
 8008b94:	d100      	bne.n	8008b98 <_printf_i+0xcc>
 8008b96:	3f02      	subs	r7, #2
 8008b98:	0023      	movs	r3, r4
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	3343      	adds	r3, #67	@ 0x43
 8008b9e:	701a      	strb	r2, [r3, #0]
 8008ba0:	6863      	ldr	r3, [r4, #4]
 8008ba2:	60a3      	str	r3, [r4, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	db03      	blt.n	8008bb0 <_printf_i+0xe4>
 8008ba8:	2104      	movs	r1, #4
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	438a      	bics	r2, r1
 8008bae:	6022      	str	r2, [r4, #0]
 8008bb0:	2e00      	cmp	r6, #0
 8008bb2:	d102      	bne.n	8008bba <_printf_i+0xee>
 8008bb4:	9d03      	ldr	r5, [sp, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00c      	beq.n	8008bd4 <_printf_i+0x108>
 8008bba:	9d03      	ldr	r5, [sp, #12]
 8008bbc:	0030      	movs	r0, r6
 8008bbe:	0039      	movs	r1, r7
 8008bc0:	f7f7 fb40 	bl	8000244 <__aeabi_uidivmod>
 8008bc4:	9b04      	ldr	r3, [sp, #16]
 8008bc6:	3d01      	subs	r5, #1
 8008bc8:	5c5b      	ldrb	r3, [r3, r1]
 8008bca:	702b      	strb	r3, [r5, #0]
 8008bcc:	0033      	movs	r3, r6
 8008bce:	0006      	movs	r6, r0
 8008bd0:	429f      	cmp	r7, r3
 8008bd2:	d9f3      	bls.n	8008bbc <_printf_i+0xf0>
 8008bd4:	2f08      	cmp	r7, #8
 8008bd6:	d109      	bne.n	8008bec <_printf_i+0x120>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	07db      	lsls	r3, r3, #31
 8008bdc:	d506      	bpl.n	8008bec <_printf_i+0x120>
 8008bde:	6862      	ldr	r2, [r4, #4]
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	dc02      	bgt.n	8008bec <_printf_i+0x120>
 8008be6:	2330      	movs	r3, #48	@ 0x30
 8008be8:	3d01      	subs	r5, #1
 8008bea:	702b      	strb	r3, [r5, #0]
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	1b5b      	subs	r3, r3, r5
 8008bf0:	6123      	str	r3, [r4, #16]
 8008bf2:	9b07      	ldr	r3, [sp, #28]
 8008bf4:	0021      	movs	r1, r4
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	9805      	ldr	r0, [sp, #20]
 8008bfa:	9b06      	ldr	r3, [sp, #24]
 8008bfc:	aa09      	add	r2, sp, #36	@ 0x24
 8008bfe:	f7ff fef5 	bl	80089ec <_printf_common>
 8008c02:	3001      	adds	r0, #1
 8008c04:	d148      	bne.n	8008c98 <_printf_i+0x1cc>
 8008c06:	2001      	movs	r0, #1
 8008c08:	4240      	negs	r0, r0
 8008c0a:	b00b      	add	sp, #44	@ 0x2c
 8008c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c0e:	2220      	movs	r2, #32
 8008c10:	6809      	ldr	r1, [r1, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	6022      	str	r2, [r4, #0]
 8008c16:	2278      	movs	r2, #120	@ 0x78
 8008c18:	4932      	ldr	r1, [pc, #200]	@ (8008ce4 <_printf_i+0x218>)
 8008c1a:	9104      	str	r1, [sp, #16]
 8008c1c:	0021      	movs	r1, r4
 8008c1e:	3145      	adds	r1, #69	@ 0x45
 8008c20:	700a      	strb	r2, [r1, #0]
 8008c22:	6819      	ldr	r1, [r3, #0]
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	c940      	ldmia	r1!, {r6}
 8008c28:	0610      	lsls	r0, r2, #24
 8008c2a:	d402      	bmi.n	8008c32 <_printf_i+0x166>
 8008c2c:	0650      	lsls	r0, r2, #25
 8008c2e:	d500      	bpl.n	8008c32 <_printf_i+0x166>
 8008c30:	b2b6      	uxth	r6, r6
 8008c32:	6019      	str	r1, [r3, #0]
 8008c34:	07d3      	lsls	r3, r2, #31
 8008c36:	d502      	bpl.n	8008c3e <_printf_i+0x172>
 8008c38:	2320      	movs	r3, #32
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	2e00      	cmp	r6, #0
 8008c40:	d001      	beq.n	8008c46 <_printf_i+0x17a>
 8008c42:	2710      	movs	r7, #16
 8008c44:	e7a8      	b.n	8008b98 <_printf_i+0xcc>
 8008c46:	2220      	movs	r2, #32
 8008c48:	6823      	ldr	r3, [r4, #0]
 8008c4a:	4393      	bics	r3, r2
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	e7f8      	b.n	8008c42 <_printf_i+0x176>
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	680d      	ldr	r5, [r1, #0]
 8008c54:	1d10      	adds	r0, r2, #4
 8008c56:	6949      	ldr	r1, [r1, #20]
 8008c58:	6018      	str	r0, [r3, #0]
 8008c5a:	6813      	ldr	r3, [r2, #0]
 8008c5c:	062e      	lsls	r6, r5, #24
 8008c5e:	d501      	bpl.n	8008c64 <_printf_i+0x198>
 8008c60:	6019      	str	r1, [r3, #0]
 8008c62:	e002      	b.n	8008c6a <_printf_i+0x19e>
 8008c64:	066d      	lsls	r5, r5, #25
 8008c66:	d5fb      	bpl.n	8008c60 <_printf_i+0x194>
 8008c68:	8019      	strh	r1, [r3, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9d03      	ldr	r5, [sp, #12]
 8008c6e:	6123      	str	r3, [r4, #16]
 8008c70:	e7bf      	b.n	8008bf2 <_printf_i+0x126>
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	1d11      	adds	r1, r2, #4
 8008c76:	6019      	str	r1, [r3, #0]
 8008c78:	6815      	ldr	r5, [r2, #0]
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	0028      	movs	r0, r5
 8008c7e:	6862      	ldr	r2, [r4, #4]
 8008c80:	f000 f9c9 	bl	8009016 <memchr>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d001      	beq.n	8008c8c <_printf_i+0x1c0>
 8008c88:	1b40      	subs	r0, r0, r5
 8008c8a:	6060      	str	r0, [r4, #4]
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	2300      	movs	r3, #0
 8008c92:	9a03      	ldr	r2, [sp, #12]
 8008c94:	7013      	strb	r3, [r2, #0]
 8008c96:	e7ac      	b.n	8008bf2 <_printf_i+0x126>
 8008c98:	002a      	movs	r2, r5
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	9906      	ldr	r1, [sp, #24]
 8008c9e:	9805      	ldr	r0, [sp, #20]
 8008ca0:	9d07      	ldr	r5, [sp, #28]
 8008ca2:	47a8      	blx	r5
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d0ae      	beq.n	8008c06 <_printf_i+0x13a>
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	079b      	lsls	r3, r3, #30
 8008cac:	d415      	bmi.n	8008cda <_printf_i+0x20e>
 8008cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb0:	68e0      	ldr	r0, [r4, #12]
 8008cb2:	4298      	cmp	r0, r3
 8008cb4:	daa9      	bge.n	8008c0a <_printf_i+0x13e>
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	e7a7      	b.n	8008c0a <_printf_i+0x13e>
 8008cba:	0022      	movs	r2, r4
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	9906      	ldr	r1, [sp, #24]
 8008cc0:	9805      	ldr	r0, [sp, #20]
 8008cc2:	9e07      	ldr	r6, [sp, #28]
 8008cc4:	3219      	adds	r2, #25
 8008cc6:	47b0      	blx	r6
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d09c      	beq.n	8008c06 <_printf_i+0x13a>
 8008ccc:	3501      	adds	r5, #1
 8008cce:	68e3      	ldr	r3, [r4, #12]
 8008cd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cd2:	1a9b      	subs	r3, r3, r2
 8008cd4:	42ab      	cmp	r3, r5
 8008cd6:	dcf0      	bgt.n	8008cba <_printf_i+0x1ee>
 8008cd8:	e7e9      	b.n	8008cae <_printf_i+0x1e2>
 8008cda:	2500      	movs	r5, #0
 8008cdc:	e7f7      	b.n	8008cce <_printf_i+0x202>
 8008cde:	46c0      	nop			@ (mov r8, r8)
 8008ce0:	0800ce12 	.word	0x0800ce12
 8008ce4:	0800ce23 	.word	0x0800ce23

08008ce8 <std>:
 8008ce8:	2300      	movs	r3, #0
 8008cea:	b510      	push	{r4, lr}
 8008cec:	0004      	movs	r4, r0
 8008cee:	6003      	str	r3, [r0, #0]
 8008cf0:	6043      	str	r3, [r0, #4]
 8008cf2:	6083      	str	r3, [r0, #8]
 8008cf4:	8181      	strh	r1, [r0, #12]
 8008cf6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cf8:	81c2      	strh	r2, [r0, #14]
 8008cfa:	6103      	str	r3, [r0, #16]
 8008cfc:	6143      	str	r3, [r0, #20]
 8008cfe:	6183      	str	r3, [r0, #24]
 8008d00:	0019      	movs	r1, r3
 8008d02:	2208      	movs	r2, #8
 8008d04:	305c      	adds	r0, #92	@ 0x5c
 8008d06:	f000 f8ff 	bl	8008f08 <memset>
 8008d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d38 <std+0x50>)
 8008d0c:	6224      	str	r4, [r4, #32]
 8008d0e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d10:	4b0a      	ldr	r3, [pc, #40]	@ (8008d3c <std+0x54>)
 8008d12:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d14:	4b0a      	ldr	r3, [pc, #40]	@ (8008d40 <std+0x58>)
 8008d16:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d18:	4b0a      	ldr	r3, [pc, #40]	@ (8008d44 <std+0x5c>)
 8008d1a:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d48 <std+0x60>)
 8008d1e:	429c      	cmp	r4, r3
 8008d20:	d005      	beq.n	8008d2e <std+0x46>
 8008d22:	4b0a      	ldr	r3, [pc, #40]	@ (8008d4c <std+0x64>)
 8008d24:	429c      	cmp	r4, r3
 8008d26:	d002      	beq.n	8008d2e <std+0x46>
 8008d28:	4b09      	ldr	r3, [pc, #36]	@ (8008d50 <std+0x68>)
 8008d2a:	429c      	cmp	r4, r3
 8008d2c:	d103      	bne.n	8008d36 <std+0x4e>
 8008d2e:	0020      	movs	r0, r4
 8008d30:	3058      	adds	r0, #88	@ 0x58
 8008d32:	f000 f96d 	bl	8009010 <__retarget_lock_init_recursive>
 8008d36:	bd10      	pop	{r4, pc}
 8008d38:	08008e71 	.word	0x08008e71
 8008d3c:	08008e99 	.word	0x08008e99
 8008d40:	08008ed1 	.word	0x08008ed1
 8008d44:	08008efd 	.word	0x08008efd
 8008d48:	20000e60 	.word	0x20000e60
 8008d4c:	20000ec8 	.word	0x20000ec8
 8008d50:	20000f30 	.word	0x20000f30

08008d54 <stdio_exit_handler>:
 8008d54:	b510      	push	{r4, lr}
 8008d56:	4a03      	ldr	r2, [pc, #12]	@ (8008d64 <stdio_exit_handler+0x10>)
 8008d58:	4903      	ldr	r1, [pc, #12]	@ (8008d68 <stdio_exit_handler+0x14>)
 8008d5a:	4804      	ldr	r0, [pc, #16]	@ (8008d6c <stdio_exit_handler+0x18>)
 8008d5c:	f000 f86c 	bl	8008e38 <_fwalk_sglue>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	46c0      	nop			@ (mov r8, r8)
 8008d64:	20000058 	.word	0x20000058
 8008d68:	0800a7a5 	.word	0x0800a7a5
 8008d6c:	20000068 	.word	0x20000068

08008d70 <cleanup_stdio>:
 8008d70:	6841      	ldr	r1, [r0, #4]
 8008d72:	4b0b      	ldr	r3, [pc, #44]	@ (8008da0 <cleanup_stdio+0x30>)
 8008d74:	b510      	push	{r4, lr}
 8008d76:	0004      	movs	r4, r0
 8008d78:	4299      	cmp	r1, r3
 8008d7a:	d001      	beq.n	8008d80 <cleanup_stdio+0x10>
 8008d7c:	f001 fd12 	bl	800a7a4 <_fflush_r>
 8008d80:	68a1      	ldr	r1, [r4, #8]
 8008d82:	4b08      	ldr	r3, [pc, #32]	@ (8008da4 <cleanup_stdio+0x34>)
 8008d84:	4299      	cmp	r1, r3
 8008d86:	d002      	beq.n	8008d8e <cleanup_stdio+0x1e>
 8008d88:	0020      	movs	r0, r4
 8008d8a:	f001 fd0b 	bl	800a7a4 <_fflush_r>
 8008d8e:	68e1      	ldr	r1, [r4, #12]
 8008d90:	4b05      	ldr	r3, [pc, #20]	@ (8008da8 <cleanup_stdio+0x38>)
 8008d92:	4299      	cmp	r1, r3
 8008d94:	d002      	beq.n	8008d9c <cleanup_stdio+0x2c>
 8008d96:	0020      	movs	r0, r4
 8008d98:	f001 fd04 	bl	800a7a4 <_fflush_r>
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	46c0      	nop			@ (mov r8, r8)
 8008da0:	20000e60 	.word	0x20000e60
 8008da4:	20000ec8 	.word	0x20000ec8
 8008da8:	20000f30 	.word	0x20000f30

08008dac <global_stdio_init.part.0>:
 8008dac:	b510      	push	{r4, lr}
 8008dae:	4b09      	ldr	r3, [pc, #36]	@ (8008dd4 <global_stdio_init.part.0+0x28>)
 8008db0:	4a09      	ldr	r2, [pc, #36]	@ (8008dd8 <global_stdio_init.part.0+0x2c>)
 8008db2:	2104      	movs	r1, #4
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	4809      	ldr	r0, [pc, #36]	@ (8008ddc <global_stdio_init.part.0+0x30>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	f7ff ff95 	bl	8008ce8 <std>
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	2109      	movs	r1, #9
 8008dc2:	4807      	ldr	r0, [pc, #28]	@ (8008de0 <global_stdio_init.part.0+0x34>)
 8008dc4:	f7ff ff90 	bl	8008ce8 <std>
 8008dc8:	2202      	movs	r2, #2
 8008dca:	2112      	movs	r1, #18
 8008dcc:	4805      	ldr	r0, [pc, #20]	@ (8008de4 <global_stdio_init.part.0+0x38>)
 8008dce:	f7ff ff8b 	bl	8008ce8 <std>
 8008dd2:	bd10      	pop	{r4, pc}
 8008dd4:	20000f98 	.word	0x20000f98
 8008dd8:	08008d55 	.word	0x08008d55
 8008ddc:	20000e60 	.word	0x20000e60
 8008de0:	20000ec8 	.word	0x20000ec8
 8008de4:	20000f30 	.word	0x20000f30

08008de8 <__sfp_lock_acquire>:
 8008de8:	b510      	push	{r4, lr}
 8008dea:	4802      	ldr	r0, [pc, #8]	@ (8008df4 <__sfp_lock_acquire+0xc>)
 8008dec:	f000 f911 	bl	8009012 <__retarget_lock_acquire_recursive>
 8008df0:	bd10      	pop	{r4, pc}
 8008df2:	46c0      	nop			@ (mov r8, r8)
 8008df4:	20000fa1 	.word	0x20000fa1

08008df8 <__sfp_lock_release>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	4802      	ldr	r0, [pc, #8]	@ (8008e04 <__sfp_lock_release+0xc>)
 8008dfc:	f000 f90a 	bl	8009014 <__retarget_lock_release_recursive>
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	46c0      	nop			@ (mov r8, r8)
 8008e04:	20000fa1 	.word	0x20000fa1

08008e08 <__sinit>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	0004      	movs	r4, r0
 8008e0c:	f7ff ffec 	bl	8008de8 <__sfp_lock_acquire>
 8008e10:	6a23      	ldr	r3, [r4, #32]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <__sinit+0x14>
 8008e16:	f7ff ffef 	bl	8008df8 <__sfp_lock_release>
 8008e1a:	bd10      	pop	{r4, pc}
 8008e1c:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <__sinit+0x28>)
 8008e1e:	6223      	str	r3, [r4, #32]
 8008e20:	4b04      	ldr	r3, [pc, #16]	@ (8008e34 <__sinit+0x2c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1f6      	bne.n	8008e16 <__sinit+0xe>
 8008e28:	f7ff ffc0 	bl	8008dac <global_stdio_init.part.0>
 8008e2c:	e7f3      	b.n	8008e16 <__sinit+0xe>
 8008e2e:	46c0      	nop			@ (mov r8, r8)
 8008e30:	08008d71 	.word	0x08008d71
 8008e34:	20000f98 	.word	0x20000f98

08008e38 <_fwalk_sglue>:
 8008e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e3a:	0014      	movs	r4, r2
 8008e3c:	2600      	movs	r6, #0
 8008e3e:	9000      	str	r0, [sp, #0]
 8008e40:	9101      	str	r1, [sp, #4]
 8008e42:	68a5      	ldr	r5, [r4, #8]
 8008e44:	6867      	ldr	r7, [r4, #4]
 8008e46:	3f01      	subs	r7, #1
 8008e48:	d504      	bpl.n	8008e54 <_fwalk_sglue+0x1c>
 8008e4a:	6824      	ldr	r4, [r4, #0]
 8008e4c:	2c00      	cmp	r4, #0
 8008e4e:	d1f8      	bne.n	8008e42 <_fwalk_sglue+0xa>
 8008e50:	0030      	movs	r0, r6
 8008e52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e54:	89ab      	ldrh	r3, [r5, #12]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d908      	bls.n	8008e6c <_fwalk_sglue+0x34>
 8008e5a:	220e      	movs	r2, #14
 8008e5c:	5eab      	ldrsh	r3, [r5, r2]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	d004      	beq.n	8008e6c <_fwalk_sglue+0x34>
 8008e62:	0029      	movs	r1, r5
 8008e64:	9800      	ldr	r0, [sp, #0]
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	4798      	blx	r3
 8008e6a:	4306      	orrs	r6, r0
 8008e6c:	3568      	adds	r5, #104	@ 0x68
 8008e6e:	e7ea      	b.n	8008e46 <_fwalk_sglue+0xe>

08008e70 <__sread>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	000c      	movs	r4, r1
 8008e74:	250e      	movs	r5, #14
 8008e76:	5f49      	ldrsh	r1, [r1, r5]
 8008e78:	f000 f878 	bl	8008f6c <_read_r>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	db03      	blt.n	8008e88 <__sread+0x18>
 8008e80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008e82:	181b      	adds	r3, r3, r0
 8008e84:	6563      	str	r3, [r4, #84]	@ 0x54
 8008e86:	bd70      	pop	{r4, r5, r6, pc}
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	4a02      	ldr	r2, [pc, #8]	@ (8008e94 <__sread+0x24>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	e7f9      	b.n	8008e86 <__sread+0x16>
 8008e92:	46c0      	nop			@ (mov r8, r8)
 8008e94:	ffffefff 	.word	0xffffefff

08008e98 <__swrite>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	001f      	movs	r7, r3
 8008e9c:	898b      	ldrh	r3, [r1, #12]
 8008e9e:	0005      	movs	r5, r0
 8008ea0:	000c      	movs	r4, r1
 8008ea2:	0016      	movs	r6, r2
 8008ea4:	05db      	lsls	r3, r3, #23
 8008ea6:	d505      	bpl.n	8008eb4 <__swrite+0x1c>
 8008ea8:	230e      	movs	r3, #14
 8008eaa:	5ec9      	ldrsh	r1, [r1, r3]
 8008eac:	2200      	movs	r2, #0
 8008eae:	2302      	movs	r3, #2
 8008eb0:	f000 f848 	bl	8008f44 <_lseek_r>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	4a05      	ldr	r2, [pc, #20]	@ (8008ecc <__swrite+0x34>)
 8008eb8:	0028      	movs	r0, r5
 8008eba:	4013      	ands	r3, r2
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	0032      	movs	r2, r6
 8008ec0:	230e      	movs	r3, #14
 8008ec2:	5ee1      	ldrsh	r1, [r4, r3]
 8008ec4:	003b      	movs	r3, r7
 8008ec6:	f000 f865 	bl	8008f94 <_write_r>
 8008eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ecc:	ffffefff 	.word	0xffffefff

08008ed0 <__sseek>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	000c      	movs	r4, r1
 8008ed4:	250e      	movs	r5, #14
 8008ed6:	5f49      	ldrsh	r1, [r1, r5]
 8008ed8:	f000 f834 	bl	8008f44 <_lseek_r>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	1c42      	adds	r2, r0, #1
 8008ee0:	d103      	bne.n	8008eea <__sseek+0x1a>
 8008ee2:	4a05      	ldr	r2, [pc, #20]	@ (8008ef8 <__sseek+0x28>)
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	2280      	movs	r2, #128	@ 0x80
 8008eec:	0152      	lsls	r2, r2, #5
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	81a3      	strh	r3, [r4, #12]
 8008ef2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ef4:	e7f8      	b.n	8008ee8 <__sseek+0x18>
 8008ef6:	46c0      	nop			@ (mov r8, r8)
 8008ef8:	ffffefff 	.word	0xffffefff

08008efc <__sclose>:
 8008efc:	b510      	push	{r4, lr}
 8008efe:	230e      	movs	r3, #14
 8008f00:	5ec9      	ldrsh	r1, [r1, r3]
 8008f02:	f000 f80d 	bl	8008f20 <_close_r>
 8008f06:	bd10      	pop	{r4, pc}

08008f08 <memset>:
 8008f08:	0003      	movs	r3, r0
 8008f0a:	1882      	adds	r2, r0, r2
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d100      	bne.n	8008f12 <memset+0xa>
 8008f10:	4770      	bx	lr
 8008f12:	7019      	strb	r1, [r3, #0]
 8008f14:	3301      	adds	r3, #1
 8008f16:	e7f9      	b.n	8008f0c <memset+0x4>

08008f18 <_localeconv_r>:
 8008f18:	4800      	ldr	r0, [pc, #0]	@ (8008f1c <_localeconv_r+0x4>)
 8008f1a:	4770      	bx	lr
 8008f1c:	200001a4 	.word	0x200001a4

08008f20 <_close_r>:
 8008f20:	2300      	movs	r3, #0
 8008f22:	b570      	push	{r4, r5, r6, lr}
 8008f24:	4d06      	ldr	r5, [pc, #24]	@ (8008f40 <_close_r+0x20>)
 8008f26:	0004      	movs	r4, r0
 8008f28:	0008      	movs	r0, r1
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	f7fb f826 	bl	8003f7c <_close>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d103      	bne.n	8008f3c <_close_r+0x1c>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d000      	beq.n	8008f3c <_close_r+0x1c>
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	bd70      	pop	{r4, r5, r6, pc}
 8008f3e:	46c0      	nop			@ (mov r8, r8)
 8008f40:	20000f9c 	.word	0x20000f9c

08008f44 <_lseek_r>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	0004      	movs	r4, r0
 8008f48:	0008      	movs	r0, r1
 8008f4a:	0011      	movs	r1, r2
 8008f4c:	001a      	movs	r2, r3
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4d05      	ldr	r5, [pc, #20]	@ (8008f68 <_lseek_r+0x24>)
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	f7fb f833 	bl	8003fbe <_lseek>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d103      	bne.n	8008f64 <_lseek_r+0x20>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d000      	beq.n	8008f64 <_lseek_r+0x20>
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	bd70      	pop	{r4, r5, r6, pc}
 8008f66:	46c0      	nop			@ (mov r8, r8)
 8008f68:	20000f9c 	.word	0x20000f9c

08008f6c <_read_r>:
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	0004      	movs	r4, r0
 8008f70:	0008      	movs	r0, r1
 8008f72:	0011      	movs	r1, r2
 8008f74:	001a      	movs	r2, r3
 8008f76:	2300      	movs	r3, #0
 8008f78:	4d05      	ldr	r5, [pc, #20]	@ (8008f90 <_read_r+0x24>)
 8008f7a:	602b      	str	r3, [r5, #0]
 8008f7c:	f7fa ffc5 	bl	8003f0a <_read>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d103      	bne.n	8008f8c <_read_r+0x20>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d000      	beq.n	8008f8c <_read_r+0x20>
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	bd70      	pop	{r4, r5, r6, pc}
 8008f8e:	46c0      	nop			@ (mov r8, r8)
 8008f90:	20000f9c 	.word	0x20000f9c

08008f94 <_write_r>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	0004      	movs	r4, r0
 8008f98:	0008      	movs	r0, r1
 8008f9a:	0011      	movs	r1, r2
 8008f9c:	001a      	movs	r2, r3
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4d05      	ldr	r5, [pc, #20]	@ (8008fb8 <_write_r+0x24>)
 8008fa2:	602b      	str	r3, [r5, #0]
 8008fa4:	f7fa ffce 	bl	8003f44 <_write>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d103      	bne.n	8008fb4 <_write_r+0x20>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d000      	beq.n	8008fb4 <_write_r+0x20>
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	bd70      	pop	{r4, r5, r6, pc}
 8008fb6:	46c0      	nop			@ (mov r8, r8)
 8008fb8:	20000f9c 	.word	0x20000f9c

08008fbc <__errno>:
 8008fbc:	4b01      	ldr	r3, [pc, #4]	@ (8008fc4 <__errno+0x8>)
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	4770      	bx	lr
 8008fc2:	46c0      	nop			@ (mov r8, r8)
 8008fc4:	20000064 	.word	0x20000064

08008fc8 <__libc_init_array>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	2600      	movs	r6, #0
 8008fcc:	4c0c      	ldr	r4, [pc, #48]	@ (8009000 <__libc_init_array+0x38>)
 8008fce:	4d0d      	ldr	r5, [pc, #52]	@ (8009004 <__libc_init_array+0x3c>)
 8008fd0:	1b64      	subs	r4, r4, r5
 8008fd2:	10a4      	asrs	r4, r4, #2
 8008fd4:	42a6      	cmp	r6, r4
 8008fd6:	d109      	bne.n	8008fec <__libc_init_array+0x24>
 8008fd8:	2600      	movs	r6, #0
 8008fda:	f003 fddd 	bl	800cb98 <_init>
 8008fde:	4c0a      	ldr	r4, [pc, #40]	@ (8009008 <__libc_init_array+0x40>)
 8008fe0:	4d0a      	ldr	r5, [pc, #40]	@ (800900c <__libc_init_array+0x44>)
 8008fe2:	1b64      	subs	r4, r4, r5
 8008fe4:	10a4      	asrs	r4, r4, #2
 8008fe6:	42a6      	cmp	r6, r4
 8008fe8:	d105      	bne.n	8008ff6 <__libc_init_array+0x2e>
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	00b3      	lsls	r3, r6, #2
 8008fee:	58eb      	ldr	r3, [r5, r3]
 8008ff0:	4798      	blx	r3
 8008ff2:	3601      	adds	r6, #1
 8008ff4:	e7ee      	b.n	8008fd4 <__libc_init_array+0xc>
 8008ff6:	00b3      	lsls	r3, r6, #2
 8008ff8:	58eb      	ldr	r3, [r5, r3]
 8008ffa:	4798      	blx	r3
 8008ffc:	3601      	adds	r6, #1
 8008ffe:	e7f2      	b.n	8008fe6 <__libc_init_array+0x1e>
 8009000:	0800d378 	.word	0x0800d378
 8009004:	0800d378 	.word	0x0800d378
 8009008:	0800d37c 	.word	0x0800d37c
 800900c:	0800d378 	.word	0x0800d378

08009010 <__retarget_lock_init_recursive>:
 8009010:	4770      	bx	lr

08009012 <__retarget_lock_acquire_recursive>:
 8009012:	4770      	bx	lr

08009014 <__retarget_lock_release_recursive>:
 8009014:	4770      	bx	lr

08009016 <memchr>:
 8009016:	b2c9      	uxtb	r1, r1
 8009018:	1882      	adds	r2, r0, r2
 800901a:	4290      	cmp	r0, r2
 800901c:	d101      	bne.n	8009022 <memchr+0xc>
 800901e:	2000      	movs	r0, #0
 8009020:	4770      	bx	lr
 8009022:	7803      	ldrb	r3, [r0, #0]
 8009024:	428b      	cmp	r3, r1
 8009026:	d0fb      	beq.n	8009020 <memchr+0xa>
 8009028:	3001      	adds	r0, #1
 800902a:	e7f6      	b.n	800901a <memchr+0x4>

0800902c <memcpy>:
 800902c:	2300      	movs	r3, #0
 800902e:	b510      	push	{r4, lr}
 8009030:	429a      	cmp	r2, r3
 8009032:	d100      	bne.n	8009036 <memcpy+0xa>
 8009034:	bd10      	pop	{r4, pc}
 8009036:	5ccc      	ldrb	r4, [r1, r3]
 8009038:	54c4      	strb	r4, [r0, r3]
 800903a:	3301      	adds	r3, #1
 800903c:	e7f8      	b.n	8009030 <memcpy+0x4>

0800903e <quorem>:
 800903e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009040:	6902      	ldr	r2, [r0, #16]
 8009042:	690f      	ldr	r7, [r1, #16]
 8009044:	b087      	sub	sp, #28
 8009046:	0006      	movs	r6, r0
 8009048:	000b      	movs	r3, r1
 800904a:	2000      	movs	r0, #0
 800904c:	9102      	str	r1, [sp, #8]
 800904e:	42ba      	cmp	r2, r7
 8009050:	db6d      	blt.n	800912e <quorem+0xf0>
 8009052:	3f01      	subs	r7, #1
 8009054:	00bc      	lsls	r4, r7, #2
 8009056:	3314      	adds	r3, #20
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	191b      	adds	r3, r3, r4
 800905c:	9303      	str	r3, [sp, #12]
 800905e:	0033      	movs	r3, r6
 8009060:	3314      	adds	r3, #20
 8009062:	191c      	adds	r4, r3, r4
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	9304      	str	r3, [sp, #16]
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	9804      	ldr	r0, [sp, #16]
 800906e:	681d      	ldr	r5, [r3, #0]
 8009070:	3501      	adds	r5, #1
 8009072:	0029      	movs	r1, r5
 8009074:	f7f7 f860 	bl	8000138 <__udivsi3>
 8009078:	9b04      	ldr	r3, [sp, #16]
 800907a:	9000      	str	r0, [sp, #0]
 800907c:	42ab      	cmp	r3, r5
 800907e:	d32b      	bcc.n	80090d8 <quorem+0x9a>
 8009080:	9b05      	ldr	r3, [sp, #20]
 8009082:	9d01      	ldr	r5, [sp, #4]
 8009084:	469c      	mov	ip, r3
 8009086:	2300      	movs	r3, #0
 8009088:	9305      	str	r3, [sp, #20]
 800908a:	9304      	str	r3, [sp, #16]
 800908c:	4662      	mov	r2, ip
 800908e:	ca08      	ldmia	r2!, {r3}
 8009090:	6828      	ldr	r0, [r5, #0]
 8009092:	4694      	mov	ip, r2
 8009094:	9a00      	ldr	r2, [sp, #0]
 8009096:	b299      	uxth	r1, r3
 8009098:	4351      	muls	r1, r2
 800909a:	9a05      	ldr	r2, [sp, #20]
 800909c:	0c1b      	lsrs	r3, r3, #16
 800909e:	1889      	adds	r1, r1, r2
 80090a0:	9a00      	ldr	r2, [sp, #0]
 80090a2:	4353      	muls	r3, r2
 80090a4:	0c0a      	lsrs	r2, r1, #16
 80090a6:	189b      	adds	r3, r3, r2
 80090a8:	0c1a      	lsrs	r2, r3, #16
 80090aa:	b289      	uxth	r1, r1
 80090ac:	9205      	str	r2, [sp, #20]
 80090ae:	b282      	uxth	r2, r0
 80090b0:	1a52      	subs	r2, r2, r1
 80090b2:	9904      	ldr	r1, [sp, #16]
 80090b4:	0c00      	lsrs	r0, r0, #16
 80090b6:	1852      	adds	r2, r2, r1
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	1411      	asrs	r1, r2, #16
 80090bc:	1ac3      	subs	r3, r0, r3
 80090be:	185b      	adds	r3, r3, r1
 80090c0:	1419      	asrs	r1, r3, #16
 80090c2:	b292      	uxth	r2, r2
 80090c4:	041b      	lsls	r3, r3, #16
 80090c6:	431a      	orrs	r2, r3
 80090c8:	9b03      	ldr	r3, [sp, #12]
 80090ca:	9104      	str	r1, [sp, #16]
 80090cc:	c504      	stmia	r5!, {r2}
 80090ce:	4563      	cmp	r3, ip
 80090d0:	d2dc      	bcs.n	800908c <quorem+0x4e>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d030      	beq.n	800913a <quorem+0xfc>
 80090d8:	0030      	movs	r0, r6
 80090da:	9902      	ldr	r1, [sp, #8]
 80090dc:	f001 f9c6 	bl	800a46c <__mcmp>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	db23      	blt.n	800912c <quorem+0xee>
 80090e4:	0034      	movs	r4, r6
 80090e6:	2500      	movs	r5, #0
 80090e8:	9902      	ldr	r1, [sp, #8]
 80090ea:	3414      	adds	r4, #20
 80090ec:	3114      	adds	r1, #20
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	c901      	ldmia	r1!, {r0}
 80090f2:	9302      	str	r3, [sp, #8]
 80090f4:	466b      	mov	r3, sp
 80090f6:	891b      	ldrh	r3, [r3, #8]
 80090f8:	b282      	uxth	r2, r0
 80090fa:	1a9a      	subs	r2, r3, r2
 80090fc:	9b02      	ldr	r3, [sp, #8]
 80090fe:	1952      	adds	r2, r2, r5
 8009100:	0c00      	lsrs	r0, r0, #16
 8009102:	0c1b      	lsrs	r3, r3, #16
 8009104:	1a1b      	subs	r3, r3, r0
 8009106:	1410      	asrs	r0, r2, #16
 8009108:	181b      	adds	r3, r3, r0
 800910a:	141d      	asrs	r5, r3, #16
 800910c:	b292      	uxth	r2, r2
 800910e:	041b      	lsls	r3, r3, #16
 8009110:	431a      	orrs	r2, r3
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	c404      	stmia	r4!, {r2}
 8009116:	428b      	cmp	r3, r1
 8009118:	d2e9      	bcs.n	80090ee <quorem+0xb0>
 800911a:	9a01      	ldr	r2, [sp, #4]
 800911c:	00bb      	lsls	r3, r7, #2
 800911e:	18d3      	adds	r3, r2, r3
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	2a00      	cmp	r2, #0
 8009124:	d013      	beq.n	800914e <quorem+0x110>
 8009126:	9b00      	ldr	r3, [sp, #0]
 8009128:	3301      	adds	r3, #1
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	9800      	ldr	r0, [sp, #0]
 800912e:	b007      	add	sp, #28
 8009130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d104      	bne.n	8009142 <quorem+0x104>
 8009138:	3f01      	subs	r7, #1
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	3c04      	subs	r4, #4
 800913e:	42a3      	cmp	r3, r4
 8009140:	d3f7      	bcc.n	8009132 <quorem+0xf4>
 8009142:	6137      	str	r7, [r6, #16]
 8009144:	e7c8      	b.n	80090d8 <quorem+0x9a>
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	2a00      	cmp	r2, #0
 800914a:	d104      	bne.n	8009156 <quorem+0x118>
 800914c:	3f01      	subs	r7, #1
 800914e:	9a01      	ldr	r2, [sp, #4]
 8009150:	3b04      	subs	r3, #4
 8009152:	429a      	cmp	r2, r3
 8009154:	d3f7      	bcc.n	8009146 <quorem+0x108>
 8009156:	6137      	str	r7, [r6, #16]
 8009158:	e7e5      	b.n	8009126 <quorem+0xe8>
	...

0800915c <_dtoa_r>:
 800915c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800915e:	0014      	movs	r4, r2
 8009160:	001d      	movs	r5, r3
 8009162:	69c6      	ldr	r6, [r0, #28]
 8009164:	b09d      	sub	sp, #116	@ 0x74
 8009166:	940a      	str	r4, [sp, #40]	@ 0x28
 8009168:	950b      	str	r5, [sp, #44]	@ 0x2c
 800916a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800916c:	9003      	str	r0, [sp, #12]
 800916e:	2e00      	cmp	r6, #0
 8009170:	d10f      	bne.n	8009192 <_dtoa_r+0x36>
 8009172:	2010      	movs	r0, #16
 8009174:	f000 fe30 	bl	8009dd8 <malloc>
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	1e02      	subs	r2, r0, #0
 800917c:	61d8      	str	r0, [r3, #28]
 800917e:	d104      	bne.n	800918a <_dtoa_r+0x2e>
 8009180:	21ef      	movs	r1, #239	@ 0xef
 8009182:	4bc7      	ldr	r3, [pc, #796]	@ (80094a0 <_dtoa_r+0x344>)
 8009184:	48c7      	ldr	r0, [pc, #796]	@ (80094a4 <_dtoa_r+0x348>)
 8009186:	f001 fb4b 	bl	800a820 <__assert_func>
 800918a:	6046      	str	r6, [r0, #4]
 800918c:	6086      	str	r6, [r0, #8]
 800918e:	6006      	str	r6, [r0, #0]
 8009190:	60c6      	str	r6, [r0, #12]
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	6819      	ldr	r1, [r3, #0]
 8009198:	2900      	cmp	r1, #0
 800919a:	d00b      	beq.n	80091b4 <_dtoa_r+0x58>
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	2301      	movs	r3, #1
 80091a0:	4093      	lsls	r3, r2
 80091a2:	604a      	str	r2, [r1, #4]
 80091a4:	608b      	str	r3, [r1, #8]
 80091a6:	9803      	ldr	r0, [sp, #12]
 80091a8:	f000 ff16 	bl	8009fd8 <_Bfree>
 80091ac:	2200      	movs	r2, #0
 80091ae:	9b03      	ldr	r3, [sp, #12]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	da1e      	bge.n	80091f6 <_dtoa_r+0x9a>
 80091b8:	2301      	movs	r3, #1
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	006b      	lsls	r3, r5, #1
 80091be:	085b      	lsrs	r3, r3, #1
 80091c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091c2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80091c4:	4bb8      	ldr	r3, [pc, #736]	@ (80094a8 <_dtoa_r+0x34c>)
 80091c6:	4ab8      	ldr	r2, [pc, #736]	@ (80094a8 <_dtoa_r+0x34c>)
 80091c8:	403b      	ands	r3, r7
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d116      	bne.n	80091fc <_dtoa_r+0xa0>
 80091ce:	4bb7      	ldr	r3, [pc, #732]	@ (80094ac <_dtoa_r+0x350>)
 80091d0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	033b      	lsls	r3, r7, #12
 80091d6:	0b1b      	lsrs	r3, r3, #12
 80091d8:	4323      	orrs	r3, r4
 80091da:	d101      	bne.n	80091e0 <_dtoa_r+0x84>
 80091dc:	f000 fd83 	bl	8009ce6 <_dtoa_r+0xb8a>
 80091e0:	4bb3      	ldr	r3, [pc, #716]	@ (80094b0 <_dtoa_r+0x354>)
 80091e2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80091e4:	9308      	str	r3, [sp, #32]
 80091e6:	2a00      	cmp	r2, #0
 80091e8:	d002      	beq.n	80091f0 <_dtoa_r+0x94>
 80091ea:	4bb2      	ldr	r3, [pc, #712]	@ (80094b4 <_dtoa_r+0x358>)
 80091ec:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	9808      	ldr	r0, [sp, #32]
 80091f2:	b01d      	add	sp, #116	@ 0x74
 80091f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f6:	2300      	movs	r3, #0
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	e7e2      	b.n	80091c2 <_dtoa_r+0x66>
 80091fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009200:	9212      	str	r2, [sp, #72]	@ 0x48
 8009202:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009204:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009206:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009208:	2200      	movs	r2, #0
 800920a:	2300      	movs	r3, #0
 800920c:	f7f7 f91a 	bl	8000444 <__aeabi_dcmpeq>
 8009210:	1e06      	subs	r6, r0, #0
 8009212:	d00b      	beq.n	800922c <_dtoa_r+0xd0>
 8009214:	2301      	movs	r3, #1
 8009216:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <_dtoa_r+0xca>
 8009220:	4ba5      	ldr	r3, [pc, #660]	@ (80094b8 <_dtoa_r+0x35c>)
 8009222:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	4ba5      	ldr	r3, [pc, #660]	@ (80094bc <_dtoa_r+0x360>)
 8009228:	9308      	str	r3, [sp, #32]
 800922a:	e7e1      	b.n	80091f0 <_dtoa_r+0x94>
 800922c:	ab1a      	add	r3, sp, #104	@ 0x68
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	9803      	ldr	r0, [sp, #12]
 8009236:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009238:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800923a:	f001 f9cd 	bl	800a5d8 <__d2b>
 800923e:	007a      	lsls	r2, r7, #1
 8009240:	9005      	str	r0, [sp, #20]
 8009242:	0d52      	lsrs	r2, r2, #21
 8009244:	d100      	bne.n	8009248 <_dtoa_r+0xec>
 8009246:	e07b      	b.n	8009340 <_dtoa_r+0x1e4>
 8009248:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800924a:	9618      	str	r6, [sp, #96]	@ 0x60
 800924c:	0319      	lsls	r1, r3, #12
 800924e:	4b9c      	ldr	r3, [pc, #624]	@ (80094c0 <_dtoa_r+0x364>)
 8009250:	0b09      	lsrs	r1, r1, #12
 8009252:	430b      	orrs	r3, r1
 8009254:	499b      	ldr	r1, [pc, #620]	@ (80094c4 <_dtoa_r+0x368>)
 8009256:	1857      	adds	r7, r2, r1
 8009258:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800925a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800925c:	0019      	movs	r1, r3
 800925e:	2200      	movs	r2, #0
 8009260:	4b99      	ldr	r3, [pc, #612]	@ (80094c8 <_dtoa_r+0x36c>)
 8009262:	f7f8 fe87 	bl	8001f74 <__aeabi_dsub>
 8009266:	4a99      	ldr	r2, [pc, #612]	@ (80094cc <_dtoa_r+0x370>)
 8009268:	4b99      	ldr	r3, [pc, #612]	@ (80094d0 <_dtoa_r+0x374>)
 800926a:	f7f8 fbbb 	bl	80019e4 <__aeabi_dmul>
 800926e:	4a99      	ldr	r2, [pc, #612]	@ (80094d4 <_dtoa_r+0x378>)
 8009270:	4b99      	ldr	r3, [pc, #612]	@ (80094d8 <_dtoa_r+0x37c>)
 8009272:	f7f7 fc0f 	bl	8000a94 <__aeabi_dadd>
 8009276:	0004      	movs	r4, r0
 8009278:	0038      	movs	r0, r7
 800927a:	000d      	movs	r5, r1
 800927c:	f7f9 fa74 	bl	8002768 <__aeabi_i2d>
 8009280:	4a96      	ldr	r2, [pc, #600]	@ (80094dc <_dtoa_r+0x380>)
 8009282:	4b97      	ldr	r3, [pc, #604]	@ (80094e0 <_dtoa_r+0x384>)
 8009284:	f7f8 fbae 	bl	80019e4 <__aeabi_dmul>
 8009288:	0002      	movs	r2, r0
 800928a:	000b      	movs	r3, r1
 800928c:	0020      	movs	r0, r4
 800928e:	0029      	movs	r1, r5
 8009290:	f7f7 fc00 	bl	8000a94 <__aeabi_dadd>
 8009294:	0004      	movs	r4, r0
 8009296:	000d      	movs	r5, r1
 8009298:	f7f9 fa2a 	bl	80026f0 <__aeabi_d2iz>
 800929c:	2200      	movs	r2, #0
 800929e:	9004      	str	r0, [sp, #16]
 80092a0:	2300      	movs	r3, #0
 80092a2:	0020      	movs	r0, r4
 80092a4:	0029      	movs	r1, r5
 80092a6:	f7f7 f8d3 	bl	8000450 <__aeabi_dcmplt>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d00b      	beq.n	80092c6 <_dtoa_r+0x16a>
 80092ae:	9804      	ldr	r0, [sp, #16]
 80092b0:	f7f9 fa5a 	bl	8002768 <__aeabi_i2d>
 80092b4:	002b      	movs	r3, r5
 80092b6:	0022      	movs	r2, r4
 80092b8:	f7f7 f8c4 	bl	8000444 <__aeabi_dcmpeq>
 80092bc:	4243      	negs	r3, r0
 80092be:	4158      	adcs	r0, r3
 80092c0:	9b04      	ldr	r3, [sp, #16]
 80092c2:	1a1b      	subs	r3, r3, r0
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	2301      	movs	r3, #1
 80092c8:	9315      	str	r3, [sp, #84]	@ 0x54
 80092ca:	9b04      	ldr	r3, [sp, #16]
 80092cc:	2b16      	cmp	r3, #22
 80092ce:	d810      	bhi.n	80092f2 <_dtoa_r+0x196>
 80092d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80092d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80092d4:	9a04      	ldr	r2, [sp, #16]
 80092d6:	4b83      	ldr	r3, [pc, #524]	@ (80094e4 <_dtoa_r+0x388>)
 80092d8:	00d2      	lsls	r2, r2, #3
 80092da:	189b      	adds	r3, r3, r2
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f7f7 f8b6 	bl	8000450 <__aeabi_dcmplt>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d047      	beq.n	8009378 <_dtoa_r+0x21c>
 80092e8:	9b04      	ldr	r3, [sp, #16]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	9304      	str	r3, [sp, #16]
 80092ee:	2300      	movs	r3, #0
 80092f0:	9315      	str	r3, [sp, #84]	@ 0x54
 80092f2:	2200      	movs	r2, #0
 80092f4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80092f6:	9206      	str	r2, [sp, #24]
 80092f8:	1bdb      	subs	r3, r3, r7
 80092fa:	1e5a      	subs	r2, r3, #1
 80092fc:	d53e      	bpl.n	800937c <_dtoa_r+0x220>
 80092fe:	2201      	movs	r2, #1
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	9306      	str	r3, [sp, #24]
 8009304:	2300      	movs	r3, #0
 8009306:	930d      	str	r3, [sp, #52]	@ 0x34
 8009308:	9b04      	ldr	r3, [sp, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	db38      	blt.n	8009380 <_dtoa_r+0x224>
 800930e:	9a04      	ldr	r2, [sp, #16]
 8009310:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009312:	4694      	mov	ip, r2
 8009314:	4463      	add	r3, ip
 8009316:	930d      	str	r3, [sp, #52]	@ 0x34
 8009318:	2300      	movs	r3, #0
 800931a:	9214      	str	r2, [sp, #80]	@ 0x50
 800931c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800931e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009320:	2401      	movs	r4, #1
 8009322:	2b09      	cmp	r3, #9
 8009324:	d867      	bhi.n	80093f6 <_dtoa_r+0x29a>
 8009326:	2b05      	cmp	r3, #5
 8009328:	dd02      	ble.n	8009330 <_dtoa_r+0x1d4>
 800932a:	2400      	movs	r4, #0
 800932c:	3b04      	subs	r3, #4
 800932e:	9322      	str	r3, [sp, #136]	@ 0x88
 8009330:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009332:	1e98      	subs	r0, r3, #2
 8009334:	2803      	cmp	r0, #3
 8009336:	d867      	bhi.n	8009408 <_dtoa_r+0x2ac>
 8009338:	f7f6 feea 	bl	8000110 <__gnu_thumb1_case_uqi>
 800933c:	5b383a2b 	.word	0x5b383a2b
 8009340:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009342:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8009344:	18f6      	adds	r6, r6, r3
 8009346:	4b68      	ldr	r3, [pc, #416]	@ (80094e8 <_dtoa_r+0x38c>)
 8009348:	18f2      	adds	r2, r6, r3
 800934a:	2a20      	cmp	r2, #32
 800934c:	dd0f      	ble.n	800936e <_dtoa_r+0x212>
 800934e:	2340      	movs	r3, #64	@ 0x40
 8009350:	1a9b      	subs	r3, r3, r2
 8009352:	409f      	lsls	r7, r3
 8009354:	4b65      	ldr	r3, [pc, #404]	@ (80094ec <_dtoa_r+0x390>)
 8009356:	0038      	movs	r0, r7
 8009358:	18f3      	adds	r3, r6, r3
 800935a:	40dc      	lsrs	r4, r3
 800935c:	4320      	orrs	r0, r4
 800935e:	f7f9 fa31 	bl	80027c4 <__aeabi_ui2d>
 8009362:	2201      	movs	r2, #1
 8009364:	4b62      	ldr	r3, [pc, #392]	@ (80094f0 <_dtoa_r+0x394>)
 8009366:	1e77      	subs	r7, r6, #1
 8009368:	18cb      	adds	r3, r1, r3
 800936a:	9218      	str	r2, [sp, #96]	@ 0x60
 800936c:	e776      	b.n	800925c <_dtoa_r+0x100>
 800936e:	2320      	movs	r3, #32
 8009370:	0020      	movs	r0, r4
 8009372:	1a9b      	subs	r3, r3, r2
 8009374:	4098      	lsls	r0, r3
 8009376:	e7f2      	b.n	800935e <_dtoa_r+0x202>
 8009378:	9015      	str	r0, [sp, #84]	@ 0x54
 800937a:	e7ba      	b.n	80092f2 <_dtoa_r+0x196>
 800937c:	920d      	str	r2, [sp, #52]	@ 0x34
 800937e:	e7c3      	b.n	8009308 <_dtoa_r+0x1ac>
 8009380:	9b06      	ldr	r3, [sp, #24]
 8009382:	9a04      	ldr	r2, [sp, #16]
 8009384:	1a9b      	subs	r3, r3, r2
 8009386:	9306      	str	r3, [sp, #24]
 8009388:	4253      	negs	r3, r2
 800938a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800938c:	2300      	movs	r3, #0
 800938e:	9314      	str	r3, [sp, #80]	@ 0x50
 8009390:	e7c5      	b.n	800931e <_dtoa_r+0x1c2>
 8009392:	2300      	movs	r3, #0
 8009394:	9310      	str	r3, [sp, #64]	@ 0x40
 8009396:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009398:	930e      	str	r3, [sp, #56]	@ 0x38
 800939a:	9309      	str	r3, [sp, #36]	@ 0x24
 800939c:	2b00      	cmp	r3, #0
 800939e:	dc13      	bgt.n	80093c8 <_dtoa_r+0x26c>
 80093a0:	2301      	movs	r3, #1
 80093a2:	001a      	movs	r2, r3
 80093a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80093a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80093a8:	9223      	str	r2, [sp, #140]	@ 0x8c
 80093aa:	e00d      	b.n	80093c8 <_dtoa_r+0x26c>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e7f1      	b.n	8009394 <_dtoa_r+0x238>
 80093b0:	2300      	movs	r3, #0
 80093b2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80093b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80093b6:	4694      	mov	ip, r2
 80093b8:	9b04      	ldr	r3, [sp, #16]
 80093ba:	4463      	add	r3, ip
 80093bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80093be:	3301      	adds	r3, #1
 80093c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dc00      	bgt.n	80093c8 <_dtoa_r+0x26c>
 80093c6:	2301      	movs	r3, #1
 80093c8:	9a03      	ldr	r2, [sp, #12]
 80093ca:	2100      	movs	r1, #0
 80093cc:	69d0      	ldr	r0, [r2, #28]
 80093ce:	2204      	movs	r2, #4
 80093d0:	0015      	movs	r5, r2
 80093d2:	3514      	adds	r5, #20
 80093d4:	429d      	cmp	r5, r3
 80093d6:	d91b      	bls.n	8009410 <_dtoa_r+0x2b4>
 80093d8:	6041      	str	r1, [r0, #4]
 80093da:	9803      	ldr	r0, [sp, #12]
 80093dc:	f000 fdb8 	bl	8009f50 <_Balloc>
 80093e0:	9008      	str	r0, [sp, #32]
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d117      	bne.n	8009416 <_dtoa_r+0x2ba>
 80093e6:	21b0      	movs	r1, #176	@ 0xb0
 80093e8:	4b42      	ldr	r3, [pc, #264]	@ (80094f4 <_dtoa_r+0x398>)
 80093ea:	482e      	ldr	r0, [pc, #184]	@ (80094a4 <_dtoa_r+0x348>)
 80093ec:	9a08      	ldr	r2, [sp, #32]
 80093ee:	31ff      	adds	r1, #255	@ 0xff
 80093f0:	e6c9      	b.n	8009186 <_dtoa_r+0x2a>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e7dd      	b.n	80093b2 <_dtoa_r+0x256>
 80093f6:	2300      	movs	r3, #0
 80093f8:	9410      	str	r4, [sp, #64]	@ 0x40
 80093fa:	9322      	str	r3, [sp, #136]	@ 0x88
 80093fc:	3b01      	subs	r3, #1
 80093fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8009400:	9309      	str	r3, [sp, #36]	@ 0x24
 8009402:	2200      	movs	r2, #0
 8009404:	3313      	adds	r3, #19
 8009406:	e7cf      	b.n	80093a8 <_dtoa_r+0x24c>
 8009408:	2301      	movs	r3, #1
 800940a:	9310      	str	r3, [sp, #64]	@ 0x40
 800940c:	3b02      	subs	r3, #2
 800940e:	e7f6      	b.n	80093fe <_dtoa_r+0x2a2>
 8009410:	3101      	adds	r1, #1
 8009412:	0052      	lsls	r2, r2, #1
 8009414:	e7dc      	b.n	80093d0 <_dtoa_r+0x274>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	9a08      	ldr	r2, [sp, #32]
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009420:	2b0e      	cmp	r3, #14
 8009422:	d900      	bls.n	8009426 <_dtoa_r+0x2ca>
 8009424:	e0d9      	b.n	80095da <_dtoa_r+0x47e>
 8009426:	2c00      	cmp	r4, #0
 8009428:	d100      	bne.n	800942c <_dtoa_r+0x2d0>
 800942a:	e0d6      	b.n	80095da <_dtoa_r+0x47e>
 800942c:	9b04      	ldr	r3, [sp, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	dd64      	ble.n	80094fc <_dtoa_r+0x3a0>
 8009432:	210f      	movs	r1, #15
 8009434:	9a04      	ldr	r2, [sp, #16]
 8009436:	4b2b      	ldr	r3, [pc, #172]	@ (80094e4 <_dtoa_r+0x388>)
 8009438:	400a      	ands	r2, r1
 800943a:	00d2      	lsls	r2, r2, #3
 800943c:	189b      	adds	r3, r3, r2
 800943e:	681e      	ldr	r6, [r3, #0]
 8009440:	685f      	ldr	r7, [r3, #4]
 8009442:	9b04      	ldr	r3, [sp, #16]
 8009444:	2402      	movs	r4, #2
 8009446:	111d      	asrs	r5, r3, #4
 8009448:	05db      	lsls	r3, r3, #23
 800944a:	d50a      	bpl.n	8009462 <_dtoa_r+0x306>
 800944c:	4b2a      	ldr	r3, [pc, #168]	@ (80094f8 <_dtoa_r+0x39c>)
 800944e:	400d      	ands	r5, r1
 8009450:	6a1a      	ldr	r2, [r3, #32]
 8009452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009454:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009456:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009458:	f7f7 fe80 	bl	800115c <__aeabi_ddiv>
 800945c:	900a      	str	r0, [sp, #40]	@ 0x28
 800945e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009460:	3401      	adds	r4, #1
 8009462:	4b25      	ldr	r3, [pc, #148]	@ (80094f8 <_dtoa_r+0x39c>)
 8009464:	930c      	str	r3, [sp, #48]	@ 0x30
 8009466:	2d00      	cmp	r5, #0
 8009468:	d108      	bne.n	800947c <_dtoa_r+0x320>
 800946a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800946c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800946e:	0032      	movs	r2, r6
 8009470:	003b      	movs	r3, r7
 8009472:	f7f7 fe73 	bl	800115c <__aeabi_ddiv>
 8009476:	900a      	str	r0, [sp, #40]	@ 0x28
 8009478:	910b      	str	r1, [sp, #44]	@ 0x2c
 800947a:	e05a      	b.n	8009532 <_dtoa_r+0x3d6>
 800947c:	2301      	movs	r3, #1
 800947e:	421d      	tst	r5, r3
 8009480:	d009      	beq.n	8009496 <_dtoa_r+0x33a>
 8009482:	18e4      	adds	r4, r4, r3
 8009484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009486:	0030      	movs	r0, r6
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	0039      	movs	r1, r7
 800948e:	f7f8 faa9 	bl	80019e4 <__aeabi_dmul>
 8009492:	0006      	movs	r6, r0
 8009494:	000f      	movs	r7, r1
 8009496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009498:	106d      	asrs	r5, r5, #1
 800949a:	3308      	adds	r3, #8
 800949c:	e7e2      	b.n	8009464 <_dtoa_r+0x308>
 800949e:	46c0      	nop			@ (mov r8, r8)
 80094a0:	0800ce41 	.word	0x0800ce41
 80094a4:	0800ce58 	.word	0x0800ce58
 80094a8:	7ff00000 	.word	0x7ff00000
 80094ac:	0000270f 	.word	0x0000270f
 80094b0:	0800ce3d 	.word	0x0800ce3d
 80094b4:	0800ce40 	.word	0x0800ce40
 80094b8:	0800ce11 	.word	0x0800ce11
 80094bc:	0800ce10 	.word	0x0800ce10
 80094c0:	3ff00000 	.word	0x3ff00000
 80094c4:	fffffc01 	.word	0xfffffc01
 80094c8:	3ff80000 	.word	0x3ff80000
 80094cc:	636f4361 	.word	0x636f4361
 80094d0:	3fd287a7 	.word	0x3fd287a7
 80094d4:	8b60c8b3 	.word	0x8b60c8b3
 80094d8:	3fc68a28 	.word	0x3fc68a28
 80094dc:	509f79fb 	.word	0x509f79fb
 80094e0:	3fd34413 	.word	0x3fd34413
 80094e4:	0800cf50 	.word	0x0800cf50
 80094e8:	00000432 	.word	0x00000432
 80094ec:	00000412 	.word	0x00000412
 80094f0:	fe100000 	.word	0xfe100000
 80094f4:	0800ceb0 	.word	0x0800ceb0
 80094f8:	0800cf28 	.word	0x0800cf28
 80094fc:	9b04      	ldr	r3, [sp, #16]
 80094fe:	2402      	movs	r4, #2
 8009500:	2b00      	cmp	r3, #0
 8009502:	d016      	beq.n	8009532 <_dtoa_r+0x3d6>
 8009504:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009506:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009508:	220f      	movs	r2, #15
 800950a:	425d      	negs	r5, r3
 800950c:	402a      	ands	r2, r5
 800950e:	4bd7      	ldr	r3, [pc, #860]	@ (800986c <_dtoa_r+0x710>)
 8009510:	00d2      	lsls	r2, r2, #3
 8009512:	189b      	adds	r3, r3, r2
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f7f8 fa64 	bl	80019e4 <__aeabi_dmul>
 800951c:	2701      	movs	r7, #1
 800951e:	2300      	movs	r3, #0
 8009520:	900a      	str	r0, [sp, #40]	@ 0x28
 8009522:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009524:	4ed2      	ldr	r6, [pc, #840]	@ (8009870 <_dtoa_r+0x714>)
 8009526:	112d      	asrs	r5, r5, #4
 8009528:	2d00      	cmp	r5, #0
 800952a:	d000      	beq.n	800952e <_dtoa_r+0x3d2>
 800952c:	e0ba      	b.n	80096a4 <_dtoa_r+0x548>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1a1      	bne.n	8009476 <_dtoa_r+0x31a>
 8009532:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009534:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009536:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009538:	2b00      	cmp	r3, #0
 800953a:	d100      	bne.n	800953e <_dtoa_r+0x3e2>
 800953c:	e0bd      	b.n	80096ba <_dtoa_r+0x55e>
 800953e:	2200      	movs	r2, #0
 8009540:	0030      	movs	r0, r6
 8009542:	0039      	movs	r1, r7
 8009544:	4bcb      	ldr	r3, [pc, #812]	@ (8009874 <_dtoa_r+0x718>)
 8009546:	f7f6 ff83 	bl	8000450 <__aeabi_dcmplt>
 800954a:	2800      	cmp	r0, #0
 800954c:	d100      	bne.n	8009550 <_dtoa_r+0x3f4>
 800954e:	e0b4      	b.n	80096ba <_dtoa_r+0x55e>
 8009550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009552:	2b00      	cmp	r3, #0
 8009554:	d100      	bne.n	8009558 <_dtoa_r+0x3fc>
 8009556:	e0b0      	b.n	80096ba <_dtoa_r+0x55e>
 8009558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800955a:	2b00      	cmp	r3, #0
 800955c:	dd39      	ble.n	80095d2 <_dtoa_r+0x476>
 800955e:	9b04      	ldr	r3, [sp, #16]
 8009560:	2200      	movs	r2, #0
 8009562:	3b01      	subs	r3, #1
 8009564:	930c      	str	r3, [sp, #48]	@ 0x30
 8009566:	0030      	movs	r0, r6
 8009568:	4bc3      	ldr	r3, [pc, #780]	@ (8009878 <_dtoa_r+0x71c>)
 800956a:	0039      	movs	r1, r7
 800956c:	f7f8 fa3a 	bl	80019e4 <__aeabi_dmul>
 8009570:	900a      	str	r0, [sp, #40]	@ 0x28
 8009572:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009576:	3401      	adds	r4, #1
 8009578:	0020      	movs	r0, r4
 800957a:	9311      	str	r3, [sp, #68]	@ 0x44
 800957c:	f7f9 f8f4 	bl	8002768 <__aeabi_i2d>
 8009580:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009584:	f7f8 fa2e 	bl	80019e4 <__aeabi_dmul>
 8009588:	4bbc      	ldr	r3, [pc, #752]	@ (800987c <_dtoa_r+0x720>)
 800958a:	2200      	movs	r2, #0
 800958c:	f7f7 fa82 	bl	8000a94 <__aeabi_dadd>
 8009590:	4bbb      	ldr	r3, [pc, #748]	@ (8009880 <_dtoa_r+0x724>)
 8009592:	0006      	movs	r6, r0
 8009594:	18cf      	adds	r7, r1, r3
 8009596:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009598:	2b00      	cmp	r3, #0
 800959a:	d000      	beq.n	800959e <_dtoa_r+0x442>
 800959c:	e091      	b.n	80096c2 <_dtoa_r+0x566>
 800959e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095a2:	2200      	movs	r2, #0
 80095a4:	4bb7      	ldr	r3, [pc, #732]	@ (8009884 <_dtoa_r+0x728>)
 80095a6:	f7f8 fce5 	bl	8001f74 <__aeabi_dsub>
 80095aa:	0032      	movs	r2, r6
 80095ac:	003b      	movs	r3, r7
 80095ae:	0004      	movs	r4, r0
 80095b0:	000d      	movs	r5, r1
 80095b2:	f7f6 ff61 	bl	8000478 <__aeabi_dcmpgt>
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d000      	beq.n	80095bc <_dtoa_r+0x460>
 80095ba:	e29d      	b.n	8009af8 <_dtoa_r+0x99c>
 80095bc:	2180      	movs	r1, #128	@ 0x80
 80095be:	0609      	lsls	r1, r1, #24
 80095c0:	187b      	adds	r3, r7, r1
 80095c2:	0032      	movs	r2, r6
 80095c4:	0020      	movs	r0, r4
 80095c6:	0029      	movs	r1, r5
 80095c8:	f7f6 ff42 	bl	8000450 <__aeabi_dcmplt>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d000      	beq.n	80095d2 <_dtoa_r+0x476>
 80095d0:	e130      	b.n	8009834 <_dtoa_r+0x6d8>
 80095d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095d4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80095d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da00      	bge.n	80095e2 <_dtoa_r+0x486>
 80095e0:	e177      	b.n	80098d2 <_dtoa_r+0x776>
 80095e2:	9a04      	ldr	r2, [sp, #16]
 80095e4:	2a0e      	cmp	r2, #14
 80095e6:	dd00      	ble.n	80095ea <_dtoa_r+0x48e>
 80095e8:	e173      	b.n	80098d2 <_dtoa_r+0x776>
 80095ea:	4ba0      	ldr	r3, [pc, #640]	@ (800986c <_dtoa_r+0x710>)
 80095ec:	00d2      	lsls	r2, r2, #3
 80095ee:	189b      	adds	r3, r3, r2
 80095f0:	685c      	ldr	r4, [r3, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	9306      	str	r3, [sp, #24]
 80095f6:	9407      	str	r4, [sp, #28]
 80095f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da03      	bge.n	8009606 <_dtoa_r+0x4aa>
 80095fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009600:	2b00      	cmp	r3, #0
 8009602:	dc00      	bgt.n	8009606 <_dtoa_r+0x4aa>
 8009604:	e106      	b.n	8009814 <_dtoa_r+0x6b8>
 8009606:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009608:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800960a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800960c:	9d08      	ldr	r5, [sp, #32]
 800960e:	3b01      	subs	r3, #1
 8009610:	195b      	adds	r3, r3, r5
 8009612:	930a      	str	r3, [sp, #40]	@ 0x28
 8009614:	9a06      	ldr	r2, [sp, #24]
 8009616:	9b07      	ldr	r3, [sp, #28]
 8009618:	0030      	movs	r0, r6
 800961a:	0039      	movs	r1, r7
 800961c:	f7f7 fd9e 	bl	800115c <__aeabi_ddiv>
 8009620:	f7f9 f866 	bl	80026f0 <__aeabi_d2iz>
 8009624:	9009      	str	r0, [sp, #36]	@ 0x24
 8009626:	f7f9 f89f 	bl	8002768 <__aeabi_i2d>
 800962a:	9a06      	ldr	r2, [sp, #24]
 800962c:	9b07      	ldr	r3, [sp, #28]
 800962e:	f7f8 f9d9 	bl	80019e4 <__aeabi_dmul>
 8009632:	0002      	movs	r2, r0
 8009634:	000b      	movs	r3, r1
 8009636:	0030      	movs	r0, r6
 8009638:	0039      	movs	r1, r7
 800963a:	f7f8 fc9b 	bl	8001f74 <__aeabi_dsub>
 800963e:	002b      	movs	r3, r5
 8009640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009642:	3501      	adds	r5, #1
 8009644:	3230      	adds	r2, #48	@ 0x30
 8009646:	701a      	strb	r2, [r3, #0]
 8009648:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800964a:	002c      	movs	r4, r5
 800964c:	429a      	cmp	r2, r3
 800964e:	d000      	beq.n	8009652 <_dtoa_r+0x4f6>
 8009650:	e131      	b.n	80098b6 <_dtoa_r+0x75a>
 8009652:	0002      	movs	r2, r0
 8009654:	000b      	movs	r3, r1
 8009656:	f7f7 fa1d 	bl	8000a94 <__aeabi_dadd>
 800965a:	9a06      	ldr	r2, [sp, #24]
 800965c:	9b07      	ldr	r3, [sp, #28]
 800965e:	0006      	movs	r6, r0
 8009660:	000f      	movs	r7, r1
 8009662:	f7f6 ff09 	bl	8000478 <__aeabi_dcmpgt>
 8009666:	2800      	cmp	r0, #0
 8009668:	d000      	beq.n	800966c <_dtoa_r+0x510>
 800966a:	e10f      	b.n	800988c <_dtoa_r+0x730>
 800966c:	9a06      	ldr	r2, [sp, #24]
 800966e:	9b07      	ldr	r3, [sp, #28]
 8009670:	0030      	movs	r0, r6
 8009672:	0039      	movs	r1, r7
 8009674:	f7f6 fee6 	bl	8000444 <__aeabi_dcmpeq>
 8009678:	2800      	cmp	r0, #0
 800967a:	d003      	beq.n	8009684 <_dtoa_r+0x528>
 800967c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800967e:	07dd      	lsls	r5, r3, #31
 8009680:	d500      	bpl.n	8009684 <_dtoa_r+0x528>
 8009682:	e103      	b.n	800988c <_dtoa_r+0x730>
 8009684:	9905      	ldr	r1, [sp, #20]
 8009686:	9803      	ldr	r0, [sp, #12]
 8009688:	f000 fca6 	bl	8009fd8 <_Bfree>
 800968c:	2300      	movs	r3, #0
 800968e:	7023      	strb	r3, [r4, #0]
 8009690:	9b04      	ldr	r3, [sp, #16]
 8009692:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009694:	3301      	adds	r3, #1
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800969a:	2b00      	cmp	r3, #0
 800969c:	d100      	bne.n	80096a0 <_dtoa_r+0x544>
 800969e:	e5a7      	b.n	80091f0 <_dtoa_r+0x94>
 80096a0:	601c      	str	r4, [r3, #0]
 80096a2:	e5a5      	b.n	80091f0 <_dtoa_r+0x94>
 80096a4:	423d      	tst	r5, r7
 80096a6:	d005      	beq.n	80096b4 <_dtoa_r+0x558>
 80096a8:	6832      	ldr	r2, [r6, #0]
 80096aa:	6873      	ldr	r3, [r6, #4]
 80096ac:	f7f8 f99a 	bl	80019e4 <__aeabi_dmul>
 80096b0:	003b      	movs	r3, r7
 80096b2:	3401      	adds	r4, #1
 80096b4:	106d      	asrs	r5, r5, #1
 80096b6:	3608      	adds	r6, #8
 80096b8:	e736      	b.n	8009528 <_dtoa_r+0x3cc>
 80096ba:	9b04      	ldr	r3, [sp, #16]
 80096bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80096be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c0:	e75a      	b.n	8009578 <_dtoa_r+0x41c>
 80096c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80096c4:	4b69      	ldr	r3, [pc, #420]	@ (800986c <_dtoa_r+0x710>)
 80096c6:	3a01      	subs	r2, #1
 80096c8:	00d2      	lsls	r2, r2, #3
 80096ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80096cc:	189b      	adds	r3, r3, r2
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2900      	cmp	r1, #0
 80096d4:	d04c      	beq.n	8009770 <_dtoa_r+0x614>
 80096d6:	2000      	movs	r0, #0
 80096d8:	496b      	ldr	r1, [pc, #428]	@ (8009888 <_dtoa_r+0x72c>)
 80096da:	f7f7 fd3f 	bl	800115c <__aeabi_ddiv>
 80096de:	0032      	movs	r2, r6
 80096e0:	003b      	movs	r3, r7
 80096e2:	f7f8 fc47 	bl	8001f74 <__aeabi_dsub>
 80096e6:	9a08      	ldr	r2, [sp, #32]
 80096e8:	0006      	movs	r6, r0
 80096ea:	4694      	mov	ip, r2
 80096ec:	000f      	movs	r7, r1
 80096ee:	9b08      	ldr	r3, [sp, #32]
 80096f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80096f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096f4:	4463      	add	r3, ip
 80096f6:	9311      	str	r3, [sp, #68]	@ 0x44
 80096f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80096fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096fc:	f7f8 fff8 	bl	80026f0 <__aeabi_d2iz>
 8009700:	0005      	movs	r5, r0
 8009702:	f7f9 f831 	bl	8002768 <__aeabi_i2d>
 8009706:	0002      	movs	r2, r0
 8009708:	000b      	movs	r3, r1
 800970a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800970c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800970e:	f7f8 fc31 	bl	8001f74 <__aeabi_dsub>
 8009712:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009714:	3530      	adds	r5, #48	@ 0x30
 8009716:	1c5c      	adds	r4, r3, #1
 8009718:	701d      	strb	r5, [r3, #0]
 800971a:	0032      	movs	r2, r6
 800971c:	003b      	movs	r3, r7
 800971e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009720:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009722:	f7f6 fe95 	bl	8000450 <__aeabi_dcmplt>
 8009726:	2800      	cmp	r0, #0
 8009728:	d16a      	bne.n	8009800 <_dtoa_r+0x6a4>
 800972a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800972c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800972e:	2000      	movs	r0, #0
 8009730:	4950      	ldr	r1, [pc, #320]	@ (8009874 <_dtoa_r+0x718>)
 8009732:	f7f8 fc1f 	bl	8001f74 <__aeabi_dsub>
 8009736:	0032      	movs	r2, r6
 8009738:	003b      	movs	r3, r7
 800973a:	f7f6 fe89 	bl	8000450 <__aeabi_dcmplt>
 800973e:	2800      	cmp	r0, #0
 8009740:	d000      	beq.n	8009744 <_dtoa_r+0x5e8>
 8009742:	e0a5      	b.n	8009890 <_dtoa_r+0x734>
 8009744:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009746:	42a3      	cmp	r3, r4
 8009748:	d100      	bne.n	800974c <_dtoa_r+0x5f0>
 800974a:	e742      	b.n	80095d2 <_dtoa_r+0x476>
 800974c:	2200      	movs	r2, #0
 800974e:	0030      	movs	r0, r6
 8009750:	0039      	movs	r1, r7
 8009752:	4b49      	ldr	r3, [pc, #292]	@ (8009878 <_dtoa_r+0x71c>)
 8009754:	f7f8 f946 	bl	80019e4 <__aeabi_dmul>
 8009758:	2200      	movs	r2, #0
 800975a:	0006      	movs	r6, r0
 800975c:	000f      	movs	r7, r1
 800975e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009762:	4b45      	ldr	r3, [pc, #276]	@ (8009878 <_dtoa_r+0x71c>)
 8009764:	f7f8 f93e 	bl	80019e4 <__aeabi_dmul>
 8009768:	9416      	str	r4, [sp, #88]	@ 0x58
 800976a:	900a      	str	r0, [sp, #40]	@ 0x28
 800976c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800976e:	e7c3      	b.n	80096f8 <_dtoa_r+0x59c>
 8009770:	0030      	movs	r0, r6
 8009772:	0039      	movs	r1, r7
 8009774:	f7f8 f936 	bl	80019e4 <__aeabi_dmul>
 8009778:	9d08      	ldr	r5, [sp, #32]
 800977a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800977c:	002b      	movs	r3, r5
 800977e:	4694      	mov	ip, r2
 8009780:	9016      	str	r0, [sp, #88]	@ 0x58
 8009782:	9117      	str	r1, [sp, #92]	@ 0x5c
 8009784:	4463      	add	r3, ip
 8009786:	9319      	str	r3, [sp, #100]	@ 0x64
 8009788:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800978a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800978c:	f7f8 ffb0 	bl	80026f0 <__aeabi_d2iz>
 8009790:	0004      	movs	r4, r0
 8009792:	f7f8 ffe9 	bl	8002768 <__aeabi_i2d>
 8009796:	000b      	movs	r3, r1
 8009798:	0002      	movs	r2, r0
 800979a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800979c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800979e:	f7f8 fbe9 	bl	8001f74 <__aeabi_dsub>
 80097a2:	3430      	adds	r4, #48	@ 0x30
 80097a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097a6:	702c      	strb	r4, [r5, #0]
 80097a8:	3501      	adds	r5, #1
 80097aa:	0006      	movs	r6, r0
 80097ac:	000f      	movs	r7, r1
 80097ae:	42ab      	cmp	r3, r5
 80097b0:	d129      	bne.n	8009806 <_dtoa_r+0x6aa>
 80097b2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80097b4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80097b6:	9b08      	ldr	r3, [sp, #32]
 80097b8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80097ba:	469c      	mov	ip, r3
 80097bc:	2200      	movs	r2, #0
 80097be:	4b32      	ldr	r3, [pc, #200]	@ (8009888 <_dtoa_r+0x72c>)
 80097c0:	4464      	add	r4, ip
 80097c2:	f7f7 f967 	bl	8000a94 <__aeabi_dadd>
 80097c6:	0002      	movs	r2, r0
 80097c8:	000b      	movs	r3, r1
 80097ca:	0030      	movs	r0, r6
 80097cc:	0039      	movs	r1, r7
 80097ce:	f7f6 fe53 	bl	8000478 <__aeabi_dcmpgt>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d15c      	bne.n	8009890 <_dtoa_r+0x734>
 80097d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80097d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097da:	2000      	movs	r0, #0
 80097dc:	492a      	ldr	r1, [pc, #168]	@ (8009888 <_dtoa_r+0x72c>)
 80097de:	f7f8 fbc9 	bl	8001f74 <__aeabi_dsub>
 80097e2:	0002      	movs	r2, r0
 80097e4:	000b      	movs	r3, r1
 80097e6:	0030      	movs	r0, r6
 80097e8:	0039      	movs	r1, r7
 80097ea:	f7f6 fe31 	bl	8000450 <__aeabi_dcmplt>
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d100      	bne.n	80097f4 <_dtoa_r+0x698>
 80097f2:	e6ee      	b.n	80095d2 <_dtoa_r+0x476>
 80097f4:	0023      	movs	r3, r4
 80097f6:	3c01      	subs	r4, #1
 80097f8:	7822      	ldrb	r2, [r4, #0]
 80097fa:	2a30      	cmp	r2, #48	@ 0x30
 80097fc:	d0fa      	beq.n	80097f4 <_dtoa_r+0x698>
 80097fe:	001c      	movs	r4, r3
 8009800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	e73e      	b.n	8009684 <_dtoa_r+0x528>
 8009806:	2200      	movs	r2, #0
 8009808:	4b1b      	ldr	r3, [pc, #108]	@ (8009878 <_dtoa_r+0x71c>)
 800980a:	f7f8 f8eb 	bl	80019e4 <__aeabi_dmul>
 800980e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009810:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009812:	e7b9      	b.n	8009788 <_dtoa_r+0x62c>
 8009814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10c      	bne.n	8009834 <_dtoa_r+0x6d8>
 800981a:	9806      	ldr	r0, [sp, #24]
 800981c:	9907      	ldr	r1, [sp, #28]
 800981e:	2200      	movs	r2, #0
 8009820:	4b18      	ldr	r3, [pc, #96]	@ (8009884 <_dtoa_r+0x728>)
 8009822:	f7f8 f8df 	bl	80019e4 <__aeabi_dmul>
 8009826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009828:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800982a:	f7f6 fe2f 	bl	800048c <__aeabi_dcmpge>
 800982e:	2800      	cmp	r0, #0
 8009830:	d100      	bne.n	8009834 <_dtoa_r+0x6d8>
 8009832:	e164      	b.n	8009afe <_dtoa_r+0x9a2>
 8009834:	2600      	movs	r6, #0
 8009836:	0037      	movs	r7, r6
 8009838:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800983a:	9c08      	ldr	r4, [sp, #32]
 800983c:	43db      	mvns	r3, r3
 800983e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009840:	2300      	movs	r3, #0
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	0031      	movs	r1, r6
 8009846:	9803      	ldr	r0, [sp, #12]
 8009848:	f000 fbc6 	bl	8009fd8 <_Bfree>
 800984c:	2f00      	cmp	r7, #0
 800984e:	d0d7      	beq.n	8009800 <_dtoa_r+0x6a4>
 8009850:	9b04      	ldr	r3, [sp, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <_dtoa_r+0x706>
 8009856:	42bb      	cmp	r3, r7
 8009858:	d003      	beq.n	8009862 <_dtoa_r+0x706>
 800985a:	0019      	movs	r1, r3
 800985c:	9803      	ldr	r0, [sp, #12]
 800985e:	f000 fbbb 	bl	8009fd8 <_Bfree>
 8009862:	0039      	movs	r1, r7
 8009864:	9803      	ldr	r0, [sp, #12]
 8009866:	f000 fbb7 	bl	8009fd8 <_Bfree>
 800986a:	e7c9      	b.n	8009800 <_dtoa_r+0x6a4>
 800986c:	0800cf50 	.word	0x0800cf50
 8009870:	0800cf28 	.word	0x0800cf28
 8009874:	3ff00000 	.word	0x3ff00000
 8009878:	40240000 	.word	0x40240000
 800987c:	401c0000 	.word	0x401c0000
 8009880:	fcc00000 	.word	0xfcc00000
 8009884:	40140000 	.word	0x40140000
 8009888:	3fe00000 	.word	0x3fe00000
 800988c:	9b04      	ldr	r3, [sp, #16]
 800988e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009890:	0023      	movs	r3, r4
 8009892:	001c      	movs	r4, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	781a      	ldrb	r2, [r3, #0]
 8009898:	2a39      	cmp	r2, #57	@ 0x39
 800989a:	d108      	bne.n	80098ae <_dtoa_r+0x752>
 800989c:	9a08      	ldr	r2, [sp, #32]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d1f7      	bne.n	8009892 <_dtoa_r+0x736>
 80098a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098a4:	9908      	ldr	r1, [sp, #32]
 80098a6:	3201      	adds	r2, #1
 80098a8:	920c      	str	r2, [sp, #48]	@ 0x30
 80098aa:	2230      	movs	r2, #48	@ 0x30
 80098ac:	700a      	strb	r2, [r1, #0]
 80098ae:	781a      	ldrb	r2, [r3, #0]
 80098b0:	3201      	adds	r2, #1
 80098b2:	701a      	strb	r2, [r3, #0]
 80098b4:	e7a4      	b.n	8009800 <_dtoa_r+0x6a4>
 80098b6:	2200      	movs	r2, #0
 80098b8:	4bc6      	ldr	r3, [pc, #792]	@ (8009bd4 <_dtoa_r+0xa78>)
 80098ba:	f7f8 f893 	bl	80019e4 <__aeabi_dmul>
 80098be:	2200      	movs	r2, #0
 80098c0:	2300      	movs	r3, #0
 80098c2:	0006      	movs	r6, r0
 80098c4:	000f      	movs	r7, r1
 80098c6:	f7f6 fdbd 	bl	8000444 <__aeabi_dcmpeq>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d100      	bne.n	80098d0 <_dtoa_r+0x774>
 80098ce:	e6a1      	b.n	8009614 <_dtoa_r+0x4b8>
 80098d0:	e6d8      	b.n	8009684 <_dtoa_r+0x528>
 80098d2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80098d4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80098d6:	9c06      	ldr	r4, [sp, #24]
 80098d8:	2f00      	cmp	r7, #0
 80098da:	d014      	beq.n	8009906 <_dtoa_r+0x7aa>
 80098dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80098de:	2a01      	cmp	r2, #1
 80098e0:	dd00      	ble.n	80098e4 <_dtoa_r+0x788>
 80098e2:	e0c8      	b.n	8009a76 <_dtoa_r+0x91a>
 80098e4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80098e6:	2a00      	cmp	r2, #0
 80098e8:	d100      	bne.n	80098ec <_dtoa_r+0x790>
 80098ea:	e0be      	b.n	8009a6a <_dtoa_r+0x90e>
 80098ec:	4aba      	ldr	r2, [pc, #744]	@ (8009bd8 <_dtoa_r+0xa7c>)
 80098ee:	189b      	adds	r3, r3, r2
 80098f0:	9a06      	ldr	r2, [sp, #24]
 80098f2:	2101      	movs	r1, #1
 80098f4:	18d2      	adds	r2, r2, r3
 80098f6:	9206      	str	r2, [sp, #24]
 80098f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098fa:	9803      	ldr	r0, [sp, #12]
 80098fc:	18d3      	adds	r3, r2, r3
 80098fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009900:	f000 fc22 	bl	800a148 <__i2b>
 8009904:	0007      	movs	r7, r0
 8009906:	2c00      	cmp	r4, #0
 8009908:	d00e      	beq.n	8009928 <_dtoa_r+0x7cc>
 800990a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800990c:	2b00      	cmp	r3, #0
 800990e:	dd0b      	ble.n	8009928 <_dtoa_r+0x7cc>
 8009910:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009912:	0023      	movs	r3, r4
 8009914:	4294      	cmp	r4, r2
 8009916:	dd00      	ble.n	800991a <_dtoa_r+0x7be>
 8009918:	0013      	movs	r3, r2
 800991a:	9a06      	ldr	r2, [sp, #24]
 800991c:	1ae4      	subs	r4, r4, r3
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	9206      	str	r2, [sp, #24]
 8009922:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	930d      	str	r3, [sp, #52]	@ 0x34
 8009928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d01f      	beq.n	800996e <_dtoa_r+0x812>
 800992e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009930:	2b00      	cmp	r3, #0
 8009932:	d100      	bne.n	8009936 <_dtoa_r+0x7da>
 8009934:	e0b5      	b.n	8009aa2 <_dtoa_r+0x946>
 8009936:	2d00      	cmp	r5, #0
 8009938:	d010      	beq.n	800995c <_dtoa_r+0x800>
 800993a:	0039      	movs	r1, r7
 800993c:	002a      	movs	r2, r5
 800993e:	9803      	ldr	r0, [sp, #12]
 8009940:	f000 fccc 	bl	800a2dc <__pow5mult>
 8009944:	9a05      	ldr	r2, [sp, #20]
 8009946:	0001      	movs	r1, r0
 8009948:	0007      	movs	r7, r0
 800994a:	9803      	ldr	r0, [sp, #12]
 800994c:	f000 fc14 	bl	800a178 <__multiply>
 8009950:	0006      	movs	r6, r0
 8009952:	9905      	ldr	r1, [sp, #20]
 8009954:	9803      	ldr	r0, [sp, #12]
 8009956:	f000 fb3f 	bl	8009fd8 <_Bfree>
 800995a:	9605      	str	r6, [sp, #20]
 800995c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800995e:	1b5a      	subs	r2, r3, r5
 8009960:	42ab      	cmp	r3, r5
 8009962:	d004      	beq.n	800996e <_dtoa_r+0x812>
 8009964:	9905      	ldr	r1, [sp, #20]
 8009966:	9803      	ldr	r0, [sp, #12]
 8009968:	f000 fcb8 	bl	800a2dc <__pow5mult>
 800996c:	9005      	str	r0, [sp, #20]
 800996e:	2101      	movs	r1, #1
 8009970:	9803      	ldr	r0, [sp, #12]
 8009972:	f000 fbe9 	bl	800a148 <__i2b>
 8009976:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009978:	0006      	movs	r6, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d100      	bne.n	8009980 <_dtoa_r+0x824>
 800997e:	e1bc      	b.n	8009cfa <_dtoa_r+0xb9e>
 8009980:	001a      	movs	r2, r3
 8009982:	0001      	movs	r1, r0
 8009984:	9803      	ldr	r0, [sp, #12]
 8009986:	f000 fca9 	bl	800a2dc <__pow5mult>
 800998a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800998c:	0006      	movs	r6, r0
 800998e:	2500      	movs	r5, #0
 8009990:	2b01      	cmp	r3, #1
 8009992:	dc16      	bgt.n	80099c2 <_dtoa_r+0x866>
 8009994:	2500      	movs	r5, #0
 8009996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009998:	42ab      	cmp	r3, r5
 800999a:	d10e      	bne.n	80099ba <_dtoa_r+0x85e>
 800999c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800999e:	031b      	lsls	r3, r3, #12
 80099a0:	42ab      	cmp	r3, r5
 80099a2:	d10a      	bne.n	80099ba <_dtoa_r+0x85e>
 80099a4:	4b8d      	ldr	r3, [pc, #564]	@ (8009bdc <_dtoa_r+0xa80>)
 80099a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80099a8:	4213      	tst	r3, r2
 80099aa:	d006      	beq.n	80099ba <_dtoa_r+0x85e>
 80099ac:	9b06      	ldr	r3, [sp, #24]
 80099ae:	3501      	adds	r5, #1
 80099b0:	3301      	adds	r3, #1
 80099b2:	9306      	str	r3, [sp, #24]
 80099b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099b6:	3301      	adds	r3, #1
 80099b8:	930d      	str	r3, [sp, #52]	@ 0x34
 80099ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099bc:	2001      	movs	r0, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d008      	beq.n	80099d4 <_dtoa_r+0x878>
 80099c2:	6933      	ldr	r3, [r6, #16]
 80099c4:	3303      	adds	r3, #3
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	18f3      	adds	r3, r6, r3
 80099ca:	6858      	ldr	r0, [r3, #4]
 80099cc:	f000 fb6c 	bl	800a0a8 <__hi0bits>
 80099d0:	2320      	movs	r3, #32
 80099d2:	1a18      	subs	r0, r3, r0
 80099d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099d6:	1818      	adds	r0, r3, r0
 80099d8:	0002      	movs	r2, r0
 80099da:	231f      	movs	r3, #31
 80099dc:	401a      	ands	r2, r3
 80099de:	4218      	tst	r0, r3
 80099e0:	d065      	beq.n	8009aae <_dtoa_r+0x952>
 80099e2:	3301      	adds	r3, #1
 80099e4:	1a9b      	subs	r3, r3, r2
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	dd5d      	ble.n	8009aa6 <_dtoa_r+0x94a>
 80099ea:	231c      	movs	r3, #28
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	9a06      	ldr	r2, [sp, #24]
 80099f0:	18e4      	adds	r4, r4, r3
 80099f2:	18d2      	adds	r2, r2, r3
 80099f4:	9206      	str	r2, [sp, #24]
 80099f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099f8:	18d3      	adds	r3, r2, r3
 80099fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80099fc:	9b06      	ldr	r3, [sp, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	dd05      	ble.n	8009a0e <_dtoa_r+0x8b2>
 8009a02:	001a      	movs	r2, r3
 8009a04:	9905      	ldr	r1, [sp, #20]
 8009a06:	9803      	ldr	r0, [sp, #12]
 8009a08:	f000 fcc4 	bl	800a394 <__lshift>
 8009a0c:	9005      	str	r0, [sp, #20]
 8009a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dd05      	ble.n	8009a20 <_dtoa_r+0x8c4>
 8009a14:	0031      	movs	r1, r6
 8009a16:	001a      	movs	r2, r3
 8009a18:	9803      	ldr	r0, [sp, #12]
 8009a1a:	f000 fcbb 	bl	800a394 <__lshift>
 8009a1e:	0006      	movs	r6, r0
 8009a20:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d045      	beq.n	8009ab2 <_dtoa_r+0x956>
 8009a26:	0031      	movs	r1, r6
 8009a28:	9805      	ldr	r0, [sp, #20]
 8009a2a:	f000 fd1f 	bl	800a46c <__mcmp>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	da3f      	bge.n	8009ab2 <_dtoa_r+0x956>
 8009a32:	9b04      	ldr	r3, [sp, #16]
 8009a34:	220a      	movs	r2, #10
 8009a36:	3b01      	subs	r3, #1
 8009a38:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a3a:	9905      	ldr	r1, [sp, #20]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9803      	ldr	r0, [sp, #12]
 8009a40:	f000 faee 	bl	800a020 <__multadd>
 8009a44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a46:	9005      	str	r0, [sp, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d100      	bne.n	8009a4e <_dtoa_r+0x8f2>
 8009a4c:	e15c      	b.n	8009d08 <_dtoa_r+0xbac>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	0039      	movs	r1, r7
 8009a52:	220a      	movs	r2, #10
 8009a54:	9803      	ldr	r0, [sp, #12]
 8009a56:	f000 fae3 	bl	800a020 <__multadd>
 8009a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a5c:	0007      	movs	r7, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dc55      	bgt.n	8009b0e <_dtoa_r+0x9b2>
 8009a62:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	dc2d      	bgt.n	8009ac4 <_dtoa_r+0x968>
 8009a68:	e051      	b.n	8009b0e <_dtoa_r+0x9b2>
 8009a6a:	2336      	movs	r3, #54	@ 0x36
 8009a6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a6e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009a70:	9c06      	ldr	r4, [sp, #24]
 8009a72:	1a9b      	subs	r3, r3, r2
 8009a74:	e73c      	b.n	80098f0 <_dtoa_r+0x794>
 8009a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a78:	1e5d      	subs	r5, r3, #1
 8009a7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a7c:	42ab      	cmp	r3, r5
 8009a7e:	db08      	blt.n	8009a92 <_dtoa_r+0x936>
 8009a80:	1b5d      	subs	r5, r3, r5
 8009a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a84:	9c06      	ldr	r4, [sp, #24]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	db00      	blt.n	8009a8c <_dtoa_r+0x930>
 8009a8a:	e731      	b.n	80098f0 <_dtoa_r+0x794>
 8009a8c:	1ae4      	subs	r4, r4, r3
 8009a8e:	2300      	movs	r3, #0
 8009a90:	e72e      	b.n	80098f0 <_dtoa_r+0x794>
 8009a92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a94:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a96:	1aeb      	subs	r3, r5, r3
 8009a98:	18d3      	adds	r3, r2, r3
 8009a9a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009a9c:	9314      	str	r3, [sp, #80]	@ 0x50
 8009a9e:	2500      	movs	r5, #0
 8009aa0:	e7ef      	b.n	8009a82 <_dtoa_r+0x926>
 8009aa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009aa4:	e75e      	b.n	8009964 <_dtoa_r+0x808>
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d0a8      	beq.n	80099fc <_dtoa_r+0x8a0>
 8009aaa:	331c      	adds	r3, #28
 8009aac:	e79f      	b.n	80099ee <_dtoa_r+0x892>
 8009aae:	0013      	movs	r3, r2
 8009ab0:	e7fb      	b.n	8009aaa <_dtoa_r+0x94e>
 8009ab2:	9b04      	ldr	r3, [sp, #16]
 8009ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab8:	930e      	str	r3, [sp, #56]	@ 0x38
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	dc23      	bgt.n	8009b06 <_dtoa_r+0x9aa>
 8009abe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	dd20      	ble.n	8009b06 <_dtoa_r+0x9aa>
 8009ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d000      	beq.n	8009acc <_dtoa_r+0x970>
 8009aca:	e6b5      	b.n	8009838 <_dtoa_r+0x6dc>
 8009acc:	0031      	movs	r1, r6
 8009ace:	2205      	movs	r2, #5
 8009ad0:	9803      	ldr	r0, [sp, #12]
 8009ad2:	f000 faa5 	bl	800a020 <__multadd>
 8009ad6:	0006      	movs	r6, r0
 8009ad8:	0001      	movs	r1, r0
 8009ada:	9805      	ldr	r0, [sp, #20]
 8009adc:	f000 fcc6 	bl	800a46c <__mcmp>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	dc00      	bgt.n	8009ae6 <_dtoa_r+0x98a>
 8009ae4:	e6a8      	b.n	8009838 <_dtoa_r+0x6dc>
 8009ae6:	9b08      	ldr	r3, [sp, #32]
 8009ae8:	9a08      	ldr	r2, [sp, #32]
 8009aea:	1c5c      	adds	r4, r3, #1
 8009aec:	2331      	movs	r3, #49	@ 0x31
 8009aee:	7013      	strb	r3, [r2, #0]
 8009af0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009af2:	3301      	adds	r3, #1
 8009af4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009af6:	e6a3      	b.n	8009840 <_dtoa_r+0x6e4>
 8009af8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009afa:	0037      	movs	r7, r6
 8009afc:	e7f3      	b.n	8009ae6 <_dtoa_r+0x98a>
 8009afe:	9b04      	ldr	r3, [sp, #16]
 8009b00:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009b02:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b04:	e7f9      	b.n	8009afa <_dtoa_r+0x99e>
 8009b06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d100      	bne.n	8009b0e <_dtoa_r+0x9b2>
 8009b0c:	e100      	b.n	8009d10 <_dtoa_r+0xbb4>
 8009b0e:	2c00      	cmp	r4, #0
 8009b10:	dd05      	ble.n	8009b1e <_dtoa_r+0x9c2>
 8009b12:	0039      	movs	r1, r7
 8009b14:	0022      	movs	r2, r4
 8009b16:	9803      	ldr	r0, [sp, #12]
 8009b18:	f000 fc3c 	bl	800a394 <__lshift>
 8009b1c:	0007      	movs	r7, r0
 8009b1e:	0038      	movs	r0, r7
 8009b20:	2d00      	cmp	r5, #0
 8009b22:	d018      	beq.n	8009b56 <_dtoa_r+0x9fa>
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	9803      	ldr	r0, [sp, #12]
 8009b28:	f000 fa12 	bl	8009f50 <_Balloc>
 8009b2c:	1e04      	subs	r4, r0, #0
 8009b2e:	d105      	bne.n	8009b3c <_dtoa_r+0x9e0>
 8009b30:	0022      	movs	r2, r4
 8009b32:	4b2b      	ldr	r3, [pc, #172]	@ (8009be0 <_dtoa_r+0xa84>)
 8009b34:	482b      	ldr	r0, [pc, #172]	@ (8009be4 <_dtoa_r+0xa88>)
 8009b36:	492c      	ldr	r1, [pc, #176]	@ (8009be8 <_dtoa_r+0xa8c>)
 8009b38:	f7ff fb25 	bl	8009186 <_dtoa_r+0x2a>
 8009b3c:	0039      	movs	r1, r7
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	310c      	adds	r1, #12
 8009b42:	3202      	adds	r2, #2
 8009b44:	0092      	lsls	r2, r2, #2
 8009b46:	300c      	adds	r0, #12
 8009b48:	f7ff fa70 	bl	800902c <memcpy>
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	0021      	movs	r1, r4
 8009b50:	9803      	ldr	r0, [sp, #12]
 8009b52:	f000 fc1f 	bl	800a394 <__lshift>
 8009b56:	9b08      	ldr	r3, [sp, #32]
 8009b58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b5a:	9306      	str	r3, [sp, #24]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	189b      	adds	r3, r3, r2
 8009b60:	2201      	movs	r2, #1
 8009b62:	9704      	str	r7, [sp, #16]
 8009b64:	0007      	movs	r7, r0
 8009b66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b6e:	0031      	movs	r1, r6
 8009b70:	9805      	ldr	r0, [sp, #20]
 8009b72:	f7ff fa64 	bl	800903e <quorem>
 8009b76:	9904      	ldr	r1, [sp, #16]
 8009b78:	0005      	movs	r5, r0
 8009b7a:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b7c:	9805      	ldr	r0, [sp, #20]
 8009b7e:	f000 fc75 	bl	800a46c <__mcmp>
 8009b82:	003a      	movs	r2, r7
 8009b84:	900d      	str	r0, [sp, #52]	@ 0x34
 8009b86:	0031      	movs	r1, r6
 8009b88:	9803      	ldr	r0, [sp, #12]
 8009b8a:	f000 fc8b 	bl	800a4a4 <__mdiff>
 8009b8e:	2201      	movs	r2, #1
 8009b90:	68c3      	ldr	r3, [r0, #12]
 8009b92:	0004      	movs	r4, r0
 8009b94:	3530      	adds	r5, #48	@ 0x30
 8009b96:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <_dtoa_r+0xa4a>
 8009b9c:	0001      	movs	r1, r0
 8009b9e:	9805      	ldr	r0, [sp, #20]
 8009ba0:	f000 fc64 	bl	800a46c <__mcmp>
 8009ba4:	9009      	str	r0, [sp, #36]	@ 0x24
 8009ba6:	0021      	movs	r1, r4
 8009ba8:	9803      	ldr	r0, [sp, #12]
 8009baa:	f000 fa15 	bl	8009fd8 <_Bfree>
 8009bae:	9b06      	ldr	r3, [sp, #24]
 8009bb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb2:	1c5c      	adds	r4, r3, #1
 8009bb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	d116      	bne.n	8009bec <_dtoa_r+0xa90>
 8009bbe:	2d39      	cmp	r5, #57	@ 0x39
 8009bc0:	d02f      	beq.n	8009c22 <_dtoa_r+0xac6>
 8009bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	dd01      	ble.n	8009bcc <_dtoa_r+0xa70>
 8009bc8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009bca:	3531      	adds	r5, #49	@ 0x31
 8009bcc:	9b06      	ldr	r3, [sp, #24]
 8009bce:	701d      	strb	r5, [r3, #0]
 8009bd0:	e638      	b.n	8009844 <_dtoa_r+0x6e8>
 8009bd2:	46c0      	nop			@ (mov r8, r8)
 8009bd4:	40240000 	.word	0x40240000
 8009bd8:	00000433 	.word	0x00000433
 8009bdc:	7ff00000 	.word	0x7ff00000
 8009be0:	0800ceb0 	.word	0x0800ceb0
 8009be4:	0800ce58 	.word	0x0800ce58
 8009be8:	000002ef 	.word	0x000002ef
 8009bec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	db04      	blt.n	8009bfc <_dtoa_r+0xaa0>
 8009bf2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	d11e      	bne.n	8009c3a <_dtoa_r+0xade>
 8009bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	dde4      	ble.n	8009bcc <_dtoa_r+0xa70>
 8009c02:	9905      	ldr	r1, [sp, #20]
 8009c04:	2201      	movs	r2, #1
 8009c06:	9803      	ldr	r0, [sp, #12]
 8009c08:	f000 fbc4 	bl	800a394 <__lshift>
 8009c0c:	0031      	movs	r1, r6
 8009c0e:	9005      	str	r0, [sp, #20]
 8009c10:	f000 fc2c 	bl	800a46c <__mcmp>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	dc02      	bgt.n	8009c1e <_dtoa_r+0xac2>
 8009c18:	d1d8      	bne.n	8009bcc <_dtoa_r+0xa70>
 8009c1a:	07eb      	lsls	r3, r5, #31
 8009c1c:	d5d6      	bpl.n	8009bcc <_dtoa_r+0xa70>
 8009c1e:	2d39      	cmp	r5, #57	@ 0x39
 8009c20:	d1d2      	bne.n	8009bc8 <_dtoa_r+0xa6c>
 8009c22:	2339      	movs	r3, #57	@ 0x39
 8009c24:	9a06      	ldr	r2, [sp, #24]
 8009c26:	7013      	strb	r3, [r2, #0]
 8009c28:	0023      	movs	r3, r4
 8009c2a:	001c      	movs	r4, r3
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	781a      	ldrb	r2, [r3, #0]
 8009c30:	2a39      	cmp	r2, #57	@ 0x39
 8009c32:	d04f      	beq.n	8009cd4 <_dtoa_r+0xb78>
 8009c34:	3201      	adds	r2, #1
 8009c36:	701a      	strb	r2, [r3, #0]
 8009c38:	e604      	b.n	8009844 <_dtoa_r+0x6e8>
 8009c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dd03      	ble.n	8009c48 <_dtoa_r+0xaec>
 8009c40:	2d39      	cmp	r5, #57	@ 0x39
 8009c42:	d0ee      	beq.n	8009c22 <_dtoa_r+0xac6>
 8009c44:	3501      	adds	r5, #1
 8009c46:	e7c1      	b.n	8009bcc <_dtoa_r+0xa70>
 8009c48:	9b06      	ldr	r3, [sp, #24]
 8009c4a:	9a06      	ldr	r2, [sp, #24]
 8009c4c:	701d      	strb	r5, [r3, #0]
 8009c4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d02a      	beq.n	8009caa <_dtoa_r+0xb4e>
 8009c54:	2300      	movs	r3, #0
 8009c56:	220a      	movs	r2, #10
 8009c58:	9905      	ldr	r1, [sp, #20]
 8009c5a:	9803      	ldr	r0, [sp, #12]
 8009c5c:	f000 f9e0 	bl	800a020 <__multadd>
 8009c60:	9b04      	ldr	r3, [sp, #16]
 8009c62:	9005      	str	r0, [sp, #20]
 8009c64:	42bb      	cmp	r3, r7
 8009c66:	d109      	bne.n	8009c7c <_dtoa_r+0xb20>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	220a      	movs	r2, #10
 8009c6c:	9904      	ldr	r1, [sp, #16]
 8009c6e:	9803      	ldr	r0, [sp, #12]
 8009c70:	f000 f9d6 	bl	800a020 <__multadd>
 8009c74:	9004      	str	r0, [sp, #16]
 8009c76:	0007      	movs	r7, r0
 8009c78:	9406      	str	r4, [sp, #24]
 8009c7a:	e778      	b.n	8009b6e <_dtoa_r+0xa12>
 8009c7c:	9904      	ldr	r1, [sp, #16]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	220a      	movs	r2, #10
 8009c82:	9803      	ldr	r0, [sp, #12]
 8009c84:	f000 f9cc 	bl	800a020 <__multadd>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9004      	str	r0, [sp, #16]
 8009c8c:	220a      	movs	r2, #10
 8009c8e:	0039      	movs	r1, r7
 8009c90:	9803      	ldr	r0, [sp, #12]
 8009c92:	f000 f9c5 	bl	800a020 <__multadd>
 8009c96:	e7ee      	b.n	8009c76 <_dtoa_r+0xb1a>
 8009c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c9a:	2401      	movs	r4, #1
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dd00      	ble.n	8009ca2 <_dtoa_r+0xb46>
 8009ca0:	001c      	movs	r4, r3
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	191c      	adds	r4, r3, r4
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9304      	str	r3, [sp, #16]
 8009caa:	9905      	ldr	r1, [sp, #20]
 8009cac:	2201      	movs	r2, #1
 8009cae:	9803      	ldr	r0, [sp, #12]
 8009cb0:	f000 fb70 	bl	800a394 <__lshift>
 8009cb4:	0031      	movs	r1, r6
 8009cb6:	9005      	str	r0, [sp, #20]
 8009cb8:	f000 fbd8 	bl	800a46c <__mcmp>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	dcb3      	bgt.n	8009c28 <_dtoa_r+0xacc>
 8009cc0:	d101      	bne.n	8009cc6 <_dtoa_r+0xb6a>
 8009cc2:	07ed      	lsls	r5, r5, #31
 8009cc4:	d4b0      	bmi.n	8009c28 <_dtoa_r+0xacc>
 8009cc6:	0023      	movs	r3, r4
 8009cc8:	001c      	movs	r4, r3
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	781a      	ldrb	r2, [r3, #0]
 8009cce:	2a30      	cmp	r2, #48	@ 0x30
 8009cd0:	d0fa      	beq.n	8009cc8 <_dtoa_r+0xb6c>
 8009cd2:	e5b7      	b.n	8009844 <_dtoa_r+0x6e8>
 8009cd4:	9a08      	ldr	r2, [sp, #32]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d1a7      	bne.n	8009c2a <_dtoa_r+0xace>
 8009cda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cdc:	3301      	adds	r3, #1
 8009cde:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ce0:	2331      	movs	r3, #49	@ 0x31
 8009ce2:	7013      	strb	r3, [r2, #0]
 8009ce4:	e5ae      	b.n	8009844 <_dtoa_r+0x6e8>
 8009ce6:	4b15      	ldr	r3, [pc, #84]	@ (8009d3c <_dtoa_r+0xbe0>)
 8009ce8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009cea:	9308      	str	r3, [sp, #32]
 8009cec:	4b14      	ldr	r3, [pc, #80]	@ (8009d40 <_dtoa_r+0xbe4>)
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	d001      	beq.n	8009cf6 <_dtoa_r+0xb9a>
 8009cf2:	f7ff fa7b 	bl	80091ec <_dtoa_r+0x90>
 8009cf6:	f7ff fa7b 	bl	80091f0 <_dtoa_r+0x94>
 8009cfa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	dc00      	bgt.n	8009d02 <_dtoa_r+0xba6>
 8009d00:	e648      	b.n	8009994 <_dtoa_r+0x838>
 8009d02:	2001      	movs	r0, #1
 8009d04:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009d06:	e665      	b.n	80099d4 <_dtoa_r+0x878>
 8009d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dc00      	bgt.n	8009d10 <_dtoa_r+0xbb4>
 8009d0e:	e6d6      	b.n	8009abe <_dtoa_r+0x962>
 8009d10:	2400      	movs	r4, #0
 8009d12:	0031      	movs	r1, r6
 8009d14:	9805      	ldr	r0, [sp, #20]
 8009d16:	f7ff f992 	bl	800903e <quorem>
 8009d1a:	9b08      	ldr	r3, [sp, #32]
 8009d1c:	3030      	adds	r0, #48	@ 0x30
 8009d1e:	5518      	strb	r0, [r3, r4]
 8009d20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d22:	3401      	adds	r4, #1
 8009d24:	0005      	movs	r5, r0
 8009d26:	429c      	cmp	r4, r3
 8009d28:	dab6      	bge.n	8009c98 <_dtoa_r+0xb3c>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	220a      	movs	r2, #10
 8009d2e:	9905      	ldr	r1, [sp, #20]
 8009d30:	9803      	ldr	r0, [sp, #12]
 8009d32:	f000 f975 	bl	800a020 <__multadd>
 8009d36:	9005      	str	r0, [sp, #20]
 8009d38:	e7eb      	b.n	8009d12 <_dtoa_r+0xbb6>
 8009d3a:	46c0      	nop			@ (mov r8, r8)
 8009d3c:	0800ce34 	.word	0x0800ce34
 8009d40:	0800ce3c 	.word	0x0800ce3c

08009d44 <_free_r>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	0005      	movs	r5, r0
 8009d48:	1e0c      	subs	r4, r1, #0
 8009d4a:	d010      	beq.n	8009d6e <_free_r+0x2a>
 8009d4c:	3c04      	subs	r4, #4
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	da00      	bge.n	8009d56 <_free_r+0x12>
 8009d54:	18e4      	adds	r4, r4, r3
 8009d56:	0028      	movs	r0, r5
 8009d58:	f000 f8ea 	bl	8009f30 <__malloc_lock>
 8009d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd4 <_free_r+0x90>)
 8009d5e:	6813      	ldr	r3, [r2, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d105      	bne.n	8009d70 <_free_r+0x2c>
 8009d64:	6063      	str	r3, [r4, #4]
 8009d66:	6014      	str	r4, [r2, #0]
 8009d68:	0028      	movs	r0, r5
 8009d6a:	f000 f8e9 	bl	8009f40 <__malloc_unlock>
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d908      	bls.n	8009d86 <_free_r+0x42>
 8009d74:	6820      	ldr	r0, [r4, #0]
 8009d76:	1821      	adds	r1, r4, r0
 8009d78:	428b      	cmp	r3, r1
 8009d7a:	d1f3      	bne.n	8009d64 <_free_r+0x20>
 8009d7c:	6819      	ldr	r1, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	1809      	adds	r1, r1, r0
 8009d82:	6021      	str	r1, [r4, #0]
 8009d84:	e7ee      	b.n	8009d64 <_free_r+0x20>
 8009d86:	001a      	movs	r2, r3
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <_free_r+0x4e>
 8009d8e:	42a3      	cmp	r3, r4
 8009d90:	d9f9      	bls.n	8009d86 <_free_r+0x42>
 8009d92:	6811      	ldr	r1, [r2, #0]
 8009d94:	1850      	adds	r0, r2, r1
 8009d96:	42a0      	cmp	r0, r4
 8009d98:	d10b      	bne.n	8009db2 <_free_r+0x6e>
 8009d9a:	6820      	ldr	r0, [r4, #0]
 8009d9c:	1809      	adds	r1, r1, r0
 8009d9e:	1850      	adds	r0, r2, r1
 8009da0:	6011      	str	r1, [r2, #0]
 8009da2:	4283      	cmp	r3, r0
 8009da4:	d1e0      	bne.n	8009d68 <_free_r+0x24>
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	1841      	adds	r1, r0, r1
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	6053      	str	r3, [r2, #4]
 8009db0:	e7da      	b.n	8009d68 <_free_r+0x24>
 8009db2:	42a0      	cmp	r0, r4
 8009db4:	d902      	bls.n	8009dbc <_free_r+0x78>
 8009db6:	230c      	movs	r3, #12
 8009db8:	602b      	str	r3, [r5, #0]
 8009dba:	e7d5      	b.n	8009d68 <_free_r+0x24>
 8009dbc:	6820      	ldr	r0, [r4, #0]
 8009dbe:	1821      	adds	r1, r4, r0
 8009dc0:	428b      	cmp	r3, r1
 8009dc2:	d103      	bne.n	8009dcc <_free_r+0x88>
 8009dc4:	6819      	ldr	r1, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	1809      	adds	r1, r1, r0
 8009dca:	6021      	str	r1, [r4, #0]
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	6054      	str	r4, [r2, #4]
 8009dd0:	e7ca      	b.n	8009d68 <_free_r+0x24>
 8009dd2:	46c0      	nop			@ (mov r8, r8)
 8009dd4:	20000fa8 	.word	0x20000fa8

08009dd8 <malloc>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	4b03      	ldr	r3, [pc, #12]	@ (8009de8 <malloc+0x10>)
 8009ddc:	0001      	movs	r1, r0
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	f000 f826 	bl	8009e30 <_malloc_r>
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	46c0      	nop			@ (mov r8, r8)
 8009de8:	20000064 	.word	0x20000064

08009dec <sbrk_aligned>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	4e0f      	ldr	r6, [pc, #60]	@ (8009e2c <sbrk_aligned+0x40>)
 8009df0:	000d      	movs	r5, r1
 8009df2:	6831      	ldr	r1, [r6, #0]
 8009df4:	0004      	movs	r4, r0
 8009df6:	2900      	cmp	r1, #0
 8009df8:	d102      	bne.n	8009e00 <sbrk_aligned+0x14>
 8009dfa:	f000 fcff 	bl	800a7fc <_sbrk_r>
 8009dfe:	6030      	str	r0, [r6, #0]
 8009e00:	0029      	movs	r1, r5
 8009e02:	0020      	movs	r0, r4
 8009e04:	f000 fcfa 	bl	800a7fc <_sbrk_r>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d103      	bne.n	8009e14 <sbrk_aligned+0x28>
 8009e0c:	2501      	movs	r5, #1
 8009e0e:	426d      	negs	r5, r5
 8009e10:	0028      	movs	r0, r5
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	2303      	movs	r3, #3
 8009e16:	1cc5      	adds	r5, r0, #3
 8009e18:	439d      	bics	r5, r3
 8009e1a:	42a8      	cmp	r0, r5
 8009e1c:	d0f8      	beq.n	8009e10 <sbrk_aligned+0x24>
 8009e1e:	1a29      	subs	r1, r5, r0
 8009e20:	0020      	movs	r0, r4
 8009e22:	f000 fceb 	bl	800a7fc <_sbrk_r>
 8009e26:	3001      	adds	r0, #1
 8009e28:	d1f2      	bne.n	8009e10 <sbrk_aligned+0x24>
 8009e2a:	e7ef      	b.n	8009e0c <sbrk_aligned+0x20>
 8009e2c:	20000fa4 	.word	0x20000fa4

08009e30 <_malloc_r>:
 8009e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e32:	2203      	movs	r2, #3
 8009e34:	1ccb      	adds	r3, r1, #3
 8009e36:	4393      	bics	r3, r2
 8009e38:	3308      	adds	r3, #8
 8009e3a:	0005      	movs	r5, r0
 8009e3c:	001f      	movs	r7, r3
 8009e3e:	2b0c      	cmp	r3, #12
 8009e40:	d234      	bcs.n	8009eac <_malloc_r+0x7c>
 8009e42:	270c      	movs	r7, #12
 8009e44:	42b9      	cmp	r1, r7
 8009e46:	d833      	bhi.n	8009eb0 <_malloc_r+0x80>
 8009e48:	0028      	movs	r0, r5
 8009e4a:	f000 f871 	bl	8009f30 <__malloc_lock>
 8009e4e:	4e37      	ldr	r6, [pc, #220]	@ (8009f2c <_malloc_r+0xfc>)
 8009e50:	6833      	ldr	r3, [r6, #0]
 8009e52:	001c      	movs	r4, r3
 8009e54:	2c00      	cmp	r4, #0
 8009e56:	d12f      	bne.n	8009eb8 <_malloc_r+0x88>
 8009e58:	0039      	movs	r1, r7
 8009e5a:	0028      	movs	r0, r5
 8009e5c:	f7ff ffc6 	bl	8009dec <sbrk_aligned>
 8009e60:	0004      	movs	r4, r0
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	d15f      	bne.n	8009f26 <_malloc_r+0xf6>
 8009e66:	6834      	ldr	r4, [r6, #0]
 8009e68:	9400      	str	r4, [sp, #0]
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d14a      	bne.n	8009f06 <_malloc_r+0xd6>
 8009e70:	2c00      	cmp	r4, #0
 8009e72:	d052      	beq.n	8009f1a <_malloc_r+0xea>
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	0028      	movs	r0, r5
 8009e78:	18e3      	adds	r3, r4, r3
 8009e7a:	9900      	ldr	r1, [sp, #0]
 8009e7c:	9301      	str	r3, [sp, #4]
 8009e7e:	f000 fcbd 	bl	800a7fc <_sbrk_r>
 8009e82:	9b01      	ldr	r3, [sp, #4]
 8009e84:	4283      	cmp	r3, r0
 8009e86:	d148      	bne.n	8009f1a <_malloc_r+0xea>
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	0028      	movs	r0, r5
 8009e8c:	1aff      	subs	r7, r7, r3
 8009e8e:	0039      	movs	r1, r7
 8009e90:	f7ff ffac 	bl	8009dec <sbrk_aligned>
 8009e94:	3001      	adds	r0, #1
 8009e96:	d040      	beq.n	8009f1a <_malloc_r+0xea>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	19db      	adds	r3, r3, r7
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	6833      	ldr	r3, [r6, #0]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	d133      	bne.n	8009f0e <_malloc_r+0xde>
 8009ea6:	9b00      	ldr	r3, [sp, #0]
 8009ea8:	6033      	str	r3, [r6, #0]
 8009eaa:	e019      	b.n	8009ee0 <_malloc_r+0xb0>
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	dac9      	bge.n	8009e44 <_malloc_r+0x14>
 8009eb0:	230c      	movs	r3, #12
 8009eb2:	602b      	str	r3, [r5, #0]
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009eb8:	6821      	ldr	r1, [r4, #0]
 8009eba:	1bc9      	subs	r1, r1, r7
 8009ebc:	d420      	bmi.n	8009f00 <_malloc_r+0xd0>
 8009ebe:	290b      	cmp	r1, #11
 8009ec0:	d90a      	bls.n	8009ed8 <_malloc_r+0xa8>
 8009ec2:	19e2      	adds	r2, r4, r7
 8009ec4:	6027      	str	r7, [r4, #0]
 8009ec6:	42a3      	cmp	r3, r4
 8009ec8:	d104      	bne.n	8009ed4 <_malloc_r+0xa4>
 8009eca:	6032      	str	r2, [r6, #0]
 8009ecc:	6863      	ldr	r3, [r4, #4]
 8009ece:	6011      	str	r1, [r2, #0]
 8009ed0:	6053      	str	r3, [r2, #4]
 8009ed2:	e005      	b.n	8009ee0 <_malloc_r+0xb0>
 8009ed4:	605a      	str	r2, [r3, #4]
 8009ed6:	e7f9      	b.n	8009ecc <_malloc_r+0x9c>
 8009ed8:	6862      	ldr	r2, [r4, #4]
 8009eda:	42a3      	cmp	r3, r4
 8009edc:	d10e      	bne.n	8009efc <_malloc_r+0xcc>
 8009ede:	6032      	str	r2, [r6, #0]
 8009ee0:	0028      	movs	r0, r5
 8009ee2:	f000 f82d 	bl	8009f40 <__malloc_unlock>
 8009ee6:	0020      	movs	r0, r4
 8009ee8:	2207      	movs	r2, #7
 8009eea:	300b      	adds	r0, #11
 8009eec:	1d23      	adds	r3, r4, #4
 8009eee:	4390      	bics	r0, r2
 8009ef0:	1ac2      	subs	r2, r0, r3
 8009ef2:	4298      	cmp	r0, r3
 8009ef4:	d0df      	beq.n	8009eb6 <_malloc_r+0x86>
 8009ef6:	1a1b      	subs	r3, r3, r0
 8009ef8:	50a3      	str	r3, [r4, r2]
 8009efa:	e7dc      	b.n	8009eb6 <_malloc_r+0x86>
 8009efc:	605a      	str	r2, [r3, #4]
 8009efe:	e7ef      	b.n	8009ee0 <_malloc_r+0xb0>
 8009f00:	0023      	movs	r3, r4
 8009f02:	6864      	ldr	r4, [r4, #4]
 8009f04:	e7a6      	b.n	8009e54 <_malloc_r+0x24>
 8009f06:	9c00      	ldr	r4, [sp, #0]
 8009f08:	6863      	ldr	r3, [r4, #4]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	e7ad      	b.n	8009e6a <_malloc_r+0x3a>
 8009f0e:	001a      	movs	r2, r3
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	42a3      	cmp	r3, r4
 8009f14:	d1fb      	bne.n	8009f0e <_malloc_r+0xde>
 8009f16:	2300      	movs	r3, #0
 8009f18:	e7da      	b.n	8009ed0 <_malloc_r+0xa0>
 8009f1a:	230c      	movs	r3, #12
 8009f1c:	0028      	movs	r0, r5
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f000 f80e 	bl	8009f40 <__malloc_unlock>
 8009f24:	e7c6      	b.n	8009eb4 <_malloc_r+0x84>
 8009f26:	6007      	str	r7, [r0, #0]
 8009f28:	e7da      	b.n	8009ee0 <_malloc_r+0xb0>
 8009f2a:	46c0      	nop			@ (mov r8, r8)
 8009f2c:	20000fa8 	.word	0x20000fa8

08009f30 <__malloc_lock>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	4802      	ldr	r0, [pc, #8]	@ (8009f3c <__malloc_lock+0xc>)
 8009f34:	f7ff f86d 	bl	8009012 <__retarget_lock_acquire_recursive>
 8009f38:	bd10      	pop	{r4, pc}
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	20000fa0 	.word	0x20000fa0

08009f40 <__malloc_unlock>:
 8009f40:	b510      	push	{r4, lr}
 8009f42:	4802      	ldr	r0, [pc, #8]	@ (8009f4c <__malloc_unlock+0xc>)
 8009f44:	f7ff f866 	bl	8009014 <__retarget_lock_release_recursive>
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	46c0      	nop			@ (mov r8, r8)
 8009f4c:	20000fa0 	.word	0x20000fa0

08009f50 <_Balloc>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	69c5      	ldr	r5, [r0, #28]
 8009f54:	0006      	movs	r6, r0
 8009f56:	000c      	movs	r4, r1
 8009f58:	2d00      	cmp	r5, #0
 8009f5a:	d10e      	bne.n	8009f7a <_Balloc+0x2a>
 8009f5c:	2010      	movs	r0, #16
 8009f5e:	f7ff ff3b 	bl	8009dd8 <malloc>
 8009f62:	1e02      	subs	r2, r0, #0
 8009f64:	61f0      	str	r0, [r6, #28]
 8009f66:	d104      	bne.n	8009f72 <_Balloc+0x22>
 8009f68:	216b      	movs	r1, #107	@ 0x6b
 8009f6a:	4b19      	ldr	r3, [pc, #100]	@ (8009fd0 <_Balloc+0x80>)
 8009f6c:	4819      	ldr	r0, [pc, #100]	@ (8009fd4 <_Balloc+0x84>)
 8009f6e:	f000 fc57 	bl	800a820 <__assert_func>
 8009f72:	6045      	str	r5, [r0, #4]
 8009f74:	6085      	str	r5, [r0, #8]
 8009f76:	6005      	str	r5, [r0, #0]
 8009f78:	60c5      	str	r5, [r0, #12]
 8009f7a:	69f5      	ldr	r5, [r6, #28]
 8009f7c:	68eb      	ldr	r3, [r5, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d013      	beq.n	8009faa <_Balloc+0x5a>
 8009f82:	69f3      	ldr	r3, [r6, #28]
 8009f84:	00a2      	lsls	r2, r4, #2
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	189b      	adds	r3, r3, r2
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d118      	bne.n	8009fc2 <_Balloc+0x72>
 8009f90:	2101      	movs	r1, #1
 8009f92:	000d      	movs	r5, r1
 8009f94:	40a5      	lsls	r5, r4
 8009f96:	1d6a      	adds	r2, r5, #5
 8009f98:	0030      	movs	r0, r6
 8009f9a:	0092      	lsls	r2, r2, #2
 8009f9c:	f000 fc5e 	bl	800a85c <_calloc_r>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d00c      	beq.n	8009fbe <_Balloc+0x6e>
 8009fa4:	6044      	str	r4, [r0, #4]
 8009fa6:	6085      	str	r5, [r0, #8]
 8009fa8:	e00d      	b.n	8009fc6 <_Balloc+0x76>
 8009faa:	2221      	movs	r2, #33	@ 0x21
 8009fac:	2104      	movs	r1, #4
 8009fae:	0030      	movs	r0, r6
 8009fb0:	f000 fc54 	bl	800a85c <_calloc_r>
 8009fb4:	69f3      	ldr	r3, [r6, #28]
 8009fb6:	60e8      	str	r0, [r5, #12]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e1      	bne.n	8009f82 <_Balloc+0x32>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	bd70      	pop	{r4, r5, r6, pc}
 8009fc2:	6802      	ldr	r2, [r0, #0]
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	6103      	str	r3, [r0, #16]
 8009fca:	60c3      	str	r3, [r0, #12]
 8009fcc:	e7f8      	b.n	8009fc0 <_Balloc+0x70>
 8009fce:	46c0      	nop			@ (mov r8, r8)
 8009fd0:	0800ce41 	.word	0x0800ce41
 8009fd4:	0800cec1 	.word	0x0800cec1

08009fd8 <_Bfree>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	69c6      	ldr	r6, [r0, #28]
 8009fdc:	0005      	movs	r5, r0
 8009fde:	000c      	movs	r4, r1
 8009fe0:	2e00      	cmp	r6, #0
 8009fe2:	d10e      	bne.n	800a002 <_Bfree+0x2a>
 8009fe4:	2010      	movs	r0, #16
 8009fe6:	f7ff fef7 	bl	8009dd8 <malloc>
 8009fea:	1e02      	subs	r2, r0, #0
 8009fec:	61e8      	str	r0, [r5, #28]
 8009fee:	d104      	bne.n	8009ffa <_Bfree+0x22>
 8009ff0:	218f      	movs	r1, #143	@ 0x8f
 8009ff2:	4b09      	ldr	r3, [pc, #36]	@ (800a018 <_Bfree+0x40>)
 8009ff4:	4809      	ldr	r0, [pc, #36]	@ (800a01c <_Bfree+0x44>)
 8009ff6:	f000 fc13 	bl	800a820 <__assert_func>
 8009ffa:	6046      	str	r6, [r0, #4]
 8009ffc:	6086      	str	r6, [r0, #8]
 8009ffe:	6006      	str	r6, [r0, #0]
 800a000:	60c6      	str	r6, [r0, #12]
 800a002:	2c00      	cmp	r4, #0
 800a004:	d007      	beq.n	800a016 <_Bfree+0x3e>
 800a006:	69eb      	ldr	r3, [r5, #28]
 800a008:	6862      	ldr	r2, [r4, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	0092      	lsls	r2, r2, #2
 800a00e:	189b      	adds	r3, r3, r2
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	6022      	str	r2, [r4, #0]
 800a014:	601c      	str	r4, [r3, #0]
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	0800ce41 	.word	0x0800ce41
 800a01c:	0800cec1 	.word	0x0800cec1

0800a020 <__multadd>:
 800a020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a022:	000f      	movs	r7, r1
 800a024:	9001      	str	r0, [sp, #4]
 800a026:	000c      	movs	r4, r1
 800a028:	001e      	movs	r6, r3
 800a02a:	2000      	movs	r0, #0
 800a02c:	690d      	ldr	r5, [r1, #16]
 800a02e:	3714      	adds	r7, #20
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	3001      	adds	r0, #1
 800a034:	b299      	uxth	r1, r3
 800a036:	4351      	muls	r1, r2
 800a038:	0c1b      	lsrs	r3, r3, #16
 800a03a:	4353      	muls	r3, r2
 800a03c:	1989      	adds	r1, r1, r6
 800a03e:	0c0e      	lsrs	r6, r1, #16
 800a040:	199b      	adds	r3, r3, r6
 800a042:	0c1e      	lsrs	r6, r3, #16
 800a044:	b289      	uxth	r1, r1
 800a046:	041b      	lsls	r3, r3, #16
 800a048:	185b      	adds	r3, r3, r1
 800a04a:	c708      	stmia	r7!, {r3}
 800a04c:	4285      	cmp	r5, r0
 800a04e:	dcef      	bgt.n	800a030 <__multadd+0x10>
 800a050:	2e00      	cmp	r6, #0
 800a052:	d022      	beq.n	800a09a <__multadd+0x7a>
 800a054:	68a3      	ldr	r3, [r4, #8]
 800a056:	42ab      	cmp	r3, r5
 800a058:	dc19      	bgt.n	800a08e <__multadd+0x6e>
 800a05a:	6861      	ldr	r1, [r4, #4]
 800a05c:	9801      	ldr	r0, [sp, #4]
 800a05e:	3101      	adds	r1, #1
 800a060:	f7ff ff76 	bl	8009f50 <_Balloc>
 800a064:	1e07      	subs	r7, r0, #0
 800a066:	d105      	bne.n	800a074 <__multadd+0x54>
 800a068:	003a      	movs	r2, r7
 800a06a:	21ba      	movs	r1, #186	@ 0xba
 800a06c:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a0 <__multadd+0x80>)
 800a06e:	480d      	ldr	r0, [pc, #52]	@ (800a0a4 <__multadd+0x84>)
 800a070:	f000 fbd6 	bl	800a820 <__assert_func>
 800a074:	0021      	movs	r1, r4
 800a076:	6922      	ldr	r2, [r4, #16]
 800a078:	310c      	adds	r1, #12
 800a07a:	3202      	adds	r2, #2
 800a07c:	0092      	lsls	r2, r2, #2
 800a07e:	300c      	adds	r0, #12
 800a080:	f7fe ffd4 	bl	800902c <memcpy>
 800a084:	0021      	movs	r1, r4
 800a086:	9801      	ldr	r0, [sp, #4]
 800a088:	f7ff ffa6 	bl	8009fd8 <_Bfree>
 800a08c:	003c      	movs	r4, r7
 800a08e:	1d2b      	adds	r3, r5, #4
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	18e3      	adds	r3, r4, r3
 800a094:	3501      	adds	r5, #1
 800a096:	605e      	str	r6, [r3, #4]
 800a098:	6125      	str	r5, [r4, #16]
 800a09a:	0020      	movs	r0, r4
 800a09c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a09e:	46c0      	nop			@ (mov r8, r8)
 800a0a0:	0800ceb0 	.word	0x0800ceb0
 800a0a4:	0800cec1 	.word	0x0800cec1

0800a0a8 <__hi0bits>:
 800a0a8:	2280      	movs	r2, #128	@ 0x80
 800a0aa:	0003      	movs	r3, r0
 800a0ac:	0252      	lsls	r2, r2, #9
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d201      	bcs.n	800a0b8 <__hi0bits+0x10>
 800a0b4:	041b      	lsls	r3, r3, #16
 800a0b6:	3010      	adds	r0, #16
 800a0b8:	2280      	movs	r2, #128	@ 0x80
 800a0ba:	0452      	lsls	r2, r2, #17
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d201      	bcs.n	800a0c4 <__hi0bits+0x1c>
 800a0c0:	3008      	adds	r0, #8
 800a0c2:	021b      	lsls	r3, r3, #8
 800a0c4:	2280      	movs	r2, #128	@ 0x80
 800a0c6:	0552      	lsls	r2, r2, #21
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d201      	bcs.n	800a0d0 <__hi0bits+0x28>
 800a0cc:	3004      	adds	r0, #4
 800a0ce:	011b      	lsls	r3, r3, #4
 800a0d0:	2280      	movs	r2, #128	@ 0x80
 800a0d2:	05d2      	lsls	r2, r2, #23
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d201      	bcs.n	800a0dc <__hi0bits+0x34>
 800a0d8:	3002      	adds	r0, #2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	db03      	blt.n	800a0e8 <__hi0bits+0x40>
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	4213      	tst	r3, r2
 800a0e4:	d100      	bne.n	800a0e8 <__hi0bits+0x40>
 800a0e6:	2020      	movs	r0, #32
 800a0e8:	4770      	bx	lr

0800a0ea <__lo0bits>:
 800a0ea:	6803      	ldr	r3, [r0, #0]
 800a0ec:	0001      	movs	r1, r0
 800a0ee:	2207      	movs	r2, #7
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	4010      	ands	r0, r2
 800a0f4:	4213      	tst	r3, r2
 800a0f6:	d00d      	beq.n	800a114 <__lo0bits+0x2a>
 800a0f8:	3a06      	subs	r2, #6
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	4213      	tst	r3, r2
 800a0fe:	d105      	bne.n	800a10c <__lo0bits+0x22>
 800a100:	3002      	adds	r0, #2
 800a102:	4203      	tst	r3, r0
 800a104:	d003      	beq.n	800a10e <__lo0bits+0x24>
 800a106:	40d3      	lsrs	r3, r2
 800a108:	0010      	movs	r0, r2
 800a10a:	600b      	str	r3, [r1, #0]
 800a10c:	4770      	bx	lr
 800a10e:	089b      	lsrs	r3, r3, #2
 800a110:	600b      	str	r3, [r1, #0]
 800a112:	e7fb      	b.n	800a10c <__lo0bits+0x22>
 800a114:	b29a      	uxth	r2, r3
 800a116:	2a00      	cmp	r2, #0
 800a118:	d101      	bne.n	800a11e <__lo0bits+0x34>
 800a11a:	2010      	movs	r0, #16
 800a11c:	0c1b      	lsrs	r3, r3, #16
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	2a00      	cmp	r2, #0
 800a122:	d101      	bne.n	800a128 <__lo0bits+0x3e>
 800a124:	3008      	adds	r0, #8
 800a126:	0a1b      	lsrs	r3, r3, #8
 800a128:	071a      	lsls	r2, r3, #28
 800a12a:	d101      	bne.n	800a130 <__lo0bits+0x46>
 800a12c:	3004      	adds	r0, #4
 800a12e:	091b      	lsrs	r3, r3, #4
 800a130:	079a      	lsls	r2, r3, #30
 800a132:	d101      	bne.n	800a138 <__lo0bits+0x4e>
 800a134:	3002      	adds	r0, #2
 800a136:	089b      	lsrs	r3, r3, #2
 800a138:	07da      	lsls	r2, r3, #31
 800a13a:	d4e9      	bmi.n	800a110 <__lo0bits+0x26>
 800a13c:	3001      	adds	r0, #1
 800a13e:	085b      	lsrs	r3, r3, #1
 800a140:	d1e6      	bne.n	800a110 <__lo0bits+0x26>
 800a142:	2020      	movs	r0, #32
 800a144:	e7e2      	b.n	800a10c <__lo0bits+0x22>
	...

0800a148 <__i2b>:
 800a148:	b510      	push	{r4, lr}
 800a14a:	000c      	movs	r4, r1
 800a14c:	2101      	movs	r1, #1
 800a14e:	f7ff feff 	bl	8009f50 <_Balloc>
 800a152:	2800      	cmp	r0, #0
 800a154:	d107      	bne.n	800a166 <__i2b+0x1e>
 800a156:	2146      	movs	r1, #70	@ 0x46
 800a158:	4c05      	ldr	r4, [pc, #20]	@ (800a170 <__i2b+0x28>)
 800a15a:	0002      	movs	r2, r0
 800a15c:	4b05      	ldr	r3, [pc, #20]	@ (800a174 <__i2b+0x2c>)
 800a15e:	0020      	movs	r0, r4
 800a160:	31ff      	adds	r1, #255	@ 0xff
 800a162:	f000 fb5d 	bl	800a820 <__assert_func>
 800a166:	2301      	movs	r3, #1
 800a168:	6144      	str	r4, [r0, #20]
 800a16a:	6103      	str	r3, [r0, #16]
 800a16c:	bd10      	pop	{r4, pc}
 800a16e:	46c0      	nop			@ (mov r8, r8)
 800a170:	0800cec1 	.word	0x0800cec1
 800a174:	0800ceb0 	.word	0x0800ceb0

0800a178 <__multiply>:
 800a178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a17a:	0014      	movs	r4, r2
 800a17c:	690a      	ldr	r2, [r1, #16]
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	000d      	movs	r5, r1
 800a182:	b08b      	sub	sp, #44	@ 0x2c
 800a184:	429a      	cmp	r2, r3
 800a186:	db02      	blt.n	800a18e <__multiply+0x16>
 800a188:	0023      	movs	r3, r4
 800a18a:	000c      	movs	r4, r1
 800a18c:	001d      	movs	r5, r3
 800a18e:	6927      	ldr	r7, [r4, #16]
 800a190:	692e      	ldr	r6, [r5, #16]
 800a192:	6861      	ldr	r1, [r4, #4]
 800a194:	19bb      	adds	r3, r7, r6
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	68a3      	ldr	r3, [r4, #8]
 800a19a:	19ba      	adds	r2, r7, r6
 800a19c:	4293      	cmp	r3, r2
 800a19e:	da00      	bge.n	800a1a2 <__multiply+0x2a>
 800a1a0:	3101      	adds	r1, #1
 800a1a2:	f7ff fed5 	bl	8009f50 <_Balloc>
 800a1a6:	9002      	str	r0, [sp, #8]
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d106      	bne.n	800a1ba <__multiply+0x42>
 800a1ac:	21b1      	movs	r1, #177	@ 0xb1
 800a1ae:	4b49      	ldr	r3, [pc, #292]	@ (800a2d4 <__multiply+0x15c>)
 800a1b0:	4849      	ldr	r0, [pc, #292]	@ (800a2d8 <__multiply+0x160>)
 800a1b2:	9a02      	ldr	r2, [sp, #8]
 800a1b4:	0049      	lsls	r1, r1, #1
 800a1b6:	f000 fb33 	bl	800a820 <__assert_func>
 800a1ba:	9b02      	ldr	r3, [sp, #8]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	3314      	adds	r3, #20
 800a1c0:	469c      	mov	ip, r3
 800a1c2:	19bb      	adds	r3, r7, r6
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4463      	add	r3, ip
 800a1c8:	9304      	str	r3, [sp, #16]
 800a1ca:	4663      	mov	r3, ip
 800a1cc:	9904      	ldr	r1, [sp, #16]
 800a1ce:	428b      	cmp	r3, r1
 800a1d0:	d32a      	bcc.n	800a228 <__multiply+0xb0>
 800a1d2:	0023      	movs	r3, r4
 800a1d4:	00bf      	lsls	r7, r7, #2
 800a1d6:	3314      	adds	r3, #20
 800a1d8:	3514      	adds	r5, #20
 800a1da:	9308      	str	r3, [sp, #32]
 800a1dc:	00b6      	lsls	r6, r6, #2
 800a1de:	19db      	adds	r3, r3, r7
 800a1e0:	9305      	str	r3, [sp, #20]
 800a1e2:	19ab      	adds	r3, r5, r6
 800a1e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e6:	2304      	movs	r3, #4
 800a1e8:	9306      	str	r3, [sp, #24]
 800a1ea:	0023      	movs	r3, r4
 800a1ec:	9a05      	ldr	r2, [sp, #20]
 800a1ee:	3315      	adds	r3, #21
 800a1f0:	9501      	str	r5, [sp, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d305      	bcc.n	800a202 <__multiply+0x8a>
 800a1f6:	1b13      	subs	r3, r2, r4
 800a1f8:	3b15      	subs	r3, #21
 800a1fa:	089b      	lsrs	r3, r3, #2
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	9306      	str	r3, [sp, #24]
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a206:	4293      	cmp	r3, r2
 800a208:	d310      	bcc.n	800a22c <__multiply+0xb4>
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd05      	ble.n	800a21c <__multiply+0xa4>
 800a210:	9b04      	ldr	r3, [sp, #16]
 800a212:	3b04      	subs	r3, #4
 800a214:	9304      	str	r3, [sp, #16]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d056      	beq.n	800a2ca <__multiply+0x152>
 800a21c:	9b02      	ldr	r3, [sp, #8]
 800a21e:	9a03      	ldr	r2, [sp, #12]
 800a220:	0018      	movs	r0, r3
 800a222:	611a      	str	r2, [r3, #16]
 800a224:	b00b      	add	sp, #44	@ 0x2c
 800a226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a228:	c304      	stmia	r3!, {r2}
 800a22a:	e7cf      	b.n	800a1cc <__multiply+0x54>
 800a22c:	9b01      	ldr	r3, [sp, #4]
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	b280      	uxth	r0, r0
 800a232:	2800      	cmp	r0, #0
 800a234:	d01e      	beq.n	800a274 <__multiply+0xfc>
 800a236:	4667      	mov	r7, ip
 800a238:	2500      	movs	r5, #0
 800a23a:	9e08      	ldr	r6, [sp, #32]
 800a23c:	ce02      	ldmia	r6!, {r1}
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	9307      	str	r3, [sp, #28]
 800a242:	b28b      	uxth	r3, r1
 800a244:	4343      	muls	r3, r0
 800a246:	001a      	movs	r2, r3
 800a248:	466b      	mov	r3, sp
 800a24a:	0c09      	lsrs	r1, r1, #16
 800a24c:	8b9b      	ldrh	r3, [r3, #28]
 800a24e:	4341      	muls	r1, r0
 800a250:	18d3      	adds	r3, r2, r3
 800a252:	9a07      	ldr	r2, [sp, #28]
 800a254:	195b      	adds	r3, r3, r5
 800a256:	0c12      	lsrs	r2, r2, #16
 800a258:	1889      	adds	r1, r1, r2
 800a25a:	0c1a      	lsrs	r2, r3, #16
 800a25c:	188a      	adds	r2, r1, r2
 800a25e:	b29b      	uxth	r3, r3
 800a260:	0c15      	lsrs	r5, r2, #16
 800a262:	0412      	lsls	r2, r2, #16
 800a264:	431a      	orrs	r2, r3
 800a266:	9b05      	ldr	r3, [sp, #20]
 800a268:	c704      	stmia	r7!, {r2}
 800a26a:	42b3      	cmp	r3, r6
 800a26c:	d8e6      	bhi.n	800a23c <__multiply+0xc4>
 800a26e:	4663      	mov	r3, ip
 800a270:	9a06      	ldr	r2, [sp, #24]
 800a272:	509d      	str	r5, [r3, r2]
 800a274:	9b01      	ldr	r3, [sp, #4]
 800a276:	6818      	ldr	r0, [r3, #0]
 800a278:	0c00      	lsrs	r0, r0, #16
 800a27a:	d020      	beq.n	800a2be <__multiply+0x146>
 800a27c:	4663      	mov	r3, ip
 800a27e:	0025      	movs	r5, r4
 800a280:	4661      	mov	r1, ip
 800a282:	2700      	movs	r7, #0
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3514      	adds	r5, #20
 800a288:	682a      	ldr	r2, [r5, #0]
 800a28a:	680e      	ldr	r6, [r1, #0]
 800a28c:	b292      	uxth	r2, r2
 800a28e:	4342      	muls	r2, r0
 800a290:	0c36      	lsrs	r6, r6, #16
 800a292:	1992      	adds	r2, r2, r6
 800a294:	19d2      	adds	r2, r2, r7
 800a296:	0416      	lsls	r6, r2, #16
 800a298:	b29b      	uxth	r3, r3
 800a29a:	431e      	orrs	r6, r3
 800a29c:	600e      	str	r6, [r1, #0]
 800a29e:	cd40      	ldmia	r5!, {r6}
 800a2a0:	684b      	ldr	r3, [r1, #4]
 800a2a2:	0c36      	lsrs	r6, r6, #16
 800a2a4:	4346      	muls	r6, r0
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	0c12      	lsrs	r2, r2, #16
 800a2aa:	18f3      	adds	r3, r6, r3
 800a2ac:	189b      	adds	r3, r3, r2
 800a2ae:	9a05      	ldr	r2, [sp, #20]
 800a2b0:	0c1f      	lsrs	r7, r3, #16
 800a2b2:	3104      	adds	r1, #4
 800a2b4:	42aa      	cmp	r2, r5
 800a2b6:	d8e7      	bhi.n	800a288 <__multiply+0x110>
 800a2b8:	4662      	mov	r2, ip
 800a2ba:	9906      	ldr	r1, [sp, #24]
 800a2bc:	5053      	str	r3, [r2, r1]
 800a2be:	9b01      	ldr	r3, [sp, #4]
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	2304      	movs	r3, #4
 800a2c6:	449c      	add	ip, r3
 800a2c8:	e79b      	b.n	800a202 <__multiply+0x8a>
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	e79b      	b.n	800a20a <__multiply+0x92>
 800a2d2:	46c0      	nop			@ (mov r8, r8)
 800a2d4:	0800ceb0 	.word	0x0800ceb0
 800a2d8:	0800cec1 	.word	0x0800cec1

0800a2dc <__pow5mult>:
 800a2dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2de:	2303      	movs	r3, #3
 800a2e0:	0015      	movs	r5, r2
 800a2e2:	0007      	movs	r7, r0
 800a2e4:	000e      	movs	r6, r1
 800a2e6:	401a      	ands	r2, r3
 800a2e8:	421d      	tst	r5, r3
 800a2ea:	d008      	beq.n	800a2fe <__pow5mult+0x22>
 800a2ec:	4925      	ldr	r1, [pc, #148]	@ (800a384 <__pow5mult+0xa8>)
 800a2ee:	3a01      	subs	r2, #1
 800a2f0:	0092      	lsls	r2, r2, #2
 800a2f2:	5852      	ldr	r2, [r2, r1]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	0031      	movs	r1, r6
 800a2f8:	f7ff fe92 	bl	800a020 <__multadd>
 800a2fc:	0006      	movs	r6, r0
 800a2fe:	10ad      	asrs	r5, r5, #2
 800a300:	d03d      	beq.n	800a37e <__pow5mult+0xa2>
 800a302:	69fc      	ldr	r4, [r7, #28]
 800a304:	2c00      	cmp	r4, #0
 800a306:	d10f      	bne.n	800a328 <__pow5mult+0x4c>
 800a308:	2010      	movs	r0, #16
 800a30a:	f7ff fd65 	bl	8009dd8 <malloc>
 800a30e:	1e02      	subs	r2, r0, #0
 800a310:	61f8      	str	r0, [r7, #28]
 800a312:	d105      	bne.n	800a320 <__pow5mult+0x44>
 800a314:	21b4      	movs	r1, #180	@ 0xb4
 800a316:	4b1c      	ldr	r3, [pc, #112]	@ (800a388 <__pow5mult+0xac>)
 800a318:	481c      	ldr	r0, [pc, #112]	@ (800a38c <__pow5mult+0xb0>)
 800a31a:	31ff      	adds	r1, #255	@ 0xff
 800a31c:	f000 fa80 	bl	800a820 <__assert_func>
 800a320:	6044      	str	r4, [r0, #4]
 800a322:	6084      	str	r4, [r0, #8]
 800a324:	6004      	str	r4, [r0, #0]
 800a326:	60c4      	str	r4, [r0, #12]
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	689c      	ldr	r4, [r3, #8]
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	2c00      	cmp	r4, #0
 800a330:	d108      	bne.n	800a344 <__pow5mult+0x68>
 800a332:	0038      	movs	r0, r7
 800a334:	4916      	ldr	r1, [pc, #88]	@ (800a390 <__pow5mult+0xb4>)
 800a336:	f7ff ff07 	bl	800a148 <__i2b>
 800a33a:	9b01      	ldr	r3, [sp, #4]
 800a33c:	0004      	movs	r4, r0
 800a33e:	6098      	str	r0, [r3, #8]
 800a340:	2300      	movs	r3, #0
 800a342:	6003      	str	r3, [r0, #0]
 800a344:	2301      	movs	r3, #1
 800a346:	421d      	tst	r5, r3
 800a348:	d00a      	beq.n	800a360 <__pow5mult+0x84>
 800a34a:	0031      	movs	r1, r6
 800a34c:	0022      	movs	r2, r4
 800a34e:	0038      	movs	r0, r7
 800a350:	f7ff ff12 	bl	800a178 <__multiply>
 800a354:	0031      	movs	r1, r6
 800a356:	9001      	str	r0, [sp, #4]
 800a358:	0038      	movs	r0, r7
 800a35a:	f7ff fe3d 	bl	8009fd8 <_Bfree>
 800a35e:	9e01      	ldr	r6, [sp, #4]
 800a360:	106d      	asrs	r5, r5, #1
 800a362:	d00c      	beq.n	800a37e <__pow5mult+0xa2>
 800a364:	6820      	ldr	r0, [r4, #0]
 800a366:	2800      	cmp	r0, #0
 800a368:	d107      	bne.n	800a37a <__pow5mult+0x9e>
 800a36a:	0022      	movs	r2, r4
 800a36c:	0021      	movs	r1, r4
 800a36e:	0038      	movs	r0, r7
 800a370:	f7ff ff02 	bl	800a178 <__multiply>
 800a374:	2300      	movs	r3, #0
 800a376:	6020      	str	r0, [r4, #0]
 800a378:	6003      	str	r3, [r0, #0]
 800a37a:	0004      	movs	r4, r0
 800a37c:	e7e2      	b.n	800a344 <__pow5mult+0x68>
 800a37e:	0030      	movs	r0, r6
 800a380:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a382:	46c0      	nop			@ (mov r8, r8)
 800a384:	0800cf1c 	.word	0x0800cf1c
 800a388:	0800ce41 	.word	0x0800ce41
 800a38c:	0800cec1 	.word	0x0800cec1
 800a390:	00000271 	.word	0x00000271

0800a394 <__lshift>:
 800a394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a396:	000c      	movs	r4, r1
 800a398:	0016      	movs	r6, r2
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	1157      	asrs	r7, r2, #5
 800a39e:	b085      	sub	sp, #20
 800a3a0:	18fb      	adds	r3, r7, r3
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	6849      	ldr	r1, [r1, #4]
 800a3aa:	68a3      	ldr	r3, [r4, #8]
 800a3ac:	9002      	str	r0, [sp, #8]
 800a3ae:	9a00      	ldr	r2, [sp, #0]
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	db10      	blt.n	800a3d6 <__lshift+0x42>
 800a3b4:	9802      	ldr	r0, [sp, #8]
 800a3b6:	f7ff fdcb 	bl	8009f50 <_Balloc>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	0001      	movs	r1, r0
 800a3be:	0005      	movs	r5, r0
 800a3c0:	001a      	movs	r2, r3
 800a3c2:	3114      	adds	r1, #20
 800a3c4:	4298      	cmp	r0, r3
 800a3c6:	d10c      	bne.n	800a3e2 <__lshift+0x4e>
 800a3c8:	21ef      	movs	r1, #239	@ 0xef
 800a3ca:	002a      	movs	r2, r5
 800a3cc:	4b25      	ldr	r3, [pc, #148]	@ (800a464 <__lshift+0xd0>)
 800a3ce:	4826      	ldr	r0, [pc, #152]	@ (800a468 <__lshift+0xd4>)
 800a3d0:	0049      	lsls	r1, r1, #1
 800a3d2:	f000 fa25 	bl	800a820 <__assert_func>
 800a3d6:	3101      	adds	r1, #1
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	e7e8      	b.n	800a3ae <__lshift+0x1a>
 800a3dc:	0098      	lsls	r0, r3, #2
 800a3de:	500a      	str	r2, [r1, r0]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	42bb      	cmp	r3, r7
 800a3e4:	dbfa      	blt.n	800a3dc <__lshift+0x48>
 800a3e6:	43fb      	mvns	r3, r7
 800a3e8:	17db      	asrs	r3, r3, #31
 800a3ea:	401f      	ands	r7, r3
 800a3ec:	00bf      	lsls	r7, r7, #2
 800a3ee:	0023      	movs	r3, r4
 800a3f0:	201f      	movs	r0, #31
 800a3f2:	19c9      	adds	r1, r1, r7
 800a3f4:	0037      	movs	r7, r6
 800a3f6:	6922      	ldr	r2, [r4, #16]
 800a3f8:	3314      	adds	r3, #20
 800a3fa:	0092      	lsls	r2, r2, #2
 800a3fc:	189a      	adds	r2, r3, r2
 800a3fe:	4007      	ands	r7, r0
 800a400:	4206      	tst	r6, r0
 800a402:	d029      	beq.n	800a458 <__lshift+0xc4>
 800a404:	3001      	adds	r0, #1
 800a406:	1bc0      	subs	r0, r0, r7
 800a408:	9003      	str	r0, [sp, #12]
 800a40a:	468c      	mov	ip, r1
 800a40c:	2000      	movs	r0, #0
 800a40e:	681e      	ldr	r6, [r3, #0]
 800a410:	40be      	lsls	r6, r7
 800a412:	4306      	orrs	r6, r0
 800a414:	4660      	mov	r0, ip
 800a416:	c040      	stmia	r0!, {r6}
 800a418:	4684      	mov	ip, r0
 800a41a:	9e03      	ldr	r6, [sp, #12]
 800a41c:	cb01      	ldmia	r3!, {r0}
 800a41e:	40f0      	lsrs	r0, r6
 800a420:	429a      	cmp	r2, r3
 800a422:	d8f4      	bhi.n	800a40e <__lshift+0x7a>
 800a424:	0026      	movs	r6, r4
 800a426:	3615      	adds	r6, #21
 800a428:	2304      	movs	r3, #4
 800a42a:	42b2      	cmp	r2, r6
 800a42c:	d304      	bcc.n	800a438 <__lshift+0xa4>
 800a42e:	1b13      	subs	r3, r2, r4
 800a430:	3b15      	subs	r3, #21
 800a432:	089b      	lsrs	r3, r3, #2
 800a434:	3301      	adds	r3, #1
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	50c8      	str	r0, [r1, r3]
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d002      	beq.n	800a444 <__lshift+0xb0>
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	3302      	adds	r3, #2
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	9b00      	ldr	r3, [sp, #0]
 800a446:	9802      	ldr	r0, [sp, #8]
 800a448:	3b01      	subs	r3, #1
 800a44a:	0021      	movs	r1, r4
 800a44c:	612b      	str	r3, [r5, #16]
 800a44e:	f7ff fdc3 	bl	8009fd8 <_Bfree>
 800a452:	0028      	movs	r0, r5
 800a454:	b005      	add	sp, #20
 800a456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a458:	cb01      	ldmia	r3!, {r0}
 800a45a:	c101      	stmia	r1!, {r0}
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d8fb      	bhi.n	800a458 <__lshift+0xc4>
 800a460:	e7f0      	b.n	800a444 <__lshift+0xb0>
 800a462:	46c0      	nop			@ (mov r8, r8)
 800a464:	0800ceb0 	.word	0x0800ceb0
 800a468:	0800cec1 	.word	0x0800cec1

0800a46c <__mcmp>:
 800a46c:	b530      	push	{r4, r5, lr}
 800a46e:	690b      	ldr	r3, [r1, #16]
 800a470:	6904      	ldr	r4, [r0, #16]
 800a472:	0002      	movs	r2, r0
 800a474:	1ae0      	subs	r0, r4, r3
 800a476:	429c      	cmp	r4, r3
 800a478:	d10f      	bne.n	800a49a <__mcmp+0x2e>
 800a47a:	3214      	adds	r2, #20
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	3114      	adds	r1, #20
 800a480:	0014      	movs	r4, r2
 800a482:	18c9      	adds	r1, r1, r3
 800a484:	18d2      	adds	r2, r2, r3
 800a486:	3a04      	subs	r2, #4
 800a488:	3904      	subs	r1, #4
 800a48a:	6815      	ldr	r5, [r2, #0]
 800a48c:	680b      	ldr	r3, [r1, #0]
 800a48e:	429d      	cmp	r5, r3
 800a490:	d004      	beq.n	800a49c <__mcmp+0x30>
 800a492:	2001      	movs	r0, #1
 800a494:	429d      	cmp	r5, r3
 800a496:	d200      	bcs.n	800a49a <__mcmp+0x2e>
 800a498:	3802      	subs	r0, #2
 800a49a:	bd30      	pop	{r4, r5, pc}
 800a49c:	4294      	cmp	r4, r2
 800a49e:	d3f2      	bcc.n	800a486 <__mcmp+0x1a>
 800a4a0:	e7fb      	b.n	800a49a <__mcmp+0x2e>
	...

0800a4a4 <__mdiff>:
 800a4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4a6:	000c      	movs	r4, r1
 800a4a8:	b087      	sub	sp, #28
 800a4aa:	9000      	str	r0, [sp, #0]
 800a4ac:	0011      	movs	r1, r2
 800a4ae:	0020      	movs	r0, r4
 800a4b0:	0017      	movs	r7, r2
 800a4b2:	f7ff ffdb 	bl	800a46c <__mcmp>
 800a4b6:	1e05      	subs	r5, r0, #0
 800a4b8:	d110      	bne.n	800a4dc <__mdiff+0x38>
 800a4ba:	0001      	movs	r1, r0
 800a4bc:	9800      	ldr	r0, [sp, #0]
 800a4be:	f7ff fd47 	bl	8009f50 <_Balloc>
 800a4c2:	1e02      	subs	r2, r0, #0
 800a4c4:	d104      	bne.n	800a4d0 <__mdiff+0x2c>
 800a4c6:	4b40      	ldr	r3, [pc, #256]	@ (800a5c8 <__mdiff+0x124>)
 800a4c8:	4840      	ldr	r0, [pc, #256]	@ (800a5cc <__mdiff+0x128>)
 800a4ca:	4941      	ldr	r1, [pc, #260]	@ (800a5d0 <__mdiff+0x12c>)
 800a4cc:	f000 f9a8 	bl	800a820 <__assert_func>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	6145      	str	r5, [r0, #20]
 800a4d4:	6103      	str	r3, [r0, #16]
 800a4d6:	0010      	movs	r0, r2
 800a4d8:	b007      	add	sp, #28
 800a4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4dc:	2600      	movs	r6, #0
 800a4de:	42b0      	cmp	r0, r6
 800a4e0:	da03      	bge.n	800a4ea <__mdiff+0x46>
 800a4e2:	0023      	movs	r3, r4
 800a4e4:	003c      	movs	r4, r7
 800a4e6:	001f      	movs	r7, r3
 800a4e8:	3601      	adds	r6, #1
 800a4ea:	6861      	ldr	r1, [r4, #4]
 800a4ec:	9800      	ldr	r0, [sp, #0]
 800a4ee:	f7ff fd2f 	bl	8009f50 <_Balloc>
 800a4f2:	1e02      	subs	r2, r0, #0
 800a4f4:	d103      	bne.n	800a4fe <__mdiff+0x5a>
 800a4f6:	4b34      	ldr	r3, [pc, #208]	@ (800a5c8 <__mdiff+0x124>)
 800a4f8:	4834      	ldr	r0, [pc, #208]	@ (800a5cc <__mdiff+0x128>)
 800a4fa:	4936      	ldr	r1, [pc, #216]	@ (800a5d4 <__mdiff+0x130>)
 800a4fc:	e7e6      	b.n	800a4cc <__mdiff+0x28>
 800a4fe:	6923      	ldr	r3, [r4, #16]
 800a500:	3414      	adds	r4, #20
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	18e3      	adds	r3, r4, r3
 800a508:	0021      	movs	r1, r4
 800a50a:	9401      	str	r4, [sp, #4]
 800a50c:	003c      	movs	r4, r7
 800a50e:	9302      	str	r3, [sp, #8]
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	3414      	adds	r4, #20
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	18e3      	adds	r3, r4, r3
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	0003      	movs	r3, r0
 800a51c:	60c6      	str	r6, [r0, #12]
 800a51e:	468c      	mov	ip, r1
 800a520:	2000      	movs	r0, #0
 800a522:	3314      	adds	r3, #20
 800a524:	9304      	str	r3, [sp, #16]
 800a526:	9305      	str	r3, [sp, #20]
 800a528:	4663      	mov	r3, ip
 800a52a:	cb20      	ldmia	r3!, {r5}
 800a52c:	b2a9      	uxth	r1, r5
 800a52e:	000e      	movs	r6, r1
 800a530:	469c      	mov	ip, r3
 800a532:	cc08      	ldmia	r4!, {r3}
 800a534:	0c2d      	lsrs	r5, r5, #16
 800a536:	b299      	uxth	r1, r3
 800a538:	1a71      	subs	r1, r6, r1
 800a53a:	1809      	adds	r1, r1, r0
 800a53c:	0c1b      	lsrs	r3, r3, #16
 800a53e:	1408      	asrs	r0, r1, #16
 800a540:	1aeb      	subs	r3, r5, r3
 800a542:	181b      	adds	r3, r3, r0
 800a544:	1418      	asrs	r0, r3, #16
 800a546:	b289      	uxth	r1, r1
 800a548:	041b      	lsls	r3, r3, #16
 800a54a:	4319      	orrs	r1, r3
 800a54c:	9b05      	ldr	r3, [sp, #20]
 800a54e:	c302      	stmia	r3!, {r1}
 800a550:	9305      	str	r3, [sp, #20]
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	42a3      	cmp	r3, r4
 800a556:	d8e7      	bhi.n	800a528 <__mdiff+0x84>
 800a558:	0039      	movs	r1, r7
 800a55a:	9c03      	ldr	r4, [sp, #12]
 800a55c:	3115      	adds	r1, #21
 800a55e:	2304      	movs	r3, #4
 800a560:	428c      	cmp	r4, r1
 800a562:	d304      	bcc.n	800a56e <__mdiff+0xca>
 800a564:	1be3      	subs	r3, r4, r7
 800a566:	3b15      	subs	r3, #21
 800a568:	089b      	lsrs	r3, r3, #2
 800a56a:	3301      	adds	r3, #1
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	9901      	ldr	r1, [sp, #4]
 800a570:	18cd      	adds	r5, r1, r3
 800a572:	9904      	ldr	r1, [sp, #16]
 800a574:	002e      	movs	r6, r5
 800a576:	18cb      	adds	r3, r1, r3
 800a578:	001f      	movs	r7, r3
 800a57a:	9902      	ldr	r1, [sp, #8]
 800a57c:	428e      	cmp	r6, r1
 800a57e:	d311      	bcc.n	800a5a4 <__mdiff+0x100>
 800a580:	9c02      	ldr	r4, [sp, #8]
 800a582:	1ee9      	subs	r1, r5, #3
 800a584:	2000      	movs	r0, #0
 800a586:	428c      	cmp	r4, r1
 800a588:	d304      	bcc.n	800a594 <__mdiff+0xf0>
 800a58a:	0021      	movs	r1, r4
 800a58c:	3103      	adds	r1, #3
 800a58e:	1b49      	subs	r1, r1, r5
 800a590:	0889      	lsrs	r1, r1, #2
 800a592:	0088      	lsls	r0, r1, #2
 800a594:	181b      	adds	r3, r3, r0
 800a596:	3b04      	subs	r3, #4
 800a598:	6819      	ldr	r1, [r3, #0]
 800a59a:	2900      	cmp	r1, #0
 800a59c:	d010      	beq.n	800a5c0 <__mdiff+0x11c>
 800a59e:	9b00      	ldr	r3, [sp, #0]
 800a5a0:	6113      	str	r3, [r2, #16]
 800a5a2:	e798      	b.n	800a4d6 <__mdiff+0x32>
 800a5a4:	4684      	mov	ip, r0
 800a5a6:	ce02      	ldmia	r6!, {r1}
 800a5a8:	b288      	uxth	r0, r1
 800a5aa:	4460      	add	r0, ip
 800a5ac:	1400      	asrs	r0, r0, #16
 800a5ae:	0c0c      	lsrs	r4, r1, #16
 800a5b0:	1904      	adds	r4, r0, r4
 800a5b2:	4461      	add	r1, ip
 800a5b4:	1420      	asrs	r0, r4, #16
 800a5b6:	b289      	uxth	r1, r1
 800a5b8:	0424      	lsls	r4, r4, #16
 800a5ba:	4321      	orrs	r1, r4
 800a5bc:	c702      	stmia	r7!, {r1}
 800a5be:	e7dc      	b.n	800a57a <__mdiff+0xd6>
 800a5c0:	9900      	ldr	r1, [sp, #0]
 800a5c2:	3901      	subs	r1, #1
 800a5c4:	9100      	str	r1, [sp, #0]
 800a5c6:	e7e6      	b.n	800a596 <__mdiff+0xf2>
 800a5c8:	0800ceb0 	.word	0x0800ceb0
 800a5cc:	0800cec1 	.word	0x0800cec1
 800a5d0:	00000237 	.word	0x00000237
 800a5d4:	00000245 	.word	0x00000245

0800a5d8 <__d2b>:
 800a5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5da:	2101      	movs	r1, #1
 800a5dc:	0016      	movs	r6, r2
 800a5de:	001f      	movs	r7, r3
 800a5e0:	f7ff fcb6 	bl	8009f50 <_Balloc>
 800a5e4:	1e04      	subs	r4, r0, #0
 800a5e6:	d105      	bne.n	800a5f4 <__d2b+0x1c>
 800a5e8:	0022      	movs	r2, r4
 800a5ea:	4b25      	ldr	r3, [pc, #148]	@ (800a680 <__d2b+0xa8>)
 800a5ec:	4825      	ldr	r0, [pc, #148]	@ (800a684 <__d2b+0xac>)
 800a5ee:	4926      	ldr	r1, [pc, #152]	@ (800a688 <__d2b+0xb0>)
 800a5f0:	f000 f916 	bl	800a820 <__assert_func>
 800a5f4:	033b      	lsls	r3, r7, #12
 800a5f6:	007d      	lsls	r5, r7, #1
 800a5f8:	0b1b      	lsrs	r3, r3, #12
 800a5fa:	0d6d      	lsrs	r5, r5, #21
 800a5fc:	d002      	beq.n	800a604 <__d2b+0x2c>
 800a5fe:	2280      	movs	r2, #128	@ 0x80
 800a600:	0352      	lsls	r2, r2, #13
 800a602:	4313      	orrs	r3, r2
 800a604:	9301      	str	r3, [sp, #4]
 800a606:	2e00      	cmp	r6, #0
 800a608:	d025      	beq.n	800a656 <__d2b+0x7e>
 800a60a:	4668      	mov	r0, sp
 800a60c:	9600      	str	r6, [sp, #0]
 800a60e:	f7ff fd6c 	bl	800a0ea <__lo0bits>
 800a612:	9b01      	ldr	r3, [sp, #4]
 800a614:	9900      	ldr	r1, [sp, #0]
 800a616:	2800      	cmp	r0, #0
 800a618:	d01b      	beq.n	800a652 <__d2b+0x7a>
 800a61a:	2220      	movs	r2, #32
 800a61c:	001e      	movs	r6, r3
 800a61e:	1a12      	subs	r2, r2, r0
 800a620:	4096      	lsls	r6, r2
 800a622:	0032      	movs	r2, r6
 800a624:	40c3      	lsrs	r3, r0
 800a626:	430a      	orrs	r2, r1
 800a628:	6162      	str	r2, [r4, #20]
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	9e01      	ldr	r6, [sp, #4]
 800a62e:	61a6      	str	r6, [r4, #24]
 800a630:	1e73      	subs	r3, r6, #1
 800a632:	419e      	sbcs	r6, r3
 800a634:	3601      	adds	r6, #1
 800a636:	6126      	str	r6, [r4, #16]
 800a638:	2d00      	cmp	r5, #0
 800a63a:	d014      	beq.n	800a666 <__d2b+0x8e>
 800a63c:	2635      	movs	r6, #53	@ 0x35
 800a63e:	4b13      	ldr	r3, [pc, #76]	@ (800a68c <__d2b+0xb4>)
 800a640:	18ed      	adds	r5, r5, r3
 800a642:	9b08      	ldr	r3, [sp, #32]
 800a644:	182d      	adds	r5, r5, r0
 800a646:	601d      	str	r5, [r3, #0]
 800a648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a64a:	1a36      	subs	r6, r6, r0
 800a64c:	601e      	str	r6, [r3, #0]
 800a64e:	0020      	movs	r0, r4
 800a650:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a652:	6161      	str	r1, [r4, #20]
 800a654:	e7ea      	b.n	800a62c <__d2b+0x54>
 800a656:	a801      	add	r0, sp, #4
 800a658:	f7ff fd47 	bl	800a0ea <__lo0bits>
 800a65c:	9b01      	ldr	r3, [sp, #4]
 800a65e:	2601      	movs	r6, #1
 800a660:	6163      	str	r3, [r4, #20]
 800a662:	3020      	adds	r0, #32
 800a664:	e7e7      	b.n	800a636 <__d2b+0x5e>
 800a666:	4b0a      	ldr	r3, [pc, #40]	@ (800a690 <__d2b+0xb8>)
 800a668:	18c0      	adds	r0, r0, r3
 800a66a:	9b08      	ldr	r3, [sp, #32]
 800a66c:	6018      	str	r0, [r3, #0]
 800a66e:	4b09      	ldr	r3, [pc, #36]	@ (800a694 <__d2b+0xbc>)
 800a670:	18f3      	adds	r3, r6, r3
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	18e3      	adds	r3, r4, r3
 800a676:	6958      	ldr	r0, [r3, #20]
 800a678:	f7ff fd16 	bl	800a0a8 <__hi0bits>
 800a67c:	0176      	lsls	r6, r6, #5
 800a67e:	e7e3      	b.n	800a648 <__d2b+0x70>
 800a680:	0800ceb0 	.word	0x0800ceb0
 800a684:	0800cec1 	.word	0x0800cec1
 800a688:	0000030f 	.word	0x0000030f
 800a68c:	fffffbcd 	.word	0xfffffbcd
 800a690:	fffffbce 	.word	0xfffffbce
 800a694:	3fffffff 	.word	0x3fffffff

0800a698 <__sflush_r>:
 800a698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a69a:	220c      	movs	r2, #12
 800a69c:	5e8b      	ldrsh	r3, [r1, r2]
 800a69e:	0005      	movs	r5, r0
 800a6a0:	000c      	movs	r4, r1
 800a6a2:	071a      	lsls	r2, r3, #28
 800a6a4:	d456      	bmi.n	800a754 <__sflush_r+0xbc>
 800a6a6:	684a      	ldr	r2, [r1, #4]
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	dc02      	bgt.n	800a6b2 <__sflush_r+0x1a>
 800a6ac:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	dd4e      	ble.n	800a750 <__sflush_r+0xb8>
 800a6b2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a6b4:	2f00      	cmp	r7, #0
 800a6b6:	d04b      	beq.n	800a750 <__sflush_r+0xb8>
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2080      	movs	r0, #128	@ 0x80
 800a6bc:	682e      	ldr	r6, [r5, #0]
 800a6be:	602a      	str	r2, [r5, #0]
 800a6c0:	001a      	movs	r2, r3
 800a6c2:	0140      	lsls	r0, r0, #5
 800a6c4:	6a21      	ldr	r1, [r4, #32]
 800a6c6:	4002      	ands	r2, r0
 800a6c8:	4203      	tst	r3, r0
 800a6ca:	d033      	beq.n	800a734 <__sflush_r+0x9c>
 800a6cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6ce:	89a3      	ldrh	r3, [r4, #12]
 800a6d0:	075b      	lsls	r3, r3, #29
 800a6d2:	d506      	bpl.n	800a6e2 <__sflush_r+0x4a>
 800a6d4:	6863      	ldr	r3, [r4, #4]
 800a6d6:	1ad2      	subs	r2, r2, r3
 800a6d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <__sflush_r+0x4a>
 800a6de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6e0:	1ad2      	subs	r2, r2, r3
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	0028      	movs	r0, r5
 800a6e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a6e8:	6a21      	ldr	r1, [r4, #32]
 800a6ea:	47b8      	blx	r7
 800a6ec:	89a2      	ldrh	r2, [r4, #12]
 800a6ee:	1c43      	adds	r3, r0, #1
 800a6f0:	d106      	bne.n	800a700 <__sflush_r+0x68>
 800a6f2:	6829      	ldr	r1, [r5, #0]
 800a6f4:	291d      	cmp	r1, #29
 800a6f6:	d846      	bhi.n	800a786 <__sflush_r+0xee>
 800a6f8:	4b29      	ldr	r3, [pc, #164]	@ (800a7a0 <__sflush_r+0x108>)
 800a6fa:	410b      	asrs	r3, r1
 800a6fc:	07db      	lsls	r3, r3, #31
 800a6fe:	d442      	bmi.n	800a786 <__sflush_r+0xee>
 800a700:	2300      	movs	r3, #0
 800a702:	6063      	str	r3, [r4, #4]
 800a704:	6923      	ldr	r3, [r4, #16]
 800a706:	6023      	str	r3, [r4, #0]
 800a708:	04d2      	lsls	r2, r2, #19
 800a70a:	d505      	bpl.n	800a718 <__sflush_r+0x80>
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	d102      	bne.n	800a716 <__sflush_r+0x7e>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d100      	bne.n	800a718 <__sflush_r+0x80>
 800a716:	6560      	str	r0, [r4, #84]	@ 0x54
 800a718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a71a:	602e      	str	r6, [r5, #0]
 800a71c:	2900      	cmp	r1, #0
 800a71e:	d017      	beq.n	800a750 <__sflush_r+0xb8>
 800a720:	0023      	movs	r3, r4
 800a722:	3344      	adds	r3, #68	@ 0x44
 800a724:	4299      	cmp	r1, r3
 800a726:	d002      	beq.n	800a72e <__sflush_r+0x96>
 800a728:	0028      	movs	r0, r5
 800a72a:	f7ff fb0b 	bl	8009d44 <_free_r>
 800a72e:	2300      	movs	r3, #0
 800a730:	6363      	str	r3, [r4, #52]	@ 0x34
 800a732:	e00d      	b.n	800a750 <__sflush_r+0xb8>
 800a734:	2301      	movs	r3, #1
 800a736:	0028      	movs	r0, r5
 800a738:	47b8      	blx	r7
 800a73a:	0002      	movs	r2, r0
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d1c6      	bne.n	800a6ce <__sflush_r+0x36>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0c3      	beq.n	800a6ce <__sflush_r+0x36>
 800a746:	2b1d      	cmp	r3, #29
 800a748:	d001      	beq.n	800a74e <__sflush_r+0xb6>
 800a74a:	2b16      	cmp	r3, #22
 800a74c:	d11a      	bne.n	800a784 <__sflush_r+0xec>
 800a74e:	602e      	str	r6, [r5, #0]
 800a750:	2000      	movs	r0, #0
 800a752:	e01e      	b.n	800a792 <__sflush_r+0xfa>
 800a754:	690e      	ldr	r6, [r1, #16]
 800a756:	2e00      	cmp	r6, #0
 800a758:	d0fa      	beq.n	800a750 <__sflush_r+0xb8>
 800a75a:	680f      	ldr	r7, [r1, #0]
 800a75c:	600e      	str	r6, [r1, #0]
 800a75e:	1bba      	subs	r2, r7, r6
 800a760:	9201      	str	r2, [sp, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	079b      	lsls	r3, r3, #30
 800a766:	d100      	bne.n	800a76a <__sflush_r+0xd2>
 800a768:	694a      	ldr	r2, [r1, #20]
 800a76a:	60a2      	str	r2, [r4, #8]
 800a76c:	9b01      	ldr	r3, [sp, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	ddee      	ble.n	800a750 <__sflush_r+0xb8>
 800a772:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a774:	0032      	movs	r2, r6
 800a776:	001f      	movs	r7, r3
 800a778:	0028      	movs	r0, r5
 800a77a:	9b01      	ldr	r3, [sp, #4]
 800a77c:	6a21      	ldr	r1, [r4, #32]
 800a77e:	47b8      	blx	r7
 800a780:	2800      	cmp	r0, #0
 800a782:	dc07      	bgt.n	800a794 <__sflush_r+0xfc>
 800a784:	89a2      	ldrh	r2, [r4, #12]
 800a786:	2340      	movs	r3, #64	@ 0x40
 800a788:	2001      	movs	r0, #1
 800a78a:	4313      	orrs	r3, r2
 800a78c:	b21b      	sxth	r3, r3
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	4240      	negs	r0, r0
 800a792:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a794:	9b01      	ldr	r3, [sp, #4]
 800a796:	1836      	adds	r6, r6, r0
 800a798:	1a1b      	subs	r3, r3, r0
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	e7e6      	b.n	800a76c <__sflush_r+0xd4>
 800a79e:	46c0      	nop			@ (mov r8, r8)
 800a7a0:	dfbffffe 	.word	0xdfbffffe

0800a7a4 <_fflush_r>:
 800a7a4:	690b      	ldr	r3, [r1, #16]
 800a7a6:	b570      	push	{r4, r5, r6, lr}
 800a7a8:	0005      	movs	r5, r0
 800a7aa:	000c      	movs	r4, r1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <_fflush_r+0x12>
 800a7b0:	2500      	movs	r5, #0
 800a7b2:	0028      	movs	r0, r5
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d004      	beq.n	800a7c4 <_fflush_r+0x20>
 800a7ba:	6a03      	ldr	r3, [r0, #32]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <_fflush_r+0x20>
 800a7c0:	f7fe fb22 	bl	8008e08 <__sinit>
 800a7c4:	220c      	movs	r2, #12
 800a7c6:	5ea3      	ldrsh	r3, [r4, r2]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0f1      	beq.n	800a7b0 <_fflush_r+0xc>
 800a7cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7ce:	07d2      	lsls	r2, r2, #31
 800a7d0:	d404      	bmi.n	800a7dc <_fflush_r+0x38>
 800a7d2:	059b      	lsls	r3, r3, #22
 800a7d4:	d402      	bmi.n	800a7dc <_fflush_r+0x38>
 800a7d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7d8:	f7fe fc1b 	bl	8009012 <__retarget_lock_acquire_recursive>
 800a7dc:	0028      	movs	r0, r5
 800a7de:	0021      	movs	r1, r4
 800a7e0:	f7ff ff5a 	bl	800a698 <__sflush_r>
 800a7e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7e6:	0005      	movs	r5, r0
 800a7e8:	07db      	lsls	r3, r3, #31
 800a7ea:	d4e2      	bmi.n	800a7b2 <_fflush_r+0xe>
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	059b      	lsls	r3, r3, #22
 800a7f0:	d4df      	bmi.n	800a7b2 <_fflush_r+0xe>
 800a7f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7f4:	f7fe fc0e 	bl	8009014 <__retarget_lock_release_recursive>
 800a7f8:	e7db      	b.n	800a7b2 <_fflush_r+0xe>
	...

0800a7fc <_sbrk_r>:
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	b570      	push	{r4, r5, r6, lr}
 800a800:	4d06      	ldr	r5, [pc, #24]	@ (800a81c <_sbrk_r+0x20>)
 800a802:	0004      	movs	r4, r0
 800a804:	0008      	movs	r0, r1
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	f7f9 fbe4 	bl	8003fd4 <_sbrk>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d103      	bne.n	800a818 <_sbrk_r+0x1c>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d000      	beq.n	800a818 <_sbrk_r+0x1c>
 800a816:	6023      	str	r3, [r4, #0]
 800a818:	bd70      	pop	{r4, r5, r6, pc}
 800a81a:	46c0      	nop			@ (mov r8, r8)
 800a81c:	20000f9c 	.word	0x20000f9c

0800a820 <__assert_func>:
 800a820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a822:	0014      	movs	r4, r2
 800a824:	001a      	movs	r2, r3
 800a826:	4b09      	ldr	r3, [pc, #36]	@ (800a84c <__assert_func+0x2c>)
 800a828:	0005      	movs	r5, r0
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	000e      	movs	r6, r1
 800a82e:	68d8      	ldr	r0, [r3, #12]
 800a830:	4b07      	ldr	r3, [pc, #28]	@ (800a850 <__assert_func+0x30>)
 800a832:	2c00      	cmp	r4, #0
 800a834:	d101      	bne.n	800a83a <__assert_func+0x1a>
 800a836:	4b07      	ldr	r3, [pc, #28]	@ (800a854 <__assert_func+0x34>)
 800a838:	001c      	movs	r4, r3
 800a83a:	4907      	ldr	r1, [pc, #28]	@ (800a858 <__assert_func+0x38>)
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	9402      	str	r4, [sp, #8]
 800a840:	002b      	movs	r3, r5
 800a842:	9600      	str	r6, [sp, #0]
 800a844:	f000 f856 	bl	800a8f4 <fiprintf>
 800a848:	f000 f864 	bl	800a914 <abort>
 800a84c:	20000064 	.word	0x20000064
 800a850:	0800d022 	.word	0x0800d022
 800a854:	0800d05d 	.word	0x0800d05d
 800a858:	0800d02f 	.word	0x0800d02f

0800a85c <_calloc_r>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	0c0b      	lsrs	r3, r1, #16
 800a860:	0c15      	lsrs	r5, r2, #16
 800a862:	2b00      	cmp	r3, #0
 800a864:	d11e      	bne.n	800a8a4 <_calloc_r+0x48>
 800a866:	2d00      	cmp	r5, #0
 800a868:	d10c      	bne.n	800a884 <_calloc_r+0x28>
 800a86a:	b289      	uxth	r1, r1
 800a86c:	b294      	uxth	r4, r2
 800a86e:	434c      	muls	r4, r1
 800a870:	0021      	movs	r1, r4
 800a872:	f7ff fadd 	bl	8009e30 <_malloc_r>
 800a876:	1e05      	subs	r5, r0, #0
 800a878:	d01a      	beq.n	800a8b0 <_calloc_r+0x54>
 800a87a:	0022      	movs	r2, r4
 800a87c:	2100      	movs	r1, #0
 800a87e:	f7fe fb43 	bl	8008f08 <memset>
 800a882:	e016      	b.n	800a8b2 <_calloc_r+0x56>
 800a884:	1c2b      	adds	r3, r5, #0
 800a886:	1c0c      	adds	r4, r1, #0
 800a888:	b289      	uxth	r1, r1
 800a88a:	b292      	uxth	r2, r2
 800a88c:	434a      	muls	r2, r1
 800a88e:	b29b      	uxth	r3, r3
 800a890:	b2a1      	uxth	r1, r4
 800a892:	4359      	muls	r1, r3
 800a894:	0c14      	lsrs	r4, r2, #16
 800a896:	190c      	adds	r4, r1, r4
 800a898:	0c23      	lsrs	r3, r4, #16
 800a89a:	d107      	bne.n	800a8ac <_calloc_r+0x50>
 800a89c:	0424      	lsls	r4, r4, #16
 800a89e:	b292      	uxth	r2, r2
 800a8a0:	4314      	orrs	r4, r2
 800a8a2:	e7e5      	b.n	800a870 <_calloc_r+0x14>
 800a8a4:	2d00      	cmp	r5, #0
 800a8a6:	d101      	bne.n	800a8ac <_calloc_r+0x50>
 800a8a8:	1c14      	adds	r4, r2, #0
 800a8aa:	e7ed      	b.n	800a888 <_calloc_r+0x2c>
 800a8ac:	230c      	movs	r3, #12
 800a8ae:	6003      	str	r3, [r0, #0]
 800a8b0:	2500      	movs	r5, #0
 800a8b2:	0028      	movs	r0, r5
 800a8b4:	bd70      	pop	{r4, r5, r6, pc}

0800a8b6 <__ascii_mbtowc>:
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	2900      	cmp	r1, #0
 800a8ba:	d100      	bne.n	800a8be <__ascii_mbtowc+0x8>
 800a8bc:	a901      	add	r1, sp, #4
 800a8be:	1e10      	subs	r0, r2, #0
 800a8c0:	d006      	beq.n	800a8d0 <__ascii_mbtowc+0x1a>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d006      	beq.n	800a8d4 <__ascii_mbtowc+0x1e>
 800a8c6:	7813      	ldrb	r3, [r2, #0]
 800a8c8:	600b      	str	r3, [r1, #0]
 800a8ca:	7810      	ldrb	r0, [r2, #0]
 800a8cc:	1e43      	subs	r3, r0, #1
 800a8ce:	4198      	sbcs	r0, r3
 800a8d0:	b002      	add	sp, #8
 800a8d2:	4770      	bx	lr
 800a8d4:	2002      	movs	r0, #2
 800a8d6:	4240      	negs	r0, r0
 800a8d8:	e7fa      	b.n	800a8d0 <__ascii_mbtowc+0x1a>

0800a8da <__ascii_wctomb>:
 800a8da:	0003      	movs	r3, r0
 800a8dc:	1e08      	subs	r0, r1, #0
 800a8de:	d005      	beq.n	800a8ec <__ascii_wctomb+0x12>
 800a8e0:	2aff      	cmp	r2, #255	@ 0xff
 800a8e2:	d904      	bls.n	800a8ee <__ascii_wctomb+0x14>
 800a8e4:	228a      	movs	r2, #138	@ 0x8a
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	4240      	negs	r0, r0
 800a8ec:	4770      	bx	lr
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	700a      	strb	r2, [r1, #0]
 800a8f2:	e7fb      	b.n	800a8ec <__ascii_wctomb+0x12>

0800a8f4 <fiprintf>:
 800a8f4:	b40e      	push	{r1, r2, r3}
 800a8f6:	b517      	push	{r0, r1, r2, r4, lr}
 800a8f8:	4c05      	ldr	r4, [pc, #20]	@ (800a910 <fiprintf+0x1c>)
 800a8fa:	ab05      	add	r3, sp, #20
 800a8fc:	cb04      	ldmia	r3!, {r2}
 800a8fe:	0001      	movs	r1, r0
 800a900:	6820      	ldr	r0, [r4, #0]
 800a902:	9301      	str	r3, [sp, #4]
 800a904:	f000 f834 	bl	800a970 <_vfiprintf_r>
 800a908:	bc1e      	pop	{r1, r2, r3, r4}
 800a90a:	bc08      	pop	{r3}
 800a90c:	b003      	add	sp, #12
 800a90e:	4718      	bx	r3
 800a910:	20000064 	.word	0x20000064

0800a914 <abort>:
 800a914:	2006      	movs	r0, #6
 800a916:	b510      	push	{r4, lr}
 800a918:	f000 fa10 	bl	800ad3c <raise>
 800a91c:	2001      	movs	r0, #1
 800a91e:	f7f9 fae7 	bl	8003ef0 <_exit>

0800a922 <__sfputc_r>:
 800a922:	6893      	ldr	r3, [r2, #8]
 800a924:	b510      	push	{r4, lr}
 800a926:	3b01      	subs	r3, #1
 800a928:	6093      	str	r3, [r2, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da04      	bge.n	800a938 <__sfputc_r+0x16>
 800a92e:	6994      	ldr	r4, [r2, #24]
 800a930:	42a3      	cmp	r3, r4
 800a932:	db07      	blt.n	800a944 <__sfputc_r+0x22>
 800a934:	290a      	cmp	r1, #10
 800a936:	d005      	beq.n	800a944 <__sfputc_r+0x22>
 800a938:	6813      	ldr	r3, [r2, #0]
 800a93a:	1c58      	adds	r0, r3, #1
 800a93c:	6010      	str	r0, [r2, #0]
 800a93e:	7019      	strb	r1, [r3, #0]
 800a940:	0008      	movs	r0, r1
 800a942:	bd10      	pop	{r4, pc}
 800a944:	f000 f930 	bl	800aba8 <__swbuf_r>
 800a948:	0001      	movs	r1, r0
 800a94a:	e7f9      	b.n	800a940 <__sfputc_r+0x1e>

0800a94c <__sfputs_r>:
 800a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94e:	0006      	movs	r6, r0
 800a950:	000f      	movs	r7, r1
 800a952:	0014      	movs	r4, r2
 800a954:	18d5      	adds	r5, r2, r3
 800a956:	42ac      	cmp	r4, r5
 800a958:	d101      	bne.n	800a95e <__sfputs_r+0x12>
 800a95a:	2000      	movs	r0, #0
 800a95c:	e007      	b.n	800a96e <__sfputs_r+0x22>
 800a95e:	7821      	ldrb	r1, [r4, #0]
 800a960:	003a      	movs	r2, r7
 800a962:	0030      	movs	r0, r6
 800a964:	f7ff ffdd 	bl	800a922 <__sfputc_r>
 800a968:	3401      	adds	r4, #1
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	d1f3      	bne.n	800a956 <__sfputs_r+0xa>
 800a96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a970 <_vfiprintf_r>:
 800a970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a972:	b0a1      	sub	sp, #132	@ 0x84
 800a974:	000f      	movs	r7, r1
 800a976:	0015      	movs	r5, r2
 800a978:	001e      	movs	r6, r3
 800a97a:	9003      	str	r0, [sp, #12]
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d004      	beq.n	800a98a <_vfiprintf_r+0x1a>
 800a980:	6a03      	ldr	r3, [r0, #32]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <_vfiprintf_r+0x1a>
 800a986:	f7fe fa3f 	bl	8008e08 <__sinit>
 800a98a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a98c:	07db      	lsls	r3, r3, #31
 800a98e:	d405      	bmi.n	800a99c <_vfiprintf_r+0x2c>
 800a990:	89bb      	ldrh	r3, [r7, #12]
 800a992:	059b      	lsls	r3, r3, #22
 800a994:	d402      	bmi.n	800a99c <_vfiprintf_r+0x2c>
 800a996:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a998:	f7fe fb3b 	bl	8009012 <__retarget_lock_acquire_recursive>
 800a99c:	89bb      	ldrh	r3, [r7, #12]
 800a99e:	071b      	lsls	r3, r3, #28
 800a9a0:	d502      	bpl.n	800a9a8 <_vfiprintf_r+0x38>
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d113      	bne.n	800a9d0 <_vfiprintf_r+0x60>
 800a9a8:	0039      	movs	r1, r7
 800a9aa:	9803      	ldr	r0, [sp, #12]
 800a9ac:	f000 f93e 	bl	800ac2c <__swsetup_r>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d00d      	beq.n	800a9d0 <_vfiprintf_r+0x60>
 800a9b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9b6:	07db      	lsls	r3, r3, #31
 800a9b8:	d503      	bpl.n	800a9c2 <_vfiprintf_r+0x52>
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	4240      	negs	r0, r0
 800a9be:	b021      	add	sp, #132	@ 0x84
 800a9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c2:	89bb      	ldrh	r3, [r7, #12]
 800a9c4:	059b      	lsls	r3, r3, #22
 800a9c6:	d4f8      	bmi.n	800a9ba <_vfiprintf_r+0x4a>
 800a9c8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a9ca:	f7fe fb23 	bl	8009014 <__retarget_lock_release_recursive>
 800a9ce:	e7f4      	b.n	800a9ba <_vfiprintf_r+0x4a>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	ac08      	add	r4, sp, #32
 800a9d4:	6163      	str	r3, [r4, #20]
 800a9d6:	3320      	adds	r3, #32
 800a9d8:	7663      	strb	r3, [r4, #25]
 800a9da:	3310      	adds	r3, #16
 800a9dc:	76a3      	strb	r3, [r4, #26]
 800a9de:	9607      	str	r6, [sp, #28]
 800a9e0:	002e      	movs	r6, r5
 800a9e2:	7833      	ldrb	r3, [r6, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <_vfiprintf_r+0x7c>
 800a9e8:	2b25      	cmp	r3, #37	@ 0x25
 800a9ea:	d148      	bne.n	800aa7e <_vfiprintf_r+0x10e>
 800a9ec:	1b73      	subs	r3, r6, r5
 800a9ee:	9305      	str	r3, [sp, #20]
 800a9f0:	42ae      	cmp	r6, r5
 800a9f2:	d00b      	beq.n	800aa0c <_vfiprintf_r+0x9c>
 800a9f4:	002a      	movs	r2, r5
 800a9f6:	0039      	movs	r1, r7
 800a9f8:	9803      	ldr	r0, [sp, #12]
 800a9fa:	f7ff ffa7 	bl	800a94c <__sfputs_r>
 800a9fe:	3001      	adds	r0, #1
 800aa00:	d100      	bne.n	800aa04 <_vfiprintf_r+0x94>
 800aa02:	e0ae      	b.n	800ab62 <_vfiprintf_r+0x1f2>
 800aa04:	6963      	ldr	r3, [r4, #20]
 800aa06:	9a05      	ldr	r2, [sp, #20]
 800aa08:	189b      	adds	r3, r3, r2
 800aa0a:	6163      	str	r3, [r4, #20]
 800aa0c:	7833      	ldrb	r3, [r6, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d100      	bne.n	800aa14 <_vfiprintf_r+0xa4>
 800aa12:	e0a6      	b.n	800ab62 <_vfiprintf_r+0x1f2>
 800aa14:	2201      	movs	r2, #1
 800aa16:	2300      	movs	r3, #0
 800aa18:	4252      	negs	r2, r2
 800aa1a:	6062      	str	r2, [r4, #4]
 800aa1c:	a904      	add	r1, sp, #16
 800aa1e:	3254      	adds	r2, #84	@ 0x54
 800aa20:	1852      	adds	r2, r2, r1
 800aa22:	1c75      	adds	r5, r6, #1
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	60e3      	str	r3, [r4, #12]
 800aa28:	60a3      	str	r3, [r4, #8]
 800aa2a:	7013      	strb	r3, [r2, #0]
 800aa2c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800aa2e:	4b59      	ldr	r3, [pc, #356]	@ (800ab94 <_vfiprintf_r+0x224>)
 800aa30:	2205      	movs	r2, #5
 800aa32:	0018      	movs	r0, r3
 800aa34:	7829      	ldrb	r1, [r5, #0]
 800aa36:	9305      	str	r3, [sp, #20]
 800aa38:	f7fe faed 	bl	8009016 <memchr>
 800aa3c:	1c6e      	adds	r6, r5, #1
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d11f      	bne.n	800aa82 <_vfiprintf_r+0x112>
 800aa42:	6822      	ldr	r2, [r4, #0]
 800aa44:	06d3      	lsls	r3, r2, #27
 800aa46:	d504      	bpl.n	800aa52 <_vfiprintf_r+0xe2>
 800aa48:	2353      	movs	r3, #83	@ 0x53
 800aa4a:	a904      	add	r1, sp, #16
 800aa4c:	185b      	adds	r3, r3, r1
 800aa4e:	2120      	movs	r1, #32
 800aa50:	7019      	strb	r1, [r3, #0]
 800aa52:	0713      	lsls	r3, r2, #28
 800aa54:	d504      	bpl.n	800aa60 <_vfiprintf_r+0xf0>
 800aa56:	2353      	movs	r3, #83	@ 0x53
 800aa58:	a904      	add	r1, sp, #16
 800aa5a:	185b      	adds	r3, r3, r1
 800aa5c:	212b      	movs	r1, #43	@ 0x2b
 800aa5e:	7019      	strb	r1, [r3, #0]
 800aa60:	782b      	ldrb	r3, [r5, #0]
 800aa62:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa64:	d016      	beq.n	800aa94 <_vfiprintf_r+0x124>
 800aa66:	002e      	movs	r6, r5
 800aa68:	2100      	movs	r1, #0
 800aa6a:	200a      	movs	r0, #10
 800aa6c:	68e3      	ldr	r3, [r4, #12]
 800aa6e:	7832      	ldrb	r2, [r6, #0]
 800aa70:	1c75      	adds	r5, r6, #1
 800aa72:	3a30      	subs	r2, #48	@ 0x30
 800aa74:	2a09      	cmp	r2, #9
 800aa76:	d950      	bls.n	800ab1a <_vfiprintf_r+0x1aa>
 800aa78:	2900      	cmp	r1, #0
 800aa7a:	d111      	bne.n	800aaa0 <_vfiprintf_r+0x130>
 800aa7c:	e017      	b.n	800aaae <_vfiprintf_r+0x13e>
 800aa7e:	3601      	adds	r6, #1
 800aa80:	e7af      	b.n	800a9e2 <_vfiprintf_r+0x72>
 800aa82:	9b05      	ldr	r3, [sp, #20]
 800aa84:	6822      	ldr	r2, [r4, #0]
 800aa86:	1ac0      	subs	r0, r0, r3
 800aa88:	2301      	movs	r3, #1
 800aa8a:	4083      	lsls	r3, r0
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	0035      	movs	r5, r6
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	e7cc      	b.n	800aa2e <_vfiprintf_r+0xbe>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	1d19      	adds	r1, r3, #4
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	9107      	str	r1, [sp, #28]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	db01      	blt.n	800aaa4 <_vfiprintf_r+0x134>
 800aaa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaa2:	e004      	b.n	800aaae <_vfiprintf_r+0x13e>
 800aaa4:	425b      	negs	r3, r3
 800aaa6:	60e3      	str	r3, [r4, #12]
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	7833      	ldrb	r3, [r6, #0]
 800aab0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aab2:	d10c      	bne.n	800aace <_vfiprintf_r+0x15e>
 800aab4:	7873      	ldrb	r3, [r6, #1]
 800aab6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aab8:	d134      	bne.n	800ab24 <_vfiprintf_r+0x1b4>
 800aaba:	9b07      	ldr	r3, [sp, #28]
 800aabc:	3602      	adds	r6, #2
 800aabe:	1d1a      	adds	r2, r3, #4
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	9207      	str	r2, [sp, #28]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	da01      	bge.n	800aacc <_vfiprintf_r+0x15c>
 800aac8:	2301      	movs	r3, #1
 800aaca:	425b      	negs	r3, r3
 800aacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aace:	4d32      	ldr	r5, [pc, #200]	@ (800ab98 <_vfiprintf_r+0x228>)
 800aad0:	2203      	movs	r2, #3
 800aad2:	0028      	movs	r0, r5
 800aad4:	7831      	ldrb	r1, [r6, #0]
 800aad6:	f7fe fa9e 	bl	8009016 <memchr>
 800aada:	2800      	cmp	r0, #0
 800aadc:	d006      	beq.n	800aaec <_vfiprintf_r+0x17c>
 800aade:	2340      	movs	r3, #64	@ 0x40
 800aae0:	1b40      	subs	r0, r0, r5
 800aae2:	4083      	lsls	r3, r0
 800aae4:	6822      	ldr	r2, [r4, #0]
 800aae6:	3601      	adds	r6, #1
 800aae8:	4313      	orrs	r3, r2
 800aaea:	6023      	str	r3, [r4, #0]
 800aaec:	7831      	ldrb	r1, [r6, #0]
 800aaee:	2206      	movs	r2, #6
 800aaf0:	482a      	ldr	r0, [pc, #168]	@ (800ab9c <_vfiprintf_r+0x22c>)
 800aaf2:	1c75      	adds	r5, r6, #1
 800aaf4:	7621      	strb	r1, [r4, #24]
 800aaf6:	f7fe fa8e 	bl	8009016 <memchr>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d040      	beq.n	800ab80 <_vfiprintf_r+0x210>
 800aafe:	4b28      	ldr	r3, [pc, #160]	@ (800aba0 <_vfiprintf_r+0x230>)
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d122      	bne.n	800ab4a <_vfiprintf_r+0x1da>
 800ab04:	2207      	movs	r2, #7
 800ab06:	9b07      	ldr	r3, [sp, #28]
 800ab08:	3307      	adds	r3, #7
 800ab0a:	4393      	bics	r3, r2
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	9307      	str	r3, [sp, #28]
 800ab10:	6963      	ldr	r3, [r4, #20]
 800ab12:	9a04      	ldr	r2, [sp, #16]
 800ab14:	189b      	adds	r3, r3, r2
 800ab16:	6163      	str	r3, [r4, #20]
 800ab18:	e762      	b.n	800a9e0 <_vfiprintf_r+0x70>
 800ab1a:	4343      	muls	r3, r0
 800ab1c:	002e      	movs	r6, r5
 800ab1e:	2101      	movs	r1, #1
 800ab20:	189b      	adds	r3, r3, r2
 800ab22:	e7a4      	b.n	800aa6e <_vfiprintf_r+0xfe>
 800ab24:	2300      	movs	r3, #0
 800ab26:	200a      	movs	r0, #10
 800ab28:	0019      	movs	r1, r3
 800ab2a:	3601      	adds	r6, #1
 800ab2c:	6063      	str	r3, [r4, #4]
 800ab2e:	7832      	ldrb	r2, [r6, #0]
 800ab30:	1c75      	adds	r5, r6, #1
 800ab32:	3a30      	subs	r2, #48	@ 0x30
 800ab34:	2a09      	cmp	r2, #9
 800ab36:	d903      	bls.n	800ab40 <_vfiprintf_r+0x1d0>
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d0c8      	beq.n	800aace <_vfiprintf_r+0x15e>
 800ab3c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab3e:	e7c6      	b.n	800aace <_vfiprintf_r+0x15e>
 800ab40:	4341      	muls	r1, r0
 800ab42:	002e      	movs	r6, r5
 800ab44:	2301      	movs	r3, #1
 800ab46:	1889      	adds	r1, r1, r2
 800ab48:	e7f1      	b.n	800ab2e <_vfiprintf_r+0x1be>
 800ab4a:	aa07      	add	r2, sp, #28
 800ab4c:	9200      	str	r2, [sp, #0]
 800ab4e:	0021      	movs	r1, r4
 800ab50:	003a      	movs	r2, r7
 800ab52:	4b14      	ldr	r3, [pc, #80]	@ (800aba4 <_vfiprintf_r+0x234>)
 800ab54:	9803      	ldr	r0, [sp, #12]
 800ab56:	f7fd fd0b 	bl	8008570 <_printf_float>
 800ab5a:	9004      	str	r0, [sp, #16]
 800ab5c:	9b04      	ldr	r3, [sp, #16]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	d1d6      	bne.n	800ab10 <_vfiprintf_r+0x1a0>
 800ab62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab64:	07db      	lsls	r3, r3, #31
 800ab66:	d405      	bmi.n	800ab74 <_vfiprintf_r+0x204>
 800ab68:	89bb      	ldrh	r3, [r7, #12]
 800ab6a:	059b      	lsls	r3, r3, #22
 800ab6c:	d402      	bmi.n	800ab74 <_vfiprintf_r+0x204>
 800ab6e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ab70:	f7fe fa50 	bl	8009014 <__retarget_lock_release_recursive>
 800ab74:	89bb      	ldrh	r3, [r7, #12]
 800ab76:	065b      	lsls	r3, r3, #25
 800ab78:	d500      	bpl.n	800ab7c <_vfiprintf_r+0x20c>
 800ab7a:	e71e      	b.n	800a9ba <_vfiprintf_r+0x4a>
 800ab7c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ab7e:	e71e      	b.n	800a9be <_vfiprintf_r+0x4e>
 800ab80:	aa07      	add	r2, sp, #28
 800ab82:	9200      	str	r2, [sp, #0]
 800ab84:	0021      	movs	r1, r4
 800ab86:	003a      	movs	r2, r7
 800ab88:	4b06      	ldr	r3, [pc, #24]	@ (800aba4 <_vfiprintf_r+0x234>)
 800ab8a:	9803      	ldr	r0, [sp, #12]
 800ab8c:	f7fd ff9e 	bl	8008acc <_printf_i>
 800ab90:	e7e3      	b.n	800ab5a <_vfiprintf_r+0x1ea>
 800ab92:	46c0      	nop			@ (mov r8, r8)
 800ab94:	0800d15f 	.word	0x0800d15f
 800ab98:	0800d165 	.word	0x0800d165
 800ab9c:	0800d169 	.word	0x0800d169
 800aba0:	08008571 	.word	0x08008571
 800aba4:	0800a94d 	.word	0x0800a94d

0800aba8 <__swbuf_r>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	0006      	movs	r6, r0
 800abac:	000d      	movs	r5, r1
 800abae:	0014      	movs	r4, r2
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d004      	beq.n	800abbe <__swbuf_r+0x16>
 800abb4:	6a03      	ldr	r3, [r0, #32]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <__swbuf_r+0x16>
 800abba:	f7fe f925 	bl	8008e08 <__sinit>
 800abbe:	69a3      	ldr	r3, [r4, #24]
 800abc0:	60a3      	str	r3, [r4, #8]
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	071b      	lsls	r3, r3, #28
 800abc6:	d502      	bpl.n	800abce <__swbuf_r+0x26>
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d109      	bne.n	800abe2 <__swbuf_r+0x3a>
 800abce:	0021      	movs	r1, r4
 800abd0:	0030      	movs	r0, r6
 800abd2:	f000 f82b 	bl	800ac2c <__swsetup_r>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d003      	beq.n	800abe2 <__swbuf_r+0x3a>
 800abda:	2501      	movs	r5, #1
 800abdc:	426d      	negs	r5, r5
 800abde:	0028      	movs	r0, r5
 800abe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe2:	6923      	ldr	r3, [r4, #16]
 800abe4:	6820      	ldr	r0, [r4, #0]
 800abe6:	b2ef      	uxtb	r7, r5
 800abe8:	1ac0      	subs	r0, r0, r3
 800abea:	6963      	ldr	r3, [r4, #20]
 800abec:	b2ed      	uxtb	r5, r5
 800abee:	4283      	cmp	r3, r0
 800abf0:	dc05      	bgt.n	800abfe <__swbuf_r+0x56>
 800abf2:	0021      	movs	r1, r4
 800abf4:	0030      	movs	r0, r6
 800abf6:	f7ff fdd5 	bl	800a7a4 <_fflush_r>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d1ed      	bne.n	800abda <__swbuf_r+0x32>
 800abfe:	68a3      	ldr	r3, [r4, #8]
 800ac00:	3001      	adds	r0, #1
 800ac02:	3b01      	subs	r3, #1
 800ac04:	60a3      	str	r3, [r4, #8]
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	1c5a      	adds	r2, r3, #1
 800ac0a:	6022      	str	r2, [r4, #0]
 800ac0c:	701f      	strb	r7, [r3, #0]
 800ac0e:	6963      	ldr	r3, [r4, #20]
 800ac10:	4283      	cmp	r3, r0
 800ac12:	d004      	beq.n	800ac1e <__swbuf_r+0x76>
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	07db      	lsls	r3, r3, #31
 800ac18:	d5e1      	bpl.n	800abde <__swbuf_r+0x36>
 800ac1a:	2d0a      	cmp	r5, #10
 800ac1c:	d1df      	bne.n	800abde <__swbuf_r+0x36>
 800ac1e:	0021      	movs	r1, r4
 800ac20:	0030      	movs	r0, r6
 800ac22:	f7ff fdbf 	bl	800a7a4 <_fflush_r>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d0d9      	beq.n	800abde <__swbuf_r+0x36>
 800ac2a:	e7d6      	b.n	800abda <__swbuf_r+0x32>

0800ac2c <__swsetup_r>:
 800ac2c:	4b2d      	ldr	r3, [pc, #180]	@ (800ace4 <__swsetup_r+0xb8>)
 800ac2e:	b570      	push	{r4, r5, r6, lr}
 800ac30:	0005      	movs	r5, r0
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	000c      	movs	r4, r1
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d004      	beq.n	800ac44 <__swsetup_r+0x18>
 800ac3a:	6a03      	ldr	r3, [r0, #32]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <__swsetup_r+0x18>
 800ac40:	f7fe f8e2 	bl	8008e08 <__sinit>
 800ac44:	230c      	movs	r3, #12
 800ac46:	5ee2      	ldrsh	r2, [r4, r3]
 800ac48:	0713      	lsls	r3, r2, #28
 800ac4a:	d423      	bmi.n	800ac94 <__swsetup_r+0x68>
 800ac4c:	06d3      	lsls	r3, r2, #27
 800ac4e:	d407      	bmi.n	800ac60 <__swsetup_r+0x34>
 800ac50:	2309      	movs	r3, #9
 800ac52:	602b      	str	r3, [r5, #0]
 800ac54:	2340      	movs	r3, #64	@ 0x40
 800ac56:	2001      	movs	r0, #1
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	81a3      	strh	r3, [r4, #12]
 800ac5c:	4240      	negs	r0, r0
 800ac5e:	e03a      	b.n	800acd6 <__swsetup_r+0xaa>
 800ac60:	0752      	lsls	r2, r2, #29
 800ac62:	d513      	bpl.n	800ac8c <__swsetup_r+0x60>
 800ac64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac66:	2900      	cmp	r1, #0
 800ac68:	d008      	beq.n	800ac7c <__swsetup_r+0x50>
 800ac6a:	0023      	movs	r3, r4
 800ac6c:	3344      	adds	r3, #68	@ 0x44
 800ac6e:	4299      	cmp	r1, r3
 800ac70:	d002      	beq.n	800ac78 <__swsetup_r+0x4c>
 800ac72:	0028      	movs	r0, r5
 800ac74:	f7ff f866 	bl	8009d44 <_free_r>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac7c:	2224      	movs	r2, #36	@ 0x24
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	4393      	bics	r3, r2
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	2300      	movs	r3, #0
 800ac86:	6063      	str	r3, [r4, #4]
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	2308      	movs	r3, #8
 800ac8e:	89a2      	ldrh	r2, [r4, #12]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	81a3      	strh	r3, [r4, #12]
 800ac94:	6923      	ldr	r3, [r4, #16]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10b      	bne.n	800acb2 <__swsetup_r+0x86>
 800ac9a:	21a0      	movs	r1, #160	@ 0xa0
 800ac9c:	2280      	movs	r2, #128	@ 0x80
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	0089      	lsls	r1, r1, #2
 800aca2:	0092      	lsls	r2, r2, #2
 800aca4:	400b      	ands	r3, r1
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d003      	beq.n	800acb2 <__swsetup_r+0x86>
 800acaa:	0021      	movs	r1, r4
 800acac:	0028      	movs	r0, r5
 800acae:	f000 f88f 	bl	800add0 <__smakebuf_r>
 800acb2:	230c      	movs	r3, #12
 800acb4:	5ee2      	ldrsh	r2, [r4, r3]
 800acb6:	2101      	movs	r1, #1
 800acb8:	0013      	movs	r3, r2
 800acba:	400b      	ands	r3, r1
 800acbc:	420a      	tst	r2, r1
 800acbe:	d00b      	beq.n	800acd8 <__swsetup_r+0xac>
 800acc0:	2300      	movs	r3, #0
 800acc2:	60a3      	str	r3, [r4, #8]
 800acc4:	6963      	ldr	r3, [r4, #20]
 800acc6:	425b      	negs	r3, r3
 800acc8:	61a3      	str	r3, [r4, #24]
 800acca:	2000      	movs	r0, #0
 800accc:	6923      	ldr	r3, [r4, #16]
 800acce:	4283      	cmp	r3, r0
 800acd0:	d101      	bne.n	800acd6 <__swsetup_r+0xaa>
 800acd2:	0613      	lsls	r3, r2, #24
 800acd4:	d4be      	bmi.n	800ac54 <__swsetup_r+0x28>
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	0791      	lsls	r1, r2, #30
 800acda:	d400      	bmi.n	800acde <__swsetup_r+0xb2>
 800acdc:	6963      	ldr	r3, [r4, #20]
 800acde:	60a3      	str	r3, [r4, #8]
 800ace0:	e7f3      	b.n	800acca <__swsetup_r+0x9e>
 800ace2:	46c0      	nop			@ (mov r8, r8)
 800ace4:	20000064 	.word	0x20000064

0800ace8 <_raise_r>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	0004      	movs	r4, r0
 800acec:	000d      	movs	r5, r1
 800acee:	291f      	cmp	r1, #31
 800acf0:	d904      	bls.n	800acfc <_raise_r+0x14>
 800acf2:	2316      	movs	r3, #22
 800acf4:	6003      	str	r3, [r0, #0]
 800acf6:	2001      	movs	r0, #1
 800acf8:	4240      	negs	r0, r0
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d004      	beq.n	800ad0c <_raise_r+0x24>
 800ad02:	008a      	lsls	r2, r1, #2
 800ad04:	189b      	adds	r3, r3, r2
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	d108      	bne.n	800ad1e <_raise_r+0x36>
 800ad0c:	0020      	movs	r0, r4
 800ad0e:	f000 f831 	bl	800ad74 <_getpid_r>
 800ad12:	002a      	movs	r2, r5
 800ad14:	0001      	movs	r1, r0
 800ad16:	0020      	movs	r0, r4
 800ad18:	f000 f81a 	bl	800ad50 <_kill_r>
 800ad1c:	e7ed      	b.n	800acfa <_raise_r+0x12>
 800ad1e:	2a01      	cmp	r2, #1
 800ad20:	d009      	beq.n	800ad36 <_raise_r+0x4e>
 800ad22:	1c51      	adds	r1, r2, #1
 800ad24:	d103      	bne.n	800ad2e <_raise_r+0x46>
 800ad26:	2316      	movs	r3, #22
 800ad28:	6003      	str	r3, [r0, #0]
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	e7e5      	b.n	800acfa <_raise_r+0x12>
 800ad2e:	2100      	movs	r1, #0
 800ad30:	0028      	movs	r0, r5
 800ad32:	6019      	str	r1, [r3, #0]
 800ad34:	4790      	blx	r2
 800ad36:	2000      	movs	r0, #0
 800ad38:	e7df      	b.n	800acfa <_raise_r+0x12>
	...

0800ad3c <raise>:
 800ad3c:	b510      	push	{r4, lr}
 800ad3e:	4b03      	ldr	r3, [pc, #12]	@ (800ad4c <raise+0x10>)
 800ad40:	0001      	movs	r1, r0
 800ad42:	6818      	ldr	r0, [r3, #0]
 800ad44:	f7ff ffd0 	bl	800ace8 <_raise_r>
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	46c0      	nop			@ (mov r8, r8)
 800ad4c:	20000064 	.word	0x20000064

0800ad50 <_kill_r>:
 800ad50:	2300      	movs	r3, #0
 800ad52:	b570      	push	{r4, r5, r6, lr}
 800ad54:	4d06      	ldr	r5, [pc, #24]	@ (800ad70 <_kill_r+0x20>)
 800ad56:	0004      	movs	r4, r0
 800ad58:	0008      	movs	r0, r1
 800ad5a:	0011      	movs	r1, r2
 800ad5c:	602b      	str	r3, [r5, #0]
 800ad5e:	f7f9 f8b7 	bl	8003ed0 <_kill>
 800ad62:	1c43      	adds	r3, r0, #1
 800ad64:	d103      	bne.n	800ad6e <_kill_r+0x1e>
 800ad66:	682b      	ldr	r3, [r5, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d000      	beq.n	800ad6e <_kill_r+0x1e>
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	20000f9c 	.word	0x20000f9c

0800ad74 <_getpid_r>:
 800ad74:	b510      	push	{r4, lr}
 800ad76:	f7f9 f8a5 	bl	8003ec4 <_getpid>
 800ad7a:	bd10      	pop	{r4, pc}

0800ad7c <__swhatbuf_r>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	000e      	movs	r6, r1
 800ad80:	001d      	movs	r5, r3
 800ad82:	230e      	movs	r3, #14
 800ad84:	5ec9      	ldrsh	r1, [r1, r3]
 800ad86:	0014      	movs	r4, r2
 800ad88:	b096      	sub	sp, #88	@ 0x58
 800ad8a:	2900      	cmp	r1, #0
 800ad8c:	da0c      	bge.n	800ada8 <__swhatbuf_r+0x2c>
 800ad8e:	89b2      	ldrh	r2, [r6, #12]
 800ad90:	2380      	movs	r3, #128	@ 0x80
 800ad92:	0011      	movs	r1, r2
 800ad94:	4019      	ands	r1, r3
 800ad96:	421a      	tst	r2, r3
 800ad98:	d114      	bne.n	800adc4 <__swhatbuf_r+0x48>
 800ad9a:	2380      	movs	r3, #128	@ 0x80
 800ad9c:	00db      	lsls	r3, r3, #3
 800ad9e:	2000      	movs	r0, #0
 800ada0:	6029      	str	r1, [r5, #0]
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	b016      	add	sp, #88	@ 0x58
 800ada6:	bd70      	pop	{r4, r5, r6, pc}
 800ada8:	466a      	mov	r2, sp
 800adaa:	f000 f853 	bl	800ae54 <_fstat_r>
 800adae:	2800      	cmp	r0, #0
 800adb0:	dbed      	blt.n	800ad8e <__swhatbuf_r+0x12>
 800adb2:	23f0      	movs	r3, #240	@ 0xf0
 800adb4:	9901      	ldr	r1, [sp, #4]
 800adb6:	021b      	lsls	r3, r3, #8
 800adb8:	4019      	ands	r1, r3
 800adba:	4b04      	ldr	r3, [pc, #16]	@ (800adcc <__swhatbuf_r+0x50>)
 800adbc:	18c9      	adds	r1, r1, r3
 800adbe:	424b      	negs	r3, r1
 800adc0:	4159      	adcs	r1, r3
 800adc2:	e7ea      	b.n	800ad9a <__swhatbuf_r+0x1e>
 800adc4:	2100      	movs	r1, #0
 800adc6:	2340      	movs	r3, #64	@ 0x40
 800adc8:	e7e9      	b.n	800ad9e <__swhatbuf_r+0x22>
 800adca:	46c0      	nop			@ (mov r8, r8)
 800adcc:	ffffe000 	.word	0xffffe000

0800add0 <__smakebuf_r>:
 800add0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add2:	2602      	movs	r6, #2
 800add4:	898b      	ldrh	r3, [r1, #12]
 800add6:	0005      	movs	r5, r0
 800add8:	000c      	movs	r4, r1
 800adda:	b085      	sub	sp, #20
 800addc:	4233      	tst	r3, r6
 800adde:	d007      	beq.n	800adf0 <__smakebuf_r+0x20>
 800ade0:	0023      	movs	r3, r4
 800ade2:	3347      	adds	r3, #71	@ 0x47
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	6123      	str	r3, [r4, #16]
 800ade8:	2301      	movs	r3, #1
 800adea:	6163      	str	r3, [r4, #20]
 800adec:	b005      	add	sp, #20
 800adee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf0:	ab03      	add	r3, sp, #12
 800adf2:	aa02      	add	r2, sp, #8
 800adf4:	f7ff ffc2 	bl	800ad7c <__swhatbuf_r>
 800adf8:	9f02      	ldr	r7, [sp, #8]
 800adfa:	9001      	str	r0, [sp, #4]
 800adfc:	0039      	movs	r1, r7
 800adfe:	0028      	movs	r0, r5
 800ae00:	f7ff f816 	bl	8009e30 <_malloc_r>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d108      	bne.n	800ae1a <__smakebuf_r+0x4a>
 800ae08:	220c      	movs	r2, #12
 800ae0a:	5ea3      	ldrsh	r3, [r4, r2]
 800ae0c:	059a      	lsls	r2, r3, #22
 800ae0e:	d4ed      	bmi.n	800adec <__smakebuf_r+0x1c>
 800ae10:	2203      	movs	r2, #3
 800ae12:	4393      	bics	r3, r2
 800ae14:	431e      	orrs	r6, r3
 800ae16:	81a6      	strh	r6, [r4, #12]
 800ae18:	e7e2      	b.n	800ade0 <__smakebuf_r+0x10>
 800ae1a:	2380      	movs	r3, #128	@ 0x80
 800ae1c:	89a2      	ldrh	r2, [r4, #12]
 800ae1e:	6020      	str	r0, [r4, #0]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	81a3      	strh	r3, [r4, #12]
 800ae24:	9b03      	ldr	r3, [sp, #12]
 800ae26:	6120      	str	r0, [r4, #16]
 800ae28:	6167      	str	r7, [r4, #20]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00c      	beq.n	800ae48 <__smakebuf_r+0x78>
 800ae2e:	0028      	movs	r0, r5
 800ae30:	230e      	movs	r3, #14
 800ae32:	5ee1      	ldrsh	r1, [r4, r3]
 800ae34:	f000 f820 	bl	800ae78 <_isatty_r>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d005      	beq.n	800ae48 <__smakebuf_r+0x78>
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	89a2      	ldrh	r2, [r4, #12]
 800ae40:	439a      	bics	r2, r3
 800ae42:	3b02      	subs	r3, #2
 800ae44:	4313      	orrs	r3, r2
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	9a01      	ldr	r2, [sp, #4]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	81a3      	strh	r3, [r4, #12]
 800ae50:	e7cc      	b.n	800adec <__smakebuf_r+0x1c>
	...

0800ae54 <_fstat_r>:
 800ae54:	2300      	movs	r3, #0
 800ae56:	b570      	push	{r4, r5, r6, lr}
 800ae58:	4d06      	ldr	r5, [pc, #24]	@ (800ae74 <_fstat_r+0x20>)
 800ae5a:	0004      	movs	r4, r0
 800ae5c:	0008      	movs	r0, r1
 800ae5e:	0011      	movs	r1, r2
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	f7f9 f895 	bl	8003f90 <_fstat>
 800ae66:	1c43      	adds	r3, r0, #1
 800ae68:	d103      	bne.n	800ae72 <_fstat_r+0x1e>
 800ae6a:	682b      	ldr	r3, [r5, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d000      	beq.n	800ae72 <_fstat_r+0x1e>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd70      	pop	{r4, r5, r6, pc}
 800ae74:	20000f9c 	.word	0x20000f9c

0800ae78 <_isatty_r>:
 800ae78:	2300      	movs	r3, #0
 800ae7a:	b570      	push	{r4, r5, r6, lr}
 800ae7c:	4d06      	ldr	r5, [pc, #24]	@ (800ae98 <_isatty_r+0x20>)
 800ae7e:	0004      	movs	r4, r0
 800ae80:	0008      	movs	r0, r1
 800ae82:	602b      	str	r3, [r5, #0]
 800ae84:	f7f9 f892 	bl	8003fac <_isatty>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	d103      	bne.n	800ae94 <_isatty_r+0x1c>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d000      	beq.n	800ae94 <_isatty_r+0x1c>
 800ae92:	6023      	str	r3, [r4, #0]
 800ae94:	bd70      	pop	{r4, r5, r6, pc}
 800ae96:	46c0      	nop			@ (mov r8, r8)
 800ae98:	20000f9c 	.word	0x20000f9c

0800ae9c <pow>:
 800ae9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae9e:	0014      	movs	r4, r2
 800aea0:	001d      	movs	r5, r3
 800aea2:	9000      	str	r0, [sp, #0]
 800aea4:	9101      	str	r1, [sp, #4]
 800aea6:	f000 fa1b 	bl	800b2e0 <__ieee754_pow>
 800aeaa:	0022      	movs	r2, r4
 800aeac:	0006      	movs	r6, r0
 800aeae:	000f      	movs	r7, r1
 800aeb0:	002b      	movs	r3, r5
 800aeb2:	0020      	movs	r0, r4
 800aeb4:	0029      	movs	r1, r5
 800aeb6:	f7f7 fbf9 	bl	80026ac <__aeabi_dcmpun>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d13f      	bne.n	800af3e <pow+0xa2>
 800aebe:	9800      	ldr	r0, [sp, #0]
 800aec0:	9901      	ldr	r1, [sp, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	2300      	movs	r3, #0
 800aec6:	f7f5 fabd 	bl	8000444 <__aeabi_dcmpeq>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d019      	beq.n	800af02 <pow+0x66>
 800aece:	2200      	movs	r2, #0
 800aed0:	2300      	movs	r3, #0
 800aed2:	0020      	movs	r0, r4
 800aed4:	0029      	movs	r1, r5
 800aed6:	f7f5 fab5 	bl	8000444 <__aeabi_dcmpeq>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d146      	bne.n	800af6c <pow+0xd0>
 800aede:	0020      	movs	r0, r4
 800aee0:	0029      	movs	r1, r5
 800aee2:	f000 f889 	bl	800aff8 <finite>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d029      	beq.n	800af3e <pow+0xa2>
 800aeea:	2200      	movs	r2, #0
 800aeec:	2300      	movs	r3, #0
 800aeee:	0020      	movs	r0, r4
 800aef0:	0029      	movs	r1, r5
 800aef2:	f7f5 faad 	bl	8000450 <__aeabi_dcmplt>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d021      	beq.n	800af3e <pow+0xa2>
 800aefa:	f7fe f85f 	bl	8008fbc <__errno>
 800aefe:	2322      	movs	r3, #34	@ 0x22
 800af00:	e01c      	b.n	800af3c <pow+0xa0>
 800af02:	0030      	movs	r0, r6
 800af04:	0039      	movs	r1, r7
 800af06:	f000 f877 	bl	800aff8 <finite>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d11b      	bne.n	800af46 <pow+0xaa>
 800af0e:	9800      	ldr	r0, [sp, #0]
 800af10:	9901      	ldr	r1, [sp, #4]
 800af12:	f000 f871 	bl	800aff8 <finite>
 800af16:	2800      	cmp	r0, #0
 800af18:	d015      	beq.n	800af46 <pow+0xaa>
 800af1a:	0020      	movs	r0, r4
 800af1c:	0029      	movs	r1, r5
 800af1e:	f000 f86b 	bl	800aff8 <finite>
 800af22:	2800      	cmp	r0, #0
 800af24:	d00f      	beq.n	800af46 <pow+0xaa>
 800af26:	0032      	movs	r2, r6
 800af28:	003b      	movs	r3, r7
 800af2a:	0030      	movs	r0, r6
 800af2c:	0039      	movs	r1, r7
 800af2e:	f7f7 fbbd 	bl	80026ac <__aeabi_dcmpun>
 800af32:	2800      	cmp	r0, #0
 800af34:	d0e1      	beq.n	800aefa <pow+0x5e>
 800af36:	f7fe f841 	bl	8008fbc <__errno>
 800af3a:	2321      	movs	r3, #33	@ 0x21
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	0030      	movs	r0, r6
 800af40:	0039      	movs	r1, r7
 800af42:	b003      	add	sp, #12
 800af44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af46:	2200      	movs	r2, #0
 800af48:	2300      	movs	r3, #0
 800af4a:	0030      	movs	r0, r6
 800af4c:	0039      	movs	r1, r7
 800af4e:	f7f5 fa79 	bl	8000444 <__aeabi_dcmpeq>
 800af52:	2800      	cmp	r0, #0
 800af54:	d0f3      	beq.n	800af3e <pow+0xa2>
 800af56:	9800      	ldr	r0, [sp, #0]
 800af58:	9901      	ldr	r1, [sp, #4]
 800af5a:	f000 f84d 	bl	800aff8 <finite>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d0ed      	beq.n	800af3e <pow+0xa2>
 800af62:	0020      	movs	r0, r4
 800af64:	0029      	movs	r1, r5
 800af66:	f000 f847 	bl	800aff8 <finite>
 800af6a:	e7c4      	b.n	800aef6 <pow+0x5a>
 800af6c:	2600      	movs	r6, #0
 800af6e:	4f01      	ldr	r7, [pc, #4]	@ (800af74 <pow+0xd8>)
 800af70:	e7e5      	b.n	800af3e <pow+0xa2>
 800af72:	46c0      	nop			@ (mov r8, r8)
 800af74:	3ff00000 	.word	0x3ff00000

0800af78 <cos>:
 800af78:	b530      	push	{r4, r5, lr}
 800af7a:	4a1d      	ldr	r2, [pc, #116]	@ (800aff0 <cos+0x78>)
 800af7c:	004b      	lsls	r3, r1, #1
 800af7e:	b087      	sub	sp, #28
 800af80:	085b      	lsrs	r3, r3, #1
 800af82:	4293      	cmp	r3, r2
 800af84:	d804      	bhi.n	800af90 <cos+0x18>
 800af86:	2200      	movs	r2, #0
 800af88:	2300      	movs	r3, #0
 800af8a:	f000 f83d 	bl	800b008 <__kernel_cos>
 800af8e:	e006      	b.n	800af9e <cos+0x26>
 800af90:	4a18      	ldr	r2, [pc, #96]	@ (800aff4 <cos+0x7c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d905      	bls.n	800afa2 <cos+0x2a>
 800af96:	0002      	movs	r2, r0
 800af98:	000b      	movs	r3, r1
 800af9a:	f7f6 ffeb 	bl	8001f74 <__aeabi_dsub>
 800af9e:	b007      	add	sp, #28
 800afa0:	bd30      	pop	{r4, r5, pc}
 800afa2:	aa02      	add	r2, sp, #8
 800afa4:	f000 fec8 	bl	800bd38 <__ieee754_rem_pio2>
 800afa8:	9c04      	ldr	r4, [sp, #16]
 800afaa:	9d05      	ldr	r5, [sp, #20]
 800afac:	2303      	movs	r3, #3
 800afae:	4003      	ands	r3, r0
 800afb0:	9802      	ldr	r0, [sp, #8]
 800afb2:	9903      	ldr	r1, [sp, #12]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d006      	beq.n	800afc6 <cos+0x4e>
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d00d      	beq.n	800afd8 <cos+0x60>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d110      	bne.n	800afe2 <cos+0x6a>
 800afc0:	0022      	movs	r2, r4
 800afc2:	002b      	movs	r3, r5
 800afc4:	e7e1      	b.n	800af8a <cos+0x12>
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	0022      	movs	r2, r4
 800afca:	002b      	movs	r3, r5
 800afcc:	f000 f8dc 	bl	800b188 <__kernel_sin>
 800afd0:	2380      	movs	r3, #128	@ 0x80
 800afd2:	061b      	lsls	r3, r3, #24
 800afd4:	18c9      	adds	r1, r1, r3
 800afd6:	e7e2      	b.n	800af9e <cos+0x26>
 800afd8:	0022      	movs	r2, r4
 800afda:	002b      	movs	r3, r5
 800afdc:	f000 f814 	bl	800b008 <__kernel_cos>
 800afe0:	e7f6      	b.n	800afd0 <cos+0x58>
 800afe2:	2301      	movs	r3, #1
 800afe4:	0022      	movs	r2, r4
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	002b      	movs	r3, r5
 800afea:	f000 f8cd 	bl	800b188 <__kernel_sin>
 800afee:	e7d6      	b.n	800af9e <cos+0x26>
 800aff0:	3fe921fb 	.word	0x3fe921fb
 800aff4:	7fefffff 	.word	0x7fefffff

0800aff8 <finite>:
 800aff8:	4b02      	ldr	r3, [pc, #8]	@ (800b004 <finite+0xc>)
 800affa:	0048      	lsls	r0, r1, #1
 800affc:	0840      	lsrs	r0, r0, #1
 800affe:	18c0      	adds	r0, r0, r3
 800b000:	0fc0      	lsrs	r0, r0, #31
 800b002:	4770      	bx	lr
 800b004:	80100000 	.word	0x80100000

0800b008 <__kernel_cos>:
 800b008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b00a:	b087      	sub	sp, #28
 800b00c:	9204      	str	r2, [sp, #16]
 800b00e:	9305      	str	r3, [sp, #20]
 800b010:	004b      	lsls	r3, r1, #1
 800b012:	085b      	lsrs	r3, r3, #1
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	23f9      	movs	r3, #249	@ 0xf9
 800b018:	9a01      	ldr	r2, [sp, #4]
 800b01a:	0004      	movs	r4, r0
 800b01c:	000d      	movs	r5, r1
 800b01e:	059b      	lsls	r3, r3, #22
 800b020:	429a      	cmp	r2, r3
 800b022:	d204      	bcs.n	800b02e <__kernel_cos+0x26>
 800b024:	f7f7 fb64 	bl	80026f0 <__aeabi_d2iz>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d100      	bne.n	800b02e <__kernel_cos+0x26>
 800b02c:	e084      	b.n	800b138 <__kernel_cos+0x130>
 800b02e:	0022      	movs	r2, r4
 800b030:	002b      	movs	r3, r5
 800b032:	0020      	movs	r0, r4
 800b034:	0029      	movs	r1, r5
 800b036:	f7f6 fcd5 	bl	80019e4 <__aeabi_dmul>
 800b03a:	2200      	movs	r2, #0
 800b03c:	4b40      	ldr	r3, [pc, #256]	@ (800b140 <__kernel_cos+0x138>)
 800b03e:	0006      	movs	r6, r0
 800b040:	000f      	movs	r7, r1
 800b042:	f7f6 fccf 	bl	80019e4 <__aeabi_dmul>
 800b046:	4a3f      	ldr	r2, [pc, #252]	@ (800b144 <__kernel_cos+0x13c>)
 800b048:	9002      	str	r0, [sp, #8]
 800b04a:	9103      	str	r1, [sp, #12]
 800b04c:	4b3e      	ldr	r3, [pc, #248]	@ (800b148 <__kernel_cos+0x140>)
 800b04e:	0030      	movs	r0, r6
 800b050:	0039      	movs	r1, r7
 800b052:	f7f6 fcc7 	bl	80019e4 <__aeabi_dmul>
 800b056:	4a3d      	ldr	r2, [pc, #244]	@ (800b14c <__kernel_cos+0x144>)
 800b058:	4b3d      	ldr	r3, [pc, #244]	@ (800b150 <__kernel_cos+0x148>)
 800b05a:	f7f5 fd1b 	bl	8000a94 <__aeabi_dadd>
 800b05e:	0032      	movs	r2, r6
 800b060:	003b      	movs	r3, r7
 800b062:	f7f6 fcbf 	bl	80019e4 <__aeabi_dmul>
 800b066:	4a3b      	ldr	r2, [pc, #236]	@ (800b154 <__kernel_cos+0x14c>)
 800b068:	4b3b      	ldr	r3, [pc, #236]	@ (800b158 <__kernel_cos+0x150>)
 800b06a:	f7f6 ff83 	bl	8001f74 <__aeabi_dsub>
 800b06e:	0032      	movs	r2, r6
 800b070:	003b      	movs	r3, r7
 800b072:	f7f6 fcb7 	bl	80019e4 <__aeabi_dmul>
 800b076:	4a39      	ldr	r2, [pc, #228]	@ (800b15c <__kernel_cos+0x154>)
 800b078:	4b39      	ldr	r3, [pc, #228]	@ (800b160 <__kernel_cos+0x158>)
 800b07a:	f7f5 fd0b 	bl	8000a94 <__aeabi_dadd>
 800b07e:	0032      	movs	r2, r6
 800b080:	003b      	movs	r3, r7
 800b082:	f7f6 fcaf 	bl	80019e4 <__aeabi_dmul>
 800b086:	4a37      	ldr	r2, [pc, #220]	@ (800b164 <__kernel_cos+0x15c>)
 800b088:	4b37      	ldr	r3, [pc, #220]	@ (800b168 <__kernel_cos+0x160>)
 800b08a:	f7f6 ff73 	bl	8001f74 <__aeabi_dsub>
 800b08e:	0032      	movs	r2, r6
 800b090:	003b      	movs	r3, r7
 800b092:	f7f6 fca7 	bl	80019e4 <__aeabi_dmul>
 800b096:	4a35      	ldr	r2, [pc, #212]	@ (800b16c <__kernel_cos+0x164>)
 800b098:	4b35      	ldr	r3, [pc, #212]	@ (800b170 <__kernel_cos+0x168>)
 800b09a:	f7f5 fcfb 	bl	8000a94 <__aeabi_dadd>
 800b09e:	0032      	movs	r2, r6
 800b0a0:	003b      	movs	r3, r7
 800b0a2:	f7f6 fc9f 	bl	80019e4 <__aeabi_dmul>
 800b0a6:	0032      	movs	r2, r6
 800b0a8:	003b      	movs	r3, r7
 800b0aa:	f7f6 fc9b 	bl	80019e4 <__aeabi_dmul>
 800b0ae:	9a04      	ldr	r2, [sp, #16]
 800b0b0:	9b05      	ldr	r3, [sp, #20]
 800b0b2:	0006      	movs	r6, r0
 800b0b4:	000f      	movs	r7, r1
 800b0b6:	0020      	movs	r0, r4
 800b0b8:	0029      	movs	r1, r5
 800b0ba:	f7f6 fc93 	bl	80019e4 <__aeabi_dmul>
 800b0be:	0002      	movs	r2, r0
 800b0c0:	000b      	movs	r3, r1
 800b0c2:	0030      	movs	r0, r6
 800b0c4:	0039      	movs	r1, r7
 800b0c6:	f7f6 ff55 	bl	8001f74 <__aeabi_dsub>
 800b0ca:	4b2a      	ldr	r3, [pc, #168]	@ (800b174 <__kernel_cos+0x16c>)
 800b0cc:	9a01      	ldr	r2, [sp, #4]
 800b0ce:	9004      	str	r0, [sp, #16]
 800b0d0:	9105      	str	r1, [sp, #20]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d80d      	bhi.n	800b0f2 <__kernel_cos+0xea>
 800b0d6:	0002      	movs	r2, r0
 800b0d8:	000b      	movs	r3, r1
 800b0da:	9802      	ldr	r0, [sp, #8]
 800b0dc:	9903      	ldr	r1, [sp, #12]
 800b0de:	f7f6 ff49 	bl	8001f74 <__aeabi_dsub>
 800b0e2:	0002      	movs	r2, r0
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	000b      	movs	r3, r1
 800b0e8:	4923      	ldr	r1, [pc, #140]	@ (800b178 <__kernel_cos+0x170>)
 800b0ea:	f7f6 ff43 	bl	8001f74 <__aeabi_dsub>
 800b0ee:	b007      	add	sp, #28
 800b0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f2:	4b22      	ldr	r3, [pc, #136]	@ (800b17c <__kernel_cos+0x174>)
 800b0f4:	9a01      	ldr	r2, [sp, #4]
 800b0f6:	2600      	movs	r6, #0
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d81b      	bhi.n	800b134 <__kernel_cos+0x12c>
 800b0fc:	0013      	movs	r3, r2
 800b0fe:	4a20      	ldr	r2, [pc, #128]	@ (800b180 <__kernel_cos+0x178>)
 800b100:	4694      	mov	ip, r2
 800b102:	4463      	add	r3, ip
 800b104:	001f      	movs	r7, r3
 800b106:	0032      	movs	r2, r6
 800b108:	003b      	movs	r3, r7
 800b10a:	2000      	movs	r0, #0
 800b10c:	491a      	ldr	r1, [pc, #104]	@ (800b178 <__kernel_cos+0x170>)
 800b10e:	f7f6 ff31 	bl	8001f74 <__aeabi_dsub>
 800b112:	0032      	movs	r2, r6
 800b114:	0004      	movs	r4, r0
 800b116:	000d      	movs	r5, r1
 800b118:	9802      	ldr	r0, [sp, #8]
 800b11a:	9903      	ldr	r1, [sp, #12]
 800b11c:	003b      	movs	r3, r7
 800b11e:	f7f6 ff29 	bl	8001f74 <__aeabi_dsub>
 800b122:	9a04      	ldr	r2, [sp, #16]
 800b124:	9b05      	ldr	r3, [sp, #20]
 800b126:	f7f6 ff25 	bl	8001f74 <__aeabi_dsub>
 800b12a:	0002      	movs	r2, r0
 800b12c:	000b      	movs	r3, r1
 800b12e:	0020      	movs	r0, r4
 800b130:	0029      	movs	r1, r5
 800b132:	e7da      	b.n	800b0ea <__kernel_cos+0xe2>
 800b134:	4f13      	ldr	r7, [pc, #76]	@ (800b184 <__kernel_cos+0x17c>)
 800b136:	e7e6      	b.n	800b106 <__kernel_cos+0xfe>
 800b138:	2000      	movs	r0, #0
 800b13a:	490f      	ldr	r1, [pc, #60]	@ (800b178 <__kernel_cos+0x170>)
 800b13c:	e7d7      	b.n	800b0ee <__kernel_cos+0xe6>
 800b13e:	46c0      	nop			@ (mov r8, r8)
 800b140:	3fe00000 	.word	0x3fe00000
 800b144:	be8838d4 	.word	0xbe8838d4
 800b148:	bda8fae9 	.word	0xbda8fae9
 800b14c:	bdb4b1c4 	.word	0xbdb4b1c4
 800b150:	3e21ee9e 	.word	0x3e21ee9e
 800b154:	809c52ad 	.word	0x809c52ad
 800b158:	3e927e4f 	.word	0x3e927e4f
 800b15c:	19cb1590 	.word	0x19cb1590
 800b160:	3efa01a0 	.word	0x3efa01a0
 800b164:	16c15177 	.word	0x16c15177
 800b168:	3f56c16c 	.word	0x3f56c16c
 800b16c:	5555554c 	.word	0x5555554c
 800b170:	3fa55555 	.word	0x3fa55555
 800b174:	3fd33332 	.word	0x3fd33332
 800b178:	3ff00000 	.word	0x3ff00000
 800b17c:	3fe90000 	.word	0x3fe90000
 800b180:	ffe00000 	.word	0xffe00000
 800b184:	3fd20000 	.word	0x3fd20000

0800b188 <__kernel_sin>:
 800b188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b18a:	b089      	sub	sp, #36	@ 0x24
 800b18c:	9202      	str	r2, [sp, #8]
 800b18e:	9303      	str	r3, [sp, #12]
 800b190:	22f9      	movs	r2, #249	@ 0xf9
 800b192:	004b      	lsls	r3, r1, #1
 800b194:	0006      	movs	r6, r0
 800b196:	000f      	movs	r7, r1
 800b198:	085b      	lsrs	r3, r3, #1
 800b19a:	0592      	lsls	r2, r2, #22
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d203      	bcs.n	800b1a8 <__kernel_sin+0x20>
 800b1a0:	f7f7 faa6 	bl	80026f0 <__aeabi_d2iz>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d04c      	beq.n	800b242 <__kernel_sin+0xba>
 800b1a8:	0032      	movs	r2, r6
 800b1aa:	003b      	movs	r3, r7
 800b1ac:	0030      	movs	r0, r6
 800b1ae:	0039      	movs	r1, r7
 800b1b0:	f7f6 fc18 	bl	80019e4 <__aeabi_dmul>
 800b1b4:	0004      	movs	r4, r0
 800b1b6:	000d      	movs	r5, r1
 800b1b8:	0002      	movs	r2, r0
 800b1ba:	000b      	movs	r3, r1
 800b1bc:	0030      	movs	r0, r6
 800b1be:	0039      	movs	r1, r7
 800b1c0:	f7f6 fc10 	bl	80019e4 <__aeabi_dmul>
 800b1c4:	4a39      	ldr	r2, [pc, #228]	@ (800b2ac <__kernel_sin+0x124>)
 800b1c6:	9000      	str	r0, [sp, #0]
 800b1c8:	9101      	str	r1, [sp, #4]
 800b1ca:	4b39      	ldr	r3, [pc, #228]	@ (800b2b0 <__kernel_sin+0x128>)
 800b1cc:	0020      	movs	r0, r4
 800b1ce:	0029      	movs	r1, r5
 800b1d0:	f7f6 fc08 	bl	80019e4 <__aeabi_dmul>
 800b1d4:	4a37      	ldr	r2, [pc, #220]	@ (800b2b4 <__kernel_sin+0x12c>)
 800b1d6:	4b38      	ldr	r3, [pc, #224]	@ (800b2b8 <__kernel_sin+0x130>)
 800b1d8:	f7f6 fecc 	bl	8001f74 <__aeabi_dsub>
 800b1dc:	0022      	movs	r2, r4
 800b1de:	002b      	movs	r3, r5
 800b1e0:	f7f6 fc00 	bl	80019e4 <__aeabi_dmul>
 800b1e4:	4a35      	ldr	r2, [pc, #212]	@ (800b2bc <__kernel_sin+0x134>)
 800b1e6:	4b36      	ldr	r3, [pc, #216]	@ (800b2c0 <__kernel_sin+0x138>)
 800b1e8:	f7f5 fc54 	bl	8000a94 <__aeabi_dadd>
 800b1ec:	0022      	movs	r2, r4
 800b1ee:	002b      	movs	r3, r5
 800b1f0:	f7f6 fbf8 	bl	80019e4 <__aeabi_dmul>
 800b1f4:	4a33      	ldr	r2, [pc, #204]	@ (800b2c4 <__kernel_sin+0x13c>)
 800b1f6:	4b34      	ldr	r3, [pc, #208]	@ (800b2c8 <__kernel_sin+0x140>)
 800b1f8:	f7f6 febc 	bl	8001f74 <__aeabi_dsub>
 800b1fc:	0022      	movs	r2, r4
 800b1fe:	002b      	movs	r3, r5
 800b200:	f7f6 fbf0 	bl	80019e4 <__aeabi_dmul>
 800b204:	4b31      	ldr	r3, [pc, #196]	@ (800b2cc <__kernel_sin+0x144>)
 800b206:	4a32      	ldr	r2, [pc, #200]	@ (800b2d0 <__kernel_sin+0x148>)
 800b208:	f7f5 fc44 	bl	8000a94 <__aeabi_dadd>
 800b20c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b20e:	9004      	str	r0, [sp, #16]
 800b210:	9105      	str	r1, [sp, #20]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d119      	bne.n	800b24a <__kernel_sin+0xc2>
 800b216:	0002      	movs	r2, r0
 800b218:	000b      	movs	r3, r1
 800b21a:	0020      	movs	r0, r4
 800b21c:	0029      	movs	r1, r5
 800b21e:	f7f6 fbe1 	bl	80019e4 <__aeabi_dmul>
 800b222:	4a2c      	ldr	r2, [pc, #176]	@ (800b2d4 <__kernel_sin+0x14c>)
 800b224:	4b2c      	ldr	r3, [pc, #176]	@ (800b2d8 <__kernel_sin+0x150>)
 800b226:	f7f6 fea5 	bl	8001f74 <__aeabi_dsub>
 800b22a:	9a00      	ldr	r2, [sp, #0]
 800b22c:	9b01      	ldr	r3, [sp, #4]
 800b22e:	f7f6 fbd9 	bl	80019e4 <__aeabi_dmul>
 800b232:	0002      	movs	r2, r0
 800b234:	000b      	movs	r3, r1
 800b236:	0030      	movs	r0, r6
 800b238:	0039      	movs	r1, r7
 800b23a:	f7f5 fc2b 	bl	8000a94 <__aeabi_dadd>
 800b23e:	0006      	movs	r6, r0
 800b240:	000f      	movs	r7, r1
 800b242:	0030      	movs	r0, r6
 800b244:	0039      	movs	r1, r7
 800b246:	b009      	add	sp, #36	@ 0x24
 800b248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b24a:	2200      	movs	r2, #0
 800b24c:	9802      	ldr	r0, [sp, #8]
 800b24e:	9903      	ldr	r1, [sp, #12]
 800b250:	4b22      	ldr	r3, [pc, #136]	@ (800b2dc <__kernel_sin+0x154>)
 800b252:	f7f6 fbc7 	bl	80019e4 <__aeabi_dmul>
 800b256:	9a04      	ldr	r2, [sp, #16]
 800b258:	9b05      	ldr	r3, [sp, #20]
 800b25a:	9006      	str	r0, [sp, #24]
 800b25c:	9107      	str	r1, [sp, #28]
 800b25e:	9800      	ldr	r0, [sp, #0]
 800b260:	9901      	ldr	r1, [sp, #4]
 800b262:	f7f6 fbbf 	bl	80019e4 <__aeabi_dmul>
 800b266:	0002      	movs	r2, r0
 800b268:	000b      	movs	r3, r1
 800b26a:	9806      	ldr	r0, [sp, #24]
 800b26c:	9907      	ldr	r1, [sp, #28]
 800b26e:	f7f6 fe81 	bl	8001f74 <__aeabi_dsub>
 800b272:	0022      	movs	r2, r4
 800b274:	002b      	movs	r3, r5
 800b276:	f7f6 fbb5 	bl	80019e4 <__aeabi_dmul>
 800b27a:	9a02      	ldr	r2, [sp, #8]
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	f7f6 fe79 	bl	8001f74 <__aeabi_dsub>
 800b282:	4a14      	ldr	r2, [pc, #80]	@ (800b2d4 <__kernel_sin+0x14c>)
 800b284:	0004      	movs	r4, r0
 800b286:	000d      	movs	r5, r1
 800b288:	9800      	ldr	r0, [sp, #0]
 800b28a:	9901      	ldr	r1, [sp, #4]
 800b28c:	4b12      	ldr	r3, [pc, #72]	@ (800b2d8 <__kernel_sin+0x150>)
 800b28e:	f7f6 fba9 	bl	80019e4 <__aeabi_dmul>
 800b292:	0002      	movs	r2, r0
 800b294:	000b      	movs	r3, r1
 800b296:	0020      	movs	r0, r4
 800b298:	0029      	movs	r1, r5
 800b29a:	f7f5 fbfb 	bl	8000a94 <__aeabi_dadd>
 800b29e:	0002      	movs	r2, r0
 800b2a0:	000b      	movs	r3, r1
 800b2a2:	0030      	movs	r0, r6
 800b2a4:	0039      	movs	r1, r7
 800b2a6:	f7f6 fe65 	bl	8001f74 <__aeabi_dsub>
 800b2aa:	e7c8      	b.n	800b23e <__kernel_sin+0xb6>
 800b2ac:	5acfd57c 	.word	0x5acfd57c
 800b2b0:	3de5d93a 	.word	0x3de5d93a
 800b2b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b2b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b2bc:	57b1fe7d 	.word	0x57b1fe7d
 800b2c0:	3ec71de3 	.word	0x3ec71de3
 800b2c4:	19c161d5 	.word	0x19c161d5
 800b2c8:	3f2a01a0 	.word	0x3f2a01a0
 800b2cc:	3f811111 	.word	0x3f811111
 800b2d0:	1110f8a6 	.word	0x1110f8a6
 800b2d4:	55555549 	.word	0x55555549
 800b2d8:	3fc55555 	.word	0x3fc55555
 800b2dc:	3fe00000 	.word	0x3fe00000

0800b2e0 <__ieee754_pow>:
 800b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e2:	b095      	sub	sp, #84	@ 0x54
 800b2e4:	9202      	str	r2, [sp, #8]
 800b2e6:	9303      	str	r3, [sp, #12]
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	9a03      	ldr	r2, [sp, #12]
 800b2ec:	9306      	str	r3, [sp, #24]
 800b2ee:	0052      	lsls	r2, r2, #1
 800b2f0:	9b02      	ldr	r3, [sp, #8]
 800b2f2:	0852      	lsrs	r2, r2, #1
 800b2f4:	9204      	str	r2, [sp, #16]
 800b2f6:	001a      	movs	r2, r3
 800b2f8:	000f      	movs	r7, r1
 800b2fa:	9904      	ldr	r1, [sp, #16]
 800b2fc:	0006      	movs	r6, r0
 800b2fe:	430a      	orrs	r2, r1
 800b300:	d119      	bne.n	800b336 <__ieee754_pow+0x56>
 800b302:	2180      	movs	r1, #128	@ 0x80
 800b304:	0309      	lsls	r1, r1, #12
 800b306:	4079      	eors	r1, r7
 800b308:	0002      	movs	r2, r0
 800b30a:	000b      	movs	r3, r1
 800b30c:	1892      	adds	r2, r2, r2
 800b30e:	415b      	adcs	r3, r3
 800b310:	499b      	ldr	r1, [pc, #620]	@ (800b580 <__ieee754_pow+0x2a0>)
 800b312:	428b      	cmp	r3, r1
 800b314:	d806      	bhi.n	800b324 <__ieee754_pow+0x44>
 800b316:	d001      	beq.n	800b31c <__ieee754_pow+0x3c>
 800b318:	f000 fcde 	bl	800bcd8 <__ieee754_pow+0x9f8>
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	d101      	bne.n	800b324 <__ieee754_pow+0x44>
 800b320:	f000 fcda 	bl	800bcd8 <__ieee754_pow+0x9f8>
 800b324:	9a02      	ldr	r2, [sp, #8]
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	0030      	movs	r0, r6
 800b32a:	0039      	movs	r1, r7
 800b32c:	f7f5 fbb2 	bl	8000a94 <__aeabi_dadd>
 800b330:	9000      	str	r0, [sp, #0]
 800b332:	9101      	str	r1, [sp, #4]
 800b334:	e0af      	b.n	800b496 <__ieee754_pow+0x1b6>
 800b336:	4a93      	ldr	r2, [pc, #588]	@ (800b584 <__ieee754_pow+0x2a4>)
 800b338:	007c      	lsls	r4, r7, #1
 800b33a:	9708      	str	r7, [sp, #32]
 800b33c:	900e      	str	r0, [sp, #56]	@ 0x38
 800b33e:	0864      	lsrs	r4, r4, #1
 800b340:	4294      	cmp	r4, r2
 800b342:	d809      	bhi.n	800b358 <__ieee754_pow+0x78>
 800b344:	d101      	bne.n	800b34a <__ieee754_pow+0x6a>
 800b346:	2800      	cmp	r0, #0
 800b348:	d1ec      	bne.n	800b324 <__ieee754_pow+0x44>
 800b34a:	9904      	ldr	r1, [sp, #16]
 800b34c:	4a8d      	ldr	r2, [pc, #564]	@ (800b584 <__ieee754_pow+0x2a4>)
 800b34e:	4291      	cmp	r1, r2
 800b350:	d802      	bhi.n	800b358 <__ieee754_pow+0x78>
 800b352:	d10c      	bne.n	800b36e <__ieee754_pow+0x8e>
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <__ieee754_pow+0x8e>
 800b358:	4b8b      	ldr	r3, [pc, #556]	@ (800b588 <__ieee754_pow+0x2a8>)
 800b35a:	18fb      	adds	r3, r7, r3
 800b35c:	4333      	orrs	r3, r6
 800b35e:	d1e1      	bne.n	800b324 <__ieee754_pow+0x44>
 800b360:	2180      	movs	r1, #128	@ 0x80
 800b362:	9803      	ldr	r0, [sp, #12]
 800b364:	0309      	lsls	r1, r1, #12
 800b366:	4048      	eors	r0, r1
 800b368:	0003      	movs	r3, r0
 800b36a:	9a02      	ldr	r2, [sp, #8]
 800b36c:	e7ce      	b.n	800b30c <__ieee754_pow+0x2c>
 800b36e:	2500      	movs	r5, #0
 800b370:	9a08      	ldr	r2, [sp, #32]
 800b372:	940a      	str	r4, [sp, #40]	@ 0x28
 800b374:	42aa      	cmp	r2, r5
 800b376:	da68      	bge.n	800b44a <__ieee754_pow+0x16a>
 800b378:	4a84      	ldr	r2, [pc, #528]	@ (800b58c <__ieee754_pow+0x2ac>)
 800b37a:	9904      	ldr	r1, [sp, #16]
 800b37c:	4291      	cmp	r1, r2
 800b37e:	d863      	bhi.n	800b448 <__ieee754_pow+0x168>
 800b380:	4a83      	ldr	r2, [pc, #524]	@ (800b590 <__ieee754_pow+0x2b0>)
 800b382:	4291      	cmp	r1, r2
 800b384:	d910      	bls.n	800b3a8 <__ieee754_pow+0xc8>
 800b386:	150a      	asrs	r2, r1, #20
 800b388:	4982      	ldr	r1, [pc, #520]	@ (800b594 <__ieee754_pow+0x2b4>)
 800b38a:	1852      	adds	r2, r2, r1
 800b38c:	2a14      	cmp	r2, #20
 800b38e:	dd3b      	ble.n	800b408 <__ieee754_pow+0x128>
 800b390:	2134      	movs	r1, #52	@ 0x34
 800b392:	1a89      	subs	r1, r1, r2
 800b394:	9a02      	ldr	r2, [sp, #8]
 800b396:	40ca      	lsrs	r2, r1
 800b398:	0010      	movs	r0, r2
 800b39a:	4088      	lsls	r0, r1
 800b39c:	4298      	cmp	r0, r3
 800b39e:	d103      	bne.n	800b3a8 <__ieee754_pow+0xc8>
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	3502      	adds	r5, #2
 800b3a4:	400a      	ands	r2, r1
 800b3a6:	1aad      	subs	r5, r5, r2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d03d      	beq.n	800b428 <__ieee754_pow+0x148>
 800b3ac:	0030      	movs	r0, r6
 800b3ae:	0039      	movs	r1, r7
 800b3b0:	f000 fe9e 	bl	800c0f0 <fabs>
 800b3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3b6:	9000      	str	r0, [sp, #0]
 800b3b8:	9101      	str	r1, [sp, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d000      	beq.n	800b3c0 <__ieee754_pow+0xe0>
 800b3be:	e093      	b.n	800b4e8 <__ieee754_pow+0x208>
 800b3c0:	4a75      	ldr	r2, [pc, #468]	@ (800b598 <__ieee754_pow+0x2b8>)
 800b3c2:	00bb      	lsls	r3, r7, #2
 800b3c4:	089b      	lsrs	r3, r3, #2
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d002      	beq.n	800b3d0 <__ieee754_pow+0xf0>
 800b3ca:	2c00      	cmp	r4, #0
 800b3cc:	d000      	beq.n	800b3d0 <__ieee754_pow+0xf0>
 800b3ce:	e08b      	b.n	800b4e8 <__ieee754_pow+0x208>
 800b3d0:	9b06      	ldr	r3, [sp, #24]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	da07      	bge.n	800b3e6 <__ieee754_pow+0x106>
 800b3d6:	9a00      	ldr	r2, [sp, #0]
 800b3d8:	9b01      	ldr	r3, [sp, #4]
 800b3da:	2000      	movs	r0, #0
 800b3dc:	496e      	ldr	r1, [pc, #440]	@ (800b598 <__ieee754_pow+0x2b8>)
 800b3de:	f7f5 febd 	bl	800115c <__aeabi_ddiv>
 800b3e2:	9000      	str	r0, [sp, #0]
 800b3e4:	9101      	str	r1, [sp, #4]
 800b3e6:	9b08      	ldr	r3, [sp, #32]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	da54      	bge.n	800b496 <__ieee754_pow+0x1b6>
 800b3ec:	4b66      	ldr	r3, [pc, #408]	@ (800b588 <__ieee754_pow+0x2a8>)
 800b3ee:	18e4      	adds	r4, r4, r3
 800b3f0:	432c      	orrs	r4, r5
 800b3f2:	d000      	beq.n	800b3f6 <__ieee754_pow+0x116>
 800b3f4:	e06d      	b.n	800b4d2 <__ieee754_pow+0x1f2>
 800b3f6:	9a00      	ldr	r2, [sp, #0]
 800b3f8:	9b01      	ldr	r3, [sp, #4]
 800b3fa:	0010      	movs	r0, r2
 800b3fc:	0019      	movs	r1, r3
 800b3fe:	f7f6 fdb9 	bl	8001f74 <__aeabi_dsub>
 800b402:	0002      	movs	r2, r0
 800b404:	000b      	movs	r3, r1
 800b406:	e01c      	b.n	800b442 <__ieee754_pow+0x162>
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1cf      	bne.n	800b3ac <__ieee754_pow+0xcc>
 800b40c:	3314      	adds	r3, #20
 800b40e:	1a9a      	subs	r2, r3, r2
 800b410:	9b04      	ldr	r3, [sp, #16]
 800b412:	4113      	asrs	r3, r2
 800b414:	0019      	movs	r1, r3
 800b416:	4091      	lsls	r1, r2
 800b418:	000a      	movs	r2, r1
 800b41a:	9904      	ldr	r1, [sp, #16]
 800b41c:	428a      	cmp	r2, r1
 800b41e:	d103      	bne.n	800b428 <__ieee754_pow+0x148>
 800b420:	2201      	movs	r2, #1
 800b422:	2502      	movs	r5, #2
 800b424:	4013      	ands	r3, r2
 800b426:	1aed      	subs	r5, r5, r3
 800b428:	4b5b      	ldr	r3, [pc, #364]	@ (800b598 <__ieee754_pow+0x2b8>)
 800b42a:	9a04      	ldr	r2, [sp, #16]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d136      	bne.n	800b49e <__ieee754_pow+0x1be>
 800b430:	9b06      	ldr	r3, [sp, #24]
 800b432:	9600      	str	r6, [sp, #0]
 800b434:	9701      	str	r7, [sp, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	da2d      	bge.n	800b496 <__ieee754_pow+0x1b6>
 800b43a:	0032      	movs	r2, r6
 800b43c:	003b      	movs	r3, r7
 800b43e:	2000      	movs	r0, #0
 800b440:	4955      	ldr	r1, [pc, #340]	@ (800b598 <__ieee754_pow+0x2b8>)
 800b442:	f7f5 fe8b 	bl	800115c <__aeabi_ddiv>
 800b446:	e773      	b.n	800b330 <__ieee754_pow+0x50>
 800b448:	2502      	movs	r5, #2
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1ae      	bne.n	800b3ac <__ieee754_pow+0xcc>
 800b44e:	9b04      	ldr	r3, [sp, #16]
 800b450:	4a4c      	ldr	r2, [pc, #304]	@ (800b584 <__ieee754_pow+0x2a4>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d1e8      	bne.n	800b428 <__ieee754_pow+0x148>
 800b456:	4b4c      	ldr	r3, [pc, #304]	@ (800b588 <__ieee754_pow+0x2a8>)
 800b458:	18e3      	adds	r3, r4, r3
 800b45a:	4333      	orrs	r3, r6
 800b45c:	d101      	bne.n	800b462 <__ieee754_pow+0x182>
 800b45e:	f000 fc3b 	bl	800bcd8 <__ieee754_pow+0x9f8>
 800b462:	4b4b      	ldr	r3, [pc, #300]	@ (800b590 <__ieee754_pow+0x2b0>)
 800b464:	429c      	cmp	r4, r3
 800b466:	d909      	bls.n	800b47c <__ieee754_pow+0x19c>
 800b468:	9b06      	ldr	r3, [sp, #24]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	da01      	bge.n	800b472 <__ieee754_pow+0x192>
 800b46e:	f000 fc37 	bl	800bce0 <__ieee754_pow+0xa00>
 800b472:	9b02      	ldr	r3, [sp, #8]
 800b474:	9c03      	ldr	r4, [sp, #12]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	9401      	str	r4, [sp, #4]
 800b47a:	e00c      	b.n	800b496 <__ieee754_pow+0x1b6>
 800b47c:	9b06      	ldr	r3, [sp, #24]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	db01      	blt.n	800b486 <__ieee754_pow+0x1a6>
 800b482:	f000 fc2d 	bl	800bce0 <__ieee754_pow+0xa00>
 800b486:	2280      	movs	r2, #128	@ 0x80
 800b488:	0612      	lsls	r2, r2, #24
 800b48a:	4694      	mov	ip, r2
 800b48c:	9b02      	ldr	r3, [sp, #8]
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	4463      	add	r3, ip
 800b494:	9301      	str	r3, [sp, #4]
 800b496:	9800      	ldr	r0, [sp, #0]
 800b498:	9901      	ldr	r1, [sp, #4]
 800b49a:	b015      	add	sp, #84	@ 0x54
 800b49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b49e:	2380      	movs	r3, #128	@ 0x80
 800b4a0:	9a06      	ldr	r2, [sp, #24]
 800b4a2:	05db      	lsls	r3, r3, #23
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d106      	bne.n	800b4b6 <__ieee754_pow+0x1d6>
 800b4a8:	0032      	movs	r2, r6
 800b4aa:	003b      	movs	r3, r7
 800b4ac:	0030      	movs	r0, r6
 800b4ae:	0039      	movs	r1, r7
 800b4b0:	f7f6 fa98 	bl	80019e4 <__aeabi_dmul>
 800b4b4:	e73c      	b.n	800b330 <__ieee754_pow+0x50>
 800b4b6:	4b39      	ldr	r3, [pc, #228]	@ (800b59c <__ieee754_pow+0x2bc>)
 800b4b8:	9a06      	ldr	r2, [sp, #24]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d000      	beq.n	800b4c0 <__ieee754_pow+0x1e0>
 800b4be:	e775      	b.n	800b3ac <__ieee754_pow+0xcc>
 800b4c0:	9b08      	ldr	r3, [sp, #32]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	da00      	bge.n	800b4c8 <__ieee754_pow+0x1e8>
 800b4c6:	e771      	b.n	800b3ac <__ieee754_pow+0xcc>
 800b4c8:	0030      	movs	r0, r6
 800b4ca:	0039      	movs	r1, r7
 800b4cc:	f000 feae 	bl	800c22c <__ieee754_sqrt>
 800b4d0:	e72e      	b.n	800b330 <__ieee754_pow+0x50>
 800b4d2:	2d01      	cmp	r5, #1
 800b4d4:	d1df      	bne.n	800b496 <__ieee754_pow+0x1b6>
 800b4d6:	9800      	ldr	r0, [sp, #0]
 800b4d8:	2180      	movs	r1, #128	@ 0x80
 800b4da:	0002      	movs	r2, r0
 800b4dc:	9801      	ldr	r0, [sp, #4]
 800b4de:	0609      	lsls	r1, r1, #24
 800b4e0:	1843      	adds	r3, r0, r1
 800b4e2:	9200      	str	r2, [sp, #0]
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	e7d6      	b.n	800b496 <__ieee754_pow+0x1b6>
 800b4e8:	0ffb      	lsrs	r3, r7, #31
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	001a      	movs	r2, r3
 800b4ee:	432a      	orrs	r2, r5
 800b4f0:	d104      	bne.n	800b4fc <__ieee754_pow+0x21c>
 800b4f2:	0032      	movs	r2, r6
 800b4f4:	003b      	movs	r3, r7
 800b4f6:	0030      	movs	r0, r6
 800b4f8:	0039      	movs	r1, r7
 800b4fa:	e780      	b.n	800b3fe <__ieee754_pow+0x11e>
 800b4fc:	3d01      	subs	r5, #1
 800b4fe:	2200      	movs	r2, #0
 800b500:	431d      	orrs	r5, r3
 800b502:	d015      	beq.n	800b530 <__ieee754_pow+0x250>
 800b504:	4b24      	ldr	r3, [pc, #144]	@ (800b598 <__ieee754_pow+0x2b8>)
 800b506:	9208      	str	r2, [sp, #32]
 800b508:	9309      	str	r3, [sp, #36]	@ 0x24
 800b50a:	2384      	movs	r3, #132	@ 0x84
 800b50c:	9a04      	ldr	r2, [sp, #16]
 800b50e:	05db      	lsls	r3, r3, #23
 800b510:	429a      	cmp	r2, r3
 800b512:	d800      	bhi.n	800b516 <__ieee754_pow+0x236>
 800b514:	e102      	b.n	800b71c <__ieee754_pow+0x43c>
 800b516:	4b22      	ldr	r3, [pc, #136]	@ (800b5a0 <__ieee754_pow+0x2c0>)
 800b518:	429a      	cmp	r2, r3
 800b51a:	d912      	bls.n	800b542 <__ieee754_pow+0x262>
 800b51c:	4b1c      	ldr	r3, [pc, #112]	@ (800b590 <__ieee754_pow+0x2b0>)
 800b51e:	429c      	cmp	r4, r3
 800b520:	d808      	bhi.n	800b534 <__ieee754_pow+0x254>
 800b522:	9b06      	ldr	r3, [sp, #24]
 800b524:	2b00      	cmp	r3, #0
 800b526:	da08      	bge.n	800b53a <__ieee754_pow+0x25a>
 800b528:	2000      	movs	r0, #0
 800b52a:	f000 fe77 	bl	800c21c <__math_oflow>
 800b52e:	e6ff      	b.n	800b330 <__ieee754_pow+0x50>
 800b530:	4b1c      	ldr	r3, [pc, #112]	@ (800b5a4 <__ieee754_pow+0x2c4>)
 800b532:	e7e8      	b.n	800b506 <__ieee754_pow+0x226>
 800b534:	9b06      	ldr	r3, [sp, #24]
 800b536:	2b00      	cmp	r3, #0
 800b538:	dcf6      	bgt.n	800b528 <__ieee754_pow+0x248>
 800b53a:	2000      	movs	r0, #0
 800b53c:	f000 fe67 	bl	800c20e <__math_uflow>
 800b540:	e6f6      	b.n	800b330 <__ieee754_pow+0x50>
 800b542:	4b19      	ldr	r3, [pc, #100]	@ (800b5a8 <__ieee754_pow+0x2c8>)
 800b544:	429c      	cmp	r4, r3
 800b546:	d80b      	bhi.n	800b560 <__ieee754_pow+0x280>
 800b548:	9808      	ldr	r0, [sp, #32]
 800b54a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b54c:	2300      	movs	r3, #0
 800b54e:	2200      	movs	r2, #0
 800b550:	f7f4 ff7e 	bl	8000450 <__aeabi_dcmplt>
 800b554:	1e43      	subs	r3, r0, #1
 800b556:	4198      	sbcs	r0, r3
 800b558:	9b06      	ldr	r3, [sp, #24]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	daee      	bge.n	800b53c <__ieee754_pow+0x25c>
 800b55e:	e7e4      	b.n	800b52a <__ieee754_pow+0x24a>
 800b560:	4b0d      	ldr	r3, [pc, #52]	@ (800b598 <__ieee754_pow+0x2b8>)
 800b562:	2200      	movs	r2, #0
 800b564:	429c      	cmp	r4, r3
 800b566:	d921      	bls.n	800b5ac <__ieee754_pow+0x2cc>
 800b568:	9808      	ldr	r0, [sp, #32]
 800b56a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b56c:	2300      	movs	r3, #0
 800b56e:	f7f4 ff6f 	bl	8000450 <__aeabi_dcmplt>
 800b572:	1e43      	subs	r3, r0, #1
 800b574:	4198      	sbcs	r0, r3
 800b576:	9b06      	ldr	r3, [sp, #24]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	dcd6      	bgt.n	800b52a <__ieee754_pow+0x24a>
 800b57c:	e7de      	b.n	800b53c <__ieee754_pow+0x25c>
 800b57e:	46c0      	nop			@ (mov r8, r8)
 800b580:	fff00000 	.word	0xfff00000
 800b584:	7ff00000 	.word	0x7ff00000
 800b588:	c0100000 	.word	0xc0100000
 800b58c:	433fffff 	.word	0x433fffff
 800b590:	3fefffff 	.word	0x3fefffff
 800b594:	fffffc01 	.word	0xfffffc01
 800b598:	3ff00000 	.word	0x3ff00000
 800b59c:	3fe00000 	.word	0x3fe00000
 800b5a0:	43f00000 	.word	0x43f00000
 800b5a4:	bff00000 	.word	0xbff00000
 800b5a8:	3feffffe 	.word	0x3feffffe
 800b5ac:	9800      	ldr	r0, [sp, #0]
 800b5ae:	9901      	ldr	r1, [sp, #4]
 800b5b0:	4b4f      	ldr	r3, [pc, #316]	@ (800b6f0 <__ieee754_pow+0x410>)
 800b5b2:	f7f6 fcdf 	bl	8001f74 <__aeabi_dsub>
 800b5b6:	22c0      	movs	r2, #192	@ 0xc0
 800b5b8:	4b4e      	ldr	r3, [pc, #312]	@ (800b6f4 <__ieee754_pow+0x414>)
 800b5ba:	05d2      	lsls	r2, r2, #23
 800b5bc:	0006      	movs	r6, r0
 800b5be:	000f      	movs	r7, r1
 800b5c0:	f7f6 fa10 	bl	80019e4 <__aeabi_dmul>
 800b5c4:	4a4c      	ldr	r2, [pc, #304]	@ (800b6f8 <__ieee754_pow+0x418>)
 800b5c6:	9004      	str	r0, [sp, #16]
 800b5c8:	9105      	str	r1, [sp, #20]
 800b5ca:	4b4c      	ldr	r3, [pc, #304]	@ (800b6fc <__ieee754_pow+0x41c>)
 800b5cc:	0030      	movs	r0, r6
 800b5ce:	0039      	movs	r1, r7
 800b5d0:	f7f6 fa08 	bl	80019e4 <__aeabi_dmul>
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	9000      	str	r0, [sp, #0]
 800b5d8:	9101      	str	r1, [sp, #4]
 800b5da:	4b49      	ldr	r3, [pc, #292]	@ (800b700 <__ieee754_pow+0x420>)
 800b5dc:	0030      	movs	r0, r6
 800b5de:	0039      	movs	r1, r7
 800b5e0:	f7f6 fa00 	bl	80019e4 <__aeabi_dmul>
 800b5e4:	0002      	movs	r2, r0
 800b5e6:	000b      	movs	r3, r1
 800b5e8:	4846      	ldr	r0, [pc, #280]	@ (800b704 <__ieee754_pow+0x424>)
 800b5ea:	4947      	ldr	r1, [pc, #284]	@ (800b708 <__ieee754_pow+0x428>)
 800b5ec:	f7f6 fcc2 	bl	8001f74 <__aeabi_dsub>
 800b5f0:	0032      	movs	r2, r6
 800b5f2:	003b      	movs	r3, r7
 800b5f4:	f7f6 f9f6 	bl	80019e4 <__aeabi_dmul>
 800b5f8:	0002      	movs	r2, r0
 800b5fa:	000b      	movs	r3, r1
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	4943      	ldr	r1, [pc, #268]	@ (800b70c <__ieee754_pow+0x42c>)
 800b600:	f7f6 fcb8 	bl	8001f74 <__aeabi_dsub>
 800b604:	0032      	movs	r2, r6
 800b606:	0004      	movs	r4, r0
 800b608:	000d      	movs	r5, r1
 800b60a:	003b      	movs	r3, r7
 800b60c:	0030      	movs	r0, r6
 800b60e:	0039      	movs	r1, r7
 800b610:	f7f6 f9e8 	bl	80019e4 <__aeabi_dmul>
 800b614:	0002      	movs	r2, r0
 800b616:	000b      	movs	r3, r1
 800b618:	0020      	movs	r0, r4
 800b61a:	0029      	movs	r1, r5
 800b61c:	f7f6 f9e2 	bl	80019e4 <__aeabi_dmul>
 800b620:	4a3b      	ldr	r2, [pc, #236]	@ (800b710 <__ieee754_pow+0x430>)
 800b622:	4b34      	ldr	r3, [pc, #208]	@ (800b6f4 <__ieee754_pow+0x414>)
 800b624:	f7f6 f9de 	bl	80019e4 <__aeabi_dmul>
 800b628:	0002      	movs	r2, r0
 800b62a:	000b      	movs	r3, r1
 800b62c:	9800      	ldr	r0, [sp, #0]
 800b62e:	9901      	ldr	r1, [sp, #4]
 800b630:	f7f6 fca0 	bl	8001f74 <__aeabi_dsub>
 800b634:	0002      	movs	r2, r0
 800b636:	000b      	movs	r3, r1
 800b638:	0004      	movs	r4, r0
 800b63a:	000d      	movs	r5, r1
 800b63c:	9804      	ldr	r0, [sp, #16]
 800b63e:	9905      	ldr	r1, [sp, #20]
 800b640:	f7f5 fa28 	bl	8000a94 <__aeabi_dadd>
 800b644:	9a04      	ldr	r2, [sp, #16]
 800b646:	9b05      	ldr	r3, [sp, #20]
 800b648:	2000      	movs	r0, #0
 800b64a:	9000      	str	r0, [sp, #0]
 800b64c:	9101      	str	r1, [sp, #4]
 800b64e:	f7f6 fc91 	bl	8001f74 <__aeabi_dsub>
 800b652:	0002      	movs	r2, r0
 800b654:	000b      	movs	r3, r1
 800b656:	0020      	movs	r0, r4
 800b658:	0029      	movs	r1, r5
 800b65a:	f7f6 fc8b 	bl	8001f74 <__aeabi_dsub>
 800b65e:	9b02      	ldr	r3, [sp, #8]
 800b660:	9c03      	ldr	r4, [sp, #12]
 800b662:	9304      	str	r3, [sp, #16]
 800b664:	9405      	str	r4, [sp, #20]
 800b666:	2300      	movs	r3, #0
 800b668:	9304      	str	r3, [sp, #16]
 800b66a:	9c04      	ldr	r4, [sp, #16]
 800b66c:	9d05      	ldr	r5, [sp, #20]
 800b66e:	0006      	movs	r6, r0
 800b670:	000f      	movs	r7, r1
 800b672:	9802      	ldr	r0, [sp, #8]
 800b674:	9903      	ldr	r1, [sp, #12]
 800b676:	0022      	movs	r2, r4
 800b678:	002b      	movs	r3, r5
 800b67a:	f7f6 fc7b 	bl	8001f74 <__aeabi_dsub>
 800b67e:	9a00      	ldr	r2, [sp, #0]
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	f7f6 f9af 	bl	80019e4 <__aeabi_dmul>
 800b686:	9a02      	ldr	r2, [sp, #8]
 800b688:	9b03      	ldr	r3, [sp, #12]
 800b68a:	9006      	str	r0, [sp, #24]
 800b68c:	9107      	str	r1, [sp, #28]
 800b68e:	0030      	movs	r0, r6
 800b690:	0039      	movs	r1, r7
 800b692:	f7f6 f9a7 	bl	80019e4 <__aeabi_dmul>
 800b696:	0002      	movs	r2, r0
 800b698:	000b      	movs	r3, r1
 800b69a:	9806      	ldr	r0, [sp, #24]
 800b69c:	9907      	ldr	r1, [sp, #28]
 800b69e:	f7f5 f9f9 	bl	8000a94 <__aeabi_dadd>
 800b6a2:	0022      	movs	r2, r4
 800b6a4:	002b      	movs	r3, r5
 800b6a6:	9002      	str	r0, [sp, #8]
 800b6a8:	9103      	str	r1, [sp, #12]
 800b6aa:	9800      	ldr	r0, [sp, #0]
 800b6ac:	9901      	ldr	r1, [sp, #4]
 800b6ae:	f7f6 f999 	bl	80019e4 <__aeabi_dmul>
 800b6b2:	000b      	movs	r3, r1
 800b6b4:	0002      	movs	r2, r0
 800b6b6:	0006      	movs	r6, r0
 800b6b8:	000f      	movs	r7, r1
 800b6ba:	9802      	ldr	r0, [sp, #8]
 800b6bc:	9903      	ldr	r1, [sp, #12]
 800b6be:	f7f5 f9e9 	bl	8000a94 <__aeabi_dadd>
 800b6c2:	9000      	str	r0, [sp, #0]
 800b6c4:	9101      	str	r1, [sp, #4]
 800b6c6:	9c01      	ldr	r4, [sp, #4]
 800b6c8:	4b12      	ldr	r3, [pc, #72]	@ (800b714 <__ieee754_pow+0x434>)
 800b6ca:	9406      	str	r4, [sp, #24]
 800b6cc:	429c      	cmp	r4, r3
 800b6ce:	dc00      	bgt.n	800b6d2 <__ieee754_pow+0x3f2>
 800b6d0:	e222      	b.n	800bb18 <__ieee754_pow+0x838>
 800b6d2:	4a11      	ldr	r2, [pc, #68]	@ (800b718 <__ieee754_pow+0x438>)
 800b6d4:	18a3      	adds	r3, r4, r2
 800b6d6:	9a00      	ldr	r2, [sp, #0]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	d100      	bne.n	800b6de <__ieee754_pow+0x3fe>
 800b6dc:	e1a0      	b.n	800ba20 <__ieee754_pow+0x740>
 800b6de:	9808      	ldr	r0, [sp, #32]
 800b6e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f7f4 feb3 	bl	8000450 <__aeabi_dcmplt>
 800b6ea:	1e43      	subs	r3, r0, #1
 800b6ec:	4198      	sbcs	r0, r3
 800b6ee:	e71c      	b.n	800b52a <__ieee754_pow+0x24a>
 800b6f0:	3ff00000 	.word	0x3ff00000
 800b6f4:	3ff71547 	.word	0x3ff71547
 800b6f8:	f85ddf44 	.word	0xf85ddf44
 800b6fc:	3e54ae0b 	.word	0x3e54ae0b
 800b700:	3fd00000 	.word	0x3fd00000
 800b704:	55555555 	.word	0x55555555
 800b708:	3fd55555 	.word	0x3fd55555
 800b70c:	3fe00000 	.word	0x3fe00000
 800b710:	652b82fe 	.word	0x652b82fe
 800b714:	408fffff 	.word	0x408fffff
 800b718:	bf700000 	.word	0xbf700000
 800b71c:	4be0      	ldr	r3, [pc, #896]	@ (800baa0 <__ieee754_pow+0x7c0>)
 800b71e:	2200      	movs	r2, #0
 800b720:	423b      	tst	r3, r7
 800b722:	d10b      	bne.n	800b73c <__ieee754_pow+0x45c>
 800b724:	9800      	ldr	r0, [sp, #0]
 800b726:	9901      	ldr	r1, [sp, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	4bde      	ldr	r3, [pc, #888]	@ (800baa4 <__ieee754_pow+0x7c4>)
 800b72c:	f7f6 f95a 	bl	80019e4 <__aeabi_dmul>
 800b730:	2235      	movs	r2, #53	@ 0x35
 800b732:	9000      	str	r0, [sp, #0]
 800b734:	9101      	str	r1, [sp, #4]
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	4252      	negs	r2, r2
 800b73a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b73e:	49da      	ldr	r1, [pc, #872]	@ (800baa8 <__ieee754_pow+0x7c8>)
 800b740:	151b      	asrs	r3, r3, #20
 800b742:	185b      	adds	r3, r3, r1
 800b744:	189b      	adds	r3, r3, r2
 800b746:	930e      	str	r3, [sp, #56]	@ 0x38
 800b748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b74a:	4dd8      	ldr	r5, [pc, #864]	@ (800baac <__ieee754_pow+0x7cc>)
 800b74c:	031b      	lsls	r3, r3, #12
 800b74e:	4ad8      	ldr	r2, [pc, #864]	@ (800bab0 <__ieee754_pow+0x7d0>)
 800b750:	0b1b      	lsrs	r3, r3, #12
 800b752:	2600      	movs	r6, #0
 800b754:	431d      	orrs	r5, r3
 800b756:	4293      	cmp	r3, r2
 800b758:	dd09      	ble.n	800b76e <__ieee754_pow+0x48e>
 800b75a:	4ad6      	ldr	r2, [pc, #856]	@ (800bab4 <__ieee754_pow+0x7d4>)
 800b75c:	3601      	adds	r6, #1
 800b75e:	4293      	cmp	r3, r2
 800b760:	dd05      	ble.n	800b76e <__ieee754_pow+0x48e>
 800b762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b764:	199b      	adds	r3, r3, r6
 800b766:	2600      	movs	r6, #0
 800b768:	930e      	str	r3, [sp, #56]	@ 0x38
 800b76a:	4bd3      	ldr	r3, [pc, #844]	@ (800bab8 <__ieee754_pow+0x7d8>)
 800b76c:	18ed      	adds	r5, r5, r3
 800b76e:	9800      	ldr	r0, [sp, #0]
 800b770:	9901      	ldr	r1, [sp, #4]
 800b772:	0029      	movs	r1, r5
 800b774:	4bd1      	ldr	r3, [pc, #836]	@ (800babc <__ieee754_pow+0x7dc>)
 800b776:	00f2      	lsls	r2, r6, #3
 800b778:	189b      	adds	r3, r3, r2
 800b77a:	685c      	ldr	r4, [r3, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b780:	930a      	str	r3, [sp, #40]	@ 0x28
 800b782:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b784:	001a      	movs	r2, r3
 800b786:	0023      	movs	r3, r4
 800b788:	900c      	str	r0, [sp, #48]	@ 0x30
 800b78a:	910d      	str	r1, [sp, #52]	@ 0x34
 800b78c:	f7f6 fbf2 	bl	8001f74 <__aeabi_dsub>
 800b790:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b794:	9010      	str	r0, [sp, #64]	@ 0x40
 800b796:	9111      	str	r1, [sp, #68]	@ 0x44
 800b798:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b79a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b79c:	f7f5 f97a 	bl	8000a94 <__aeabi_dadd>
 800b7a0:	0002      	movs	r2, r0
 800b7a2:	000b      	movs	r3, r1
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	49c1      	ldr	r1, [pc, #772]	@ (800baac <__ieee754_pow+0x7cc>)
 800b7a8:	f7f5 fcd8 	bl	800115c <__aeabi_ddiv>
 800b7ac:	0002      	movs	r2, r0
 800b7ae:	000b      	movs	r3, r1
 800b7b0:	9012      	str	r0, [sp, #72]	@ 0x48
 800b7b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b7b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b7b6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b7b8:	f7f6 f914 	bl	80019e4 <__aeabi_dmul>
 800b7bc:	9006      	str	r0, [sp, #24]
 800b7be:	9107      	str	r1, [sp, #28]
 800b7c0:	9b06      	ldr	r3, [sp, #24]
 800b7c2:	9c07      	ldr	r4, [sp, #28]
 800b7c4:	2180      	movs	r1, #128	@ 0x80
 800b7c6:	9304      	str	r3, [sp, #16]
 800b7c8:	9405      	str	r4, [sp, #20]
 800b7ca:	2080      	movs	r0, #128	@ 0x80
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	106d      	asrs	r5, r5, #1
 800b7d2:	0589      	lsls	r1, r1, #22
 800b7d4:	9304      	str	r3, [sp, #16]
 800b7d6:	4329      	orrs	r1, r5
 800b7d8:	0300      	lsls	r0, r0, #12
 800b7da:	9b04      	ldr	r3, [sp, #16]
 800b7dc:	9c05      	ldr	r4, [sp, #20]
 800b7de:	1809      	adds	r1, r1, r0
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	9401      	str	r4, [sp, #4]
 800b7e4:	04b6      	lsls	r6, r6, #18
 800b7e6:	198b      	adds	r3, r1, r6
 800b7e8:	9800      	ldr	r0, [sp, #0]
 800b7ea:	9901      	ldr	r1, [sp, #4]
 800b7ec:	0014      	movs	r4, r2
 800b7ee:	001d      	movs	r5, r3
 800b7f0:	f7f6 f8f8 	bl	80019e4 <__aeabi_dmul>
 800b7f4:	0002      	movs	r2, r0
 800b7f6:	000b      	movs	r3, r1
 800b7f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b7fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b7fc:	f7f6 fbba 	bl	8001f74 <__aeabi_dsub>
 800b800:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b802:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b804:	0006      	movs	r6, r0
 800b806:	000f      	movs	r7, r1
 800b808:	0020      	movs	r0, r4
 800b80a:	0029      	movs	r1, r5
 800b80c:	f7f6 fbb2 	bl	8001f74 <__aeabi_dsub>
 800b810:	0002      	movs	r2, r0
 800b812:	000b      	movs	r3, r1
 800b814:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800b816:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b818:	f7f6 fbac 	bl	8001f74 <__aeabi_dsub>
 800b81c:	9a00      	ldr	r2, [sp, #0]
 800b81e:	9b01      	ldr	r3, [sp, #4]
 800b820:	f7f6 f8e0 	bl	80019e4 <__aeabi_dmul>
 800b824:	0002      	movs	r2, r0
 800b826:	000b      	movs	r3, r1
 800b828:	0030      	movs	r0, r6
 800b82a:	0039      	movs	r1, r7
 800b82c:	f7f6 fba2 	bl	8001f74 <__aeabi_dsub>
 800b830:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b832:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b834:	f7f6 f8d6 	bl	80019e4 <__aeabi_dmul>
 800b838:	9a06      	ldr	r2, [sp, #24]
 800b83a:	9b07      	ldr	r3, [sp, #28]
 800b83c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b83e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b840:	0010      	movs	r0, r2
 800b842:	0019      	movs	r1, r3
 800b844:	f7f6 f8ce 	bl	80019e4 <__aeabi_dmul>
 800b848:	0006      	movs	r6, r0
 800b84a:	000f      	movs	r7, r1
 800b84c:	4a9c      	ldr	r2, [pc, #624]	@ (800bac0 <__ieee754_pow+0x7e0>)
 800b84e:	4b9d      	ldr	r3, [pc, #628]	@ (800bac4 <__ieee754_pow+0x7e4>)
 800b850:	f7f6 f8c8 	bl	80019e4 <__aeabi_dmul>
 800b854:	4a9c      	ldr	r2, [pc, #624]	@ (800bac8 <__ieee754_pow+0x7e8>)
 800b856:	4b9d      	ldr	r3, [pc, #628]	@ (800bacc <__ieee754_pow+0x7ec>)
 800b858:	f7f5 f91c 	bl	8000a94 <__aeabi_dadd>
 800b85c:	0032      	movs	r2, r6
 800b85e:	003b      	movs	r3, r7
 800b860:	f7f6 f8c0 	bl	80019e4 <__aeabi_dmul>
 800b864:	4a9a      	ldr	r2, [pc, #616]	@ (800bad0 <__ieee754_pow+0x7f0>)
 800b866:	4b9b      	ldr	r3, [pc, #620]	@ (800bad4 <__ieee754_pow+0x7f4>)
 800b868:	f7f5 f914 	bl	8000a94 <__aeabi_dadd>
 800b86c:	0032      	movs	r2, r6
 800b86e:	003b      	movs	r3, r7
 800b870:	f7f6 f8b8 	bl	80019e4 <__aeabi_dmul>
 800b874:	4a98      	ldr	r2, [pc, #608]	@ (800bad8 <__ieee754_pow+0x7f8>)
 800b876:	4b99      	ldr	r3, [pc, #612]	@ (800badc <__ieee754_pow+0x7fc>)
 800b878:	f7f5 f90c 	bl	8000a94 <__aeabi_dadd>
 800b87c:	0032      	movs	r2, r6
 800b87e:	003b      	movs	r3, r7
 800b880:	f7f6 f8b0 	bl	80019e4 <__aeabi_dmul>
 800b884:	4a96      	ldr	r2, [pc, #600]	@ (800bae0 <__ieee754_pow+0x800>)
 800b886:	4b97      	ldr	r3, [pc, #604]	@ (800bae4 <__ieee754_pow+0x804>)
 800b888:	f7f5 f904 	bl	8000a94 <__aeabi_dadd>
 800b88c:	0032      	movs	r2, r6
 800b88e:	003b      	movs	r3, r7
 800b890:	f7f6 f8a8 	bl	80019e4 <__aeabi_dmul>
 800b894:	4a94      	ldr	r2, [pc, #592]	@ (800bae8 <__ieee754_pow+0x808>)
 800b896:	4b95      	ldr	r3, [pc, #596]	@ (800baec <__ieee754_pow+0x80c>)
 800b898:	f7f5 f8fc 	bl	8000a94 <__aeabi_dadd>
 800b89c:	0032      	movs	r2, r6
 800b89e:	0004      	movs	r4, r0
 800b8a0:	000d      	movs	r5, r1
 800b8a2:	003b      	movs	r3, r7
 800b8a4:	0030      	movs	r0, r6
 800b8a6:	0039      	movs	r1, r7
 800b8a8:	f7f6 f89c 	bl	80019e4 <__aeabi_dmul>
 800b8ac:	0002      	movs	r2, r0
 800b8ae:	000b      	movs	r3, r1
 800b8b0:	0020      	movs	r0, r4
 800b8b2:	0029      	movs	r1, r5
 800b8b4:	f7f6 f896 	bl	80019e4 <__aeabi_dmul>
 800b8b8:	9a00      	ldr	r2, [sp, #0]
 800b8ba:	9b01      	ldr	r3, [sp, #4]
 800b8bc:	0004      	movs	r4, r0
 800b8be:	000d      	movs	r5, r1
 800b8c0:	9806      	ldr	r0, [sp, #24]
 800b8c2:	9907      	ldr	r1, [sp, #28]
 800b8c4:	f7f5 f8e6 	bl	8000a94 <__aeabi_dadd>
 800b8c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8cc:	f7f6 f88a 	bl	80019e4 <__aeabi_dmul>
 800b8d0:	0022      	movs	r2, r4
 800b8d2:	002b      	movs	r3, r5
 800b8d4:	f7f5 f8de 	bl	8000a94 <__aeabi_dadd>
 800b8d8:	9a00      	ldr	r2, [sp, #0]
 800b8da:	9b01      	ldr	r3, [sp, #4]
 800b8dc:	900c      	str	r0, [sp, #48]	@ 0x30
 800b8de:	910d      	str	r1, [sp, #52]	@ 0x34
 800b8e0:	0010      	movs	r0, r2
 800b8e2:	0019      	movs	r1, r3
 800b8e4:	f7f6 f87e 	bl	80019e4 <__aeabi_dmul>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	4b81      	ldr	r3, [pc, #516]	@ (800baf0 <__ieee754_pow+0x810>)
 800b8ec:	0004      	movs	r4, r0
 800b8ee:	000d      	movs	r5, r1
 800b8f0:	f7f5 f8d0 	bl	8000a94 <__aeabi_dadd>
 800b8f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b8f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8f8:	f7f5 f8cc 	bl	8000a94 <__aeabi_dadd>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	000f      	movs	r7, r1
 800b900:	0006      	movs	r6, r0
 800b902:	0002      	movs	r2, r0
 800b904:	000b      	movs	r3, r1
 800b906:	9800      	ldr	r0, [sp, #0]
 800b908:	9901      	ldr	r1, [sp, #4]
 800b90a:	f7f6 f86b 	bl	80019e4 <__aeabi_dmul>
 800b90e:	2200      	movs	r2, #0
 800b910:	9000      	str	r0, [sp, #0]
 800b912:	9101      	str	r1, [sp, #4]
 800b914:	4b76      	ldr	r3, [pc, #472]	@ (800baf0 <__ieee754_pow+0x810>)
 800b916:	0030      	movs	r0, r6
 800b918:	0039      	movs	r1, r7
 800b91a:	f7f6 fb2b 	bl	8001f74 <__aeabi_dsub>
 800b91e:	0022      	movs	r2, r4
 800b920:	002b      	movs	r3, r5
 800b922:	f7f6 fb27 	bl	8001f74 <__aeabi_dsub>
 800b926:	0002      	movs	r2, r0
 800b928:	000b      	movs	r3, r1
 800b92a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800b92c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b92e:	f7f6 fb21 	bl	8001f74 <__aeabi_dsub>
 800b932:	9a06      	ldr	r2, [sp, #24]
 800b934:	9b07      	ldr	r3, [sp, #28]
 800b936:	f7f6 f855 	bl	80019e4 <__aeabi_dmul>
 800b93a:	0032      	movs	r2, r6
 800b93c:	0004      	movs	r4, r0
 800b93e:	000d      	movs	r5, r1
 800b940:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b942:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b944:	003b      	movs	r3, r7
 800b946:	f7f6 f84d 	bl	80019e4 <__aeabi_dmul>
 800b94a:	0002      	movs	r2, r0
 800b94c:	000b      	movs	r3, r1
 800b94e:	0020      	movs	r0, r4
 800b950:	0029      	movs	r1, r5
 800b952:	f7f5 f89f 	bl	8000a94 <__aeabi_dadd>
 800b956:	0004      	movs	r4, r0
 800b958:	000d      	movs	r5, r1
 800b95a:	0002      	movs	r2, r0
 800b95c:	000b      	movs	r3, r1
 800b95e:	9800      	ldr	r0, [sp, #0]
 800b960:	9901      	ldr	r1, [sp, #4]
 800b962:	f7f5 f897 	bl	8000a94 <__aeabi_dadd>
 800b966:	22e0      	movs	r2, #224	@ 0xe0
 800b968:	2000      	movs	r0, #0
 800b96a:	4b62      	ldr	r3, [pc, #392]	@ (800baf4 <__ieee754_pow+0x814>)
 800b96c:	0612      	lsls	r2, r2, #24
 800b96e:	0006      	movs	r6, r0
 800b970:	000f      	movs	r7, r1
 800b972:	f7f6 f837 	bl	80019e4 <__aeabi_dmul>
 800b976:	9006      	str	r0, [sp, #24]
 800b978:	9107      	str	r1, [sp, #28]
 800b97a:	9a00      	ldr	r2, [sp, #0]
 800b97c:	9b01      	ldr	r3, [sp, #4]
 800b97e:	0030      	movs	r0, r6
 800b980:	0039      	movs	r1, r7
 800b982:	f7f6 faf7 	bl	8001f74 <__aeabi_dsub>
 800b986:	0002      	movs	r2, r0
 800b988:	000b      	movs	r3, r1
 800b98a:	0020      	movs	r0, r4
 800b98c:	0029      	movs	r1, r5
 800b98e:	f7f6 faf1 	bl	8001f74 <__aeabi_dsub>
 800b992:	4a59      	ldr	r2, [pc, #356]	@ (800baf8 <__ieee754_pow+0x818>)
 800b994:	4b57      	ldr	r3, [pc, #348]	@ (800baf4 <__ieee754_pow+0x814>)
 800b996:	f7f6 f825 	bl	80019e4 <__aeabi_dmul>
 800b99a:	4a58      	ldr	r2, [pc, #352]	@ (800bafc <__ieee754_pow+0x81c>)
 800b99c:	0004      	movs	r4, r0
 800b99e:	000d      	movs	r5, r1
 800b9a0:	0030      	movs	r0, r6
 800b9a2:	0039      	movs	r1, r7
 800b9a4:	4b56      	ldr	r3, [pc, #344]	@ (800bb00 <__ieee754_pow+0x820>)
 800b9a6:	f7f6 f81d 	bl	80019e4 <__aeabi_dmul>
 800b9aa:	0002      	movs	r2, r0
 800b9ac:	000b      	movs	r3, r1
 800b9ae:	0020      	movs	r0, r4
 800b9b0:	0029      	movs	r1, r5
 800b9b2:	f7f5 f86f 	bl	8000a94 <__aeabi_dadd>
 800b9b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b9b8:	4b52      	ldr	r3, [pc, #328]	@ (800bb04 <__ieee754_pow+0x824>)
 800b9ba:	189b      	adds	r3, r3, r2
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	f7f5 f868 	bl	8000a94 <__aeabi_dadd>
 800b9c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b9c8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b9ca:	f7f6 fecd 	bl	8002768 <__aeabi_i2d>
 800b9ce:	0004      	movs	r4, r0
 800b9d0:	000d      	movs	r5, r1
 800b9d2:	9806      	ldr	r0, [sp, #24]
 800b9d4:	9907      	ldr	r1, [sp, #28]
 800b9d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b9d8:	4b4b      	ldr	r3, [pc, #300]	@ (800bb08 <__ieee754_pow+0x828>)
 800b9da:	189b      	adds	r3, r3, r2
 800b9dc:	681e      	ldr	r6, [r3, #0]
 800b9de:	685f      	ldr	r7, [r3, #4]
 800b9e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9e4:	f7f5 f856 	bl	8000a94 <__aeabi_dadd>
 800b9e8:	0032      	movs	r2, r6
 800b9ea:	003b      	movs	r3, r7
 800b9ec:	f7f5 f852 	bl	8000a94 <__aeabi_dadd>
 800b9f0:	0022      	movs	r2, r4
 800b9f2:	002b      	movs	r3, r5
 800b9f4:	f7f5 f84e 	bl	8000a94 <__aeabi_dadd>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	0022      	movs	r2, r4
 800b9fc:	002b      	movs	r3, r5
 800b9fe:	9000      	str	r0, [sp, #0]
 800ba00:	9101      	str	r1, [sp, #4]
 800ba02:	f7f6 fab7 	bl	8001f74 <__aeabi_dsub>
 800ba06:	0032      	movs	r2, r6
 800ba08:	003b      	movs	r3, r7
 800ba0a:	f7f6 fab3 	bl	8001f74 <__aeabi_dsub>
 800ba0e:	9a06      	ldr	r2, [sp, #24]
 800ba10:	9b07      	ldr	r3, [sp, #28]
 800ba12:	f7f6 faaf 	bl	8001f74 <__aeabi_dsub>
 800ba16:	0002      	movs	r2, r0
 800ba18:	000b      	movs	r3, r1
 800ba1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba1e:	e61c      	b.n	800b65a <__ieee754_pow+0x37a>
 800ba20:	4a3a      	ldr	r2, [pc, #232]	@ (800bb0c <__ieee754_pow+0x82c>)
 800ba22:	4b3b      	ldr	r3, [pc, #236]	@ (800bb10 <__ieee754_pow+0x830>)
 800ba24:	9802      	ldr	r0, [sp, #8]
 800ba26:	9903      	ldr	r1, [sp, #12]
 800ba28:	f7f5 f834 	bl	8000a94 <__aeabi_dadd>
 800ba2c:	0032      	movs	r2, r6
 800ba2e:	003b      	movs	r3, r7
 800ba30:	9004      	str	r0, [sp, #16]
 800ba32:	9105      	str	r1, [sp, #20]
 800ba34:	9800      	ldr	r0, [sp, #0]
 800ba36:	9901      	ldr	r1, [sp, #4]
 800ba38:	f7f6 fa9c 	bl	8001f74 <__aeabi_dsub>
 800ba3c:	0002      	movs	r2, r0
 800ba3e:	000b      	movs	r3, r1
 800ba40:	9804      	ldr	r0, [sp, #16]
 800ba42:	9905      	ldr	r1, [sp, #20]
 800ba44:	f7f4 fd18 	bl	8000478 <__aeabi_dcmpgt>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d000      	beq.n	800ba4e <__ieee754_pow+0x76e>
 800ba4c:	e647      	b.n	800b6de <__ieee754_pow+0x3fe>
 800ba4e:	2580      	movs	r5, #128	@ 0x80
 800ba50:	4b30      	ldr	r3, [pc, #192]	@ (800bb14 <__ieee754_pow+0x834>)
 800ba52:	036d      	lsls	r5, r5, #13
 800ba54:	1524      	asrs	r4, r4, #20
 800ba56:	18e4      	adds	r4, r4, r3
 800ba58:	002b      	movs	r3, r5
 800ba5a:	4123      	asrs	r3, r4
 800ba5c:	9a06      	ldr	r2, [sp, #24]
 800ba5e:	4912      	ldr	r1, [pc, #72]	@ (800baa8 <__ieee754_pow+0x7c8>)
 800ba60:	189b      	adds	r3, r3, r2
 800ba62:	005a      	lsls	r2, r3, #1
 800ba64:	4c14      	ldr	r4, [pc, #80]	@ (800bab8 <__ieee754_pow+0x7d8>)
 800ba66:	0d52      	lsrs	r2, r2, #21
 800ba68:	1852      	adds	r2, r2, r1
 800ba6a:	4114      	asrs	r4, r2
 800ba6c:	401c      	ands	r4, r3
 800ba6e:	0021      	movs	r1, r4
 800ba70:	2414      	movs	r4, #20
 800ba72:	031b      	lsls	r3, r3, #12
 800ba74:	0b1b      	lsrs	r3, r3, #12
 800ba76:	432b      	orrs	r3, r5
 800ba78:	1aa2      	subs	r2, r4, r2
 800ba7a:	4113      	asrs	r3, r2
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	9b06      	ldr	r3, [sp, #24]
 800ba80:	2000      	movs	r0, #0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	da02      	bge.n	800ba8c <__ieee754_pow+0x7ac>
 800ba86:	9b00      	ldr	r3, [sp, #0]
 800ba88:	425b      	negs	r3, r3
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	0002      	movs	r2, r0
 800ba8e:	000b      	movs	r3, r1
 800ba90:	0030      	movs	r0, r6
 800ba92:	0039      	movs	r1, r7
 800ba94:	f7f6 fa6e 	bl	8001f74 <__aeabi_dsub>
 800ba98:	0006      	movs	r6, r0
 800ba9a:	000f      	movs	r7, r1
 800ba9c:	e065      	b.n	800bb6a <__ieee754_pow+0x88a>
 800ba9e:	46c0      	nop			@ (mov r8, r8)
 800baa0:	7ff00000 	.word	0x7ff00000
 800baa4:	43400000 	.word	0x43400000
 800baa8:	fffffc01 	.word	0xfffffc01
 800baac:	3ff00000 	.word	0x3ff00000
 800bab0:	0003988e 	.word	0x0003988e
 800bab4:	000bb679 	.word	0x000bb679
 800bab8:	fff00000 	.word	0xfff00000
 800babc:	0800d190 	.word	0x0800d190
 800bac0:	4a454eef 	.word	0x4a454eef
 800bac4:	3fca7e28 	.word	0x3fca7e28
 800bac8:	93c9db65 	.word	0x93c9db65
 800bacc:	3fcd864a 	.word	0x3fcd864a
 800bad0:	a91d4101 	.word	0xa91d4101
 800bad4:	3fd17460 	.word	0x3fd17460
 800bad8:	518f264d 	.word	0x518f264d
 800badc:	3fd55555 	.word	0x3fd55555
 800bae0:	db6fabff 	.word	0xdb6fabff
 800bae4:	3fdb6db6 	.word	0x3fdb6db6
 800bae8:	33333303 	.word	0x33333303
 800baec:	3fe33333 	.word	0x3fe33333
 800baf0:	40080000 	.word	0x40080000
 800baf4:	3feec709 	.word	0x3feec709
 800baf8:	dc3a03fd 	.word	0xdc3a03fd
 800bafc:	145b01f5 	.word	0x145b01f5
 800bb00:	be3e2fe0 	.word	0xbe3e2fe0
 800bb04:	0800d170 	.word	0x0800d170
 800bb08:	0800d180 	.word	0x0800d180
 800bb0c:	652b82fe 	.word	0x652b82fe
 800bb10:	3c971547 	.word	0x3c971547
 800bb14:	fffffc02 	.word	0xfffffc02
 800bb18:	9b01      	ldr	r3, [sp, #4]
 800bb1a:	005c      	lsls	r4, r3, #1
 800bb1c:	4b72      	ldr	r3, [pc, #456]	@ (800bce8 <__ieee754_pow+0xa08>)
 800bb1e:	0864      	lsrs	r4, r4, #1
 800bb20:	429c      	cmp	r4, r3
 800bb22:	d91c      	bls.n	800bb5e <__ieee754_pow+0x87e>
 800bb24:	4a71      	ldr	r2, [pc, #452]	@ (800bcec <__ieee754_pow+0xa0c>)
 800bb26:	9b01      	ldr	r3, [sp, #4]
 800bb28:	189b      	adds	r3, r3, r2
 800bb2a:	9a00      	ldr	r2, [sp, #0]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	d008      	beq.n	800bb42 <__ieee754_pow+0x862>
 800bb30:	9808      	ldr	r0, [sp, #32]
 800bb32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb34:	2300      	movs	r3, #0
 800bb36:	2200      	movs	r2, #0
 800bb38:	f7f4 fc8a 	bl	8000450 <__aeabi_dcmplt>
 800bb3c:	1e43      	subs	r3, r0, #1
 800bb3e:	4198      	sbcs	r0, r3
 800bb40:	e4fc      	b.n	800b53c <__ieee754_pow+0x25c>
 800bb42:	0032      	movs	r2, r6
 800bb44:	9800      	ldr	r0, [sp, #0]
 800bb46:	9901      	ldr	r1, [sp, #4]
 800bb48:	003b      	movs	r3, r7
 800bb4a:	f7f6 fa13 	bl	8001f74 <__aeabi_dsub>
 800bb4e:	9a02      	ldr	r2, [sp, #8]
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	f7f4 fc9b 	bl	800048c <__aeabi_dcmpge>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d1ea      	bne.n	800bb30 <__ieee754_pow+0x850>
 800bb5a:	4c65      	ldr	r4, [pc, #404]	@ (800bcf0 <__ieee754_pow+0xa10>)
 800bb5c:	e777      	b.n	800ba4e <__ieee754_pow+0x76e>
 800bb5e:	9a04      	ldr	r2, [sp, #16]
 800bb60:	4b64      	ldr	r3, [pc, #400]	@ (800bcf4 <__ieee754_pow+0xa14>)
 800bb62:	9200      	str	r2, [sp, #0]
 800bb64:	429c      	cmp	r4, r3
 800bb66:	d900      	bls.n	800bb6a <__ieee754_pow+0x88a>
 800bb68:	e771      	b.n	800ba4e <__ieee754_pow+0x76e>
 800bb6a:	9a02      	ldr	r2, [sp, #8]
 800bb6c:	9b03      	ldr	r3, [sp, #12]
 800bb6e:	0030      	movs	r0, r6
 800bb70:	0039      	movs	r1, r7
 800bb72:	f7f4 ff8f 	bl	8000a94 <__aeabi_dadd>
 800bb76:	2000      	movs	r0, #0
 800bb78:	2200      	movs	r2, #0
 800bb7a:	4b5f      	ldr	r3, [pc, #380]	@ (800bcf8 <__ieee754_pow+0xa18>)
 800bb7c:	9004      	str	r0, [sp, #16]
 800bb7e:	9105      	str	r1, [sp, #20]
 800bb80:	f7f5 ff30 	bl	80019e4 <__aeabi_dmul>
 800bb84:	0032      	movs	r2, r6
 800bb86:	003b      	movs	r3, r7
 800bb88:	9006      	str	r0, [sp, #24]
 800bb8a:	9107      	str	r1, [sp, #28]
 800bb8c:	9804      	ldr	r0, [sp, #16]
 800bb8e:	9905      	ldr	r1, [sp, #20]
 800bb90:	f7f6 f9f0 	bl	8001f74 <__aeabi_dsub>
 800bb94:	0002      	movs	r2, r0
 800bb96:	000b      	movs	r3, r1
 800bb98:	9802      	ldr	r0, [sp, #8]
 800bb9a:	9903      	ldr	r1, [sp, #12]
 800bb9c:	f7f6 f9ea 	bl	8001f74 <__aeabi_dsub>
 800bba0:	4a56      	ldr	r2, [pc, #344]	@ (800bcfc <__ieee754_pow+0xa1c>)
 800bba2:	4b57      	ldr	r3, [pc, #348]	@ (800bd00 <__ieee754_pow+0xa20>)
 800bba4:	f7f5 ff1e 	bl	80019e4 <__aeabi_dmul>
 800bba8:	4a56      	ldr	r2, [pc, #344]	@ (800bd04 <__ieee754_pow+0xa24>)
 800bbaa:	0004      	movs	r4, r0
 800bbac:	000d      	movs	r5, r1
 800bbae:	9804      	ldr	r0, [sp, #16]
 800bbb0:	9905      	ldr	r1, [sp, #20]
 800bbb2:	4b55      	ldr	r3, [pc, #340]	@ (800bd08 <__ieee754_pow+0xa28>)
 800bbb4:	f7f5 ff16 	bl	80019e4 <__aeabi_dmul>
 800bbb8:	0002      	movs	r2, r0
 800bbba:	000b      	movs	r3, r1
 800bbbc:	0020      	movs	r0, r4
 800bbbe:	0029      	movs	r1, r5
 800bbc0:	f7f4 ff68 	bl	8000a94 <__aeabi_dadd>
 800bbc4:	0004      	movs	r4, r0
 800bbc6:	000d      	movs	r5, r1
 800bbc8:	0002      	movs	r2, r0
 800bbca:	000b      	movs	r3, r1
 800bbcc:	9806      	ldr	r0, [sp, #24]
 800bbce:	9907      	ldr	r1, [sp, #28]
 800bbd0:	f7f4 ff60 	bl	8000a94 <__aeabi_dadd>
 800bbd4:	9a06      	ldr	r2, [sp, #24]
 800bbd6:	9b07      	ldr	r3, [sp, #28]
 800bbd8:	0006      	movs	r6, r0
 800bbda:	000f      	movs	r7, r1
 800bbdc:	f7f6 f9ca 	bl	8001f74 <__aeabi_dsub>
 800bbe0:	0002      	movs	r2, r0
 800bbe2:	000b      	movs	r3, r1
 800bbe4:	0020      	movs	r0, r4
 800bbe6:	0029      	movs	r1, r5
 800bbe8:	f7f6 f9c4 	bl	8001f74 <__aeabi_dsub>
 800bbec:	0032      	movs	r2, r6
 800bbee:	9002      	str	r0, [sp, #8]
 800bbf0:	9103      	str	r1, [sp, #12]
 800bbf2:	003b      	movs	r3, r7
 800bbf4:	0030      	movs	r0, r6
 800bbf6:	0039      	movs	r1, r7
 800bbf8:	f7f5 fef4 	bl	80019e4 <__aeabi_dmul>
 800bbfc:	0004      	movs	r4, r0
 800bbfe:	000d      	movs	r5, r1
 800bc00:	4a42      	ldr	r2, [pc, #264]	@ (800bd0c <__ieee754_pow+0xa2c>)
 800bc02:	4b43      	ldr	r3, [pc, #268]	@ (800bd10 <__ieee754_pow+0xa30>)
 800bc04:	f7f5 feee 	bl	80019e4 <__aeabi_dmul>
 800bc08:	4a42      	ldr	r2, [pc, #264]	@ (800bd14 <__ieee754_pow+0xa34>)
 800bc0a:	4b43      	ldr	r3, [pc, #268]	@ (800bd18 <__ieee754_pow+0xa38>)
 800bc0c:	f7f6 f9b2 	bl	8001f74 <__aeabi_dsub>
 800bc10:	0022      	movs	r2, r4
 800bc12:	002b      	movs	r3, r5
 800bc14:	f7f5 fee6 	bl	80019e4 <__aeabi_dmul>
 800bc18:	4a40      	ldr	r2, [pc, #256]	@ (800bd1c <__ieee754_pow+0xa3c>)
 800bc1a:	4b41      	ldr	r3, [pc, #260]	@ (800bd20 <__ieee754_pow+0xa40>)
 800bc1c:	f7f4 ff3a 	bl	8000a94 <__aeabi_dadd>
 800bc20:	0022      	movs	r2, r4
 800bc22:	002b      	movs	r3, r5
 800bc24:	f7f5 fede 	bl	80019e4 <__aeabi_dmul>
 800bc28:	4a3e      	ldr	r2, [pc, #248]	@ (800bd24 <__ieee754_pow+0xa44>)
 800bc2a:	4b3f      	ldr	r3, [pc, #252]	@ (800bd28 <__ieee754_pow+0xa48>)
 800bc2c:	f7f6 f9a2 	bl	8001f74 <__aeabi_dsub>
 800bc30:	0022      	movs	r2, r4
 800bc32:	002b      	movs	r3, r5
 800bc34:	f7f5 fed6 	bl	80019e4 <__aeabi_dmul>
 800bc38:	4a3c      	ldr	r2, [pc, #240]	@ (800bd2c <__ieee754_pow+0xa4c>)
 800bc3a:	4b3d      	ldr	r3, [pc, #244]	@ (800bd30 <__ieee754_pow+0xa50>)
 800bc3c:	f7f4 ff2a 	bl	8000a94 <__aeabi_dadd>
 800bc40:	0022      	movs	r2, r4
 800bc42:	002b      	movs	r3, r5
 800bc44:	f7f5 fece 	bl	80019e4 <__aeabi_dmul>
 800bc48:	0002      	movs	r2, r0
 800bc4a:	000b      	movs	r3, r1
 800bc4c:	0030      	movs	r0, r6
 800bc4e:	0039      	movs	r1, r7
 800bc50:	f7f6 f990 	bl	8001f74 <__aeabi_dsub>
 800bc54:	0004      	movs	r4, r0
 800bc56:	000d      	movs	r5, r1
 800bc58:	0002      	movs	r2, r0
 800bc5a:	000b      	movs	r3, r1
 800bc5c:	0030      	movs	r0, r6
 800bc5e:	0039      	movs	r1, r7
 800bc60:	f7f5 fec0 	bl	80019e4 <__aeabi_dmul>
 800bc64:	2380      	movs	r3, #128	@ 0x80
 800bc66:	9004      	str	r0, [sp, #16]
 800bc68:	9105      	str	r1, [sp, #20]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	0020      	movs	r0, r4
 800bc6e:	0029      	movs	r1, r5
 800bc70:	05db      	lsls	r3, r3, #23
 800bc72:	f7f6 f97f 	bl	8001f74 <__aeabi_dsub>
 800bc76:	0002      	movs	r2, r0
 800bc78:	000b      	movs	r3, r1
 800bc7a:	9804      	ldr	r0, [sp, #16]
 800bc7c:	9905      	ldr	r1, [sp, #20]
 800bc7e:	f7f5 fa6d 	bl	800115c <__aeabi_ddiv>
 800bc82:	9a02      	ldr	r2, [sp, #8]
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	0004      	movs	r4, r0
 800bc88:	000d      	movs	r5, r1
 800bc8a:	0030      	movs	r0, r6
 800bc8c:	0039      	movs	r1, r7
 800bc8e:	f7f5 fea9 	bl	80019e4 <__aeabi_dmul>
 800bc92:	9a02      	ldr	r2, [sp, #8]
 800bc94:	9b03      	ldr	r3, [sp, #12]
 800bc96:	f7f4 fefd 	bl	8000a94 <__aeabi_dadd>
 800bc9a:	0002      	movs	r2, r0
 800bc9c:	000b      	movs	r3, r1
 800bc9e:	0020      	movs	r0, r4
 800bca0:	0029      	movs	r1, r5
 800bca2:	f7f6 f967 	bl	8001f74 <__aeabi_dsub>
 800bca6:	0032      	movs	r2, r6
 800bca8:	003b      	movs	r3, r7
 800bcaa:	f7f6 f963 	bl	8001f74 <__aeabi_dsub>
 800bcae:	0002      	movs	r2, r0
 800bcb0:	000b      	movs	r3, r1
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	491f      	ldr	r1, [pc, #124]	@ (800bd34 <__ieee754_pow+0xa54>)
 800bcb6:	f7f6 f95d 	bl	8001f74 <__aeabi_dsub>
 800bcba:	9b00      	ldr	r3, [sp, #0]
 800bcbc:	051b      	lsls	r3, r3, #20
 800bcbe:	185b      	adds	r3, r3, r1
 800bcc0:	151a      	asrs	r2, r3, #20
 800bcc2:	2a00      	cmp	r2, #0
 800bcc4:	dc06      	bgt.n	800bcd4 <__ieee754_pow+0x9f4>
 800bcc6:	9a00      	ldr	r2, [sp, #0]
 800bcc8:	f000 fa16 	bl	800c0f8 <scalbn>
 800bccc:	9a08      	ldr	r2, [sp, #32]
 800bcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd0:	f7ff fbee 	bl	800b4b0 <__ieee754_pow+0x1d0>
 800bcd4:	0019      	movs	r1, r3
 800bcd6:	e7f9      	b.n	800bccc <__ieee754_pow+0x9ec>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4c16      	ldr	r4, [pc, #88]	@ (800bd34 <__ieee754_pow+0xa54>)
 800bcdc:	f7ff fbcb 	bl	800b476 <__ieee754_pow+0x196>
 800bce0:	2300      	movs	r3, #0
 800bce2:	2400      	movs	r4, #0
 800bce4:	f7ff fbc7 	bl	800b476 <__ieee754_pow+0x196>
 800bce8:	4090cbff 	.word	0x4090cbff
 800bcec:	3f6f3400 	.word	0x3f6f3400
 800bcf0:	4090cc00 	.word	0x4090cc00
 800bcf4:	3fe00000 	.word	0x3fe00000
 800bcf8:	3fe62e43 	.word	0x3fe62e43
 800bcfc:	fefa39ef 	.word	0xfefa39ef
 800bd00:	3fe62e42 	.word	0x3fe62e42
 800bd04:	0ca86c39 	.word	0x0ca86c39
 800bd08:	be205c61 	.word	0xbe205c61
 800bd0c:	72bea4d0 	.word	0x72bea4d0
 800bd10:	3e663769 	.word	0x3e663769
 800bd14:	c5d26bf1 	.word	0xc5d26bf1
 800bd18:	3ebbbd41 	.word	0x3ebbbd41
 800bd1c:	af25de2c 	.word	0xaf25de2c
 800bd20:	3f11566a 	.word	0x3f11566a
 800bd24:	16bebd93 	.word	0x16bebd93
 800bd28:	3f66c16c 	.word	0x3f66c16c
 800bd2c:	5555553e 	.word	0x5555553e
 800bd30:	3fc55555 	.word	0x3fc55555
 800bd34:	3ff00000 	.word	0x3ff00000

0800bd38 <__ieee754_rem_pio2>:
 800bd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd3a:	4baf      	ldr	r3, [pc, #700]	@ (800bff8 <__ieee754_rem_pio2+0x2c0>)
 800bd3c:	b095      	sub	sp, #84	@ 0x54
 800bd3e:	004d      	lsls	r5, r1, #1
 800bd40:	0017      	movs	r7, r2
 800bd42:	910d      	str	r1, [sp, #52]	@ 0x34
 800bd44:	086d      	lsrs	r5, r5, #1
 800bd46:	429d      	cmp	r5, r3
 800bd48:	d807      	bhi.n	800bd5a <__ieee754_rem_pio2+0x22>
 800bd4a:	6010      	str	r0, [r2, #0]
 800bd4c:	6051      	str	r1, [r2, #4]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	2200      	movs	r2, #0
 800bd52:	60ba      	str	r2, [r7, #8]
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	2300      	movs	r3, #0
 800bd58:	e024      	b.n	800bda4 <__ieee754_rem_pio2+0x6c>
 800bd5a:	4ba8      	ldr	r3, [pc, #672]	@ (800bffc <__ieee754_rem_pio2+0x2c4>)
 800bd5c:	429d      	cmp	r5, r3
 800bd5e:	d900      	bls.n	800bd62 <__ieee754_rem_pio2+0x2a>
 800bd60:	e072      	b.n	800be48 <__ieee754_rem_pio2+0x110>
 800bd62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd64:	4ca6      	ldr	r4, [pc, #664]	@ (800c000 <__ieee754_rem_pio2+0x2c8>)
 800bd66:	4aa7      	ldr	r2, [pc, #668]	@ (800c004 <__ieee754_rem_pio2+0x2cc>)
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	dd37      	ble.n	800bddc <__ieee754_rem_pio2+0xa4>
 800bd6c:	4ba4      	ldr	r3, [pc, #656]	@ (800c000 <__ieee754_rem_pio2+0x2c8>)
 800bd6e:	f7f6 f901 	bl	8001f74 <__aeabi_dsub>
 800bd72:	9002      	str	r0, [sp, #8]
 800bd74:	9103      	str	r1, [sp, #12]
 800bd76:	42a5      	cmp	r5, r4
 800bd78:	d018      	beq.n	800bdac <__ieee754_rem_pio2+0x74>
 800bd7a:	4aa3      	ldr	r2, [pc, #652]	@ (800c008 <__ieee754_rem_pio2+0x2d0>)
 800bd7c:	4ba3      	ldr	r3, [pc, #652]	@ (800c00c <__ieee754_rem_pio2+0x2d4>)
 800bd7e:	f7f6 f8f9 	bl	8001f74 <__aeabi_dsub>
 800bd82:	0002      	movs	r2, r0
 800bd84:	000b      	movs	r3, r1
 800bd86:	0004      	movs	r4, r0
 800bd88:	000d      	movs	r5, r1
 800bd8a:	9802      	ldr	r0, [sp, #8]
 800bd8c:	9903      	ldr	r1, [sp, #12]
 800bd8e:	f7f6 f8f1 	bl	8001f74 <__aeabi_dsub>
 800bd92:	4a9d      	ldr	r2, [pc, #628]	@ (800c008 <__ieee754_rem_pio2+0x2d0>)
 800bd94:	4b9d      	ldr	r3, [pc, #628]	@ (800c00c <__ieee754_rem_pio2+0x2d4>)
 800bd96:	f7f6 f8ed 	bl	8001f74 <__aeabi_dsub>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	603c      	str	r4, [r7, #0]
 800bd9e:	607d      	str	r5, [r7, #4]
 800bda0:	60b8      	str	r0, [r7, #8]
 800bda2:	60f9      	str	r1, [r7, #12]
 800bda4:	9302      	str	r3, [sp, #8]
 800bda6:	9802      	ldr	r0, [sp, #8]
 800bda8:	b015      	add	sp, #84	@ 0x54
 800bdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdac:	22d3      	movs	r2, #211	@ 0xd3
 800bdae:	9802      	ldr	r0, [sp, #8]
 800bdb0:	9903      	ldr	r1, [sp, #12]
 800bdb2:	4b96      	ldr	r3, [pc, #600]	@ (800c00c <__ieee754_rem_pio2+0x2d4>)
 800bdb4:	0552      	lsls	r2, r2, #21
 800bdb6:	f7f6 f8dd 	bl	8001f74 <__aeabi_dsub>
 800bdba:	4a95      	ldr	r2, [pc, #596]	@ (800c010 <__ieee754_rem_pio2+0x2d8>)
 800bdbc:	4b95      	ldr	r3, [pc, #596]	@ (800c014 <__ieee754_rem_pio2+0x2dc>)
 800bdbe:	9002      	str	r0, [sp, #8]
 800bdc0:	9103      	str	r1, [sp, #12]
 800bdc2:	f7f6 f8d7 	bl	8001f74 <__aeabi_dsub>
 800bdc6:	0002      	movs	r2, r0
 800bdc8:	000b      	movs	r3, r1
 800bdca:	0004      	movs	r4, r0
 800bdcc:	000d      	movs	r5, r1
 800bdce:	9802      	ldr	r0, [sp, #8]
 800bdd0:	9903      	ldr	r1, [sp, #12]
 800bdd2:	f7f6 f8cf 	bl	8001f74 <__aeabi_dsub>
 800bdd6:	4a8e      	ldr	r2, [pc, #568]	@ (800c010 <__ieee754_rem_pio2+0x2d8>)
 800bdd8:	4b8e      	ldr	r3, [pc, #568]	@ (800c014 <__ieee754_rem_pio2+0x2dc>)
 800bdda:	e7dc      	b.n	800bd96 <__ieee754_rem_pio2+0x5e>
 800bddc:	4b88      	ldr	r3, [pc, #544]	@ (800c000 <__ieee754_rem_pio2+0x2c8>)
 800bdde:	f7f4 fe59 	bl	8000a94 <__aeabi_dadd>
 800bde2:	9002      	str	r0, [sp, #8]
 800bde4:	9103      	str	r1, [sp, #12]
 800bde6:	42a5      	cmp	r5, r4
 800bde8:	d016      	beq.n	800be18 <__ieee754_rem_pio2+0xe0>
 800bdea:	4a87      	ldr	r2, [pc, #540]	@ (800c008 <__ieee754_rem_pio2+0x2d0>)
 800bdec:	4b87      	ldr	r3, [pc, #540]	@ (800c00c <__ieee754_rem_pio2+0x2d4>)
 800bdee:	f7f4 fe51 	bl	8000a94 <__aeabi_dadd>
 800bdf2:	0002      	movs	r2, r0
 800bdf4:	000b      	movs	r3, r1
 800bdf6:	0004      	movs	r4, r0
 800bdf8:	000d      	movs	r5, r1
 800bdfa:	9802      	ldr	r0, [sp, #8]
 800bdfc:	9903      	ldr	r1, [sp, #12]
 800bdfe:	f7f6 f8b9 	bl	8001f74 <__aeabi_dsub>
 800be02:	4a81      	ldr	r2, [pc, #516]	@ (800c008 <__ieee754_rem_pio2+0x2d0>)
 800be04:	4b81      	ldr	r3, [pc, #516]	@ (800c00c <__ieee754_rem_pio2+0x2d4>)
 800be06:	f7f4 fe45 	bl	8000a94 <__aeabi_dadd>
 800be0a:	2301      	movs	r3, #1
 800be0c:	603c      	str	r4, [r7, #0]
 800be0e:	607d      	str	r5, [r7, #4]
 800be10:	60b8      	str	r0, [r7, #8]
 800be12:	60f9      	str	r1, [r7, #12]
 800be14:	425b      	negs	r3, r3
 800be16:	e7c5      	b.n	800bda4 <__ieee754_rem_pio2+0x6c>
 800be18:	22d3      	movs	r2, #211	@ 0xd3
 800be1a:	9802      	ldr	r0, [sp, #8]
 800be1c:	9903      	ldr	r1, [sp, #12]
 800be1e:	4b7b      	ldr	r3, [pc, #492]	@ (800c00c <__ieee754_rem_pio2+0x2d4>)
 800be20:	0552      	lsls	r2, r2, #21
 800be22:	f7f4 fe37 	bl	8000a94 <__aeabi_dadd>
 800be26:	4a7a      	ldr	r2, [pc, #488]	@ (800c010 <__ieee754_rem_pio2+0x2d8>)
 800be28:	4b7a      	ldr	r3, [pc, #488]	@ (800c014 <__ieee754_rem_pio2+0x2dc>)
 800be2a:	9002      	str	r0, [sp, #8]
 800be2c:	9103      	str	r1, [sp, #12]
 800be2e:	f7f4 fe31 	bl	8000a94 <__aeabi_dadd>
 800be32:	0002      	movs	r2, r0
 800be34:	000b      	movs	r3, r1
 800be36:	0004      	movs	r4, r0
 800be38:	000d      	movs	r5, r1
 800be3a:	9802      	ldr	r0, [sp, #8]
 800be3c:	9903      	ldr	r1, [sp, #12]
 800be3e:	f7f6 f899 	bl	8001f74 <__aeabi_dsub>
 800be42:	4a73      	ldr	r2, [pc, #460]	@ (800c010 <__ieee754_rem_pio2+0x2d8>)
 800be44:	4b73      	ldr	r3, [pc, #460]	@ (800c014 <__ieee754_rem_pio2+0x2dc>)
 800be46:	e7de      	b.n	800be06 <__ieee754_rem_pio2+0xce>
 800be48:	4b73      	ldr	r3, [pc, #460]	@ (800c018 <__ieee754_rem_pio2+0x2e0>)
 800be4a:	429d      	cmp	r5, r3
 800be4c:	d900      	bls.n	800be50 <__ieee754_rem_pio2+0x118>
 800be4e:	e0c6      	b.n	800bfde <__ieee754_rem_pio2+0x2a6>
 800be50:	f000 f94e 	bl	800c0f0 <fabs>
 800be54:	4a71      	ldr	r2, [pc, #452]	@ (800c01c <__ieee754_rem_pio2+0x2e4>)
 800be56:	4b72      	ldr	r3, [pc, #456]	@ (800c020 <__ieee754_rem_pio2+0x2e8>)
 800be58:	9004      	str	r0, [sp, #16]
 800be5a:	9105      	str	r1, [sp, #20]
 800be5c:	f7f5 fdc2 	bl	80019e4 <__aeabi_dmul>
 800be60:	2200      	movs	r2, #0
 800be62:	4b70      	ldr	r3, [pc, #448]	@ (800c024 <__ieee754_rem_pio2+0x2ec>)
 800be64:	f7f4 fe16 	bl	8000a94 <__aeabi_dadd>
 800be68:	f7f6 fc42 	bl	80026f0 <__aeabi_d2iz>
 800be6c:	9002      	str	r0, [sp, #8]
 800be6e:	f7f6 fc7b 	bl	8002768 <__aeabi_i2d>
 800be72:	4a64      	ldr	r2, [pc, #400]	@ (800c004 <__ieee754_rem_pio2+0x2cc>)
 800be74:	4b62      	ldr	r3, [pc, #392]	@ (800c000 <__ieee754_rem_pio2+0x2c8>)
 800be76:	9008      	str	r0, [sp, #32]
 800be78:	9109      	str	r1, [sp, #36]	@ 0x24
 800be7a:	f7f5 fdb3 	bl	80019e4 <__aeabi_dmul>
 800be7e:	0002      	movs	r2, r0
 800be80:	000b      	movs	r3, r1
 800be82:	9804      	ldr	r0, [sp, #16]
 800be84:	9905      	ldr	r1, [sp, #20]
 800be86:	f7f6 f875 	bl	8001f74 <__aeabi_dsub>
 800be8a:	4b60      	ldr	r3, [pc, #384]	@ (800c00c <__ieee754_rem_pio2+0x2d4>)
 800be8c:	9004      	str	r0, [sp, #16]
 800be8e:	9105      	str	r1, [sp, #20]
 800be90:	9808      	ldr	r0, [sp, #32]
 800be92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be94:	4a5c      	ldr	r2, [pc, #368]	@ (800c008 <__ieee754_rem_pio2+0x2d0>)
 800be96:	f7f5 fda5 	bl	80019e4 <__aeabi_dmul>
 800be9a:	9b02      	ldr	r3, [sp, #8]
 800be9c:	9006      	str	r0, [sp, #24]
 800be9e:	9107      	str	r1, [sp, #28]
 800bea0:	2b1f      	cmp	r3, #31
 800bea2:	dc0d      	bgt.n	800bec0 <__ieee754_rem_pio2+0x188>
 800bea4:	9a02      	ldr	r2, [sp, #8]
 800bea6:	4b60      	ldr	r3, [pc, #384]	@ (800c028 <__ieee754_rem_pio2+0x2f0>)
 800bea8:	3a01      	subs	r2, #1
 800beaa:	0092      	lsls	r2, r2, #2
 800beac:	58d3      	ldr	r3, [r2, r3]
 800beae:	42ab      	cmp	r3, r5
 800beb0:	d006      	beq.n	800bec0 <__ieee754_rem_pio2+0x188>
 800beb2:	0002      	movs	r2, r0
 800beb4:	000b      	movs	r3, r1
 800beb6:	9804      	ldr	r0, [sp, #16]
 800beb8:	9905      	ldr	r1, [sp, #20]
 800beba:	f7f6 f85b 	bl	8001f74 <__aeabi_dsub>
 800bebe:	e00b      	b.n	800bed8 <__ieee754_rem_pio2+0x1a0>
 800bec0:	9a06      	ldr	r2, [sp, #24]
 800bec2:	9b07      	ldr	r3, [sp, #28]
 800bec4:	9804      	ldr	r0, [sp, #16]
 800bec6:	9905      	ldr	r1, [sp, #20]
 800bec8:	f7f6 f854 	bl	8001f74 <__aeabi_dsub>
 800becc:	004b      	lsls	r3, r1, #1
 800bece:	152e      	asrs	r6, r5, #20
 800bed0:	0d5b      	lsrs	r3, r3, #21
 800bed2:	1af3      	subs	r3, r6, r3
 800bed4:	2b10      	cmp	r3, #16
 800bed6:	dc02      	bgt.n	800bede <__ieee754_rem_pio2+0x1a6>
 800bed8:	6038      	str	r0, [r7, #0]
 800beda:	6079      	str	r1, [r7, #4]
 800bedc:	e039      	b.n	800bf52 <__ieee754_rem_pio2+0x21a>
 800bede:	22d3      	movs	r2, #211	@ 0xd3
 800bee0:	9808      	ldr	r0, [sp, #32]
 800bee2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bee4:	4b49      	ldr	r3, [pc, #292]	@ (800c00c <__ieee754_rem_pio2+0x2d4>)
 800bee6:	0552      	lsls	r2, r2, #21
 800bee8:	f7f5 fd7c 	bl	80019e4 <__aeabi_dmul>
 800beec:	0004      	movs	r4, r0
 800beee:	000d      	movs	r5, r1
 800bef0:	0002      	movs	r2, r0
 800bef2:	000b      	movs	r3, r1
 800bef4:	9804      	ldr	r0, [sp, #16]
 800bef6:	9905      	ldr	r1, [sp, #20]
 800bef8:	f7f6 f83c 	bl	8001f74 <__aeabi_dsub>
 800befc:	0002      	movs	r2, r0
 800befe:	000b      	movs	r3, r1
 800bf00:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf02:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bf04:	9804      	ldr	r0, [sp, #16]
 800bf06:	9905      	ldr	r1, [sp, #20]
 800bf08:	f7f6 f834 	bl	8001f74 <__aeabi_dsub>
 800bf0c:	0022      	movs	r2, r4
 800bf0e:	002b      	movs	r3, r5
 800bf10:	f7f6 f830 	bl	8001f74 <__aeabi_dsub>
 800bf14:	0004      	movs	r4, r0
 800bf16:	000d      	movs	r5, r1
 800bf18:	9808      	ldr	r0, [sp, #32]
 800bf1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf1c:	4a3c      	ldr	r2, [pc, #240]	@ (800c010 <__ieee754_rem_pio2+0x2d8>)
 800bf1e:	4b3d      	ldr	r3, [pc, #244]	@ (800c014 <__ieee754_rem_pio2+0x2dc>)
 800bf20:	f7f5 fd60 	bl	80019e4 <__aeabi_dmul>
 800bf24:	0022      	movs	r2, r4
 800bf26:	002b      	movs	r3, r5
 800bf28:	f7f6 f824 	bl	8001f74 <__aeabi_dsub>
 800bf2c:	000b      	movs	r3, r1
 800bf2e:	0002      	movs	r2, r0
 800bf30:	9006      	str	r0, [sp, #24]
 800bf32:	9107      	str	r1, [sp, #28]
 800bf34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf36:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf38:	f7f6 f81c 	bl	8001f74 <__aeabi_dsub>
 800bf3c:	004b      	lsls	r3, r1, #1
 800bf3e:	0d5b      	lsrs	r3, r3, #21
 800bf40:	1af3      	subs	r3, r6, r3
 800bf42:	2b31      	cmp	r3, #49	@ 0x31
 800bf44:	dc21      	bgt.n	800bf8a <__ieee754_rem_pio2+0x252>
 800bf46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf48:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bf4a:	6038      	str	r0, [r7, #0]
 800bf4c:	6079      	str	r1, [r7, #4]
 800bf4e:	9304      	str	r3, [sp, #16]
 800bf50:	9405      	str	r4, [sp, #20]
 800bf52:	683c      	ldr	r4, [r7, #0]
 800bf54:	687d      	ldr	r5, [r7, #4]
 800bf56:	9804      	ldr	r0, [sp, #16]
 800bf58:	9905      	ldr	r1, [sp, #20]
 800bf5a:	0022      	movs	r2, r4
 800bf5c:	002b      	movs	r3, r5
 800bf5e:	f7f6 f809 	bl	8001f74 <__aeabi_dsub>
 800bf62:	9a06      	ldr	r2, [sp, #24]
 800bf64:	9b07      	ldr	r3, [sp, #28]
 800bf66:	f7f6 f805 	bl	8001f74 <__aeabi_dsub>
 800bf6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf6c:	60b8      	str	r0, [r7, #8]
 800bf6e:	60f9      	str	r1, [r7, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	db00      	blt.n	800bf76 <__ieee754_rem_pio2+0x23e>
 800bf74:	e717      	b.n	800bda6 <__ieee754_rem_pio2+0x6e>
 800bf76:	2280      	movs	r2, #128	@ 0x80
 800bf78:	0612      	lsls	r2, r2, #24
 800bf7a:	18ab      	adds	r3, r5, r2
 800bf7c:	607b      	str	r3, [r7, #4]
 800bf7e:	188b      	adds	r3, r1, r2
 800bf80:	603c      	str	r4, [r7, #0]
 800bf82:	60b8      	str	r0, [r7, #8]
 800bf84:	60fb      	str	r3, [r7, #12]
 800bf86:	9b02      	ldr	r3, [sp, #8]
 800bf88:	e744      	b.n	800be14 <__ieee754_rem_pio2+0xdc>
 800bf8a:	22b8      	movs	r2, #184	@ 0xb8
 800bf8c:	9808      	ldr	r0, [sp, #32]
 800bf8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf90:	4b20      	ldr	r3, [pc, #128]	@ (800c014 <__ieee754_rem_pio2+0x2dc>)
 800bf92:	0592      	lsls	r2, r2, #22
 800bf94:	f7f5 fd26 	bl	80019e4 <__aeabi_dmul>
 800bf98:	0004      	movs	r4, r0
 800bf9a:	000d      	movs	r5, r1
 800bf9c:	0002      	movs	r2, r0
 800bf9e:	000b      	movs	r3, r1
 800bfa0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bfa2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfa4:	f7f5 ffe6 	bl	8001f74 <__aeabi_dsub>
 800bfa8:	0002      	movs	r2, r0
 800bfaa:	000b      	movs	r3, r1
 800bfac:	9004      	str	r0, [sp, #16]
 800bfae:	9105      	str	r1, [sp, #20]
 800bfb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bfb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfb4:	f7f5 ffde 	bl	8001f74 <__aeabi_dsub>
 800bfb8:	0022      	movs	r2, r4
 800bfba:	002b      	movs	r3, r5
 800bfbc:	f7f5 ffda 	bl	8001f74 <__aeabi_dsub>
 800bfc0:	0004      	movs	r4, r0
 800bfc2:	000d      	movs	r5, r1
 800bfc4:	9808      	ldr	r0, [sp, #32]
 800bfc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bfc8:	4a18      	ldr	r2, [pc, #96]	@ (800c02c <__ieee754_rem_pio2+0x2f4>)
 800bfca:	4b19      	ldr	r3, [pc, #100]	@ (800c030 <__ieee754_rem_pio2+0x2f8>)
 800bfcc:	f7f5 fd0a 	bl	80019e4 <__aeabi_dmul>
 800bfd0:	0022      	movs	r2, r4
 800bfd2:	002b      	movs	r3, r5
 800bfd4:	f7f5 ffce 	bl	8001f74 <__aeabi_dsub>
 800bfd8:	9006      	str	r0, [sp, #24]
 800bfda:	9107      	str	r1, [sp, #28]
 800bfdc:	e769      	b.n	800beb2 <__ieee754_rem_pio2+0x17a>
 800bfde:	4b15      	ldr	r3, [pc, #84]	@ (800c034 <__ieee754_rem_pio2+0x2fc>)
 800bfe0:	429d      	cmp	r5, r3
 800bfe2:	d929      	bls.n	800c038 <__ieee754_rem_pio2+0x300>
 800bfe4:	0002      	movs	r2, r0
 800bfe6:	000b      	movs	r3, r1
 800bfe8:	f7f5 ffc4 	bl	8001f74 <__aeabi_dsub>
 800bfec:	60b8      	str	r0, [r7, #8]
 800bfee:	60f9      	str	r1, [r7, #12]
 800bff0:	6038      	str	r0, [r7, #0]
 800bff2:	6079      	str	r1, [r7, #4]
 800bff4:	e6af      	b.n	800bd56 <__ieee754_rem_pio2+0x1e>
 800bff6:	46c0      	nop			@ (mov r8, r8)
 800bff8:	3fe921fb 	.word	0x3fe921fb
 800bffc:	4002d97b 	.word	0x4002d97b
 800c000:	3ff921fb 	.word	0x3ff921fb
 800c004:	54400000 	.word	0x54400000
 800c008:	1a626331 	.word	0x1a626331
 800c00c:	3dd0b461 	.word	0x3dd0b461
 800c010:	2e037073 	.word	0x2e037073
 800c014:	3ba3198a 	.word	0x3ba3198a
 800c018:	413921fb 	.word	0x413921fb
 800c01c:	6dc9c883 	.word	0x6dc9c883
 800c020:	3fe45f30 	.word	0x3fe45f30
 800c024:	3fe00000 	.word	0x3fe00000
 800c028:	0800d1a0 	.word	0x0800d1a0
 800c02c:	252049c1 	.word	0x252049c1
 800c030:	397b839a 	.word	0x397b839a
 800c034:	7fefffff 	.word	0x7fefffff
 800c038:	4b2a      	ldr	r3, [pc, #168]	@ (800c0e4 <__ieee754_rem_pio2+0x3ac>)
 800c03a:	152e      	asrs	r6, r5, #20
 800c03c:	18f6      	adds	r6, r6, r3
 800c03e:	0531      	lsls	r1, r6, #20
 800c040:	1a6b      	subs	r3, r5, r1
 800c042:	0019      	movs	r1, r3
 800c044:	001d      	movs	r5, r3
 800c046:	0004      	movs	r4, r0
 800c048:	f7f6 fb52 	bl	80026f0 <__aeabi_d2iz>
 800c04c:	f7f6 fb8c 	bl	8002768 <__aeabi_i2d>
 800c050:	0002      	movs	r2, r0
 800c052:	000b      	movs	r3, r1
 800c054:	0020      	movs	r0, r4
 800c056:	0029      	movs	r1, r5
 800c058:	920e      	str	r2, [sp, #56]	@ 0x38
 800c05a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c05c:	f7f5 ff8a 	bl	8001f74 <__aeabi_dsub>
 800c060:	2200      	movs	r2, #0
 800c062:	4b21      	ldr	r3, [pc, #132]	@ (800c0e8 <__ieee754_rem_pio2+0x3b0>)
 800c064:	f7f5 fcbe 	bl	80019e4 <__aeabi_dmul>
 800c068:	000d      	movs	r5, r1
 800c06a:	0004      	movs	r4, r0
 800c06c:	f7f6 fb40 	bl	80026f0 <__aeabi_d2iz>
 800c070:	f7f6 fb7a 	bl	8002768 <__aeabi_i2d>
 800c074:	0002      	movs	r2, r0
 800c076:	000b      	movs	r3, r1
 800c078:	0020      	movs	r0, r4
 800c07a:	0029      	movs	r1, r5
 800c07c:	9210      	str	r2, [sp, #64]	@ 0x40
 800c07e:	9311      	str	r3, [sp, #68]	@ 0x44
 800c080:	f7f5 ff78 	bl	8001f74 <__aeabi_dsub>
 800c084:	2200      	movs	r2, #0
 800c086:	4b18      	ldr	r3, [pc, #96]	@ (800c0e8 <__ieee754_rem_pio2+0x3b0>)
 800c088:	f7f5 fcac 	bl	80019e4 <__aeabi_dmul>
 800c08c:	2503      	movs	r5, #3
 800c08e:	9012      	str	r0, [sp, #72]	@ 0x48
 800c090:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c092:	ac0e      	add	r4, sp, #56	@ 0x38
 800c094:	2200      	movs	r2, #0
 800c096:	6920      	ldr	r0, [r4, #16]
 800c098:	6961      	ldr	r1, [r4, #20]
 800c09a:	2300      	movs	r3, #0
 800c09c:	9502      	str	r5, [sp, #8]
 800c09e:	3c08      	subs	r4, #8
 800c0a0:	3d01      	subs	r5, #1
 800c0a2:	f7f4 f9cf 	bl	8000444 <__aeabi_dcmpeq>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d1f4      	bne.n	800c094 <__ieee754_rem_pio2+0x35c>
 800c0aa:	4b10      	ldr	r3, [pc, #64]	@ (800c0ec <__ieee754_rem_pio2+0x3b4>)
 800c0ac:	0032      	movs	r2, r6
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	0039      	movs	r1, r7
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	a80e      	add	r0, sp, #56	@ 0x38
 800c0b8:	9b02      	ldr	r3, [sp, #8]
 800c0ba:	f000 f99f 	bl	800c3fc <__kernel_rem_pio2>
 800c0be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0c0:	9002      	str	r0, [sp, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	db00      	blt.n	800c0c8 <__ieee754_rem_pio2+0x390>
 800c0c6:	e66e      	b.n	800bda6 <__ieee754_rem_pio2+0x6e>
 800c0c8:	2080      	movs	r0, #128	@ 0x80
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	0600      	lsls	r0, r0, #24
 800c0d0:	180b      	adds	r3, r1, r0
 800c0d2:	68f9      	ldr	r1, [r7, #12]
 800c0d4:	603a      	str	r2, [r7, #0]
 800c0d6:	607b      	str	r3, [r7, #4]
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	180b      	adds	r3, r1, r0
 800c0dc:	60ba      	str	r2, [r7, #8]
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	e751      	b.n	800bf86 <__ieee754_rem_pio2+0x24e>
 800c0e2:	46c0      	nop			@ (mov r8, r8)
 800c0e4:	fffffbea 	.word	0xfffffbea
 800c0e8:	41700000 	.word	0x41700000
 800c0ec:	0800d220 	.word	0x0800d220

0800c0f0 <fabs>:
 800c0f0:	0049      	lsls	r1, r1, #1
 800c0f2:	084b      	lsrs	r3, r1, #1
 800c0f4:	0019      	movs	r1, r3
 800c0f6:	4770      	bx	lr

0800c0f8 <scalbn>:
 800c0f8:	004b      	lsls	r3, r1, #1
 800c0fa:	b570      	push	{r4, r5, r6, lr}
 800c0fc:	0d5b      	lsrs	r3, r3, #21
 800c0fe:	0014      	movs	r4, r2
 800c100:	000d      	movs	r5, r1
 800c102:	2b00      	cmp	r3, #0
 800c104:	d10f      	bne.n	800c126 <scalbn+0x2e>
 800c106:	004b      	lsls	r3, r1, #1
 800c108:	085b      	lsrs	r3, r3, #1
 800c10a:	4303      	orrs	r3, r0
 800c10c:	d012      	beq.n	800c134 <scalbn+0x3c>
 800c10e:	4b23      	ldr	r3, [pc, #140]	@ (800c19c <scalbn+0xa4>)
 800c110:	2200      	movs	r2, #0
 800c112:	f7f5 fc67 	bl	80019e4 <__aeabi_dmul>
 800c116:	4b22      	ldr	r3, [pc, #136]	@ (800c1a0 <scalbn+0xa8>)
 800c118:	429c      	cmp	r4, r3
 800c11a:	da0c      	bge.n	800c136 <scalbn+0x3e>
 800c11c:	4a21      	ldr	r2, [pc, #132]	@ (800c1a4 <scalbn+0xac>)
 800c11e:	4b22      	ldr	r3, [pc, #136]	@ (800c1a8 <scalbn+0xb0>)
 800c120:	f7f5 fc60 	bl	80019e4 <__aeabi_dmul>
 800c124:	e006      	b.n	800c134 <scalbn+0x3c>
 800c126:	4a21      	ldr	r2, [pc, #132]	@ (800c1ac <scalbn+0xb4>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d108      	bne.n	800c13e <scalbn+0x46>
 800c12c:	0002      	movs	r2, r0
 800c12e:	000b      	movs	r3, r1
 800c130:	f7f4 fcb0 	bl	8000a94 <__aeabi_dadd>
 800c134:	bd70      	pop	{r4, r5, r6, pc}
 800c136:	000d      	movs	r5, r1
 800c138:	004b      	lsls	r3, r1, #1
 800c13a:	0d5b      	lsrs	r3, r3, #21
 800c13c:	3b36      	subs	r3, #54	@ 0x36
 800c13e:	4a1c      	ldr	r2, [pc, #112]	@ (800c1b0 <scalbn+0xb8>)
 800c140:	4294      	cmp	r4, r2
 800c142:	dd0a      	ble.n	800c15a <scalbn+0x62>
 800c144:	4c1b      	ldr	r4, [pc, #108]	@ (800c1b4 <scalbn+0xbc>)
 800c146:	4d1c      	ldr	r5, [pc, #112]	@ (800c1b8 <scalbn+0xc0>)
 800c148:	2900      	cmp	r1, #0
 800c14a:	da01      	bge.n	800c150 <scalbn+0x58>
 800c14c:	4c19      	ldr	r4, [pc, #100]	@ (800c1b4 <scalbn+0xbc>)
 800c14e:	4d1b      	ldr	r5, [pc, #108]	@ (800c1bc <scalbn+0xc4>)
 800c150:	4a18      	ldr	r2, [pc, #96]	@ (800c1b4 <scalbn+0xbc>)
 800c152:	4b19      	ldr	r3, [pc, #100]	@ (800c1b8 <scalbn+0xc0>)
 800c154:	0020      	movs	r0, r4
 800c156:	0029      	movs	r1, r5
 800c158:	e7e2      	b.n	800c120 <scalbn+0x28>
 800c15a:	18e2      	adds	r2, r4, r3
 800c15c:	4b18      	ldr	r3, [pc, #96]	@ (800c1c0 <scalbn+0xc8>)
 800c15e:	429a      	cmp	r2, r3
 800c160:	dcf0      	bgt.n	800c144 <scalbn+0x4c>
 800c162:	2a00      	cmp	r2, #0
 800c164:	dd05      	ble.n	800c172 <scalbn+0x7a>
 800c166:	4b17      	ldr	r3, [pc, #92]	@ (800c1c4 <scalbn+0xcc>)
 800c168:	0512      	lsls	r2, r2, #20
 800c16a:	402b      	ands	r3, r5
 800c16c:	431a      	orrs	r2, r3
 800c16e:	0011      	movs	r1, r2
 800c170:	e7e0      	b.n	800c134 <scalbn+0x3c>
 800c172:	0013      	movs	r3, r2
 800c174:	3335      	adds	r3, #53	@ 0x35
 800c176:	da08      	bge.n	800c18a <scalbn+0x92>
 800c178:	4c0a      	ldr	r4, [pc, #40]	@ (800c1a4 <scalbn+0xac>)
 800c17a:	4d0b      	ldr	r5, [pc, #44]	@ (800c1a8 <scalbn+0xb0>)
 800c17c:	2900      	cmp	r1, #0
 800c17e:	da01      	bge.n	800c184 <scalbn+0x8c>
 800c180:	4c08      	ldr	r4, [pc, #32]	@ (800c1a4 <scalbn+0xac>)
 800c182:	4d11      	ldr	r5, [pc, #68]	@ (800c1c8 <scalbn+0xd0>)
 800c184:	4a07      	ldr	r2, [pc, #28]	@ (800c1a4 <scalbn+0xac>)
 800c186:	4b08      	ldr	r3, [pc, #32]	@ (800c1a8 <scalbn+0xb0>)
 800c188:	e7e4      	b.n	800c154 <scalbn+0x5c>
 800c18a:	4b0e      	ldr	r3, [pc, #56]	@ (800c1c4 <scalbn+0xcc>)
 800c18c:	3236      	adds	r2, #54	@ 0x36
 800c18e:	401d      	ands	r5, r3
 800c190:	0512      	lsls	r2, r2, #20
 800c192:	432a      	orrs	r2, r5
 800c194:	0011      	movs	r1, r2
 800c196:	4b0d      	ldr	r3, [pc, #52]	@ (800c1cc <scalbn+0xd4>)
 800c198:	2200      	movs	r2, #0
 800c19a:	e7c1      	b.n	800c120 <scalbn+0x28>
 800c19c:	43500000 	.word	0x43500000
 800c1a0:	ffff3cb0 	.word	0xffff3cb0
 800c1a4:	c2f8f359 	.word	0xc2f8f359
 800c1a8:	01a56e1f 	.word	0x01a56e1f
 800c1ac:	000007ff 	.word	0x000007ff
 800c1b0:	0000c350 	.word	0x0000c350
 800c1b4:	8800759c 	.word	0x8800759c
 800c1b8:	7e37e43c 	.word	0x7e37e43c
 800c1bc:	fe37e43c 	.word	0xfe37e43c
 800c1c0:	000007fe 	.word	0x000007fe
 800c1c4:	800fffff 	.word	0x800fffff
 800c1c8:	81a56e1f 	.word	0x81a56e1f
 800c1cc:	3c900000 	.word	0x3c900000

0800c1d0 <with_errno>:
 800c1d0:	b570      	push	{r4, r5, r6, lr}
 800c1d2:	000d      	movs	r5, r1
 800c1d4:	0016      	movs	r6, r2
 800c1d6:	0004      	movs	r4, r0
 800c1d8:	f7fc fef0 	bl	8008fbc <__errno>
 800c1dc:	0029      	movs	r1, r5
 800c1de:	6006      	str	r6, [r0, #0]
 800c1e0:	0020      	movs	r0, r4
 800c1e2:	bd70      	pop	{r4, r5, r6, pc}

0800c1e4 <xflow>:
 800c1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1e6:	0014      	movs	r4, r2
 800c1e8:	001d      	movs	r5, r3
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d002      	beq.n	800c1f4 <xflow+0x10>
 800c1ee:	2180      	movs	r1, #128	@ 0x80
 800c1f0:	0609      	lsls	r1, r1, #24
 800c1f2:	185b      	adds	r3, r3, r1
 800c1f4:	9200      	str	r2, [sp, #0]
 800c1f6:	9301      	str	r3, [sp, #4]
 800c1f8:	9a00      	ldr	r2, [sp, #0]
 800c1fa:	9b01      	ldr	r3, [sp, #4]
 800c1fc:	0020      	movs	r0, r4
 800c1fe:	0029      	movs	r1, r5
 800c200:	f7f5 fbf0 	bl	80019e4 <__aeabi_dmul>
 800c204:	2222      	movs	r2, #34	@ 0x22
 800c206:	f7ff ffe3 	bl	800c1d0 <with_errno>
 800c20a:	b003      	add	sp, #12
 800c20c:	bd30      	pop	{r4, r5, pc}

0800c20e <__math_uflow>:
 800c20e:	2380      	movs	r3, #128	@ 0x80
 800c210:	b510      	push	{r4, lr}
 800c212:	2200      	movs	r2, #0
 800c214:	055b      	lsls	r3, r3, #21
 800c216:	f7ff ffe5 	bl	800c1e4 <xflow>
 800c21a:	bd10      	pop	{r4, pc}

0800c21c <__math_oflow>:
 800c21c:	23e0      	movs	r3, #224	@ 0xe0
 800c21e:	b510      	push	{r4, lr}
 800c220:	2200      	movs	r2, #0
 800c222:	05db      	lsls	r3, r3, #23
 800c224:	f7ff ffde 	bl	800c1e4 <xflow>
 800c228:	bd10      	pop	{r4, pc}
	...

0800c22c <__ieee754_sqrt>:
 800c22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c22e:	000a      	movs	r2, r1
 800c230:	000d      	movs	r5, r1
 800c232:	496d      	ldr	r1, [pc, #436]	@ (800c3e8 <__ieee754_sqrt+0x1bc>)
 800c234:	0004      	movs	r4, r0
 800c236:	0003      	movs	r3, r0
 800c238:	0008      	movs	r0, r1
 800c23a:	b087      	sub	sp, #28
 800c23c:	4028      	ands	r0, r5
 800c23e:	4288      	cmp	r0, r1
 800c240:	d111      	bne.n	800c266 <__ieee754_sqrt+0x3a>
 800c242:	0022      	movs	r2, r4
 800c244:	002b      	movs	r3, r5
 800c246:	0020      	movs	r0, r4
 800c248:	0029      	movs	r1, r5
 800c24a:	f7f5 fbcb 	bl	80019e4 <__aeabi_dmul>
 800c24e:	0002      	movs	r2, r0
 800c250:	000b      	movs	r3, r1
 800c252:	0020      	movs	r0, r4
 800c254:	0029      	movs	r1, r5
 800c256:	f7f4 fc1d 	bl	8000a94 <__aeabi_dadd>
 800c25a:	0004      	movs	r4, r0
 800c25c:	000d      	movs	r5, r1
 800c25e:	0020      	movs	r0, r4
 800c260:	0029      	movs	r1, r5
 800c262:	b007      	add	sp, #28
 800c264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c266:	2d00      	cmp	r5, #0
 800c268:	dc11      	bgt.n	800c28e <__ieee754_sqrt+0x62>
 800c26a:	0069      	lsls	r1, r5, #1
 800c26c:	0849      	lsrs	r1, r1, #1
 800c26e:	4321      	orrs	r1, r4
 800c270:	d0f5      	beq.n	800c25e <__ieee754_sqrt+0x32>
 800c272:	2000      	movs	r0, #0
 800c274:	4285      	cmp	r5, r0
 800c276:	d010      	beq.n	800c29a <__ieee754_sqrt+0x6e>
 800c278:	0022      	movs	r2, r4
 800c27a:	002b      	movs	r3, r5
 800c27c:	0020      	movs	r0, r4
 800c27e:	0029      	movs	r1, r5
 800c280:	f7f5 fe78 	bl	8001f74 <__aeabi_dsub>
 800c284:	0002      	movs	r2, r0
 800c286:	000b      	movs	r3, r1
 800c288:	f7f4 ff68 	bl	800115c <__aeabi_ddiv>
 800c28c:	e7e5      	b.n	800c25a <__ieee754_sqrt+0x2e>
 800c28e:	1528      	asrs	r0, r5, #20
 800c290:	d115      	bne.n	800c2be <__ieee754_sqrt+0x92>
 800c292:	2480      	movs	r4, #128	@ 0x80
 800c294:	2100      	movs	r1, #0
 800c296:	0364      	lsls	r4, r4, #13
 800c298:	e007      	b.n	800c2aa <__ieee754_sqrt+0x7e>
 800c29a:	0ada      	lsrs	r2, r3, #11
 800c29c:	3815      	subs	r0, #21
 800c29e:	055b      	lsls	r3, r3, #21
 800c2a0:	2a00      	cmp	r2, #0
 800c2a2:	d0fa      	beq.n	800c29a <__ieee754_sqrt+0x6e>
 800c2a4:	e7f5      	b.n	800c292 <__ieee754_sqrt+0x66>
 800c2a6:	0052      	lsls	r2, r2, #1
 800c2a8:	3101      	adds	r1, #1
 800c2aa:	4222      	tst	r2, r4
 800c2ac:	d0fb      	beq.n	800c2a6 <__ieee754_sqrt+0x7a>
 800c2ae:	1e4c      	subs	r4, r1, #1
 800c2b0:	1b00      	subs	r0, r0, r4
 800c2b2:	2420      	movs	r4, #32
 800c2b4:	001d      	movs	r5, r3
 800c2b6:	1a64      	subs	r4, r4, r1
 800c2b8:	40e5      	lsrs	r5, r4
 800c2ba:	408b      	lsls	r3, r1
 800c2bc:	432a      	orrs	r2, r5
 800c2be:	494b      	ldr	r1, [pc, #300]	@ (800c3ec <__ieee754_sqrt+0x1c0>)
 800c2c0:	0312      	lsls	r2, r2, #12
 800c2c2:	1844      	adds	r4, r0, r1
 800c2c4:	2180      	movs	r1, #128	@ 0x80
 800c2c6:	0b12      	lsrs	r2, r2, #12
 800c2c8:	0349      	lsls	r1, r1, #13
 800c2ca:	4311      	orrs	r1, r2
 800c2cc:	07c0      	lsls	r0, r0, #31
 800c2ce:	d403      	bmi.n	800c2d8 <__ieee754_sqrt+0xac>
 800c2d0:	0fda      	lsrs	r2, r3, #31
 800c2d2:	0049      	lsls	r1, r1, #1
 800c2d4:	1851      	adds	r1, r2, r1
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	2500      	movs	r5, #0
 800c2da:	1062      	asrs	r2, r4, #1
 800c2dc:	0049      	lsls	r1, r1, #1
 800c2de:	2480      	movs	r4, #128	@ 0x80
 800c2e0:	9205      	str	r2, [sp, #20]
 800c2e2:	0fda      	lsrs	r2, r3, #31
 800c2e4:	1852      	adds	r2, r2, r1
 800c2e6:	2016      	movs	r0, #22
 800c2e8:	0029      	movs	r1, r5
 800c2ea:	005b      	lsls	r3, r3, #1
 800c2ec:	03a4      	lsls	r4, r4, #14
 800c2ee:	190e      	adds	r6, r1, r4
 800c2f0:	4296      	cmp	r6, r2
 800c2f2:	dc02      	bgt.n	800c2fa <__ieee754_sqrt+0xce>
 800c2f4:	1931      	adds	r1, r6, r4
 800c2f6:	1b92      	subs	r2, r2, r6
 800c2f8:	192d      	adds	r5, r5, r4
 800c2fa:	0fde      	lsrs	r6, r3, #31
 800c2fc:	0052      	lsls	r2, r2, #1
 800c2fe:	3801      	subs	r0, #1
 800c300:	1992      	adds	r2, r2, r6
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	0864      	lsrs	r4, r4, #1
 800c306:	2800      	cmp	r0, #0
 800c308:	d1f1      	bne.n	800c2ee <__ieee754_sqrt+0xc2>
 800c30a:	2620      	movs	r6, #32
 800c30c:	2780      	movs	r7, #128	@ 0x80
 800c30e:	0004      	movs	r4, r0
 800c310:	9604      	str	r6, [sp, #16]
 800c312:	063f      	lsls	r7, r7, #24
 800c314:	19c6      	adds	r6, r0, r7
 800c316:	46b4      	mov	ip, r6
 800c318:	4291      	cmp	r1, r2
 800c31a:	db02      	blt.n	800c322 <__ieee754_sqrt+0xf6>
 800c31c:	d114      	bne.n	800c348 <__ieee754_sqrt+0x11c>
 800c31e:	429e      	cmp	r6, r3
 800c320:	d812      	bhi.n	800c348 <__ieee754_sqrt+0x11c>
 800c322:	4660      	mov	r0, ip
 800c324:	4666      	mov	r6, ip
 800c326:	19c0      	adds	r0, r0, r7
 800c328:	9100      	str	r1, [sp, #0]
 800c32a:	2e00      	cmp	r6, #0
 800c32c:	da03      	bge.n	800c336 <__ieee754_sqrt+0x10a>
 800c32e:	43c6      	mvns	r6, r0
 800c330:	0ff6      	lsrs	r6, r6, #31
 800c332:	198e      	adds	r6, r1, r6
 800c334:	9600      	str	r6, [sp, #0]
 800c336:	1a52      	subs	r2, r2, r1
 800c338:	4563      	cmp	r3, ip
 800c33a:	4189      	sbcs	r1, r1
 800c33c:	4249      	negs	r1, r1
 800c33e:	1a52      	subs	r2, r2, r1
 800c340:	4661      	mov	r1, ip
 800c342:	1a5b      	subs	r3, r3, r1
 800c344:	9900      	ldr	r1, [sp, #0]
 800c346:	19e4      	adds	r4, r4, r7
 800c348:	0fde      	lsrs	r6, r3, #31
 800c34a:	0052      	lsls	r2, r2, #1
 800c34c:	1992      	adds	r2, r2, r6
 800c34e:	9e04      	ldr	r6, [sp, #16]
 800c350:	005b      	lsls	r3, r3, #1
 800c352:	3e01      	subs	r6, #1
 800c354:	087f      	lsrs	r7, r7, #1
 800c356:	9604      	str	r6, [sp, #16]
 800c358:	2e00      	cmp	r6, #0
 800c35a:	d1db      	bne.n	800c314 <__ieee754_sqrt+0xe8>
 800c35c:	431a      	orrs	r2, r3
 800c35e:	d01f      	beq.n	800c3a0 <__ieee754_sqrt+0x174>
 800c360:	4e23      	ldr	r6, [pc, #140]	@ (800c3f0 <__ieee754_sqrt+0x1c4>)
 800c362:	4f24      	ldr	r7, [pc, #144]	@ (800c3f4 <__ieee754_sqrt+0x1c8>)
 800c364:	6830      	ldr	r0, [r6, #0]
 800c366:	6871      	ldr	r1, [r6, #4]
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	9200      	str	r2, [sp, #0]
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	6832      	ldr	r2, [r6, #0]
 800c372:	6873      	ldr	r3, [r6, #4]
 800c374:	9202      	str	r2, [sp, #8]
 800c376:	9303      	str	r3, [sp, #12]
 800c378:	9a00      	ldr	r2, [sp, #0]
 800c37a:	9b01      	ldr	r3, [sp, #4]
 800c37c:	f7f5 fdfa 	bl	8001f74 <__aeabi_dsub>
 800c380:	0002      	movs	r2, r0
 800c382:	000b      	movs	r3, r1
 800c384:	9802      	ldr	r0, [sp, #8]
 800c386:	9903      	ldr	r1, [sp, #12]
 800c388:	f7f4 f86c 	bl	8000464 <__aeabi_dcmple>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d007      	beq.n	800c3a0 <__ieee754_sqrt+0x174>
 800c390:	6830      	ldr	r0, [r6, #0]
 800c392:	6871      	ldr	r1, [r6, #4]
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	1c67      	adds	r7, r4, #1
 800c39a:	d10f      	bne.n	800c3bc <__ieee754_sqrt+0x190>
 800c39c:	9c04      	ldr	r4, [sp, #16]
 800c39e:	3501      	adds	r5, #1
 800c3a0:	4b15      	ldr	r3, [pc, #84]	@ (800c3f8 <__ieee754_sqrt+0x1cc>)
 800c3a2:	106a      	asrs	r2, r5, #1
 800c3a4:	18d2      	adds	r2, r2, r3
 800c3a6:	0863      	lsrs	r3, r4, #1
 800c3a8:	07ed      	lsls	r5, r5, #31
 800c3aa:	d502      	bpl.n	800c3b2 <__ieee754_sqrt+0x186>
 800c3ac:	2180      	movs	r1, #128	@ 0x80
 800c3ae:	0609      	lsls	r1, r1, #24
 800c3b0:	430b      	orrs	r3, r1
 800c3b2:	9905      	ldr	r1, [sp, #20]
 800c3b4:	001c      	movs	r4, r3
 800c3b6:	0509      	lsls	r1, r1, #20
 800c3b8:	188d      	adds	r5, r1, r2
 800c3ba:	e750      	b.n	800c25e <__ieee754_sqrt+0x32>
 800c3bc:	f7f4 fb6a 	bl	8000a94 <__aeabi_dadd>
 800c3c0:	6877      	ldr	r7, [r6, #4]
 800c3c2:	6836      	ldr	r6, [r6, #0]
 800c3c4:	0002      	movs	r2, r0
 800c3c6:	000b      	movs	r3, r1
 800c3c8:	0030      	movs	r0, r6
 800c3ca:	0039      	movs	r1, r7
 800c3cc:	f7f4 f840 	bl	8000450 <__aeabi_dcmplt>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d004      	beq.n	800c3de <__ieee754_sqrt+0x1b2>
 800c3d4:	3402      	adds	r4, #2
 800c3d6:	4263      	negs	r3, r4
 800c3d8:	4163      	adcs	r3, r4
 800c3da:	18ed      	adds	r5, r5, r3
 800c3dc:	e7e0      	b.n	800c3a0 <__ieee754_sqrt+0x174>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	3401      	adds	r4, #1
 800c3e2:	439c      	bics	r4, r3
 800c3e4:	e7dc      	b.n	800c3a0 <__ieee754_sqrt+0x174>
 800c3e6:	46c0      	nop			@ (mov r8, r8)
 800c3e8:	7ff00000 	.word	0x7ff00000
 800c3ec:	fffffc01 	.word	0xfffffc01
 800c3f0:	20000228 	.word	0x20000228
 800c3f4:	20000220 	.word	0x20000220
 800c3f8:	3fe00000 	.word	0x3fe00000

0800c3fc <__kernel_rem_pio2>:
 800c3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3fe:	4cc6      	ldr	r4, [pc, #792]	@ (800c718 <__kernel_rem_pio2+0x31c>)
 800c400:	44a5      	add	sp, r4
 800c402:	0014      	movs	r4, r2
 800c404:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 800c406:	930e      	str	r3, [sp, #56]	@ 0x38
 800c408:	4bc4      	ldr	r3, [pc, #784]	@ (800c71c <__kernel_rem_pio2+0x320>)
 800c40a:	0092      	lsls	r2, r2, #2
 800c40c:	58d3      	ldr	r3, [r2, r3]
 800c40e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c410:	9308      	str	r3, [sp, #32]
 800c412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c414:	9105      	str	r1, [sp, #20]
 800c416:	3b01      	subs	r3, #1
 800c418:	930d      	str	r3, [sp, #52]	@ 0x34
 800c41a:	2300      	movs	r3, #0
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	0023      	movs	r3, r4
 800c420:	3314      	adds	r3, #20
 800c422:	db04      	blt.n	800c42e <__kernel_rem_pio2+0x32>
 800c424:	2118      	movs	r1, #24
 800c426:	1ee0      	subs	r0, r4, #3
 800c428:	f7f3 ff10 	bl	800024c <__divsi3>
 800c42c:	9000      	str	r0, [sp, #0]
 800c42e:	9b00      	ldr	r3, [sp, #0]
 800c430:	ae26      	add	r6, sp, #152	@ 0x98
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	2318      	movs	r3, #24
 800c436:	425b      	negs	r3, r3
 800c438:	4353      	muls	r3, r2
 800c43a:	191b      	adds	r3, r3, r4
 800c43c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c43e:	9302      	str	r3, [sp, #8]
 800c440:	9b00      	ldr	r3, [sp, #0]
 800c442:	1a9d      	subs	r5, r3, r2
 800c444:	002c      	movs	r4, r5
 800c446:	9b08      	ldr	r3, [sp, #32]
 800c448:	189f      	adds	r7, r3, r2
 800c44a:	1b63      	subs	r3, r4, r5
 800c44c:	429f      	cmp	r7, r3
 800c44e:	da0f      	bge.n	800c470 <__kernel_rem_pio2+0x74>
 800c450:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800c452:	af76      	add	r7, sp, #472	@ 0x1d8
 800c454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c456:	9a08      	ldr	r2, [sp, #32]
 800c458:	1aeb      	subs	r3, r5, r3
 800c45a:	429a      	cmp	r2, r3
 800c45c:	db30      	blt.n	800c4c0 <__kernel_rem_pio2+0xc4>
 800c45e:	00eb      	lsls	r3, r5, #3
 800c460:	aa26      	add	r2, sp, #152	@ 0x98
 800c462:	2400      	movs	r4, #0
 800c464:	189e      	adds	r6, r3, r2
 800c466:	2300      	movs	r3, #0
 800c468:	9306      	str	r3, [sp, #24]
 800c46a:	9407      	str	r4, [sp, #28]
 800c46c:	2400      	movs	r4, #0
 800c46e:	e01e      	b.n	800c4ae <__kernel_rem_pio2+0xb2>
 800c470:	2c00      	cmp	r4, #0
 800c472:	db07      	blt.n	800c484 <__kernel_rem_pio2+0x88>
 800c474:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 800c476:	00a3      	lsls	r3, r4, #2
 800c478:	58d0      	ldr	r0, [r2, r3]
 800c47a:	f7f6 f975 	bl	8002768 <__aeabi_i2d>
 800c47e:	c603      	stmia	r6!, {r0, r1}
 800c480:	3401      	adds	r4, #1
 800c482:	e7e2      	b.n	800c44a <__kernel_rem_pio2+0x4e>
 800c484:	2000      	movs	r0, #0
 800c486:	2100      	movs	r1, #0
 800c488:	e7f9      	b.n	800c47e <__kernel_rem_pio2+0x82>
 800c48a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c48c:	00e1      	lsls	r1, r4, #3
 800c48e:	1859      	adds	r1, r3, r1
 800c490:	6808      	ldr	r0, [r1, #0]
 800c492:	6849      	ldr	r1, [r1, #4]
 800c494:	6832      	ldr	r2, [r6, #0]
 800c496:	6873      	ldr	r3, [r6, #4]
 800c498:	f7f5 faa4 	bl	80019e4 <__aeabi_dmul>
 800c49c:	0002      	movs	r2, r0
 800c49e:	000b      	movs	r3, r1
 800c4a0:	9806      	ldr	r0, [sp, #24]
 800c4a2:	9907      	ldr	r1, [sp, #28]
 800c4a4:	f7f4 faf6 	bl	8000a94 <__aeabi_dadd>
 800c4a8:	9006      	str	r0, [sp, #24]
 800c4aa:	9107      	str	r1, [sp, #28]
 800c4ac:	3401      	adds	r4, #1
 800c4ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4b0:	3e08      	subs	r6, #8
 800c4b2:	429c      	cmp	r4, r3
 800c4b4:	dde9      	ble.n	800c48a <__kernel_rem_pio2+0x8e>
 800c4b6:	9b06      	ldr	r3, [sp, #24]
 800c4b8:	9c07      	ldr	r4, [sp, #28]
 800c4ba:	3501      	adds	r5, #1
 800c4bc:	c718      	stmia	r7!, {r3, r4}
 800c4be:	e7c9      	b.n	800c454 <__kernel_rem_pio2+0x58>
 800c4c0:	9b08      	ldr	r3, [sp, #32]
 800c4c2:	aa12      	add	r2, sp, #72	@ 0x48
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	189b      	adds	r3, r3, r2
 800c4c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4ca:	9b00      	ldr	r3, [sp, #0]
 800c4cc:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	18d3      	adds	r3, r2, r3
 800c4d2:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4d4:	9b08      	ldr	r3, [sp, #32]
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	9b00      	ldr	r3, [sp, #0]
 800c4da:	aa76      	add	r2, sp, #472	@ 0x1d8
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	18d3      	adds	r3, r2, r3
 800c4e0:	681e      	ldr	r6, [r3, #0]
 800c4e2:	685f      	ldr	r7, [r3, #4]
 800c4e4:	ab12      	add	r3, sp, #72	@ 0x48
 800c4e6:	001d      	movs	r5, r3
 800c4e8:	9c00      	ldr	r4, [sp, #0]
 800c4ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4ec:	2c00      	cmp	r4, #0
 800c4ee:	dc73      	bgt.n	800c5d8 <__kernel_rem_pio2+0x1dc>
 800c4f0:	0030      	movs	r0, r6
 800c4f2:	0039      	movs	r1, r7
 800c4f4:	9a02      	ldr	r2, [sp, #8]
 800c4f6:	f7ff fdff 	bl	800c0f8 <scalbn>
 800c4fa:	23ff      	movs	r3, #255	@ 0xff
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	059b      	lsls	r3, r3, #22
 800c500:	0004      	movs	r4, r0
 800c502:	000d      	movs	r5, r1
 800c504:	f7f5 fa6e 	bl	80019e4 <__aeabi_dmul>
 800c508:	f000 faca 	bl	800caa0 <floor>
 800c50c:	2200      	movs	r2, #0
 800c50e:	4b84      	ldr	r3, [pc, #528]	@ (800c720 <__kernel_rem_pio2+0x324>)
 800c510:	f7f5 fa68 	bl	80019e4 <__aeabi_dmul>
 800c514:	0002      	movs	r2, r0
 800c516:	000b      	movs	r3, r1
 800c518:	0020      	movs	r0, r4
 800c51a:	0029      	movs	r1, r5
 800c51c:	f7f5 fd2a 	bl	8001f74 <__aeabi_dsub>
 800c520:	000d      	movs	r5, r1
 800c522:	0004      	movs	r4, r0
 800c524:	f7f6 f8e4 	bl	80026f0 <__aeabi_d2iz>
 800c528:	900c      	str	r0, [sp, #48]	@ 0x30
 800c52a:	f7f6 f91d 	bl	8002768 <__aeabi_i2d>
 800c52e:	000b      	movs	r3, r1
 800c530:	0002      	movs	r2, r0
 800c532:	0029      	movs	r1, r5
 800c534:	0020      	movs	r0, r4
 800c536:	f7f5 fd1d 	bl	8001f74 <__aeabi_dsub>
 800c53a:	9b02      	ldr	r3, [sp, #8]
 800c53c:	0006      	movs	r6, r0
 800c53e:	000f      	movs	r7, r1
 800c540:	2b00      	cmp	r3, #0
 800c542:	dd6f      	ble.n	800c624 <__kernel_rem_pio2+0x228>
 800c544:	2018      	movs	r0, #24
 800c546:	9b00      	ldr	r3, [sp, #0]
 800c548:	aa12      	add	r2, sp, #72	@ 0x48
 800c54a:	3b01      	subs	r3, #1
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	589a      	ldr	r2, [r3, r2]
 800c550:	9902      	ldr	r1, [sp, #8]
 800c552:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c554:	1a40      	subs	r0, r0, r1
 800c556:	0011      	movs	r1, r2
 800c558:	4101      	asrs	r1, r0
 800c55a:	1864      	adds	r4, r4, r1
 800c55c:	4081      	lsls	r1, r0
 800c55e:	1a52      	subs	r2, r2, r1
 800c560:	a912      	add	r1, sp, #72	@ 0x48
 800c562:	505a      	str	r2, [r3, r1]
 800c564:	2317      	movs	r3, #23
 800c566:	9902      	ldr	r1, [sp, #8]
 800c568:	940c      	str	r4, [sp, #48]	@ 0x30
 800c56a:	1a5b      	subs	r3, r3, r1
 800c56c:	411a      	asrs	r2, r3
 800c56e:	9206      	str	r2, [sp, #24]
 800c570:	9b06      	ldr	r3, [sp, #24]
 800c572:	2b00      	cmp	r3, #0
 800c574:	dd68      	ble.n	800c648 <__kernel_rem_pio2+0x24c>
 800c576:	2200      	movs	r2, #0
 800c578:	2580      	movs	r5, #128	@ 0x80
 800c57a:	0014      	movs	r4, r2
 800c57c:	2001      	movs	r0, #1
 800c57e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c580:	4968      	ldr	r1, [pc, #416]	@ (800c724 <__kernel_rem_pio2+0x328>)
 800c582:	3301      	adds	r3, #1
 800c584:	930c      	str	r3, [sp, #48]	@ 0x30
 800c586:	046d      	lsls	r5, r5, #17
 800c588:	9b00      	ldr	r3, [sp, #0]
 800c58a:	4293      	cmp	r3, r2
 800c58c:	dd00      	ble.n	800c590 <__kernel_rem_pio2+0x194>
 800c58e:	e098      	b.n	800c6c2 <__kernel_rem_pio2+0x2c6>
 800c590:	9b02      	ldr	r3, [sp, #8]
 800c592:	2b00      	cmp	r3, #0
 800c594:	dd05      	ble.n	800c5a2 <__kernel_rem_pio2+0x1a6>
 800c596:	2b01      	cmp	r3, #1
 800c598:	d100      	bne.n	800c59c <__kernel_rem_pio2+0x1a0>
 800c59a:	e0a4      	b.n	800c6e6 <__kernel_rem_pio2+0x2ea>
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d100      	bne.n	800c5a2 <__kernel_rem_pio2+0x1a6>
 800c5a0:	e0ab      	b.n	800c6fa <__kernel_rem_pio2+0x2fe>
 800c5a2:	9b06      	ldr	r3, [sp, #24]
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d14f      	bne.n	800c648 <__kernel_rem_pio2+0x24c>
 800c5a8:	0032      	movs	r2, r6
 800c5aa:	003b      	movs	r3, r7
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	495e      	ldr	r1, [pc, #376]	@ (800c728 <__kernel_rem_pio2+0x32c>)
 800c5b0:	f7f5 fce0 	bl	8001f74 <__aeabi_dsub>
 800c5b4:	0006      	movs	r6, r0
 800c5b6:	000f      	movs	r7, r1
 800c5b8:	2c00      	cmp	r4, #0
 800c5ba:	d045      	beq.n	800c648 <__kernel_rem_pio2+0x24c>
 800c5bc:	9a02      	ldr	r2, [sp, #8]
 800c5be:	2000      	movs	r0, #0
 800c5c0:	4959      	ldr	r1, [pc, #356]	@ (800c728 <__kernel_rem_pio2+0x32c>)
 800c5c2:	f7ff fd99 	bl	800c0f8 <scalbn>
 800c5c6:	0002      	movs	r2, r0
 800c5c8:	000b      	movs	r3, r1
 800c5ca:	0030      	movs	r0, r6
 800c5cc:	0039      	movs	r1, r7
 800c5ce:	f7f5 fcd1 	bl	8001f74 <__aeabi_dsub>
 800c5d2:	0006      	movs	r6, r0
 800c5d4:	000f      	movs	r7, r1
 800c5d6:	e037      	b.n	800c648 <__kernel_rem_pio2+0x24c>
 800c5d8:	2200      	movs	r2, #0
 800c5da:	4b54      	ldr	r3, [pc, #336]	@ (800c72c <__kernel_rem_pio2+0x330>)
 800c5dc:	0030      	movs	r0, r6
 800c5de:	0039      	movs	r1, r7
 800c5e0:	f7f5 fa00 	bl	80019e4 <__aeabi_dmul>
 800c5e4:	f7f6 f884 	bl	80026f0 <__aeabi_d2iz>
 800c5e8:	f7f6 f8be 	bl	8002768 <__aeabi_i2d>
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4b50      	ldr	r3, [pc, #320]	@ (800c730 <__kernel_rem_pio2+0x334>)
 800c5f0:	9006      	str	r0, [sp, #24]
 800c5f2:	9107      	str	r1, [sp, #28]
 800c5f4:	f7f5 f9f6 	bl	80019e4 <__aeabi_dmul>
 800c5f8:	0002      	movs	r2, r0
 800c5fa:	000b      	movs	r3, r1
 800c5fc:	0030      	movs	r0, r6
 800c5fe:	0039      	movs	r1, r7
 800c600:	f7f5 fcb8 	bl	8001f74 <__aeabi_dsub>
 800c604:	f7f6 f874 	bl	80026f0 <__aeabi_d2iz>
 800c608:	3c01      	subs	r4, #1
 800c60a:	aa76      	add	r2, sp, #472	@ 0x1d8
 800c60c:	00e3      	lsls	r3, r4, #3
 800c60e:	18d3      	adds	r3, r2, r3
 800c610:	c501      	stmia	r5!, {r0}
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	9806      	ldr	r0, [sp, #24]
 800c618:	9907      	ldr	r1, [sp, #28]
 800c61a:	f7f4 fa3b 	bl	8000a94 <__aeabi_dadd>
 800c61e:	0006      	movs	r6, r0
 800c620:	000f      	movs	r7, r1
 800c622:	e763      	b.n	800c4ec <__kernel_rem_pio2+0xf0>
 800c624:	9b02      	ldr	r3, [sp, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d107      	bne.n	800c63a <__kernel_rem_pio2+0x23e>
 800c62a:	9b00      	ldr	r3, [sp, #0]
 800c62c:	aa12      	add	r2, sp, #72	@ 0x48
 800c62e:	3b01      	subs	r3, #1
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	589b      	ldr	r3, [r3, r2]
 800c634:	15db      	asrs	r3, r3, #23
 800c636:	9306      	str	r3, [sp, #24]
 800c638:	e79a      	b.n	800c570 <__kernel_rem_pio2+0x174>
 800c63a:	2200      	movs	r2, #0
 800c63c:	4b3d      	ldr	r3, [pc, #244]	@ (800c734 <__kernel_rem_pio2+0x338>)
 800c63e:	f7f3 ff25 	bl	800048c <__aeabi_dcmpge>
 800c642:	2800      	cmp	r0, #0
 800c644:	d13a      	bne.n	800c6bc <__kernel_rem_pio2+0x2c0>
 800c646:	9006      	str	r0, [sp, #24]
 800c648:	2200      	movs	r2, #0
 800c64a:	2300      	movs	r3, #0
 800c64c:	0030      	movs	r0, r6
 800c64e:	0039      	movs	r1, r7
 800c650:	f7f3 fef8 	bl	8000444 <__aeabi_dcmpeq>
 800c654:	2800      	cmp	r0, #0
 800c656:	d100      	bne.n	800c65a <__kernel_rem_pio2+0x25e>
 800c658:	e0b5      	b.n	800c7c6 <__kernel_rem_pio2+0x3ca>
 800c65a:	2200      	movs	r2, #0
 800c65c:	9b00      	ldr	r3, [sp, #0]
 800c65e:	3b01      	subs	r3, #1
 800c660:	9908      	ldr	r1, [sp, #32]
 800c662:	428b      	cmp	r3, r1
 800c664:	da51      	bge.n	800c70a <__kernel_rem_pio2+0x30e>
 800c666:	2a00      	cmp	r2, #0
 800c668:	d100      	bne.n	800c66c <__kernel_rem_pio2+0x270>
 800c66a:	e096      	b.n	800c79a <__kernel_rem_pio2+0x39e>
 800c66c:	9b00      	ldr	r3, [sp, #0]
 800c66e:	aa12      	add	r2, sp, #72	@ 0x48
 800c670:	3b01      	subs	r3, #1
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	9b02      	ldr	r3, [sp, #8]
 800c676:	3b18      	subs	r3, #24
 800c678:	9302      	str	r3, [sp, #8]
 800c67a:	9b00      	ldr	r3, [sp, #0]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	589b      	ldr	r3, [r3, r2]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d0f3      	beq.n	800c66c <__kernel_rem_pio2+0x270>
 800c684:	2000      	movs	r0, #0
 800c686:	9a02      	ldr	r2, [sp, #8]
 800c688:	4927      	ldr	r1, [pc, #156]	@ (800c728 <__kernel_rem_pio2+0x32c>)
 800c68a:	f7ff fd35 	bl	800c0f8 <scalbn>
 800c68e:	0004      	movs	r4, r0
 800c690:	000d      	movs	r5, r1
 800c692:	9e00      	ldr	r6, [sp, #0]
 800c694:	2e00      	cmp	r6, #0
 800c696:	db00      	blt.n	800c69a <__kernel_rem_pio2+0x29e>
 800c698:	e0d2      	b.n	800c840 <__kernel_rem_pio2+0x444>
 800c69a:	4b27      	ldr	r3, [pc, #156]	@ (800c738 <__kernel_rem_pio2+0x33c>)
 800c69c:	9c00      	ldr	r4, [sp, #0]
 800c69e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6a0:	2c00      	cmp	r4, #0
 800c6a2:	da00      	bge.n	800c6a6 <__kernel_rem_pio2+0x2aa>
 800c6a4:	e103      	b.n	800c8ae <__kernel_rem_pio2+0x4b2>
 800c6a6:	00e3      	lsls	r3, r4, #3
 800c6a8:	aa76      	add	r2, sp, #472	@ 0x1d8
 800c6aa:	189f      	adds	r7, r3, r2
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	9202      	str	r2, [sp, #8]
 800c6b2:	9303      	str	r3, [sp, #12]
 800c6b4:	9b00      	ldr	r3, [sp, #0]
 800c6b6:	2500      	movs	r5, #0
 800c6b8:	1b1e      	subs	r6, r3, r4
 800c6ba:	e0ea      	b.n	800c892 <__kernel_rem_pio2+0x496>
 800c6bc:	2302      	movs	r3, #2
 800c6be:	9306      	str	r3, [sp, #24]
 800c6c0:	e759      	b.n	800c576 <__kernel_rem_pio2+0x17a>
 800c6c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2c00      	cmp	r4, #0
 800c6c8:	d10b      	bne.n	800c6e2 <__kernel_rem_pio2+0x2e6>
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <__kernel_rem_pio2+0x2da>
 800c6ce:	1aeb      	subs	r3, r5, r3
 800c6d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c6d2:	6023      	str	r3, [r4, #0]
 800c6d4:	0003      	movs	r3, r0
 800c6d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c6d8:	3201      	adds	r2, #1
 800c6da:	3404      	adds	r4, #4
 800c6dc:	940a      	str	r4, [sp, #40]	@ 0x28
 800c6de:	001c      	movs	r4, r3
 800c6e0:	e752      	b.n	800c588 <__kernel_rem_pio2+0x18c>
 800c6e2:	1acb      	subs	r3, r1, r3
 800c6e4:	e7f4      	b.n	800c6d0 <__kernel_rem_pio2+0x2d4>
 800c6e6:	9b00      	ldr	r3, [sp, #0]
 800c6e8:	aa12      	add	r2, sp, #72	@ 0x48
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	589a      	ldr	r2, [r3, r2]
 800c6f0:	0252      	lsls	r2, r2, #9
 800c6f2:	0a52      	lsrs	r2, r2, #9
 800c6f4:	a912      	add	r1, sp, #72	@ 0x48
 800c6f6:	505a      	str	r2, [r3, r1]
 800c6f8:	e753      	b.n	800c5a2 <__kernel_rem_pio2+0x1a6>
 800c6fa:	9b00      	ldr	r3, [sp, #0]
 800c6fc:	aa12      	add	r2, sp, #72	@ 0x48
 800c6fe:	3b01      	subs	r3, #1
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	589a      	ldr	r2, [r3, r2]
 800c704:	0292      	lsls	r2, r2, #10
 800c706:	0a92      	lsrs	r2, r2, #10
 800c708:	e7f4      	b.n	800c6f4 <__kernel_rem_pio2+0x2f8>
 800c70a:	0099      	lsls	r1, r3, #2
 800c70c:	a812      	add	r0, sp, #72	@ 0x48
 800c70e:	5809      	ldr	r1, [r1, r0]
 800c710:	3b01      	subs	r3, #1
 800c712:	430a      	orrs	r2, r1
 800c714:	e7a4      	b.n	800c660 <__kernel_rem_pio2+0x264>
 800c716:	46c0      	nop			@ (mov r8, r8)
 800c718:	fffffd84 	.word	0xfffffd84
 800c71c:	0800d368 	.word	0x0800d368
 800c720:	40200000 	.word	0x40200000
 800c724:	00ffffff 	.word	0x00ffffff
 800c728:	3ff00000 	.word	0x3ff00000
 800c72c:	3e700000 	.word	0x3e700000
 800c730:	41700000 	.word	0x41700000
 800c734:	3fe00000 	.word	0x3fe00000
 800c738:	0800d328 	.word	0x0800d328
 800c73c:	3301      	adds	r3, #1
 800c73e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c740:	009a      	lsls	r2, r3, #2
 800c742:	4252      	negs	r2, r2
 800c744:	588a      	ldr	r2, [r1, r2]
 800c746:	2a00      	cmp	r2, #0
 800c748:	d0f8      	beq.n	800c73c <__kernel_rem_pio2+0x340>
 800c74a:	9a00      	ldr	r2, [sp, #0]
 800c74c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c74e:	1c55      	adds	r5, r2, #1
 800c750:	1852      	adds	r2, r2, r1
 800c752:	00d2      	lsls	r2, r2, #3
 800c754:	a926      	add	r1, sp, #152	@ 0x98
 800c756:	188c      	adds	r4, r1, r2
 800c758:	9a00      	ldr	r2, [sp, #0]
 800c75a:	18d3      	adds	r3, r2, r3
 800c75c:	9306      	str	r3, [sp, #24]
 800c75e:	9b06      	ldr	r3, [sp, #24]
 800c760:	42ab      	cmp	r3, r5
 800c762:	da00      	bge.n	800c766 <__kernel_rem_pio2+0x36a>
 800c764:	e6b7      	b.n	800c4d6 <__kernel_rem_pio2+0xda>
 800c766:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c768:	00ab      	lsls	r3, r5, #2
 800c76a:	58d0      	ldr	r0, [r2, r3]
 800c76c:	f7f5 fffc 	bl	8002768 <__aeabi_i2d>
 800c770:	2200      	movs	r2, #0
 800c772:	2300      	movs	r3, #0
 800c774:	0027      	movs	r7, r4
 800c776:	2600      	movs	r6, #0
 800c778:	6020      	str	r0, [r4, #0]
 800c77a:	6061      	str	r1, [r4, #4]
 800c77c:	9200      	str	r2, [sp, #0]
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c782:	429e      	cmp	r6, r3
 800c784:	dd0b      	ble.n	800c79e <__kernel_rem_pio2+0x3a2>
 800c786:	00eb      	lsls	r3, r5, #3
 800c788:	aa76      	add	r2, sp, #472	@ 0x1d8
 800c78a:	18d3      	adds	r3, r2, r3
 800c78c:	3501      	adds	r5, #1
 800c78e:	9900      	ldr	r1, [sp, #0]
 800c790:	9a01      	ldr	r2, [sp, #4]
 800c792:	3408      	adds	r4, #8
 800c794:	6019      	str	r1, [r3, #0]
 800c796:	605a      	str	r2, [r3, #4]
 800c798:	e7e1      	b.n	800c75e <__kernel_rem_pio2+0x362>
 800c79a:	2301      	movs	r3, #1
 800c79c:	e7cf      	b.n	800c73e <__kernel_rem_pio2+0x342>
 800c79e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7a0:	00f1      	lsls	r1, r6, #3
 800c7a2:	1859      	adds	r1, r3, r1
 800c7a4:	6808      	ldr	r0, [r1, #0]
 800c7a6:	6849      	ldr	r1, [r1, #4]
 800c7a8:	683a      	ldr	r2, [r7, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f7f5 f91a 	bl	80019e4 <__aeabi_dmul>
 800c7b0:	0002      	movs	r2, r0
 800c7b2:	000b      	movs	r3, r1
 800c7b4:	9800      	ldr	r0, [sp, #0]
 800c7b6:	9901      	ldr	r1, [sp, #4]
 800c7b8:	f7f4 f96c 	bl	8000a94 <__aeabi_dadd>
 800c7bc:	3601      	adds	r6, #1
 800c7be:	9000      	str	r0, [sp, #0]
 800c7c0:	9101      	str	r1, [sp, #4]
 800c7c2:	3f08      	subs	r7, #8
 800c7c4:	e7dc      	b.n	800c780 <__kernel_rem_pio2+0x384>
 800c7c6:	9b02      	ldr	r3, [sp, #8]
 800c7c8:	0030      	movs	r0, r6
 800c7ca:	425a      	negs	r2, r3
 800c7cc:	0039      	movs	r1, r7
 800c7ce:	f7ff fc93 	bl	800c0f8 <scalbn>
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	4bb0      	ldr	r3, [pc, #704]	@ (800ca98 <__kernel_rem_pio2+0x69c>)
 800c7d6:	0006      	movs	r6, r0
 800c7d8:	000f      	movs	r7, r1
 800c7da:	f7f3 fe57 	bl	800048c <__aeabi_dcmpge>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d025      	beq.n	800c82e <__kernel_rem_pio2+0x432>
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	4bad      	ldr	r3, [pc, #692]	@ (800ca9c <__kernel_rem_pio2+0x6a0>)
 800c7e6:	0030      	movs	r0, r6
 800c7e8:	0039      	movs	r1, r7
 800c7ea:	f7f5 f8fb 	bl	80019e4 <__aeabi_dmul>
 800c7ee:	f7f5 ff7f 	bl	80026f0 <__aeabi_d2iz>
 800c7f2:	9b00      	ldr	r3, [sp, #0]
 800c7f4:	0004      	movs	r4, r0
 800c7f6:	009d      	lsls	r5, r3, #2
 800c7f8:	f7f5 ffb6 	bl	8002768 <__aeabi_i2d>
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	4ba6      	ldr	r3, [pc, #664]	@ (800ca98 <__kernel_rem_pio2+0x69c>)
 800c800:	f7f5 f8f0 	bl	80019e4 <__aeabi_dmul>
 800c804:	0002      	movs	r2, r0
 800c806:	000b      	movs	r3, r1
 800c808:	0030      	movs	r0, r6
 800c80a:	0039      	movs	r1, r7
 800c80c:	f7f5 fbb2 	bl	8001f74 <__aeabi_dsub>
 800c810:	f7f5 ff6e 	bl	80026f0 <__aeabi_d2iz>
 800c814:	ab12      	add	r3, sp, #72	@ 0x48
 800c816:	5158      	str	r0, [r3, r5]
 800c818:	9b00      	ldr	r3, [sp, #0]
 800c81a:	aa12      	add	r2, sp, #72	@ 0x48
 800c81c:	3301      	adds	r3, #1
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	9b02      	ldr	r3, [sp, #8]
 800c822:	3318      	adds	r3, #24
 800c824:	9302      	str	r3, [sp, #8]
 800c826:	9b00      	ldr	r3, [sp, #0]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	509c      	str	r4, [r3, r2]
 800c82c:	e72a      	b.n	800c684 <__kernel_rem_pio2+0x288>
 800c82e:	9b00      	ldr	r3, [sp, #0]
 800c830:	0030      	movs	r0, r6
 800c832:	0039      	movs	r1, r7
 800c834:	009c      	lsls	r4, r3, #2
 800c836:	f7f5 ff5b 	bl	80026f0 <__aeabi_d2iz>
 800c83a:	ab12      	add	r3, sp, #72	@ 0x48
 800c83c:	5118      	str	r0, [r3, r4]
 800c83e:	e721      	b.n	800c684 <__kernel_rem_pio2+0x288>
 800c840:	00f3      	lsls	r3, r6, #3
 800c842:	aa76      	add	r2, sp, #472	@ 0x1d8
 800c844:	18d7      	adds	r7, r2, r3
 800c846:	00b3      	lsls	r3, r6, #2
 800c848:	aa12      	add	r2, sp, #72	@ 0x48
 800c84a:	5898      	ldr	r0, [r3, r2]
 800c84c:	f7f5 ff8c 	bl	8002768 <__aeabi_i2d>
 800c850:	0022      	movs	r2, r4
 800c852:	002b      	movs	r3, r5
 800c854:	f7f5 f8c6 	bl	80019e4 <__aeabi_dmul>
 800c858:	2200      	movs	r2, #0
 800c85a:	6038      	str	r0, [r7, #0]
 800c85c:	6079      	str	r1, [r7, #4]
 800c85e:	4b8f      	ldr	r3, [pc, #572]	@ (800ca9c <__kernel_rem_pio2+0x6a0>)
 800c860:	0020      	movs	r0, r4
 800c862:	0029      	movs	r1, r5
 800c864:	f7f5 f8be 	bl	80019e4 <__aeabi_dmul>
 800c868:	3e01      	subs	r6, #1
 800c86a:	0004      	movs	r4, r0
 800c86c:	000d      	movs	r5, r1
 800c86e:	e711      	b.n	800c694 <__kernel_rem_pio2+0x298>
 800c870:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c872:	00e9      	lsls	r1, r5, #3
 800c874:	18c9      	adds	r1, r1, r3
 800c876:	6808      	ldr	r0, [r1, #0]
 800c878:	6849      	ldr	r1, [r1, #4]
 800c87a:	cf0c      	ldmia	r7!, {r2, r3}
 800c87c:	f7f5 f8b2 	bl	80019e4 <__aeabi_dmul>
 800c880:	0002      	movs	r2, r0
 800c882:	000b      	movs	r3, r1
 800c884:	9802      	ldr	r0, [sp, #8]
 800c886:	9903      	ldr	r1, [sp, #12]
 800c888:	f7f4 f904 	bl	8000a94 <__aeabi_dadd>
 800c88c:	9002      	str	r0, [sp, #8]
 800c88e:	9103      	str	r1, [sp, #12]
 800c890:	3501      	adds	r5, #1
 800c892:	9b08      	ldr	r3, [sp, #32]
 800c894:	429d      	cmp	r5, r3
 800c896:	dc01      	bgt.n	800c89c <__kernel_rem_pio2+0x4a0>
 800c898:	42ae      	cmp	r6, r5
 800c89a:	dae9      	bge.n	800c870 <__kernel_rem_pio2+0x474>
 800c89c:	00f6      	lsls	r6, r6, #3
 800c89e:	ab4e      	add	r3, sp, #312	@ 0x138
 800c8a0:	199b      	adds	r3, r3, r6
 800c8a2:	9902      	ldr	r1, [sp, #8]
 800c8a4:	9a03      	ldr	r2, [sp, #12]
 800c8a6:	3c01      	subs	r4, #1
 800c8a8:	6019      	str	r1, [r3, #0]
 800c8aa:	605a      	str	r2, [r3, #4]
 800c8ac:	e6f8      	b.n	800c6a0 <__kernel_rem_pio2+0x2a4>
 800c8ae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	dc0b      	bgt.n	800c8cc <__kernel_rem_pio2+0x4d0>
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	dd00      	ble.n	800c8ba <__kernel_rem_pio2+0x4be>
 800c8b8:	e084      	b.n	800c9c4 <__kernel_rem_pio2+0x5c8>
 800c8ba:	d052      	beq.n	800c962 <__kernel_rem_pio2+0x566>
 800c8bc:	2007      	movs	r0, #7
 800c8be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8c0:	4003      	ands	r3, r0
 800c8c2:	0018      	movs	r0, r3
 800c8c4:	239f      	movs	r3, #159	@ 0x9f
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	449d      	add	sp, r3
 800c8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8cc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d1f4      	bne.n	800c8bc <__kernel_rem_pio2+0x4c0>
 800c8d2:	9b00      	ldr	r3, [sp, #0]
 800c8d4:	aa4e      	add	r2, sp, #312	@ 0x138
 800c8d6:	00db      	lsls	r3, r3, #3
 800c8d8:	18d4      	adds	r4, r2, r3
 800c8da:	0025      	movs	r5, r4
 800c8dc:	9b00      	ldr	r3, [sp, #0]
 800c8de:	9302      	str	r3, [sp, #8]
 800c8e0:	9b02      	ldr	r3, [sp, #8]
 800c8e2:	3d08      	subs	r5, #8
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dd00      	ble.n	800c8ea <__kernel_rem_pio2+0x4ee>
 800c8e8:	e07a      	b.n	800c9e0 <__kernel_rem_pio2+0x5e4>
 800c8ea:	9d00      	ldr	r5, [sp, #0]
 800c8ec:	3c08      	subs	r4, #8
 800c8ee:	2d01      	cmp	r5, #1
 800c8f0:	dd00      	ble.n	800c8f4 <__kernel_rem_pio2+0x4f8>
 800c8f2:	e095      	b.n	800ca20 <__kernel_rem_pio2+0x624>
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	9b00      	ldr	r3, [sp, #0]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	dd00      	ble.n	800c900 <__kernel_rem_pio2+0x504>
 800c8fe:	e0ad      	b.n	800ca5c <__kernel_rem_pio2+0x660>
 800c900:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800c902:	9c4f      	ldr	r4, [sp, #316]	@ 0x13c
 800c904:	9e50      	ldr	r6, [sp, #320]	@ 0x140
 800c906:	9f51      	ldr	r7, [sp, #324]	@ 0x144
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	9401      	str	r4, [sp, #4]
 800c90c:	9b06      	ldr	r3, [sp, #24]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d000      	beq.n	800c914 <__kernel_rem_pio2+0x518>
 800c912:	e0af      	b.n	800ca74 <__kernel_rem_pio2+0x678>
 800c914:	9c00      	ldr	r4, [sp, #0]
 800c916:	9d01      	ldr	r5, [sp, #4]
 800c918:	9b05      	ldr	r3, [sp, #20]
 800c91a:	601c      	str	r4, [r3, #0]
 800c91c:	605d      	str	r5, [r3, #4]
 800c91e:	609e      	str	r6, [r3, #8]
 800c920:	60df      	str	r7, [r3, #12]
 800c922:	6118      	str	r0, [r3, #16]
 800c924:	6159      	str	r1, [r3, #20]
 800c926:	e7c9      	b.n	800c8bc <__kernel_rem_pio2+0x4c0>
 800c928:	9b00      	ldr	r3, [sp, #0]
 800c92a:	aa4e      	add	r2, sp, #312	@ 0x138
 800c92c:	00db      	lsls	r3, r3, #3
 800c92e:	18d3      	adds	r3, r2, r3
 800c930:	0020      	movs	r0, r4
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	0029      	movs	r1, r5
 800c938:	f7f4 f8ac 	bl	8000a94 <__aeabi_dadd>
 800c93c:	0004      	movs	r4, r0
 800c93e:	000d      	movs	r5, r1
 800c940:	9b00      	ldr	r3, [sp, #0]
 800c942:	3b01      	subs	r3, #1
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	9b00      	ldr	r3, [sp, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	daed      	bge.n	800c928 <__kernel_rem_pio2+0x52c>
 800c94c:	9b06      	ldr	r3, [sp, #24]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <__kernel_rem_pio2+0x55e>
 800c952:	2180      	movs	r1, #128	@ 0x80
 800c954:	0609      	lsls	r1, r1, #24
 800c956:	186b      	adds	r3, r5, r1
 800c958:	001d      	movs	r5, r3
 800c95a:	9b05      	ldr	r3, [sp, #20]
 800c95c:	601c      	str	r4, [r3, #0]
 800c95e:	605d      	str	r5, [r3, #4]
 800c960:	e7ac      	b.n	800c8bc <__kernel_rem_pio2+0x4c0>
 800c962:	2400      	movs	r4, #0
 800c964:	2500      	movs	r5, #0
 800c966:	e7ee      	b.n	800c946 <__kernel_rem_pio2+0x54a>
 800c968:	00e3      	lsls	r3, r4, #3
 800c96a:	aa4e      	add	r2, sp, #312	@ 0x138
 800c96c:	18d3      	adds	r3, r2, r3
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	f7f4 f88f 	bl	8000a94 <__aeabi_dadd>
 800c976:	3c01      	subs	r4, #1
 800c978:	2c00      	cmp	r4, #0
 800c97a:	daf5      	bge.n	800c968 <__kernel_rem_pio2+0x56c>
 800c97c:	9c06      	ldr	r4, [sp, #24]
 800c97e:	0002      	movs	r2, r0
 800c980:	000b      	movs	r3, r1
 800c982:	2c00      	cmp	r4, #0
 800c984:	d002      	beq.n	800c98c <__kernel_rem_pio2+0x590>
 800c986:	2480      	movs	r4, #128	@ 0x80
 800c988:	0624      	lsls	r4, r4, #24
 800c98a:	190b      	adds	r3, r1, r4
 800c98c:	9c05      	ldr	r4, [sp, #20]
 800c98e:	2501      	movs	r5, #1
 800c990:	6022      	str	r2, [r4, #0]
 800c992:	6063      	str	r3, [r4, #4]
 800c994:	0002      	movs	r2, r0
 800c996:	000b      	movs	r3, r1
 800c998:	984e      	ldr	r0, [sp, #312]	@ 0x138
 800c99a:	994f      	ldr	r1, [sp, #316]	@ 0x13c
 800c99c:	f7f5 faea 	bl	8001f74 <__aeabi_dsub>
 800c9a0:	0006      	movs	r6, r0
 800c9a2:	000f      	movs	r7, r1
 800c9a4:	ac4e      	add	r4, sp, #312	@ 0x138
 800c9a6:	9b00      	ldr	r3, [sp, #0]
 800c9a8:	3408      	adds	r4, #8
 800c9aa:	42ab      	cmp	r3, r5
 800c9ac:	da0e      	bge.n	800c9cc <__kernel_rem_pio2+0x5d0>
 800c9ae:	9b06      	ldr	r3, [sp, #24]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <__kernel_rem_pio2+0x5c0>
 800c9b4:	2180      	movs	r1, #128	@ 0x80
 800c9b6:	0609      	lsls	r1, r1, #24
 800c9b8:	187b      	adds	r3, r7, r1
 800c9ba:	001f      	movs	r7, r3
 800c9bc:	9b05      	ldr	r3, [sp, #20]
 800c9be:	609e      	str	r6, [r3, #8]
 800c9c0:	60df      	str	r7, [r3, #12]
 800c9c2:	e77b      	b.n	800c8bc <__kernel_rem_pio2+0x4c0>
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	9c00      	ldr	r4, [sp, #0]
 800c9ca:	e7d5      	b.n	800c978 <__kernel_rem_pio2+0x57c>
 800c9cc:	0030      	movs	r0, r6
 800c9ce:	6822      	ldr	r2, [r4, #0]
 800c9d0:	6863      	ldr	r3, [r4, #4]
 800c9d2:	0039      	movs	r1, r7
 800c9d4:	f7f4 f85e 	bl	8000a94 <__aeabi_dadd>
 800c9d8:	3501      	adds	r5, #1
 800c9da:	0006      	movs	r6, r0
 800c9dc:	000f      	movs	r7, r1
 800c9de:	e7e2      	b.n	800c9a6 <__kernel_rem_pio2+0x5aa>
 800c9e0:	9b02      	ldr	r3, [sp, #8]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	9302      	str	r3, [sp, #8]
 800c9e6:	682a      	ldr	r2, [r5, #0]
 800c9e8:	686b      	ldr	r3, [r5, #4]
 800c9ea:	9208      	str	r2, [sp, #32]
 800c9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ee:	9808      	ldr	r0, [sp, #32]
 800c9f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9f2:	68aa      	ldr	r2, [r5, #8]
 800c9f4:	68eb      	ldr	r3, [r5, #12]
 800c9f6:	920a      	str	r2, [sp, #40]	@ 0x28
 800c9f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9fa:	f7f4 f84b 	bl	8000a94 <__aeabi_dadd>
 800c9fe:	0002      	movs	r2, r0
 800ca00:	000b      	movs	r3, r1
 800ca02:	0006      	movs	r6, r0
 800ca04:	000f      	movs	r7, r1
 800ca06:	9808      	ldr	r0, [sp, #32]
 800ca08:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca0a:	f7f5 fab3 	bl	8001f74 <__aeabi_dsub>
 800ca0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca12:	f7f4 f83f 	bl	8000a94 <__aeabi_dadd>
 800ca16:	602e      	str	r6, [r5, #0]
 800ca18:	606f      	str	r7, [r5, #4]
 800ca1a:	60a8      	str	r0, [r5, #8]
 800ca1c:	60e9      	str	r1, [r5, #12]
 800ca1e:	e75f      	b.n	800c8e0 <__kernel_rem_pio2+0x4e4>
 800ca20:	6822      	ldr	r2, [r4, #0]
 800ca22:	6863      	ldr	r3, [r4, #4]
 800ca24:	9202      	str	r2, [sp, #8]
 800ca26:	9303      	str	r3, [sp, #12]
 800ca28:	9802      	ldr	r0, [sp, #8]
 800ca2a:	9903      	ldr	r1, [sp, #12]
 800ca2c:	68a2      	ldr	r2, [r4, #8]
 800ca2e:	68e3      	ldr	r3, [r4, #12]
 800ca30:	9208      	str	r2, [sp, #32]
 800ca32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca34:	f7f4 f82e 	bl	8000a94 <__aeabi_dadd>
 800ca38:	0002      	movs	r2, r0
 800ca3a:	000b      	movs	r3, r1
 800ca3c:	0006      	movs	r6, r0
 800ca3e:	000f      	movs	r7, r1
 800ca40:	9802      	ldr	r0, [sp, #8]
 800ca42:	9903      	ldr	r1, [sp, #12]
 800ca44:	f7f5 fa96 	bl	8001f74 <__aeabi_dsub>
 800ca48:	9a08      	ldr	r2, [sp, #32]
 800ca4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca4c:	f7f4 f822 	bl	8000a94 <__aeabi_dadd>
 800ca50:	3d01      	subs	r5, #1
 800ca52:	60a0      	str	r0, [r4, #8]
 800ca54:	60e1      	str	r1, [r4, #12]
 800ca56:	6026      	str	r6, [r4, #0]
 800ca58:	6067      	str	r7, [r4, #4]
 800ca5a:	e747      	b.n	800c8ec <__kernel_rem_pio2+0x4f0>
 800ca5c:	9b00      	ldr	r3, [sp, #0]
 800ca5e:	aa4e      	add	r2, sp, #312	@ 0x138
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	18d3      	adds	r3, r2, r3
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	f7f4 f814 	bl	8000a94 <__aeabi_dadd>
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	e741      	b.n	800c8f8 <__kernel_rem_pio2+0x4fc>
 800ca74:	9c00      	ldr	r4, [sp, #0]
 800ca76:	9b05      	ldr	r3, [sp, #20]
 800ca78:	9a01      	ldr	r2, [sp, #4]
 800ca7a:	601c      	str	r4, [r3, #0]
 800ca7c:	2380      	movs	r3, #128	@ 0x80
 800ca7e:	061b      	lsls	r3, r3, #24
 800ca80:	18d4      	adds	r4, r2, r3
 800ca82:	9a05      	ldr	r2, [sp, #20]
 800ca84:	6054      	str	r4, [r2, #4]
 800ca86:	001a      	movs	r2, r3
 800ca88:	9c05      	ldr	r4, [sp, #20]
 800ca8a:	18fb      	adds	r3, r7, r3
 800ca8c:	60e3      	str	r3, [r4, #12]
 800ca8e:	188b      	adds	r3, r1, r2
 800ca90:	60a6      	str	r6, [r4, #8]
 800ca92:	6120      	str	r0, [r4, #16]
 800ca94:	6163      	str	r3, [r4, #20]
 800ca96:	e711      	b.n	800c8bc <__kernel_rem_pio2+0x4c0>
 800ca98:	41700000 	.word	0x41700000
 800ca9c:	3e700000 	.word	0x3e700000

0800caa0 <floor>:
 800caa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caa2:	004b      	lsls	r3, r1, #1
 800caa4:	4a36      	ldr	r2, [pc, #216]	@ (800cb80 <floor+0xe0>)
 800caa6:	0d5b      	lsrs	r3, r3, #21
 800caa8:	189e      	adds	r6, r3, r2
 800caaa:	000c      	movs	r4, r1
 800caac:	0005      	movs	r5, r0
 800caae:	9001      	str	r0, [sp, #4]
 800cab0:	2e13      	cmp	r6, #19
 800cab2:	dc2f      	bgt.n	800cb14 <floor+0x74>
 800cab4:	2e00      	cmp	r6, #0
 800cab6:	da14      	bge.n	800cae2 <floor+0x42>
 800cab8:	4a32      	ldr	r2, [pc, #200]	@ (800cb84 <floor+0xe4>)
 800caba:	4b33      	ldr	r3, [pc, #204]	@ (800cb88 <floor+0xe8>)
 800cabc:	f7f3 ffea 	bl	8000a94 <__aeabi_dadd>
 800cac0:	2200      	movs	r2, #0
 800cac2:	2300      	movs	r3, #0
 800cac4:	f7f3 fcd8 	bl	8000478 <__aeabi_dcmpgt>
 800cac8:	2800      	cmp	r0, #0
 800caca:	d007      	beq.n	800cadc <floor+0x3c>
 800cacc:	2c00      	cmp	r4, #0
 800cace:	da50      	bge.n	800cb72 <floor+0xd2>
 800cad0:	0064      	lsls	r4, r4, #1
 800cad2:	0864      	lsrs	r4, r4, #1
 800cad4:	4325      	orrs	r5, r4
 800cad6:	d14f      	bne.n	800cb78 <floor+0xd8>
 800cad8:	2480      	movs	r4, #128	@ 0x80
 800cada:	0624      	lsls	r4, r4, #24
 800cadc:	0021      	movs	r1, r4
 800cade:	0028      	movs	r0, r5
 800cae0:	e022      	b.n	800cb28 <floor+0x88>
 800cae2:	4f2a      	ldr	r7, [pc, #168]	@ (800cb8c <floor+0xec>)
 800cae4:	4137      	asrs	r7, r6
 800cae6:	003b      	movs	r3, r7
 800cae8:	400b      	ands	r3, r1
 800caea:	4303      	orrs	r3, r0
 800caec:	d01c      	beq.n	800cb28 <floor+0x88>
 800caee:	4a25      	ldr	r2, [pc, #148]	@ (800cb84 <floor+0xe4>)
 800caf0:	4b25      	ldr	r3, [pc, #148]	@ (800cb88 <floor+0xe8>)
 800caf2:	f7f3 ffcf 	bl	8000a94 <__aeabi_dadd>
 800caf6:	2200      	movs	r2, #0
 800caf8:	2300      	movs	r3, #0
 800cafa:	f7f3 fcbd 	bl	8000478 <__aeabi_dcmpgt>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d0ec      	beq.n	800cadc <floor+0x3c>
 800cb02:	2c00      	cmp	r4, #0
 800cb04:	da03      	bge.n	800cb0e <floor+0x6e>
 800cb06:	2380      	movs	r3, #128	@ 0x80
 800cb08:	035b      	lsls	r3, r3, #13
 800cb0a:	4133      	asrs	r3, r6
 800cb0c:	18e4      	adds	r4, r4, r3
 800cb0e:	2500      	movs	r5, #0
 800cb10:	43bc      	bics	r4, r7
 800cb12:	e7e3      	b.n	800cadc <floor+0x3c>
 800cb14:	2e33      	cmp	r6, #51	@ 0x33
 800cb16:	dd09      	ble.n	800cb2c <floor+0x8c>
 800cb18:	2380      	movs	r3, #128	@ 0x80
 800cb1a:	00db      	lsls	r3, r3, #3
 800cb1c:	429e      	cmp	r6, r3
 800cb1e:	d103      	bne.n	800cb28 <floor+0x88>
 800cb20:	0002      	movs	r2, r0
 800cb22:	000b      	movs	r3, r1
 800cb24:	f7f3 ffb6 	bl	8000a94 <__aeabi_dadd>
 800cb28:	b003      	add	sp, #12
 800cb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb2c:	2701      	movs	r7, #1
 800cb2e:	4a18      	ldr	r2, [pc, #96]	@ (800cb90 <floor+0xf0>)
 800cb30:	427f      	negs	r7, r7
 800cb32:	189b      	adds	r3, r3, r2
 800cb34:	40df      	lsrs	r7, r3
 800cb36:	4238      	tst	r0, r7
 800cb38:	d0f6      	beq.n	800cb28 <floor+0x88>
 800cb3a:	4a12      	ldr	r2, [pc, #72]	@ (800cb84 <floor+0xe4>)
 800cb3c:	4b12      	ldr	r3, [pc, #72]	@ (800cb88 <floor+0xe8>)
 800cb3e:	f7f3 ffa9 	bl	8000a94 <__aeabi_dadd>
 800cb42:	2200      	movs	r2, #0
 800cb44:	2300      	movs	r3, #0
 800cb46:	f7f3 fc97 	bl	8000478 <__aeabi_dcmpgt>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d0c6      	beq.n	800cadc <floor+0x3c>
 800cb4e:	2c00      	cmp	r4, #0
 800cb50:	da02      	bge.n	800cb58 <floor+0xb8>
 800cb52:	2e14      	cmp	r6, #20
 800cb54:	d102      	bne.n	800cb5c <floor+0xbc>
 800cb56:	3401      	adds	r4, #1
 800cb58:	43bd      	bics	r5, r7
 800cb5a:	e7bf      	b.n	800cadc <floor+0x3c>
 800cb5c:	2234      	movs	r2, #52	@ 0x34
 800cb5e:	2301      	movs	r3, #1
 800cb60:	1b92      	subs	r2, r2, r6
 800cb62:	4093      	lsls	r3, r2
 800cb64:	18ed      	adds	r5, r5, r3
 800cb66:	9b01      	ldr	r3, [sp, #4]
 800cb68:	429d      	cmp	r5, r3
 800cb6a:	419b      	sbcs	r3, r3
 800cb6c:	425b      	negs	r3, r3
 800cb6e:	18e4      	adds	r4, r4, r3
 800cb70:	e7f2      	b.n	800cb58 <floor+0xb8>
 800cb72:	2500      	movs	r5, #0
 800cb74:	002c      	movs	r4, r5
 800cb76:	e7b1      	b.n	800cadc <floor+0x3c>
 800cb78:	2500      	movs	r5, #0
 800cb7a:	4c06      	ldr	r4, [pc, #24]	@ (800cb94 <floor+0xf4>)
 800cb7c:	e7ae      	b.n	800cadc <floor+0x3c>
 800cb7e:	46c0      	nop			@ (mov r8, r8)
 800cb80:	fffffc01 	.word	0xfffffc01
 800cb84:	8800759c 	.word	0x8800759c
 800cb88:	7e37e43c 	.word	0x7e37e43c
 800cb8c:	000fffff 	.word	0x000fffff
 800cb90:	fffffbed 	.word	0xfffffbed
 800cb94:	bff00000 	.word	0xbff00000

0800cb98 <_init>:
 800cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9a:	46c0      	nop			@ (mov r8, r8)
 800cb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9e:	bc08      	pop	{r3}
 800cba0:	469e      	mov	lr, r3
 800cba2:	4770      	bx	lr

0800cba4 <_fini>:
 800cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba6:	46c0      	nop			@ (mov r8, r8)
 800cba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbaa:	bc08      	pop	{r3}
 800cbac:	469e      	mov	lr, r3
 800cbae:	4770      	bx	lr
