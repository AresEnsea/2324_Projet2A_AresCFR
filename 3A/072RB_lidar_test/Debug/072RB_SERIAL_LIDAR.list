
072RB_SERIAL_LIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b64  08003b64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b64  08003b64  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b64  08003b64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000000c  08003b78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08003b78  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009905  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d80  00000000  00000000  0002997c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c9  00000000  00000000  0002bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000195be  00000000  00000000  0002c469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bcb2  00000000  00000000  00045a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090524  00000000  00000000  000516d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018a0  00000000  00000000  000e1c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e34a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b14 	.word	0x08003b14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003b14 	.word	0x08003b14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_DMA_Init+0x38>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <MX_DMA_Init+0x38>)
 800022c:	2101      	movs	r1, #1
 800022e:	430a      	orrs	r2, r1
 8000230:	615a      	str	r2, [r3, #20]
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_DMA_Init+0x38>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	2201      	movs	r2, #1
 8000238:	4013      	ands	r3, r2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800023e:	2200      	movs	r2, #0
 8000240:	2100      	movs	r1, #0
 8000242:	200a      	movs	r0, #10
 8000244:	f000 fc2a 	bl	8000a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fc3c 	bl	8000ac6 <HAL_NVIC_EnableIRQ>

}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	40021000 	.word	0x40021000

0800025c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b089      	sub	sp, #36	; 0x24
 8000260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	240c      	movs	r4, #12
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2314      	movs	r3, #20
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f003 fc25 	bl	8003abc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000272:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <MX_GPIO_Init+0xcc>)
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	4b2c      	ldr	r3, [pc, #176]	; (8000328 <MX_GPIO_Init+0xcc>)
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	0309      	lsls	r1, r1, #12
 800027c:	430a      	orrs	r2, r1
 800027e:	615a      	str	r2, [r3, #20]
 8000280:	4b29      	ldr	r3, [pc, #164]	; (8000328 <MX_GPIO_Init+0xcc>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	031b      	lsls	r3, r3, #12
 8000288:	4013      	ands	r3, r2
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800028e:	4b26      	ldr	r3, [pc, #152]	; (8000328 <MX_GPIO_Init+0xcc>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	4b25      	ldr	r3, [pc, #148]	; (8000328 <MX_GPIO_Init+0xcc>)
 8000294:	2180      	movs	r1, #128	; 0x80
 8000296:	03c9      	lsls	r1, r1, #15
 8000298:	430a      	orrs	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
 800029c:	4b22      	ldr	r3, [pc, #136]	; (8000328 <MX_GPIO_Init+0xcc>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	03db      	lsls	r3, r3, #15
 80002a4:	4013      	ands	r3, r2
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002aa:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <MX_GPIO_Init+0xcc>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <MX_GPIO_Init+0xcc>)
 80002b0:	2180      	movs	r1, #128	; 0x80
 80002b2:	0289      	lsls	r1, r1, #10
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <MX_GPIO_Init+0xcc>)
 80002ba:	695a      	ldr	r2, [r3, #20]
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	029b      	lsls	r3, r3, #10
 80002c0:	4013      	ands	r3, r2
 80002c2:	603b      	str	r3, [r7, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002c6:	2390      	movs	r3, #144	; 0x90
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	2200      	movs	r2, #0
 80002cc:	2120      	movs	r1, #32
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 ffa4 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	0192      	lsls	r2, r2, #6
 80002da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2284      	movs	r2, #132	; 0x84
 80002e0:	0392      	lsls	r2, r2, #14
 80002e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	4a0f      	ldr	r2, [pc, #60]	; (800032c <MX_GPIO_Init+0xd0>)
 80002ee:	0019      	movs	r1, r3
 80002f0:	0010      	movs	r0, r2
 80002f2:	f000 fe1b 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002f6:	0021      	movs	r1, r4
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2220      	movs	r2, #32
 80002fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2201      	movs	r2, #1
 8000302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000310:	187a      	adds	r2, r7, r1
 8000312:	2390      	movs	r3, #144	; 0x90
 8000314:	05db      	lsls	r3, r3, #23
 8000316:	0011      	movs	r1, r2
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fe07 	bl	8000f2c <HAL_GPIO_Init>

}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b009      	add	sp, #36	; 0x24
 8000324:	bd90      	pop	{r4, r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	40021000 	.word	0x40021000
 800032c:	48000800 	.word	0x48000800

08000330 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a08      	ldr	r2, [pc, #32]	; (8000360 <HAL_UART_RxCpltCallback+0x30>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d109      	bne.n	8000356 <HAL_UART_RxCpltCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000342:	2390      	movs	r3, #144	; 0x90
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	2120      	movs	r1, #32
 8000348:	0018      	movs	r0, r3
 800034a:	f000 ff84 	bl	8001256 <HAL_GPIO_TogglePin>
		ares_lidar_dma_irq_handler(&lidar);
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HAL_UART_RxCpltCallback+0x34>)
 8000350:	0018      	movs	r0, r3
 8000352:	f003 fa65 	bl	8003820 <ares_lidar_dma_irq_handler>
	}
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b002      	add	sp, #8
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	40013800 	.word	0x40013800
 8000364:	20000028 	.word	0x20000028

08000368 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a08      	ldr	r2, [pc, #32]	; (8000398 <HAL_UART_RxHalfCpltCallback+0x30>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d109      	bne.n	800038e <HAL_UART_RxHalfCpltCallback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800037a:	2390      	movs	r3, #144	; 0x90
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	2120      	movs	r1, #32
 8000380:	0018      	movs	r0, r3
 8000382:	f000 ff68 	bl	8001256 <HAL_GPIO_TogglePin>
		ares_lidar_dma_irq_handler(&lidar);
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <HAL_UART_RxHalfCpltCallback+0x34>)
 8000388:	0018      	movs	r0, r3
 800038a:	f003 fa49 	bl	8003820 <ares_lidar_dma_irq_handler>
	}
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b002      	add	sp, #8
 8000394:	bd80      	pop	{r7, pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	40013800 	.word	0x40013800
 800039c:	20000028 	.word	0x20000028

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a6:	f000 fa69 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003aa:	f000 f859 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ae:	f7ff ff55 	bl	800025c <MX_GPIO_Init>
  MX_DMA_Init();
 80003b2:	f7ff ff35 	bl	8000220 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003b6:	f000 f945 	bl	8000644 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003ba:	f000 f913 	bl	80005e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, lidar.rx_storage, LIDAR_FRAME_SIZE<<1);
 80003be:	4924      	ldr	r1, [pc, #144]	; (8000450 <main+0xb0>)
 80003c0:	4b24      	ldr	r3, [pc, #144]	; (8000454 <main+0xb4>)
 80003c2:	22e4      	movs	r2, #228	; 0xe4
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fe9c 	bl	8002102 <HAL_UART_Receive_DMA>
  uint8_t rx_pc = 0;
 80003ca:	2123      	movs	r1, #35	; 0x23
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, &rx_pc, 1);
 80003d2:	1879      	adds	r1, r7, r1
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <main+0xb8>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 fe3b 	bl	8002054 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t string_display[STRING_SIZE];
	  if(rx_pc == 0xAA){
 80003de:	2323      	movs	r3, #35	; 0x23
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2baa      	cmp	r3, #170	; 0xaa
 80003e6:	d1fa      	bne.n	80003de <main+0x3e>
		  for(int i=0;i<32;i++){
 80003e8:	2300      	movs	r3, #0
 80003ea:	627b      	str	r3, [r7, #36]	; 0x24
 80003ec:	e025      	b.n	800043a <main+0x9a>
			  if(i%2 == 0){
 80003ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f0:	2201      	movs	r2, #1
 80003f2:	4013      	ands	r3, r2
 80003f4:	d110      	bne.n	8000418 <main+0x78>
				  string_display[i] = (lidar.measure[i>>1][1])>>8;
 80003f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	4a18      	ldr	r2, [pc, #96]	; (800045c <main+0xbc>)
 80003fc:	21ea      	movs	r1, #234	; 0xea
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	18d3      	adds	r3, r2, r3
 8000402:	185b      	adds	r3, r3, r1
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	0a1b      	lsrs	r3, r3, #8
 8000408:	b29b      	uxth	r3, r3
 800040a:	b2d9      	uxtb	r1, r3
 800040c:	003a      	movs	r2, r7
 800040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000410:	18d3      	adds	r3, r2, r3
 8000412:	1c0a      	adds	r2, r1, #0
 8000414:	701a      	strb	r2, [r3, #0]
 8000416:	e00d      	b.n	8000434 <main+0x94>
			  }else{
				  string_display[i] = (lidar.measure[i>>1][1]) & 0x00FF;
 8000418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800041a:	105b      	asrs	r3, r3, #1
 800041c:	4a0f      	ldr	r2, [pc, #60]	; (800045c <main+0xbc>)
 800041e:	21ea      	movs	r1, #234	; 0xea
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	18d3      	adds	r3, r2, r3
 8000424:	185b      	adds	r3, r3, r1
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	b2d9      	uxtb	r1, r3
 800042a:	003a      	movs	r2, r7
 800042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800042e:	18d3      	adds	r3, r2, r3
 8000430:	1c0a      	adds	r2, r1, #0
 8000432:	701a      	strb	r2, [r3, #0]
		  for(int i=0;i<32;i++){
 8000434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000436:	3301      	adds	r3, #1
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
 800043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800043c:	2b1f      	cmp	r3, #31
 800043e:	ddd6      	ble.n	80003ee <main+0x4e>
			  }
		  }
		  HAL_UART_Transmit(&huart2,string_display, STRING_SIZE, HAL_MAX_DELAY);
 8000440:	2301      	movs	r3, #1
 8000442:	425b      	negs	r3, r3
 8000444:	0039      	movs	r1, r7
 8000446:	4804      	ldr	r0, [pc, #16]	; (8000458 <main+0xb8>)
 8000448:	2220      	movs	r2, #32
 800044a:	f001 fd63 	bl	8001f14 <HAL_UART_Transmit>
  {
 800044e:	e7c6      	b.n	80003de <main+0x3e>
 8000450:	2000002c 	.word	0x2000002c
 8000454:	20000150 	.word	0x20000150
 8000458:	200001d8 	.word	0x200001d8
 800045c:	20000028 	.word	0x20000028

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b099      	sub	sp, #100	; 0x64
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	242c      	movs	r4, #44	; 0x2c
 8000468:	193b      	adds	r3, r7, r4
 800046a:	0018      	movs	r0, r3
 800046c:	2334      	movs	r3, #52	; 0x34
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f003 fb23 	bl	8003abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000476:	231c      	movs	r3, #28
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	0018      	movs	r0, r3
 800047c:	2310      	movs	r3, #16
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f003 fb1b 	bl	8003abc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000486:	003b      	movs	r3, r7
 8000488:	0018      	movs	r0, r3
 800048a:	231c      	movs	r3, #28
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f003 fb14 	bl	8003abc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2220      	movs	r2, #32
 8000498:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2201      	movs	r2, #1
 800049e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 feef 	bl	800128c <HAL_RCC_OscConfig>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004b2:	f000 f82b 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	211c      	movs	r1, #28
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2207      	movs	r2, #7
 80004bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2203      	movs	r2, #3
 80004c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2101      	movs	r1, #1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fa5f 	bl	8001998 <HAL_RCC_ClockConfig>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004de:	f000 f815 	bl	800050c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80004e2:	003b      	movs	r3, r7
 80004e4:	2203      	movs	r2, #3
 80004e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004e8:	003b      	movs	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004ee:	003b      	movs	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f4:	003b      	movs	r3, r7
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 fbba 	bl	8001c70 <HAL_RCCEx_PeriphCLKConfig>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000500:	f000 f804 	bl	800050c <Error_Handler>
  }
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b019      	add	sp, #100	; 0x64
 800050a:	bd90      	pop	{r4, r7, pc}

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>
	...

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_MspInit+0x44>)
 8000520:	699a      	ldr	r2, [r3, #24]
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_MspInit+0x44>)
 8000524:	2101      	movs	r1, #1
 8000526:	430a      	orrs	r2, r1
 8000528:	619a      	str	r2, [r3, #24]
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HAL_MspInit+0x44>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	2201      	movs	r2, #1
 8000530:	4013      	ands	r3, r2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_MspInit+0x44>)
 8000538:	69da      	ldr	r2, [r3, #28]
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_MspInit+0x44>)
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	0549      	lsls	r1, r1, #21
 8000540:	430a      	orrs	r2, r1
 8000542:	61da      	str	r2, [r3, #28]
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_MspInit+0x44>)
 8000546:	69da      	ldr	r2, [r3, #28]
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	055b      	lsls	r3, r3, #21
 800054c:	4013      	ands	r3, r2
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b002      	add	sp, #8
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40021000 	.word	0x40021000

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <NMI_Handler+0x4>

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0x4>

0800056c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000584:	f000 f9c2 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fbdd 	bl	8000d56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	20000260 	.word	0x20000260

080005a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <USART1_IRQHandler+0x14>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fdfe 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	20000150 	.word	0x20000150

080005c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <USART2_IRQHandler+0x14>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fdf2 	bl	80021b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	200001d8 	.word	0x200001d8

080005d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <MX_USART1_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005f0:	22e1      	movs	r2, #225	; 0xe1
 80005f2:	0252      	lsls	r2, r2, #9
 80005f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_USART1_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART1_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART1_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <MX_USART1_UART_Init+0x58>)
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fc1f 	bl	8001e6c <HAL_UART_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f7ff ff6b 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000150 	.word	0x20000150
 8000640:	40013800 	.word	0x40013800

08000644 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART2_UART_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_USART2_UART_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000650:	22e1      	movs	r2, #225	; 0xe1
 8000652:	0252      	lsls	r2, r2, #9
 8000654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x58>)
 8000688:	0018      	movs	r0, r3
 800068a:	f001 fbef 	bl	8001e6c <HAL_UART_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f7ff ff3b 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200001d8 	.word	0x200001d8
 80006a0:	40004400 	.word	0x40004400

080006a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b08d      	sub	sp, #52	; 0x34
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	241c      	movs	r4, #28
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	0018      	movs	r0, r3
 80006b2:	2314      	movs	r3, #20
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f003 fa00 	bl	8003abc <memset>
  if(uartHandle->Instance==USART1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a54      	ldr	r2, [pc, #336]	; (8000814 <HAL_UART_MspInit+0x170>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d162      	bne.n	800078c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006c6:	4b54      	ldr	r3, [pc, #336]	; (8000818 <HAL_UART_MspInit+0x174>)
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	4b53      	ldr	r3, [pc, #332]	; (8000818 <HAL_UART_MspInit+0x174>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	01c9      	lsls	r1, r1, #7
 80006d0:	430a      	orrs	r2, r1
 80006d2:	619a      	str	r2, [r3, #24]
 80006d4:	4b50      	ldr	r3, [pc, #320]	; (8000818 <HAL_UART_MspInit+0x174>)
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	01db      	lsls	r3, r3, #7
 80006dc:	4013      	ands	r3, r2
 80006de:	61bb      	str	r3, [r7, #24]
 80006e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <HAL_UART_MspInit+0x174>)
 80006e4:	695a      	ldr	r2, [r3, #20]
 80006e6:	4b4c      	ldr	r3, [pc, #304]	; (8000818 <HAL_UART_MspInit+0x174>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	0289      	lsls	r1, r1, #10
 80006ec:	430a      	orrs	r2, r1
 80006ee:	615a      	str	r2, [r3, #20]
 80006f0:	4b49      	ldr	r3, [pc, #292]	; (8000818 <HAL_UART_MspInit+0x174>)
 80006f2:	695a      	ldr	r2, [r3, #20]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	029b      	lsls	r3, r3, #10
 80006f8:	4013      	ands	r3, r2
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDAR_TX_Pin|LIDAR_RX_Pin;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	22c0      	movs	r2, #192	; 0xc0
 8000702:	00d2      	lsls	r2, r2, #3
 8000704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	0021      	movs	r1, r4
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2202      	movs	r2, #2
 800070c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2203      	movs	r2, #3
 8000718:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2201      	movs	r2, #1
 800071e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	187a      	adds	r2, r7, r1
 8000722:	2390      	movs	r3, #144	; 0x90
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fbff 	bl	8000f2c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800072e:	4b3b      	ldr	r3, [pc, #236]	; (800081c <HAL_UART_MspInit+0x178>)
 8000730:	4a3b      	ldr	r2, [pc, #236]	; (8000820 <HAL_UART_MspInit+0x17c>)
 8000732:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000734:	4b39      	ldr	r3, [pc, #228]	; (800081c <HAL_UART_MspInit+0x178>)
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800073a:	4b38      	ldr	r3, [pc, #224]	; (800081c <HAL_UART_MspInit+0x178>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000740:	4b36      	ldr	r3, [pc, #216]	; (800081c <HAL_UART_MspInit+0x178>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <HAL_UART_MspInit+0x178>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800074c:	4b33      	ldr	r3, [pc, #204]	; (800081c <HAL_UART_MspInit+0x178>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <HAL_UART_MspInit+0x178>)
 8000754:	2220      	movs	r2, #32
 8000756:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000758:	4b30      	ldr	r3, [pc, #192]	; (800081c <HAL_UART_MspInit+0x178>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <HAL_UART_MspInit+0x178>)
 8000760:	0018      	movs	r0, r3
 8000762:	f000 f9cd 	bl	8000b00 <HAL_DMA_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800076a:	f7ff fecf 	bl	800050c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a2a      	ldr	r2, [pc, #168]	; (800081c <HAL_UART_MspInit+0x178>)
 8000772:	675a      	str	r2, [r3, #116]	; 0x74
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <HAL_UART_MspInit+0x178>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	201b      	movs	r0, #27
 8000780:	f000 f98c 	bl	8000a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000784:	201b      	movs	r0, #27
 8000786:	f000 f99e 	bl	8000ac6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800078a:	e03f      	b.n	800080c <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==USART2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a24      	ldr	r2, [pc, #144]	; (8000824 <HAL_UART_MspInit+0x180>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d13a      	bne.n	800080c <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <HAL_UART_MspInit+0x174>)
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_UART_MspInit+0x174>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0289      	lsls	r1, r1, #10
 80007a0:	430a      	orrs	r2, r1
 80007a2:	61da      	str	r2, [r3, #28]
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_UART_MspInit+0x174>)
 80007a6:	69da      	ldr	r2, [r3, #28]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	029b      	lsls	r3, r3, #10
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_UART_MspInit+0x174>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_UART_MspInit+0x174>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0289      	lsls	r1, r1, #10
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_UART_MspInit+0x174>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	029b      	lsls	r3, r3, #10
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007ce:	211c      	movs	r1, #28
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	220c      	movs	r2, #12
 80007d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2202      	movs	r2, #2
 80007da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2201      	movs	r2, #1
 80007ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	187a      	adds	r2, r7, r1
 80007f0:	2390      	movs	r3, #144	; 0x90
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fb98 	bl	8000f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	201c      	movs	r0, #28
 8000802:	f000 f94b 	bl	8000a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000806:	201c      	movs	r0, #28
 8000808:	f000 f95d 	bl	8000ac6 <HAL_NVIC_EnableIRQ>
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b00d      	add	sp, #52	; 0x34
 8000812:	bd90      	pop	{r4, r7, pc}
 8000814:	40013800 	.word	0x40013800
 8000818:	40021000 	.word	0x40021000
 800081c:	20000260 	.word	0x20000260
 8000820:	40020030 	.word	0x40020030
 8000824:	40004400 	.word	0x40004400

08000828 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800082a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800082c:	f7ff fed4 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000856:	f003 f939 	bl	8003acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085a:	f7ff fda1 	bl	80003a0 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   r0, =_estack
 8000860:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800086c:	08003b6c 	.word	0x08003b6c
  ldr r2, =_sbss
 8000870:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000874:	200002ac 	.word	0x200002ac

08000878 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_COMP_IRQHandler>
	...

0800087c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <HAL_Init+0x24>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_Init+0x24>)
 8000886:	2110      	movs	r1, #16
 8000888:	430a      	orrs	r2, r1
 800088a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800088c:	2000      	movs	r0, #0
 800088e:	f000 f809 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000892:	f7ff fe41 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <HAL_InitTick+0x5c>)
 80008ae:	681c      	ldr	r4, [r3, #0]
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_InitTick+0x60>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	0019      	movs	r1, r3
 80008b6:	23fa      	movs	r3, #250	; 0xfa
 80008b8:	0098      	lsls	r0, r3, #2
 80008ba:	f7ff fc25 	bl	8000108 <__udivsi3>
 80008be:	0003      	movs	r3, r0
 80008c0:	0019      	movs	r1, r3
 80008c2:	0020      	movs	r0, r4
 80008c4:	f7ff fc20 	bl	8000108 <__udivsi3>
 80008c8:	0003      	movs	r3, r0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 f90b 	bl	8000ae6 <HAL_SYSTICK_Config>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e00f      	b.n	80008f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d80b      	bhi.n	80008f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	2301      	movs	r3, #1
 80008e2:	425b      	negs	r3, r3
 80008e4:	2200      	movs	r2, #0
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 f8d8 	bl	8000a9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_InitTick+0x64>)
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b003      	add	sp, #12
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x1c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	001a      	movs	r2, r3
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x20>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	18d2      	adds	r2, r2, r3
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <HAL_IncTick+0x20>)
 800091e:	601a      	str	r2, [r3, #0]
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	20000008 	.word	0x20000008
 800092c:	200002a4 	.word	0x200002a4

08000930 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <HAL_GetTick+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	200002a4 	.word	0x200002a4

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	0002      	movs	r2, r0
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b7f      	cmp	r3, #127	; 0x7f
 8000956:	d809      	bhi.n	800096c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	001a      	movs	r2, r3
 800095e:	231f      	movs	r3, #31
 8000960:	401a      	ands	r2, r3
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <__NVIC_EnableIRQ+0x30>)
 8000964:	2101      	movs	r1, #1
 8000966:	4091      	lsls	r1, r2
 8000968:	000a      	movs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]
  }
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	e000e100 	.word	0xe000e100

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	0002      	movs	r2, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b7f      	cmp	r3, #127	; 0x7f
 800098c:	d828      	bhi.n	80009e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098e:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <__NVIC_SetPriority+0xd4>)
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b25b      	sxtb	r3, r3
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	33c0      	adds	r3, #192	; 0xc0
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	589b      	ldr	r3, [r3, r2]
 800099e:	1dfa      	adds	r2, r7, #7
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	0011      	movs	r1, r2
 80009a4:	2203      	movs	r2, #3
 80009a6:	400a      	ands	r2, r1
 80009a8:	00d2      	lsls	r2, r2, #3
 80009aa:	21ff      	movs	r1, #255	; 0xff
 80009ac:	4091      	lsls	r1, r2
 80009ae:	000a      	movs	r2, r1
 80009b0:	43d2      	mvns	r2, r2
 80009b2:	401a      	ands	r2, r3
 80009b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	401a      	ands	r2, r3
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0018      	movs	r0, r3
 80009c4:	2303      	movs	r3, #3
 80009c6:	4003      	ands	r3, r0
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <__NVIC_SetPriority+0xd4>)
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	430a      	orrs	r2, r1
 80009d8:	33c0      	adds	r3, #192	; 0xc0
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009de:	e031      	b.n	8000a44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <__NVIC_SetPriority+0xd8>)
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	0019      	movs	r1, r3
 80009e8:	230f      	movs	r3, #15
 80009ea:	400b      	ands	r3, r1
 80009ec:	3b08      	subs	r3, #8
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3306      	adds	r3, #6
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	18d3      	adds	r3, r2, r3
 80009f6:	3304      	adds	r3, #4
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	1dfa      	adds	r2, r7, #7
 80009fc:	7812      	ldrb	r2, [r2, #0]
 80009fe:	0011      	movs	r1, r2
 8000a00:	2203      	movs	r2, #3
 8000a02:	400a      	ands	r2, r1
 8000a04:	00d2      	lsls	r2, r2, #3
 8000a06:	21ff      	movs	r1, #255	; 0xff
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	000a      	movs	r2, r1
 8000a0c:	43d2      	mvns	r2, r2
 8000a0e:	401a      	ands	r2, r3
 8000a10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	019b      	lsls	r3, r3, #6
 8000a16:	22ff      	movs	r2, #255	; 0xff
 8000a18:	401a      	ands	r2, r3
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2303      	movs	r3, #3
 8000a22:	4003      	ands	r3, r0
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <__NVIC_SetPriority+0xd8>)
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	001c      	movs	r4, r3
 8000a30:	230f      	movs	r3, #15
 8000a32:	4023      	ands	r3, r4
 8000a34:	3b08      	subs	r3, #8
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	3306      	adds	r3, #6
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	18c3      	adds	r3, r0, r3
 8000a40:	3304      	adds	r3, #4
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b003      	add	sp, #12
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	045b      	lsls	r3, r3, #17
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d301      	bcc.n	8000a6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e010      	b.n	8000a8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <SysTick_Config+0x44>)
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	3a01      	subs	r2, #1
 8000a72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a74:	2301      	movs	r3, #1
 8000a76:	425b      	negs	r3, r3
 8000a78:	2103      	movs	r1, #3
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff ff7c 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <SysTick_Config+0x44>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SysTick_Config+0x44>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	0018      	movs	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	1c02      	adds	r2, r0, #0
 8000aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff5d 	bl	8000978 <__NVIC_SetPriority>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	0002      	movs	r2, r0
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff33 	bl	8000944 <__NVIC_EnableIRQ>
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ffaf 	bl	8000a54 <SysTick_Config>
 8000af6:	0003      	movs	r3, r0
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e036      	b.n	8000b84 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2221      	movs	r2, #33	; 0x21
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <HAL_DMA_Init+0x8c>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 f9c4 	bl	8000ef4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2221      	movs	r2, #33	; 0x21
 8000b76:	2101      	movs	r1, #1
 8000b78:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	2100      	movs	r1, #0
 8000b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	ffffc00f 	.word	0xffffc00f

08000b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b9e:	2317      	movs	r3, #23
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2220      	movs	r2, #32
 8000baa:	5c9b      	ldrb	r3, [r3, r2]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d101      	bne.n	8000bb4 <HAL_DMA_Start_IT+0x24>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e04f      	b.n	8000c54 <HAL_DMA_Start_IT+0xc4>
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	2101      	movs	r1, #1
 8000bba:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2221      	movs	r2, #33	; 0x21
 8000bc0:	5c9b      	ldrb	r3, [r3, r2]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d13a      	bne.n	8000c3e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2221      	movs	r2, #33	; 0x21
 8000bcc:	2102      	movs	r1, #2
 8000bce:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2101      	movs	r1, #1
 8000be2:	438a      	bics	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f000 f954 	bl	8000e9a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d008      	beq.n	8000c0c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	210e      	movs	r1, #14
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e00f      	b.n	8000c2c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	210a      	movs	r1, #10
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2104      	movs	r1, #4
 8000c28:	438a      	bics	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2101      	movs	r1, #1
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	e007      	b.n	8000c4e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2220      	movs	r2, #32
 8000c42:	2100      	movs	r1, #0
 8000c44:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c46:	2317      	movs	r3, #23
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000c4e:	2317      	movs	r3, #23
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	781b      	ldrb	r3, [r3, #0]
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b006      	add	sp, #24
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2221      	movs	r2, #33	; 0x21
 8000c68:	5c9b      	ldrb	r3, [r3, r2]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d008      	beq.n	8000c82 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2204      	movs	r2, #4
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2220      	movs	r2, #32
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e020      	b.n	8000cc4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	210e      	movs	r1, #14
 8000c8e:	438a      	bics	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000caa:	2101      	movs	r1, #1
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2221      	movs	r2, #33	; 0x21
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2221      	movs	r2, #33	; 0x21
 8000ce0:	5c9b      	ldrb	r3, [r3, r2]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d006      	beq.n	8000cf6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2204      	movs	r2, #4
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	e028      	b.n	8000d48 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	210e      	movs	r1, #14
 8000d02:	438a      	bics	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	438a      	bics	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4091      	lsls	r1, r2
 8000d22:	000a      	movs	r2, r1
 8000d24:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2221      	movs	r2, #33	; 0x21
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2220      	movs	r2, #32
 8000d32:	2100      	movs	r1, #0
 8000d34:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	0010      	movs	r0, r2
 8000d46:	4798      	blx	r3
    }
  }
  return status;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	781b      	ldrb	r3, [r3, #0]
}
 8000d4e:	0018      	movs	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b084      	sub	sp, #16
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	2204      	movs	r2, #4
 8000d74:	409a      	lsls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d024      	beq.n	8000dc8 <HAL_DMA_IRQHandler+0x72>
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2204      	movs	r2, #4
 8000d82:	4013      	ands	r3, r2
 8000d84:	d020      	beq.n	8000dc8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d107      	bne.n	8000da2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	438a      	bics	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000daa:	2104      	movs	r1, #4
 8000dac:	4091      	lsls	r1, r2
 8000dae:	000a      	movs	r2, r1
 8000db0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d100      	bne.n	8000dbc <HAL_DMA_IRQHandler+0x66>
 8000dba:	e06a      	b.n	8000e92 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	0010      	movs	r0, r2
 8000dc4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000dc6:	e064      	b.n	8000e92 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	2202      	movs	r2, #2
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d02b      	beq.n	8000e30 <HAL_DMA_IRQHandler+0xda>
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	2202      	movs	r2, #2
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d027      	beq.n	8000e30 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2220      	movs	r2, #32
 8000de8:	4013      	ands	r3, r2
 8000dea:	d10b      	bne.n	8000e04 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	210a      	movs	r1, #10
 8000df8:	438a      	bics	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2221      	movs	r2, #33	; 0x21
 8000e00:	2101      	movs	r1, #1
 8000e02:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	000a      	movs	r2, r1
 8000e12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2220      	movs	r2, #32
 8000e18:	2100      	movs	r1, #0
 8000e1a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d036      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	0010      	movs	r0, r2
 8000e2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000e2e:	e030      	b.n	8000e92 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	2208      	movs	r2, #8
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d028      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x13c>
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2208      	movs	r2, #8
 8000e44:	4013      	ands	r3, r2
 8000e46:	d024      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	210e      	movs	r1, #14
 8000e54:	438a      	bics	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e60:	2101      	movs	r1, #1
 8000e62:	4091      	lsls	r1, r2
 8000e64:	000a      	movs	r2, r1
 8000e66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2221      	movs	r2, #33	; 0x21
 8000e72:	2101      	movs	r1, #1
 8000e74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2220      	movs	r2, #32
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	4798      	blx	r3
    }
  }
}
 8000e90:	e7ff      	b.n	8000e92 <HAL_DMA_IRQHandler+0x13c>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b004      	add	sp, #16
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4091      	lsls	r1, r2
 8000eb4:	000a      	movs	r2, r1
 8000eb6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b10      	cmp	r3, #16
 8000ec6:	d108      	bne.n	8000eda <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ed8:	e007      	b.n	8000eea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	60da      	str	r2, [r3, #12]
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <DMA_CalcBaseAndBitshift+0x30>)
 8000f02:	4694      	mov	ip, r2
 8000f04:	4463      	add	r3, ip
 8000f06:	2114      	movs	r1, #20
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff f8fd 	bl	8000108 <__udivsi3>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	009a      	lsls	r2, r3, #2
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a03      	ldr	r2, [pc, #12]	; (8000f28 <DMA_CalcBaseAndBitshift+0x34>)
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	bffdfff8 	.word	0xbffdfff8
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e155      	b.n	80011e8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4091      	lsls	r1, r2
 8000f46:	000a      	movs	r2, r1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0x28>
 8000f52:	e146      	b.n	80011e2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2203      	movs	r2, #3
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d005      	beq.n	8000f6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	2201      	movs	r2, #1
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d017      	beq.n	800100a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2203      	movs	r2, #3
 8001010:	4013      	ands	r3, r2
 8001012:	2b02      	cmp	r3, #2
 8001014:	d123      	bne.n	800105e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	58d3      	ldr	r3, [r2, r3]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2207      	movs	r2, #7
 8001028:	4013      	ands	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2107      	movs	r1, #7
 8001042:	400b      	ands	r3, r1
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	6939      	ldr	r1, [r7, #16]
 800105c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	43da      	mvns	r2, r3
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2203      	movs	r2, #3
 800107c:	401a      	ands	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	029b      	lsls	r3, r3, #10
 800109a:	4013      	ands	r3, r2
 800109c:	d100      	bne.n	80010a0 <HAL_GPIO_Init+0x174>
 800109e:	e0a0      	b.n	80011e2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a0:	4b57      	ldr	r3, [pc, #348]	; (8001200 <HAL_GPIO_Init+0x2d4>)
 80010a2:	699a      	ldr	r2, [r3, #24]
 80010a4:	4b56      	ldr	r3, [pc, #344]	; (8001200 <HAL_GPIO_Init+0x2d4>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	430a      	orrs	r2, r1
 80010aa:	619a      	str	r2, [r3, #24]
 80010ac:	4b54      	ldr	r3, [pc, #336]	; (8001200 <HAL_GPIO_Init+0x2d4>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4013      	ands	r3, r2
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_GPIO_Init+0x2d8>)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	589b      	ldr	r3, [r3, r2]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	409a      	lsls	r2, r3
 80010d2:	0013      	movs	r3, r2
 80010d4:	43da      	mvns	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	2390      	movs	r3, #144	; 0x90
 80010e0:	05db      	lsls	r3, r3, #23
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x1ee>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a47      	ldr	r2, [pc, #284]	; (8001208 <HAL_GPIO_Init+0x2dc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x1ea>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a46      	ldr	r2, [pc, #280]	; (800120c <HAL_GPIO_Init+0x2e0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x1e6>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a45      	ldr	r2, [pc, #276]	; (8001210 <HAL_GPIO_Init+0x2e4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x1e2>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a44      	ldr	r2, [pc, #272]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x1de>
 8001106:	2304      	movs	r3, #4
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x1f0>
 800110a:	2305      	movs	r3, #5
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x1f0>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x1f0>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x1f0>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x1f0>
 800111a:	2300      	movs	r3, #0
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	2103      	movs	r1, #3
 8001120:	400a      	ands	r2, r1
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800112c:	4935      	ldr	r1, [pc, #212]	; (8001204 <HAL_GPIO_Init+0x2d8>)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	035b      	lsls	r3, r3, #13
 8001152:	4013      	ands	r3, r2
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43da      	mvns	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	039b      	lsls	r3, r3, #14
 800117c:	4013      	ands	r3, r2
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	029b      	lsls	r3, r3, #10
 80011a6:	4013      	ands	r3, r2
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43da      	mvns	r2, r3
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	025b      	lsls	r3, r3, #9
 80011d0:	4013      	ands	r3, r2
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	40da      	lsrs	r2, r3
 80011f0:	1e13      	subs	r3, r2, #0
 80011f2:	d000      	beq.n	80011f6 <HAL_GPIO_Init+0x2ca>
 80011f4:	e6a2      	b.n	8000f3c <HAL_GPIO_Init+0x10>
  } 
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b006      	add	sp, #24
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000
 8001208:	48000400 	.word	0x48000400
 800120c:	48000800 	.word	0x48000800
 8001210:	48000c00 	.word	0x48000c00
 8001214:	48001000 	.word	0x48001000
 8001218:	40010400 	.word	0x40010400

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	0008      	movs	r0, r1
 8001226:	0011      	movs	r1, r2
 8001228:	1cbb      	adds	r3, r7, #2
 800122a:	1c02      	adds	r2, r0, #0
 800122c:	801a      	strh	r2, [r3, #0]
 800122e:	1c7b      	adds	r3, r7, #1
 8001230:	1c0a      	adds	r2, r1, #0
 8001232:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001234:	1c7b      	adds	r3, r7, #1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800123c:	1cbb      	adds	r3, r7, #2
 800123e:	881a      	ldrh	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001244:	e003      	b.n	800124e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001246:	1cbb      	adds	r3, r7, #2
 8001248:	881a      	ldrh	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	000a      	movs	r2, r1
 8001260:	1cbb      	adds	r3, r7, #2
 8001262:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800126a:	1cbb      	adds	r3, r7, #2
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	041a      	lsls	r2, r3, #16
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	1cb9      	adds	r1, r7, #2
 800127a:	8809      	ldrh	r1, [r1, #0]
 800127c:	400b      	ands	r3, r1
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b004      	add	sp, #16
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	f000 fb76 	bl	800198c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4013      	ands	r3, r2
 80012a8:	d100      	bne.n	80012ac <HAL_RCC_OscConfig+0x20>
 80012aa:	e08e      	b.n	80013ca <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012ac:	4bc5      	ldr	r3, [pc, #788]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	220c      	movs	r2, #12
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d00e      	beq.n	80012d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b8:	4bc2      	ldr	r3, [pc, #776]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	220c      	movs	r2, #12
 80012be:	4013      	ands	r3, r2
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d117      	bne.n	80012f4 <HAL_RCC_OscConfig+0x68>
 80012c4:	4bbf      	ldr	r3, [pc, #764]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	23c0      	movs	r3, #192	; 0xc0
 80012ca:	025b      	lsls	r3, r3, #9
 80012cc:	401a      	ands	r2, r3
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	025b      	lsls	r3, r3, #9
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d10e      	bne.n	80012f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d6:	4bbb      	ldr	r3, [pc, #748]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4013      	ands	r3, r2
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x58>
 80012e2:	e071      	b.n	80013c8 <HAL_RCC_OscConfig+0x13c>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d000      	beq.n	80012ee <HAL_RCC_OscConfig+0x62>
 80012ec:	e06c      	b.n	80013c8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f000 fb4c 	bl	800198c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d107      	bne.n	800130c <HAL_RCC_OscConfig+0x80>
 80012fc:	4bb1      	ldr	r3, [pc, #708]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4bb0      	ldr	r3, [pc, #704]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	0249      	lsls	r1, r1, #9
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e02f      	b.n	800136c <HAL_RCC_OscConfig+0xe0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10c      	bne.n	800132e <HAL_RCC_OscConfig+0xa2>
 8001314:	4bab      	ldr	r3, [pc, #684]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4baa      	ldr	r3, [pc, #680]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800131a:	49ab      	ldr	r1, [pc, #684]	; (80015c8 <HAL_RCC_OscConfig+0x33c>)
 800131c:	400a      	ands	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	4ba8      	ldr	r3, [pc, #672]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4ba7      	ldr	r3, [pc, #668]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001326:	49a9      	ldr	r1, [pc, #676]	; (80015cc <HAL_RCC_OscConfig+0x340>)
 8001328:	400a      	ands	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e01e      	b.n	800136c <HAL_RCC_OscConfig+0xe0>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b05      	cmp	r3, #5
 8001334:	d10e      	bne.n	8001354 <HAL_RCC_OscConfig+0xc8>
 8001336:	4ba3      	ldr	r3, [pc, #652]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4ba2      	ldr	r3, [pc, #648]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	02c9      	lsls	r1, r1, #11
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	4b9f      	ldr	r3, [pc, #636]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b9e      	ldr	r3, [pc, #632]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	0249      	lsls	r1, r1, #9
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xe0>
 8001354:	4b9b      	ldr	r3, [pc, #620]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b9a      	ldr	r3, [pc, #616]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800135a:	499b      	ldr	r1, [pc, #620]	; (80015c8 <HAL_RCC_OscConfig+0x33c>)
 800135c:	400a      	ands	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	4b98      	ldr	r3, [pc, #608]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b97      	ldr	r3, [pc, #604]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001366:	4999      	ldr	r1, [pc, #612]	; (80015cc <HAL_RCC_OscConfig+0x340>)
 8001368:	400a      	ands	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d014      	beq.n	800139e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fadc 	bl	8000930 <HAL_GetTick>
 8001378:	0003      	movs	r3, r0
 800137a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137e:	f7ff fad7 	bl	8000930 <HAL_GetTick>
 8001382:	0002      	movs	r2, r0
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b64      	cmp	r3, #100	; 0x64
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e2fd      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001390:	4b8c      	ldr	r3, [pc, #560]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	029b      	lsls	r3, r3, #10
 8001398:	4013      	ands	r3, r2
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0xf2>
 800139c:	e015      	b.n	80013ca <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fac7 	bl	8000930 <HAL_GetTick>
 80013a2:	0003      	movs	r3, r0
 80013a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fac2 	bl	8000930 <HAL_GetTick>
 80013ac:	0002      	movs	r2, r0
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e2e8      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	029b      	lsls	r3, r3, #10
 80013c2:	4013      	ands	r3, r2
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x11c>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2202      	movs	r2, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	d100      	bne.n	80013d6 <HAL_RCC_OscConfig+0x14a>
 80013d4:	e06c      	b.n	80014b0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013d6:	4b7b      	ldr	r3, [pc, #492]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	220c      	movs	r2, #12
 80013dc:	4013      	ands	r3, r2
 80013de:	d00e      	beq.n	80013fe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013e0:	4b78      	ldr	r3, [pc, #480]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	220c      	movs	r2, #12
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d11f      	bne.n	800142c <HAL_RCC_OscConfig+0x1a0>
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	23c0      	movs	r3, #192	; 0xc0
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	401a      	ands	r2, r3
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b71      	ldr	r3, [pc, #452]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2202      	movs	r2, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x188>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d001      	beq.n	8001414 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e2bb      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	4b6b      	ldr	r3, [pc, #428]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	22f8      	movs	r2, #248	; 0xf8
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00da      	lsls	r2, r3, #3
 8001424:	4b67      	ldr	r3, [pc, #412]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e041      	b.n	80014b0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d024      	beq.n	800147e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b62      	ldr	r3, [pc, #392]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fa76 	bl	8000930 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fa71 	bl	8000930 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e297      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2202      	movs	r2, #2
 8001462:	4013      	ands	r3, r2
 8001464:	d0f1      	beq.n	800144a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001466:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	22f8      	movs	r2, #248	; 0xf8
 800146c:	4393      	bics	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	00da      	lsls	r2, r3, #3
 8001476:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e018      	b.n	80014b0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b51      	ldr	r3, [pc, #324]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001484:	2101      	movs	r1, #1
 8001486:	438a      	bics	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fa51 	bl	8000930 <HAL_GetTick>
 800148e:	0003      	movs	r3, r0
 8001490:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fa4c 	bl	8000930 <HAL_GetTick>
 8001498:	0002      	movs	r2, r0
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e272      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2202      	movs	r2, #2
 80014ac:	4013      	ands	r3, r2
 80014ae:	d1f1      	bne.n	8001494 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2208      	movs	r2, #8
 80014b6:	4013      	ands	r3, r2
 80014b8:	d036      	beq.n	8001528 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d019      	beq.n	80014f6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80014c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80014c8:	2101      	movs	r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fa2f 	bl	8000930 <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fa2a 	bl	8000930 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e250      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d0f1      	beq.n	80014d8 <HAL_RCC_OscConfig+0x24c>
 80014f4:	e018      	b.n	8001528 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80014f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014fa:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80014fc:	2101      	movs	r1, #1
 80014fe:	438a      	bics	r2, r1
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fa15 	bl	8000930 <HAL_GetTick>
 8001506:	0003      	movs	r3, r0
 8001508:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff fa10 	bl	8000930 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e236      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d1f1      	bne.n	800150c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2204      	movs	r2, #4
 800152e:	4013      	ands	r3, r2
 8001530:	d100      	bne.n	8001534 <HAL_RCC_OscConfig+0x2a8>
 8001532:	e0b5      	b.n	80016a0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001534:	201f      	movs	r0, #31
 8001536:	183b      	adds	r3, r7, r0
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800153e:	69da      	ldr	r2, [r3, #28]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	055b      	lsls	r3, r3, #21
 8001544:	4013      	ands	r3, r2
 8001546:	d110      	bne.n	800156a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800154a:	69da      	ldr	r2, [r3, #28]
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	0549      	lsls	r1, r1, #21
 8001552:	430a      	orrs	r2, r1
 8001554:	61da      	str	r2, [r3, #28]
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 8001558:	69da      	ldr	r2, [r3, #28]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	055b      	lsls	r3, r3, #21
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001564:	183b      	adds	r3, r7, r0
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_RCC_OscConfig+0x344>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4013      	ands	r3, r2
 8001574:	d11a      	bne.n	80015ac <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_RCC_OscConfig+0x344>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_RCC_OscConfig+0x344>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0049      	lsls	r1, r1, #1
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001584:	f7ff f9d4 	bl	8000930 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158e:	f7ff f9cf 	bl	8000930 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e1f5      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_OscConfig+0x344>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4013      	ands	r3, r2
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d10f      	bne.n	80015d4 <HAL_RCC_OscConfig+0x348>
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80015b6:	6a1a      	ldr	r2, [r3, #32]
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <HAL_RCC_OscConfig+0x338>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	430a      	orrs	r2, r1
 80015be:	621a      	str	r2, [r3, #32]
 80015c0:	e036      	b.n	8001630 <HAL_RCC_OscConfig+0x3a4>
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	40021000 	.word	0x40021000
 80015c8:	fffeffff 	.word	0xfffeffff
 80015cc:	fffbffff 	.word	0xfffbffff
 80015d0:	40007000 	.word	0x40007000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x36a>
 80015dc:	4bca      	ldr	r3, [pc, #808]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80015de:	6a1a      	ldr	r2, [r3, #32]
 80015e0:	4bc9      	ldr	r3, [pc, #804]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	438a      	bics	r2, r1
 80015e6:	621a      	str	r2, [r3, #32]
 80015e8:	4bc7      	ldr	r3, [pc, #796]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80015ea:	6a1a      	ldr	r2, [r3, #32]
 80015ec:	4bc6      	ldr	r3, [pc, #792]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80015ee:	2104      	movs	r1, #4
 80015f0:	438a      	bics	r2, r1
 80015f2:	621a      	str	r2, [r3, #32]
 80015f4:	e01c      	b.n	8001630 <HAL_RCC_OscConfig+0x3a4>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x38c>
 80015fe:	4bc2      	ldr	r3, [pc, #776]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001600:	6a1a      	ldr	r2, [r3, #32]
 8001602:	4bc1      	ldr	r3, [pc, #772]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001604:	2104      	movs	r1, #4
 8001606:	430a      	orrs	r2, r1
 8001608:	621a      	str	r2, [r3, #32]
 800160a:	4bbf      	ldr	r3, [pc, #764]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	4bbe      	ldr	r3, [pc, #760]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001610:	2101      	movs	r1, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	621a      	str	r2, [r3, #32]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0x3a4>
 8001618:	4bbb      	ldr	r3, [pc, #748]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800161a:	6a1a      	ldr	r2, [r3, #32]
 800161c:	4bba      	ldr	r3, [pc, #744]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800161e:	2101      	movs	r1, #1
 8001620:	438a      	bics	r2, r1
 8001622:	621a      	str	r2, [r3, #32]
 8001624:	4bb8      	ldr	r3, [pc, #736]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	4bb7      	ldr	r3, [pc, #732]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800162a:	2104      	movs	r1, #4
 800162c:	438a      	bics	r2, r1
 800162e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d014      	beq.n	8001662 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7ff f97a 	bl	8000930 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	e009      	b.n	8001656 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff f975 	bl	8000930 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	4aaf      	ldr	r2, [pc, #700]	; (800190c <HAL_RCC_OscConfig+0x680>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e19a      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001656:	4bac      	ldr	r3, [pc, #688]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	2202      	movs	r2, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x3b6>
 8001660:	e013      	b.n	800168a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff f965 	bl	8000930 <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166a:	e009      	b.n	8001680 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166c:	f7ff f960 	bl	8000930 <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	4aa5      	ldr	r2, [pc, #660]	; (800190c <HAL_RCC_OscConfig+0x680>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e185      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001680:	4ba1      	ldr	r3, [pc, #644]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800168a:	231f      	movs	r3, #31
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001694:	4b9c      	ldr	r3, [pc, #624]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001696:	69da      	ldr	r2, [r3, #28]
 8001698:	4b9b      	ldr	r3, [pc, #620]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800169a:	499d      	ldr	r1, [pc, #628]	; (8001910 <HAL_RCC_OscConfig+0x684>)
 800169c:	400a      	ands	r2, r1
 800169e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2210      	movs	r2, #16
 80016a6:	4013      	ands	r3, r2
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d12a      	bne.n	8001708 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016b2:	4b95      	ldr	r3, [pc, #596]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80016b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b6:	4b94      	ldr	r3, [pc, #592]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80016b8:	2104      	movs	r1, #4
 80016ba:	430a      	orrs	r2, r1
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016be:	4b92      	ldr	r3, [pc, #584]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80016c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c2:	4b91      	ldr	r3, [pc, #580]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff f931 	bl	8000930 <HAL_GetTick>
 80016ce:	0003      	movs	r3, r0
 80016d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016d4:	f7ff f92c 	bl	8000930 <HAL_GetTick>
 80016d8:	0002      	movs	r2, r0
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e152      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016e6:	4b88      	ldr	r3, [pc, #544]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80016e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ea:	2202      	movs	r2, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	d0f1      	beq.n	80016d4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016f0:	4b85      	ldr	r3, [pc, #532]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80016f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f4:	22f8      	movs	r2, #248	; 0xf8
 80016f6:	4393      	bics	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	00da      	lsls	r2, r3, #3
 8001700:	4b81      	ldr	r3, [pc, #516]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001702:	430a      	orrs	r2, r1
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
 8001706:	e034      	b.n	8001772 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	3305      	adds	r3, #5
 800170e:	d111      	bne.n	8001734 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001710:	4b7d      	ldr	r3, [pc, #500]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001714:	4b7c      	ldr	r3, [pc, #496]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001716:	2104      	movs	r1, #4
 8001718:	438a      	bics	r2, r1
 800171a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800171c:	4b7a      	ldr	r3, [pc, #488]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001720:	22f8      	movs	r2, #248	; 0xf8
 8001722:	4393      	bics	r3, r2
 8001724:	0019      	movs	r1, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	00da      	lsls	r2, r3, #3
 800172c:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800172e:	430a      	orrs	r2, r1
 8001730:	635a      	str	r2, [r3, #52]	; 0x34
 8001732:	e01e      	b.n	8001772 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001734:	4b74      	ldr	r3, [pc, #464]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001738:	4b73      	ldr	r3, [pc, #460]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800173a:	2104      	movs	r1, #4
 800173c:	430a      	orrs	r2, r1
 800173e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001740:	4b71      	ldr	r3, [pc, #452]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001744:	4b70      	ldr	r3, [pc, #448]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001746:	2101      	movs	r1, #1
 8001748:	438a      	bics	r2, r1
 800174a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff f8f0 	bl	8000930 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001756:	f7ff f8eb 	bl	8000930 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e111      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001768:	4b67      	ldr	r3, [pc, #412]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d1f1      	bne.n	8001756 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2220      	movs	r2, #32
 8001778:	4013      	ands	r3, r2
 800177a:	d05c      	beq.n	8001836 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800177c:	4b62      	ldr	r3, [pc, #392]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	220c      	movs	r2, #12
 8001782:	4013      	ands	r3, r2
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d00e      	beq.n	80017a6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001788:	4b5f      	ldr	r3, [pc, #380]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	220c      	movs	r2, #12
 800178e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001790:	2b08      	cmp	r3, #8
 8001792:	d114      	bne.n	80017be <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001794:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	23c0      	movs	r3, #192	; 0xc0
 800179a:	025b      	lsls	r3, r3, #9
 800179c:	401a      	ands	r2, r3
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d10b      	bne.n	80017be <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017a6:	4b58      	ldr	r3, [pc, #352]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80017a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	029b      	lsls	r3, r3, #10
 80017ae:	4013      	ands	r3, r2
 80017b0:	d040      	beq.n	8001834 <HAL_RCC_OscConfig+0x5a8>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d03c      	beq.n	8001834 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0e6      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01b      	beq.n	80017fe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017c6:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80017c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ca:	4b4f      	ldr	r3, [pc, #316]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	0249      	lsls	r1, r1, #9
 80017d0:	430a      	orrs	r2, r1
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff f8ac 	bl	8000930 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017de:	f7ff f8a7 	bl	8000930 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0cd      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017f0:	4b45      	ldr	r3, [pc, #276]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80017f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	029b      	lsls	r3, r3, #10
 80017f8:	4013      	ands	r3, r2
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x552>
 80017fc:	e01b      	b.n	8001836 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017fe:	4b42      	ldr	r3, [pc, #264]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001804:	4943      	ldr	r1, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x688>)
 8001806:	400a      	ands	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff f891 	bl	8000930 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001814:	f7ff f88c 	bl	8000930 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0b2      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	029b      	lsls	r3, r3, #10
 800182e:	4013      	ands	r3, r2
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x588>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001834:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <HAL_RCC_OscConfig+0x5b4>
 800183e:	e0a4      	b.n	800198a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	220c      	movs	r2, #12
 8001846:	4013      	ands	r3, r2
 8001848:	2b08      	cmp	r3, #8
 800184a:	d100      	bne.n	800184e <HAL_RCC_OscConfig+0x5c2>
 800184c:	e078      	b.n	8001940 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	2b02      	cmp	r3, #2
 8001854:	d14c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800185c:	492e      	ldr	r1, [pc, #184]	; (8001918 <HAL_RCC_OscConfig+0x68c>)
 800185e:	400a      	ands	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff f865 	bl	8000930 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f860 	bl	8000930 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e086      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	049b      	lsls	r3, r3, #18
 8001886:	4013      	ands	r3, r2
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	220f      	movs	r2, #15
 8001890:	4393      	bics	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 800189a:	430a      	orrs	r2, r1
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a1e      	ldr	r2, [pc, #120]	; (800191c <HAL_RCC_OscConfig+0x690>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	431a      	orrs	r2, r3
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0449      	lsls	r1, r1, #17
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff f833 	bl	8000930 <HAL_GetTick>
 80018ca:	0003      	movs	r3, r0
 80018cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f82e 	bl	8000930 <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e054      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	049b      	lsls	r3, r3, #18
 80018ea:	4013      	ands	r3, r2
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x644>
 80018ee:	e04c      	b.n	800198a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_RCC_OscConfig+0x67c>)
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <HAL_RCC_OscConfig+0x68c>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff f818 	bl	8000930 <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x6a6>
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	40021000 	.word	0x40021000
 800190c:	00001388 	.word	0x00001388
 8001910:	efffffff 	.word	0xefffffff
 8001914:	fffeffff 	.word	0xfffeffff
 8001918:	feffffff 	.word	0xfeffffff
 800191c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f806 	bl	8000930 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e02c      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_RCC_OscConfig+0x708>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	049b      	lsls	r3, r3, #18
 800193a:	4013      	ands	r3, r2
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x694>
 800193e:	e024      	b.n	800198a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e01f      	b.n	800198c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_RCC_OscConfig+0x708>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x708>)
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	025b      	lsls	r3, r3, #9
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	429a      	cmp	r2, r3
 8001966:	d10e      	bne.n	8001986 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	220f      	movs	r2, #15
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d107      	bne.n	8001986 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	23f0      	movs	r3, #240	; 0xf0
 800197a:	039b      	lsls	r3, r3, #14
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b008      	add	sp, #32
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0bf      	b.n	8001b2c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b61      	ldr	r3, [pc, #388]	; (8001b34 <HAL_RCC_ClockConfig+0x19c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	4013      	ands	r3, r2
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d911      	bls.n	80019de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <HAL_RCC_ClockConfig+0x19c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2201      	movs	r2, #1
 80019c0:	4393      	bics	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	4b5b      	ldr	r3, [pc, #364]	; (8001b34 <HAL_RCC_ClockConfig+0x19c>)
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_ClockConfig+0x19c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2201      	movs	r2, #1
 80019d2:	4013      	ands	r3, r2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0a6      	b.n	8001b2c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2202      	movs	r2, #2
 80019e4:	4013      	ands	r3, r2
 80019e6:	d015      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2204      	movs	r2, #4
 80019ee:	4013      	ands	r3, r2
 80019f0:	d006      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019f2:	4b51      	ldr	r3, [pc, #324]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 80019f8:	21e0      	movs	r1, #224	; 0xe0
 80019fa:	00c9      	lsls	r1, r1, #3
 80019fc:	430a      	orrs	r2, r1
 80019fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	22f0      	movs	r2, #240	; 0xf0
 8001a06:	4393      	bics	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d04c      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	029b      	lsls	r3, r3, #10
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d120      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e07a      	b.n	8001b2c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3e:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	049b      	lsls	r3, r3, #18
 8001a46:	4013      	ands	r3, r2
 8001a48:	d114      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06e      	b.n	8001b2c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d108      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e062      	b.n	8001b2c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e05b      	b.n	8001b2c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	4393      	bics	r3, r2
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a88:	f7fe ff52 	bl	8000930 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a90:	e009      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a92:	f7fe ff4d 	bl	8000930 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <HAL_RCC_ClockConfig+0x1a4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e042      	b.n	8001b2c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	220c      	movs	r2, #12
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1ec      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HAL_RCC_ClockConfig+0x19c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d211      	bcs.n	8001aea <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_RCC_ClockConfig+0x19c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4393      	bics	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_RCC_ClockConfig+0x19c>)
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_RCC_ClockConfig+0x19c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e020      	b.n	8001b2c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2204      	movs	r2, #4
 8001af0:	4013      	ands	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_RCC_ClockConfig+0x1a8>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b08:	f000 f820 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b0c:	0001      	movs	r1, r0
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x1a0>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	220f      	movs	r2, #15
 8001b16:	4013      	ands	r3, r2
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x1ac>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	000a      	movs	r2, r1
 8001b1e:	40da      	lsrs	r2, r3
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1b0>)
 8001b22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7fe febd 	bl	80008a4 <HAL_InitTick>
  
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b004      	add	sp, #16
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	00001388 	.word	0x00001388
 8001b40:	fffff8ff 	.word	0xfffff8ff
 8001b44:	08003b2c 	.word	0x08003b2c
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	220c      	movs	r2, #12
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d046      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0xb8>
 8001b76:	d848      	bhi.n	8001c0a <HAL_RCC_GetSysClockFreq+0xbe>
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d002      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x36>
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d003      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x3c>
 8001b80:	e043      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001b84:	613b      	str	r3, [r7, #16]
      break;
 8001b86:	e043      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	4013      	ands	r3, r2
 8001b90:	4a24      	ldr	r2, [pc, #144]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	025b      	lsls	r3, r3, #9
 8001baa:	401a      	ands	r2, r3
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	025b      	lsls	r3, r3, #9
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d109      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	481a      	ldr	r0, [pc, #104]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bb8:	f7fe faa6 	bl	8000108 <__udivsi3>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	001a      	movs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4353      	muls	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e01a      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	23c0      	movs	r3, #192	; 0xc0
 8001bcc:	025b      	lsls	r3, r3, #9
 8001bce:	401a      	ands	r2, r3
 8001bd0:	23c0      	movs	r3, #192	; 0xc0
 8001bd2:	025b      	lsls	r3, r3, #9
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d109      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	4814      	ldr	r0, [pc, #80]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001bdc:	f7fe fa94 	bl	8000108 <__udivsi3>
 8001be0:	0003      	movs	r3, r0
 8001be2:	001a      	movs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4353      	muls	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	480c      	ldr	r0, [pc, #48]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001bf0:	f7fe fa8a 	bl	8000108 <__udivsi3>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4353      	muls	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	613b      	str	r3, [r7, #16]
      break;
 8001c02:	e005      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001c06:	613b      	str	r3, [r7, #16]
      break;
 8001c08:	e002      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c0c:	613b      	str	r3, [r7, #16]
      break;
 8001c0e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c10:	693b      	ldr	r3, [r7, #16]
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b006      	add	sp, #24
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	007a1200 	.word	0x007a1200
 8001c24:	08003b44 	.word	0x08003b44
 8001c28:	08003b54 	.word	0x08003b54
 8001c2c:	02dc6c00 	.word	0x02dc6c00

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c48:	f7ff fff2 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c4c:	0001      	movs	r1, r0
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	2207      	movs	r2, #7
 8001c56:	4013      	ands	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	40d9      	lsrs	r1, r3
 8001c5e:	000b      	movs	r3, r1
}    
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08003b3c 	.word	0x08003b3c

08001c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d100      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c8c:	e08e      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c8e:	2017      	movs	r0, #23
 8001c90:	183b      	adds	r3, r7, r0
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b6e      	ldr	r3, [pc, #440]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	055b      	lsls	r3, r3, #21
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d110      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0549      	lsls	r1, r1, #21
 8001cac:	430a      	orrs	r2, r1
 8001cae:	61da      	str	r2, [r3, #28]
 8001cb0:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	055b      	lsls	r3, r3, #21
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cbe:	183b      	adds	r3, r7, r0
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d11a      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd0:	4b60      	ldr	r3, [pc, #384]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	0049      	lsls	r1, r1, #1
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cde:	f7fe fe27 	bl	8000930 <HAL_GetTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	e008      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce8:	f7fe fe22 	bl	8000930 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e0a6      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d06:	4b52      	ldr	r3, [pc, #328]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	23c0      	movs	r3, #192	; 0xc0
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d034      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	23c0      	movs	r3, #192	; 0xc0
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d02c      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d28:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d34:	6a1a      	ldr	r2, [r3, #32]
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0249      	lsls	r1, r1, #9
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d40:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d46:	4945      	ldr	r1, [pc, #276]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001d48:	400a      	ands	r2, r1
 8001d4a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d4c:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fde9 	bl	8000930 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d62:	e009      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7fe fde4 	bl	8000930 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	4a3c      	ldr	r2, [pc, #240]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e067      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d96:	2317      	movs	r3, #23
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001da6:	492f      	ldr	r1, [pc, #188]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001da8:	400a      	ands	r2, r1
 8001daa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4013      	ands	r3, r2
 8001db4:	d009      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	0019      	movs	r1, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2220      	movs	r2, #32
 8001dee:	4013      	ands	r3, r2
 8001df0:	d009      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	2210      	movs	r2, #16
 8001df8:	4393      	bics	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	029b      	lsls	r3, r3, #10
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	4393      	bics	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	4393      	bics	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b006      	add	sp, #24
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40007000 	.word	0x40007000
 8001e58:	fffffcff 	.word	0xfffffcff
 8001e5c:	fffeffff 	.word	0xfffeffff
 8001e60:	00001388 	.word	0x00001388
 8001e64:	efffffff 	.word	0xefffffff
 8001e68:	fffcffff 	.word	0xfffcffff

08001e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e044      	b.n	8001f08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2278      	movs	r2, #120	; 0x78
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7fe fc07 	bl	80006a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2224      	movs	r2, #36	; 0x24
 8001e9a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 fc7a 	bl	80027a8 <UART_SetConfig>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e024      	b.n	8001f08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f000 fdf5 	bl	8002ab8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	490d      	ldr	r1, [pc, #52]	; (8001f10 <HAL_UART_Init+0xa4>)
 8001eda:	400a      	ands	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	212a      	movs	r1, #42	; 0x2a
 8001eea:	438a      	bics	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 fe8d 	bl	8002c20 <UART_CheckIdleState>
 8001f06:	0003      	movs	r3, r0
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	ffffb7ff 	.word	0xffffb7ff

08001f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	1dbb      	adds	r3, r7, #6
 8001f22:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d000      	beq.n	8001f2e <HAL_UART_Transmit+0x1a>
 8001f2c:	e08d      	b.n	800204a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_UART_Transmit+0x28>
 8001f34:	1dbb      	adds	r3, r7, #6
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e085      	b.n	800204c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	015b      	lsls	r3, r3, #5
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d109      	bne.n	8001f60 <HAL_UART_Transmit+0x4c>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d001      	beq.n	8001f60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e075      	b.n	800204c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2284      	movs	r2, #132	; 0x84
 8001f64:	2100      	movs	r1, #0
 8001f66:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2221      	movs	r2, #33	; 0x21
 8001f6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f6e:	f7fe fcdf 	bl	8000930 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1dba      	adds	r2, r7, #6
 8001f7a:	2150      	movs	r1, #80	; 0x50
 8001f7c:	8812      	ldrh	r2, [r2, #0]
 8001f7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1dba      	adds	r2, r7, #6
 8001f84:	2152      	movs	r1, #82	; 0x52
 8001f86:	8812      	ldrh	r2, [r2, #0]
 8001f88:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	015b      	lsls	r3, r3, #5
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d108      	bne.n	8001fa8 <HAL_UART_Transmit+0x94>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	e003      	b.n	8001fb0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fb0:	e030      	b.n	8002014 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	0013      	movs	r3, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	f000 fed6 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 8001fc4:	1e03      	subs	r3, r0, #0
 8001fc6:	d004      	beq.n	8001fd2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e03c      	b.n	800204c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	05d2      	lsls	r2, r2, #23
 8001fe2:	0dd2      	lsrs	r2, r2, #23
 8001fe4:	b292      	uxth	r2, r2
 8001fe6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	3302      	adds	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	e008      	b.n	8002002 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3301      	adds	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2252      	movs	r2, #82	; 0x52
 8002006:	5a9b      	ldrh	r3, [r3, r2]
 8002008:	b29b      	uxth	r3, r3
 800200a:	3b01      	subs	r3, #1
 800200c:	b299      	uxth	r1, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2252      	movs	r2, #82	; 0x52
 8002012:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2252      	movs	r2, #82	; 0x52
 8002018:	5a9b      	ldrh	r3, [r3, r2]
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1c8      	bne.n	8001fb2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	0013      	movs	r3, r2
 800202a:	2200      	movs	r2, #0
 800202c:	2140      	movs	r1, #64	; 0x40
 800202e:	f000 fe9f 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 8002032:	1e03      	subs	r3, r0, #0
 8002034:	d004      	beq.n	8002040 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e005      	b.n	800204c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
  }
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b008      	add	sp, #32
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	1dbb      	adds	r3, r7, #6
 8002060:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	589b      	ldr	r3, [r3, r2]
 8002068:	2b20      	cmp	r3, #32
 800206a:	d145      	bne.n	80020f8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_UART_Receive_IT+0x26>
 8002072:	1dbb      	adds	r3, r7, #6
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e03d      	b.n	80020fa <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	015b      	lsls	r3, r3, #5
 8002086:	429a      	cmp	r2, r3
 8002088:	d109      	bne.n	800209e <HAL_UART_Receive_IT+0x4a>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2201      	movs	r2, #1
 8002096:	4013      	ands	r3, r2
 8002098:	d001      	beq.n	800209e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e02d      	b.n	80020fa <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	4013      	ands	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b2:	f3ef 8310 	mrs	r3, PRIMASK
 80020b6:	613b      	str	r3, [r7, #16]
  return(result);
 80020b8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	2301      	movs	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f383 8810 	msr	PRIMASK, r3
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	04c9      	lsls	r1, r1, #19
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f383 8810 	msr	PRIMASK, r3
}
 80020e4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020e6:	1dbb      	adds	r3, r7, #6
 80020e8:	881a      	ldrh	r2, [r3, #0]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 fea8 	bl	8002e44 <UART_Start_Receive_IT>
 80020f4:	0003      	movs	r3, r0
 80020f6:	e000      	b.n	80020fa <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
  }
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b008      	add	sp, #32
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b088      	sub	sp, #32
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	1dbb      	adds	r3, r7, #6
 800210e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2280      	movs	r2, #128	; 0x80
 8002114:	589b      	ldr	r3, [r3, r2]
 8002116:	2b20      	cmp	r3, #32
 8002118:	d145      	bne.n	80021a6 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_UART_Receive_DMA+0x26>
 8002120:	1dbb      	adds	r3, r7, #6
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e03d      	b.n	80021a8 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	015b      	lsls	r3, r3, #5
 8002134:	429a      	cmp	r2, r3
 8002136:	d109      	bne.n	800214c <HAL_UART_Receive_DMA+0x4a>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2201      	movs	r2, #1
 8002144:	4013      	ands	r3, r2
 8002146:	d001      	beq.n	800214c <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e02d      	b.n	80021a8 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	4013      	ands	r3, r2
 800215e:	d019      	beq.n	8002194 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002160:	f3ef 8310 	mrs	r3, PRIMASK
 8002164:	613b      	str	r3, [r7, #16]
  return(result);
 8002166:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	2301      	movs	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f383 8810 	msr	PRIMASK, r3
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	04c9      	lsls	r1, r1, #19
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f383 8810 	msr	PRIMASK, r3
}
 8002192:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002194:	1dbb      	adds	r3, r7, #6
 8002196:	881a      	ldrh	r2, [r3, #0]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	0018      	movs	r0, r3
 800219e:	f000 ff1b 	bl	8002fd8 <UART_Start_Receive_DMA>
 80021a2:	0003      	movs	r3, r0
 80021a4:	e000      	b.n	80021a8 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
  }
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b008      	add	sp, #32
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b0ab      	sub	sp, #172	; 0xac
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	22a4      	movs	r2, #164	; 0xa4
 80021c0:	18b9      	adds	r1, r7, r2
 80021c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	20a0      	movs	r0, #160	; 0xa0
 80021cc:	1839      	adds	r1, r7, r0
 80021ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	219c      	movs	r1, #156	; 0x9c
 80021d8:	1879      	adds	r1, r7, r1
 80021da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80021dc:	0011      	movs	r1, r2
 80021de:	18bb      	adds	r3, r7, r2
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a99      	ldr	r2, [pc, #612]	; (8002448 <HAL_UART_IRQHandler+0x298>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	2298      	movs	r2, #152	; 0x98
 80021e8:	18bc      	adds	r4, r7, r2
 80021ea:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80021ec:	18bb      	adds	r3, r7, r2
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d114      	bne.n	800221e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2220      	movs	r2, #32
 80021fa:	4013      	ands	r3, r2
 80021fc:	d00f      	beq.n	800221e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021fe:	183b      	adds	r3, r7, r0
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2220      	movs	r2, #32
 8002204:	4013      	ands	r3, r2
 8002206:	d00a      	beq.n	800221e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800220c:	2b00      	cmp	r3, #0
 800220e:	d100      	bne.n	8002212 <HAL_UART_IRQHandler+0x62>
 8002210:	e29e      	b.n	8002750 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	0010      	movs	r0, r2
 800221a:	4798      	blx	r3
      }
      return;
 800221c:	e298      	b.n	8002750 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800221e:	2398      	movs	r3, #152	; 0x98
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <HAL_UART_IRQHandler+0x7a>
 8002228:	e114      	b.n	8002454 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800222a:	239c      	movs	r3, #156	; 0x9c
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	d106      	bne.n	8002244 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002236:	23a0      	movs	r3, #160	; 0xa0
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a83      	ldr	r2, [pc, #524]	; (800244c <HAL_UART_IRQHandler+0x29c>)
 800223e:	4013      	ands	r3, r2
 8002240:	d100      	bne.n	8002244 <HAL_UART_IRQHandler+0x94>
 8002242:	e107      	b.n	8002454 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002244:	23a4      	movs	r3, #164	; 0xa4
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2201      	movs	r2, #1
 800224c:	4013      	ands	r3, r2
 800224e:	d012      	beq.n	8002276 <HAL_UART_IRQHandler+0xc6>
 8002250:	23a0      	movs	r3, #160	; 0xa0
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4013      	ands	r3, r2
 800225c:	d00b      	beq.n	8002276 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2284      	movs	r2, #132	; 0x84
 800226a:	589b      	ldr	r3, [r3, r2]
 800226c:	2201      	movs	r2, #1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2184      	movs	r1, #132	; 0x84
 8002274:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002276:	23a4      	movs	r3, #164	; 0xa4
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d011      	beq.n	80022a6 <HAL_UART_IRQHandler+0xf6>
 8002282:	239c      	movs	r3, #156	; 0x9c
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2201      	movs	r2, #1
 800228a:	4013      	ands	r3, r2
 800228c:	d00b      	beq.n	80022a6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2202      	movs	r2, #2
 8002294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2284      	movs	r2, #132	; 0x84
 800229a:	589b      	ldr	r3, [r3, r2]
 800229c:	2204      	movs	r2, #4
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2184      	movs	r1, #132	; 0x84
 80022a4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022a6:	23a4      	movs	r3, #164	; 0xa4
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2204      	movs	r2, #4
 80022ae:	4013      	ands	r3, r2
 80022b0:	d011      	beq.n	80022d6 <HAL_UART_IRQHandler+0x126>
 80022b2:	239c      	movs	r3, #156	; 0x9c
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	d00b      	beq.n	80022d6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2204      	movs	r2, #4
 80022c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2284      	movs	r2, #132	; 0x84
 80022ca:	589b      	ldr	r3, [r3, r2]
 80022cc:	2202      	movs	r2, #2
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2184      	movs	r1, #132	; 0x84
 80022d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022d6:	23a4      	movs	r3, #164	; 0xa4
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2208      	movs	r2, #8
 80022de:	4013      	ands	r3, r2
 80022e0:	d017      	beq.n	8002312 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022e2:	23a0      	movs	r3, #160	; 0xa0
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2220      	movs	r2, #32
 80022ea:	4013      	ands	r3, r2
 80022ec:	d105      	bne.n	80022fa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80022ee:	239c      	movs	r3, #156	; 0x9c
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022f8:	d00b      	beq.n	8002312 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2208      	movs	r2, #8
 8002300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2284      	movs	r2, #132	; 0x84
 8002306:	589b      	ldr	r3, [r3, r2]
 8002308:	2208      	movs	r2, #8
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2184      	movs	r1, #132	; 0x84
 8002310:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002312:	23a4      	movs	r3, #164	; 0xa4
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	4013      	ands	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_UART_IRQHandler+0x198>
 8002320:	23a0      	movs	r3, #160	; 0xa0
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	04db      	lsls	r3, r3, #19
 800232a:	4013      	ands	r3, r2
 800232c:	d00c      	beq.n	8002348 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2284      	movs	r2, #132	; 0x84
 800233c:	589b      	ldr	r3, [r3, r2]
 800233e:	2220      	movs	r2, #32
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2184      	movs	r1, #132	; 0x84
 8002346:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2284      	movs	r2, #132	; 0x84
 800234c:	589b      	ldr	r3, [r3, r2]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d100      	bne.n	8002354 <HAL_UART_IRQHandler+0x1a4>
 8002352:	e1ff      	b.n	8002754 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002354:	23a4      	movs	r3, #164	; 0xa4
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2220      	movs	r2, #32
 800235c:	4013      	ands	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002360:	23a0      	movs	r3, #160	; 0xa0
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2220      	movs	r2, #32
 8002368:	4013      	ands	r3, r2
 800236a:	d008      	beq.n	800237e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	0010      	movs	r0, r2
 800237c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2284      	movs	r2, #132	; 0x84
 8002382:	589b      	ldr	r3, [r3, r2]
 8002384:	2194      	movs	r1, #148	; 0x94
 8002386:	187a      	adds	r2, r7, r1
 8002388:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	4013      	ands	r3, r2
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d004      	beq.n	80023a2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002398:	187b      	adds	r3, r7, r1
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2228      	movs	r2, #40	; 0x28
 800239e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023a0:	d047      	beq.n	8002432 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fedb 	bl	8003160 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2240      	movs	r2, #64	; 0x40
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d137      	bne.n	8002428 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023b8:	f3ef 8310 	mrs	r3, PRIMASK
 80023bc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80023be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c0:	2090      	movs	r0, #144	; 0x90
 80023c2:	183a      	adds	r2, r7, r0
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023cc:	f383 8810 	msr	PRIMASK, r3
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2140      	movs	r1, #64	; 0x40
 80023de:	438a      	bics	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023ea:	f383 8810 	msr	PRIMASK, r3
}
 80023ee:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d012      	beq.n	800241e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <HAL_UART_IRQHandler+0x2a0>)
 80023fe:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002404:	0018      	movs	r0, r3
 8002406:	f7fe fc61 	bl	8000ccc <HAL_DMA_Abort_IT>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d01a      	beq.n	8002444 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002418:	0018      	movs	r0, r3
 800241a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	e012      	b.n	8002444 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	0018      	movs	r0, r3
 8002422:	f000 f9ad 	bl	8002780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002426:	e00d      	b.n	8002444 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	0018      	movs	r0, r3
 800242c:	f000 f9a8 	bl	8002780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	e008      	b.n	8002444 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f000 f9a3 	bl	8002780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2284      	movs	r2, #132	; 0x84
 800243e:	2100      	movs	r1, #0
 8002440:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002442:	e187      	b.n	8002754 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002444:	46c0      	nop			; (mov r8, r8)
    return;
 8002446:	e185      	b.n	8002754 <HAL_UART_IRQHandler+0x5a4>
 8002448:	0000080f 	.word	0x0000080f
 800244c:	04000120 	.word	0x04000120
 8002450:	0800341b 	.word	0x0800341b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002458:	2b01      	cmp	r3, #1
 800245a:	d000      	beq.n	800245e <HAL_UART_IRQHandler+0x2ae>
 800245c:	e139      	b.n	80026d2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800245e:	23a4      	movs	r3, #164	; 0xa4
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2210      	movs	r2, #16
 8002466:	4013      	ands	r3, r2
 8002468:	d100      	bne.n	800246c <HAL_UART_IRQHandler+0x2bc>
 800246a:	e132      	b.n	80026d2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800246c:	23a0      	movs	r3, #160	; 0xa0
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2210      	movs	r2, #16
 8002474:	4013      	ands	r3, r2
 8002476:	d100      	bne.n	800247a <HAL_UART_IRQHandler+0x2ca>
 8002478:	e12b      	b.n	80026d2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2210      	movs	r2, #16
 8002480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2240      	movs	r2, #64	; 0x40
 800248a:	4013      	ands	r3, r2
 800248c:	2b40      	cmp	r3, #64	; 0x40
 800248e:	d000      	beq.n	8002492 <HAL_UART_IRQHandler+0x2e2>
 8002490:	e09f      	b.n	80025d2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	217e      	movs	r1, #126	; 0x7e
 800249c:	187b      	adds	r3, r7, r1
 800249e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d100      	bne.n	80024aa <HAL_UART_IRQHandler+0x2fa>
 80024a8:	e156      	b.n	8002758 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2258      	movs	r2, #88	; 0x58
 80024ae:	5a9b      	ldrh	r3, [r3, r2]
 80024b0:	187a      	adds	r2, r7, r1
 80024b2:	8812      	ldrh	r2, [r2, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d300      	bcc.n	80024ba <HAL_UART_IRQHandler+0x30a>
 80024b8:	e14e      	b.n	8002758 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	187a      	adds	r2, r7, r1
 80024be:	215a      	movs	r1, #90	; 0x5a
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d06f      	beq.n	80025ae <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ce:	f3ef 8310 	mrs	r3, PRIMASK
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80024d8:	2301      	movs	r3, #1
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024de:	f383 8810 	msr	PRIMASK, r3
}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	499e      	ldr	r1, [pc, #632]	; (8002768 <HAL_UART_IRQHandler+0x5b8>)
 80024f0:	400a      	ands	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fa:	f383 8810 	msr	PRIMASK, r3
}
 80024fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002500:	f3ef 8310 	mrs	r3, PRIMASK
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002508:	677b      	str	r3, [r7, #116]	; 0x74
 800250a:	2301      	movs	r3, #1
 800250c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002510:	f383 8810 	msr	PRIMASK, r3
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	438a      	bics	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002528:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002532:	f3ef 8310 	mrs	r3, PRIMASK
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002538:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253a:	673b      	str	r3, [r7, #112]	; 0x70
 800253c:	2301      	movs	r3, #1
 800253e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002542:	f383 8810 	msr	PRIMASK, r3
}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2140      	movs	r1, #64	; 0x40
 8002554:	438a      	bics	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800255a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255e:	f383 8810 	msr	PRIMASK, r3
}
 8002562:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	2120      	movs	r1, #32
 800256a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002572:	f3ef 8310 	mrs	r3, PRIMASK
 8002576:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002578:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800257a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800257c:	2301      	movs	r3, #1
 800257e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002582:	f383 8810 	msr	PRIMASK, r3
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2110      	movs	r1, #16
 8002594:	438a      	bics	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259e:	f383 8810 	msr	PRIMASK, r3
}
 80025a2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7fe fb57 	bl	8000c5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2258      	movs	r2, #88	; 0x58
 80025b8:	5a9a      	ldrh	r2, [r3, r2]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	215a      	movs	r1, #90	; 0x5a
 80025be:	5a5b      	ldrh	r3, [r3, r1]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0011      	movs	r1, r2
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 f8e0 	bl	8002790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80025d0:	e0c2      	b.n	8002758 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2258      	movs	r2, #88	; 0x58
 80025d6:	5a99      	ldrh	r1, [r3, r2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	225a      	movs	r2, #90	; 0x5a
 80025dc:	5a9b      	ldrh	r3, [r3, r2]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	208e      	movs	r0, #142	; 0x8e
 80025e2:	183b      	adds	r3, r7, r0
 80025e4:	1a8a      	subs	r2, r1, r2
 80025e6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	225a      	movs	r2, #90	; 0x5a
 80025ec:	5a9b      	ldrh	r3, [r3, r2]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d100      	bne.n	80025f6 <HAL_UART_IRQHandler+0x446>
 80025f4:	e0b2      	b.n	800275c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80025f6:	183b      	adds	r3, r7, r0
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d100      	bne.n	8002600 <HAL_UART_IRQHandler+0x450>
 80025fe:	e0ad      	b.n	800275c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002600:	f3ef 8310 	mrs	r3, PRIMASK
 8002604:	60fb      	str	r3, [r7, #12]
  return(result);
 8002606:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002608:	2488      	movs	r4, #136	; 0x88
 800260a:	193a      	adds	r2, r7, r4
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	2301      	movs	r3, #1
 8002610:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f383 8810 	msr	PRIMASK, r3
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4951      	ldr	r1, [pc, #324]	; (800276c <HAL_UART_IRQHandler+0x5bc>)
 8002626:	400a      	ands	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	193b      	adds	r3, r7, r4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f383 8810 	msr	PRIMASK, r3
}
 8002636:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002638:	f3ef 8310 	mrs	r3, PRIMASK
 800263c:	61bb      	str	r3, [r7, #24]
  return(result);
 800263e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002640:	2484      	movs	r4, #132	; 0x84
 8002642:	193a      	adds	r2, r7, r4
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	2301      	movs	r3, #1
 8002648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f383 8810 	msr	PRIMASK, r3
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	438a      	bics	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	193b      	adds	r3, r7, r4
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	2120      	movs	r1, #32
 8002676:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002684:	f3ef 8310 	mrs	r3, PRIMASK
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800268c:	2480      	movs	r4, #128	; 0x80
 800268e:	193a      	adds	r2, r7, r4
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	2301      	movs	r3, #1
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	f383 8810 	msr	PRIMASK, r3
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2110      	movs	r1, #16
 80026aa:	438a      	bics	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	193b      	adds	r3, r7, r4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	f383 8810 	msr	PRIMASK, r3
}
 80026ba:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026c2:	183b      	adds	r3, r7, r0
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0011      	movs	r1, r2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f860 	bl	8002790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026d0:	e044      	b.n	800275c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80026d2:	23a4      	movs	r3, #164	; 0xa4
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	035b      	lsls	r3, r3, #13
 80026dc:	4013      	ands	r3, r2
 80026de:	d010      	beq.n	8002702 <HAL_UART_IRQHandler+0x552>
 80026e0:	239c      	movs	r3, #156	; 0x9c
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	03db      	lsls	r3, r3, #15
 80026ea:	4013      	ands	r3, r2
 80026ec:	d009      	beq.n	8002702 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	0352      	lsls	r2, r2, #13
 80026f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f001 f888 	bl	8003810 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002700:	e02f      	b.n	8002762 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002702:	23a4      	movs	r3, #164	; 0xa4
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	4013      	ands	r3, r2
 800270c:	d00f      	beq.n	800272e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800270e:	23a0      	movs	r3, #160	; 0xa0
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	4013      	ands	r3, r2
 8002718:	d009      	beq.n	800272e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01e      	beq.n	8002760 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	0010      	movs	r0, r2
 800272a:	4798      	blx	r3
    }
    return;
 800272c:	e018      	b.n	8002760 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800272e:	23a4      	movs	r3, #164	; 0xa4
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2240      	movs	r2, #64	; 0x40
 8002736:	4013      	ands	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_UART_IRQHandler+0x5b2>
 800273a:	23a0      	movs	r3, #160	; 0xa0
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2240      	movs	r2, #64	; 0x40
 8002742:	4013      	ands	r3, r2
 8002744:	d00d      	beq.n	8002762 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	0018      	movs	r0, r3
 800274a:	f000 fe7d 	bl	8003448 <UART_EndTransmit_IT>
    return;
 800274e:	e008      	b.n	8002762 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	e006      	b.n	8002762 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	e004      	b.n	8002762 <HAL_UART_IRQHandler+0x5b2>
      return;
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	e002      	b.n	8002762 <HAL_UART_IRQHandler+0x5b2>
      return;
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	e000      	b.n	8002762 <HAL_UART_IRQHandler+0x5b2>
    return;
 8002760:	46c0      	nop			; (mov r8, r8)
  }

}
 8002762:	46bd      	mov	sp, r7
 8002764:	b02b      	add	sp, #172	; 0xac
 8002766:	bd90      	pop	{r4, r7, pc}
 8002768:	fffffeff 	.word	0xfffffeff
 800276c:	fffffedf 	.word	0xfffffedf

08002770 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	000a      	movs	r2, r1
 800279a:	1cbb      	adds	r3, r7, #2
 800279c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027b0:	231e      	movs	r3, #30
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4aaf      	ldr	r2, [pc, #700]	; (8002a94 <UART_SetConfig+0x2ec>)
 80027d8:	4013      	ands	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4aaa      	ldr	r2, [pc, #680]	; (8002a98 <UART_SetConfig+0x2f0>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4aa1      	ldr	r2, [pc, #644]	; (8002a9c <UART_SetConfig+0x2f4>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a9d      	ldr	r2, [pc, #628]	; (8002aa0 <UART_SetConfig+0x2f8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d127      	bne.n	800287e <UART_SetConfig+0xd6>
 800282e:	4b9d      	ldr	r3, [pc, #628]	; (8002aa4 <UART_SetConfig+0x2fc>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	2203      	movs	r2, #3
 8002834:	4013      	ands	r3, r2
 8002836:	2b03      	cmp	r3, #3
 8002838:	d00d      	beq.n	8002856 <UART_SetConfig+0xae>
 800283a:	d81b      	bhi.n	8002874 <UART_SetConfig+0xcc>
 800283c:	2b02      	cmp	r3, #2
 800283e:	d014      	beq.n	800286a <UART_SetConfig+0xc2>
 8002840:	d818      	bhi.n	8002874 <UART_SetConfig+0xcc>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <UART_SetConfig+0xa4>
 8002846:	2b01      	cmp	r3, #1
 8002848:	d00a      	beq.n	8002860 <UART_SetConfig+0xb8>
 800284a:	e013      	b.n	8002874 <UART_SetConfig+0xcc>
 800284c:	231f      	movs	r3, #31
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e065      	b.n	8002922 <UART_SetConfig+0x17a>
 8002856:	231f      	movs	r3, #31
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e060      	b.n	8002922 <UART_SetConfig+0x17a>
 8002860:	231f      	movs	r3, #31
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2204      	movs	r2, #4
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e05b      	b.n	8002922 <UART_SetConfig+0x17a>
 800286a:	231f      	movs	r3, #31
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2208      	movs	r2, #8
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e056      	b.n	8002922 <UART_SetConfig+0x17a>
 8002874:	231f      	movs	r3, #31
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2210      	movs	r2, #16
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e051      	b.n	8002922 <UART_SetConfig+0x17a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a89      	ldr	r2, [pc, #548]	; (8002aa8 <UART_SetConfig+0x300>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d134      	bne.n	80028f2 <UART_SetConfig+0x14a>
 8002888:	4b86      	ldr	r3, [pc, #536]	; (8002aa4 <UART_SetConfig+0x2fc>)
 800288a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288c:	23c0      	movs	r3, #192	; 0xc0
 800288e:	029b      	lsls	r3, r3, #10
 8002890:	4013      	ands	r3, r2
 8002892:	22c0      	movs	r2, #192	; 0xc0
 8002894:	0292      	lsls	r2, r2, #10
 8002896:	4293      	cmp	r3, r2
 8002898:	d017      	beq.n	80028ca <UART_SetConfig+0x122>
 800289a:	22c0      	movs	r2, #192	; 0xc0
 800289c:	0292      	lsls	r2, r2, #10
 800289e:	4293      	cmp	r3, r2
 80028a0:	d822      	bhi.n	80028e8 <UART_SetConfig+0x140>
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	0292      	lsls	r2, r2, #10
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d019      	beq.n	80028de <UART_SetConfig+0x136>
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	0292      	lsls	r2, r2, #10
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d81a      	bhi.n	80028e8 <UART_SetConfig+0x140>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <UART_SetConfig+0x118>
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	0252      	lsls	r2, r2, #9
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00a      	beq.n	80028d4 <UART_SetConfig+0x12c>
 80028be:	e013      	b.n	80028e8 <UART_SetConfig+0x140>
 80028c0:	231f      	movs	r3, #31
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e02b      	b.n	8002922 <UART_SetConfig+0x17a>
 80028ca:	231f      	movs	r3, #31
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	2202      	movs	r2, #2
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e026      	b.n	8002922 <UART_SetConfig+0x17a>
 80028d4:	231f      	movs	r3, #31
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	2204      	movs	r2, #4
 80028da:	701a      	strb	r2, [r3, #0]
 80028dc:	e021      	b.n	8002922 <UART_SetConfig+0x17a>
 80028de:	231f      	movs	r3, #31
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2208      	movs	r2, #8
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e01c      	b.n	8002922 <UART_SetConfig+0x17a>
 80028e8:	231f      	movs	r3, #31
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2210      	movs	r2, #16
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e017      	b.n	8002922 <UART_SetConfig+0x17a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6d      	ldr	r2, [pc, #436]	; (8002aac <UART_SetConfig+0x304>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d104      	bne.n	8002906 <UART_SetConfig+0x15e>
 80028fc:	231f      	movs	r3, #31
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e00d      	b.n	8002922 <UART_SetConfig+0x17a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a69      	ldr	r2, [pc, #420]	; (8002ab0 <UART_SetConfig+0x308>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d104      	bne.n	800291a <UART_SetConfig+0x172>
 8002910:	231f      	movs	r3, #31
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e003      	b.n	8002922 <UART_SetConfig+0x17a>
 800291a:	231f      	movs	r3, #31
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2210      	movs	r2, #16
 8002920:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	429a      	cmp	r2, r3
 800292c:	d15c      	bne.n	80029e8 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800292e:	231f      	movs	r3, #31
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d015      	beq.n	8002964 <UART_SetConfig+0x1bc>
 8002938:	dc18      	bgt.n	800296c <UART_SetConfig+0x1c4>
 800293a:	2b04      	cmp	r3, #4
 800293c:	d00d      	beq.n	800295a <UART_SetConfig+0x1b2>
 800293e:	dc15      	bgt.n	800296c <UART_SetConfig+0x1c4>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <UART_SetConfig+0x1a2>
 8002944:	2b02      	cmp	r3, #2
 8002946:	d005      	beq.n	8002954 <UART_SetConfig+0x1ac>
 8002948:	e010      	b.n	800296c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800294a:	f7ff f97b 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 800294e:	0003      	movs	r3, r0
 8002950:	61bb      	str	r3, [r7, #24]
        break;
 8002952:	e012      	b.n	800297a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002954:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <UART_SetConfig+0x30c>)
 8002956:	61bb      	str	r3, [r7, #24]
        break;
 8002958:	e00f      	b.n	800297a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800295a:	f7ff f8f7 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 800295e:	0003      	movs	r3, r0
 8002960:	61bb      	str	r3, [r7, #24]
        break;
 8002962:	e00a      	b.n	800297a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	61bb      	str	r3, [r7, #24]
        break;
 800296a:	e006      	b.n	800297a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002970:	231e      	movs	r3, #30
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
        break;
 8002978:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d100      	bne.n	8002982 <UART_SetConfig+0x1da>
 8002980:	e07a      	b.n	8002a78 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	005a      	lsls	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	18d2      	adds	r2, r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	0019      	movs	r1, r3
 8002994:	0010      	movs	r0, r2
 8002996:	f7fd fbb7 	bl	8000108 <__udivsi3>
 800299a:	0003      	movs	r3, r0
 800299c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b0f      	cmp	r3, #15
 80029a2:	d91c      	bls.n	80029de <UART_SetConfig+0x236>
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	025b      	lsls	r3, r3, #9
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d217      	bcs.n	80029de <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	200e      	movs	r0, #14
 80029b4:	183b      	adds	r3, r7, r0
 80029b6:	210f      	movs	r1, #15
 80029b8:	438a      	bics	r2, r1
 80029ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2207      	movs	r2, #7
 80029c4:	4013      	ands	r3, r2
 80029c6:	b299      	uxth	r1, r3
 80029c8:	183b      	adds	r3, r7, r0
 80029ca:	183a      	adds	r2, r7, r0
 80029cc:	8812      	ldrh	r2, [r2, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	183a      	adds	r2, r7, r0
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	e04c      	b.n	8002a78 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80029de:	231e      	movs	r3, #30
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e047      	b.n	8002a78 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029e8:	231f      	movs	r3, #31
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d015      	beq.n	8002a1e <UART_SetConfig+0x276>
 80029f2:	dc18      	bgt.n	8002a26 <UART_SetConfig+0x27e>
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d00d      	beq.n	8002a14 <UART_SetConfig+0x26c>
 80029f8:	dc15      	bgt.n	8002a26 <UART_SetConfig+0x27e>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <UART_SetConfig+0x25c>
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d005      	beq.n	8002a0e <UART_SetConfig+0x266>
 8002a02:	e010      	b.n	8002a26 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a04:	f7ff f91e 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	61bb      	str	r3, [r7, #24]
        break;
 8002a0c:	e012      	b.n	8002a34 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a0e:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <UART_SetConfig+0x30c>)
 8002a10:	61bb      	str	r3, [r7, #24]
        break;
 8002a12:	e00f      	b.n	8002a34 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a14:	f7ff f89a 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	61bb      	str	r3, [r7, #24]
        break;
 8002a1c:	e00a      	b.n	8002a34 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	61bb      	str	r3, [r7, #24]
        break;
 8002a24:	e006      	b.n	8002a34 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a2a:	231e      	movs	r3, #30
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
        break;
 8002a32:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01e      	beq.n	8002a78 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	085a      	lsrs	r2, r3, #1
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	18d2      	adds	r2, r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	0019      	movs	r1, r3
 8002a4a:	0010      	movs	r0, r2
 8002a4c:	f7fd fb5c 	bl	8000108 <__udivsi3>
 8002a50:	0003      	movs	r3, r0
 8002a52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	d90a      	bls.n	8002a70 <UART_SetConfig+0x2c8>
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	025b      	lsls	r3, r3, #9
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d205      	bcs.n	8002a70 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e003      	b.n	8002a78 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002a70:	231e      	movs	r3, #30
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002a84:	231e      	movs	r3, #30
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	781b      	ldrb	r3, [r3, #0]
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b008      	add	sp, #32
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	efff69f3 	.word	0xefff69f3
 8002a98:	ffffcfff 	.word	0xffffcfff
 8002a9c:	fffff4ff 	.word	0xfffff4ff
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40004400 	.word	0x40004400
 8002aac:	40004800 	.word	0x40004800
 8002ab0:	40004c00 	.word	0x40004c00
 8002ab4:	007a1200 	.word	0x007a1200

08002ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a4a      	ldr	r2, [pc, #296]	; (8002bfc <UART_AdvFeatureConfig+0x144>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4a43      	ldr	r2, [pc, #268]	; (8002c00 <UART_AdvFeatureConfig+0x148>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2204      	movs	r2, #4
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <UART_AdvFeatureConfig+0x14c>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d00b      	beq.n	8002b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4a34      	ldr	r2, [pc, #208]	; (8002c08 <UART_AdvFeatureConfig+0x150>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d00b      	beq.n	8002b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <UART_AdvFeatureConfig+0x154>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2220      	movs	r2, #32
 8002b70:	4013      	ands	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4a25      	ldr	r2, [pc, #148]	; (8002c10 <UART_AdvFeatureConfig+0x158>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2240      	movs	r2, #64	; 0x40
 8002b92:	4013      	ands	r3, r2
 8002b94:	d01d      	beq.n	8002bd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <UART_AdvFeatureConfig+0x15c>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	035b      	lsls	r3, r3, #13
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d10b      	bne.n	8002bd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <UART_AdvFeatureConfig+0x160>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <UART_AdvFeatureConfig+0x164>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	605a      	str	r2, [r3, #4]
  }
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	fffdffff 	.word	0xfffdffff
 8002c00:	fffeffff 	.word	0xfffeffff
 8002c04:	fffbffff 	.word	0xfffbffff
 8002c08:	ffff7fff 	.word	0xffff7fff
 8002c0c:	ffffefff 	.word	0xffffefff
 8002c10:	ffffdfff 	.word	0xffffdfff
 8002c14:	ffefffff 	.word	0xffefffff
 8002c18:	ff9fffff 	.word	0xff9fffff
 8002c1c:	fff7ffff 	.word	0xfff7ffff

08002c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b092      	sub	sp, #72	; 0x48
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2284      	movs	r2, #132	; 0x84
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c30:	f7fd fe7e 	bl	8000930 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2208      	movs	r2, #8
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d12c      	bne.n	8002ca0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	0391      	lsls	r1, r2, #14
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <UART_CheckIdleState+0x148>)
 8002c50:	9200      	str	r2, [sp, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f000 f88c 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d021      	beq.n	8002ca0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c66:	2301      	movs	r3, #1
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	f383 8810 	msr	PRIMASK, r3
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	438a      	bics	r2, r1
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	f383 8810 	msr	PRIMASK, r3
}
 8002c8c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2278      	movs	r2, #120	; 0x78
 8002c98:	2100      	movs	r1, #0
 8002c9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e05f      	b.n	8002d60 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d146      	bne.n	8002d3c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	03d1      	lsls	r1, r2, #15
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	; (8002d68 <UART_CheckIdleState+0x148>)
 8002cb8:	9200      	str	r2, [sp, #0]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f000 f858 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 8002cc0:	1e03      	subs	r3, r0, #0
 8002cc2:	d03b      	beq.n	8002d3c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cce:	2301      	movs	r3, #1
 8002cd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4921      	ldr	r1, [pc, #132]	; (8002d6c <UART_CheckIdleState+0x14c>)
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f383 8810 	msr	PRIMASK, r3
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfa:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cfc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8002d00:	2301      	movs	r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f383 8810 	msr	PRIMASK, r3
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2101      	movs	r1, #1
 8002d18:	438a      	bics	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f383 8810 	msr	PRIMASK, r3
}
 8002d26:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	2120      	movs	r1, #32
 8002d2e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2278      	movs	r2, #120	; 0x78
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e011      	b.n	8002d60 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	2120      	movs	r1, #32
 8002d48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2278      	movs	r2, #120	; 0x78
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b010      	add	sp, #64	; 0x40
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	01ffffff 	.word	0x01ffffff
 8002d6c:	fffffedf 	.word	0xfffffedf

08002d70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	1dfb      	adds	r3, r7, #7
 8002d7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d80:	e04b      	b.n	8002e1a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	3301      	adds	r3, #1
 8002d86:	d048      	beq.n	8002e1a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d88:	f7fd fdd2 	bl	8000930 <HAL_GetTick>
 8002d8c:	0002      	movs	r2, r0
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d302      	bcc.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e04b      	b.n	8002e3a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2204      	movs	r2, #4
 8002daa:	4013      	ands	r3, r2
 8002dac:	d035      	beq.n	8002e1a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2208      	movs	r2, #8
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d111      	bne.n	8002de0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 f9ca 	bl	8003160 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2284      	movs	r2, #132	; 0x84
 8002dd0:	2108      	movs	r1, #8
 8002dd2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2278      	movs	r2, #120	; 0x78
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e02c      	b.n	8002e3a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	401a      	ands	r2, r3
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d112      	bne.n	8002e1a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f000 f9ad 	bl	8003160 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2284      	movs	r2, #132	; 0x84
 8002e0a:	2120      	movs	r1, #32
 8002e0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2278      	movs	r2, #120	; 0x78
 8002e12:	2100      	movs	r1, #0
 8002e14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e00f      	b.n	8002e3a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	4013      	ands	r3, r2
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	425a      	negs	r2, r3
 8002e2a:	4153      	adcs	r3, r2
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	001a      	movs	r2, r3
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d0a4      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b090      	sub	sp, #64	; 0x40
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	1dbb      	adds	r3, r7, #6
 8002e50:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1dba      	adds	r2, r7, #6
 8002e5c:	2158      	movs	r1, #88	; 0x58
 8002e5e:	8812      	ldrh	r2, [r2, #0]
 8002e60:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1dba      	adds	r2, r7, #6
 8002e66:	215a      	movs	r1, #90	; 0x5a
 8002e68:	8812      	ldrh	r2, [r2, #0]
 8002e6a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	015b      	lsls	r3, r3, #5
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d10d      	bne.n	8002e9a <UART_Start_Receive_IT+0x56>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <UART_Start_Receive_IT+0x4c>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	225c      	movs	r2, #92	; 0x5c
 8002e8a:	4950      	ldr	r1, [pc, #320]	; (8002fcc <UART_Start_Receive_IT+0x188>)
 8002e8c:	5299      	strh	r1, [r3, r2]
 8002e8e:	e02e      	b.n	8002eee <UART_Start_Receive_IT+0xaa>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	225c      	movs	r2, #92	; 0x5c
 8002e94:	21ff      	movs	r1, #255	; 0xff
 8002e96:	5299      	strh	r1, [r3, r2]
 8002e98:	e029      	b.n	8002eee <UART_Start_Receive_IT+0xaa>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <UART_Start_Receive_IT+0x7a>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <UART_Start_Receive_IT+0x70>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	225c      	movs	r2, #92	; 0x5c
 8002eae:	21ff      	movs	r1, #255	; 0xff
 8002eb0:	5299      	strh	r1, [r3, r2]
 8002eb2:	e01c      	b.n	8002eee <UART_Start_Receive_IT+0xaa>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	225c      	movs	r2, #92	; 0x5c
 8002eb8:	217f      	movs	r1, #127	; 0x7f
 8002eba:	5299      	strh	r1, [r3, r2]
 8002ebc:	e017      	b.n	8002eee <UART_Start_Receive_IT+0xaa>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	055b      	lsls	r3, r3, #21
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d10d      	bne.n	8002ee6 <UART_Start_Receive_IT+0xa2>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <UART_Start_Receive_IT+0x98>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	225c      	movs	r2, #92	; 0x5c
 8002ed6:	217f      	movs	r1, #127	; 0x7f
 8002ed8:	5299      	strh	r1, [r3, r2]
 8002eda:	e008      	b.n	8002eee <UART_Start_Receive_IT+0xaa>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	225c      	movs	r2, #92	; 0x5c
 8002ee0:	213f      	movs	r1, #63	; 0x3f
 8002ee2:	5299      	strh	r1, [r3, r2]
 8002ee4:	e003      	b.n	8002eee <UART_Start_Receive_IT+0xaa>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	225c      	movs	r2, #92	; 0x5c
 8002eea:	2100      	movs	r1, #0
 8002eec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2284      	movs	r2, #132	; 0x84
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	2122      	movs	r1, #34	; 0x22
 8002efc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efe:	f3ef 8310 	mrs	r3, PRIMASK
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f08:	2301      	movs	r3, #1
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	f383 8810 	msr	PRIMASK, r3
}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2101      	movs	r1, #1
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f26:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	f383 8810 	msr	PRIMASK, r3
}
 8002f2e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	015b      	lsls	r3, r3, #5
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d107      	bne.n	8002f4c <UART_Start_Receive_IT+0x108>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <UART_Start_Receive_IT+0x18c>)
 8002f48:	669a      	str	r2, [r3, #104]	; 0x68
 8002f4a:	e002      	b.n	8002f52 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a21      	ldr	r2, [pc, #132]	; (8002fd4 <UART_Start_Receive_IT+0x190>)
 8002f50:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d019      	beq.n	8002f8e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f60:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
 8002f64:	2301      	movs	r3, #1
 8002f66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f383 8810 	msr	PRIMASK, r3
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2190      	movs	r1, #144	; 0x90
 8002f7c:	0049      	lsls	r1, r1, #1
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	f383 8810 	msr	PRIMASK, r3
}
 8002f8c:	e018      	b.n	8002fc0 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f92:	613b      	str	r3, [r7, #16]
  return(result);
 8002f94:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f98:	2301      	movs	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f383 8810 	msr	PRIMASK, r3
}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2120      	movs	r1, #32
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	f383 8810 	msr	PRIMASK, r3
}
 8002fbe:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b010      	add	sp, #64	; 0x40
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	000001ff 	.word	0x000001ff
 8002fd0:	08003659 	.word	0x08003659
 8002fd4:	080034a1 	.word	0x080034a1

08002fd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b090      	sub	sp, #64	; 0x40
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	1dbb      	adds	r3, r7, #6
 8002fe4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1dba      	adds	r2, r7, #6
 8002ff0:	2158      	movs	r1, #88	; 0x58
 8002ff2:	8812      	ldrh	r2, [r2, #0]
 8002ff4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2284      	movs	r2, #132	; 0x84
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	2122      	movs	r1, #34	; 0x22
 8003004:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	2b00      	cmp	r3, #0
 800300c:	d028      	beq.n	8003060 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	4a3e      	ldr	r2, [pc, #248]	; (800310c <UART_Start_Receive_DMA+0x134>)
 8003014:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <UART_Start_Receive_DMA+0x138>)
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003022:	4a3c      	ldr	r2, [pc, #240]	; (8003114 <UART_Start_Receive_DMA+0x13c>)
 8003024:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3324      	adds	r3, #36	; 0x24
 8003038:	0019      	movs	r1, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	001a      	movs	r2, r3
 8003040:	1dbb      	adds	r3, r7, #6
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	f7fd fda4 	bl	8000b90 <HAL_DMA_Start_IT>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d009      	beq.n	8003060 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2284      	movs	r2, #132	; 0x84
 8003050:	2110      	movs	r1, #16
 8003052:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2280      	movs	r2, #128	; 0x80
 8003058:	2120      	movs	r1, #32
 800305a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e050      	b.n	8003102 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d019      	beq.n	800309c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003068:	f3ef 8310 	mrs	r3, PRIMASK
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003072:	2301      	movs	r3, #1
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	f383 8810 	msr	PRIMASK, r3
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0049      	lsls	r1, r1, #1
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	f383 8810 	msr	PRIMASK, r3
}
 800309a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309c:	f3ef 8310 	mrs	r3, PRIMASK
 80030a0:	613b      	str	r3, [r7, #16]
  return(result);
 80030a2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a6:	2301      	movs	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f383 8810 	msr	PRIMASK, r3
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ce:	f3ef 8310 	mrs	r3, PRIMASK
 80030d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80030d4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
 80030d8:	2301      	movs	r3, #1
 80030da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	f383 8810 	msr	PRIMASK, r3
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b010      	add	sp, #64	; 0x40
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	08003229 	.word	0x08003229
 8003110:	08003355 	.word	0x08003355
 8003114:	08003397 	.word	0x08003397

08003118 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003120:	f3ef 8310 	mrs	r3, PRIMASK
 8003124:	60bb      	str	r3, [r7, #8]
  return(result);
 8003126:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	2301      	movs	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f383 8810 	msr	PRIMASK, r3
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	21c0      	movs	r1, #192	; 0xc0
 8003142:	438a      	bics	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f383 8810 	msr	PRIMASK, r3
}
 8003150:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b006      	add	sp, #24
 800315e:	bd80      	pop	{r7, pc}

08003160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08e      	sub	sp, #56	; 0x38
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003168:	f3ef 8310 	mrs	r3, PRIMASK
 800316c:	617b      	str	r3, [r7, #20]
  return(result);
 800316e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
 8003172:	2301      	movs	r3, #1
 8003174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f383 8810 	msr	PRIMASK, r3
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4926      	ldr	r1, [pc, #152]	; (8003224 <UART_EndRxTransfer+0xc4>)
 800318a:	400a      	ands	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800319a:	f3ef 8310 	mrs	r3, PRIMASK
 800319e:	623b      	str	r3, [r7, #32]
  return(result);
 80031a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
 80031a4:	2301      	movs	r3, #1
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	f383 8810 	msr	PRIMASK, r3
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2101      	movs	r1, #1
 80031bc:	438a      	bics	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	f383 8810 	msr	PRIMASK, r3
}
 80031ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d118      	bne.n	8003206 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d4:	f3ef 8310 	mrs	r3, PRIMASK
 80031d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80031da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031de:	2301      	movs	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f383 8810 	msr	PRIMASK, r3
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2110      	movs	r1, #16
 80031f6:	438a      	bics	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f383 8810 	msr	PRIMASK, r3
}
 8003204:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2280      	movs	r2, #128	; 0x80
 800320a:	2120      	movs	r1, #32
 800320c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	669a      	str	r2, [r3, #104]	; 0x68
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b00e      	add	sp, #56	; 0x38
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	fffffedf 	.word	0xfffffedf

08003228 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b094      	sub	sp, #80	; 0x50
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b20      	cmp	r3, #32
 800323c:	d06f      	beq.n	800331e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800323e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003240:	225a      	movs	r2, #90	; 0x5a
 8003242:	2100      	movs	r1, #0
 8003244:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003246:	f3ef 8310 	mrs	r3, PRIMASK
 800324a:	61bb      	str	r3, [r7, #24]
  return(result);
 800324c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800324e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003250:	2301      	movs	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f383 8810 	msr	PRIMASK, r3
}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	493a      	ldr	r1, [pc, #232]	; (8003350 <UART_DMAReceiveCplt+0x128>)
 8003268:	400a      	ands	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800326e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f383 8810 	msr	PRIMASK, r3
}
 8003276:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003278:	f3ef 8310 	mrs	r3, PRIMASK
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003280:	647b      	str	r3, [r7, #68]	; 0x44
 8003282:	2301      	movs	r3, #1
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	f383 8810 	msr	PRIMASK, r3
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2101      	movs	r1, #1
 800329a:	438a      	bics	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a4:	f383 8810 	msr	PRIMASK, r3
}
 80032a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032aa:	f3ef 8310 	mrs	r3, PRIMASK
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b2:	643b      	str	r3, [r7, #64]	; 0x40
 80032b4:	2301      	movs	r3, #1
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	f383 8810 	msr	PRIMASK, r3
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2140      	movs	r1, #64	; 0x40
 80032cc:	438a      	bics	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	f383 8810 	msr	PRIMASK, r3
}
 80032da:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	2120      	movs	r1, #32
 80032e2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d118      	bne.n	800331e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ec:	f3ef 8310 	mrs	r3, PRIMASK
 80032f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032f2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f6:	2301      	movs	r3, #1
 80032f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f383 8810 	msr	PRIMASK, r3
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2110      	movs	r1, #16
 800330e:	438a      	bics	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003314:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f383 8810 	msr	PRIMASK, r3
}
 800331c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800331e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003320:	2200      	movs	r2, #0
 8003322:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003328:	2b01      	cmp	r3, #1
 800332a:	d108      	bne.n	800333e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800332c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332e:	2258      	movs	r2, #88	; 0x58
 8003330:	5a9a      	ldrh	r2, [r3, r2]
 8003332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003334:	0011      	movs	r1, r2
 8003336:	0018      	movs	r0, r3
 8003338:	f7ff fa2a 	bl	8002790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800333c:	e003      	b.n	8003346 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800333e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003340:	0018      	movs	r0, r3
 8003342:	f7fc fff5 	bl	8000330 <HAL_UART_RxCpltCallback>
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b014      	add	sp, #80	; 0x50
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	fffffeff 	.word	0xfffffeff

08003354 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336c:	2b01      	cmp	r3, #1
 800336e:	d10a      	bne.n	8003386 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2258      	movs	r2, #88	; 0x58
 8003374:	5a9b      	ldrh	r3, [r3, r2]
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	0011      	movs	r1, r2
 800337e:	0018      	movs	r0, r3
 8003380:	f7ff fa06 	bl	8002790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003384:	e003      	b.n	800338e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0018      	movs	r0, r3
 800338a:	f7fc ffed 	bl	8000368 <HAL_UART_RxHalfCpltCallback>
}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}

08003396 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	589b      	ldr	r3, [r3, r2]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d10a      	bne.n	80033d6 <UART_DMAError+0x40>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b21      	cmp	r3, #33	; 0x21
 80033c4:	d107      	bne.n	80033d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2252      	movs	r2, #82	; 0x52
 80033ca:	2100      	movs	r1, #0
 80033cc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7ff fea1 	bl	8003118 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2240      	movs	r2, #64	; 0x40
 80033de:	4013      	ands	r3, r2
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d10a      	bne.n	80033fa <UART_DMAError+0x64>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b22      	cmp	r3, #34	; 0x22
 80033e8:	d107      	bne.n	80033fa <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	225a      	movs	r2, #90	; 0x5a
 80033ee:	2100      	movs	r1, #0
 80033f0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7ff feb3 	bl	8003160 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2284      	movs	r2, #132	; 0x84
 80033fe:	589b      	ldr	r3, [r3, r2]
 8003400:	2210      	movs	r2, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2184      	movs	r1, #132	; 0x84
 8003408:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	0018      	movs	r0, r3
 800340e:	f7ff f9b7 	bl	8002780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b006      	add	sp, #24
 8003418:	bd80      	pop	{r7, pc}

0800341a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	225a      	movs	r2, #90	; 0x5a
 800342c:	2100      	movs	r1, #0
 800342e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2252      	movs	r2, #82	; 0x52
 8003434:	2100      	movs	r1, #0
 8003436:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	0018      	movs	r0, r3
 800343c:	f7ff f9a0 	bl	8002780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b004      	add	sp, #16
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003450:	f3ef 8310 	mrs	r3, PRIMASK
 8003454:	60bb      	str	r3, [r7, #8]
  return(result);
 8003456:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	2301      	movs	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f383 8810 	msr	PRIMASK, r3
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2140      	movs	r1, #64	; 0x40
 8003472:	438a      	bics	r2, r1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f383 8810 	msr	PRIMASK, r3
}
 8003480:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0018      	movs	r0, r3
 8003492:	f7ff f96d 	bl	8002770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b006      	add	sp, #24
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b094      	sub	sp, #80	; 0x50
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80034a8:	204e      	movs	r0, #78	; 0x4e
 80034aa:	183b      	adds	r3, r7, r0
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	215c      	movs	r1, #92	; 0x5c
 80034b0:	5a52      	ldrh	r2, [r2, r1]
 80034b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	589b      	ldr	r3, [r3, r2]
 80034ba:	2b22      	cmp	r3, #34	; 0x22
 80034bc:	d000      	beq.n	80034c0 <UART_RxISR_8BIT+0x20>
 80034be:	e0ba      	b.n	8003636 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	214c      	movs	r1, #76	; 0x4c
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80034ca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	183b      	adds	r3, r7, r0
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b2d9      	uxtb	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	400a      	ands	r2, r1
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	225a      	movs	r2, #90	; 0x5a
 80034f0:	5a9b      	ldrh	r3, [r3, r2]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b299      	uxth	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	225a      	movs	r2, #90	; 0x5a
 80034fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	225a      	movs	r2, #90	; 0x5a
 8003502:	5a9b      	ldrh	r3, [r3, r2]
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d000      	beq.n	800350c <UART_RxISR_8BIT+0x6c>
 800350a:	e09c      	b.n	8003646 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003514:	64bb      	str	r3, [r7, #72]	; 0x48
 8003516:	2301      	movs	r3, #1
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4948      	ldr	r1, [pc, #288]	; (8003650 <UART_RxISR_8BIT+0x1b0>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	647b      	str	r3, [r7, #68]	; 0x44
 8003548:	2301      	movs	r3, #1
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	438a      	bics	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	2120      	movs	r1, #32
 8003576:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	4013      	ands	r3, r2
 8003590:	d018      	beq.n	80035c4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003592:	f3ef 8310 	mrs	r3, PRIMASK
 8003596:	61bb      	str	r3, [r7, #24]
  return(result);
 8003598:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
 800359c:	2301      	movs	r3, #1
 800359e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f383 8810 	msr	PRIMASK, r3
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4928      	ldr	r1, [pc, #160]	; (8003654 <UART_RxISR_8BIT+0x1b4>)
 80035b4:	400a      	ands	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	f383 8810 	msr	PRIMASK, r3
}
 80035c2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d12f      	bne.n	800362c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d2:	f3ef 8310 	mrs	r3, PRIMASK
 80035d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80035d8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035dc:	2301      	movs	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f383 8810 	msr	PRIMASK, r3
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2110      	movs	r1, #16
 80035f4:	438a      	bics	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	2210      	movs	r2, #16
 800360c:	4013      	ands	r3, r2
 800360e:	2b10      	cmp	r3, #16
 8003610:	d103      	bne.n	800361a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2210      	movs	r2, #16
 8003618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2258      	movs	r2, #88	; 0x58
 800361e:	5a9a      	ldrh	r2, [r3, r2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	0011      	movs	r1, r2
 8003624:	0018      	movs	r0, r3
 8003626:	f7ff f8b3 	bl	8002790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800362a:	e00c      	b.n	8003646 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	0018      	movs	r0, r3
 8003630:	f7fc fe7e 	bl	8000330 <HAL_UART_RxCpltCallback>
}
 8003634:	e007      	b.n	8003646 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2108      	movs	r1, #8
 8003642:	430a      	orrs	r2, r1
 8003644:	619a      	str	r2, [r3, #24]
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b014      	add	sp, #80	; 0x50
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	fffffedf 	.word	0xfffffedf
 8003654:	fbffffff 	.word	0xfbffffff

08003658 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b094      	sub	sp, #80	; 0x50
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003660:	204e      	movs	r0, #78	; 0x4e
 8003662:	183b      	adds	r3, r7, r0
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	215c      	movs	r1, #92	; 0x5c
 8003668:	5a52      	ldrh	r2, [r2, r1]
 800366a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	589b      	ldr	r3, [r3, r2]
 8003672:	2b22      	cmp	r3, #34	; 0x22
 8003674:	d000      	beq.n	8003678 <UART_RxISR_16BIT+0x20>
 8003676:	e0ba      	b.n	80037ee <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	214c      	movs	r1, #76	; 0x4c
 800367e:	187b      	adds	r3, r7, r1
 8003680:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003682:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800368a:	187b      	adds	r3, r7, r1
 800368c:	183a      	adds	r2, r7, r0
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	4013      	ands	r3, r2
 8003694:	b29a      	uxth	r2, r3
 8003696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003698:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	1c9a      	adds	r2, r3, #2
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	225a      	movs	r2, #90	; 0x5a
 80036a8:	5a9b      	ldrh	r3, [r3, r2]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b299      	uxth	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	225a      	movs	r2, #90	; 0x5a
 80036b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	225a      	movs	r2, #90	; 0x5a
 80036ba:	5a9b      	ldrh	r3, [r3, r2]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d000      	beq.n	80036c4 <UART_RxISR_16BIT+0x6c>
 80036c2:	e09c      	b.n	80037fe <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c4:	f3ef 8310 	mrs	r3, PRIMASK
 80036c8:	623b      	str	r3, [r7, #32]
  return(result);
 80036ca:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
 80036ce:	2301      	movs	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	f383 8810 	msr	PRIMASK, r3
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4948      	ldr	r1, [pc, #288]	; (8003808 <UART_RxISR_16BIT+0x1b0>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	f383 8810 	msr	PRIMASK, r3
}
 80036f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f6:	f3ef 8310 	mrs	r3, PRIMASK
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003700:	2301      	movs	r3, #1
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	f383 8810 	msr	PRIMASK, r3
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2101      	movs	r1, #1
 8003718:	438a      	bics	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	f383 8810 	msr	PRIMASK, r3
}
 8003726:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	2120      	movs	r1, #32
 800372e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	4013      	ands	r3, r2
 8003748:	d018      	beq.n	800377c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374a:	f3ef 8310 	mrs	r3, PRIMASK
 800374e:	617b      	str	r3, [r7, #20]
  return(result);
 8003750:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003754:	2301      	movs	r3, #1
 8003756:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f383 8810 	msr	PRIMASK, r3
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4928      	ldr	r1, [pc, #160]	; (800380c <UART_RxISR_16BIT+0x1b4>)
 800376c:	400a      	ands	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f383 8810 	msr	PRIMASK, r3
}
 800377a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003780:	2b01      	cmp	r3, #1
 8003782:	d12f      	bne.n	80037e4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003790:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
 8003794:	2301      	movs	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2110      	movs	r1, #16
 80037ac:	438a      	bics	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2210      	movs	r2, #16
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d103      	bne.n	80037d2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2210      	movs	r2, #16
 80037d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2258      	movs	r2, #88	; 0x58
 80037d6:	5a9a      	ldrh	r2, [r3, r2]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f7fe ffd7 	bl	8002790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037e2:	e00c      	b.n	80037fe <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7fc fda2 	bl	8000330 <HAL_UART_RxCpltCallback>
}
 80037ec:	e007      	b.n	80037fe <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2108      	movs	r1, #8
 80037fa:	430a      	orrs	r2, r1
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b014      	add	sp, #80	; 0x50
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	fffffedf 	.word	0xfffffedf
 800380c:	fbffffff 	.word	0xfbffffff

08003810 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}

08003820 <ares_lidar_dma_irq_handler>:
#include "vl53l1x_ares_lidar.h"

void ares_lidar_dma_irq_handler(ares_lidar_t * lidar){
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	static uint8_t reading_head=0, wait_for_head_cmp=0, wait_for_fill=0;;
	uint8_t reading_head_limit=0;
 8003828:	210f      	movs	r1, #15
 800382a:	187b      	adds	r3, r7, r1
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]

	if((reading_head >= LIDAR_FRAME_SIZE) && reading_head < (LIDAR_FRAME_SIZE<<1)){	reading_head_limit = LIDAR_FRAME_SIZE<<1;				}
 8003830:	4b9f      	ldr	r3, [pc, #636]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b71      	cmp	r3, #113	; 0x71
 8003836:	d907      	bls.n	8003848 <ares_lidar_dma_irq_handler+0x28>
 8003838:	4b9d      	ldr	r3, [pc, #628]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2be3      	cmp	r3, #227	; 0xe3
 800383e:	d803      	bhi.n	8003848 <ares_lidar_dma_irq_handler+0x28>
 8003840:	187b      	adds	r3, r7, r1
 8003842:	22e4      	movs	r2, #228	; 0xe4
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e00f      	b.n	8003868 <ares_lidar_dma_irq_handler+0x48>
	else if(reading_head >= (LIDAR_FRAME_SIZE<<1)){									reading_head_limit = LIDAR_FRAME_SIZE;
 8003848:	4b99      	ldr	r3, [pc, #612]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2be3      	cmp	r3, #227	; 0xe3
 800384e:	d907      	bls.n	8003860 <ares_lidar_dma_irq_handler+0x40>
 8003850:	230f      	movs	r3, #15
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	2272      	movs	r2, #114	; 0x72
 8003856:	701a      	strb	r2, [r3, #0]
																					reading_head = 0;}
 8003858:	4b95      	ldr	r3, [pc, #596]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e119      	b.n	8003a94 <ares_lidar_dma_irq_handler+0x274>
	else{																			reading_head_limit = LIDAR_FRAME_SIZE;					}
 8003860:	230f      	movs	r3, #15
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2272      	movs	r2, #114	; 0x72
 8003866:	701a      	strb	r2, [r3, #0]

	for(; reading_head < reading_head_limit; reading_head++)
 8003868:	e114      	b.n	8003a94 <ares_lidar_dma_irq_handler+0x274>
	{
		switch(lidar->parsing_status)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d05e      	beq.n	8003930 <ares_lidar_dma_irq_handler+0x110>
 8003872:	dd00      	ble.n	8003876 <ares_lidar_dma_irq_handler+0x56>
 8003874:	e108      	b.n	8003a88 <ares_lidar_dma_irq_handler+0x268>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <ares_lidar_dma_irq_handler+0x60>
 800387a:	2b01      	cmp	r3, #1
 800387c:	d01e      	beq.n	80038bc <ares_lidar_dma_irq_handler+0x9c>
 800387e:	e103      	b.n	8003a88 <ares_lidar_dma_irq_handler+0x268>
		{
			case BEGIN 			:
				if(	lidar->rx_storage[reading_head] == 0xFF ){
 8003880:	4b8b      	ldr	r3, [pc, #556]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	001a      	movs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	189b      	adds	r3, r3, r2
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	2bff      	cmp	r3, #255	; 0xff
 800388e:	d106      	bne.n	800389e <ares_lidar_dma_irq_handler+0x7e>
					wait_for_head_cmp++;}
 8003890:	4b88      	ldr	r3, [pc, #544]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	b2da      	uxtb	r2, r3
 8003898:	4b86      	ldr	r3, [pc, #536]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e002      	b.n	80038a4 <ares_lidar_dma_irq_handler+0x84>
				else
					wait_for_head_cmp = 0;
 800389e:	4b85      	ldr	r3, [pc, #532]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]

				if(wait_for_head_cmp > 5){
 80038a4:	4b83      	ldr	r3, [pc, #524]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d800      	bhi.n	80038ae <ares_lidar_dma_irq_handler+0x8e>
 80038ac:	e0e7      	b.n	8003a7e <ares_lidar_dma_irq_handler+0x25e>
					wait_for_head_cmp = 0;
 80038ae:	4b81      	ldr	r3, [pc, #516]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
					lidar->parsing_status = INFO;}
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
				break;
 80038ba:	e0e0      	b.n	8003a7e <ares_lidar_dma_irq_handler+0x25e>

			case INFO			:
				if(	wait_for_head_cmp == 0 ){
 80038bc:	4b7d      	ldr	r3, [pc, #500]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10e      	bne.n	80038e2 <ares_lidar_dma_irq_handler+0xc2>
					lidar->active_sensor = lidar->rx_storage[reading_head];
 80038c4:	4b7a      	ldr	r3, [pc, #488]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	001a      	movs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	189b      	adds	r3, r3, r2
 80038ce:	791a      	ldrb	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	705a      	strb	r2, [r3, #1]
					wait_for_head_cmp++;}
 80038d4:	4b77      	ldr	r3, [pc, #476]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	3301      	adds	r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	4b75      	ldr	r3, [pc, #468]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80038de:	701a      	strb	r2, [r3, #0]
					wait_for_head_cmp++;}
				else if(wait_for_head_cmp > 1){
					lidar->measure_number = lidar->rx_storage[reading_head];
					wait_for_head_cmp = 0;
					lidar->parsing_status = DISTANCE_MES;}
				break;
 80038e0:	e0cf      	b.n	8003a82 <ares_lidar_dma_irq_handler+0x262>
				else if(wait_for_head_cmp == 1){
 80038e2:	4b74      	ldr	r3, [pc, #464]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d10e      	bne.n	8003908 <ares_lidar_dma_irq_handler+0xe8>
					lidar->ROI_number = lidar->rx_storage[reading_head];
 80038ea:	4b71      	ldr	r3, [pc, #452]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	001a      	movs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	189b      	adds	r3, r3, r2
 80038f4:	791a      	ldrb	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	709a      	strb	r2, [r3, #2]
					wait_for_head_cmp++;}
 80038fa:	4b6e      	ldr	r3, [pc, #440]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	3301      	adds	r3, #1
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4b6c      	ldr	r3, [pc, #432]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003904:	701a      	strb	r2, [r3, #0]
				break;
 8003906:	e0bc      	b.n	8003a82 <ares_lidar_dma_irq_handler+0x262>
				else if(wait_for_head_cmp > 1){
 8003908:	4b6a      	ldr	r3, [pc, #424]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d800      	bhi.n	8003912 <ares_lidar_dma_irq_handler+0xf2>
 8003910:	e0b7      	b.n	8003a82 <ares_lidar_dma_irq_handler+0x262>
					lidar->measure_number = lidar->rx_storage[reading_head];
 8003912:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	001a      	movs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	189b      	adds	r3, r3, r2
 800391c:	791a      	ldrb	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	70da      	strb	r2, [r3, #3]
					wait_for_head_cmp = 0;
 8003922:	4b64      	ldr	r3, [pc, #400]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
					lidar->parsing_status = DISTANCE_MES;}
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	701a      	strb	r2, [r3, #0]
				break;
 800392e:	e0a8      	b.n	8003a82 <ares_lidar_dma_irq_handler+0x262>

			case DISTANCE_MES	:
				if(	wait_for_fill%3 == 0 && (wait_for_head_cmp < lidar->measure_number)){
 8003930:	4b61      	ldr	r3, [pc, #388]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2103      	movs	r1, #3
 8003936:	0018      	movs	r0, r3
 8003938:	f7fc fc6c 	bl	8000214 <__aeabi_uidivmod>
 800393c:	000b      	movs	r3, r1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d11a      	bne.n	800397a <ares_lidar_dma_irq_handler+0x15a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	78da      	ldrb	r2, [r3, #3]
 8003948:	4b5a      	ldr	r3, [pc, #360]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d914      	bls.n	800397a <ares_lidar_dma_irq_handler+0x15a>
					lidar->measure[wait_for_head_cmp][0] = lidar->rx_storage[reading_head];
 8003950:	4b57      	ldr	r3, [pc, #348]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	001a      	movs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	189b      	adds	r3, r3, r2
 800395a:	7919      	ldrb	r1, [r3, #4]
 800395c:	4b55      	ldr	r3, [pc, #340]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	001a      	movs	r2, r3
 8003962:	b289      	uxth	r1, r1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	323a      	adds	r2, #58	; 0x3a
 8003968:	0092      	lsls	r2, r2, #2
 800396a:	52d1      	strh	r1, [r2, r3]
					wait_for_fill++;}
 800396c:	4b52      	ldr	r3, [pc, #328]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	4b50      	ldr	r3, [pc, #320]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e071      	b.n	8003a5e <ares_lidar_dma_irq_handler+0x23e>
				else if((wait_for_fill%3 == 1) && (wait_for_head_cmp < lidar->measure_number)){
 800397a:	4b4f      	ldr	r3, [pc, #316]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2103      	movs	r1, #3
 8003980:	0018      	movs	r0, r3
 8003982:	f7fc fc47 	bl	8000214 <__aeabi_uidivmod>
 8003986:	000b      	movs	r3, r1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d130      	bne.n	80039f0 <ares_lidar_dma_irq_handler+0x1d0>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	78da      	ldrb	r2, [r3, #3]
 8003992:	4b48      	ldr	r3, [pc, #288]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d92a      	bls.n	80039f0 <ares_lidar_dma_irq_handler+0x1d0>
					lidar->measure[wait_for_head_cmp][1] = (uint16_t) lidar->rx_storage[reading_head];
 800399a:	4b45      	ldr	r3, [pc, #276]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	001a      	movs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	791a      	ldrb	r2, [r3, #4]
 80039a6:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b290      	uxth	r0, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	21ea      	movs	r1, #234	; 0xea
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	18d3      	adds	r3, r2, r3
 80039b4:	185b      	adds	r3, r3, r1
 80039b6:	1c02      	adds	r2, r0, #0
 80039b8:	801a      	strh	r2, [r3, #0]
					lidar->measure[wait_for_head_cmp][1] = lidar->measure[wait_for_head_cmp][1] <<8;
 80039ba:	4b3e      	ldr	r3, [pc, #248]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	21ea      	movs	r1, #234	; 0xea
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	18d3      	adds	r3, r2, r3
 80039c6:	185b      	adds	r3, r3, r1
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	4a3a      	ldr	r2, [pc, #232]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	0014      	movs	r4, r2
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	b298      	uxth	r0, r3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	21ea      	movs	r1, #234	; 0xea
 80039d8:	00a3      	lsls	r3, r4, #2
 80039da:	18d3      	adds	r3, r2, r3
 80039dc:	185b      	adds	r3, r3, r1
 80039de:	1c02      	adds	r2, r0, #0
 80039e0:	801a      	strh	r2, [r3, #0]
					wait_for_fill++;}
 80039e2:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e036      	b.n	8003a5e <ares_lidar_dma_irq_handler+0x23e>
				else if((wait_for_fill%3 == 2) && (wait_for_head_cmp < lidar->measure_number)){
 80039f0:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2103      	movs	r1, #3
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7fc fc0c 	bl	8000214 <__aeabi_uidivmod>
 80039fc:	000b      	movs	r3, r1
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d12c      	bne.n	8003a5e <ares_lidar_dma_irq_handler+0x23e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	78da      	ldrb	r2, [r3, #3]
 8003a08:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d926      	bls.n	8003a5e <ares_lidar_dma_irq_handler+0x23e>
					lidar->measure[wait_for_head_cmp][1] = lidar->measure[wait_for_head_cmp][1] + (uint16_t) lidar->rx_storage[reading_head];
 8003a10:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	21ea      	movs	r1, #234	; 0xea
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	18d3      	adds	r3, r2, r3
 8003a1c:	185b      	adds	r3, r3, r1
 8003a1e:	881a      	ldrh	r2, [r3, #0]
 8003a20:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	185b      	adds	r3, r3, r1
 8003a2a:	791b      	ldrb	r3, [r3, #4]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	4921      	ldr	r1, [pc, #132]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003a30:	7809      	ldrb	r1, [r1, #0]
 8003a32:	000c      	movs	r4, r1
 8003a34:	18d3      	adds	r3, r2, r3
 8003a36:	b298      	uxth	r0, r3
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	21ea      	movs	r1, #234	; 0xea
 8003a3c:	00a3      	lsls	r3, r4, #2
 8003a3e:	18d3      	adds	r3, r2, r3
 8003a40:	185b      	adds	r3, r3, r1
 8003a42:	1c02      	adds	r2, r0, #0
 8003a44:	801a      	strh	r2, [r3, #0]
					wait_for_fill++;
 8003a46:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 8003a50:	701a      	strb	r2, [r3, #0]
					wait_for_head_cmp++;}
 8003a52:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003a5c:	701a      	strb	r2, [r3, #0]

				if(wait_for_head_cmp >= lidar->measure_number){
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	78da      	ldrb	r2, [r3, #3]
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d80d      	bhi.n	8003a86 <ares_lidar_dma_irq_handler+0x266>
					wait_for_fill = 0;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <ares_lidar_dma_irq_handler+0x298>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
					wait_for_head_cmp = 0;
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <ares_lidar_dma_irq_handler+0x294>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
					lidar->parsing_status = BEGIN;}
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
				break;
 8003a7c:	e003      	b.n	8003a86 <ares_lidar_dma_irq_handler+0x266>
				break;
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	e002      	b.n	8003a88 <ares_lidar_dma_irq_handler+0x268>
				break;
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	e000      	b.n	8003a88 <ares_lidar_dma_irq_handler+0x268>
				break;
 8003a86:	46c0      	nop			; (mov r8, r8)
	for(; reading_head < reading_head_limit; reading_head++)
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <ares_lidar_dma_irq_handler+0x290>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	220f      	movs	r2, #15
 8003a9a:	18ba      	adds	r2, r7, r2
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d900      	bls.n	8003aa4 <ares_lidar_dma_irq_handler+0x284>
 8003aa2:	e6e2      	b.n	800386a <ares_lidar_dma_irq_handler+0x4a>
		}
	}
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b005      	add	sp, #20
 8003aac:	bd90      	pop	{r4, r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	200002a8 	.word	0x200002a8
 8003ab4:	200002a9 	.word	0x200002a9
 8003ab8:	200002aa 	.word	0x200002aa

08003abc <memset>:
 8003abc:	0003      	movs	r3, r0
 8003abe:	1882      	adds	r2, r0, r2
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <memset+0xa>
 8003ac4:	4770      	bx	lr
 8003ac6:	7019      	strb	r1, [r3, #0]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	e7f9      	b.n	8003ac0 <memset+0x4>

08003acc <__libc_init_array>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	2600      	movs	r6, #0
 8003ad0:	4c0c      	ldr	r4, [pc, #48]	; (8003b04 <__libc_init_array+0x38>)
 8003ad2:	4d0d      	ldr	r5, [pc, #52]	; (8003b08 <__libc_init_array+0x3c>)
 8003ad4:	1b64      	subs	r4, r4, r5
 8003ad6:	10a4      	asrs	r4, r4, #2
 8003ad8:	42a6      	cmp	r6, r4
 8003ada:	d109      	bne.n	8003af0 <__libc_init_array+0x24>
 8003adc:	2600      	movs	r6, #0
 8003ade:	f000 f819 	bl	8003b14 <_init>
 8003ae2:	4c0a      	ldr	r4, [pc, #40]	; (8003b0c <__libc_init_array+0x40>)
 8003ae4:	4d0a      	ldr	r5, [pc, #40]	; (8003b10 <__libc_init_array+0x44>)
 8003ae6:	1b64      	subs	r4, r4, r5
 8003ae8:	10a4      	asrs	r4, r4, #2
 8003aea:	42a6      	cmp	r6, r4
 8003aec:	d105      	bne.n	8003afa <__libc_init_array+0x2e>
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	00b3      	lsls	r3, r6, #2
 8003af2:	58eb      	ldr	r3, [r5, r3]
 8003af4:	4798      	blx	r3
 8003af6:	3601      	adds	r6, #1
 8003af8:	e7ee      	b.n	8003ad8 <__libc_init_array+0xc>
 8003afa:	00b3      	lsls	r3, r6, #2
 8003afc:	58eb      	ldr	r3, [r5, r3]
 8003afe:	4798      	blx	r3
 8003b00:	3601      	adds	r6, #1
 8003b02:	e7f2      	b.n	8003aea <__libc_init_array+0x1e>
 8003b04:	08003b64 	.word	0x08003b64
 8003b08:	08003b64 	.word	0x08003b64
 8003b0c:	08003b68 	.word	0x08003b68
 8003b10:	08003b64 	.word	0x08003b64

08003b14 <_init>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr

08003b20 <_fini>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr
