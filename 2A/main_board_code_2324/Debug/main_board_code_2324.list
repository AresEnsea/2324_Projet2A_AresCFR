
main_board_code_2324.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  0800ed60  0800ed60  0001ed60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f658  0800f658  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f658  0800f658  0001f658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f660  0800f660  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f660  0800f660  0001f660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f664  0800f664  0001f664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f668  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018bc  200001e8  0800f850  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aa4  0800f850  00021aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001598f  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be3  00000000  00000000  00035bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  000397d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df5  00000000  00000000  0003aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025efc  00000000  00000000  0003b805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019708  00000000  00000000  00061701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4174  00000000  00000000  0007ae09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f74  00000000  00000000  0014ef80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00154ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ed48 	.word	0x0800ed48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800ed48 	.word	0x0800ed48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_DMA_Init+0x3c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	200d      	movs	r0, #13
 8000fac:	f001 fe23 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000fb0:	200d      	movs	r0, #13
 8000fb2:	f001 fe3c 	bl	8002c2e <HAL_NVIC_EnableIRQ>

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b48      	ldr	r3, [pc, #288]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a47      	ldr	r2, [pc, #284]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b45      	ldr	r3, [pc, #276]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b41      	ldr	r3, [pc, #260]	; (8001100 <MX_GPIO_Init+0x13c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a40      	ldr	r2, [pc, #256]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a39      	ldr	r2, [pc, #228]	; (8001100 <MX_GPIO_Init+0x13c>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b37      	ldr	r3, [pc, #220]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a32      	ldr	r2, [pc, #200]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <MX_GPIO_Init+0x13c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f640 0107 	movw	r1, #2055	; 0x807
 8001050:	482c      	ldr	r0, [pc, #176]	; (8001104 <MX_GPIO_Init+0x140>)
 8001052:	f002 fbb5 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	482b      	ldr	r0, [pc, #172]	; (8001108 <MX_GPIO_Init+0x144>)
 800105c:	f002 fbb0 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEAM_LED_GPIO_Port, TEAM_LED_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001066:	4829      	ldr	r0, [pc, #164]	; (800110c <MX_GPIO_Init+0x148>)
 8001068:	f002 fbaa 	bl	80037c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = L_MOTOR_EN_Pin|R_MOTOR_EN_Pin|L_MOTOR_DIR_Pin|R_MOTOR_DIR_Pin;
 800106c:	f640 0307 	movw	r3, #2055	; 0x807
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	481f      	ldr	r0, [pc, #124]	; (8001104 <MX_GPIO_Init+0x140>)
 8001086:	f002 f9ef 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800108a:	2320      	movs	r3, #32
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4819      	ldr	r0, [pc, #100]	; (8001108 <MX_GPIO_Init+0x144>)
 80010a2:	f002 f9e1 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_Pin;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WIFI_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <MX_GPIO_Init+0x148>)
 80010ba:	f002 f9d5 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_Pin;
 80010be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <MX_GPIO_Init+0x140>)
 80010d4:	f002 f9c8 	bl	8003468 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEAM_LED_Pin;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEAM_LED_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <MX_GPIO_Init+0x148>)
 80010f2:	f002 f9b9 	bl	8003468 <HAL_GPIO_Init>

}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40020800 	.word	0x40020800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400

08001110 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e00b      	b.n	800113a <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	1c4b      	adds	r3, r1, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800112c:	2201      	movs	r2, #1
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <_write+0x3c>)
 8001130:	f004 fb8b 	bl	800584a <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	dbef      	blt.n	8001122 <_write+0x12>
	}
	return len;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000055c 	.word	0x2000055c

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b090      	sub	sp, #64	; 0x40
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f001 fbdd 	bl	8002914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 fa97 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f7ff ff31 	bl	8000fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001162:	f7ff ff0f 	bl	8000f84 <MX_DMA_Init>
  MX_TIM1_Init();
 8001166:	f000 fc8f 	bl	8001a88 <MX_TIM1_Init>
  MX_TIM8_Init();
 800116a:	f000 fe8d 	bl	8001e88 <MX_TIM8_Init>
  MX_TIM11_Init();
 800116e:	f000 ff2b 	bl	8001fc8 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001172:	f000 fd2f 	bl	8001bd4 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001176:	f000 fe51 	bl	8001e1c <MX_TIM7_Init>
  MX_TIM2_Init();
 800117a:	f000 fcdd 	bl	8001b38 <MX_TIM2_Init>
  MX_TIM6_Init();
 800117e:	f000 fe17 	bl	8001db0 <MX_TIM6_Init>
  MX_TIM4_Init();
 8001182:	f000 fd7b 	bl	8001c7c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001186:	f001 f995 	bl	80024b4 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800118a:	f000 fdc3 	bl	8001d14 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 800118e:	f001 f9bb 	bl	8002508 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8001192:	f001 f911 	bl	80023b8 <MX_UART4_Init>
  MX_UART5_Init();
 8001196:	f001 f939 	bl	800240c <MX_UART5_Init>
  MX_USART1_UART_Init();
 800119a:	f001 f961 	bl	8002460 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800119e:	4891      	ldr	r0, [pc, #580]	; (80013e4 <main+0x294>)
 80011a0:	f003 f9b0 	bl	8004504 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80011a4:	4890      	ldr	r0, [pc, #576]	; (80013e8 <main+0x298>)
 80011a6:	f003 f9ad 	bl	8004504 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80011aa:	4890      	ldr	r0, [pc, #576]	; (80013ec <main+0x29c>)
 80011ac:	f003 fa12 	bl	80045d4 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart6, pData, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	498f      	ldr	r1, [pc, #572]	; (80013f0 <main+0x2a0>)
 80011b4:	488f      	ldr	r0, [pc, #572]	; (80013f4 <main+0x2a4>)
 80011b6:	f004 fbda 	bl	800596e <HAL_UART_Receive_IT>
  printf("Initializing propulsion system...");
 80011ba:	488f      	ldr	r0, [pc, #572]	; (80013f8 <main+0x2a8>)
 80011bc:	f009 fb6e 	bl	800a89c <iprintf>
  propulsion_initialize();
 80011c0:	f007 f932 	bl	8008428 <propulsion_initialize>
  propulsion_disableMotors();
 80011c4:	f007 f978 	bl	80084b8 <propulsion_disableMotors>
  avoidance_initialize();
 80011c8:	f005 fd62 	bl	8006c90 <avoidance_initialize>
  HAL_Delay(200);
 80011cc:	20c8      	movs	r0, #200	; 0xc8
 80011ce:	f001 fc13 	bl	80029f8 <HAL_Delay>
  printf(" Done.\r\n");
 80011d2:	488a      	ldr	r0, [pc, #552]	; (80013fc <main+0x2ac>)
 80011d4:	f009 fbc8 	bl	800a968 <puts>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  //printf("Initializing strategy...");
  Strategy* strategy;
  int curveIndex = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
  int onSiteActionIndex = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
  int onMoveActionIndex = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30

  robot.waitingForOnSiteAction = false;
 80011e4:	4b86      	ldr	r3, [pc, #536]	; (8001400 <main+0x2b0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  robot.waitingForOnMoveAction = false;
 80011ea:	4b85      	ldr	r3, [pc, #532]	; (8001400 <main+0x2b0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
  robot.team = YELLOW;
 80011f0:	4b83      	ldr	r3, [pc, #524]	; (8001400 <main+0x2b0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  float t = 0;
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  HAL_Delay(200);
 80011fe:	20c8      	movs	r0, #200	; 0xc8
 8001200:	f001 fbfa 	bl	80029f8 <HAL_Delay>
  printf(" Done.\r\n");
 8001204:	487d      	ldr	r0, [pc, #500]	; (80013fc <main+0x2ac>)
 8001206:	f009 fbaf 	bl	800a968 <puts>

  //HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
  printf("Initializing lidar...");
 800120a:	487e      	ldr	r0, [pc, #504]	; (8001404 <main+0x2b4>)
 800120c:	f009 fb46 	bl	800a89c <iprintf>
  lidar_initialize();
 8001210:	f006 fd6c 	bl	8007cec <lidar_initialize>
  HAL_Delay(200);
 8001214:	20c8      	movs	r0, #200	; 0xc8
 8001216:	f001 fbef 	bl	80029f8 <HAL_Delay>
  printf(" Done.\r\n");
 800121a:	4878      	ldr	r0, [pc, #480]	; (80013fc <main+0x2ac>)
 800121c:	f009 fba4 	bl	800a968 <puts>

  bool waitingForMatchStart = true;
 8001220:	2301      	movs	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28

  printf("Waiting for start...\r\n");
 8001224:	4878      	ldr	r0, [pc, #480]	; (8001408 <main+0x2b8>)
 8001226:	f009 fb9f 	bl	800a968 <puts>
  pData[0] = 'o';
 800122a:	4b71      	ldr	r3, [pc, #452]	; (80013f0 <main+0x2a0>)
 800122c:	226f      	movs	r2, #111	; 0x6f
 800122e:	701a      	strb	r2, [r3, #0]
  int a = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  while ((waitingForMatchStart == true)) {
 8001234:	e06c      	b.n	8001310 <main+0x1c0>
  	  waitingForMatchStart = HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 8001236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123a:	4874      	ldr	r0, [pc, #464]	; (800140c <main+0x2bc>)
 800123c:	f002 faa8 	bl	8003790 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  	  if(wifiDataRX==0x84){
 8001244:	4b72      	ldr	r3, [pc, #456]	; (8001410 <main+0x2c0>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b84      	cmp	r3, #132	; 0x84
 800124a:	d106      	bne.n	800125a <main+0x10a>
  		  waitingForMatchStart=0;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  		  strategy = strategy_initialize(7);
 8001250:	2007      	movs	r0, #7
 8001252:	f008 f8bf 	bl	80093d4 <strategy_initialize>
 8001256:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001258:	e05a      	b.n	8001310 <main+0x1c0>
  		  //WifiUartTXActivation();
  	  }
  	  else if((pData[0] >= '0' && pData[0] <= '9')  && a == 0)
 800125a:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <main+0x2a0>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b2f      	cmp	r3, #47	; 0x2f
 8001260:	d956      	bls.n	8001310 <main+0x1c0>
 8001262:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <main+0x2a0>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b39      	cmp	r3, #57	; 0x39
 8001268:	d852      	bhi.n	8001310 <main+0x1c0>
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	2b00      	cmp	r3, #0
 800126e:	d14f      	bne.n	8001310 <main+0x1c0>
  	  {
  		  a = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  	  	  switch(pData[0])
 8001274:	4b5e      	ldr	r3, [pc, #376]	; (80013f0 <main+0x2a0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3b30      	subs	r3, #48	; 0x30
 800127a:	2b05      	cmp	r3, #5
 800127c:	d847      	bhi.n	800130e <main+0x1be>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <main+0x134>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012ad 	.word	0x080012ad
 800128c:	080012c3 	.word	0x080012c3
 8001290:	080012d3 	.word	0x080012d3
 8001294:	080012e9 	.word	0x080012e9
 8001298:	080012ff 	.word	0x080012ff
  	      	{
  	  	  	case '0':
  	  	  		printf("Initializing strategy...0");
 800129c:	485d      	ldr	r0, [pc, #372]	; (8001414 <main+0x2c4>)
 800129e:	f009 fafd 	bl	800a89c <iprintf>
  	  	  		strategy = strategy_initialize(0);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f008 f896 	bl	80093d4 <strategy_initialize>
 80012a8:	63f8      	str	r0, [r7, #60]	; 0x3c
  	       	    break;
 80012aa:	e031      	b.n	8001310 <main+0x1c0>
  	      	case '1':
  	      		printf("Initializing strategy...1");
 80012ac:	485a      	ldr	r0, [pc, #360]	; (8001418 <main+0x2c8>)
 80012ae:	f009 faf5 	bl	800a89c <iprintf>
  	      		strategy = strategy_initialize(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f008 f88e 	bl	80093d4 <strategy_initialize>
 80012b8:	63f8      	str	r0, [r7, #60]	; 0x3c
  	      		switchTeam(strategy);
 80012ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012bc:	f008 fb86 	bl	80099cc <switchTeam>
  	            break;
 80012c0:	e026      	b.n	8001310 <main+0x1c0>
  	      	case '2':
  	      		printf("Initializing strategy...2");
 80012c2:	4856      	ldr	r0, [pc, #344]	; (800141c <main+0x2cc>)
 80012c4:	f009 faea 	bl	800a89c <iprintf>
  	      		strategy = strategy_initialize(2);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f008 f883 	bl	80093d4 <strategy_initialize>
 80012ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  	      		break;
 80012d0:	e01e      	b.n	8001310 <main+0x1c0>
  	        case '3':
  	        	printf("Initializing strategy...3");
 80012d2:	4853      	ldr	r0, [pc, #332]	; (8001420 <main+0x2d0>)
 80012d4:	f009 fae2 	bl	800a89c <iprintf>
  	        	strategy = strategy_initialize(3);
 80012d8:	2003      	movs	r0, #3
 80012da:	f008 f87b 	bl	80093d4 <strategy_initialize>
 80012de:	63f8      	str	r0, [r7, #60]	; 0x3c
  	        	switchTeam(strategy);
 80012e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012e2:	f008 fb73 	bl	80099cc <switchTeam>
  	        	break;
 80012e6:	e013      	b.n	8001310 <main+0x1c0>
  	        case '4':
  	        	printf("Initializing strategy...4");
 80012e8:	484e      	ldr	r0, [pc, #312]	; (8001424 <main+0x2d4>)
 80012ea:	f009 fad7 	bl	800a89c <iprintf>
  	        	strategy = strategy_initialize(4);
 80012ee:	2004      	movs	r0, #4
 80012f0:	f008 f870 	bl	80093d4 <strategy_initialize>
 80012f4:	63f8      	str	r0, [r7, #60]	; 0x3c
  	        	switchTeam(strategy);
 80012f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012f8:	f008 fb68 	bl	80099cc <switchTeam>
  	        	break;
 80012fc:	e008      	b.n	8001310 <main+0x1c0>
  	        case '5':
  	        	printf("Initializing strategy...5");
 80012fe:	484a      	ldr	r0, [pc, #296]	; (8001428 <main+0x2d8>)
 8001300:	f009 facc 	bl	800a89c <iprintf>
  	        	strategy = strategy_initialize(5);
 8001304:	2005      	movs	r0, #5
 8001306:	f008 f865 	bl	80093d4 <strategy_initialize>
 800130a:	63f8      	str	r0, [r7, #60]	; 0x3c
  	            break;
 800130c:	e000      	b.n	8001310 <main+0x1c0>
  	        default:
  	            break;
 800130e:	bf00      	nop
  while ((waitingForMatchStart == true)) {
 8001310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001312:	2b01      	cmp	r3, #1
 8001314:	d08f      	beq.n	8001236 <main+0xe6>
  	      	}
  	  }
  }
  propulsion_enableMotors();
 8001316:	f007 f8bf 	bl	8008498 <propulsion_enableMotors>

  printf("Initializing odometry...");
 800131a:	4844      	ldr	r0, [pc, #272]	; (800142c <main+0x2dc>)
 800131c:	f009 fabe 	bl	800a89c <iprintf>
  Vector2 start = strategy->path[0]->p1;
 8001320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800132e:	e883 0003 	stmia.w	r3, {r0, r1}
  Vector2 startTangent = strategy->path[0]->p2;
 8001332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	3208      	adds	r2, #8
 800133e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001342:	e883 0003 	stmia.w	r3, {r0, r1}
  float startAngle = vector2_angle(vector2_diff(startTangent, start));
 8001346:	ed97 6a04 	vldr	s12, [r7, #16]
 800134a:	edd7 6a05 	vldr	s13, [r7, #20]
 800134e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001352:	edd7 7a03 	vldr	s15, [r7, #12]
 8001356:	eeb0 1a46 	vmov.f32	s2, s12
 800135a:	eef0 1a66 	vmov.f32	s3, s13
 800135e:	eeb0 0a47 	vmov.f32	s0, s14
 8001362:	eef0 0a67 	vmov.f32	s1, s15
 8001366:	f008 fc4f 	bl	8009c08 <vector2_diff>
 800136a:	eeb0 7a40 	vmov.f32	s14, s0
 800136e:	eef0 7a60 	vmov.f32	s15, s1
 8001372:	ed87 7a06 	vstr	s14, [r7, #24]
 8001376:	edc7 7a07 	vstr	s15, [r7, #28]
 800137a:	ed97 7a06 	vldr	s14, [r7, #24]
 800137e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001382:	eeb0 0a47 	vmov.f32	s0, s14
 8001386:	eef0 0a67 	vmov.f32	s1, s15
 800138a:	f008 fbda 	bl	8009b42 <vector2_angle>
 800138e:	ed87 0a08 	vstr	s0, [r7, #32]
  odometry_setPosition(start.x, start.y);
 8001392:	edd7 7a04 	vldr	s15, [r7, #16]
 8001396:	ed97 7a05 	vldr	s14, [r7, #20]
 800139a:	eef0 0a47 	vmov.f32	s1, s14
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	f006 fffb 	bl	800839c <odometry_setPosition>
  odometry_setAngle(startAngle);
 80013a6:	ed97 0a08 	vldr	s0, [r7, #32]
 80013aa:	f007 f80d 	bl	80083c8 <odometry_setAngle>
  robot.measuredSpeed = 0;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <main+0x2b0>)
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  odometry_startKalman();
 80013b6:	f007 f817 	bl	80083e8 <odometry_startKalman>
  HAL_Delay(200);
 80013ba:	20c8      	movs	r0, #200	; 0xc8
 80013bc:	f001 fb1c 	bl	80029f8 <HAL_Delay>
  printf(" Done.\r\n");
 80013c0:	480e      	ldr	r0, [pc, #56]	; (80013fc <main+0x2ac>)
 80013c2:	f009 fad1 	bl	800a968 <puts>

  printf("Go!\r\n");
 80013c6:	481a      	ldr	r0, [pc, #104]	; (8001430 <main+0x2e0>)
 80013c8:	f009 face 	bl	800a968 <puts>

  //odometry_setPosition(0, 0);
  //odometry_setAngle(0);

  HAL_UART_Receive_DMA(&huart4, &lidarBuf[0], 3);//HAL_UART_Receive_IT(&huart4, &lidarData, 1);
 80013cc:	2203      	movs	r2, #3
 80013ce:	4919      	ldr	r1, [pc, #100]	; (8001434 <main+0x2e4>)
 80013d0:	4819      	ldr	r0, [pc, #100]	; (8001438 <main+0x2e8>)
 80013d2:	f004 fafc 	bl	80059ce <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &armData, 1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	4918      	ldr	r1, [pc, #96]	; (800143c <main+0x2ec>)
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <main+0x2a4>)
 80013dc:	f004 fac7 	bl	800596e <HAL_UART_Receive_IT>
	  }

	  HAL_Delay(100);
  }*/

  while (onSiteActionIndex < strategy->onSiteActionsLengths[0]) {
 80013e0:	e055      	b.n	800148e <main+0x33e>
 80013e2:	bf00      	nop
 80013e4:	20000208 	.word	0x20000208
 80013e8:	20000298 	.word	0x20000298
 80013ec:	20000328 	.word	0x20000328
 80013f0:	20000d90 	.word	0x20000d90
 80013f4:	200005a0 	.word	0x200005a0
 80013f8:	0800ed60 	.word	0x0800ed60
 80013fc:	0800ed84 	.word	0x0800ed84
 8001400:	20000d38 	.word	0x20000d38
 8001404:	0800ed8c 	.word	0x0800ed8c
 8001408:	0800eda4 	.word	0x0800eda4
 800140c:	40020800 	.word	0x40020800
 8001410:	20000d8e 	.word	0x20000d8e
 8001414:	0800edbc 	.word	0x0800edbc
 8001418:	0800edd8 	.word	0x0800edd8
 800141c:	0800edf4 	.word	0x0800edf4
 8001420:	0800ee10 	.word	0x0800ee10
 8001424:	0800ee2c 	.word	0x0800ee2c
 8001428:	0800ee48 	.word	0x0800ee48
 800142c:	0800ee64 	.word	0x0800ee64
 8001430:	0800ee80 	.word	0x0800ee80
 8001434:	20000d94 	.word	0x20000d94
 8001438:	20000490 	.word	0x20000490
 800143c:	20000d8c 	.word	0x20000d8c
	  uint8_t action = strategy->onSiteActions[0][onSiteActionIndex];
 8001440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	71fb      	strb	r3, [r7, #7]
	  serial_send(&action, 1, 6);
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	2206      	movs	r2, #6
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f007 fea7 	bl	80091a8 <serial_send>
	  robot.waitingForOnSiteAction = true;
 800145a:	4b85      	ldr	r3, [pc, #532]	; (8001670 <main+0x520>)
 800145c:	2201      	movs	r2, #1
 800145e:	621a      	str	r2, [r3, #32]

	  printf("Waiting for 0xFF...\r\n");
 8001460:	4884      	ldr	r0, [pc, #528]	; (8001674 <main+0x524>)
 8001462:	f009 fa81 	bl	800a968 <puts>
	  printf("%d\r\n", robot.waitingForOnSiteAction);
 8001466:	4b82      	ldr	r3, [pc, #520]	; (8001670 <main+0x520>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	4619      	mov	r1, r3
 800146c:	4882      	ldr	r0, [pc, #520]	; (8001678 <main+0x528>)
 800146e:	f009 fa15 	bl	800a89c <iprintf>
	  while (robot.waitingForOnSiteAction) {}
 8001472:	bf00      	nop
 8001474:	4b7e      	ldr	r3, [pc, #504]	; (8001670 <main+0x520>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1fb      	bne.n	8001474 <main+0x324>
	  printf("%d\r\n", robot.waitingForOnSiteAction);
 800147c:	4b7c      	ldr	r3, [pc, #496]	; (8001670 <main+0x520>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4619      	mov	r1, r3
 8001482:	487d      	ldr	r0, [pc, #500]	; (8001678 <main+0x528>)
 8001484:	f009 fa0a 	bl	800a89c <iprintf>
	  onSiteActionIndex++;
 8001488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148a:	3301      	adds	r3, #1
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
  while (onSiteActionIndex < strategy->onSiteActionsLengths[0]) {
 800148e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001496:	429a      	cmp	r2, r3
 8001498:	dbd2      	blt.n	8001440 <main+0x2f0>
  }

  printf("About to move...\r\n");
 800149a:	4878      	ldr	r0, [pc, #480]	; (800167c <main+0x52c>)
 800149c:	f009 fa64 	bl	800a968 <puts>

  while (1) {
	  if (onMoveActionIndex < strategy->onMoveActionsLengths[curveIndex]
 80014a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ae:	429a      	cmp	r2, r3
 80014b0:	da1a      	bge.n	80014e8 <main+0x398>
              && !robot.waitingForOnMoveAction
 80014b2:	4b6f      	ldr	r3, [pc, #444]	; (8001670 <main+0x520>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <main+0x398>
			  && !robot.waitingForOnSiteAction) {
 80014ba:	4b6d      	ldr	r3, [pc, #436]	; (8001670 <main+0x520>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d112      	bne.n	80014e8 <main+0x398>
		  uint8_t action = strategy->onMoveActions[curveIndex][onMoveActionIndex];
 80014c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	71bb      	strb	r3, [r7, #6]
		  serial_send(&action, 1, 6);
 80014d6:	1dbb      	adds	r3, r7, #6
 80014d8:	2206      	movs	r2, #6
 80014da:	2101      	movs	r1, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f007 fe63 	bl	80091a8 <serial_send>
		  robot.waitingForOnMoveAction = true;
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <main+0x520>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  avoidance_update(t, strategy->directions[curveIndex]);
 80014e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ee:	4413      	add	r3, r2
 80014f0:	f993 3000 	ldrsb.w	r3, [r3]
 80014f4:	4618      	mov	r0, r3
 80014f6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80014fa:	f005 fbe5 	bl	8006cc8 <avoidance_update>

	  if (avoidanceState == PATH_CLEAR && curveIndex < strategy->length) {
 80014fe:	4b60      	ldr	r3, [pc, #384]	; (8001680 <main+0x530>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d129      	bne.n	800155a <main+0x40a>
 8001506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800150c:	429a      	cmp	r2, r3
 800150e:	da24      	bge.n	800155a <main+0x40a>
		  t = propulsion_followBezier(
				  strategy->path[curveIndex],
 8001510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 800151a:	6818      	ldr	r0, [r3, #0]
				  strategy->directions[curveIndex],
 800151c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001522:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8001524:	f993 1000 	ldrsb.w	r1, [r3]
				  strategy->speeds[curveIndex],
 8001528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8001532:	edd3 7a00 	vldr	s15, [r3]
				  strategy->speeds[curveIndex+1],
 8001536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800153c:	3301      	adds	r3, #1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8001542:	ed93 7a00 	vldr	s14, [r3]
 8001546:	2200      	movs	r2, #0
 8001548:	eef0 0a47 	vmov.f32	s1, s14
 800154c:	eeb0 0a67 	vmov.f32	s0, s15
 8001550:	f007 fcb2 	bl	8008eb8 <propulsion_followBezier>
 8001554:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8001558:	e034      	b.n	80015c4 <main+0x474>
				  false
		  );
	  } else if (avoidanceState == PATH_OBSTRUCTED) {
 800155a:	4b49      	ldr	r3, [pc, #292]	; (8001680 <main+0x530>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d108      	bne.n	8001574 <main+0x424>
		  propulsion_setSpeeds(0, 0, 0);
 8001562:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8001684 <main+0x534>
 8001566:	eddf 0a47 	vldr	s1, [pc, #284]	; 8001684 <main+0x534>
 800156a:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8001684 <main+0x534>
 800156e:	f006 ffb3 	bl	80084d8 <propulsion_setSpeeds>
 8001572:	e027      	b.n	80015c4 <main+0x474>
	  } else if (avoidanceState == BACKTRACKING) {
 8001574:	4b42      	ldr	r3, [pc, #264]	; (8001680 <main+0x530>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b03      	cmp	r3, #3
 800157a:	d123      	bne.n	80015c4 <main+0x474>
		  t = propulsion_followBezier(
				  strategy->path[curveIndex],
 800157c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8001586:	6818      	ldr	r0, [r3, #0]
				  strategy->directions[curveIndex],
 8001588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800158e:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 8001590:	f993 1000 	ldrsb.w	r1, [r3]
				  strategy->speeds[curveIndex],
 8001594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 800159e:	edd3 7a00 	vldr	s15, [r3]
				  strategy->speeds[curveIndex+1],
 80015a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a8:	3301      	adds	r3, #1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
		  t = propulsion_followBezier(
 80015ae:	ed93 7a00 	vldr	s14, [r3]
 80015b2:	2201      	movs	r2, #1
 80015b4:	eef0 0a47 	vmov.f32	s1, s14
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	f007 fc7c 	bl	8008eb8 <propulsion_followBezier>
 80015c0:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
				  true
		  );
	  }

	  if (t > 0.99 && !robot.waitingForOnMoveAction) {
 80015c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015c6:	f7fe ffdf 	bl	8000588 <__aeabi_f2d>
 80015ca:	a327      	add	r3, pc, #156	; (adr r3, 8001668 <main+0x518>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff fac2 	bl	8000b58 <__aeabi_dcmpgt>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d037      	beq.n	800164a <main+0x4fa>
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <main+0x520>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d133      	bne.n	800164a <main+0x4fa>
	      curveIndex = (curveIndex + 1);// % strategy->length;
 80015e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e4:	3301      	adds	r3, #1
 80015e6:	63bb      	str	r3, [r7, #56]	; 0x38
	      onSiteActionIndex = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
	      while (onSiteActionIndex < strategy->onSiteActionsLengths[curveIndex]) {
 80015ec:	e022      	b.n	8001634 <main+0x4e4>
	    	  uint8_t action = strategy->onSiteActions[curveIndex][onSiteActionIndex];
 80015ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	717b      	strb	r3, [r7, #5]
	    	  serial_send(&action, 1, 6);
 8001602:	1d7b      	adds	r3, r7, #5
 8001604:	2206      	movs	r2, #6
 8001606:	2101      	movs	r1, #1
 8001608:	4618      	mov	r0, r3
 800160a:	f007 fdcd 	bl	80091a8 <serial_send>
	    	  robot.waitingForOnSiteAction = true;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <main+0x520>)
 8001610:	2201      	movs	r2, #1
 8001612:	621a      	str	r2, [r3, #32]

	    	  while (robot.waitingForOnSiteAction) {
 8001614:	e007      	b.n	8001626 <main+0x4d6>
	    		  propulsion_setSpeeds(0, 0, 0);
 8001616:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8001684 <main+0x534>
 800161a:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001684 <main+0x534>
 800161e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001684 <main+0x534>
 8001622:	f006 ff59 	bl	80084d8 <propulsion_setSpeeds>
	    	  while (robot.waitingForOnSiteAction) {
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <main+0x520>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f3      	bne.n	8001616 <main+0x4c6>
	    	  }
	    	  onSiteActionIndex++;
 800162e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001630:	3301      	adds	r3, #1
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
	      while (onSiteActionIndex < strategy->onSiteActionsLengths[curveIndex]) {
 8001634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001636:	699a      	ldr	r2, [r3, #24]
 8001638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001642:	429a      	cmp	r2, r3
 8001644:	dbd3      	blt.n	80015ee <main+0x49e>
	      }
	      onMoveActionIndex = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
	  }

	  if (curveIndex == strategy->length) {
 800164a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001650:	429a      	cmp	r2, r3
 8001652:	d000      	beq.n	8001656 <main+0x506>
	  if (onMoveActionIndex < strategy->onMoveActionsLengths[curveIndex]
 8001654:	e724      	b.n	80014a0 <main+0x350>
		  break;
 8001656:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  propulsion_disableMotors();
 8001658:	f006 ff2e 	bl	80084b8 <propulsion_disableMotors>
  printf("Finished.\r\n");
 800165c:	480a      	ldr	r0, [pc, #40]	; (8001688 <main+0x538>)
 800165e:	f009 f983 	bl	800a968 <puts>

  while (1) {
 8001662:	e7fe      	b.n	8001662 <main+0x512>
 8001664:	f3af 8000 	nop.w
 8001668:	7ae147ae 	.word	0x7ae147ae
 800166c:	3fefae14 	.word	0x3fefae14
 8001670:	20000d38 	.word	0x20000d38
 8001674:	0800ee88 	.word	0x0800ee88
 8001678:	0800eea0 	.word	0x0800eea0
 800167c:	0800eea8 	.word	0x0800eea8
 8001680:	20000648 	.word	0x20000648
 8001684:	00000000 	.word	0x00000000
 8001688:	0800eebc 	.word	0x0800eebc

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	; 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	2234      	movs	r2, #52	; 0x34
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f009 fa44 	bl	800ab28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <SystemClock_Config+0xe0>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a2c      	ldr	r2, [pc, #176]	; (800176c <SystemClock_Config+0xe0>)
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <SystemClock_Config+0xe0>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <SystemClock_Config+0xe4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <SystemClock_Config+0xe4>)
 80016d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <SystemClock_Config+0xe4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f0:	2310      	movs	r3, #16
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f4:	2302      	movs	r3, #2
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016fc:	2310      	movs	r3, #16
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001700:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001704:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001706:	2302      	movs	r3, #2
 8001708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800170a:	2302      	movs	r3, #2
 800170c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800170e:	2302      	movs	r3, #2
 8001710:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fc06 	bl	8003f28 <HAL_RCC_OscConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001722:	f000 f827 	bl	8001774 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001726:	f002 f865 	bl	80037f4 <HAL_PWREx_EnableOverDrive>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001730:	f000 f820 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001734:	230f      	movs	r3, #15
 8001736:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001738:	2302      	movs	r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	2105      	movs	r1, #5
 8001752:	4618      	mov	r0, r3
 8001754:	f002 f89e 	bl	8003894 <HAL_RCC_ClockConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800175e:	f000 f809 	bl	8001774 <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3750      	adds	r7, #80	; 0x50
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40007000 	.word	0x40007000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("A runtime error occurred.\r\n");
 800177c:	4801      	ldr	r0, [pc, #4]	; (8001784 <Error_Handler+0x10>)
 800177e:	f009 f8f3 	bl	800a968 <puts>
  while (1) {
 8001782:	e7fe      	b.n	8001782 <Error_Handler+0xe>
 8001784:	0800eec8 	.word	0x0800eec8

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_MspInit+0x4c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x4c>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>
	...

080017e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("A hard fault occurred.\r\n");
 80017e4:	4801      	ldr	r0, [pc, #4]	; (80017ec <HardFault_Handler+0xc>)
 80017e6:	f009 f8bf 	bl	800a968 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0xa>
 80017ec:	0800eee4 	.word	0x0800eee4

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  printf("A memory management fault occurred.\r\n");
 80017f4:	4801      	ldr	r0, [pc, #4]	; (80017fc <MemManage_Handler+0xc>)
 80017f6:	f009 f8b7 	bl	800a968 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <MemManage_Handler+0xa>
 80017fc:	0800eefc 	.word	0x0800eefc

08001800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <BusFault_Handler+0x4>

08001806 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <UsageFault_Handler+0x4>

0800180c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183a:	f001 f8bd 	bl	80029b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <DMA1_Stream2_IRQHandler+0x10>)
 800184a:	f001 fba3 	bl	8002f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200005e4 	.word	0x200005e4

08001858 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <TIM2_IRQHandler+0x10>)
 800185e:	f003 f8f1 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000250 	.word	0x20000250

0800186c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM4_IRQHandler+0x10>)
 8001872:	f003 f8e7 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200002e0 	.word	0x200002e0

08001880 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <USART1_IRQHandler+0x10>)
 8001886:	f004 f8d3 	bl	8005a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000518 	.word	0x20000518

08001894 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  //propulsion_updatePosition(0.01);
  //lidar_incrementTime(10);
  odometry_updatePosition();
 8001898:	f006 fc1a 	bl	80080d0 <odometry_updatePosition>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM5_IRQHandler+0x14>)
 800189e:	f003 f8d1 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000328 	.word	0x20000328

080018ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <UART4_IRQHandler+0x10>)
 80018b2:	f004 f8bd 	bl	8005a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000490 	.word	0x20000490

080018c0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <UART5_IRQHandler+0x10>)
 80018c6:	f004 f8b3 	bl	8005a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200004d4 	.word	0x200004d4

080018d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <TIM6_DAC_IRQHandler+0x10>)
 80018da:	f003 f8b3 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000370 	.word	0x20000370

080018e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM7_IRQHandler+0x10>)
 80018ee:	f003 f8a9 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200003b8 	.word	0x200003b8

080018fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <USART6_IRQHandler+0x10>)
 8001902:	f004 f895 	bl	8005a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200005a0 	.word	0x200005a0

08001910 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
	return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_kill>:

int _kill(int pid, int sig)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800192a:	f009 f95f 	bl	800abec <__errno>
 800192e:	4603      	mov	r3, r0
 8001930:	2216      	movs	r2, #22
 8001932:	601a      	str	r2, [r3, #0]
	return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_exit>:

void _exit (int status)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffe7 	bl	8001920 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001952:	e7fe      	b.n	8001952 <_exit+0x12>

08001954 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e00a      	b.n	800197c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001966:	f3af 8000 	nop.w
 800196a:	4601      	mov	r1, r0
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	60ba      	str	r2, [r7, #8]
 8001972:	b2ca      	uxtb	r2, r1
 8001974:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf0      	blt.n	8001966 <_read+0x12>
	}

return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_close>:
	}
	return len;
}

int _close(int file)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b6:	605a      	str	r2, [r3, #4]
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_isatty>:

int _isatty(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f009 f8e0 	bl	800abec <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	220c      	movs	r2, #12
 8001a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20020000 	.word	0x20020000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	20000204 	.word	0x20000204
 8001a60:	20001aa8 	.word	0x20001aa8

08001a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <SystemInit+0x20>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <SystemInit+0x20>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f009 f846 	bl	800ab28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_TIM1_Init+0xa8>)
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <MX_TIM1_Init+0xac>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <MX_TIM1_Init+0xa8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_TIM1_Init+0xa8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <MX_TIM1_Init+0xa8>)
 8001ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <MX_TIM1_Init+0xa8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_TIM1_Init+0xa8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <MX_TIM1_Init+0xa8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ae0:	230a      	movs	r3, #10
 8001ae2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_TIM1_Init+0xa8>)
 8001afc:	f002 fefc 	bl	80048f8 <HAL_TIM_Encoder_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b06:	f7ff fe35 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <MX_TIM1_Init+0xa8>)
 8001b18:	f003 fd68 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b22:	f7ff fe27 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3730      	adds	r7, #48	; 0x30
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000208 	.word	0x20000208
 8001b34:	40010000 	.word	0x40010000

08001b38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <MX_TIM2_Init+0x98>)
 8001b56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2686;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_TIM2_Init+0x98>)
 8001b5e:	f640 227e 	movw	r2, #2686	; 0xa7e
 8001b62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_TIM2_Init+0x98>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_TIM2_Init+0x98>)
 8001b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_TIM2_Init+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_TIM2_Init+0x98>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b7e:	4814      	ldr	r0, [pc, #80]	; (8001bd0 <MX_TIM2_Init+0x98>)
 8001b80:	f002 fc70 	bl	8004464 <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b8a:	f7ff fdf3 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_TIM2_Init+0x98>)
 8001b9c:	f003 f91c 	bl	8004dd8 <HAL_TIM_ConfigClockSource>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ba6:	f7ff fde5 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <MX_TIM2_Init+0x98>)
 8001bb8:	f003 fd18 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bc2:	f7ff fdd7 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000250 	.word	0x20000250

08001bd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	2224      	movs	r2, #36	; 0x24
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f008 ffa0 	bl	800ab28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <MX_TIM3_Init+0xa0>)
 8001bf2:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <MX_TIM3_Init+0xa4>)
 8001bf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_TIM3_Init+0xa0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_TIM3_Init+0xa0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_TIM3_Init+0xa0>)
 8001c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_TIM3_Init+0xa0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <MX_TIM3_Init+0xa0>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c16:	2303      	movs	r3, #3
 8001c18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <MX_TIM3_Init+0xa0>)
 8001c42:	f002 fe59 	bl	80048f8 <HAL_TIM_Encoder_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c4c:	f7ff fd92 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_TIM3_Init+0xa0>)
 8001c5e:	f003 fcc5 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c68:	f7ff fd84 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	3730      	adds	r7, #48	; 0x30
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000298 	.word	0x20000298
 8001c78:	40000400 	.word	0x40000400

08001c7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_TIM4_Init+0x90>)
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <MX_TIM4_Init+0x94>)
 8001c9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <MX_TIM4_Init+0x90>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_TIM4_Init+0x90>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <MX_TIM4_Init+0x90>)
 8001cac:	225a      	movs	r2, #90	; 0x5a
 8001cae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <MX_TIM4_Init+0x90>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_TIM4_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cbc:	4813      	ldr	r0, [pc, #76]	; (8001d0c <MX_TIM4_Init+0x90>)
 8001cbe:	f002 fbd1 	bl	8004464 <HAL_TIM_Base_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001cc8:	f7ff fd54 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <MX_TIM4_Init+0x90>)
 8001cda:	f003 f87d 	bl	8004dd8 <HAL_TIM_ConfigClockSource>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001ce4:	f7ff fd46 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_TIM4_Init+0x90>)
 8001cf6:	f003 fc79 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001d00:	f7ff fd38 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200002e0 	.word	0x200002e0
 8001d10:	40000800 	.word	0x40000800

08001d14 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_TIM5_Init+0x90>)
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <MX_TIM5_Init+0x94>)
 8001d34:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_TIM5_Init+0x90>)
 8001d38:	2209      	movs	r2, #9
 8001d3a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_TIM5_Init+0x90>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9000000*ODOMETRY_REFRESH;
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_TIM5_Init+0x90>)
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <MX_TIM5_Init+0x98>)
 8001d46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_TIM5_Init+0x90>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_TIM5_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d54:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_TIM5_Init+0x90>)
 8001d56:	f002 fb85 	bl	8004464 <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8001d60:	f7ff fd08 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_TIM5_Init+0x90>)
 8001d72:	f003 f831 	bl	8004dd8 <HAL_TIM_ConfigClockSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8001d7c:	f7ff fcfa 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d88:	463b      	mov	r3, r7
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_TIM5_Init+0x90>)
 8001d8e:	f003 fc2d 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8001d98:	f7ff fcec 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000328 	.word	0x20000328
 8001da8:	40000c00 	.word	0x40000c00
 8001dac:	00015f90 	.word	0x00015f90

08001db0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db6:	463b      	mov	r3, r7
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <MX_TIM6_Init+0x64>)
 8001dc0:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <MX_TIM6_Init+0x68>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <MX_TIM6_Init+0x64>)
 8001dc6:	f242 3227 	movw	r2, #8999	; 0x2327
 8001dca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_TIM6_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <MX_TIM6_Init+0x64>)
 8001dd4:	2263      	movs	r2, #99	; 0x63
 8001dd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_TIM6_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dde:	480d      	ldr	r0, [pc, #52]	; (8001e14 <MX_TIM6_Init+0x64>)
 8001de0:	f002 fb40 	bl	8004464 <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001dea:	f7ff fcc3 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001df6:	463b      	mov	r3, r7
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4806      	ldr	r0, [pc, #24]	; (8001e14 <MX_TIM6_Init+0x64>)
 8001dfc:	f003 fbf6 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e06:	f7ff fcb5 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000370 	.word	0x20000370
 8001e18:	40001000 	.word	0x40001000

08001e1c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e22:	463b      	mov	r3, r7
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <MX_TIM7_Init+0x64>)
 8001e2c:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <MX_TIM7_Init+0x68>)
 8001e2e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_TIM7_Init+0x64>)
 8001e32:	f242 3227 	movw	r2, #8999	; 0x2327
 8001e36:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_TIM7_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <MX_TIM7_Init+0x64>)
 8001e40:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e44:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_TIM7_Init+0x64>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <MX_TIM7_Init+0x64>)
 8001e4e:	f002 fb09 	bl	8004464 <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e58:	f7ff fc8c 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_TIM7_Init+0x64>)
 8001e6a:	f003 fbbf 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e74:	f7ff fc7e 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200003b8 	.word	0x200003b8
 8001e84:	40001400 	.word	0x40001400

08001e88 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b096      	sub	sp, #88	; 0x58
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]
 8001eb6:	615a      	str	r2, [r3, #20]
 8001eb8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f008 fe31 	bl	800ab28 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001ec8:	4a3e      	ldr	r2, [pc, #248]	; (8001fc4 <MX_TIM8_Init+0x13c>)
 8001eca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001ece:	22b3      	movs	r2, #179	; 0xb3
 8001ed0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ede:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee0:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ef2:	4833      	ldr	r0, [pc, #204]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001ef4:	f002 fab6 	bl	8004464 <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001efe:	f7ff fc39 	bl	8001774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	482c      	ldr	r0, [pc, #176]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001f10:	f002 ff62 	bl	8004dd8 <HAL_TIM_ConfigClockSource>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001f1a:	f7ff fc2b 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001f1e:	4828      	ldr	r0, [pc, #160]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001f20:	f002 fbc8 	bl	80046b4 <HAL_TIM_PWM_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001f2a:	f7ff fc23 	bl	8001774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4820      	ldr	r0, [pc, #128]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001f3e:	f003 fb55 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001f48:	f7ff fc14 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f4c:	2360      	movs	r3, #96	; 0x60
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001f50:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4814      	ldr	r0, [pc, #80]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001f70:	f002 fe70 	bl	8004c54 <HAL_TIM_PWM_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001f7a:	f7ff fbfb 	bl	8001774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001fa2:	f003 fb9f 	bl	80056e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001fac:	f7ff fbe2 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <MX_TIM8_Init+0x138>)
 8001fb2:	f000 f99d 	bl	80022f0 <HAL_TIM_MspPostInit>

}
 8001fb6:	bf00      	nop
 8001fb8:	3758      	adds	r7, #88	; 0x58
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000400 	.word	0x20000400
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <MX_TIM11_Init+0x94>)
 8001fe2:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <MX_TIM11_Init+0x98>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 179;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <MX_TIM11_Init+0x94>)
 8001fe8:	22b3      	movs	r2, #179	; 0xb3
 8001fea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <MX_TIM11_Init+0x94>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_TIM11_Init+0x94>)
 8001ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ff8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <MX_TIM11_Init+0x94>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_TIM11_Init+0x94>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002006:	4815      	ldr	r0, [pc, #84]	; (800205c <MX_TIM11_Init+0x94>)
 8002008:	f002 fa2c 	bl	8004464 <HAL_TIM_Base_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002012:	f7ff fbaf 	bl	8001774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002016:	4811      	ldr	r0, [pc, #68]	; (800205c <MX_TIM11_Init+0x94>)
 8002018:	f002 fb4c 	bl	80046b4 <HAL_TIM_PWM_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002022:	f7ff fba7 	bl	8001774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002026:	2360      	movs	r3, #96	; 0x60
 8002028:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	4807      	ldr	r0, [pc, #28]	; (800205c <MX_TIM11_Init+0x94>)
 800203e:	f002 fe09 	bl	8004c54 <HAL_TIM_PWM_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002048:	f7ff fb94 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <MX_TIM11_Init+0x94>)
 800204e:	f000 f94f 	bl	80022f0 <HAL_TIM_MspPostInit>

}
 8002052:	bf00      	nop
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000448 	.word	0x20000448
 8002060:	40014800 	.word	0x40014800

08002064 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d12d      	bne.n	80020e2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	4b31      	ldr	r3, [pc, #196]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a30      	ldr	r2, [pc, #192]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a29      	ldr	r2, [pc, #164]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b27      	ldr	r3, [pc, #156]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = R_ENCODER_A_Pin|R_ENCODER_B_Pin;
 80020be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	481e      	ldr	r0, [pc, #120]	; (8002154 <HAL_TIM_Encoder_MspInit+0xf0>)
 80020dc:	f001 f9c4 	bl	8003468 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020e0:	e030      	b.n	8002144 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM3)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_TIM_Encoder_MspInit+0xf4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d12b      	bne.n	8002144 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	6413      	str	r3, [r2, #64]	; 0x40
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6313      	str	r3, [r2, #48]	; 0x30
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_TIM_Encoder_MspInit+0xec>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = L_ENCODER_A_Pin|L_ENCODER_B_Pin;
 8002124:	23c0      	movs	r3, #192	; 0xc0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002134:	2302      	movs	r3, #2
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002140:	f001 f992 	bl	8003468 <HAL_GPIO_Init>
}
 8002144:	bf00      	nop
 8002146:	3730      	adds	r7, #48	; 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40010000 	.word	0x40010000
 8002150:	40023800 	.word	0x40023800
 8002154:	40020000 	.word	0x40020000
 8002158:	40000400 	.word	0x40000400

0800215c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d116      	bne.n	800219c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
 8002172:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a57      	ldr	r2, [pc, #348]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	201c      	movs	r0, #28
 8002190:	f000 fd31 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002194:	201c      	movs	r0, #28
 8002196:	f000 fd4a 	bl	8002c2e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800219a:	e096      	b.n	80022ca <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a4d      	ldr	r2, [pc, #308]	; (80022d8 <HAL_TIM_Base_MspInit+0x17c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d116      	bne.n	80021d4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a49      	ldr	r2, [pc, #292]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	201e      	movs	r0, #30
 80021c8:	f000 fd15 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021cc:	201e      	movs	r0, #30
 80021ce:	f000 fd2e 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 80021d2:	e07a      	b.n	80022ca <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a40      	ldr	r2, [pc, #256]	; (80022dc <HAL_TIM_Base_MspInit+0x180>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d116      	bne.n	800220c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2032      	movs	r0, #50	; 0x32
 8002200:	f000 fcf9 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002204:	2032      	movs	r0, #50	; 0x32
 8002206:	f000 fd12 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 800220a:	e05e      	b.n	80022ca <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a33      	ldr	r2, [pc, #204]	; (80022e0 <HAL_TIM_Base_MspInit+0x184>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d116      	bne.n	8002244 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a2d      	ldr	r2, [pc, #180]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002220:	f043 0310 	orr.w	r3, r3, #16
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	2036      	movs	r0, #54	; 0x36
 8002238:	f000 fcdd 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800223c:	2036      	movs	r0, #54	; 0x36
 800223e:	f000 fcf6 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 8002242:	e042      	b.n	80022ca <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM7)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <HAL_TIM_Base_MspInit+0x188>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002258:	f043 0320 	orr.w	r3, r3, #32
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2102      	movs	r1, #2
 800226e:	2037      	movs	r0, #55	; 0x37
 8002270:	f000 fcc1 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002274:	2037      	movs	r0, #55	; 0x37
 8002276:	f000 fcda 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 800227a:	e026      	b.n	80022ca <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM8)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_TIM_Base_MspInit+0x18c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6453      	str	r3, [r2, #68]	; 0x44
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
}
 80022a2:	e012      	b.n	80022ca <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM11)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_TIM_Base_MspInit+0x190>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10d      	bne.n	80022ca <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_TIM_Base_MspInit+0x178>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40000800 	.word	0x40000800
 80022dc:	40000c00 	.word	0x40000c00
 80022e0:	40001000 	.word	0x40001000
 80022e4:	40001400 	.word	0x40001400
 80022e8:	40010400 	.word	0x40010400
 80022ec:	40014800 	.word	0x40014800

080022f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <HAL_TIM_MspPostInit+0xb4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d11f      	bne.n	8002352 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_TIM_MspPostInit+0xb8>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <HAL_TIM_MspPostInit+0xb8>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_TIM_MspPostInit+0xb8>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800232e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002340:	2303      	movs	r3, #3
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	4818      	ldr	r0, [pc, #96]	; (80023ac <HAL_TIM_MspPostInit+0xbc>)
 800234c:	f001 f88c 	bl	8003468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002350:	e023      	b.n	800239a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM11)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_TIM_MspPostInit+0xc0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d11e      	bne.n	800239a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_TIM_MspPostInit+0xb8>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_TIM_MspPostInit+0xb8>)
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	6313      	str	r3, [r2, #48]	; 0x30
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_TIM_MspPostInit+0xb8>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800238a:	2303      	movs	r3, #3
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4807      	ldr	r0, [pc, #28]	; (80023b4 <HAL_TIM_MspPostInit+0xc4>)
 8002396:	f001 f867 	bl	8003468 <HAL_GPIO_Init>
}
 800239a:	bf00      	nop
 800239c:	3728      	adds	r7, #40	; 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40010400 	.word	0x40010400
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40014800 	.word	0x40014800
 80023b4:	40020400 	.word	0x40020400

080023b8 <MX_UART4_Init>:
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_UART4_Init+0x4c>)
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <MX_UART4_Init+0x50>)
 80023c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <MX_UART4_Init+0x4c>)
 80023c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_UART4_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_UART4_Init+0x4c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_UART4_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_UART4_Init+0x4c>)
 80023de:	220c      	movs	r2, #12
 80023e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_UART4_Init+0x4c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_UART4_Init+0x4c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_UART4_Init+0x4c>)
 80023f0:	f003 f9de 	bl	80057b0 <HAL_UART_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80023fa:	f7ff f9bb 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000490 	.word	0x20000490
 8002408:	40004c00 	.word	0x40004c00

0800240c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_UART5_Init+0x4c>)
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <MX_UART5_Init+0x50>)
 8002414:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <MX_UART5_Init+0x4c>)
 8002418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800241c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_UART5_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <MX_UART5_Init+0x4c>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_UART5_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_UART5_Init+0x4c>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_UART5_Init+0x4c>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_UART5_Init+0x4c>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_UART5_Init+0x4c>)
 8002444:	f003 f9b4 	bl	80057b0 <HAL_UART_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800244e:	f7ff f991 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200004d4 	.word	0x200004d4
 800245c:	40005000 	.word	0x40005000

08002460 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USART1_UART_Init+0x48>)
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <MX_USART1_UART_Init+0x4c>)
 8002468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_USART1_UART_Init+0x48>)
 800246c:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <MX_USART1_UART_Init+0x50>)
 800246e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <MX_USART1_UART_Init+0x48>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USART1_UART_Init+0x48>)
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <MX_USART1_UART_Init+0x48>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USART1_UART_Init+0x48>)
 8002484:	220c      	movs	r2, #12
 8002486:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <MX_USART1_UART_Init+0x48>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USART1_UART_Init+0x48>)
 8002490:	2200      	movs	r2, #0
 8002492:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002494:	4804      	ldr	r0, [pc, #16]	; (80024a8 <MX_USART1_UART_Init+0x48>)
 8002496:	f003 f98b 	bl	80057b0 <HAL_UART_Init>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80024a0:	f7ff f968 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000518 	.word	0x20000518
 80024ac:	40011000 	.word	0x40011000
 80024b0:	001e8480 	.word	0x001e8480

080024b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_USART2_UART_Init+0x4c>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <MX_USART2_UART_Init+0x50>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_USART2_UART_Init+0x4c>)
 80024c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_USART2_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_USART2_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_USART2_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_USART2_UART_Init+0x4c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_USART2_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_USART2_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_USART2_UART_Init+0x4c>)
 80024ec:	f003 f960 	bl	80057b0 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024f6:	f7ff f93d 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000055c 	.word	0x2000055c
 8002504:	40004400 	.word	0x40004400

08002508 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_USART6_UART_Init+0x4c>)
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <MX_USART6_UART_Init+0x50>)
 8002510:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <MX_USART6_UART_Init+0x4c>)
 8002514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002518:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_USART6_UART_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_USART6_UART_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <MX_USART6_UART_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_USART6_UART_Init+0x4c>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <MX_USART6_UART_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_USART6_UART_Init+0x4c>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_USART6_UART_Init+0x4c>)
 8002540:	f003 f936 	bl	80057b0 <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800254a:	f7ff f913 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200005a0 	.word	0x200005a0
 8002558:	40011400 	.word	0x40011400

0800255c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b094      	sub	sp, #80	; 0x50
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4aa4      	ldr	r2, [pc, #656]	; (800280c <HAL_UART_MspInit+0x2b0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d162      	bne.n	8002644 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	63bb      	str	r3, [r7, #56]	; 0x38
 8002582:	4ba3      	ldr	r3, [pc, #652]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4aa2      	ldr	r2, [pc, #648]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4ba0      	ldr	r3, [pc, #640]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002596:	63bb      	str	r3, [r7, #56]	; 0x38
 8002598:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
 800259e:	4b9c      	ldr	r3, [pc, #624]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a9b      	ldr	r2, [pc, #620]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b99      	ldr	r3, [pc, #612]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025b6:	2303      	movs	r3, #3
 80025b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025c6:	2308      	movs	r3, #8
 80025c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025ce:	4619      	mov	r1, r3
 80025d0:	4890      	ldr	r0, [pc, #576]	; (8002814 <HAL_UART_MspInit+0x2b8>)
 80025d2:	f000 ff49 	bl	8003468 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80025d6:	4b90      	ldr	r3, [pc, #576]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 80025d8:	4a90      	ldr	r2, [pc, #576]	; (800281c <HAL_UART_MspInit+0x2c0>)
 80025da:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80025dc:	4b8e      	ldr	r3, [pc, #568]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 80025de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025e2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e4:	4b8c      	ldr	r3, [pc, #560]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ea:	4b8b      	ldr	r3, [pc, #556]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025f0:	4b89      	ldr	r3, [pc, #548]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 80025f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f8:	4b87      	ldr	r3, [pc, #540]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025fe:	4b86      	ldr	r3, [pc, #536]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002604:	4b84      	ldr	r3, [pc, #528]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800260a:	4b83      	ldr	r3, [pc, #524]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002610:	4b81      	ldr	r3, [pc, #516]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002616:	4880      	ldr	r0, [pc, #512]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 8002618:	f000 fb24 	bl	8002c64 <HAL_DMA_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002622:	f7ff f8a7 	bl	8001774 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a7b      	ldr	r2, [pc, #492]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 800262a:	639a      	str	r2, [r3, #56]	; 0x38
 800262c:	4a7a      	ldr	r2, [pc, #488]	; (8002818 <HAL_UART_MspInit+0x2bc>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2034      	movs	r0, #52	; 0x34
 8002638:	f000 fadd 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800263c:	2034      	movs	r0, #52	; 0x34
 800263e:	f000 faf6 	bl	8002c2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002642:	e132      	b.n	80028aa <HAL_UART_MspInit+0x34e>
  else if(uartHandle->Instance==UART5)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a75      	ldr	r2, [pc, #468]	; (8002820 <HAL_UART_MspInit+0x2c4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d153      	bne.n	80026f6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_UART5_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
 8002652:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a6e      	ldr	r2, [pc, #440]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b6c      	ldr	r3, [pc, #432]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800266e:	4b68      	ldr	r3, [pc, #416]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a67      	ldr	r2, [pc, #412]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b65      	ldr	r3, [pc, #404]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
 800268a:	4b61      	ldr	r3, [pc, #388]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a60      	ldr	r2, [pc, #384]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b5e      	ldr	r3, [pc, #376]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026b4:	2308      	movs	r3, #8
 80026b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026bc:	4619      	mov	r1, r3
 80026be:	4859      	ldr	r0, [pc, #356]	; (8002824 <HAL_UART_MspInit+0x2c8>)
 80026c0:	f000 fed2 	bl	8003468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026c4:	2304      	movs	r3, #4
 80026c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026d4:	2308      	movs	r3, #8
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026dc:	4619      	mov	r1, r3
 80026de:	4852      	ldr	r0, [pc, #328]	; (8002828 <HAL_UART_MspInit+0x2cc>)
 80026e0:	f000 fec2 	bl	8003468 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80026e4:	2200      	movs	r2, #0
 80026e6:	2100      	movs	r1, #0
 80026e8:	2035      	movs	r0, #53	; 0x35
 80026ea:	f000 fa84 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80026ee:	2035      	movs	r0, #53	; 0x35
 80026f0:	f000 fa9d 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 80026f4:	e0d9      	b.n	80028aa <HAL_UART_MspInit+0x34e>
  else if(uartHandle->Instance==USART1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a4c      	ldr	r2, [pc, #304]	; (800282c <HAL_UART_MspInit+0x2d0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d153      	bne.n	80027a8 <HAL_UART_MspInit+0x24c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	4b42      	ldr	r3, [pc, #264]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	4a41      	ldr	r2, [pc, #260]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	6453      	str	r3, [r2, #68]	; 0x44
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4a3a      	ldr	r2, [pc, #232]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6313      	str	r3, [r2, #48]	; 0x30
 800272c:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	623b      	str	r3, [r7, #32]
 8002736:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	4b34      	ldr	r3, [pc, #208]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	4a33      	ldr	r2, [pc, #204]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 8002742:	f043 0302 	orr.w	r3, r3, #2
 8002746:	6313      	str	r3, [r2, #48]	; 0x30
 8002748:	4b31      	ldr	r3, [pc, #196]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002758:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002766:	2307      	movs	r3, #7
 8002768:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800276e:	4619      	mov	r1, r3
 8002770:	4828      	ldr	r0, [pc, #160]	; (8002814 <HAL_UART_MspInit+0x2b8>)
 8002772:	f000 fe79 	bl	8003468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002776:	2340      	movs	r3, #64	; 0x40
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002786:	2307      	movs	r3, #7
 8002788:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800278e:	4619      	mov	r1, r3
 8002790:	4827      	ldr	r0, [pc, #156]	; (8002830 <HAL_UART_MspInit+0x2d4>)
 8002792:	f000 fe69 	bl	8003468 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	2025      	movs	r0, #37	; 0x25
 800279c:	f000 fa2b 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027a0:	2025      	movs	r0, #37	; 0x25
 80027a2:	f000 fa44 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 80027a6:	e080      	b.n	80028aa <HAL_UART_MspInit+0x34e>
  else if(uartHandle->Instance==USART2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <HAL_UART_MspInit+0x2d8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d142      	bne.n	8002838 <HAL_UART_MspInit+0x2dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a15      	ldr	r2, [pc, #84]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_UART_MspInit+0x2b4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027ea:	230c      	movs	r3, #12
 80027ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027fa:	2307      	movs	r3, #7
 80027fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002802:	4619      	mov	r1, r3
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <HAL_UART_MspInit+0x2b8>)
 8002806:	f000 fe2f 	bl	8003468 <HAL_GPIO_Init>
}
 800280a:	e04e      	b.n	80028aa <HAL_UART_MspInit+0x34e>
 800280c:	40004c00 	.word	0x40004c00
 8002810:	40023800 	.word	0x40023800
 8002814:	40020000 	.word	0x40020000
 8002818:	200005e4 	.word	0x200005e4
 800281c:	40026040 	.word	0x40026040
 8002820:	40005000 	.word	0x40005000
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40011000 	.word	0x40011000
 8002830:	40020400 	.word	0x40020400
 8002834:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART6)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_UART_MspInit+0x358>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d133      	bne.n	80028aa <HAL_UART_MspInit+0x34e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_UART_MspInit+0x35c>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_UART_MspInit+0x35c>)
 800284c:	f043 0320 	orr.w	r3, r3, #32
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_UART_MspInit+0x35c>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_UART_MspInit+0x35c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_UART_MspInit+0x35c>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_UART_MspInit+0x35c>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800287a:	23c0      	movs	r3, #192	; 0xc0
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800288a:	2308      	movs	r3, #8
 800288c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002892:	4619      	mov	r1, r3
 8002894:	4809      	ldr	r0, [pc, #36]	; (80028bc <HAL_UART_MspInit+0x360>)
 8002896:	f000 fde7 	bl	8003468 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	2047      	movs	r0, #71	; 0x47
 80028a0:	f000 f9a9 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028a4:	2047      	movs	r0, #71	; 0x47
 80028a6:	f000 f9c2 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 80028aa:	bf00      	nop
 80028ac:	3750      	adds	r7, #80	; 0x50
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40011400 	.word	0x40011400
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020800 	.word	0x40020800

080028c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028c6:	490e      	ldr	r1, [pc, #56]	; (8002900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028c8:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028cc:	e002      	b.n	80028d4 <LoopCopyDataInit>

080028ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d2:	3304      	adds	r3, #4

080028d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d8:	d3f9      	bcc.n	80028ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028dc:	4c0b      	ldr	r4, [pc, #44]	; (800290c <LoopFillZerobss+0x26>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e0:	e001      	b.n	80028e6 <LoopFillZerobss>

080028e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e4:	3204      	adds	r2, #4

080028e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e8:	d3fb      	bcc.n	80028e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80028ea:	f7ff f8bb 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ee:	f008 f983 	bl	800abf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028f2:	f7fe fc2d 	bl	8001150 <main>
  bx  lr
 80028f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002900:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002904:	0800f668 	.word	0x0800f668
  ldr r2, =_sbss
 8002908:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800290c:	20001aa4 	.word	0x20001aa4

08002910 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC_IRQHandler>
	...

08002914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <HAL_Init+0x40>)
 800291e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_Init+0x40>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_Init+0x40>)
 800292a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800292e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_Init+0x40>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_Init+0x40>)
 8002936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 f94f 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002942:	2000      	movs	r0, #0
 8002944:	f000 f808 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002948:	f7fe ff1e 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023c00 	.word	0x40023c00

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_InitTick+0x54>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_InitTick+0x58>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f967 	bl	8002c4a <HAL_SYSTICK_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00e      	b.n	80029a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d80a      	bhi.n	80029a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298c:	2200      	movs	r2, #0
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002994:	f000 f92f 	bl	8002bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <HAL_InitTick+0x5c>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000008 	.word	0x20000008
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_IncTick+0x20>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_IncTick+0x24>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <HAL_IncTick+0x24>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000008 	.word	0x20000008
 80029dc:	20000644 	.word	0x20000644

080029e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_GetTick+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000644 	.word	0x20000644

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff ffee 	bl	80029e0 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a10:	d005      	beq.n	8002a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_Delay+0x44>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a1e:	bf00      	nop
 8002a20:	f7ff ffde 	bl	80029e0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f7      	bhi.n	8002a20 <HAL_Delay+0x28>
  {
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000008 	.word	0x20000008

08002a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4907      	ldr	r1, [pc, #28]	; (8002adc <__NVIC_EnableIRQ+0x38>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff29 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff3e 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff8e 	bl	8002b34 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5d 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff31 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ffa2 	bl	8002b9c <SysTick_Config>
 8002c58:	4603      	mov	r3, r0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c70:	f7ff feb6 	bl	80029e0 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e099      	b.n	8002db4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca0:	e00f      	b.n	8002cc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca2:	f7ff fe9d 	bl	80029e0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d908      	bls.n	8002cc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e078      	b.n	8002db4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e8      	bne.n	8002ca2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <HAL_DMA_Init+0x158>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d107      	bne.n	8002d2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	4313      	orrs	r3, r2
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0307 	bic.w	r3, r3, #7
 8002d42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d117      	bne.n	8002d86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fb01 	bl	8003370 <DMA_CheckFifoParam>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2240      	movs	r2, #64	; 0x40
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d82:	2301      	movs	r3, #1
 8002d84:	e016      	b.n	8002db4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fab8 	bl	8003304 <DMA_CalcBaseAndBitshift>
 8002d94:	4603      	mov	r3, r0
 8002d96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	223f      	movs	r2, #63	; 0x3f
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	f010803f 	.word	0xf010803f

08002dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_DMA_Start_IT+0x26>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e040      	b.n	8002e68 <HAL_DMA_Start_IT+0xa8>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d12f      	bne.n	8002e5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fa4a 	bl	80032a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e18:	223f      	movs	r2, #63	; 0x3f
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0216 	orr.w	r2, r2, #22
 8002e2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0208 	orr.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	e005      	b.n	8002e66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
 8002e64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e7e:	f7ff fdaf 	bl	80029e0 <HAL_GetTick>
 8002e82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d008      	beq.n	8002ea2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e052      	b.n	8002f48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0216 	bic.w	r2, r2, #22
 8002eb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_DMA_Abort+0x62>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0208 	bic.w	r2, r2, #8
 8002ee0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef2:	e013      	b.n	8002f1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef4:	f7ff fd74 	bl	80029e0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d90c      	bls.n	8002f1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e015      	b.n	8002f48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e4      	bne.n	8002ef4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	223f      	movs	r2, #63	; 0x3f
 8002f30:	409a      	lsls	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d004      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00c      	b.n	8002f88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2205      	movs	r2, #5
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa0:	4b8e      	ldr	r3, [pc, #568]	; (80031dc <HAL_DMA_IRQHandler+0x248>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a8e      	ldr	r2, [pc, #568]	; (80031e0 <HAL_DMA_IRQHandler+0x24c>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0a9b      	lsrs	r3, r3, #10
 8002fac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01a      	beq.n	8003000 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0204 	bic.w	r2, r2, #4
 8002fe6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	2208      	movs	r2, #8
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	2201      	movs	r2, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d012      	beq.n	8003036 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003022:	2201      	movs	r2, #1
 8003024:	409a      	lsls	r2, r3
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	f043 0202 	orr.w	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303a:	2204      	movs	r2, #4
 800303c:	409a      	lsls	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d012      	beq.n	800306c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00b      	beq.n	800306c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2204      	movs	r2, #4
 800305a:	409a      	lsls	r2, r3
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	2210      	movs	r2, #16
 8003072:	409a      	lsls	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d043      	beq.n	8003104 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d03c      	beq.n	8003104 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	2210      	movs	r2, #16
 8003090:	409a      	lsls	r2, r3
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d024      	beq.n	8003104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4798      	blx	r3
 80030c2:	e01f      	b.n	8003104 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01b      	beq.n	8003104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
 80030d4:	e016      	b.n	8003104 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0208 	bic.w	r2, r2, #8
 80030f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	2220      	movs	r2, #32
 800310a:	409a      	lsls	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 808f 	beq.w	8003234 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8087 	beq.w	8003234 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	2220      	movs	r2, #32
 800312c:	409a      	lsls	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b05      	cmp	r3, #5
 800313c:	d136      	bne.n	80031ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0216 	bic.w	r2, r2, #22
 800314c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <HAL_DMA_IRQHandler+0x1da>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0208 	bic.w	r2, r2, #8
 800317c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	223f      	movs	r2, #63	; 0x3f
 8003184:	409a      	lsls	r2, r3
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d07e      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
        }
        return;
 80031aa:	e079      	b.n	80032a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01d      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d031      	beq.n	8003234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4798      	blx	r3
 80031d8:	e02c      	b.n	8003234 <HAL_DMA_IRQHandler+0x2a0>
 80031da:	bf00      	nop
 80031dc:	20000000 	.word	0x20000000
 80031e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d023      	beq.n	8003234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
 80031f4:	e01e      	b.n	8003234 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10f      	bne.n	8003224 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0210 	bic.w	r2, r2, #16
 8003212:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	2b00      	cmp	r3, #0
 800323a:	d032      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d022      	beq.n	800328e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2205      	movs	r2, #5
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	3301      	adds	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	429a      	cmp	r2, r3
 800326a:	d307      	bcc.n	800327c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f2      	bne.n	8003260 <HAL_DMA_IRQHandler+0x2cc>
 800327a:	e000      	b.n	800327e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800327c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
 800329e:	e000      	b.n	80032a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032a0:	bf00      	nop
    }
  }
}
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d108      	bne.n	80032e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032e6:	e007      	b.n	80032f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3b10      	subs	r3, #16
 8003314:	4a14      	ldr	r2, [pc, #80]	; (8003368 <DMA_CalcBaseAndBitshift+0x64>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800331e:	4a13      	ldr	r2, [pc, #76]	; (800336c <DMA_CalcBaseAndBitshift+0x68>)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d909      	bls.n	8003346 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	1d1a      	adds	r2, r3, #4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	659a      	str	r2, [r3, #88]	; 0x58
 8003344:	e007      	b.n	8003356 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800334e:	f023 0303 	bic.w	r3, r3, #3
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	aaaaaaab 	.word	0xaaaaaaab
 800336c:	0800f050 	.word	0x0800f050

08003370 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11f      	bne.n	80033ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d856      	bhi.n	800343e <DMA_CheckFifoParam+0xce>
 8003390:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <DMA_CheckFifoParam+0x28>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033a9 	.word	0x080033a9
 800339c:	080033bb 	.word	0x080033bb
 80033a0:	080033a9 	.word	0x080033a9
 80033a4:	0800343f 	.word	0x0800343f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d046      	beq.n	8003442 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b8:	e043      	b.n	8003442 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033c2:	d140      	bne.n	8003446 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c8:	e03d      	b.n	8003446 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d2:	d121      	bne.n	8003418 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d837      	bhi.n	800344a <DMA_CheckFifoParam+0xda>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <DMA_CheckFifoParam+0x70>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	080033f1 	.word	0x080033f1
 80033e4:	080033f7 	.word	0x080033f7
 80033e8:	080033f1 	.word	0x080033f1
 80033ec:	08003409 	.word	0x08003409
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      break;
 80033f4:	e030      	b.n	8003458 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d025      	beq.n	800344e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003406:	e022      	b.n	800344e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003410:	d11f      	bne.n	8003452 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003416:	e01c      	b.n	8003452 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d903      	bls.n	8003426 <DMA_CheckFifoParam+0xb6>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d003      	beq.n	800342c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003424:	e018      	b.n	8003458 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
      break;
 800342a:	e015      	b.n	8003458 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
      break;
 800343c:	e00b      	b.n	8003456 <DMA_CheckFifoParam+0xe6>
      break;
 800343e:	bf00      	nop
 8003440:	e00a      	b.n	8003458 <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e008      	b.n	8003458 <DMA_CheckFifoParam+0xe8>
      break;
 8003446:	bf00      	nop
 8003448:	e006      	b.n	8003458 <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
 800344c:	e004      	b.n	8003458 <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
 8003450:	e002      	b.n	8003458 <DMA_CheckFifoParam+0xe8>
      break;   
 8003452:	bf00      	nop
 8003454:	e000      	b.n	8003458 <DMA_CheckFifoParam+0xe8>
      break;
 8003456:	bf00      	nop
    }
  } 
  
  return status; 
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop

08003468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	e165      	b.n	8003750 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003484:	2201      	movs	r2, #1
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	429a      	cmp	r2, r3
 800349e:	f040 8154 	bne.w	800374a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d005      	beq.n	80034ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d130      	bne.n	800351c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	2203      	movs	r2, #3
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f0:	2201      	movs	r2, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 0201 	and.w	r2, r3, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b03      	cmp	r3, #3
 8003526:	d017      	beq.n	8003558 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2203      	movs	r2, #3
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d123      	bne.n	80035ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	08da      	lsrs	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3208      	adds	r2, #8
 800356c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	220f      	movs	r2, #15
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	08da      	lsrs	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3208      	adds	r2, #8
 80035a6:	69b9      	ldr	r1, [r7, #24]
 80035a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0203 	and.w	r2, r3, #3
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80ae 	beq.w	800374a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b5d      	ldr	r3, [pc, #372]	; (8003768 <HAL_GPIO_Init+0x300>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	4a5c      	ldr	r2, [pc, #368]	; (8003768 <HAL_GPIO_Init+0x300>)
 80035f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035fc:	6453      	str	r3, [r2, #68]	; 0x44
 80035fe:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <HAL_GPIO_Init+0x300>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360a:	4a58      	ldr	r2, [pc, #352]	; (800376c <HAL_GPIO_Init+0x304>)
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	3302      	adds	r3, #2
 8003612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	220f      	movs	r2, #15
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4f      	ldr	r2, [pc, #316]	; (8003770 <HAL_GPIO_Init+0x308>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d025      	beq.n	8003682 <HAL_GPIO_Init+0x21a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4e      	ldr	r2, [pc, #312]	; (8003774 <HAL_GPIO_Init+0x30c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01f      	beq.n	800367e <HAL_GPIO_Init+0x216>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4d      	ldr	r2, [pc, #308]	; (8003778 <HAL_GPIO_Init+0x310>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d019      	beq.n	800367a <HAL_GPIO_Init+0x212>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a4c      	ldr	r2, [pc, #304]	; (800377c <HAL_GPIO_Init+0x314>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_GPIO_Init+0x20e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <HAL_GPIO_Init+0x318>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00d      	beq.n	8003672 <HAL_GPIO_Init+0x20a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a4a      	ldr	r2, [pc, #296]	; (8003784 <HAL_GPIO_Init+0x31c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d007      	beq.n	800366e <HAL_GPIO_Init+0x206>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a49      	ldr	r2, [pc, #292]	; (8003788 <HAL_GPIO_Init+0x320>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_GPIO_Init+0x202>
 8003666:	2306      	movs	r3, #6
 8003668:	e00c      	b.n	8003684 <HAL_GPIO_Init+0x21c>
 800366a:	2307      	movs	r3, #7
 800366c:	e00a      	b.n	8003684 <HAL_GPIO_Init+0x21c>
 800366e:	2305      	movs	r3, #5
 8003670:	e008      	b.n	8003684 <HAL_GPIO_Init+0x21c>
 8003672:	2304      	movs	r3, #4
 8003674:	e006      	b.n	8003684 <HAL_GPIO_Init+0x21c>
 8003676:	2303      	movs	r3, #3
 8003678:	e004      	b.n	8003684 <HAL_GPIO_Init+0x21c>
 800367a:	2302      	movs	r3, #2
 800367c:	e002      	b.n	8003684 <HAL_GPIO_Init+0x21c>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_GPIO_Init+0x21c>
 8003682:	2300      	movs	r3, #0
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	f002 0203 	and.w	r2, r2, #3
 800368a:	0092      	lsls	r2, r2, #2
 800368c:	4093      	lsls	r3, r2
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003694:	4935      	ldr	r1, [pc, #212]	; (800376c <HAL_GPIO_Init+0x304>)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	3302      	adds	r3, #2
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036a2:	4b3a      	ldr	r3, [pc, #232]	; (800378c <HAL_GPIO_Init+0x324>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036c6:	4a31      	ldr	r2, [pc, #196]	; (800378c <HAL_GPIO_Init+0x324>)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036cc:	4b2f      	ldr	r3, [pc, #188]	; (800378c <HAL_GPIO_Init+0x324>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036f0:	4a26      	ldr	r2, [pc, #152]	; (800378c <HAL_GPIO_Init+0x324>)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036f6:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_GPIO_Init+0x324>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800371a:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_GPIO_Init+0x324>)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <HAL_GPIO_Init+0x324>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003744:	4a11      	ldr	r2, [pc, #68]	; (800378c <HAL_GPIO_Init+0x324>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3301      	adds	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	f67f ae96 	bls.w	8003484 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	3724      	adds	r7, #36	; 0x24
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	40013800 	.word	0x40013800
 8003770:	40020000 	.word	0x40020000
 8003774:	40020400 	.word	0x40020400
 8003778:	40020800 	.word	0x40020800
 800377c:	40020c00 	.word	0x40020c00
 8003780:	40021000 	.word	0x40021000
 8003784:	40021400 	.word	0x40021400
 8003788:	40021800 	.word	0x40021800
 800378c:	40013c00 	.word	0x40013c00

08003790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	e001      	b.n	80037b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
 80037cc:	4613      	mov	r3, r2
 80037ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037d0:	787b      	ldrb	r3, [r7, #1]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037dc:	e003      	b.n	80037e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037de:	887b      	ldrh	r3, [r7, #2]
 80037e0:	041a      	lsls	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	619a      	str	r2, [r3, #24]
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_PWREx_EnableOverDrive+0x90>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <HAL_PWREx_EnableOverDrive+0x90>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_PWREx_EnableOverDrive+0x90>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800381a:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <HAL_PWREx_EnableOverDrive+0x94>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003820:	f7ff f8de 	bl	80029e0 <HAL_GetTick>
 8003824:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003826:	e009      	b.n	800383c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003828:	f7ff f8da 	bl	80029e0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003836:	d901      	bls.n	800383c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e01f      	b.n	800387c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_PWREx_EnableOverDrive+0x98>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d1ee      	bne.n	8003828 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <HAL_PWREx_EnableOverDrive+0x9c>)
 800384c:	2201      	movs	r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003850:	f7ff f8c6 	bl	80029e0 <HAL_GetTick>
 8003854:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003856:	e009      	b.n	800386c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003858:	f7ff f8c2 	bl	80029e0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003866:	d901      	bls.n	800386c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e007      	b.n	800387c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <HAL_PWREx_EnableOverDrive+0x98>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003878:	d1ee      	bne.n	8003858 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40023800 	.word	0x40023800
 8003888:	420e0040 	.word	0x420e0040
 800388c:	40007000 	.word	0x40007000
 8003890:	420e0044 	.word	0x420e0044

08003894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0cc      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b68      	ldr	r3, [pc, #416]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d90c      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b65      	ldr	r3, [pc, #404]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b63      	ldr	r3, [pc, #396]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0b8      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e8:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a58      	ldr	r2, [pc, #352]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003900:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a52      	ldr	r2, [pc, #328]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800390a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390c:	4b50      	ldr	r3, [pc, #320]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	494d      	ldr	r1, [pc, #308]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d044      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d119      	bne.n	8003972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e07f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d003      	beq.n	8003952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394e:	2b03      	cmp	r3, #3
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003952:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e06f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e067      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003972:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 0203 	bic.w	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4934      	ldr	r1, [pc, #208]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003984:	f7ff f82c 	bl	80029e0 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	e00a      	b.n	80039a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800398c:	f7ff f828 	bl	80029e0 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f241 3288 	movw	r2, #5000	; 0x1388
 800399a:	4293      	cmp	r3, r2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e04f      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a2:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 020c 	and.w	r2, r3, #12
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d1eb      	bne.n	800398c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d20c      	bcs.n	80039dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e032      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4916      	ldr	r1, [pc, #88]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	490e      	ldr	r1, [pc, #56]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a1a:	f000 f855 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	490a      	ldr	r1, [pc, #40]	; (8003a54 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	5ccb      	ldrb	r3, [r1, r3]
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe ff8c 	bl	8002958 <HAL_InitTick>

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023c00 	.word	0x40023c00
 8003a50:	40023800 	.word	0x40023800
 8003a54:	0800f038 	.word	0x0800f038
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	20000004 	.word	0x20000004

08003a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a7c:	f7ff fff0 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	0a9b      	lsrs	r3, r3, #10
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	0800f048 	.word	0x0800f048

08003aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa4:	f7ff ffdc 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0b5b      	lsrs	r3, r3, #13
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	0800f048 	.word	0x0800f048

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003acc:	b0ae      	sub	sp, #184	; 0xb8
 8003ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aee:	4bcb      	ldr	r3, [pc, #812]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	f200 8206 	bhi.w	8003f08 <HAL_RCC_GetSysClockFreq+0x440>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003f09 	.word	0x08003f09
 8003b0c:	08003f09 	.word	0x08003f09
 8003b10:	08003f09 	.word	0x08003f09
 8003b14:	08003b41 	.word	0x08003b41
 8003b18:	08003f09 	.word	0x08003f09
 8003b1c:	08003f09 	.word	0x08003f09
 8003b20:	08003f09 	.word	0x08003f09
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003f09 	.word	0x08003f09
 8003b2c:	08003f09 	.word	0x08003f09
 8003b30:	08003f09 	.word	0x08003f09
 8003b34:	08003d39 	.word	0x08003d39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b38:	4bb9      	ldr	r3, [pc, #740]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b3e:	e1e7      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b40:	4bb8      	ldr	r3, [pc, #736]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b46:	e1e3      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b48:	4bb4      	ldr	r3, [pc, #720]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b54:	4bb1      	ldr	r3, [pc, #708]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d071      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b60:	4bae      	ldr	r3, [pc, #696]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b86:	4622      	mov	r2, r4
 8003b88:	462b      	mov	r3, r5
 8003b8a:	f04f 0000 	mov.w	r0, #0
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	0159      	lsls	r1, r3, #5
 8003b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b98:	0150      	lsls	r0, r2, #5
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	1a51      	subs	r1, r2, r1
 8003ba2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003bb8:	4649      	mov	r1, r9
 8003bba:	018b      	lsls	r3, r1, #6
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	018a      	lsls	r2, r1, #6
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	1a51      	subs	r1, r2, r1
 8003bca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bcc:	4649      	mov	r1, r9
 8003bce:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003be0:	4649      	mov	r1, r9
 8003be2:	00cb      	lsls	r3, r1, #3
 8003be4:	4641      	mov	r1, r8
 8003be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bea:	4641      	mov	r1, r8
 8003bec:	00ca      	lsls	r2, r1, #3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bfa:	462b      	mov	r3, r5
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	eb42 0303 	adc.w	r3, r2, r3
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c10:	4629      	mov	r1, r5
 8003c12:	024b      	lsls	r3, r1, #9
 8003c14:	4621      	mov	r1, r4
 8003c16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	024a      	lsls	r2, r1, #9
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c34:	f7fd f828 	bl	8000c88 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c42:	e067      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c44:	4b75      	ldr	r3, [pc, #468]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c50:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c5e:	2300      	movs	r3, #0
 8003c60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c66:	4622      	mov	r2, r4
 8003c68:	462b      	mov	r3, r5
 8003c6a:	f04f 0000 	mov.w	r0, #0
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	0159      	lsls	r1, r3, #5
 8003c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c78:	0150      	lsls	r0, r2, #5
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4621      	mov	r1, r4
 8003c80:	1a51      	subs	r1, r2, r1
 8003c82:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c84:	4629      	mov	r1, r5
 8003c86:	eb63 0301 	sbc.w	r3, r3, r1
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003c98:	4649      	mov	r1, r9
 8003c9a:	018b      	lsls	r3, r1, #6
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	018a      	lsls	r2, r1, #6
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cac:	4649      	mov	r1, r9
 8003cae:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cc6:	4692      	mov	sl, r2
 8003cc8:	469b      	mov	fp, r3
 8003cca:	4623      	mov	r3, r4
 8003ccc:	eb1a 0303 	adds.w	r3, sl, r3
 8003cd0:	623b      	str	r3, [r7, #32]
 8003cd2:	462b      	mov	r3, r5
 8003cd4:	eb4b 0303 	adc.w	r3, fp, r3
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	028b      	lsls	r3, r1, #10
 8003cea:	4621      	mov	r1, r4
 8003cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	028a      	lsls	r2, r1, #10
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	673b      	str	r3, [r7, #112]	; 0x70
 8003d00:	677a      	str	r2, [r7, #116]	; 0x74
 8003d02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d06:	f7fc ffbf 	bl	8000c88 <__aeabi_uldivmod>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4613      	mov	r3, r2
 8003d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d14:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d36:	e0eb      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d38:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d44:	4b35      	ldr	r3, [pc, #212]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d06b      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d50:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	2200      	movs	r2, #0
 8003d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	663b      	str	r3, [r7, #96]	; 0x60
 8003d64:	2300      	movs	r3, #0
 8003d66:	667b      	str	r3, [r7, #100]	; 0x64
 8003d68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	462b      	mov	r3, r5
 8003d70:	f04f 0000 	mov.w	r0, #0
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	0159      	lsls	r1, r3, #5
 8003d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d7e:	0150      	lsls	r0, r2, #5
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4621      	mov	r1, r4
 8003d86:	1a51      	subs	r1, r2, r1
 8003d88:	61b9      	str	r1, [r7, #24]
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d9e:	4659      	mov	r1, fp
 8003da0:	018b      	lsls	r3, r1, #6
 8003da2:	4651      	mov	r1, sl
 8003da4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da8:	4651      	mov	r1, sl
 8003daa:	018a      	lsls	r2, r1, #6
 8003dac:	4651      	mov	r1, sl
 8003dae:	ebb2 0801 	subs.w	r8, r2, r1
 8003db2:	4659      	mov	r1, fp
 8003db4:	eb63 0901 	sbc.w	r9, r3, r1
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dcc:	4690      	mov	r8, r2
 8003dce:	4699      	mov	r9, r3
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	eb18 0303 	adds.w	r3, r8, r3
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	462b      	mov	r3, r5
 8003dda:	eb49 0303 	adc.w	r3, r9, r3
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003dec:	4629      	mov	r1, r5
 8003dee:	024b      	lsls	r3, r1, #9
 8003df0:	4621      	mov	r1, r4
 8003df2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003df6:	4621      	mov	r1, r4
 8003df8:	024a      	lsls	r2, r1, #9
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e02:	2200      	movs	r2, #0
 8003e04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e0c:	f7fc ff3c 	bl	8000c88 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e1a:	e065      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x420>
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	00f42400 	.word	0x00f42400
 8003e24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e28:	4b3d      	ldr	r3, [pc, #244]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	4611      	mov	r1, r2
 8003e34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e38:	653b      	str	r3, [r7, #80]	; 0x50
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e42:	4642      	mov	r2, r8
 8003e44:	464b      	mov	r3, r9
 8003e46:	f04f 0000 	mov.w	r0, #0
 8003e4a:	f04f 0100 	mov.w	r1, #0
 8003e4e:	0159      	lsls	r1, r3, #5
 8003e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e54:	0150      	lsls	r0, r2, #5
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	1a51      	subs	r1, r2, r1
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	4649      	mov	r1, r9
 8003e62:	eb63 0301 	sbc.w	r3, r3, r1
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e74:	4659      	mov	r1, fp
 8003e76:	018b      	lsls	r3, r1, #6
 8003e78:	4651      	mov	r1, sl
 8003e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e7e:	4651      	mov	r1, sl
 8003e80:	018a      	lsls	r2, r1, #6
 8003e82:	4651      	mov	r1, sl
 8003e84:	1a54      	subs	r4, r2, r1
 8003e86:	4659      	mov	r1, fp
 8003e88:	eb63 0501 	sbc.w	r5, r3, r1
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	00eb      	lsls	r3, r5, #3
 8003e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e9a:	00e2      	lsls	r2, r4, #3
 8003e9c:	4614      	mov	r4, r2
 8003e9e:	461d      	mov	r5, r3
 8003ea0:	4643      	mov	r3, r8
 8003ea2:	18e3      	adds	r3, r4, r3
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	eb45 0303 	adc.w	r3, r5, r3
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eba:	4629      	mov	r1, r5
 8003ebc:	028b      	lsls	r3, r1, #10
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	028a      	lsls	r2, r1, #10
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ed6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003eda:	f7fc fed5 	bl	8000c88 <__aeabi_uldivmod>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ee8:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	0f1b      	lsrs	r3, r3, #28
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f06:	e003      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	37b8      	adds	r7, #184	; 0xb8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	00f42400 	.word	0x00f42400

08003f28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e28d      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8083 	beq.w	800404e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f48:	4b94      	ldr	r3, [pc, #592]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d019      	beq.n	8003f88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f54:	4b91      	ldr	r3, [pc, #580]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f60:	4b8e      	ldr	r3, [pc, #568]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6c:	d00c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6e:	4b8b      	ldr	r3, [pc, #556]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d112      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7a:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f86:	d10b      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	4b84      	ldr	r3, [pc, #528]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d05b      	beq.n	800404c <HAL_RCC_OscConfig+0x124>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d157      	bne.n	800404c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e25a      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x90>
 8003faa:	4b7c      	ldr	r3, [pc, #496]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7b      	ldr	r2, [pc, #492]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e01d      	b.n	8003ff4 <HAL_RCC_OscConfig+0xcc>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0xb4>
 8003fc2:	4b76      	ldr	r3, [pc, #472]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a75      	ldr	r2, [pc, #468]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	4b73      	ldr	r3, [pc, #460]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a72      	ldr	r2, [pc, #456]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e00b      	b.n	8003ff4 <HAL_RCC_OscConfig+0xcc>
 8003fdc:	4b6f      	ldr	r3, [pc, #444]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b6c      	ldr	r3, [pc, #432]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a6b      	ldr	r2, [pc, #428]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8003fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d013      	beq.n	8004024 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fcf0 	bl	80029e0 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004004:	f7fe fcec 	bl	80029e0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e21f      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b61      	ldr	r3, [pc, #388]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0xdc>
 8004022:	e014      	b.n	800404e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe fcdc 	bl	80029e0 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402c:	f7fe fcd8 	bl	80029e0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e20b      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403e:	4b57      	ldr	r3, [pc, #348]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x104>
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d06f      	beq.n	800413a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800405a:	4b50      	ldr	r3, [pc, #320]	; (800419c <HAL_RCC_OscConfig+0x274>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b00      	cmp	r3, #0
 8004064:	d017      	beq.n	8004096 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004066:	4b4d      	ldr	r3, [pc, #308]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800406e:	2b08      	cmp	r3, #8
 8004070:	d105      	bne.n	800407e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004072:	4b4a      	ldr	r3, [pc, #296]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407e:	4b47      	ldr	r3, [pc, #284]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d11c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408a:	4b44      	ldr	r3, [pc, #272]	; (800419c <HAL_RCC_OscConfig+0x274>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d116      	bne.n	80040c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004096:	4b41      	ldr	r3, [pc, #260]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_RCC_OscConfig+0x186>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e1d3      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ae:	4b3b      	ldr	r3, [pc, #236]	; (800419c <HAL_RCC_OscConfig+0x274>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4937      	ldr	r1, [pc, #220]	; (800419c <HAL_RCC_OscConfig+0x274>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c2:	e03a      	b.n	800413a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040cc:	4b34      	ldr	r3, [pc, #208]	; (80041a0 <HAL_RCC_OscConfig+0x278>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fe fc85 	bl	80029e0 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040da:	f7fe fc81 	bl	80029e0 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1b4      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_RCC_OscConfig+0x274>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f8:	4b28      	ldr	r3, [pc, #160]	; (800419c <HAL_RCC_OscConfig+0x274>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4925      	ldr	r1, [pc, #148]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]
 800410c:	e015      	b.n	800413a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <HAL_RCC_OscConfig+0x278>)
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fe fc64 	bl	80029e0 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411c:	f7fe fc60 	bl	80029e0 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e193      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412e:	4b1b      	ldr	r3, [pc, #108]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d036      	beq.n	80041b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d016      	beq.n	800417c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <HAL_RCC_OscConfig+0x27c>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fe fc44 	bl	80029e0 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800415c:	f7fe fc40 	bl	80029e0 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e173      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_RCC_OscConfig+0x274>)
 8004170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x234>
 800417a:	e01b      	b.n	80041b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fe fc2d 	bl	80029e0 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004188:	e00e      	b.n	80041a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800418a:	f7fe fc29 	bl	80029e0 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d907      	bls.n	80041a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e15c      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
 800419c:	40023800 	.word	0x40023800
 80041a0:	42470000 	.word	0x42470000
 80041a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	4b8a      	ldr	r3, [pc, #552]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1ea      	bne.n	800418a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8097 	beq.w	80042f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c6:	4b83      	ldr	r3, [pc, #524]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	4b7f      	ldr	r3, [pc, #508]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	4a7e      	ldr	r2, [pc, #504]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6413      	str	r3, [r2, #64]	; 0x40
 80041e2:	4b7c      	ldr	r3, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f2:	4b79      	ldr	r3, [pc, #484]	; (80043d8 <HAL_RCC_OscConfig+0x4b0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d118      	bne.n	8004230 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fe:	4b76      	ldr	r3, [pc, #472]	; (80043d8 <HAL_RCC_OscConfig+0x4b0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a75      	ldr	r2, [pc, #468]	; (80043d8 <HAL_RCC_OscConfig+0x4b0>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420a:	f7fe fbe9 	bl	80029e0 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004212:	f7fe fbe5 	bl	80029e0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e118      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004224:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <HAL_RCC_OscConfig+0x4b0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d106      	bne.n	8004246 <HAL_RCC_OscConfig+0x31e>
 8004238:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4a65      	ldr	r2, [pc, #404]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
 8004244:	e01c      	b.n	8004280 <HAL_RCC_OscConfig+0x358>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b05      	cmp	r3, #5
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x340>
 800424e:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a60      	ldr	r2, [pc, #384]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 8004254:	f043 0304 	orr.w	r3, r3, #4
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	4b5e      	ldr	r3, [pc, #376]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a5d      	ldr	r2, [pc, #372]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
 8004266:	e00b      	b.n	8004280 <HAL_RCC_OscConfig+0x358>
 8004268:	4b5a      	ldr	r3, [pc, #360]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a59      	ldr	r2, [pc, #356]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
 8004274:	4b57      	ldr	r3, [pc, #348]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a56      	ldr	r2, [pc, #344]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 800427a:	f023 0304 	bic.w	r3, r3, #4
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d015      	beq.n	80042b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fe fbaa 	bl	80029e0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fe fba6 	bl	80029e0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0d7      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a6:	4b4b      	ldr	r3, [pc, #300]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0ee      	beq.n	8004290 <HAL_RCC_OscConfig+0x368>
 80042b2:	e014      	b.n	80042de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b4:	f7fe fb94 	bl	80029e0 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fe fb90 	bl	80029e0 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0c1      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d2:	4b40      	ldr	r3, [pc, #256]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1ee      	bne.n	80042bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d105      	bne.n	80042f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e4:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	4a3a      	ldr	r2, [pc, #232]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80042ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80ad 	beq.w	8004454 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042fa:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b08      	cmp	r3, #8
 8004304:	d060      	beq.n	80043c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d145      	bne.n	800439a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b33      	ldr	r3, [pc, #204]	; (80043dc <HAL_RCC_OscConfig+0x4b4>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe fb64 	bl	80029e0 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe fb60 	bl	80029e0 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e093      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	019b      	lsls	r3, r3, #6
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	3b01      	subs	r3, #1
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	071b      	lsls	r3, r3, #28
 8004366:	491b      	ldr	r1, [pc, #108]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x4b4>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fe fb35 	bl	80029e0 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437a:	f7fe fb31 	bl	80029e0 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e064      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438c:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x452>
 8004398:	e05c      	b.n	8004454 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <HAL_RCC_OscConfig+0x4b4>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fe fb1e 	bl	80029e0 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fe fb1a 	bl	80029e0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e04d      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x480>
 80043c6:	e045      	b.n	8004454 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e040      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40007000 	.word	0x40007000
 80043dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e0:	4b1f      	ldr	r3, [pc, #124]	; (8004460 <HAL_RCC_OscConfig+0x538>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d030      	beq.n	8004450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d129      	bne.n	8004450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d122      	bne.n	8004450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004410:	4013      	ands	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004418:	4293      	cmp	r3, r2
 800441a:	d119      	bne.n	8004450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	3b01      	subs	r3, #1
 800442a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d10f      	bne.n	8004450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d107      	bne.n	8004450 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800

08004464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e041      	b.n	80044fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fd fe66 	bl	800215c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 fd92 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e046      	b.n	80045aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a23      	ldr	r2, [pc, #140]	; (80045b8 <HAL_TIM_Base_Start+0xb4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004536:	d01d      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <HAL_TIM_Base_Start+0xb8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <HAL_TIM_Base_Start+0xbc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <HAL_TIM_Base_Start+0xc0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <HAL_TIM_Base_Start+0xc4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a19      	ldr	r2, [pc, #100]	; (80045cc <HAL_TIM_Base_Start+0xc8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_TIM_Base_Start+0x70>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <HAL_TIM_Base_Start+0xcc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d111      	bne.n	8004598 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b06      	cmp	r3, #6
 8004584:	d010      	beq.n	80045a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0201 	orr.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004596:	e007      	b.n	80045a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40010400 	.word	0x40010400
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40001800 	.word	0x40001800

080045d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e04e      	b.n	800468a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a23      	ldr	r2, [pc, #140]	; (8004698 <HAL_TIM_Base_Start_IT+0xc4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d022      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004616:	d01d      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1f      	ldr	r2, [pc, #124]	; (800469c <HAL_TIM_Base_Start_IT+0xc8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a19      	ldr	r2, [pc, #100]	; (80046ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_TIM_Base_Start_IT+0x80>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d111      	bne.n	8004678 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b06      	cmp	r3, #6
 8004664:	d010      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004676:	e007      	b.n	8004688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40010400 	.word	0x40010400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40001800 	.word	0x40001800

080046b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e041      	b.n	800474a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f839 	bl	8004752 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f000 fc6a 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <HAL_TIM_PWM_Start+0x24>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e022      	b.n	80047d2 <HAL_TIM_PWM_Start+0x6a>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b04      	cmp	r3, #4
 8004790:	d109      	bne.n	80047a6 <HAL_TIM_PWM_Start+0x3e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	bf14      	ite	ne
 800479e:	2301      	movne	r3, #1
 80047a0:	2300      	moveq	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	e015      	b.n	80047d2 <HAL_TIM_PWM_Start+0x6a>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d109      	bne.n	80047c0 <HAL_TIM_PWM_Start+0x58>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e008      	b.n	80047d2 <HAL_TIM_PWM_Start+0x6a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e07c      	b.n	80048d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_TIM_PWM_Start+0x82>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	e013      	b.n	8004812 <HAL_TIM_PWM_Start+0xaa>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_PWM_Start+0x92>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	e00b      	b.n	8004812 <HAL_TIM_PWM_Start+0xaa>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xa2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004808:	e003      	b.n	8004812 <HAL_TIM_PWM_Start+0xaa>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2201      	movs	r2, #1
 8004818:	6839      	ldr	r1, [r7, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fec0 	bl	80055a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a2d      	ldr	r2, [pc, #180]	; (80048dc <HAL_TIM_PWM_Start+0x174>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIM_PWM_Start+0xcc>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2c      	ldr	r2, [pc, #176]	; (80048e0 <HAL_TIM_PWM_Start+0x178>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_TIM_PWM_Start+0xd0>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_TIM_PWM_Start+0xd2>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a22      	ldr	r2, [pc, #136]	; (80048dc <HAL_TIM_PWM_Start+0x174>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d022      	beq.n	800489e <HAL_TIM_PWM_Start+0x136>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d01d      	beq.n	800489e <HAL_TIM_PWM_Start+0x136>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_TIM_PWM_Start+0x17c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d018      	beq.n	800489e <HAL_TIM_PWM_Start+0x136>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <HAL_TIM_PWM_Start+0x180>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <HAL_TIM_PWM_Start+0x136>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_TIM_PWM_Start+0x184>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_TIM_PWM_Start+0x136>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <HAL_TIM_PWM_Start+0x178>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d009      	beq.n	800489e <HAL_TIM_PWM_Start+0x136>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_TIM_PWM_Start+0x188>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_TIM_PWM_Start+0x136>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <HAL_TIM_PWM_Start+0x18c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d111      	bne.n	80048c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b06      	cmp	r3, #6
 80048ae:	d010      	beq.n	80048d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c0:	e007      	b.n	80048d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40010400 	.word	0x40010400
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40001800 	.word	0x40001800

080048f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e097      	b.n	8004a3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fd fb9f 	bl	8002064 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493c:	f023 0307 	bic.w	r3, r3, #7
 8004940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 fb3d 	bl	8004fcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	4313      	orrs	r3, r2
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004998:	f023 030c 	bic.w	r3, r3, #12
 800499c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	4313      	orrs	r3, r2
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	011a      	lsls	r2, r3, #4
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	031b      	lsls	r3, r3, #12
 80049c8:	4313      	orrs	r3, r2
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	4313      	orrs	r3, r2
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0202 	mvn.w	r2, #2
 8004a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa81 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa73 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa84 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0204 	mvn.w	r2, #4
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa57 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa49 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fa5a 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0208 	mvn.w	r2, #8
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa2d 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa1f 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fa30 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa03 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9f5 	bl	8004f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fa06 	bl	8004fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0201 	mvn.w	r2, #1
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f9cf 	bl	8004f66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b80      	cmp	r3, #128	; 0x80
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fdd4 	bl	800579c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d10e      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d107      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f9cb 	bl	8004fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d10e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0220 	mvn.w	r2, #32
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fd9e 	bl	8005788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0ae      	b.n	8004dd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b0c      	cmp	r3, #12
 8004c7e:	f200 809f 	bhi.w	8004dc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004cbd 	.word	0x08004cbd
 8004c8c:	08004dc1 	.word	0x08004dc1
 8004c90:	08004dc1 	.word	0x08004dc1
 8004c94:	08004dc1 	.word	0x08004dc1
 8004c98:	08004cfd 	.word	0x08004cfd
 8004c9c:	08004dc1 	.word	0x08004dc1
 8004ca0:	08004dc1 	.word	0x08004dc1
 8004ca4:	08004dc1 	.word	0x08004dc1
 8004ca8:	08004d3f 	.word	0x08004d3f
 8004cac:	08004dc1 	.word	0x08004dc1
 8004cb0:	08004dc1 	.word	0x08004dc1
 8004cb4:	08004dc1 	.word	0x08004dc1
 8004cb8:	08004d7f 	.word	0x08004d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fa22 	bl	800510c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0208 	orr.w	r2, r2, #8
 8004cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0204 	bic.w	r2, r2, #4
 8004ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	619a      	str	r2, [r3, #24]
      break;
 8004cfa:	e064      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fa72 	bl	80051ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6999      	ldr	r1, [r3, #24]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	021a      	lsls	r2, r3, #8
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	619a      	str	r2, [r3, #24]
      break;
 8004d3c:	e043      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fac7 	bl	80052d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0208 	orr.w	r2, r2, #8
 8004d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0204 	bic.w	r2, r2, #4
 8004d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	61da      	str	r2, [r3, #28]
      break;
 8004d7c:	e023      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fb1b 	bl	80053c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69d9      	ldr	r1, [r3, #28]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	021a      	lsls	r2, r3, #8
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	61da      	str	r2, [r3, #28]
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e0b4      	b.n	8004f5e <HAL_TIM_ConfigClockSource+0x186>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2c:	d03e      	beq.n	8004eac <HAL_TIM_ConfigClockSource+0xd4>
 8004e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e32:	f200 8087 	bhi.w	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3a:	f000 8086 	beq.w	8004f4a <HAL_TIM_ConfigClockSource+0x172>
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d87f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b70      	cmp	r3, #112	; 0x70
 8004e46:	d01a      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0xa6>
 8004e48:	2b70      	cmp	r3, #112	; 0x70
 8004e4a:	d87b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b60      	cmp	r3, #96	; 0x60
 8004e4e:	d050      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e50:	2b60      	cmp	r3, #96	; 0x60
 8004e52:	d877      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b50      	cmp	r3, #80	; 0x50
 8004e56:	d03c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8004e58:	2b50      	cmp	r3, #80	; 0x50
 8004e5a:	d873      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d058      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x13a>
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d86f      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b30      	cmp	r3, #48	; 0x30
 8004e66:	d064      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e68:	2b30      	cmp	r3, #48	; 0x30
 8004e6a:	d86b      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d060      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d867      	bhi.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d05c      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d05a      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x15a>
 8004e7c:	e062      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6899      	ldr	r1, [r3, #8]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f000 fb67 	bl	8005560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
      break;
 8004eaa:	e04f      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f000 fb50 	bl	8005560 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ece:	609a      	str	r2, [r3, #8]
      break;
 8004ed0:	e03c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fac4 	bl	800546c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2150      	movs	r1, #80	; 0x50
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fb1d 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e02c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 fae3 	bl	80054ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2160      	movs	r1, #96	; 0x60
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fb0d 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004f10:	e01c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 faa4 	bl	800546c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2140      	movs	r1, #64	; 0x40
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fafd 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004f30:	e00c      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f000 faf4 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004f42:	e003      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      break;
 8004f48:	e000      	b.n	8004f4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a40      	ldr	r2, [pc, #256]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d013      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d00f      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3d      	ldr	r2, [pc, #244]	; (80050e4 <TIM_Base_SetConfig+0x118>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00b      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3c      	ldr	r2, [pc, #240]	; (80050e8 <TIM_Base_SetConfig+0x11c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a3b      	ldr	r2, [pc, #236]	; (80050ec <TIM_Base_SetConfig+0x120>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a3a      	ldr	r2, [pc, #232]	; (80050f0 <TIM_Base_SetConfig+0x124>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d108      	bne.n	800501e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2f      	ldr	r2, [pc, #188]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d02b      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502c:	d027      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <TIM_Base_SetConfig+0x118>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d023      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <TIM_Base_SetConfig+0x11c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d01f      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2a      	ldr	r2, [pc, #168]	; (80050ec <TIM_Base_SetConfig+0x120>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01b      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <TIM_Base_SetConfig+0x124>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d017      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a28      	ldr	r2, [pc, #160]	; (80050f4 <TIM_Base_SetConfig+0x128>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a27      	ldr	r2, [pc, #156]	; (80050f8 <TIM_Base_SetConfig+0x12c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00f      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a26      	ldr	r2, [pc, #152]	; (80050fc <TIM_Base_SetConfig+0x130>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00b      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a25      	ldr	r2, [pc, #148]	; (8005100 <TIM_Base_SetConfig+0x134>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a24      	ldr	r2, [pc, #144]	; (8005104 <TIM_Base_SetConfig+0x138>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a23      	ldr	r2, [pc, #140]	; (8005108 <TIM_Base_SetConfig+0x13c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d108      	bne.n	8005090 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_Base_SetConfig+0xf8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a0c      	ldr	r2, [pc, #48]	; (80050f0 <TIM_Base_SetConfig+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d103      	bne.n	80050cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	615a      	str	r2, [r3, #20]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40010400 	.word	0x40010400
 80050f4:	40014000 	.word	0x40014000
 80050f8:	40014400 	.word	0x40014400
 80050fc:	40014800 	.word	0x40014800
 8005100:	40001800 	.word	0x40001800
 8005104:	40001c00 	.word	0x40001c00
 8005108:	40002000 	.word	0x40002000

0800510c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f023 0201 	bic.w	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 0302 	bic.w	r3, r3, #2
 8005154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a20      	ldr	r2, [pc, #128]	; (80051e4 <TIM_OC1_SetConfig+0xd8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_OC1_SetConfig+0x64>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <TIM_OC1_SetConfig+0xdc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10c      	bne.n	800518a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0308 	bic.w	r3, r3, #8
 8005176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <TIM_OC1_SetConfig+0xd8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_OC1_SetConfig+0x8e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <TIM_OC1_SetConfig+0xdc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d111      	bne.n	80051be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	621a      	str	r2, [r3, #32]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40010400 	.word	0x40010400

080051ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0210 	bic.w	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0320 	bic.w	r3, r3, #32
 8005236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <TIM_OC2_SetConfig+0xe4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC2_SetConfig+0x68>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a21      	ldr	r2, [pc, #132]	; (80052d4 <TIM_OC2_SetConfig+0xe8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10d      	bne.n	8005270 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a17      	ldr	r2, [pc, #92]	; (80052d0 <TIM_OC2_SetConfig+0xe4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC2_SetConfig+0x94>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a16      	ldr	r2, [pc, #88]	; (80052d4 <TIM_OC2_SetConfig+0xe8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d113      	bne.n	80052a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800528e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400

080052d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a21      	ldr	r2, [pc, #132]	; (80053b8 <TIM_OC3_SetConfig+0xe0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_OC3_SetConfig+0x66>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a20      	ldr	r2, [pc, #128]	; (80053bc <TIM_OC3_SetConfig+0xe4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10d      	bne.n	800535a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a16      	ldr	r2, [pc, #88]	; (80053b8 <TIM_OC3_SetConfig+0xe0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_OC3_SetConfig+0x92>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a15      	ldr	r2, [pc, #84]	; (80053bc <TIM_OC3_SetConfig+0xe4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d113      	bne.n	8005392 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	621a      	str	r2, [r3, #32]
}
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40010400 	.word	0x40010400

080053c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800540a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <TIM_OC4_SetConfig+0xa4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d003      	beq.n	8005428 <TIM_OC4_SetConfig+0x68>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a11      	ldr	r2, [pc, #68]	; (8005468 <TIM_OC4_SetConfig+0xa8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d109      	bne.n	800543c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800542e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	019b      	lsls	r3, r3, #6
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40010400 	.word	0x40010400

0800546c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0201 	bic.w	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 030a 	bic.w	r3, r3, #10
 80054a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b087      	sub	sp, #28
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0210 	bic.w	r2, r3, #16
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	031b      	lsls	r3, r3, #12
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005506:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	f043 0307 	orr.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	021a      	lsls	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	431a      	orrs	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	609a      	str	r2, [r3, #8]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	2201      	movs	r2, #1
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1a      	ldr	r2, [r3, #32]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	401a      	ands	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 031f 	and.w	r3, r3, #31
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	431a      	orrs	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005600:	2302      	movs	r3, #2
 8005602:	e05a      	b.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d022      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005650:	d01d      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d018      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1b      	ldr	r2, [pc, #108]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d013      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1a      	ldr	r2, [pc, #104]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00e      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a17      	ldr	r2, [pc, #92]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d10c      	bne.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	4313      	orrs	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40010400 	.word	0x40010400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40001800 	.word	0x40001800

080056e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e03d      	b.n	800577c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e03f      	b.n	8005842 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc fec0 	bl	800255c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2224      	movs	r2, #36	; 0x24
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 ffd7 	bl	80067a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b08a      	sub	sp, #40	; 0x28
 800584e:	af02      	add	r7, sp, #8
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	4613      	mov	r3, r2
 8005858:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b20      	cmp	r3, #32
 8005868:	d17c      	bne.n	8005964 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <HAL_UART_Transmit+0x2c>
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e075      	b.n	8005966 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_UART_Transmit+0x3e>
 8005884:	2302      	movs	r3, #2
 8005886:	e06e      	b.n	8005966 <HAL_UART_Transmit+0x11c>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2221      	movs	r2, #33	; 0x21
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589e:	f7fd f89f 	bl	80029e0 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b8:	d108      	bne.n	80058cc <HAL_UART_Transmit+0x82>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e003      	b.n	80058d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058dc:	e02a      	b.n	8005934 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fc51 	bl	8006190 <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e036      	b.n	8005966 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800590c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3302      	adds	r3, #2
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e007      	b.n	8005926 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1cf      	bne.n	80058de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	2140      	movs	r1, #64	; 0x40
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fc21 	bl	8006190 <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e006      	b.n	8005966 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	4613      	mov	r3, r2
 800597a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b20      	cmp	r3, #32
 8005986:	d11d      	bne.n	80059c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Receive_IT+0x26>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e016      	b.n	80059c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_UART_Receive_IT+0x38>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e00f      	b.n	80059c6 <HAL_UART_Receive_IT+0x58>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059b4:	88fb      	ldrh	r3, [r7, #6]
 80059b6:	461a      	mov	r2, r3
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fc56 	bl	800626c <UART_Start_Receive_IT>
 80059c0:	4603      	mov	r3, r0
 80059c2:	e000      	b.n	80059c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
  }
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b084      	sub	sp, #16
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d11d      	bne.n	8005a24 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_UART_Receive_DMA+0x26>
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e016      	b.n	8005a26 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Receive_DMA+0x38>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e00f      	b.n	8005a26 <HAL_UART_Receive_DMA+0x58>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	461a      	mov	r2, r3
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fc64 	bl	80062e8 <UART_Start_Receive_DMA>
 8005a20:	4603      	mov	r3, r0
 8005a22:	e000      	b.n	8005a26 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a24:	2302      	movs	r3, #2
  }
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b0ba      	sub	sp, #232	; 0xe8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10f      	bne.n	8005a96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <HAL_UART_IRQHandler+0x66>
 8005a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fdcf 	bl	8006632 <UART_Receive_IT>
      return;
 8005a94:	e256      	b.n	8005f44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 80de 	beq.w	8005c5c <HAL_UART_IRQHandler+0x22c>
 8005aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80d1 	beq.w	8005c5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <HAL_UART_IRQHandler+0xae>
 8005ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f043 0201 	orr.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_UART_IRQHandler+0xd2>
 8005aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f043 0202 	orr.w	r2, r3, #2
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <HAL_UART_IRQHandler+0xf6>
 8005b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f043 0204 	orr.w	r2, r3, #4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d011      	beq.n	8005b56 <HAL_UART_IRQHandler+0x126>
 8005b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d105      	bne.n	8005b4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f043 0208 	orr.w	r2, r3, #8
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 81ed 	beq.w	8005f3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <HAL_UART_IRQHandler+0x14e>
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fd5a 	bl	8006632 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <HAL_UART_IRQHandler+0x17a>
 8005ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d04f      	beq.n	8005c4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fc62 	bl	8006474 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d141      	bne.n	8005c42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3314      	adds	r3, #20
 8005bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3314      	adds	r3, #20
 8005be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1d9      	bne.n	8005bbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d013      	beq.n	8005c3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	4a7d      	ldr	r2, [pc, #500]	; (8005e0c <HAL_UART_IRQHandler+0x3dc>)
 8005c18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fd f996 	bl	8002f50 <HAL_DMA_Abort_IT>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d016      	beq.n	8005c58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c34:	4610      	mov	r0, r2
 8005c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	e00e      	b.n	8005c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f99a 	bl	8005f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	e00a      	b.n	8005c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f996 	bl	8005f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c48:	e006      	b.n	8005c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f992 	bl	8005f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c56:	e170      	b.n	8005f3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c58:	bf00      	nop
    return;
 8005c5a:	e16e      	b.n	8005f3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	f040 814a 	bne.w	8005efa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8143 	beq.w	8005efa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c78:	f003 0310 	and.w	r3, r3, #16
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 813c 	beq.w	8005efa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c82:	2300      	movs	r3, #0
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca2:	2b40      	cmp	r3, #64	; 0x40
 8005ca4:	f040 80b4 	bne.w	8005e10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8140 	beq.w	8005f3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	f080 8139 	bcs.w	8005f3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cde:	f000 8088 	beq.w	8005df2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	330c      	adds	r3, #12
 8005ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1d9      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3314      	adds	r3, #20
 8005d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3314      	adds	r3, #20
 8005d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e1      	bne.n	8005d2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3314      	adds	r3, #20
 8005d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e3      	bne.n	8005d6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc2:	f023 0310 	bic.w	r3, r3, #16
 8005dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e3      	bne.n	8005db0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fd f83f 	bl	8002e70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f8c0 	bl	8005f88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e08:	e099      	b.n	8005f3e <HAL_UART_IRQHandler+0x50e>
 8005e0a:	bf00      	nop
 8005e0c:	0800653b 	.word	0x0800653b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 808b 	beq.w	8005f42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8086 	beq.w	8005f42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005e5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e3      	bne.n	8005e36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3314      	adds	r3, #20
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3314      	adds	r3, #20
 8005e8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e92:	633a      	str	r2, [r7, #48]	; 0x30
 8005e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e3      	bne.n	8005e6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0310 	bic.w	r3, r3, #16
 8005eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ed8:	61fa      	str	r2, [r7, #28]
 8005eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	69b9      	ldr	r1, [r7, #24]
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e3      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f848 	bl	8005f88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ef8:	e023      	b.n	8005f42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <HAL_UART_IRQHandler+0x4ea>
 8005f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fb25 	bl	8006562 <UART_Transmit_IT>
    return;
 8005f18:	e014      	b.n	8005f44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <HAL_UART_IRQHandler+0x514>
 8005f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d008      	beq.n	8005f44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fb65 	bl	8006602 <UART_EndTransmit_IT>
    return;
 8005f38:	e004      	b.n	8005f44 <HAL_UART_IRQHandler+0x514>
    return;
 8005f3a:	bf00      	nop
 8005f3c:	e002      	b.n	8005f44 <HAL_UART_IRQHandler+0x514>
      return;
 8005f3e:	bf00      	nop
 8005f40:	e000      	b.n	8005f44 <HAL_UART_IRQHandler+0x514>
      return;
 8005f42:	bf00      	nop
  }
}
 8005f44:	37e8      	adds	r7, #232	; 0xe8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop

08005f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b09c      	sub	sp, #112	; 0x70
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d172      	bne.n	80060a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fe2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fe4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e5      	bne.n	8005fc2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3314      	adds	r3, #20
 8005ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	667b      	str	r3, [r7, #100]	; 0x64
 800600e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3314      	adds	r3, #20
 8006014:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006016:	647a      	str	r2, [r7, #68]	; 0x44
 8006018:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800601c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e5      	bne.n	8005ff6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3314      	adds	r3, #20
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	623b      	str	r3, [r7, #32]
   return(result);
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006040:	663b      	str	r3, [r7, #96]	; 0x60
 8006042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3314      	adds	r3, #20
 8006048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800604a:	633a      	str	r2, [r7, #48]	; 0x30
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e5      	bne.n	800602a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800605e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006060:	2220      	movs	r2, #32
 8006062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	2b01      	cmp	r3, #1
 800606c:	d119      	bne.n	80060a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	60fb      	str	r3, [r7, #12]
   return(result);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f023 0310 	bic.w	r3, r3, #16
 8006084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800608e:	61fa      	str	r2, [r7, #28]
 8006090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	69b9      	ldr	r1, [r7, #24]
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	617b      	str	r3, [r7, #20]
   return(result);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d106      	bne.n	80060b8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060ae:	4619      	mov	r1, r3
 80060b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060b2:	f7ff ff69 	bl	8005f88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060b6:	e002      	b.n	80060be <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80060b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80060ba:	f003 f8f1 	bl	80092a0 <HAL_UART_RxCpltCallback>
}
 80060be:	bf00      	nop
 80060c0:	3770      	adds	r7, #112	; 0x70
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d108      	bne.n	80060ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7ff ff4e 	bl	8005f88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060ec:	e002      	b.n	80060f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff ff36 	bl	8005f60 <HAL_UART_RxHalfCpltCallback>
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b21      	cmp	r3, #33	; 0x21
 800612e:	d108      	bne.n	8006142 <UART_DMAError+0x46>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800613c:	68b8      	ldr	r0, [r7, #8]
 800613e:	f000 f971 	bl	8006424 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	bf0c      	ite	eq
 8006150:	2301      	moveq	r3, #1
 8006152:	2300      	movne	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b22      	cmp	r3, #34	; 0x22
 8006162:	d108      	bne.n	8006176 <UART_DMAError+0x7a>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2200      	movs	r2, #0
 800616e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006170:	68b8      	ldr	r0, [r7, #8]
 8006172:	f000 f97f 	bl	8006474 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f043 0210 	orr.w	r2, r3, #16
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006182:	68b8      	ldr	r0, [r7, #8]
 8006184:	f7ff fef6 	bl	8005f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b090      	sub	sp, #64	; 0x40
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a0:	e050      	b.n	8006244 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061a8:	d04c      	beq.n	8006244 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80061b0:	f7fc fc16 	bl	80029e0 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061bc:	429a      	cmp	r2, r3
 80061be:	d241      	bcs.n	8006244 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061e0:	637a      	str	r2, [r7, #52]	; 0x34
 80061e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e5      	bne.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3314      	adds	r3, #20
 80061fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	613b      	str	r3, [r7, #16]
   return(result);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	63bb      	str	r3, [r7, #56]	; 0x38
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3314      	adds	r3, #20
 8006212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006214:	623a      	str	r2, [r7, #32]
 8006216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	69f9      	ldr	r1, [r7, #28]
 800621a:	6a3a      	ldr	r2, [r7, #32]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	61bb      	str	r3, [r7, #24]
   return(result);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e5      	bne.n	80061f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e00f      	b.n	8006264 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4013      	ands	r3, r2
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	429a      	cmp	r2, r3
 8006252:	bf0c      	ite	eq
 8006254:	2301      	moveq	r3, #1
 8006256:	2300      	movne	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	429a      	cmp	r2, r3
 8006260:	d09f      	beq.n	80061a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3740      	adds	r7, #64	; 0x40
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	88fa      	ldrh	r2, [r7, #6]
 8006284:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2222      	movs	r2, #34	; 0x22
 8006296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0220 	orr.w	r2, r2, #32
 80062d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b098      	sub	sp, #96	; 0x60
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	4613      	mov	r3, r2
 80062f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2222      	movs	r2, #34	; 0x22
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	4a40      	ldr	r2, [pc, #256]	; (8006418 <UART_Start_Receive_DMA+0x130>)
 8006316:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	4a3f      	ldr	r2, [pc, #252]	; (800641c <UART_Start_Receive_DMA+0x134>)
 800631e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	4a3e      	ldr	r2, [pc, #248]	; (8006420 <UART_Start_Receive_DMA+0x138>)
 8006326:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	2200      	movs	r2, #0
 800632e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006330:	f107 0308 	add.w	r3, r7, #8
 8006334:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	f7fc fd3a 	bl	8002dc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d019      	beq.n	80063a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006388:	65bb      	str	r3, [r7, #88]	; 0x58
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006392:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006394:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80063a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	f043 0301 	orr.w	r3, r3, #1
 80063bc:	657b      	str	r3, [r7, #84]	; 0x54
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3314      	adds	r3, #20
 80063c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80063c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e5      	bne.n	80063a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3314      	adds	r3, #20
 80063e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	617b      	str	r3, [r7, #20]
   return(result);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f0:	653b      	str	r3, [r7, #80]	; 0x50
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3314      	adds	r3, #20
 80063f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063fa:	627a      	str	r2, [r7, #36]	; 0x24
 80063fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6a39      	ldr	r1, [r7, #32]
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	61fb      	str	r3, [r7, #28]
   return(result);
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e5      	bne.n	80063da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3760      	adds	r7, #96	; 0x60
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	08005fa1 	.word	0x08005fa1
 800641c:	080060c7 	.word	0x080060c7
 8006420:	080060fd 	.word	0x080060fd

08006424 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	; 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	60bb      	str	r3, [r7, #8]
   return(result);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	61ba      	str	r2, [r7, #24]
 800644e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6979      	ldr	r1, [r7, #20]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	613b      	str	r3, [r7, #16]
   return(result);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e5      	bne.n	800642c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006468:	bf00      	nop
 800646a:	3724      	adds	r7, #36	; 0x24
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b095      	sub	sp, #84	; 0x54
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	330c      	adds	r3, #12
 800649a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800649c:	643a      	str	r2, [r7, #64]	; 0x40
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e5      	bne.n	800647c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3314      	adds	r3, #20
 80064b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	f023 0301 	bic.w	r3, r3, #1
 80064c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3314      	adds	r3, #20
 80064ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e5      	bne.n	80064b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d119      	bne.n	8006520 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	330c      	adds	r3, #12
 80064f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 0310 	bic.w	r3, r3, #16
 8006502:	647b      	str	r3, [r7, #68]	; 0x44
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	330c      	adds	r3, #12
 800650a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800650c:	61ba      	str	r2, [r7, #24]
 800650e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6979      	ldr	r1, [r7, #20]
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	613b      	str	r3, [r7, #16]
   return(result);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e5      	bne.n	80064ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800652e:	bf00      	nop
 8006530:	3754      	adds	r7, #84	; 0x54
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff fd0d 	bl	8005f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b21      	cmp	r3, #33	; 0x21
 8006574:	d13e      	bne.n	80065f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657e:	d114      	bne.n	80065aa <UART_Transmit_IT+0x48>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d110      	bne.n	80065aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800659c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	1c9a      	adds	r2, r3, #2
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	621a      	str	r2, [r3, #32]
 80065a8:	e008      	b.n	80065bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	1c59      	adds	r1, r3, #1
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6211      	str	r1, [r2, #32]
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	4619      	mov	r1, r3
 80065ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10f      	bne.n	80065f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	e000      	b.n	80065f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065f4:	2302      	movs	r3, #2
  }
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006618:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff fc92 	bl	8005f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b08c      	sub	sp, #48	; 0x30
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b22      	cmp	r3, #34	; 0x22
 8006644:	f040 80ab 	bne.w	800679e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006650:	d117      	bne.n	8006682 <UART_Receive_IT+0x50>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d113      	bne.n	8006682 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800665a:	2300      	movs	r3, #0
 800665c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006670:	b29a      	uxth	r2, r3
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	1c9a      	adds	r2, r3, #2
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
 8006680:	e026      	b.n	80066d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006688:	2300      	movs	r3, #0
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006694:	d007      	beq.n	80066a6 <UART_Receive_IT+0x74>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <UART_Receive_IT+0x82>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	e008      	b.n	80066c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29b      	uxth	r3, r3
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	4619      	mov	r1, r3
 80066de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d15a      	bne.n	800679a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0220 	bic.w	r2, r2, #32
 80066f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006702:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0201 	bic.w	r2, r2, #1
 8006712:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006720:	2b01      	cmp	r3, #1
 8006722:	d135      	bne.n	8006790 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	613b      	str	r3, [r7, #16]
   return(result);
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f023 0310 	bic.w	r3, r3, #16
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674a:	623a      	str	r2, [r7, #32]
 800674c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	69f9      	ldr	r1, [r7, #28]
 8006750:	6a3a      	ldr	r2, [r7, #32]
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	61bb      	str	r3, [r7, #24]
   return(result);
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e5      	bne.n	800672a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b10      	cmp	r3, #16
 800676a:	d10a      	bne.n	8006782 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff fbfd 	bl	8005f88 <HAL_UARTEx_RxEventCallback>
 800678e:	e002      	b.n	8006796 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f002 fd85 	bl	80092a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	e002      	b.n	80067a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	e000      	b.n	80067a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800679e:	2302      	movs	r3, #2
  }
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3730      	adds	r7, #48	; 0x30
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067ac:	b0c0      	sub	sp, #256	; 0x100
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c4:	68d9      	ldr	r1, [r3, #12]
 80067c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	ea40 0301 	orr.w	r3, r0, r1
 80067d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	431a      	orrs	r2, r3
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006800:	f021 010c 	bic.w	r1, r1, #12
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800680e:	430b      	orrs	r3, r1
 8006810:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006822:	6999      	ldr	r1, [r3, #24]
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	ea40 0301 	orr.w	r3, r0, r1
 800682e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b8f      	ldr	r3, [pc, #572]	; (8006a74 <UART_SetConfig+0x2cc>)
 8006838:	429a      	cmp	r2, r3
 800683a:	d005      	beq.n	8006848 <UART_SetConfig+0xa0>
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b8d      	ldr	r3, [pc, #564]	; (8006a78 <UART_SetConfig+0x2d0>)
 8006844:	429a      	cmp	r2, r3
 8006846:	d104      	bne.n	8006852 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006848:	f7fd f92a 	bl	8003aa0 <HAL_RCC_GetPCLK2Freq>
 800684c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006850:	e003      	b.n	800685a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006852:	f7fd f911 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8006856:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800685a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006864:	f040 810c 	bne.w	8006a80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800686c:	2200      	movs	r2, #0
 800686e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006872:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006876:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800687a:	4622      	mov	r2, r4
 800687c:	462b      	mov	r3, r5
 800687e:	1891      	adds	r1, r2, r2
 8006880:	65b9      	str	r1, [r7, #88]	; 0x58
 8006882:	415b      	adcs	r3, r3
 8006884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006886:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800688a:	4621      	mov	r1, r4
 800688c:	eb12 0801 	adds.w	r8, r2, r1
 8006890:	4629      	mov	r1, r5
 8006892:	eb43 0901 	adc.w	r9, r3, r1
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068aa:	4690      	mov	r8, r2
 80068ac:	4699      	mov	r9, r3
 80068ae:	4623      	mov	r3, r4
 80068b0:	eb18 0303 	adds.w	r3, r8, r3
 80068b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068b8:	462b      	mov	r3, r5
 80068ba:	eb49 0303 	adc.w	r3, r9, r3
 80068be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068d6:	460b      	mov	r3, r1
 80068d8:	18db      	adds	r3, r3, r3
 80068da:	653b      	str	r3, [r7, #80]	; 0x50
 80068dc:	4613      	mov	r3, r2
 80068de:	eb42 0303 	adc.w	r3, r2, r3
 80068e2:	657b      	str	r3, [r7, #84]	; 0x54
 80068e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80068e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80068ec:	f7fa f9cc 	bl	8000c88 <__aeabi_uldivmod>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4b61      	ldr	r3, [pc, #388]	; (8006a7c <UART_SetConfig+0x2d4>)
 80068f6:	fba3 2302 	umull	r2, r3, r3, r2
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	011c      	lsls	r4, r3, #4
 80068fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006902:	2200      	movs	r2, #0
 8006904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006908:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800690c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006910:	4642      	mov	r2, r8
 8006912:	464b      	mov	r3, r9
 8006914:	1891      	adds	r1, r2, r2
 8006916:	64b9      	str	r1, [r7, #72]	; 0x48
 8006918:	415b      	adcs	r3, r3
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800691c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006920:	4641      	mov	r1, r8
 8006922:	eb12 0a01 	adds.w	sl, r2, r1
 8006926:	4649      	mov	r1, r9
 8006928:	eb43 0b01 	adc.w	fp, r3, r1
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006938:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800693c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006940:	4692      	mov	sl, r2
 8006942:	469b      	mov	fp, r3
 8006944:	4643      	mov	r3, r8
 8006946:	eb1a 0303 	adds.w	r3, sl, r3
 800694a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800694e:	464b      	mov	r3, r9
 8006950:	eb4b 0303 	adc.w	r3, fp, r3
 8006954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006964:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006968:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800696c:	460b      	mov	r3, r1
 800696e:	18db      	adds	r3, r3, r3
 8006970:	643b      	str	r3, [r7, #64]	; 0x40
 8006972:	4613      	mov	r3, r2
 8006974:	eb42 0303 	adc.w	r3, r2, r3
 8006978:	647b      	str	r3, [r7, #68]	; 0x44
 800697a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800697e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006982:	f7fa f981 	bl	8000c88 <__aeabi_uldivmod>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4611      	mov	r1, r2
 800698c:	4b3b      	ldr	r3, [pc, #236]	; (8006a7c <UART_SetConfig+0x2d4>)
 800698e:	fba3 2301 	umull	r2, r3, r3, r1
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	2264      	movs	r2, #100	; 0x64
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	1acb      	subs	r3, r1, r3
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069a2:	4b36      	ldr	r3, [pc, #216]	; (8006a7c <UART_SetConfig+0x2d4>)
 80069a4:	fba3 2302 	umull	r2, r3, r3, r2
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069b0:	441c      	add	r4, r3
 80069b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069c4:	4642      	mov	r2, r8
 80069c6:	464b      	mov	r3, r9
 80069c8:	1891      	adds	r1, r2, r2
 80069ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80069cc:	415b      	adcs	r3, r3
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069d4:	4641      	mov	r1, r8
 80069d6:	1851      	adds	r1, r2, r1
 80069d8:	6339      	str	r1, [r7, #48]	; 0x30
 80069da:	4649      	mov	r1, r9
 80069dc:	414b      	adcs	r3, r1
 80069de:	637b      	str	r3, [r7, #52]	; 0x34
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	f04f 0300 	mov.w	r3, #0
 80069e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80069ec:	4659      	mov	r1, fp
 80069ee:	00cb      	lsls	r3, r1, #3
 80069f0:	4651      	mov	r1, sl
 80069f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069f6:	4651      	mov	r1, sl
 80069f8:	00ca      	lsls	r2, r1, #3
 80069fa:	4610      	mov	r0, r2
 80069fc:	4619      	mov	r1, r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	4642      	mov	r2, r8
 8006a02:	189b      	adds	r3, r3, r2
 8006a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a08:	464b      	mov	r3, r9
 8006a0a:	460a      	mov	r2, r1
 8006a0c:	eb42 0303 	adc.w	r3, r2, r3
 8006a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a28:	460b      	mov	r3, r1
 8006a2a:	18db      	adds	r3, r3, r3
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a2e:	4613      	mov	r3, r2
 8006a30:	eb42 0303 	adc.w	r3, r2, r3
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a3e:	f7fa f923 	bl	8000c88 <__aeabi_uldivmod>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <UART_SetConfig+0x2d4>)
 8006a48:	fba3 1302 	umull	r1, r3, r3, r2
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	2164      	movs	r1, #100	; 0x64
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	3332      	adds	r3, #50	; 0x32
 8006a5a:	4a08      	ldr	r2, [pc, #32]	; (8006a7c <UART_SetConfig+0x2d4>)
 8006a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	f003 0207 	and.w	r2, r3, #7
 8006a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4422      	add	r2, r4
 8006a6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a70:	e106      	b.n	8006c80 <UART_SetConfig+0x4d8>
 8006a72:	bf00      	nop
 8006a74:	40011000 	.word	0x40011000
 8006a78:	40011400 	.word	0x40011400
 8006a7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a92:	4642      	mov	r2, r8
 8006a94:	464b      	mov	r3, r9
 8006a96:	1891      	adds	r1, r2, r2
 8006a98:	6239      	str	r1, [r7, #32]
 8006a9a:	415b      	adcs	r3, r3
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	1854      	adds	r4, r2, r1
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	eb43 0501 	adc.w	r5, r3, r1
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	00eb      	lsls	r3, r5, #3
 8006ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aba:	00e2      	lsls	r2, r4, #3
 8006abc:	4614      	mov	r4, r2
 8006abe:	461d      	mov	r5, r3
 8006ac0:	4643      	mov	r3, r8
 8006ac2:	18e3      	adds	r3, r4, r3
 8006ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ac8:	464b      	mov	r3, r9
 8006aca:	eb45 0303 	adc.w	r3, r5, r3
 8006ace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006aee:	4629      	mov	r1, r5
 8006af0:	008b      	lsls	r3, r1, #2
 8006af2:	4621      	mov	r1, r4
 8006af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006af8:	4621      	mov	r1, r4
 8006afa:	008a      	lsls	r2, r1, #2
 8006afc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b00:	f7fa f8c2 	bl	8000c88 <__aeabi_uldivmod>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4b60      	ldr	r3, [pc, #384]	; (8006c8c <UART_SetConfig+0x4e4>)
 8006b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	011c      	lsls	r4, r3, #4
 8006b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b24:	4642      	mov	r2, r8
 8006b26:	464b      	mov	r3, r9
 8006b28:	1891      	adds	r1, r2, r2
 8006b2a:	61b9      	str	r1, [r7, #24]
 8006b2c:	415b      	adcs	r3, r3
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b34:	4641      	mov	r1, r8
 8006b36:	1851      	adds	r1, r2, r1
 8006b38:	6139      	str	r1, [r7, #16]
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	414b      	adcs	r3, r1
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	f04f 0200 	mov.w	r2, #0
 8006b44:	f04f 0300 	mov.w	r3, #0
 8006b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	00cb      	lsls	r3, r1, #3
 8006b50:	4651      	mov	r1, sl
 8006b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b56:	4651      	mov	r1, sl
 8006b58:	00ca      	lsls	r2, r1, #3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	4642      	mov	r2, r8
 8006b62:	189b      	adds	r3, r3, r2
 8006b64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b68:	464b      	mov	r3, r9
 8006b6a:	460a      	mov	r2, r1
 8006b6c:	eb42 0303 	adc.w	r3, r2, r3
 8006b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	f04f 0300 	mov.w	r3, #0
 8006b88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b8c:	4649      	mov	r1, r9
 8006b8e:	008b      	lsls	r3, r1, #2
 8006b90:	4641      	mov	r1, r8
 8006b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b96:	4641      	mov	r1, r8
 8006b98:	008a      	lsls	r2, r1, #2
 8006b9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b9e:	f7fa f873 	bl	8000c88 <__aeabi_uldivmod>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4b38      	ldr	r3, [pc, #224]	; (8006c8c <UART_SetConfig+0x4e4>)
 8006baa:	fba3 2301 	umull	r2, r3, r3, r1
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	2264      	movs	r2, #100	; 0x64
 8006bb2:	fb02 f303 	mul.w	r3, r2, r3
 8006bb6:	1acb      	subs	r3, r1, r3
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	3332      	adds	r3, #50	; 0x32
 8006bbc:	4a33      	ldr	r2, [pc, #204]	; (8006c8c <UART_SetConfig+0x4e4>)
 8006bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc8:	441c      	add	r4, r3
 8006bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bce:	2200      	movs	r2, #0
 8006bd0:	673b      	str	r3, [r7, #112]	; 0x70
 8006bd2:	677a      	str	r2, [r7, #116]	; 0x74
 8006bd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bd8:	4642      	mov	r2, r8
 8006bda:	464b      	mov	r3, r9
 8006bdc:	1891      	adds	r1, r2, r2
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	415b      	adcs	r3, r3
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006be8:	4641      	mov	r1, r8
 8006bea:	1851      	adds	r1, r2, r1
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	4649      	mov	r1, r9
 8006bf0:	414b      	adcs	r3, r1
 8006bf2:	607b      	str	r3, [r7, #4]
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c00:	4659      	mov	r1, fp
 8006c02:	00cb      	lsls	r3, r1, #3
 8006c04:	4651      	mov	r1, sl
 8006c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c0a:	4651      	mov	r1, sl
 8006c0c:	00ca      	lsls	r2, r1, #3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	4619      	mov	r1, r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	4642      	mov	r2, r8
 8006c16:	189b      	adds	r3, r3, r2
 8006c18:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	460a      	mov	r2, r1
 8006c1e:	eb42 0303 	adc.w	r3, r2, r3
 8006c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c2e:	667a      	str	r2, [r7, #100]	; 0x64
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	008b      	lsls	r3, r1, #2
 8006c40:	4641      	mov	r1, r8
 8006c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c46:	4641      	mov	r1, r8
 8006c48:	008a      	lsls	r2, r1, #2
 8006c4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c4e:	f7fa f81b 	bl	8000c88 <__aeabi_uldivmod>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <UART_SetConfig+0x4e4>)
 8006c58:	fba3 1302 	umull	r1, r3, r3, r2
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	2164      	movs	r1, #100	; 0x64
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	3332      	adds	r3, #50	; 0x32
 8006c6a:	4a08      	ldr	r2, [pc, #32]	; (8006c8c <UART_SetConfig+0x4e4>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	f003 020f 	and.w	r2, r3, #15
 8006c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4422      	add	r2, r4
 8006c7e:	609a      	str	r2, [r3, #8]
}
 8006c80:	bf00      	nop
 8006c82:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c86:	46bd      	mov	sp, r7
 8006c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c8c:	51eb851f 	.word	0x51eb851f

08006c90 <avoidance_initialize>:
AvoidanceState avoidanceState;
Bezier* avoidanceCurve;
float backtrackingAim;
float avoidanceSpeedFactor;

void avoidance_initialize() {
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
	avoidanceState = PATH_CLEAR;
 8006c94:	4b08      	ldr	r3, [pc, #32]	; (8006cb8 <avoidance_initialize+0x28>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]
	avoidanceCurve = bezier_newEmpty();
 8006c9a:	f000 f921 	bl	8006ee0 <bezier_newEmpty>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	4a06      	ldr	r2, [pc, #24]	; (8006cbc <avoidance_initialize+0x2c>)
 8006ca2:	6013      	str	r3, [r2, #0]
	backtrackingAim = 0;
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <avoidance_initialize+0x30>)
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
	avoidanceSpeedFactor = 1;
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <avoidance_initialize+0x34>)
 8006cae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006cb2:	601a      	str	r2, [r3, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20000648 	.word	0x20000648
 8006cbc:	2000064c 	.word	0x2000064c
 8006cc0:	20000650 	.word	0x20000650
 8006cc4:	20000654 	.word	0x20000654

08006cc8 <avoidance_update>:


void avoidance_update(float t, Direction dir) {
 8006cc8:	b5b0      	push	{r4, r5, r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	ed87 0a01 	vstr	s0, [r7, #4]
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	70fb      	strb	r3, [r7, #3]
	int distance = lidar_getDistance(dir);
 8006cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 f828 	bl	8007d30 <lidar_getDistance>
 8006ce0:	60f8      	str	r0, [r7, #12]
	if(distance == 0)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d102      	bne.n	8006cee <avoidance_update+0x26>
		distance = 1000;
 8006ce8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cec:	60fb      	str	r3, [r7, #12]

	if ((avoidanceState == PATH_CLEAR || avoidanceState == PATH_CROWDED) && distance < LIDAR_THRESHOLD) {
 8006cee:	4b5a      	ldr	r3, [pc, #360]	; (8006e58 <avoidance_update+0x190>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <avoidance_update+0x36>
 8006cf6:	4b58      	ldr	r3, [pc, #352]	; (8006e58 <avoidance_update+0x190>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d115      	bne.n	8006d2a <avoidance_update+0x62>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d04:	da11      	bge.n	8006d2a <avoidance_update+0x62>
		avoidanceState = PATH_OBSTRUCTED;
 8006d06:	4b54      	ldr	r3, [pc, #336]	; (8006e58 <avoidance_update+0x190>)
 8006d08:	2202      	movs	r2, #2
 8006d0a:	701a      	strb	r2, [r3, #0]
		printf("Obstacle detected. Waiting 2s...\r\n");
 8006d0c:	4853      	ldr	r0, [pc, #332]	; (8006e5c <avoidance_update+0x194>)
 8006d0e:	f003 fe2b 	bl	800a968 <puts>
		propulsion_setSpeeds(0, 0, 0);
 8006d12:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8006e60 <avoidance_update+0x198>
 8006d16:	eddf 0a52 	vldr	s1, [pc, #328]	; 8006e60 <avoidance_update+0x198>
 8006d1a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8006e60 <avoidance_update+0x198>
 8006d1e:	f001 fbdb 	bl	80084d8 <propulsion_setSpeeds>
		HAL_Delay(2000);
 8006d22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006d26:	f7fb fe67 	bl	80029f8 <HAL_Delay>
	}

	if ((avoidanceState == PATH_CLEAR || avoidanceState == PATH_OBSTRUCTED) && distance > LIDAR_THRESHOLD && distance < LIDAR_MAX_DISTANCE) {
 8006d2a:	4b4b      	ldr	r3, [pc, #300]	; (8006e58 <avoidance_update+0x190>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <avoidance_update+0x72>
 8006d32:	4b49      	ldr	r3, [pc, #292]	; (8006e58 <avoidance_update+0x190>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d11a      	bne.n	8006d70 <avoidance_update+0xa8>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d40:	dd16      	ble.n	8006d70 <avoidance_update+0xa8>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006d48:	da12      	bge.n	8006d70 <avoidance_update+0xa8>
		avoidanceSpeedFactor = (distance - LIDAR_THRESHOLD) / (LIDAR_MAX_DISTANCE - LIDAR_THRESHOLD);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8006d50:	4a44      	ldr	r2, [pc, #272]	; (8006e64 <avoidance_update+0x19c>)
 8006d52:	fb82 1203 	smull	r1, r2, r2, r3
 8006d56:	1192      	asrs	r2, r2, #6
 8006d58:	17db      	asrs	r3, r3, #31
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d64:	4b40      	ldr	r3, [pc, #256]	; (8006e68 <avoidance_update+0x1a0>)
 8006d66:	edc3 7a00 	vstr	s15, [r3]
		avoidanceState = PATH_CROWDED;
 8006d6a:	4b3b      	ldr	r3, [pc, #236]	; (8006e58 <avoidance_update+0x190>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
	}

	if (avoidanceState == PATH_CROWDED && distance > LIDAR_MAX_DISTANCE) {
 8006d70:	4b39      	ldr	r3, [pc, #228]	; (8006e58 <avoidance_update+0x190>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d106      	bne.n	8006d86 <avoidance_update+0xbe>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8006d7e:	dd02      	ble.n	8006d86 <avoidance_update+0xbe>
		avoidanceState = PATH_CLEAR;
 8006d80:	4b35      	ldr	r3, [pc, #212]	; (8006e58 <avoidance_update+0x190>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
	}

	if (avoidanceState == PATH_OBSTRUCTED && distance >= LIDAR_THRESHOLD) {
 8006d86:	4b34      	ldr	r3, [pc, #208]	; (8006e58 <avoidance_update+0x190>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d109      	bne.n	8006da2 <avoidance_update+0xda>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d94:	db05      	blt.n	8006da2 <avoidance_update+0xda>
		avoidanceState = PATH_CLEAR;
 8006d96:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <avoidance_update+0x190>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
		printf("Path cleared.\r\n");
 8006d9c:	4833      	ldr	r0, [pc, #204]	; (8006e6c <avoidance_update+0x1a4>)
 8006d9e:	f003 fde3 	bl	800a968 <puts>
	}

	if (avoidanceState == PATH_OBSTRUCTED && distance < LIDAR_THRESHOLD) {
 8006da2:	4b2d      	ldr	r3, [pc, #180]	; (8006e58 <avoidance_update+0x190>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d126      	bne.n	8006df8 <avoidance_update+0x130>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006db0:	da22      	bge.n	8006df8 <avoidance_update+0x130>
		avoidanceState = BACKTRACKING;
 8006db2:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <avoidance_update+0x190>)
 8006db4:	2203      	movs	r2, #3
 8006db6:	701a      	strb	r2, [r3, #0]
		printf("Backtracking...\r\n");
 8006db8:	482d      	ldr	r0, [pc, #180]	; (8006e70 <avoidance_update+0x1a8>)
 8006dba:	f003 fdd5 	bl	800a968 <puts>
		backtrackingAim = t - 0.2;
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7f9 fbe2 	bl	8000588 <__aeabi_f2d>
 8006dc4:	a320      	add	r3, pc, #128	; (adr r3, 8006e48 <avoidance_update+0x180>)
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f7f9 fa7d 	bl	80002c8 <__aeabi_dsub>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	f7f9 ff07 	bl	8000be8 <__aeabi_d2f>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4a25      	ldr	r2, [pc, #148]	; (8006e74 <avoidance_update+0x1ac>)
 8006dde:	6013      	str	r3, [r2, #0]
		if (backtrackingAim < 0) {
 8006de0:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <avoidance_update+0x1ac>)
 8006de2:	edd3 7a00 	vldr	s15, [r3]
 8006de6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dee:	d503      	bpl.n	8006df8 <avoidance_update+0x130>
			backtrackingAim = 0;
 8006df0:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <avoidance_update+0x1ac>)
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]
		}
	}

	if (avoidanceState == BACKTRACKING && t <= backtrackingAim + 0.01) {
 8006df8:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <avoidance_update+0x190>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d11e      	bne.n	8006e3e <avoidance_update+0x176>
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7f9 fbc1 	bl	8000588 <__aeabi_f2d>
 8006e06:	4604      	mov	r4, r0
 8006e08:	460d      	mov	r5, r1
 8006e0a:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <avoidance_update+0x1ac>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7f9 fbba 	bl	8000588 <__aeabi_f2d>
 8006e14:	a30e      	add	r3, pc, #56	; (adr r3, 8006e50 <avoidance_update+0x188>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 fa57 	bl	80002cc <__adddf3>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4620      	mov	r0, r4
 8006e24:	4629      	mov	r1, r5
 8006e26:	f7f9 fe83 	bl	8000b30 <__aeabi_dcmple>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d100      	bne.n	8006e32 <avoidance_update+0x16a>
		avoidanceState = PATH_CLEAR;
		printf("Trying again...\r\n");
	}
}
 8006e30:	e005      	b.n	8006e3e <avoidance_update+0x176>
		avoidanceState = PATH_CLEAR;
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <avoidance_update+0x190>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	701a      	strb	r2, [r3, #0]
		printf("Trying again...\r\n");
 8006e38:	480f      	ldr	r0, [pc, #60]	; (8006e78 <avoidance_update+0x1b0>)
 8006e3a:	f003 fd95 	bl	800a968 <puts>
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bdb0      	pop	{r4, r5, r7, pc}
 8006e46:	bf00      	nop
 8006e48:	9999999a 	.word	0x9999999a
 8006e4c:	3fc99999 	.word	0x3fc99999
 8006e50:	47ae147b 	.word	0x47ae147b
 8006e54:	3f847ae1 	.word	0x3f847ae1
 8006e58:	20000648 	.word	0x20000648
 8006e5c:	0800ef24 	.word	0x0800ef24
 8006e60:	00000000 	.word	0x00000000
 8006e64:	51eb851f 	.word	0x51eb851f
 8006e68:	20000654 	.word	0x20000654
 8006e6c:	0800ef48 	.word	0x0800ef48
 8006e70:	0800ef58 	.word	0x0800ef58
 8006e74:	20000650 	.word	0x20000650
 8006e78:	0800ef6c 	.word	0x0800ef6c

08006e7c <bezier_new>:
#include "bezier.h"


Bezier* bezier_new(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08c      	sub	sp, #48	; 0x30
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006e86:	edc7 0a08 	vstr	s1, [r7, #32]
 8006e8a:	ed87 1a07 	vstr	s2, [r7, #28]
 8006e8e:	edc7 1a06 	vstr	s3, [r7, #24]
 8006e92:	ed87 2a05 	vstr	s4, [r7, #20]
 8006e96:	edc7 2a04 	vstr	s5, [r7, #16]
 8006e9a:	ed87 3a03 	vstr	s6, [r7, #12]
 8006e9e:	edc7 3a02 	vstr	s7, [r7, #8]
 8006ea2:	6078      	str	r0, [r7, #4]
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 8006ea4:	2028      	movs	r0, #40	; 0x28
 8006ea6:	f002 ff2f 	bl	8009d08 <malloc>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    bezier_set(b, x1, y1, x2, y2, x3, y3, x4, y4, lutLength);
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	edd7 3a02 	vldr	s7, [r7, #8]
 8006eb4:	ed97 3a03 	vldr	s6, [r7, #12]
 8006eb8:	edd7 2a04 	vldr	s5, [r7, #16]
 8006ebc:	ed97 2a05 	vldr	s4, [r7, #20]
 8006ec0:	edd7 1a06 	vldr	s3, [r7, #24]
 8006ec4:	ed97 1a07 	vldr	s2, [r7, #28]
 8006ec8:	edd7 0a08 	vldr	s1, [r7, #32]
 8006ecc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ed2:	f000 f812 	bl	8006efa <bezier_set>
    return b;
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3730      	adds	r7, #48	; 0x30
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <bezier_newEmpty>:


Bezier* bezier_newEmpty() {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
    Bezier* b = (Bezier*) malloc(sizeof(Bezier));
 8006ee6:	2028      	movs	r0, #40	; 0x28
 8006ee8:	f002 ff0e 	bl	8009d08 <malloc>
 8006eec:	4603      	mov	r3, r0
 8006eee:	607b      	str	r3, [r7, #4]
    return b;
 8006ef0:	687b      	ldr	r3, [r7, #4]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <bezier_set>:


void bezier_set(Bezier* b, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, int lutLength) {
 8006efa:	b590      	push	{r4, r7, lr}
 8006efc:	b08f      	sub	sp, #60	; 0x3c
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6278      	str	r0, [r7, #36]	; 0x24
 8006f02:	ed87 0a08 	vstr	s0, [r7, #32]
 8006f06:	edc7 0a07 	vstr	s1, [r7, #28]
 8006f0a:	ed87 1a06 	vstr	s2, [r7, #24]
 8006f0e:	edc7 1a05 	vstr	s3, [r7, #20]
 8006f12:	ed87 2a04 	vstr	s4, [r7, #16]
 8006f16:	edc7 2a03 	vstr	s5, [r7, #12]
 8006f1a:	ed87 3a02 	vstr	s6, [r7, #8]
 8006f1e:	edc7 3a01 	vstr	s7, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
    b->p1 = vector2_new(x1, y1);
 8006f24:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006f26:	edd7 0a07 	vldr	s1, [r7, #28]
 8006f2a:	ed97 0a08 	vldr	s0, [r7, #32]
 8006f2e:	f002 fdb5 	bl	8009a9c <vector2_new>
 8006f32:	eeb0 7a40 	vmov.f32	s14, s0
 8006f36:	eef0 7a60 	vmov.f32	s15, s1
 8006f3a:	ed84 7a00 	vstr	s14, [r4]
 8006f3e:	edc4 7a01 	vstr	s15, [r4, #4]
    b->p2 = vector2_new(x2, y2);
 8006f42:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006f44:	edd7 0a05 	vldr	s1, [r7, #20]
 8006f48:	ed97 0a06 	vldr	s0, [r7, #24]
 8006f4c:	f002 fda6 	bl	8009a9c <vector2_new>
 8006f50:	eeb0 7a40 	vmov.f32	s14, s0
 8006f54:	eef0 7a60 	vmov.f32	s15, s1
 8006f58:	ed84 7a02 	vstr	s14, [r4, #8]
 8006f5c:	edc4 7a03 	vstr	s15, [r4, #12]
    b->p3 = vector2_new(x3, y3);
 8006f60:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006f62:	edd7 0a03 	vldr	s1, [r7, #12]
 8006f66:	ed97 0a04 	vldr	s0, [r7, #16]
 8006f6a:	f002 fd97 	bl	8009a9c <vector2_new>
 8006f6e:	eeb0 7a40 	vmov.f32	s14, s0
 8006f72:	eef0 7a60 	vmov.f32	s15, s1
 8006f76:	ed84 7a04 	vstr	s14, [r4, #16]
 8006f7a:	edc4 7a05 	vstr	s15, [r4, #20]
    b->p4 = vector2_new(x4, y4);
 8006f7e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006f80:	edd7 0a01 	vldr	s1, [r7, #4]
 8006f84:	ed97 0a02 	vldr	s0, [r7, #8]
 8006f88:	f002 fd88 	bl	8009a9c <vector2_new>
 8006f8c:	eeb0 7a40 	vmov.f32	s14, s0
 8006f90:	eef0 7a60 	vmov.f32	s15, s1
 8006f94:	ed84 7a06 	vstr	s14, [r4, #24]
 8006f98:	edc4 7a07 	vstr	s15, [r4, #28]
    b->lutLength = lutLength;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24
    b->lut = (Vector2*) malloc(sizeof(Vector2) * b->lutLength);
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f002 fead 	bl	8009d08 <malloc>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	621a      	str	r2, [r3, #32]
    for (int i=0; i<b->lutLength; i++) {
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fba:	e02b      	b.n	8007014 <bezier_set+0x11a>
        float t = (float) i/(b->lutLength-1);
 8006fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fd8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Vector2 eval = bezier_eval(b, t);
 8006fdc:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8006fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fe2:	f000 f821 	bl	8007028 <bezier_eval>
 8006fe6:	eeb0 7a40 	vmov.f32	s14, s0
 8006fea:	eef0 7a60 	vmov.f32	s15, s1
 8006fee:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8006ff2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        b->lut[i] = eval;
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	6a1a      	ldr	r2, [r3, #32]
 8006ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	4413      	add	r3, r2
 8007000:	461a      	mov	r2, r3
 8007002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007006:	e893 0003 	ldmia.w	r3, {r0, r1}
 800700a:	e882 0003 	stmia.w	r2, {r0, r1}
    for (int i=0; i<b->lutLength; i++) {
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	3301      	adds	r3, #1
 8007012:	637b      	str	r3, [r7, #52]	; 0x34
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800701a:	429a      	cmp	r2, r3
 800701c:	dbce      	blt.n	8006fbc <bezier_set+0xc2>
    }
}
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	373c      	adds	r7, #60	; 0x3c
 8007024:	46bd      	mov	sp, r7
 8007026:	bd90      	pop	{r4, r7, pc}

08007028 <bezier_eval>:
    vector2_display(b->p4);
    printf("}\r\n");
}


Vector2 bezier_eval(Bezier* b, float t) {
 8007028:	b480      	push	{r7}
 800702a:	b08d      	sub	sp, #52	; 0x34
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8007034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007038:	edd7 7a02 	vldr	s15, [r7, #8]
 800703c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007040:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = b->p1.x * u*u*u + b->p2.x * 3*u*u*t + b->p3.x * 3*u*t*t + b->p4.x * t*t*t;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	ed93 7a00 	vldr	s14, [r3]
 800704a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800704e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007052:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800705a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800705e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	edd3 7a02 	vldr	s15, [r3, #8]
 8007068:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800706c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007070:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007074:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007078:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800707c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007080:	edd7 7a02 	vldr	s15, [r7, #8]
 8007084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007092:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007096:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800709a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800709e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80070a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80070a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80070aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80070ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	edd3 6a06 	vldr	s13, [r3, #24]
 80070bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80070c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80070c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80070c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80070cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80070d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = b->p1.y * u*u*u + b->p2.y * 3*u*u*t + b->p3.y * 3*u*t*t + b->p4.y * t*t*t;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	ed93 7a01 	vldr	s14, [r3, #4]
 80070e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80070e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80070ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80070f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8007100:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007104:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007108:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800710c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007110:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007114:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007118:	edd7 7a02 	vldr	s15, [r7, #8]
 800711c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	edd3 7a05 	vldr	s15, [r3, #20]
 800712a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800712e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007132:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007136:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800713a:	edd7 7a02 	vldr	s15, [r7, #8]
 800713e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007142:	edd7 7a02 	vldr	s15, [r7, #8]
 8007146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800714a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	edd3 6a07 	vldr	s13, [r3, #28]
 8007154:	edd7 7a02 	vldr	s15, [r7, #8]
 8007158:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800715c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007160:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007164:	edd7 7a02 	vldr	s15, [r7, #8]
 8007168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800716c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007170:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	61bb      	str	r3, [r7, #24]
    return eval;
 800717c:	f107 031c 	add.w	r3, r7, #28
 8007180:	f107 0214 	add.w	r2, r7, #20
 8007184:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007188:	e883 0003 	stmia.w	r3, {r0, r1}
 800718c:	69fa      	ldr	r2, [r7, #28]
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	ee07 2a10 	vmov	s14, r2
 8007194:	ee07 3a90 	vmov	s15, r3
}
 8007198:	eeb0 0a47 	vmov.f32	s0, s14
 800719c:	eef0 0a67 	vmov.f32	s1, s15
 80071a0:	3734      	adds	r7, #52	; 0x34
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <bezier_deriv1>:
    int i = round(t*(b->lutLength-1));
    return b->lut[i];
}


Vector2 bezier_deriv1(Bezier* b, float t) {
 80071aa:	b480      	push	{r7}
 80071ac:	b08d      	sub	sp, #52	; 0x34
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 80071b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80071be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p2.x - b->p1.x) * 3*u*u + (b->p3.x - b->p2.x) * 6*u*t + (b->p4.x - b->p3.x) * 3*t*t;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	edd3 7a00 	vldr	s15, [r3]
 80071d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80071da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80071e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80071ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	edd3 6a04 	vldr	s13, [r3, #16]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80071fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80071fe:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8007202:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007206:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800720a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800720e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	edd3 6a06 	vldr	s13, [r3, #24]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	edd3 7a04 	vldr	s15, [r3, #16]
 8007226:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800722a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800722e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007232:	edd7 7a02 	vldr	s15, [r7, #8]
 8007236:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800723a:	edd7 7a02 	vldr	s15, [r7, #8]
 800723e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007246:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p2.y - b->p1.y) * 3*u*u + (b->p3.y - b->p2.y) * 6*u*t + (b->p4.y - b->p3.y) * 3*t*t;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	ed93 7a03 	vldr	s14, [r3, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	edd3 7a01 	vldr	s15, [r3, #4]
 8007256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800725a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800725e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007262:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800726a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800726e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	edd3 6a05 	vldr	s13, [r3, #20]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	edd3 7a03 	vldr	s15, [r3, #12]
 800727e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007282:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8007286:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800728a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800728e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007292:	edd7 7a02 	vldr	s15, [r7, #8]
 8007296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800729a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	edd3 6a07 	vldr	s13, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80072aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80072ae:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80072b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80072b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80072ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80072be:	edd7 7a02 	vldr	s15, [r7, #8]
 80072c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	61bb      	str	r3, [r7, #24]
    return eval;
 80072d6:	f107 031c 	add.w	r3, r7, #28
 80072da:	f107 0214 	add.w	r2, r7, #20
 80072de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	ee07 2a10 	vmov	s14, r2
 80072ee:	ee07 3a90 	vmov	s15, r3
}
 80072f2:	eeb0 0a47 	vmov.f32	s0, s14
 80072f6:	eef0 0a67 	vmov.f32	s1, s15
 80072fa:	3734      	adds	r7, #52	; 0x34
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <bezier_deriv2>:


Vector2 bezier_deriv2(Bezier* b, float t) {
 8007304:	b480      	push	{r7}
 8007306:	b08d      	sub	sp, #52	; 0x34
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	ed87 0a02 	vstr	s0, [r7, #8]
    float u = 1-t;
 8007310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007314:	edd7 7a02 	vldr	s15, [r7, #8]
 8007318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800731c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float x = (b->p3.x - 2*b->p2.x + b->p1.x) * 6*u + (b->p4.x - 2*b->p3.x + b->p2.x) * 6*t;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	ed93 7a04 	vldr	s14, [r3, #16]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	edd3 7a02 	vldr	s15, [r3, #8]
 800732c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007330:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	edd3 7a00 	vldr	s15, [r3]
 800733a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800733e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8007342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007346:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800734a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	edd3 6a06 	vldr	s13, [r3, #24]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	edd3 7a04 	vldr	s15, [r3, #16]
 800735a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800735e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	edd3 7a02 	vldr	s15, [r3, #8]
 8007368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8007370:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007374:	edd7 7a02 	vldr	s15, [r7, #8]
 8007378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800737c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007380:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float y = (b->p3.y - 2*b->p2.y + b->p1.y) * 6*u + (b->p4.y - 2*b->p3.y + b->p2.y) * 6*t;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	ed93 7a05 	vldr	s14, [r3, #20]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007390:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007394:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	edd3 7a01 	vldr	s15, [r3, #4]
 800739e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073a2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80073a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80073aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80073ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	edd3 6a07 	vldr	s13, [r3, #28]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80073be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80073c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80073cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80073d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80073d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80073dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    Vector2 eval = { x, y };
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	61bb      	str	r3, [r7, #24]
    return eval;
 80073f0:	f107 031c 	add.w	r3, r7, #28
 80073f4:	f107 0214 	add.w	r2, r7, #20
 80073f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	ee07 2a10 	vmov	s14, r2
 8007408:	ee07 3a90 	vmov	s15, r3
}
 800740c:	eeb0 0a47 	vmov.f32	s0, s14
 8007410:	eef0 0a67 	vmov.f32	s1, s15
 8007414:	3734      	adds	r7, #52	; 0x34
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <bezier_curvature>:


float bezier_curvature(Bezier* b, float t) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	ed87 0a00 	vstr	s0, [r7]
    Vector2 diff1 = bezier_deriv1(b, t); // B'(t)
 800742c:	ed97 0a00 	vldr	s0, [r7]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff feba 	bl	80071aa <bezier_deriv1>
 8007436:	eeb0 7a40 	vmov.f32	s14, s0
 800743a:	eef0 7a60 	vmov.f32	s15, s1
 800743e:	ed87 7a04 	vstr	s14, [r7, #16]
 8007442:	edc7 7a05 	vstr	s15, [r7, #20]
    Vector2 diff2 = bezier_deriv2(b, t); // B''(t)
 8007446:	ed97 0a00 	vldr	s0, [r7]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7ff ff5a 	bl	8007304 <bezier_deriv2>
 8007450:	eeb0 7a40 	vmov.f32	s14, s0
 8007454:	eef0 7a60 	vmov.f32	s15, s1
 8007458:	ed87 7a02 	vstr	s14, [r7, #8]
 800745c:	edc7 7a03 	vstr	s15, [r7, #12]
    float num = vector2_cross(diff1, diff2);
 8007460:	ed97 6a02 	vldr	s12, [r7, #8]
 8007464:	edd7 6a03 	vldr	s13, [r7, #12]
 8007468:	ed97 7a04 	vldr	s14, [r7, #16]
 800746c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007470:	eeb0 1a46 	vmov.f32	s2, s12
 8007474:	eef0 1a66 	vmov.f32	s3, s13
 8007478:	eeb0 0a47 	vmov.f32	s0, s14
 800747c:	eef0 0a67 	vmov.f32	s1, s15
 8007480:	f002 fbfc 	bl	8009c7c <vector2_cross>
 8007484:	ed87 0a07 	vstr	s0, [r7, #28]
    float den = vector2_norm(diff1);
 8007488:	ed97 7a04 	vldr	s14, [r7, #16]
 800748c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007490:	eeb0 0a47 	vmov.f32	s0, s14
 8007494:	eef0 0a67 	vmov.f32	s1, s15
 8007498:	f002 fb22 	bl	8009ae0 <vector2_norm>
 800749c:	ed87 0a06 	vstr	s0, [r7, #24]
    if (den == 0)
 80074a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80074a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80074a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ac:	d102      	bne.n	80074b4 <bezier_curvature+0x94>
        return INFINITY;
 80074ae:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80074dc <bezier_curvature+0xbc>
 80074b2:	e00b      	b.n	80074cc <bezier_curvature+0xac>
    return num/(den*den*den);
 80074b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80074b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80074bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80074c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80074c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80074cc:	eef0 7a66 	vmov.f32	s15, s13
 80074d0:	eeb0 0a67 	vmov.f32	s0, s15
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	7f800000 	.word	0x7f800000

080074e0 <bezier_projectLut>:


float bezier_projectLut(Bezier* b, Vector2 p) {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	eeb0 7a40 	vmov.f32	s14, s0
 80074ec:	eef0 7a60 	vmov.f32	s15, s1
 80074f0:	ed87 7a01 	vstr	s14, [r7, #4]
 80074f4:	edc7 7a02 	vstr	s15, [r7, #8]
    float minDist = INFINITY;
 80074f8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
    float minIndex = 0;
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	623b      	str	r3, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 8007504:	2300      	movs	r3, #0
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	e02d      	b.n	8007566 <bezier_projectLut+0x86>
        float dist = vector2_dist2(p, b->lut[i]);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1a      	ldr	r2, [r3, #32]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	4413      	add	r3, r2
 8007514:	ed93 6a00 	vldr	s12, [r3]
 8007518:	edd3 6a01 	vldr	s13, [r3, #4]
 800751c:	ed97 7a01 	vldr	s14, [r7, #4]
 8007520:	edd7 7a02 	vldr	s15, [r7, #8]
 8007524:	eeb0 1a46 	vmov.f32	s2, s12
 8007528:	eef0 1a66 	vmov.f32	s3, s13
 800752c:	eeb0 0a47 	vmov.f32	s0, s14
 8007530:	eef0 0a67 	vmov.f32	s1, s15
 8007534:	f002 fb30 	bl	8009b98 <vector2_dist2>
 8007538:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < minDist) {
 800753c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007540:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754c:	d508      	bpl.n	8007560 <bezier_projectLut+0x80>
            minDist = dist;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
            minIndex = i;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800755c:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i=0; i<b->lutLength; i++) {
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	3301      	adds	r3, #1
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	429a      	cmp	r2, r3
 800756e:	dbcc      	blt.n	800750a <bezier_projectLut+0x2a>
        }
    }
    float tLut = (float) minIndex/(b->lutLength-1);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	3b01      	subs	r3, #1
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800757e:	edd7 6a08 	vldr	s13, [r7, #32]
 8007582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007586:	edc7 7a06 	vstr	s15, [r7, #24]
    return tLut;
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	ee07 3a90 	vmov	s15, r3
}
 8007590:	eeb0 0a67 	vmov.f32	s0, s15
 8007594:	3728      	adds	r7, #40	; 0x28
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <bezier_project>:


float bezier_project(Bezier* b, Vector2 p, float precision) {
 800759c:	b580      	push	{r7, lr}
 800759e:	ed2d 8b02 	vpush	{d8}
 80075a2:	b08c      	sub	sp, #48	; 0x30
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	eeb0 7a40 	vmov.f32	s14, s0
 80075ac:	eef0 7a60 	vmov.f32	s15, s1
 80075b0:	ed87 1a00 	vstr	s2, [r7]
 80075b4:	ed87 7a01 	vstr	s14, [r7, #4]
 80075b8:	edc7 7a02 	vstr	s15, [r7, #8]
    float tLut = bezier_projectLut(b, p);
 80075bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80075c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80075c4:	eeb0 0a47 	vmov.f32	s0, s14
 80075c8:	eef0 0a67 	vmov.f32	s1, s15
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f7ff ff87 	bl	80074e0 <bezier_projectLut>
 80075d2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    float halfWidth = 1.0/(b->lutLength-1);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	3b01      	subs	r3, #1
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f8 ffc1 	bl	8000564 <__aeabi_i2d>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	f04f 0000 	mov.w	r0, #0
 80075ea:	495b      	ldr	r1, [pc, #364]	; (8007758 <bezier_project+0x1bc>)
 80075ec:	f7f9 f94e 	bl	800088c <__aeabi_ddiv>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4610      	mov	r0, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	f7f9 faf6 	bl	8000be8 <__aeabi_d2f>
 80075fc:	4603      	mov	r3, r0
 80075fe:	623b      	str	r3, [r7, #32]

    float t_a = tLut - halfWidth;
 8007600:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007604:	edd7 7a08 	vldr	s15, [r7, #32]
 8007608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800760c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t_a = (t_a<0)?0:t_a;
 8007610:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761c:	d502      	bpl.n	8007624 <bezier_project+0x88>
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	e000      	b.n	8007626 <bezier_project+0x8a>
 8007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c

    float t_b = tLut + halfWidth;
 8007628:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800762c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007634:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t_b = (t_b>1)?1:t_b;
 8007638:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800763c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007648:	dd02      	ble.n	8007650 <bezier_project+0xb4>
 800764a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800764e:	e000      	b.n	8007652 <bezier_project+0xb6>
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	62bb      	str	r3, [r7, #40]	; 0x28

    Vector2 p_a, p_b;

    while (t_b - t_a > precision) {
 8007654:	e05f      	b.n	8007716 <bezier_project+0x17a>
        p_a = bezier_eval(b, t_a);
 8007656:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fce4 	bl	8007028 <bezier_eval>
 8007660:	eeb0 7a40 	vmov.f32	s14, s0
 8007664:	eef0 7a60 	vmov.f32	s15, s1
 8007668:	ed87 7a06 	vstr	s14, [r7, #24]
 800766c:	edc7 7a07 	vstr	s15, [r7, #28]
        p_b = bezier_eval(b, t_b);
 8007670:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fcd7 	bl	8007028 <bezier_eval>
 800767a:	eeb0 7a40 	vmov.f32	s14, s0
 800767e:	eef0 7a60 	vmov.f32	s15, s1
 8007682:	ed87 7a04 	vstr	s14, [r7, #16]
 8007686:	edc7 7a05 	vstr	s15, [r7, #20]
        if (vector2_dist2(p, p_a) < vector2_dist2(p, p_b))
 800768a:	ed97 6a06 	vldr	s12, [r7, #24]
 800768e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007692:	ed97 7a01 	vldr	s14, [r7, #4]
 8007696:	edd7 7a02 	vldr	s15, [r7, #8]
 800769a:	eeb0 1a46 	vmov.f32	s2, s12
 800769e:	eef0 1a66 	vmov.f32	s3, s13
 80076a2:	eeb0 0a47 	vmov.f32	s0, s14
 80076a6:	eef0 0a67 	vmov.f32	s1, s15
 80076aa:	f002 fa75 	bl	8009b98 <vector2_dist2>
 80076ae:	eeb0 8a40 	vmov.f32	s16, s0
 80076b2:	ed97 6a04 	vldr	s12, [r7, #16]
 80076b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80076ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80076be:	edd7 7a02 	vldr	s15, [r7, #8]
 80076c2:	eeb0 1a46 	vmov.f32	s2, s12
 80076c6:	eef0 1a66 	vmov.f32	s3, s13
 80076ca:	eeb0 0a47 	vmov.f32	s0, s14
 80076ce:	eef0 0a67 	vmov.f32	s1, s15
 80076d2:	f002 fa61 	bl	8009b98 <vector2_dist2>
 80076d6:	eef0 7a40 	vmov.f32	s15, s0
 80076da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80076de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e2:	d50c      	bpl.n	80076fe <bezier_project+0x162>
            t_b = (t_a + t_b)/2;
 80076e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80076e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80076ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80076f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80076fc:	e00b      	b.n	8007716 <bezier_project+0x17a>
        else
            t_a = (t_a + t_b)/2;
 80076fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007702:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007706:	ee37 7a27 	vadd.f32	s14, s14, s15
 800770a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800770e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007712:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while (t_b - t_a > precision) {
 8007716:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800771a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800771e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007722:	ed97 7a00 	vldr	s14, [r7]
 8007726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772e:	d492      	bmi.n	8007656 <bezier_project+0xba>
    }
    return (t_a + t_b)/2;
 8007730:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007734:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800773c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007740:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007744:	eef0 7a66 	vmov.f32	s15, s13
}
 8007748:	eeb0 0a67 	vmov.f32	s0, s15
 800774c:	3730      	adds	r7, #48	; 0x30
 800774e:	46bd      	mov	sp, r7
 8007750:	ecbd 8b02 	vpop	{d8}
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	3ff00000 	.word	0x3ff00000

0800775c <Pcorr>:
float derivative[3] = {0.0,0.0,0.0};



float Pcorr(float Kp, float error)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	ed87 0a01 	vstr	s0, [r7, #4]
 8007766:	edc7 0a00 	vstr	s1, [r7]
	return Kp*error;
 800776a:	ed97 7a01 	vldr	s14, [r7, #4]
 800776e:	edd7 7a00 	vldr	s15, [r7]
 8007772:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8007776:	eeb0 0a67 	vmov.f32	s0, s15
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <Icorr>:

float Icorr(float Ki, float error, float * integral, float Ilim)
{
 8007784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	ed87 0a03 	vstr	s0, [r7, #12]
 8007790:	edc7 0a02 	vstr	s1, [r7, #8]
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	ed87 1a00 	vstr	s2, [r7]
	*integral += error;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	ed93 7a00 	vldr	s14, [r3]
 80077a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80077a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	edc3 7a00 	vstr	s15, [r3]
	return (fabs(*integral) > Ilim/Ki?(Ilim*(*integral)/(Ki*fabs(*integral))):(*integral));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	edd3 7a00 	vldr	s15, [r3]
 80077b4:	eeb0 7ae7 	vabs.f32	s14, s15
 80077b8:	ed97 6a00 	vldr	s12, [r7]
 80077bc:	edd7 6a03 	vldr	s13, [r7, #12]
 80077c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80077c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077cc:	dd2e      	ble.n	800782c <Icorr+0xa8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	ed93 7a00 	vldr	s14, [r3]
 80077d4:	edd7 7a00 	vldr	s15, [r7]
 80077d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077dc:	ee17 0a90 	vmov	r0, s15
 80077e0:	f7f8 fed2 	bl	8000588 <__aeabi_f2d>
 80077e4:	4604      	mov	r4, r0
 80077e6:	460d      	mov	r5, r1
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7f8 fecd 	bl	8000588 <__aeabi_f2d>
 80077ee:	4680      	mov	r8, r0
 80077f0:	4689      	mov	r9, r1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	edd3 7a00 	vldr	s15, [r3]
 80077f8:	eef0 7ae7 	vabs.f32	s15, s15
 80077fc:	ee17 0a90 	vmov	r0, s15
 8007800:	f7f8 fec2 	bl	8000588 <__aeabi_f2d>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f8 ff14 	bl	8000638 <__aeabi_dmul>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4620      	mov	r0, r4
 8007816:	4629      	mov	r1, r5
 8007818:	f7f9 f838 	bl	800088c <__aeabi_ddiv>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4610      	mov	r0, r2
 8007822:	4619      	mov	r1, r3
 8007824:	f7f9 f9e0 	bl	8000be8 <__aeabi_d2f>
 8007828:	4603      	mov	r3, r0
 800782a:	e001      	b.n	8007830 <Icorr+0xac>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	ee07 3a90 	vmov	s15, r3
}
 8007834:	eeb0 0a67 	vmov.f32	s0, s15
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007840 <deriv>:

float deriv(float a, float b, float dt)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	ed87 0a03 	vstr	s0, [r7, #12]
 800784a:	edc7 0a02 	vstr	s1, [r7, #8]
 800784e:	ed87 1a01 	vstr	s2, [r7, #4]
	return (b-a)/dt;
 8007852:	ed97 7a02 	vldr	s14, [r7, #8]
 8007856:	edd7 7a03 	vldr	s15, [r7, #12]
 800785a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800785e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007862:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007866:	eef0 7a66 	vmov.f32	s15, s13
}
 800786a:	eeb0 0a67 	vmov.f32	s0, s15
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <Dcorr>:

float Dcorr(float * error, float Kd, float dt)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	ed2d 8b02 	vpush	{d8}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	ed87 0a02 	vstr	s0, [r7, #8]
 8007888:	edc7 0a01 	vstr	s1, [r7, #4]
	dt = (dt == 0?0.0001:dt);
 800788c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007890:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007898:	d001      	beq.n	800789e <Dcorr+0x26>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	e000      	b.n	80078a0 <Dcorr+0x28>
 800789e:	4b25      	ldr	r3, [pc, #148]	; (8007934 <Dcorr+0xbc>)
 80078a0:	607b      	str	r3, [r7, #4]
	/*derivative[2] = derivative[1];
	derivative[1] = derivative[0];
	derivative[0] = deriv(error[0],error[1],dt);
	return Kd*(derivative[0]+derivative[1]+derivative[2])/3;*/
	return Kd*(deriv(error[0],error[1],dt)+deriv(error[1],error[2],dt)+deriv(error[0],error[2],dt))/3;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	edd3 7a00 	vldr	s15, [r3]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3304      	adds	r3, #4
 80078ac:	ed93 7a00 	vldr	s14, [r3]
 80078b0:	ed97 1a01 	vldr	s2, [r7, #4]
 80078b4:	eef0 0a47 	vmov.f32	s1, s14
 80078b8:	eeb0 0a67 	vmov.f32	s0, s15
 80078bc:	f7ff ffc0 	bl	8007840 <deriv>
 80078c0:	eeb0 8a40 	vmov.f32	s16, s0
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3304      	adds	r3, #4
 80078c8:	edd3 7a00 	vldr	s15, [r3]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3308      	adds	r3, #8
 80078d0:	ed93 7a00 	vldr	s14, [r3]
 80078d4:	ed97 1a01 	vldr	s2, [r7, #4]
 80078d8:	eef0 0a47 	vmov.f32	s1, s14
 80078dc:	eeb0 0a67 	vmov.f32	s0, s15
 80078e0:	f7ff ffae 	bl	8007840 <deriv>
 80078e4:	eef0 7a40 	vmov.f32	s15, s0
 80078e8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	edd3 7a00 	vldr	s15, [r3]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3308      	adds	r3, #8
 80078f6:	ed93 7a00 	vldr	s14, [r3]
 80078fa:	ed97 1a01 	vldr	s2, [r7, #4]
 80078fe:	eef0 0a47 	vmov.f32	s1, s14
 8007902:	eeb0 0a67 	vmov.f32	s0, s15
 8007906:	f7ff ff9b 	bl	8007840 <deriv>
 800790a:	eef0 7a40 	vmov.f32	s15, s0
 800790e:	ee38 7a27 	vadd.f32	s14, s16, s15
 8007912:	edd7 7a02 	vldr	s15, [r7, #8]
 8007916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800791e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007922:	eef0 7a66 	vmov.f32	s15, s13
	//return Kd*deriv(error[0],error[1],dt);
}
 8007926:	eeb0 0a67 	vmov.f32	s0, s15
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	ecbd 8b02 	vpop	{d8}
 8007932:	bd80      	pop	{r7, pc}
 8007934:	38d1b717 	.word	0x38d1b717

08007938 <corrector>:
 * Ilim : Integral correction bounds
 * integral : integral value
 */

float corrector(float * error, float correction, float Kp, float Ki, float Kd, float Kf, float dt, float Ilim, float * integral)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	ed2d 8b02 	vpush	{d8}
 800793e:	b08a      	sub	sp, #40	; 0x28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6278      	str	r0, [r7, #36]	; 0x24
 8007944:	ed87 0a08 	vstr	s0, [r7, #32]
 8007948:	edc7 0a07 	vstr	s1, [r7, #28]
 800794c:	ed87 1a06 	vstr	s2, [r7, #24]
 8007950:	edc7 1a05 	vstr	s3, [r7, #20]
 8007954:	ed87 2a04 	vstr	s4, [r7, #16]
 8007958:	edc7 2a03 	vstr	s5, [r7, #12]
 800795c:	ed87 3a02 	vstr	s6, [r7, #8]
 8007960:	6079      	str	r1, [r7, #4]
	return -Pcorr(Kp, error[0]) - Icorr(Ki, error[0], integral, Ilim) - Dcorr(error,Kd,dt) + Kf*(correction);
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	edd3 7a00 	vldr	s15, [r3]
 8007968:	eef0 0a67 	vmov.f32	s1, s15
 800796c:	ed97 0a07 	vldr	s0, [r7, #28]
 8007970:	f7ff fef4 	bl	800775c <Pcorr>
 8007974:	eef0 7a40 	vmov.f32	s15, s0
 8007978:	eeb1 8a67 	vneg.f32	s16, s15
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	edd3 7a00 	vldr	s15, [r3]
 8007982:	ed97 1a02 	vldr	s2, [r7, #8]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	eef0 0a67 	vmov.f32	s1, s15
 800798c:	ed97 0a06 	vldr	s0, [r7, #24]
 8007990:	f7ff fef8 	bl	8007784 <Icorr>
 8007994:	eef0 7a40 	vmov.f32	s15, s0
 8007998:	ee38 8a67 	vsub.f32	s16, s16, s15
 800799c:	edd7 0a03 	vldr	s1, [r7, #12]
 80079a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80079a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079a6:	f7ff ff67 	bl	8007878 <Dcorr>
 80079aa:	eef0 7a40 	vmov.f32	s15, s0
 80079ae:	ee38 7a67 	vsub.f32	s14, s16, s15
 80079b2:	edd7 6a04 	vldr	s13, [r7, #16]
 80079b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80079ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079be:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80079c2:	eeb0 0a67 	vmov.f32	s0, s15
 80079c6:	3728      	adds	r7, #40	; 0x28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	ecbd 8b02 	vpop	{d8}
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <KalmanInit>:
 * stateInit = {x,v,a}: initial current state, strategy start point
 * stateFin = {x,v,a}: estimated future state (prior state for next iteration)
 * dt : time interval
 */
void KalmanInit(float * stateInit, float * stateFin, float dt)
{
 80079d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	ed87 0a01 	vstr	s0, [r7, #4]
	stateFin[0] = stateInit[0] + stateInit[1]*dt + stateInit[2]*pow(dt,2)/2;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	ed93 7a00 	vldr	s14, [r3]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3304      	adds	r3, #4
 80079ea:	edd3 6a00 	vldr	s13, [r3]
 80079ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80079f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079fa:	ee17 0a90 	vmov	r0, s15
 80079fe:	f7f8 fdc3 	bl	8000588 <__aeabi_f2d>
 8007a02:	4604      	mov	r4, r0
 8007a04:	460d      	mov	r5, r1
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3308      	adds	r3, #8
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7f8 fdbb 	bl	8000588 <__aeabi_f2d>
 8007a12:	4680      	mov	r8, r0
 8007a14:	4689      	mov	r9, r1
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7f8 fdb6 	bl	8000588 <__aeabi_f2d>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007aa8 <KalmanInit+0xd8>
 8007a24:	ec43 2b10 	vmov	d0, r2, r3
 8007a28:	f004 fea0 	bl	800c76c <pow>
 8007a2c:	ec53 2b10 	vmov	r2, r3, d0
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	f7f8 fe00 	bl	8000638 <__aeabi_dmul>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4619      	mov	r1, r3
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a48:	f7f8 ff20 	bl	800088c <__aeabi_ddiv>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4620      	mov	r0, r4
 8007a52:	4629      	mov	r1, r5
 8007a54:	f7f8 fc3a 	bl	80002cc <__adddf3>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4619      	mov	r1, r3
 8007a60:	f7f9 f8c2 	bl	8000be8 <__aeabi_d2f>
 8007a64:	4602      	mov	r2, r0
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	601a      	str	r2, [r3, #0]
	stateFin[1] = stateInit[1] + stateInit[2]*dt;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	ed93 7a00 	vldr	s14, [r3]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3308      	adds	r3, #8
 8007a76:	edd3 6a00 	vldr	s13, [r3]
 8007a7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	3304      	adds	r3, #4
 8007a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a8a:	edc3 7a00 	vstr	s15, [r3]
	stateFin[2] = stateInit[2];
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	3308      	adds	r3, #8
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	6892      	ldr	r2, [r2, #8]
 8007a96:	601a      	str	r2, [r3, #0]
}
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007aa2:	bf00      	nop
 8007aa4:	f3af 8000 	nop.w
 8007aa8:	00000000 	.word	0x00000000
 8007aac:	40000000 	.word	0x40000000

08007ab0 <drv8825_initialize>:


void drv8825_initialize(Stepper *stepper, uint16_t enablePin,
                  GPIO_TypeDef* enableGPIO, uint16_t dirPin, 
                  GPIO_TypeDef *dirGPIO, TIM_HandleTypeDef *timer, 
                  uint8_t channel) {
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	607a      	str	r2, [r7, #4]
 8007aba:	461a      	mov	r2, r3
 8007abc:	460b      	mov	r3, r1
 8007abe:	817b      	strh	r3, [r7, #10]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	813b      	strh	r3, [r7, #8]
	stepper->enablePin = enablePin;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	897a      	ldrh	r2, [r7, #10]
 8007ac8:	801a      	strh	r2, [r3, #0]
	stepper->enableGPIO = enableGPIO;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	605a      	str	r2, [r3, #4]

	stepper->dirPin = dirPin;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	893a      	ldrh	r2, [r7, #8]
 8007ad4:	811a      	strh	r2, [r3, #8]
	stepper->dirGPIO = dirGPIO;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	60da      	str	r2, [r3, #12]

	stepper->timer = timer;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	611a      	str	r2, [r3, #16]
	stepper->channel = channel;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007ae8:	751a      	strb	r2, [r3, #20]
}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <drv8825_setDirection>:


void drv8825_setDirection(Stepper *stepper, StepperDirection direction) {
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(stepper->dirGPIO, stepper->dirPin, (uint8_t) direction);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68d8      	ldr	r0, [r3, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	891b      	ldrh	r3, [r3, #8]
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f7fb fe57 	bl	80037c0 <HAL_GPIO_WritePin>
}
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <drv8825_enable>:


void drv8825_enable(Stepper *stepper) {
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6858      	ldr	r0, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f7fb fe47 	bl	80037c0 <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin, 
		(uint8_t) ACTIVE
	);
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <drv8825_disable>:


void drv8825_disable(Stepper *stepper) {
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6858      	ldr	r0, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f7fb fe37 	bl	80037c0 <HAL_GPIO_WritePin>
		stepper->enableGPIO, 
		stepper->enablePin,
		(uint8_t) PASSIVE
	);
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <drv8825_setPWMFrequency>:


void drv8825_setPWMFrequency(Stepper* stepper, uint16_t frequency) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	807b      	strh	r3, [r7, #2]
	 * freq = (clock)/{(PSC+1)(ARR+1)})             *
	 *												*
	 * clock = 180Mhz   PSC = 179                   *
	 * ARR = la valeur que l'on souhaite appliquer  *
	 ************************************************/
	if (frequency != 0) {
 8007b68:	887b      	ldrh	r3, [r7, #2]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <drv8825_setPWMFrequency+0x2a>
		stepper->timer->Init.Prescaler = 179;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	22b3      	movs	r2, #179	; 0xb3
 8007b74:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = (uint32_t)1000000/frequency;
 8007b76:	887a      	ldrh	r2, [r7, #2]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	4945      	ldr	r1, [pc, #276]	; (8007c94 <drv8825_setPWMFrequency+0x138>)
 8007b7e:	fbb1 f2f2 	udiv	r2, r1, r2
 8007b82:	60da      	str	r2, [r3, #12]
 8007b84:	e009      	b.n	8007b9a <drv8825_setPWMFrequency+0x3e>
	} else {
		stepper->timer->Init.Prescaler = 0xFFFE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b8e:	605a      	str	r2, [r3, #4]
		stepper->timer->Init.Period = 0xFFFE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007b98:	60da      	str	r2, [r3, #12]
	}
	/************************************************
	 * si l'initialisation du timerc'est bien passé *
	 ************************************************/
	if (HAL_TIM_Base_Init(stepper->timer) != HAL_OK) {
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fc fc60 	bl	8004464 <HAL_TIM_Base_Init>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <drv8825_setPWMFrequency+0x52>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8007baa:	f7f9 fde3 	bl	8001774 <Error_Handler>
	}

	/******************************************************
	 * si l'initialisation du signal PWM c'est bien passé *
	 ******************************************************/
	if (HAL_TIM_PWM_Init(stepper->timer) != HAL_OK) {
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fc fd7e 	bl	80046b4 <HAL_TIM_PWM_Init>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <drv8825_setPWMFrequency+0x66>
		//nous affichons l'erreur qui c'est produit
		Error_Handler();
 8007bbe:	f7f9 fdd9 	bl	8001774 <Error_Handler>
	}

	/**********************************
	 * nous déclanchons le signal PWM *
	 **********************************/
	HAL_TIM_PWM_Start(stepper->timer, stepper->channel);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691a      	ldr	r2, [r3, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7d1b      	ldrb	r3, [r3, #20]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4610      	mov	r0, r2
 8007bce:	f7fc fdcb 	bl	8004768 <HAL_TIM_PWM_Start>

	/****************************************
	 * nous configurons le rapport cyclique *
	 * pour qu'il soit à 50%                *
	 ****************************************/
	switch (stepper->channel) {
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7d1b      	ldrb	r3, [r3, #20]
 8007bd6:	2b0c      	cmp	r3, #12
 8007bd8:	d858      	bhi.n	8007c8c <drv8825_setPWMFrequency+0x130>
 8007bda:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <drv8825_setPWMFrequency+0x84>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007c15 	.word	0x08007c15
 8007be4:	08007c8d 	.word	0x08007c8d
 8007be8:	08007c8d 	.word	0x08007c8d
 8007bec:	08007c8d 	.word	0x08007c8d
 8007bf0:	08007c33 	.word	0x08007c33
 8007bf4:	08007c8d 	.word	0x08007c8d
 8007bf8:	08007c8d 	.word	0x08007c8d
 8007bfc:	08007c8d 	.word	0x08007c8d
 8007c00:	08007c51 	.word	0x08007c51
 8007c04:	08007c8d 	.word	0x08007c8d
 8007c08:	08007c8d 	.word	0x08007c8d
 8007c0c:	08007c8d 	.word	0x08007c8d
 8007c10:	08007c6f 	.word	0x08007c6f
		case (TIM_CHANNEL_1):
			stepper->timer->Instance->CCR1 = (50*stepper->timer->Init.Period)/100;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	2232      	movs	r2, #50	; 0x32
 8007c1c:	fb03 f202 	mul.w	r2, r3, r2
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	491c      	ldr	r1, [pc, #112]	; (8007c98 <drv8825_setPWMFrequency+0x13c>)
 8007c28:	fba1 1202 	umull	r1, r2, r1, r2
 8007c2c:	0952      	lsrs	r2, r2, #5
 8007c2e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8007c30:	e02c      	b.n	8007c8c <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_2):
			stepper->timer->Instance->CCR2 = (50*stepper->timer->Init.Period)/100;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	2232      	movs	r2, #50	; 0x32
 8007c3a:	fb03 f202 	mul.w	r2, r3, r2
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4914      	ldr	r1, [pc, #80]	; (8007c98 <drv8825_setPWMFrequency+0x13c>)
 8007c46:	fba1 1202 	umull	r1, r2, r1, r2
 8007c4a:	0952      	lsrs	r2, r2, #5
 8007c4c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8007c4e:	e01d      	b.n	8007c8c <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_3):
			stepper->timer->Instance->CCR3 = (50*stepper->timer->Init.Period)/100;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2232      	movs	r2, #50	; 0x32
 8007c58:	fb03 f202 	mul.w	r2, r3, r2
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	490d      	ldr	r1, [pc, #52]	; (8007c98 <drv8825_setPWMFrequency+0x13c>)
 8007c64:	fba1 1202 	umull	r1, r2, r1, r2
 8007c68:	0952      	lsrs	r2, r2, #5
 8007c6a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8007c6c:	e00e      	b.n	8007c8c <drv8825_setPWMFrequency+0x130>
		case (TIM_CHANNEL_4):
			stepper->timer->Instance->CCR4 = (50*stepper->timer->Init.Period)/100;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	2232      	movs	r2, #50	; 0x32
 8007c76:	fb03 f202 	mul.w	r2, r3, r2
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4905      	ldr	r1, [pc, #20]	; (8007c98 <drv8825_setPWMFrequency+0x13c>)
 8007c82:	fba1 1202 	umull	r1, r2, r1, r2
 8007c86:	0952      	lsrs	r2, r2, #5
 8007c88:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8007c8a:	bf00      	nop
	}
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	000f4240 	.word	0x000f4240
 8007c98:	51eb851f 	.word	0x51eb851f

08007c9c <drv8825_setRotationSpeed>:


void drv8825_setRotationSpeed(Stepper *stepper, float rpm) {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	ed87 0a00 	vstr	s0, [r7]
	uint16_t f = (rpm / 60) * STEPS_PER_REV * MICROSTEPS;
 8007ca8:	ed97 7a00 	vldr	s14, [r7]
 8007cac:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8007ce0 <drv8825_setRotationSpeed+0x44>
 8007cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cb4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007ce4 <drv8825_setRotationSpeed+0x48>
 8007cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cbc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007ce8 <drv8825_setRotationSpeed+0x4c>
 8007cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc8:	ee17 3a90 	vmov	r3, s15
 8007ccc:	81fb      	strh	r3, [r7, #14]
	drv8825_setPWMFrequency(stepper, f);
 8007cce:	89fb      	ldrh	r3, [r7, #14]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff ff42 	bl	8007b5c <drv8825_setPWMFrequency>
}
 8007cd8:	bf00      	nop
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	42700000 	.word	0x42700000
 8007ce4:	43480000 	.word	0x43480000
 8007ce8:	42000000 	.word	0x42000000

08007cec <lidar_initialize>:
uint8_t lidar_distances[16];


// Le lidar est sur l'UART 4

void lidar_initialize() {
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
	for (int i=0; i<16; i++) {
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	607b      	str	r3, [r7, #4]
 8007cf6:	e00d      	b.n	8007d14 <lidar_initialize+0x28>
		lidar_distances[i] = 255;
 8007cf8:	4a0b      	ldr	r2, [pc, #44]	; (8007d28 <lidar_initialize+0x3c>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	22ff      	movs	r2, #255	; 0xff
 8007d00:	701a      	strb	r2, [r3, #0]
		lidar_timeSinceData[i] = LIDAR_TIMEOUT;
 8007d02:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <lidar_initialize+0x40>)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<16; i++) {
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3301      	adds	r3, #1
 8007d12:	607b      	str	r3, [r7, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b0f      	cmp	r3, #15
 8007d18:	ddee      	ble.n	8007cf8 <lidar_initialize+0xc>
	}
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	20000698 	.word	0x20000698
 8007d2c:	20000658 	.word	0x20000658

08007d30 <lidar_getDistance>:
	lidar_timeSinceData[index] = 0;*/
	//printf("%d -> %dcm\r\n", index, dist);

}

int lidar_getDistance(Direction dir) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	71fb      	strb	r3, [r7, #7]
	int minDist = 1000;
 8007d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d3e:	60fb      	str	r3, [r7, #12]
	readFrame();
 8007d40:	f000 f822 	bl	8007d88 <readFrame>
				}
			}
			}*/


	for(int i = 0; i<maxMesure;i++){
 8007d44:	2300      	movs	r3, #0
 8007d46:	60bb      	str	r3, [r7, #8]
 8007d48:	e00f      	b.n	8007d6a <lidar_getDistance+0x3a>
		if((int)distanceList[i] < minDist){
 8007d4a:	4a0d      	ldr	r2, [pc, #52]	; (8007d80 <lidar_getDistance+0x50>)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d52:	461a      	mov	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4293      	cmp	r3, r2
 8007d58:	dd04      	ble.n	8007d64 <lidar_getDistance+0x34>
			minDist = (int)distanceList[i];
 8007d5a:	4a09      	ldr	r2, [pc, #36]	; (8007d80 <lidar_getDistance+0x50>)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d62:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<maxMesure;i++){
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60bb      	str	r3, [r7, #8]
 8007d6a:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <lidar_getDistance+0x54>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4293      	cmp	r3, r2
 8007d74:	dbe9      	blt.n	8007d4a <lidar_getDistance+0x1a>
		}
	}

	return minDist;
 8007d76:	68fb      	ldr	r3, [r7, #12]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	200006ac 	.word	0x200006ac
 8007d84:	20000ced 	.word	0x20000ced

08007d88 <readFrame>:
uint8_t NROI;			//Nbre de ROIs utilises
uint8_t maxMesure = 0; 	//Nbre de mesures stockees
uint8_t measuresSent; 		//Nbre de mesures annoncees


void readFrame(void){
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
	if(newDataset){
 8007d8e:	4b15      	ldr	r3, [pc, #84]	; (8007de4 <readFrame+0x5c>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d021      	beq.n	8007dda <readFrame+0x52>
		/* On sauvegarde les index de debut et fin de trame car
		 * l'extraction des mesures peut prendre plus de temps que la reception de nouvelles*/
		uint16_t usedIndex = bufferIndex;
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <readFrame+0x60>)
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	80fb      	strh	r3, [r7, #6]
		uint16_t usedStart = frameIndex;
 8007d9c:	4b13      	ldr	r3, [pc, #76]	; (8007dec <readFrame+0x64>)
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	80bb      	strh	r3, [r7, #4]

		// On ne lit pas les donnees si le debut de la trame n'est pas conforme
		if(setFrameIndex(&usedStart)){
 8007da2:	1d3b      	adds	r3, r7, #4
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 f92f 	bl	8008008 <setFrameIndex>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d009      	beq.n	8007dc4 <readFrame+0x3c>
			readHeader(usedStart);
 8007db0:	88bb      	ldrh	r3, [r7, #4]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 f81c 	bl	8007df0 <readHeader>
			readValue(usedIndex, usedStart);
 8007db8:	88ba      	ldrh	r2, [r7, #4]
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 f844 	bl	8007e4c <readValue>
		}
		newDataset = 0;
 8007dc4:	4b07      	ldr	r3, [pc, #28]	; (8007de4 <readFrame+0x5c>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]

		/*Pour eviter de remplir le buffer en entier.
		 * Situe ici pour eviter de perdre la position de fin de trame lors de l'etape de lecture des mesures*/
		if(bufferIndex >2000){
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <readFrame+0x60>)
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007dd2:	d902      	bls.n	8007dda <readFrame+0x52>
			bufferIndex = 0;
 8007dd4:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <readFrame+0x60>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8007dda:	bf00      	nop
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200006a8 	.word	0x200006a8
 8007de8:	2000194c 	.word	0x2000194c
 8007dec:	200006aa 	.word	0x200006aa

08007df0 <readHeader>:

void readHeader(uint16_t frameIndex){
 8007df0:	b480      	push	{r7}
 8007df2:	b089      	sub	sp, #36	; 0x24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	80fb      	strh	r3, [r7, #6]
	uint8_t value[20];

	// 1
	uint8_t ncaptActifs = lidarBuf[frameIndex];
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	4a10      	ldr	r2, [pc, #64]	; (8007e40 <readHeader+0x50>)
 8007dfe:	5cd3      	ldrb	r3, [r2, r3]
 8007e00:	77fb      	strb	r3, [r7, #31]

	// 2
	//Pour eviter les erreurs de lecture de trame ne lisant pas l'en-tete (255 ROIs fausse toutes
	if((ncaptActifs <= 0 || ncaptActifs >16) || (lidarBuf[frameIndex+1]>14)){
 8007e02:	7ffb      	ldrb	r3, [r7, #31]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d008      	beq.n	8007e1a <readHeader+0x2a>
 8007e08:	7ffb      	ldrb	r3, [r7, #31]
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d805      	bhi.n	8007e1a <readHeader+0x2a>
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	3301      	adds	r3, #1
 8007e12:	4a0b      	ldr	r2, [pc, #44]	; (8007e40 <readHeader+0x50>)
 8007e14:	5cd3      	ldrb	r3, [r2, r3]
 8007e16:	2b0e      	cmp	r3, #14
 8007e18:	d903      	bls.n	8007e22 <readHeader+0x32>
		NROI = DEFAULT_ROI;
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <readHeader+0x54>)
 8007e1c:	220d      	movs	r2, #13
 8007e1e:	701a      	strb	r2, [r3, #0]
 8007e20:	e002      	b.n	8007e28 <readHeader+0x38>
	}
	else{
		//NROI = buffer[frameIndex+1];
		NROI = DEFAULT_ROI; // Not the right value for debug purposes
 8007e22:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <readHeader+0x54>)
 8007e24:	220d      	movs	r2, #13
 8007e26:	701a      	strb	r2, [r3, #0]
	}

	// 3
	measuresSent = lidarBuf[frameIndex+2];
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	4a04      	ldr	r2, [pc, #16]	; (8007e40 <readHeader+0x50>)
 8007e2e:	5cd2      	ldrb	r2, [r2, r3]
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <readHeader+0x58>)
 8007e32:	701a      	strb	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	3724      	adds	r7, #36	; 0x24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	20000d94 	.word	0x20000d94
 8007e44:	20000cec 	.word	0x20000cec
 8007e48:	20000cee 	.word	0x20000cee

08007e4c <readValue>:

void readValue(uint16_t usedIndex, uint16_t frameIndex){
 8007e4c:	b480      	push	{r7}
 8007e4e:	b08d      	sub	sp, #52	; 0x34
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	460a      	mov	r2, r1
 8007e56:	80fb      	strh	r3, [r7, #6]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	80bb      	strh	r3, [r7, #4]

	// Variables
	int i = frameIndex + 3;// Debut des mesures apres l'en-tete
 8007e5c:	88bb      	ldrh	r3, [r7, #4]
 8007e5e:	3303      	adds	r3, #3
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t value[30];
	uint8_t nbreMes = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t Ncapteur; uint8_t indiceROI; uint16_t distance;

	/* Double verification pour eviter la lecture des 0x0 de la memoire par defaut en cas d'index defaillant.
	 * Peut etre enleve si on ajuste aussi usedIndex dans setFrameIndex()
	 * */
	while(i < (usedIndex - 3) && nbreMes < measuresSent){
 8007e68:	e043      	b.n	8007ef2 <readValue+0xa6>
		//Selon le code du systeme de detection : "Pour que le premier element de la chaine de caracteres ne soit pas '\0'"
		// Donc il faut enlever l'offset sur buffer[i]
		indiceROI = (lidarBuf[i]-1)%NROI;
 8007e6a:	4a2c      	ldr	r2, [pc, #176]	; (8007f1c <readValue+0xd0>)
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	4413      	add	r3, r2
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	4a2a      	ldr	r2, [pc, #168]	; (8007f20 <readValue+0xd4>)
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	fb93 f1f2 	sdiv	r1, r3, r2
 8007e7c:	fb01 f202 	mul.w	r2, r1, r2
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		Ncapteur  = (lidarBuf[i]-1 -indiceROI)/NROI;
 8007e86:	4a25      	ldr	r2, [pc, #148]	; (8007f1c <readValue+0xd0>)
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	4413      	add	r3, r2
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	1e5a      	subs	r2, r3, #1
 8007e90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	4a22      	ldr	r2, [pc, #136]	; (8007f20 <readValue+0xd4>)
 8007e98:	7812      	ldrb	r2, [r2, #0]
 8007e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e9e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		distance  = (lidarBuf[i+1]<<8) + lidarBuf[i+2];
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	4a1d      	ldr	r2, [pc, #116]	; (8007f1c <readValue+0xd0>)
 8007ea8:	5cd3      	ldrb	r3, [r2, r3]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	4919      	ldr	r1, [pc, #100]	; (8007f1c <readValue+0xd0>)
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	4413      	add	r3, r2
 8007ebc:	84fb      	strh	r3, [r7, #38]	; 0x26

		// Ecriture memoire
		captorList[nbreMes]=Ncapteur; roiList[nbreMes]=indiceROI; distanceList[nbreMes]=distance;
 8007ebe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ec2:	4918      	ldr	r1, [pc, #96]	; (8007f24 <readValue+0xd8>)
 8007ec4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8007ec8:	54ca      	strb	r2, [r1, r3]
 8007eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ece:	4916      	ldr	r1, [pc, #88]	; (8007f28 <readValue+0xdc>)
 8007ed0:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8007ed4:	54ca      	strb	r2, [r1, r3]
 8007ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007eda:	4914      	ldr	r1, [pc, #80]	; (8007f2c <readValue+0xe0>)
 8007edc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ede:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		i += 3;
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	3303      	adds	r3, #3
 8007ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
		nbreMes++;
 8007ee8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007eec:	3301      	adds	r3, #1
 8007eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while(i < (usedIndex - 3) && nbreMes < measuresSent){
 8007ef2:	88fb      	ldrh	r3, [r7, #6]
 8007ef4:	3b03      	subs	r3, #3
 8007ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	da05      	bge.n	8007f08 <readValue+0xbc>
 8007efc:	4b0c      	ldr	r3, [pc, #48]	; (8007f30 <readValue+0xe4>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d3b0      	bcc.n	8007e6a <readValue+0x1e>
	}
	maxMesure = nbreMes;
 8007f08:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <readValue+0xe8>)
 8007f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f0e:	7013      	strb	r3, [r2, #0]
}
 8007f10:	bf00      	nop
 8007f12:	3734      	adds	r7, #52	; 0x34
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	20000d94 	.word	0x20000d94
 8007f20:	20000cec 	.word	0x20000cec
 8007f24:	20000a94 	.word	0x20000a94
 8007f28:	20000bc0 	.word	0x20000bc0
 8007f2c:	200006ac 	.word	0x200006ac
 8007f30:	20000cee 	.word	0x20000cee
 8007f34:	20000ced 	.word	0x20000ced

08007f38 <frameStatus>:

void frameStatus(void){
 8007f38:	b480      	push	{r7}
 8007f3a:	af00      	add	r7, sp, #0
	//End of Frame
	if(frameStarted && (bufferIndex >= 3) && DataAcquiered){
 8007f3c:	4b2c      	ldr	r3, [pc, #176]	; (8007ff0 <frameStatus+0xb8>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d023      	beq.n	8007f8c <frameStatus+0x54>
 8007f44:	4b2b      	ldr	r3, [pc, #172]	; (8007ff4 <frameStatus+0xbc>)
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d91f      	bls.n	8007f8c <frameStatus+0x54>
 8007f4c:	4b2a      	ldr	r3, [pc, #168]	; (8007ff8 <frameStatus+0xc0>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d01b      	beq.n	8007f8c <frameStatus+0x54>
		if((lidarBuf[bufferIndex - 3] == FRAME_BOUND) && (lidarBuf[bufferIndex - 2] == FRAME_BOUND) && (lidarBuf[bufferIndex - 1] == FRAME_BOUND)){
 8007f54:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <frameStatus+0xbc>)
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	3b03      	subs	r3, #3
 8007f5a:	4a28      	ldr	r2, [pc, #160]	; (8007ffc <frameStatus+0xc4>)
 8007f5c:	5cd3      	ldrb	r3, [r2, r3]
 8007f5e:	2bff      	cmp	r3, #255	; 0xff
 8007f60:	d13d      	bne.n	8007fde <frameStatus+0xa6>
 8007f62:	4b24      	ldr	r3, [pc, #144]	; (8007ff4 <frameStatus+0xbc>)
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	3b02      	subs	r3, #2
 8007f68:	4a24      	ldr	r2, [pc, #144]	; (8007ffc <frameStatus+0xc4>)
 8007f6a:	5cd3      	ldrb	r3, [r2, r3]
 8007f6c:	2bff      	cmp	r3, #255	; 0xff
 8007f6e:	d136      	bne.n	8007fde <frameStatus+0xa6>
 8007f70:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <frameStatus+0xbc>)
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	4a21      	ldr	r2, [pc, #132]	; (8007ffc <frameStatus+0xc4>)
 8007f78:	5cd3      	ldrb	r3, [r2, r3]
 8007f7a:	2bff      	cmp	r3, #255	; 0xff
 8007f7c:	d12f      	bne.n	8007fde <frameStatus+0xa6>
			frameStarted = 0;
 8007f7e:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <frameStatus+0xb8>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]

			newDataset = 1;
 8007f84:	4b1e      	ldr	r3, [pc, #120]	; (8008000 <frameStatus+0xc8>)
 8007f86:	2201      	movs	r2, #1
 8007f88:	701a      	strb	r2, [r3, #0]
		if((lidarBuf[bufferIndex - 3] == FRAME_BOUND) && (lidarBuf[bufferIndex - 2] == FRAME_BOUND) && (lidarBuf[bufferIndex - 1] == FRAME_BOUND)){
 8007f8a:	e028      	b.n	8007fde <frameStatus+0xa6>
		}
	}
	//Start of Frame
	else if(!frameStarted && (bufferIndex >= 3) && DataAcquiered){
 8007f8c:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <frameStatus+0xb8>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d125      	bne.n	8007fe0 <frameStatus+0xa8>
 8007f94:	4b17      	ldr	r3, [pc, #92]	; (8007ff4 <frameStatus+0xbc>)
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d921      	bls.n	8007fe0 <frameStatus+0xa8>
 8007f9c:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <frameStatus+0xc0>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01d      	beq.n	8007fe0 <frameStatus+0xa8>
		if((lidarBuf[bufferIndex - 3] == FRAME_BOUND) && (lidarBuf[bufferIndex - 2] == FRAME_BOUND) && (lidarBuf[bufferIndex - 1] == FRAME_BOUND)){
 8007fa4:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <frameStatus+0xbc>)
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	3b03      	subs	r3, #3
 8007faa:	4a14      	ldr	r2, [pc, #80]	; (8007ffc <frameStatus+0xc4>)
 8007fac:	5cd3      	ldrb	r3, [r2, r3]
 8007fae:	2bff      	cmp	r3, #255	; 0xff
 8007fb0:	d116      	bne.n	8007fe0 <frameStatus+0xa8>
 8007fb2:	4b10      	ldr	r3, [pc, #64]	; (8007ff4 <frameStatus+0xbc>)
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	3b02      	subs	r3, #2
 8007fb8:	4a10      	ldr	r2, [pc, #64]	; (8007ffc <frameStatus+0xc4>)
 8007fba:	5cd3      	ldrb	r3, [r2, r3]
 8007fbc:	2bff      	cmp	r3, #255	; 0xff
 8007fbe:	d10f      	bne.n	8007fe0 <frameStatus+0xa8>
 8007fc0:	4b0c      	ldr	r3, [pc, #48]	; (8007ff4 <frameStatus+0xbc>)
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a0d      	ldr	r2, [pc, #52]	; (8007ffc <frameStatus+0xc4>)
 8007fc8:	5cd3      	ldrb	r3, [r2, r3]
 8007fca:	2bff      	cmp	r3, #255	; 0xff
 8007fcc:	d108      	bne.n	8007fe0 <frameStatus+0xa8>
			frameStarted = 1;
 8007fce:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <frameStatus+0xb8>)
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	701a      	strb	r2, [r3, #0]
			frameIndex = bufferIndex;
 8007fd4:	4b07      	ldr	r3, [pc, #28]	; (8007ff4 <frameStatus+0xbc>)
 8007fd6:	881a      	ldrh	r2, [r3, #0]
 8007fd8:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <frameStatus+0xcc>)
 8007fda:	801a      	strh	r2, [r3, #0]
 8007fdc:	e000      	b.n	8007fe0 <frameStatus+0xa8>
		if((lidarBuf[bufferIndex - 3] == FRAME_BOUND) && (lidarBuf[bufferIndex - 2] == FRAME_BOUND) && (lidarBuf[bufferIndex - 1] == FRAME_BOUND)){
 8007fde:	bf00      	nop
			//frameIndex = 0;

		}
	}
	DataAcquiered = 0;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <frameStatus+0xc0>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	200006a9 	.word	0x200006a9
 8007ff4:	2000194c 	.word	0x2000194c
 8007ff8:	2000194e 	.word	0x2000194e
 8007ffc:	20000d94 	.word	0x20000d94
 8008000:	200006a8 	.word	0x200006a8
 8008004:	200006aa 	.word	0x200006aa

08008008 <setFrameIndex>:

uint8_t setFrameIndex(uint16_t * frameIndex){
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
	uint16_t bound = *frameIndex;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	81fb      	strh	r3, [r7, #14]
	while(bound<3000){
 8008016:	e01e      	b.n	8008056 <setFrameIndex+0x4e>
		if((lidarBuf[bound - 3] == FRAME_BOUND)	//0xFF
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	3b03      	subs	r3, #3
 800801c:	4a14      	ldr	r2, [pc, #80]	; (8008070 <setFrameIndex+0x68>)
 800801e:	5cd3      	ldrb	r3, [r2, r3]
 8008020:	2bff      	cmp	r3, #255	; 0xff
 8008022:	d115      	bne.n	8008050 <setFrameIndex+0x48>
		&& (lidarBuf[bound - 2] == FRAME_BOUND)	//0xFF
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	3b02      	subs	r3, #2
 8008028:	4a11      	ldr	r2, [pc, #68]	; (8008070 <setFrameIndex+0x68>)
 800802a:	5cd3      	ldrb	r3, [r2, r3]
 800802c:	2bff      	cmp	r3, #255	; 0xff
 800802e:	d10f      	bne.n	8008050 <setFrameIndex+0x48>
		&& (lidarBuf[bound - 1] == FRAME_BOUND)	//0xFF
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	3b01      	subs	r3, #1
 8008034:	4a0e      	ldr	r2, [pc, #56]	; (8008070 <setFrameIndex+0x68>)
 8008036:	5cd3      	ldrb	r3, [r2, r3]
 8008038:	2bff      	cmp	r3, #255	; 0xff
 800803a:	d109      	bne.n	8008050 <setFrameIndex+0x48>
		&& (lidarBuf[bound - 0] != FRAME_BOUND)){	//NcaptActifs
 800803c:	89fb      	ldrh	r3, [r7, #14]
 800803e:	4a0c      	ldr	r2, [pc, #48]	; (8008070 <setFrameIndex+0x68>)
 8008040:	5cd3      	ldrb	r3, [r2, r3]
 8008042:	2bff      	cmp	r3, #255	; 0xff
 8008044:	d004      	beq.n	8008050 <setFrameIndex+0x48>

			*frameIndex = bound;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	89fa      	ldrh	r2, [r7, #14]
 800804a:	801a      	strh	r2, [r3, #0]
			return 1;
 800804c:	2301      	movs	r3, #1
 800804e:	e008      	b.n	8008062 <setFrameIndex+0x5a>
		}
		else{
			bound++;
 8008050:	89fb      	ldrh	r3, [r7, #14]
 8008052:	3301      	adds	r3, #1
 8008054:	81fb      	strh	r3, [r7, #14]
	while(bound<3000){
 8008056:	89fb      	ldrh	r3, [r7, #14]
 8008058:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800805c:	4293      	cmp	r3, r2
 800805e:	d9db      	bls.n	8008018 <setFrameIndex+0x10>
		}
	}
	return 0;
 8008060:	2300      	movs	r3, #0

}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	20000d94 	.word	0x20000d94

08008074 <getRightEncoderCount>:
#include "odometry.h"


int16_t getRightEncoderCount() {
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
	int16_t count = (int16_t) R_ENCODER.Instance->CNT;
 800807a:	4b08      	ldr	r3, [pc, #32]	; (800809c <getRightEncoderCount+0x28>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	80fb      	strh	r3, [r7, #6]
	R_ENCODER.Instance->CNT = 0;
 8008082:	4b06      	ldr	r3, [pc, #24]	; (800809c <getRightEncoderCount+0x28>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2200      	movs	r2, #0
 8008088:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 800808a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20000208 	.word	0x20000208

080080a0 <getLeftEncoderCount>:


int16_t getLeftEncoderCount() {
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
	int16_t count = (int16_t) L_ENCODER.Instance->CNT;
 80080a6:	4b08      	ldr	r3, [pc, #32]	; (80080c8 <getLeftEncoderCount+0x28>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	80fb      	strh	r3, [r7, #6]
	L_ENCODER.Instance->CNT = 0;
 80080ae:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <getLeftEncoderCount+0x28>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2200      	movs	r2, #0
 80080b4:	625a      	str	r2, [r3, #36]	; 0x24
	return count;
 80080b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	20000298 	.word	0x20000298
 80080cc:	00000000 	.word	0x00000000

080080d0 <odometry_updatePosition>:
float XstateMes = 0;
float YstateMes = 0;
float rKalmanCoeff[3] = {0.8, 0.8, 0.005};
float alphaKalmanCoeff[3] = {0.8, 0.8, 0.2};

void odometry_updatePosition() {
 80080d0:	b5b0      	push	{r4, r5, r7, lr}
 80080d2:	b08e      	sub	sp, #56	; 0x38
 80080d4:	af00      	add	r7, sp, #0
	float coeff = M_TWOPI * ODOMETRY_RADIUS / TICKS_PER_REV;
 80080d6:	4bac      	ldr	r3, [pc, #688]	; (8008388 <odometry_updatePosition+0x2b8>)
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
	float leftMov = getLeftEncoderCount() * coeff;
 80080da:	f7ff ffe1 	bl	80080a0 <getLeftEncoderCount>
 80080de:	4603      	mov	r3, r0
 80080e0:	ee07 3a90 	vmov	s15, r3
 80080e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80080ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float rightMov = getRightEncoderCount() * coeff;
 80080f4:	f7ff ffbe 	bl	8008074 <getRightEncoderCount>
 80080f8:	4603      	mov	r3, r0
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008102:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float dt = ODOMETRY_REFRESH;
 800810e:	4b9f      	ldr	r3, [pc, #636]	; (800838c <odometry_updatePosition+0x2bc>)
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28
	float r =  (leftMov + rightMov)/2;
 8008112:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008116:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800811a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800811e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008126:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float alpha = (leftMov - rightMov)/ENTRAXE_ODOMETRY;
 800812a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800812e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008136:	ee17 0a90 	vmov	r0, s15
 800813a:	f7f8 fa25 	bl	8000588 <__aeabi_f2d>
 800813e:	a386      	add	r3, pc, #536	; (adr r3, 8008358 <odometry_updatePosition+0x288>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	f7f8 fba2 	bl	800088c <__aeabi_ddiv>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4610      	mov	r0, r2
 800814e:	4619      	mov	r1, r3
 8008150:	f7f8 fd4a 	bl	8000be8 <__aeabi_d2f>
 8008154:	4603      	mov	r3, r0
 8008156:	623b      	str	r3, [r7, #32]
	float previousRState = YstateCurr[0];
 8008158:	4b8d      	ldr	r3, [pc, #564]	; (8008390 <odometry_updatePosition+0x2c0>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	61fb      	str	r3, [r7, #28]
	float previousXState = XstateCurr[0];
 800815e:	4b8d      	ldr	r3, [pc, #564]	; (8008394 <odometry_updatePosition+0x2c4>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	61bb      	str	r3, [r7, #24]
	Kalman(XstateCurr, XstateFin, XstateMes, dt, alphaKalmanCoeff);
	alpha = XstateFin[0] - XstateCurr[0];
	//alpha = XstateCurr[0] - previousXState;*/


	float deltaX = r * cos(robot.angle + alpha/2);
 8008164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008166:	f7f8 fa0f 	bl	8000588 <__aeabi_f2d>
 800816a:	4604      	mov	r4, r0
 800816c:	460d      	mov	r5, r1
 800816e:	4b8a      	ldr	r3, [pc, #552]	; (8008398 <odometry_updatePosition+0x2c8>)
 8008170:	ed93 7a02 	vldr	s14, [r3, #8]
 8008174:	edd7 6a08 	vldr	s13, [r7, #32]
 8008178:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800817c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008184:	ee17 0a90 	vmov	r0, s15
 8008188:	f7f8 f9fe 	bl	8000588 <__aeabi_f2d>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	ec43 2b10 	vmov	d0, r2, r3
 8008194:	f004 fd28 	bl	800cbe8 <cos>
 8008198:	ec53 2b10 	vmov	r2, r3, d0
 800819c:	4620      	mov	r0, r4
 800819e:	4629      	mov	r1, r5
 80081a0:	f7f8 fa4a 	bl	8000638 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4610      	mov	r0, r2
 80081aa:	4619      	mov	r1, r3
 80081ac:	f7f8 fd1c 	bl	8000be8 <__aeabi_d2f>
 80081b0:	4603      	mov	r3, r0
 80081b2:	617b      	str	r3, [r7, #20]
	float deltaY = r * sin(robot.angle + alpha/2);
 80081b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081b6:	f7f8 f9e7 	bl	8000588 <__aeabi_f2d>
 80081ba:	4604      	mov	r4, r0
 80081bc:	460d      	mov	r5, r1
 80081be:	4b76      	ldr	r3, [pc, #472]	; (8008398 <odometry_updatePosition+0x2c8>)
 80081c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80081c4:	edd7 6a08 	vldr	s13, [r7, #32]
 80081c8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80081cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80081d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081d4:	ee17 0a90 	vmov	r0, s15
 80081d8:	f7f8 f9d6 	bl	8000588 <__aeabi_f2d>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	ec43 2b10 	vmov	d0, r2, r3
 80081e4:	f004 fd60 	bl	800cca8 <sin>
 80081e8:	ec53 2b10 	vmov	r2, r3, d0
 80081ec:	4620      	mov	r0, r4
 80081ee:	4629      	mov	r1, r5
 80081f0:	f7f8 fa22 	bl	8000638 <__aeabi_dmul>
 80081f4:	4602      	mov	r2, r0
 80081f6:	460b      	mov	r3, r1
 80081f8:	4610      	mov	r0, r2
 80081fa:	4619      	mov	r1, r3
 80081fc:	f7f8 fcf4 	bl	8000be8 <__aeabi_d2f>
 8008200:	4603      	mov	r3, r0
 8008202:	613b      	str	r3, [r7, #16]


	robot.position.x += deltaX;
 8008204:	4b64      	ldr	r3, [pc, #400]	; (8008398 <odometry_updatePosition+0x2c8>)
 8008206:	ed93 7a00 	vldr	s14, [r3]
 800820a:	edd7 7a05 	vldr	s15, [r7, #20]
 800820e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008212:	4b61      	ldr	r3, [pc, #388]	; (8008398 <odometry_updatePosition+0x2c8>)
 8008214:	edc3 7a00 	vstr	s15, [r3]
	robot.position.y += deltaY;
 8008218:	4b5f      	ldr	r3, [pc, #380]	; (8008398 <odometry_updatePosition+0x2c8>)
 800821a:	ed93 7a01 	vldr	s14, [r3, #4]
 800821e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008226:	4b5c      	ldr	r3, [pc, #368]	; (8008398 <odometry_updatePosition+0x2c8>)
 8008228:	edc3 7a01 	vstr	s15, [r3, #4]
	//robot.angle = XstateCurr[0];
	robot.angle += alpha;
 800822c:	4b5a      	ldr	r3, [pc, #360]	; (8008398 <odometry_updatePosition+0x2c8>)
 800822e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008232:	edd7 7a08 	vldr	s15, [r7, #32]
 8008236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800823a:	4b57      	ldr	r3, [pc, #348]	; (8008398 <odometry_updatePosition+0x2c8>)
 800823c:	edc3 7a02 	vstr	s15, [r3, #8]
	if((deltaX != 0) && (deltaY != 0))
	{
		robot.angle += atanf(deltaX/deltaY);
	}*/

	float currentSpeed = vector2_norm(vector2_new(deltaX, deltaY)) / dt;
 8008240:	edd7 0a04 	vldr	s1, [r7, #16]
 8008244:	ed97 0a05 	vldr	s0, [r7, #20]
 8008248:	f001 fc28 	bl	8009a9c <vector2_new>
 800824c:	eeb0 7a40 	vmov.f32	s14, s0
 8008250:	eef0 7a60 	vmov.f32	s15, s1
 8008254:	ed87 7a01 	vstr	s14, [r7, #4]
 8008258:	edc7 7a02 	vstr	s15, [r7, #8]
 800825c:	ed97 7a01 	vldr	s14, [r7, #4]
 8008260:	edd7 7a02 	vldr	s15, [r7, #8]
 8008264:	eeb0 0a47 	vmov.f32	s0, s14
 8008268:	eef0 0a67 	vmov.f32	s1, s15
 800826c:	f001 fc38 	bl	8009ae0 <vector2_norm>
 8008270:	eef0 6a40 	vmov.f32	s13, s0
 8008274:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800827c:	edc7 7a03 	vstr	s15, [r7, #12]
	robot.measuredSpeed = robot.measuredSpeed*0.8 + currentSpeed*0.2;
 8008280:	4b45      	ldr	r3, [pc, #276]	; (8008398 <odometry_updatePosition+0x2c8>)
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	4618      	mov	r0, r3
 8008286:	f7f8 f97f 	bl	8000588 <__aeabi_f2d>
 800828a:	a335      	add	r3, pc, #212	; (adr r3, 8008360 <odometry_updatePosition+0x290>)
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	f7f8 f9d2 	bl	8000638 <__aeabi_dmul>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4614      	mov	r4, r2
 800829a:	461d      	mov	r5, r3
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7f8 f973 	bl	8000588 <__aeabi_f2d>
 80082a2:	a331      	add	r3, pc, #196	; (adr r3, 8008368 <odometry_updatePosition+0x298>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f9c6 	bl	8000638 <__aeabi_dmul>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4620      	mov	r0, r4
 80082b2:	4629      	mov	r1, r5
 80082b4:	f7f8 f80a 	bl	80002cc <__adddf3>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4610      	mov	r0, r2
 80082be:	4619      	mov	r1, r3
 80082c0:	f7f8 fc92 	bl	8000be8 <__aeabi_d2f>
 80082c4:	4603      	mov	r3, r0
 80082c6:	4a34      	ldr	r2, [pc, #208]	; (8008398 <odometry_updatePosition+0x2c8>)
 80082c8:	61d3      	str	r3, [r2, #28]
	//robot.measuredSpeed = vector2_norm(vector2_new(deltaX, deltaY)) / dt;

	if (robot.angle > M_PI)
 80082ca:	4b33      	ldr	r3, [pc, #204]	; (8008398 <odometry_updatePosition+0x2c8>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f8 f95a 	bl	8000588 <__aeabi_f2d>
 80082d4:	a326      	add	r3, pc, #152	; (adr r3, 8008370 <odometry_updatePosition+0x2a0>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f7f8 fc3d 	bl	8000b58 <__aeabi_dcmpgt>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d013      	beq.n	800830c <odometry_updatePosition+0x23c>
		robot.angle = robot.angle - M_TWOPI;
 80082e4:	4b2c      	ldr	r3, [pc, #176]	; (8008398 <odometry_updatePosition+0x2c8>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7f8 f94d 	bl	8000588 <__aeabi_f2d>
 80082ee:	a322      	add	r3, pc, #136	; (adr r3, 8008378 <odometry_updatePosition+0x2a8>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f7 ffe8 	bl	80002c8 <__aeabi_dsub>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4610      	mov	r0, r2
 80082fe:	4619      	mov	r1, r3
 8008300:	f7f8 fc72 	bl	8000be8 <__aeabi_d2f>
 8008304:	4603      	mov	r3, r0
 8008306:	4a24      	ldr	r2, [pc, #144]	; (8008398 <odometry_updatePosition+0x2c8>)
 8008308:	6093      	str	r3, [r2, #8]
		robot.angle = robot.angle + M_TWOPI;


	DEBUG_ODOMETRY("x: %.1fmm, y: %.1fmm, speed: %.1fmm, angle: %.1fdeg\r\n", robot.position.x, robot.position.y, robot.measuredSpeed, robot.angle/2/M_PI*360);
	//DEBUG_ODOMETRY("x: %.1fmm, y: %.1fmm, angle: %.1fdeg, vitesseY: %.2fmm, accelX: %.2fmm, accelY: %.2fmm\r\n", robot.position.x, robot.position.y, robot.angle/2/M_PI*360, XstateCurr[1], YstateCurr[1], XstateCurr[2], YstateCurr[2]);
}
 800830a:	e020      	b.n	800834e <odometry_updatePosition+0x27e>
	else if (robot.angle < -M_PI)
 800830c:	4b22      	ldr	r3, [pc, #136]	; (8008398 <odometry_updatePosition+0x2c8>)
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	4618      	mov	r0, r3
 8008312:	f7f8 f939 	bl	8000588 <__aeabi_f2d>
 8008316:	a31a      	add	r3, pc, #104	; (adr r3, 8008380 <odometry_updatePosition+0x2b0>)
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f7f8 fbfe 	bl	8000b1c <__aeabi_dcmplt>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d100      	bne.n	8008328 <odometry_updatePosition+0x258>
}
 8008326:	e012      	b.n	800834e <odometry_updatePosition+0x27e>
		robot.angle = robot.angle + M_TWOPI;
 8008328:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <odometry_updatePosition+0x2c8>)
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	4618      	mov	r0, r3
 800832e:	f7f8 f92b 	bl	8000588 <__aeabi_f2d>
 8008332:	a311      	add	r3, pc, #68	; (adr r3, 8008378 <odometry_updatePosition+0x2a8>)
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	f7f7 ffc8 	bl	80002cc <__adddf3>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4610      	mov	r0, r2
 8008342:	4619      	mov	r1, r3
 8008344:	f7f8 fc50 	bl	8000be8 <__aeabi_d2f>
 8008348:	4603      	mov	r3, r0
 800834a:	4a13      	ldr	r2, [pc, #76]	; (8008398 <odometry_updatePosition+0x2c8>)
 800834c:	6093      	str	r3, [r2, #8]
}
 800834e:	bf00      	nop
 8008350:	3738      	adds	r7, #56	; 0x38
 8008352:	46bd      	mov	sp, r7
 8008354:	bdb0      	pop	{r4, r5, r7, pc}
 8008356:	bf00      	nop
 8008358:	66666666 	.word	0x66666666
 800835c:	40713e66 	.word	0x40713e66
 8008360:	9999999a 	.word	0x9999999a
 8008364:	3fe99999 	.word	0x3fe99999
 8008368:	9999999a 	.word	0x9999999a
 800836c:	3fc99999 	.word	0x3fc99999
 8008370:	54442d18 	.word	0x54442d18
 8008374:	400921fb 	.word	0x400921fb
 8008378:	54442d18 	.word	0x54442d18
 800837c:	401921fb 	.word	0x401921fb
 8008380:	54442d18 	.word	0x54442d18
 8008384:	c00921fb 	.word	0xc00921fb
 8008388:	3ca35ce2 	.word	0x3ca35ce2
 800838c:	3c23d70a 	.word	0x3c23d70a
 8008390:	20000d14 	.word	0x20000d14
 8008394:	20000d08 	.word	0x20000d08
 8008398:	20000d38 	.word	0x20000d38

0800839c <odometry_setPosition>:


void odometry_setPosition(float x, float y) {
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80083a6:	edc7 0a00 	vstr	s1, [r7]
	robot.position.x = x;
 80083aa:	4a06      	ldr	r2, [pc, #24]	; (80083c4 <odometry_setPosition+0x28>)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6013      	str	r3, [r2, #0]
	robot.position.y = y;
 80083b0:	4a04      	ldr	r2, [pc, #16]	; (80083c4 <odometry_setPosition+0x28>)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6053      	str	r3, [r2, #4]
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20000d38 	.word	0x20000d38

080083c8 <odometry_setAngle>:


void odometry_setAngle(float angle) {
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	ed87 0a01 	vstr	s0, [r7, #4]
	robot.angle = angle;
 80083d2:	4a04      	ldr	r2, [pc, #16]	; (80083e4 <odometry_setAngle+0x1c>)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6093      	str	r3, [r2, #8]
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	20000d38 	.word	0x20000d38

080083e8 <odometry_startKalman>:

void odometry_startKalman()
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
	XstateInit[0] = robot.angle;
 80083ec:	4b08      	ldr	r3, [pc, #32]	; (8008410 <odometry_startKalman+0x28>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	4a08      	ldr	r2, [pc, #32]	; (8008414 <odometry_startKalman+0x2c>)
 80083f2:	6013      	str	r3, [r2, #0]

	KalmanInit(XstateInit,XstateFin,ODOMETRY_REFRESH);
 80083f4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008418 <odometry_startKalman+0x30>
 80083f8:	4908      	ldr	r1, [pc, #32]	; (800841c <odometry_startKalman+0x34>)
 80083fa:	4806      	ldr	r0, [pc, #24]	; (8008414 <odometry_startKalman+0x2c>)
 80083fc:	f7ff fae8 	bl	80079d0 <KalmanInit>
	KalmanInit(YstateInit,YstateFin,ODOMETRY_REFRESH);
 8008400:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8008418 <odometry_startKalman+0x30>
 8008404:	4906      	ldr	r1, [pc, #24]	; (8008420 <odometry_startKalman+0x38>)
 8008406:	4807      	ldr	r0, [pc, #28]	; (8008424 <odometry_startKalman+0x3c>)
 8008408:	f7ff fae2 	bl	80079d0 <KalmanInit>
}
 800840c:	bf00      	nop
 800840e:	bd80      	pop	{r7, pc}
 8008410:	20000d38 	.word	0x20000d38
 8008414:	20000cf0 	.word	0x20000cf0
 8008418:	3c23d70a 	.word	0x3c23d70a
 800841c:	20000d20 	.word	0x20000d20
 8008420:	20000d2c 	.word	0x20000d2c
 8008424:	20000cfc 	.word	0x20000cfc

08008428 <propulsion_initialize>:
float error2[3] = {0.0,0.0,0.0};
float t0 = 0.0;
float slowDownFactor = 0;
float speed = 0;

void propulsion_initialize() {
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af04      	add	r7, sp, #16
    robot.leftMotor = (Stepper*) malloc(sizeof(Stepper));
 800842e:	2018      	movs	r0, #24
 8008430:	f001 fc6a 	bl	8009d08 <malloc>
 8008434:	4603      	mov	r3, r0
 8008436:	461a      	mov	r2, r3
 8008438:	4b13      	ldr	r3, [pc, #76]	; (8008488 <propulsion_initialize+0x60>)
 800843a:	60da      	str	r2, [r3, #12]
    robot.rightMotor = (Stepper*) malloc(sizeof(Stepper));
 800843c:	2018      	movs	r0, #24
 800843e:	f001 fc63 	bl	8009d08 <malloc>
 8008442:	4603      	mov	r3, r0
 8008444:	461a      	mov	r2, r3
 8008446:	4b10      	ldr	r3, [pc, #64]	; (8008488 <propulsion_initialize+0x60>)
 8008448:	615a      	str	r2, [r3, #20]

    drv8825_initialize(
 800844a:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <propulsion_initialize+0x60>)
 800844c:	68d8      	ldr	r0, [r3, #12]
 800844e:	2300      	movs	r3, #0
 8008450:	9302      	str	r3, [sp, #8]
 8008452:	4b0e      	ldr	r3, [pc, #56]	; (800848c <propulsion_initialize+0x64>)
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	4b0e      	ldr	r3, [pc, #56]	; (8008490 <propulsion_initialize+0x68>)
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	2304      	movs	r3, #4
 800845c:	4a0c      	ldr	r2, [pc, #48]	; (8008490 <propulsion_initialize+0x68>)
 800845e:	2101      	movs	r1, #1
 8008460:	f7ff fb26 	bl	8007ab0 <drv8825_initialize>
        robot.leftMotor,
        L_MOTOR_EN_Pin, L_MOTOR_EN_GPIO_Port,
        L_MOTOR_DIR_Pin, L_MOTOR_DIR_GPIO_Port,
        &L_MOTOR_TIMER, TIM_CHANNEL_1
    );
    drv8825_initialize(
 8008464:	4b08      	ldr	r3, [pc, #32]	; (8008488 <propulsion_initialize+0x60>)
 8008466:	6958      	ldr	r0, [r3, #20]
 8008468:	230c      	movs	r3, #12
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <propulsion_initialize+0x6c>)
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <propulsion_initialize+0x68>)
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008478:	4a05      	ldr	r2, [pc, #20]	; (8008490 <propulsion_initialize+0x68>)
 800847a:	2102      	movs	r1, #2
 800847c:	f7ff fb18 	bl	8007ab0 <drv8825_initialize>
        robot.rightMotor,
        R_MOTOR_EN_Pin, R_MOTOR_EN_GPIO_Port,
        R_MOTOR_DIR_Pin, R_MOTOR_DIR_GPIO_Port,
        &R_MOTOR_TIMER, TIM_CHANNEL_4
    );
}
 8008480:	bf00      	nop
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000d38 	.word	0x20000d38
 800848c:	20000448 	.word	0x20000448
 8008490:	40020800 	.word	0x40020800
 8008494:	20000400 	.word	0x20000400

08008498 <propulsion_enableMotors>:


void propulsion_enableMotors() {
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
    drv8825_enable(robot.leftMotor);
 800849c:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <propulsion_enableMotors+0x1c>)
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff fb3a 	bl	8007b1a <drv8825_enable>
    drv8825_enable(robot.rightMotor);
 80084a6:	4b03      	ldr	r3, [pc, #12]	; (80084b4 <propulsion_enableMotors+0x1c>)
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fb35 	bl	8007b1a <drv8825_enable>
}
 80084b0:	bf00      	nop
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000d38 	.word	0x20000d38

080084b8 <propulsion_disableMotors>:


void propulsion_disableMotors() {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
    drv8825_disable(robot.leftMotor);
 80084bc:	4b05      	ldr	r3, [pc, #20]	; (80084d4 <propulsion_disableMotors+0x1c>)
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7ff fb3a 	bl	8007b3a <drv8825_disable>
    drv8825_disable(robot.rightMotor);
 80084c6:	4b03      	ldr	r3, [pc, #12]	; (80084d4 <propulsion_disableMotors+0x1c>)
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff fb35 	bl	8007b3a <drv8825_disable>
}
 80084d0:	bf00      	nop
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20000d38 	.word	0x20000d38

080084d8 <propulsion_setSpeeds>:


void propulsion_setSpeeds(float left, float right, float k) {
 80084d8:	b590      	push	{r4, r7, lr}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	ed87 0a03 	vstr	s0, [r7, #12]
 80084e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80084e6:	ed87 1a01 	vstr	s2, [r7, #4]

	float max_speed = MAX_MOTOR_SPEED*(1-atan(1000*fabs(k))*2/M_PI);
 80084ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80084ee:	eef0 7ae7 	vabs.f32	s15, s15
 80084f2:	ee17 0a90 	vmov	r0, s15
 80084f6:	f7f8 f847 	bl	8000588 <__aeabi_f2d>
 80084fa:	f04f 0200 	mov.w	r2, #0
 80084fe:	4b78      	ldr	r3, [pc, #480]	; (80086e0 <propulsion_setSpeeds+0x208>)
 8008500:	f7f8 f89a 	bl	8000638 <__aeabi_dmul>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	ec43 2b17 	vmov	d7, r2, r3
 800850c:	eeb0 0a47 	vmov.f32	s0, s14
 8008510:	eef0 0a67 	vmov.f32	s1, s15
 8008514:	f004 f9c8 	bl	800c8a8 <atan>
 8008518:	ec51 0b10 	vmov	r0, r1, d0
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	f7f7 fed4 	bl	80002cc <__adddf3>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4610      	mov	r0, r2
 800852a:	4619      	mov	r1, r3
 800852c:	a368      	add	r3, pc, #416	; (adr r3, 80086d0 <propulsion_setSpeeds+0x1f8>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f8 f9ab 	bl	800088c <__aeabi_ddiv>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	f04f 0000 	mov.w	r0, #0
 800853e:	4969      	ldr	r1, [pc, #420]	; (80086e4 <propulsion_setSpeeds+0x20c>)
 8008540:	f7f7 fec2 	bl	80002c8 <__aeabi_dsub>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4610      	mov	r0, r2
 800854a:	4619      	mov	r1, r3
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	4b63      	ldr	r3, [pc, #396]	; (80086e0 <propulsion_setSpeeds+0x208>)
 8008552:	f7f8 f871 	bl	8000638 <__aeabi_dmul>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4610      	mov	r0, r2
 800855c:	4619      	mov	r1, r3
 800855e:	f7f8 fb43 	bl	8000be8 <__aeabi_d2f>
 8008562:	4603      	mov	r3, r0
 8008564:	617b      	str	r3, [r7, #20]
	if ((max_speed < 400) && (MAX_MOTOR_SPEED >= 400))
 8008566:	edd7 7a05 	vldr	s15, [r7, #20]
 800856a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80086e8 <propulsion_setSpeeds+0x210>
 800856e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	d501      	bpl.n	800857c <propulsion_setSpeeds+0xa4>
		max_speed = 400;
 8008578:	4b5c      	ldr	r3, [pc, #368]	; (80086ec <propulsion_setSpeeds+0x214>)
 800857a:	617b      	str	r3, [r7, #20]
	else if ((max_speed < 400) && (MAX_MOTOR_SPEED < 400))
		max_speed = MAX_MOTOR_SPEED;

    float greatestAbsoluteSpeed = fabs(fabs(left)>fabs(right)?left:right);
 800857c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008580:	eeb0 7ae7 	vabs.f32	s14, s15
 8008584:	edd7 7a02 	vldr	s15, [r7, #8]
 8008588:	eef0 7ae7 	vabs.f32	s15, s15
 800858c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008594:	dd04      	ble.n	80085a0 <propulsion_setSpeeds+0xc8>
 8008596:	edd7 7a03 	vldr	s15, [r7, #12]
 800859a:	eef0 7ae7 	vabs.f32	s15, s15
 800859e:	e003      	b.n	80085a8 <propulsion_setSpeeds+0xd0>
 80085a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80085a4:	eef0 7ae7 	vabs.f32	s15, s15
 80085a8:	edc7 7a04 	vstr	s15, [r7, #16]

    if (greatestAbsoluteSpeed > max_speed) {
 80085ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80085b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80085b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085bc:	dd17      	ble.n	80085ee <propulsion_setSpeeds+0x116>
        left = left/greatestAbsoluteSpeed*max_speed;
 80085be:	edd7 6a03 	vldr	s13, [r7, #12]
 80085c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80085c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80085ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d2:	edc7 7a03 	vstr	s15, [r7, #12]
        right = right/greatestAbsoluteSpeed*max_speed;
 80085d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80085da:	ed97 7a04 	vldr	s14, [r7, #16]
 80085de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80085e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ea:	edc7 7a02 	vstr	s15, [r7, #8]
    }

    robot.leftSpeed = left;
 80085ee:	4a40      	ldr	r2, [pc, #256]	; (80086f0 <propulsion_setSpeeds+0x218>)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6113      	str	r3, [r2, #16]
    drv8825_setDirection(robot.leftMotor, (left < 0)?NEGATIVE:POSITIVE);
 80085f4:	4b3e      	ldr	r3, [pc, #248]	; (80086f0 <propulsion_setSpeeds+0x218>)
 80085f6:	68da      	ldr	r2, [r3, #12]
 80085f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80085fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008604:	bf4c      	ite	mi
 8008606:	2301      	movmi	r3, #1
 8008608:	2300      	movpl	r3, #0
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f083 0301 	eor.w	r3, r3, #1
 8008610:	b2db      	uxtb	r3, r3
 8008612:	b2db      	uxtb	r3, r3
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f7ff fa6d 	bl	8007af6 <drv8825_setDirection>
    drv8825_setRotationSpeed(robot.leftMotor, 60 * fabsf(left) / (2*M_PI*WHEEL_RADIUS));
 800861c:	4b34      	ldr	r3, [pc, #208]	; (80086f0 <propulsion_setSpeeds+0x218>)
 800861e:	68dc      	ldr	r4, [r3, #12]
 8008620:	edd7 7a03 	vldr	s15, [r7, #12]
 8008624:	eef0 7ae7 	vabs.f32	s15, s15
 8008628:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80086f4 <propulsion_setSpeeds+0x21c>
 800862c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008630:	ee17 0a90 	vmov	r0, s15
 8008634:	f7f7 ffa8 	bl	8000588 <__aeabi_f2d>
 8008638:	a327      	add	r3, pc, #156	; (adr r3, 80086d8 <propulsion_setSpeeds+0x200>)
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	f7f8 f925 	bl	800088c <__aeabi_ddiv>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4610      	mov	r0, r2
 8008648:	4619      	mov	r1, r3
 800864a:	f7f8 facd 	bl	8000be8 <__aeabi_d2f>
 800864e:	4603      	mov	r3, r0
 8008650:	ee00 3a10 	vmov	s0, r3
 8008654:	4620      	mov	r0, r4
 8008656:	f7ff fb21 	bl	8007c9c <drv8825_setRotationSpeed>

    robot.rightSpeed = right;
 800865a:	4a25      	ldr	r2, [pc, #148]	; (80086f0 <propulsion_setSpeeds+0x218>)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	6193      	str	r3, [r2, #24]
    drv8825_setDirection(robot.rightMotor, (right < 0)?NEGATIVE:POSITIVE);
 8008660:	4b23      	ldr	r3, [pc, #140]	; (80086f0 <propulsion_setSpeeds+0x218>)
 8008662:	695a      	ldr	r2, [r3, #20]
 8008664:	edd7 7a02 	vldr	s15, [r7, #8]
 8008668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800866c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008670:	bf4c      	ite	mi
 8008672:	2301      	movmi	r3, #1
 8008674:	2300      	movpl	r3, #0
 8008676:	b2db      	uxtb	r3, r3
 8008678:	f083 0301 	eor.w	r3, r3, #1
 800867c:	b2db      	uxtb	r3, r3
 800867e:	b2db      	uxtb	r3, r3
 8008680:	4619      	mov	r1, r3
 8008682:	4610      	mov	r0, r2
 8008684:	f7ff fa37 	bl	8007af6 <drv8825_setDirection>
    drv8825_setRotationSpeed(robot.rightMotor, 60 * fabsf(right) / (2*M_PI*WHEEL_RADIUS));
 8008688:	4b19      	ldr	r3, [pc, #100]	; (80086f0 <propulsion_setSpeeds+0x218>)
 800868a:	695c      	ldr	r4, [r3, #20]
 800868c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008690:	eef0 7ae7 	vabs.f32	s15, s15
 8008694:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80086f4 <propulsion_setSpeeds+0x21c>
 8008698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800869c:	ee17 0a90 	vmov	r0, s15
 80086a0:	f7f7 ff72 	bl	8000588 <__aeabi_f2d>
 80086a4:	a30c      	add	r3, pc, #48	; (adr r3, 80086d8 <propulsion_setSpeeds+0x200>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f7f8 f8ef 	bl	800088c <__aeabi_ddiv>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4610      	mov	r0, r2
 80086b4:	4619      	mov	r1, r3
 80086b6:	f7f8 fa97 	bl	8000be8 <__aeabi_d2f>
 80086ba:	4603      	mov	r3, r0
 80086bc:	ee00 3a10 	vmov	s0, r3
 80086c0:	4620      	mov	r0, r4
 80086c2:	f7ff faeb 	bl	8007c9c <drv8825_setRotationSpeed>
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd90      	pop	{r4, r7, pc}
 80086ce:	bf00      	nop
 80086d0:	54442d18 	.word	0x54442d18
 80086d4:	400921fb 	.word	0x400921fb
 80086d8:	2955385e 	.word	0x2955385e
 80086dc:	406f6a7a 	.word	0x406f6a7a
 80086e0:	408f4000 	.word	0x408f4000
 80086e4:	3ff00000 	.word	0x3ff00000
 80086e8:	43c80000 	.word	0x43c80000
 80086ec:	43c80000 	.word	0x43c80000
 80086f0:	20000d38 	.word	0x20000d38
 80086f4:	42700000 	.word	0x42700000

080086f8 <getAngleError>:
    else if (robot.angle < -M_PI)
        robot.angle = robot.angle + M_TWOPI;
}


float getAngleError(Bezier* b, float t, Vector2 p, Direction dir) {
 80086f8:	b5b0      	push	{r4, r5, r7, lr}
 80086fa:	b08e      	sub	sp, #56	; 0x38
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6178      	str	r0, [r7, #20]
 8008700:	ed87 0a04 	vstr	s0, [r7, #16]
 8008704:	eeb0 7a60 	vmov.f32	s14, s1
 8008708:	eef0 7a41 	vmov.f32	s15, s2
 800870c:	460b      	mov	r3, r1
 800870e:	ed87 7a02 	vstr	s14, [r7, #8]
 8008712:	edc7 7a03 	vstr	s15, [r7, #12]
 8008716:	71fb      	strb	r3, [r7, #7]
    Vector2 tangent = bezier_deriv1(b, t);
 8008718:	ed97 0a04 	vldr	s0, [r7, #16]
 800871c:	6978      	ldr	r0, [r7, #20]
 800871e:	f7fe fd44 	bl	80071aa <bezier_deriv1>
 8008722:	eeb0 7a40 	vmov.f32	s14, s0
 8008726:	eef0 7a60 	vmov.f32	s15, s1
 800872a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800872e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    Vector2 displacement = vector2_diff(p, robot.position);
 8008732:	4b69      	ldr	r3, [pc, #420]	; (80088d8 <getAngleError+0x1e0>)
 8008734:	ed93 6a00 	vldr	s12, [r3]
 8008738:	edd3 6a01 	vldr	s13, [r3, #4]
 800873c:	ed97 7a02 	vldr	s14, [r7, #8]
 8008740:	edd7 7a03 	vldr	s15, [r7, #12]
 8008744:	eeb0 1a46 	vmov.f32	s2, s12
 8008748:	eef0 1a66 	vmov.f32	s3, s13
 800874c:	eeb0 0a47 	vmov.f32	s0, s14
 8008750:	eef0 0a67 	vmov.f32	s1, s15
 8008754:	f001 fa58 	bl	8009c08 <vector2_diff>
 8008758:	eeb0 7a40 	vmov.f32	s14, s0
 800875c:	eef0 7a60 	vmov.f32	s15, s1
 8008760:	ed87 7a07 	vstr	s14, [r7, #28]
 8008764:	edc7 7a08 	vstr	s15, [r7, #32]

    float sign = vector2_cross(displacement, tangent); // (vaut -1, 0 ou 1)
 8008768:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800876c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008770:	ed97 7a07 	vldr	s14, [r7, #28]
 8008774:	edd7 7a08 	vldr	s15, [r7, #32]
 8008778:	eeb0 1a46 	vmov.f32	s2, s12
 800877c:	eef0 1a66 	vmov.f32	s3, s13
 8008780:	eeb0 0a47 	vmov.f32	s0, s14
 8008784:	eef0 0a67 	vmov.f32	s1, s15
 8008788:	f001 fa78 	bl	8009c7c <vector2_cross>
 800878c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    sign /= (sign != 0)?fabs(sign):1;
 8008790:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008792:	f7f7 fef9 	bl	8000588 <__aeabi_f2d>
 8008796:	4604      	mov	r4, r0
 8008798:	460d      	mov	r5, r1
 800879a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800879e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a6:	d00a      	beq.n	80087be <getAngleError+0xc6>
 80087a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80087ac:	eef0 7ae7 	vabs.f32	s15, s15
 80087b0:	ee17 0a90 	vmov	r0, s15
 80087b4:	f7f7 fee8 	bl	8000588 <__aeabi_f2d>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	e002      	b.n	80087c4 <getAngleError+0xcc>
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	4b46      	ldr	r3, [pc, #280]	; (80088dc <getAngleError+0x1e4>)
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7f8 f860 	bl	800088c <__aeabi_ddiv>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4610      	mov	r0, r2
 80087d2:	4619      	mov	r1, r3
 80087d4:	f7f8 fa08 	bl	8000be8 <__aeabi_d2f>
 80087d8:	4603      	mov	r3, r0
 80087da:	637b      	str	r3, [r7, #52]	; 0x34
    float signedDistance = sign * vector2_norm(displacement);
 80087dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80087e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80087e4:	eeb0 0a47 	vmov.f32	s0, s14
 80087e8:	eef0 0a67 	vmov.f32	s1, s15
 80087ec:	f001 f978 	bl	8009ae0 <vector2_norm>
 80087f0:	eeb0 7a40 	vmov.f32	s14, s0
 80087f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80087f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    DEBUG_PROPULSION("dist: %.1fmm, ", signedDistance);
 8008800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008802:	f7f7 fec1 	bl	8000588 <__aeabi_f2d>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4835      	ldr	r0, [pc, #212]	; (80088e0 <getAngleError+0x1e8>)
 800880c:	f002 f846 	bl	800a89c <iprintf>

    float angleError = (vector2_angle(tangent) - atan(signedDistance / 200.0))
 8008810:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008814:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008818:	eeb0 0a47 	vmov.f32	s0, s14
 800881c:	eef0 0a67 	vmov.f32	s1, s15
 8008820:	f001 f98f 	bl	8009b42 <vector2_angle>
 8008824:	ee10 3a10 	vmov	r3, s0
 8008828:	4618      	mov	r0, r3
 800882a:	f7f7 fead 	bl	8000588 <__aeabi_f2d>
 800882e:	4604      	mov	r4, r0
 8008830:	460d      	mov	r5, r1
 8008832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008834:	f7f7 fea8 	bl	8000588 <__aeabi_f2d>
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	4b29      	ldr	r3, [pc, #164]	; (80088e4 <getAngleError+0x1ec>)
 800883e:	f7f8 f825 	bl	800088c <__aeabi_ddiv>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	ec43 2b17 	vmov	d7, r2, r3
 800884a:	eeb0 0a47 	vmov.f32	s0, s14
 800884e:	eef0 0a67 	vmov.f32	s1, s15
 8008852:	f004 f829 	bl	800c8a8 <atan>
 8008856:	ec53 2b10 	vmov	r2, r3, d0
 800885a:	4620      	mov	r0, r4
 800885c:	4629      	mov	r1, r5
 800885e:	f7f7 fd33 	bl	80002c8 <__aeabi_dsub>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4614      	mov	r4, r2
 8008868:	461d      	mov	r5, r3
            - (robot.angle + (dir==BACKWARD?M_PI:0));
 800886a:	4b1b      	ldr	r3, [pc, #108]	; (80088d8 <getAngleError+0x1e0>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	4618      	mov	r0, r3
 8008870:	f7f7 fe8a 	bl	8000588 <__aeabi_f2d>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800887c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8008880:	d103      	bne.n	800888a <getAngleError+0x192>
 8008882:	a113      	add	r1, pc, #76	; (adr r1, 80088d0 <getAngleError+0x1d8>)
 8008884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008888:	e003      	b.n	8008892 <getAngleError+0x19a>
 800888a:	f04f 0000 	mov.w	r0, #0
 800888e:	f04f 0100 	mov.w	r1, #0
 8008892:	f7f7 fd1b 	bl	80002cc <__adddf3>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fd13 	bl	80002c8 <__aeabi_dsub>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
    float angleError = (vector2_angle(tangent) - atan(signedDistance / 200.0))
 80088a6:	4610      	mov	r0, r2
 80088a8:	4619      	mov	r1, r3
 80088aa:	f7f8 f99d 	bl	8000be8 <__aeabi_d2f>
 80088ae:	4603      	mov	r3, r0
 80088b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    angleError = standardAngle(angleError); // (entre -pi et pi)
 80088b2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80088b6:	f000 fc2b 	bl	8009110 <standardAngle>
 80088ba:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    return angleError;
 80088be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c0:	ee07 3a90 	vmov	s15, r3
}
 80088c4:	eeb0 0a67 	vmov.f32	s0, s15
 80088c8:	3738      	adds	r7, #56	; 0x38
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bdb0      	pop	{r4, r5, r7, pc}
 80088ce:	bf00      	nop
 80088d0:	54442d18 	.word	0x54442d18
 80088d4:	400921fb 	.word	0x400921fb
 80088d8:	20000d38 	.word	0x20000d38
 80088dc:	3ff00000 	.word	0x3ff00000
 80088e0:	0800ef80 	.word	0x0800ef80
 80088e4:	40690000 	.word	0x40690000

080088e8 <getRobotSpeed>:


float getRobotSpeed(Bezier* b,float t, float angleError, Direction dir, float initialSpeed, float finalSpeed) {
 80088e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80088ec:	ed2d 8b02 	vpush	{d8}
 80088f0:	b086      	sub	sp, #24
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6178      	str	r0, [r7, #20]
 80088f6:	ed87 0a04 	vstr	s0, [r7, #16]
 80088fa:	edc7 0a03 	vstr	s1, [r7, #12]
 80088fe:	460b      	mov	r3, r1
 8008900:	ed87 1a01 	vstr	s2, [r7, #4]
 8008904:	edc7 1a00 	vstr	s3, [r7]
 8008908:	72fb      	strb	r3, [r7, #11]
	slowDownFactor = 1 - fabs(Pcorr(10, error[0]))/M_PI;
 800890a:	4bbd      	ldr	r3, [pc, #756]	; (8008c00 <getRobotSpeed+0x318>)
 800890c:	edd3 7a00 	vldr	s15, [r3]
 8008910:	eef0 0a67 	vmov.f32	s1, s15
 8008914:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8008918:	f7fe ff20 	bl	800775c <Pcorr>
 800891c:	eef0 7a40 	vmov.f32	s15, s0
 8008920:	eef0 7ae7 	vabs.f32	s15, s15
 8008924:	ee17 0a90 	vmov	r0, s15
 8008928:	f7f7 fe2e 	bl	8000588 <__aeabi_f2d>
 800892c:	a3ae      	add	r3, pc, #696	; (adr r3, 8008be8 <getRobotSpeed+0x300>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f7 ffab 	bl	800088c <__aeabi_ddiv>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	f04f 0000 	mov.w	r0, #0
 800893e:	49b1      	ldr	r1, [pc, #708]	; (8008c04 <getRobotSpeed+0x31c>)
 8008940:	f7f7 fcc2 	bl	80002c8 <__aeabi_dsub>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4610      	mov	r0, r2
 800894a:	4619      	mov	r1, r3
 800894c:	f7f8 f94c 	bl	8000be8 <__aeabi_d2f>
 8008950:	4603      	mov	r3, r0
 8008952:	4aad      	ldr	r2, [pc, #692]	; (8008c08 <getRobotSpeed+0x320>)
 8008954:	6013      	str	r3, [r2, #0]
    slowDownFactor = 1 - fabs(Icorr(5,error[0], &angleErrorIntegral2,0.5)+Pcorr(4,error[0])+Dcorr(error,0.4*fabs(speed/1000),t-t0)-0.1*(1-slowDownFactor))/M_PI;
 8008956:	4baa      	ldr	r3, [pc, #680]	; (8008c00 <getRobotSpeed+0x318>)
 8008958:	edd3 7a00 	vldr	s15, [r3]
 800895c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8008960:	48aa      	ldr	r0, [pc, #680]	; (8008c0c <getRobotSpeed+0x324>)
 8008962:	eef0 0a67 	vmov.f32	s1, s15
 8008966:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800896a:	f7fe ff0b 	bl	8007784 <Icorr>
 800896e:	eeb0 8a40 	vmov.f32	s16, s0
 8008972:	4ba3      	ldr	r3, [pc, #652]	; (8008c00 <getRobotSpeed+0x318>)
 8008974:	edd3 7a00 	vldr	s15, [r3]
 8008978:	eef0 0a67 	vmov.f32	s1, s15
 800897c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8008980:	f7fe feec 	bl	800775c <Pcorr>
 8008984:	eef0 7a40 	vmov.f32	s15, s0
 8008988:	ee38 8a27 	vadd.f32	s16, s16, s15
 800898c:	4ba0      	ldr	r3, [pc, #640]	; (8008c10 <getRobotSpeed+0x328>)
 800898e:	ed93 7a00 	vldr	s14, [r3]
 8008992:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8008c14 <getRobotSpeed+0x32c>
 8008996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800899a:	eef0 7ae7 	vabs.f32	s15, s15
 800899e:	ee17 0a90 	vmov	r0, s15
 80089a2:	f7f7 fdf1 	bl	8000588 <__aeabi_f2d>
 80089a6:	a392      	add	r3, pc, #584	; (adr r3, 8008bf0 <getRobotSpeed+0x308>)
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f7f7 fe44 	bl	8000638 <__aeabi_dmul>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4610      	mov	r0, r2
 80089b6:	4619      	mov	r1, r3
 80089b8:	f7f8 f916 	bl	8000be8 <__aeabi_d2f>
 80089bc:	4602      	mov	r2, r0
 80089be:	4b96      	ldr	r3, [pc, #600]	; (8008c18 <getRobotSpeed+0x330>)
 80089c0:	edd3 7a00 	vldr	s15, [r3]
 80089c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80089c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089cc:	eef0 0a67 	vmov.f32	s1, s15
 80089d0:	ee00 2a10 	vmov	s0, r2
 80089d4:	488a      	ldr	r0, [pc, #552]	; (8008c00 <getRobotSpeed+0x318>)
 80089d6:	f7fe ff4f 	bl	8007878 <Dcorr>
 80089da:	eef0 7a40 	vmov.f32	s15, s0
 80089de:	ee78 7a27 	vadd.f32	s15, s16, s15
 80089e2:	ee17 0a90 	vmov	r0, s15
 80089e6:	f7f7 fdcf 	bl	8000588 <__aeabi_f2d>
 80089ea:	4680      	mov	r8, r0
 80089ec:	4689      	mov	r9, r1
 80089ee:	4b86      	ldr	r3, [pc, #536]	; (8008c08 <getRobotSpeed+0x320>)
 80089f0:	edd3 7a00 	vldr	s15, [r3]
 80089f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089fc:	ee17 0a90 	vmov	r0, s15
 8008a00:	f7f7 fdc2 	bl	8000588 <__aeabi_f2d>
 8008a04:	a37c      	add	r3, pc, #496	; (adr r3, 8008bf8 <getRobotSpeed+0x310>)
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	f7f7 fe15 	bl	8000638 <__aeabi_dmul>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	f7f7 fc57 	bl	80002c8 <__aeabi_dsub>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4614      	mov	r4, r2
 8008a20:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008a24:	a370      	add	r3, pc, #448	; (adr r3, 8008be8 <getRobotSpeed+0x300>)
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7f7 ff2d 	bl	800088c <__aeabi_ddiv>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	f04f 0000 	mov.w	r0, #0
 8008a3a:	4972      	ldr	r1, [pc, #456]	; (8008c04 <getRobotSpeed+0x31c>)
 8008a3c:	f7f7 fc44 	bl	80002c8 <__aeabi_dsub>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	f7f8 f8ce 	bl	8000be8 <__aeabi_d2f>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	4a6e      	ldr	r2, [pc, #440]	; (8008c08 <getRobotSpeed+0x320>)
 8008a50:	6013      	str	r3, [r2, #0]
    angleErrorIntegral2 = (angleErrorIntegral2 > 1?1: angleErrorIntegral2);
 8008a52:	4b6e      	ldr	r3, [pc, #440]	; (8008c0c <getRobotSpeed+0x324>)
 8008a54:	edd3 7a00 	vldr	s15, [r3]
 8008a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a64:	dd02      	ble.n	8008a6c <getRobotSpeed+0x184>
 8008a66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008a6a:	e001      	b.n	8008a70 <getRobotSpeed+0x188>
 8008a6c:	4b67      	ldr	r3, [pc, #412]	; (8008c0c <getRobotSpeed+0x324>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a66      	ldr	r2, [pc, #408]	; (8008c0c <getRobotSpeed+0x324>)
 8008a72:	6013      	str	r3, [r2, #0]
    slowDownFactor = slowDownFactor>0?slowDownFactor:0;
 8008a74:	4b64      	ldr	r3, [pc, #400]	; (8008c08 <getRobotSpeed+0x320>)
 8008a76:	edd3 7a00 	vldr	s15, [r3]
 8008a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a82:	dd02      	ble.n	8008a8a <getRobotSpeed+0x1a2>
 8008a84:	4b60      	ldr	r3, [pc, #384]	; (8008c08 <getRobotSpeed+0x320>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	e001      	b.n	8008a8e <getRobotSpeed+0x1a6>
 8008a8a:	f04f 0300 	mov.w	r3, #0
 8008a8e:	4a5e      	ldr	r2, [pc, #376]	; (8008c08 <getRobotSpeed+0x320>)
 8008a90:	6013      	str	r3, [r2, #0]

    /*float k = bezier_curvature(b,t);
    float turnFactor =(1-fabs(300*k) > 0.5?1-fabs(300*k):0.5);*/

    //speed = (dir==BACKWARD?-1:1) * slowDownFactor*turnFactor;
    speed = (dir==BACKWARD?-1:1) * slowDownFactor;
 8008a92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a9a:	d102      	bne.n	8008aa2 <getRobotSpeed+0x1ba>
 8008a9c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008aa0:	e001      	b.n	8008aa6 <getRobotSpeed+0x1be>
 8008aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aa6:	4b58      	ldr	r3, [pc, #352]	; (8008c08 <getRobotSpeed+0x320>)
 8008aa8:	edd3 7a00 	vldr	s15, [r3]
 8008aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab0:	4b57      	ldr	r3, [pc, #348]	; (8008c10 <getRobotSpeed+0x328>)
 8008ab2:	edc3 7a00 	vstr	s15, [r3]
    if (initialSpeed < 1 && finalSpeed < 1)
 8008ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8008aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac6:	d51f      	bpl.n	8008b08 <getRobotSpeed+0x220>
 8008ac8:	edd7 7a00 	vldr	s15, [r7]
 8008acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad8:	d516      	bpl.n	8008b08 <getRobotSpeed+0x220>
        speed *= 600*(1-t) + 20;
 8008ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ade:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ae6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8008c1c <getRobotSpeed+0x334>
 8008aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008aee:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008af6:	4b46      	ldr	r3, [pc, #280]	; (8008c10 <getRobotSpeed+0x328>)
 8008af8:	edd3 7a00 	vldr	s15, [r3]
 8008afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b00:	4b43      	ldr	r3, [pc, #268]	; (8008c10 <getRobotSpeed+0x328>)
 8008b02:	edc3 7a00 	vstr	s15, [r3]
 8008b06:	e01d      	b.n	8008b44 <getRobotSpeed+0x25c>
    else
        speed *= initialSpeed*(1-t) + finalSpeed*t + 50;
 8008b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8008b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008b1c:	edd7 6a00 	vldr	s13, [r7]
 8008b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8008b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b2c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8008c20 <getRobotSpeed+0x338>
 8008b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b34:	4b36      	ldr	r3, [pc, #216]	; (8008c10 <getRobotSpeed+0x328>)
 8008b36:	edd3 7a00 	vldr	s15, [r3]
 8008b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3e:	4b34      	ldr	r3, [pc, #208]	; (8008c10 <getRobotSpeed+0x328>)
 8008b40:	edc3 7a00 	vstr	s15, [r3]

    // Limite les accelerations brutales
    if (fabs(speed) > robot.measuredSpeed + K_ACCEL)
 8008b44:	4b32      	ldr	r3, [pc, #200]	; (8008c10 <getRobotSpeed+0x328>)
 8008b46:	edd3 7a00 	vldr	s15, [r3]
 8008b4a:	eeb0 7ae7 	vabs.f32	s14, s15
 8008b4e:	4b35      	ldr	r3, [pc, #212]	; (8008c24 <getRobotSpeed+0x33c>)
 8008b50:	edd3 7a07 	vldr	s15, [r3, #28]
 8008b54:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8008b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b64:	dd33      	ble.n	8008bce <getRobotSpeed+0x2e6>
        speed = (robot.measuredSpeed + K_ACCEL) * fabs(speed) / speed;
 8008b66:	4b2f      	ldr	r3, [pc, #188]	; (8008c24 <getRobotSpeed+0x33c>)
 8008b68:	edd3 7a07 	vldr	s15, [r3, #28]
 8008b6c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008b70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b74:	ee17 0a90 	vmov	r0, s15
 8008b78:	f7f7 fd06 	bl	8000588 <__aeabi_f2d>
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	4b23      	ldr	r3, [pc, #140]	; (8008c10 <getRobotSpeed+0x328>)
 8008b82:	edd3 7a00 	vldr	s15, [r3]
 8008b86:	eef0 7ae7 	vabs.f32	s15, s15
 8008b8a:	ee17 0a90 	vmov	r0, s15
 8008b8e:	f7f7 fcfb 	bl	8000588 <__aeabi_f2d>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 fd4d 	bl	8000638 <__aeabi_dmul>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4614      	mov	r4, r2
 8008ba4:	461d      	mov	r5, r3
 8008ba6:	4b1a      	ldr	r3, [pc, #104]	; (8008c10 <getRobotSpeed+0x328>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7f7 fcec 	bl	8000588 <__aeabi_f2d>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	f7f7 fe68 	bl	800088c <__aeabi_ddiv>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	f7f8 f810 	bl	8000be8 <__aeabi_d2f>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	4a11      	ldr	r2, [pc, #68]	; (8008c10 <getRobotSpeed+0x328>)
 8008bcc:	6013      	str	r3, [r2, #0]

    return speed;
 8008bce:	4b10      	ldr	r3, [pc, #64]	; (8008c10 <getRobotSpeed+0x328>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	ee07 3a90 	vmov	s15, r3
}
 8008bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	ecbd 8b02 	vpop	{d8}
 8008be2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008be6:	bf00      	nop
 8008be8:	54442d18 	.word	0x54442d18
 8008bec:	400921fb 	.word	0x400921fb
 8008bf0:	9999999a 	.word	0x9999999a
 8008bf4:	3fd99999 	.word	0x3fd99999
 8008bf8:	9999999a 	.word	0x9999999a
 8008bfc:	3fb99999 	.word	0x3fb99999
 8008c00:	20000d74 	.word	0x20000d74
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	20000d84 	.word	0x20000d84
 8008c0c:	20000d68 	.word	0x20000d68
 8008c10:	20000d88 	.word	0x20000d88
 8008c14:	447a0000 	.word	0x447a0000
 8008c18:	20000d80 	.word	0x20000d80
 8008c1c:	44160000 	.word	0x44160000
 8008c20:	42480000 	.word	0x42480000
 8008c24:	20000d38 	.word	0x20000d38

08008c28 <calculateMotorSpeeds>:


void calculateMotorSpeeds(float* leftSpeed, float* rightSpeed, Bezier* b, float t, Direction dir, float speed) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6178      	str	r0, [r7, #20]
 8008c30:	6139      	str	r1, [r7, #16]
 8008c32:	60fa      	str	r2, [r7, #12]
 8008c34:	ed87 0a02 	vstr	s0, [r7, #8]
 8008c38:	edc7 0a00 	vstr	s1, [r7]
 8008c3c:	71fb      	strb	r3, [r7, #7]
    float k = bezier_curvature(b, t);
 8008c3e:	ed97 0a02 	vldr	s0, [r7, #8]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7fe fbec 	bl	8007420 <bezier_curvature>
 8008c48:	ed87 0a07 	vstr	s0, [r7, #28]
    //float speed2 = speed*(1-atan(1000*fabs(k))/M_PI);
    //speed2 = speed>400?speed2:speed;
    float speed2 = speed;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	61bb      	str	r3, [r7, #24]
    *leftSpeed = speed2 * (1 + dir*ENTRAXE_MOTOR*k/2);
 8008c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c54:	2292      	movs	r2, #146	; 0x92
 8008c56:	fb02 f303 	mul.w	r3, r2, r3
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c62:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c6a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	edc3 7a00 	vstr	s15, [r3]
    *rightSpeed = speed2 * (1 - dir*ENTRAXE_MOTOR*k/2);
 8008c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c8c:	2292      	movs	r2, #146	; 0x92
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ca2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008cb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8008cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	edc3 7a00 	vstr	s15, [r3]
}
 8008cc0:	bf00      	nop
 8008cc2:	3720      	adds	r7, #32
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <addCorrection>:


void addCorrection(float* leftSpeed, float* rightSpeed, float angleError, float * angleErrorIntegral, float * angleError0, float * correction, float speed, float dt) {
 8008cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ccc:	ed2d 8b02 	vpush	{d8}
 8008cd0:	b08c      	sub	sp, #48	; 0x30
 8008cd2:	af04      	add	r7, sp, #16
 8008cd4:	61f8      	str	r0, [r7, #28]
 8008cd6:	61b9      	str	r1, [r7, #24]
 8008cd8:	ed87 0a05 	vstr	s0, [r7, #20]
 8008cdc:	613a      	str	r2, [r7, #16]
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	edc7 0a02 	vstr	s1, [r7, #8]
 8008ce4:	ed87 1a01 	vstr	s2, [r7, #4]
	*angleErrorIntegral = (abs(*angleErrorIntegral) > MAX_INTEGRAL_CORR/KI_ANGLE?(MAX_INTEGRAL_CORR*(*angleErrorIntegral)/(KI_ANGLE*abs(*angleErrorIntegral))):(*angleErrorIntegral));

	*correction = -angleError*KP_ANGLE - (*angleErrorIntegral)*KI_ANGLE - KD_ANGLE*pow(fabs(speed/KD_SPEED),2)*(angleError-(*angleError0))/0.0001 + KC_ANGLE*(*correction); // contre réaction

	*angleError0 = angleError;*/
	error[2] = error[1];
 8008ce8:	4b69      	ldr	r3, [pc, #420]	; (8008e90 <addCorrection+0x1c8>)
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	4a68      	ldr	r2, [pc, #416]	; (8008e90 <addCorrection+0x1c8>)
 8008cee:	6093      	str	r3, [r2, #8]
	error[1] = error[0];
 8008cf0:	4b67      	ldr	r3, [pc, #412]	; (8008e90 <addCorrection+0x1c8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a66      	ldr	r2, [pc, #408]	; (8008e90 <addCorrection+0x1c8>)
 8008cf6:	6053      	str	r3, [r2, #4]
	error[0] = angleError;
 8008cf8:	4a65      	ldr	r2, [pc, #404]	; (8008e90 <addCorrection+0x1c8>)
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	6013      	str	r3, [r2, #0]
	*correction = corrector(error, *correction, KP_ANGLE, KI_ANGLE, KD_ANGLE*sin(pow(fabs(speed/1000)*M_PI/2,1)), KC_ANGLE, dt,MAX_INTEGRAL_CORR,angleErrorIntegral);
 8008cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d00:	ed93 8a00 	vldr	s16, [r3]
 8008d04:	ed97 7a02 	vldr	s14, [r7, #8]
 8008d08:	eddf 6a62 	vldr	s13, [pc, #392]	; 8008e94 <addCorrection+0x1cc>
 8008d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d10:	eef0 7ae7 	vabs.f32	s15, s15
 8008d14:	ee17 0a90 	vmov	r0, s15
 8008d18:	f7f7 fc36 	bl	8000588 <__aeabi_f2d>
 8008d1c:	a35a      	add	r3, pc, #360	; (adr r3, 8008e88 <addCorrection+0x1c0>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f7f7 fc89 	bl	8000638 <__aeabi_dmul>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d36:	f7f7 fda9 	bl	800088c <__aeabi_ddiv>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	ec43 2b17 	vmov	d7, r2, r3
 8008d42:	eeb0 0a47 	vmov.f32	s0, s14
 8008d46:	eef0 0a67 	vmov.f32	s1, s15
 8008d4a:	f003 ffad 	bl	800cca8 <sin>
 8008d4e:	ec51 0b10 	vmov	r0, r1, d0
 8008d52:	f04f 0200 	mov.w	r2, #0
 8008d56:	4b50      	ldr	r3, [pc, #320]	; (8008e98 <addCorrection+0x1d0>)
 8008d58:	f7f7 fc6e 	bl	8000638 <__aeabi_dmul>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4610      	mov	r0, r2
 8008d62:	4619      	mov	r1, r3
 8008d64:	f7f7 ff40 	bl	8000be8 <__aeabi_d2f>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	6939      	ldr	r1, [r7, #16]
 8008d6c:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8008e9c <addCorrection+0x1d4>
 8008d70:	edd7 2a01 	vldr	s5, [r7, #4]
 8008d74:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8008ea0 <addCorrection+0x1d8>
 8008d78:	ee01 3a90 	vmov	s3, r3
 8008d7c:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8008d80:	eddf 0a48 	vldr	s1, [pc, #288]	; 8008ea4 <addCorrection+0x1dc>
 8008d84:	eeb0 0a48 	vmov.f32	s0, s16
 8008d88:	4841      	ldr	r0, [pc, #260]	; (8008e90 <addCorrection+0x1c8>)
 8008d8a:	f7fe fdd5 	bl	8007938 <corrector>
 8008d8e:	eef0 7a40 	vmov.f32	s15, s0
 8008d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d94:	edc3 7a00 	vstr	s15, [r3]
    if (fabs(*correction) > MAX_CORRECTION) {
 8008d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9a:	edd3 7a00 	vldr	s15, [r3]
 8008d9e:	eef0 7ae7 	vabs.f32	s15, s15
 8008da2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8008ea8 <addCorrection+0x1e0>
 8008da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dae:	dd25      	ble.n	8008dfc <addCorrection+0x134>
        *correction *= MAX_CORRECTION / fabs(*correction);
 8008db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7f7 fbe7 	bl	8000588 <__aeabi_f2d>
 8008dba:	4604      	mov	r4, r0
 8008dbc:	460d      	mov	r5, r1
 8008dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc0:	edd3 7a00 	vldr	s15, [r3]
 8008dc4:	eef0 7ae7 	vabs.f32	s15, s15
 8008dc8:	ee17 0a90 	vmov	r0, s15
 8008dcc:	f7f7 fbdc 	bl	8000588 <__aeabi_f2d>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	f04f 0000 	mov.w	r0, #0
 8008dd8:	4934      	ldr	r1, [pc, #208]	; (8008eac <addCorrection+0x1e4>)
 8008dda:	f7f7 fd57 	bl	800088c <__aeabi_ddiv>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4620      	mov	r0, r4
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7f7 fc27 	bl	8000638 <__aeabi_dmul>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4610      	mov	r0, r2
 8008df0:	4619      	mov	r1, r3
 8008df2:	f7f7 fef9 	bl	8000be8 <__aeabi_d2f>
 8008df6:	4602      	mov	r2, r0
 8008df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dfa:	601a      	str	r2, [r3, #0]
    }

    DEBUG_PROPULSION("ProportionnalCorr: %.1fmm, IntegralCorr: %.1fmm, corr: %.1fmm\r\n",angleError*KP_ANGLE, (*angleErrorIntegral)*KI_ANGLE, *correction);
 8008dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e00:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008ea4 <addCorrection+0x1dc>
 8008e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e08:	ee17 0a90 	vmov	r0, s15
 8008e0c:	f7f7 fbbc 	bl	8000588 <__aeabi_f2d>
 8008e10:	4680      	mov	r8, r0
 8008e12:	4689      	mov	r9, r1
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	edd3 7a00 	vldr	s15, [r3]
 8008e1a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e22:	ee17 0a90 	vmov	r0, s15
 8008e26:	f7f7 fbaf 	bl	8000588 <__aeabi_f2d>
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	460d      	mov	r5, r1
 8008e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7f7 fba8 	bl	8000588 <__aeabi_f2d>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e40:	e9cd 4500 	strd	r4, r5, [sp]
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	4819      	ldr	r0, [pc, #100]	; (8008eb0 <addCorrection+0x1e8>)
 8008e4a:	f001 fd27 	bl	800a89c <iprintf>

    *leftSpeed -= *correction;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	ed93 7a00 	vldr	s14, [r3]
 8008e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e56:	edd3 7a00 	vldr	s15, [r3]
 8008e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	edc3 7a00 	vstr	s15, [r3]
    *rightSpeed += *correction;
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	ed93 7a00 	vldr	s14, [r3]
 8008e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e6c:	edd3 7a00 	vldr	s15, [r3]
 8008e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	edc3 7a00 	vstr	s15, [r3]
}
 8008e7a:	bf00      	nop
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	ecbd 8b02 	vpop	{d8}
 8008e84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008e88:	54442d18 	.word	0x54442d18
 8008e8c:	400921fb 	.word	0x400921fb
 8008e90:	20000d74 	.word	0x20000d74
 8008e94:	447a0000 	.word	0x447a0000
 8008e98:	3fe80000 	.word	0x3fe80000
 8008e9c:	42960000 	.word	0x42960000
 8008ea0:	3dcccccd 	.word	0x3dcccccd
 8008ea4:	43fa0000 	.word	0x43fa0000
 8008ea8:	42a00000 	.word	0x42a00000
 8008eac:	40540000 	.word	0x40540000
 8008eb0:	0800ef90 	.word	0x0800ef90
 8008eb4:	00000000 	.word	0x00000000

08008eb8 <propulsion_followBezier>:


// C'est ici que la magie a lieu !
float propulsion_followBezier(Bezier* b, Direction dir, float initialSpeed, float finalSpeed, bool reverse) {
 8008eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ebc:	ed2d 8b02 	vpush	{d8}
 8008ec0:	b0a0      	sub	sp, #128	; 0x80
 8008ec2:	af0c      	add	r7, sp, #48	; 0x30
 8008ec4:	6278      	str	r0, [r7, #36]	; 0x24
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	ed87 0a07 	vstr	s0, [r7, #28]
 8008ecc:	edc7 0a06 	vstr	s1, [r7, #24]
 8008ed0:	617a      	str	r2, [r7, #20]
 8008ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    float t = bezier_project(b, robot.position, 0.0001); // (entre 0 et 1)
 8008ed6:	4b86      	ldr	r3, [pc, #536]	; (80090f0 <propulsion_followBezier+0x238>)
 8008ed8:	ed93 7a00 	vldr	s14, [r3]
 8008edc:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ee0:	ed9f 1a84 	vldr	s2, [pc, #528]	; 80090f4 <propulsion_followBezier+0x23c>
 8008ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8008ee8:	eef0 0a67 	vmov.f32	s1, s15
 8008eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eee:	f7fe fb55 	bl	800759c <bezier_project>
 8008ef2:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
    float dt = t-t0;
 8008ef6:	4b80      	ldr	r3, [pc, #512]	; (80090f8 <propulsion_followBezier+0x240>)
 8008ef8:	edd3 7a00 	vldr	s15, [r3]
 8008efc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f04:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float k = bezier_curvature(b,t);
 8008f08:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8008f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f0e:	f7fe fa87 	bl	8007420 <bezier_curvature>
 8008f12:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    Vector2 p = bezier_eval(b, t); // Point de la courbe le plus proche du robot
 8008f16:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8008f1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f1c:	f7fe f884 	bl	8007028 <bezier_eval>
 8008f20:	eeb0 7a40 	vmov.f32	s14, s0
 8008f24:	eef0 7a60 	vmov.f32	s15, s1
 8008f28:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8008f2c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    //DEBUG_PROPULSION("t: %.5f, x: %.1fmm, y: %.1fmm, a: %.1fdeg, ", t, robot.position.x, robot.position.y, robot.angle / M_PI / 2 * 360);

    // Erreur d'orientation
    float angleError = getAngleError(b, t, p, dir);
 8008f30:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008f34:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008f38:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	eef0 0a47 	vmov.f32	s1, s14
 8008f42:	eeb0 1a67 	vmov.f32	s2, s15
 8008f46:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8008f4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f4c:	f7ff fbd4 	bl	80086f8 <getAngleError>
 8008f50:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    DEBUG_PROPULSION("t: %.5f, x: %.1fmm, y: %.1fmm, speed: %.1fmm/s, a: %.1fdeg, a_err: %.1fdeg, k: %.10f ", t, robot.position.x, robot.position.y, robot.measuredSpeed, robot.angle / M_PI / 2 * 360, angleError / M_PI / 2 * 360, k);
 8008f54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008f56:	f7f7 fb17 	bl	8000588 <__aeabi_f2d>
 8008f5a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008f5e:	4b64      	ldr	r3, [pc, #400]	; (80090f0 <propulsion_followBezier+0x238>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7f7 fb10 	bl	8000588 <__aeabi_f2d>
 8008f68:	4680      	mov	r8, r0
 8008f6a:	4689      	mov	r9, r1
 8008f6c:	4b60      	ldr	r3, [pc, #384]	; (80090f0 <propulsion_followBezier+0x238>)
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f7 fb09 	bl	8000588 <__aeabi_f2d>
 8008f76:	4682      	mov	sl, r0
 8008f78:	468b      	mov	fp, r1
 8008f7a:	4b5d      	ldr	r3, [pc, #372]	; (80090f0 <propulsion_followBezier+0x238>)
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7f7 fb02 	bl	8000588 <__aeabi_f2d>
 8008f84:	e9c7 0100 	strd	r0, r1, [r7]
 8008f88:	4b59      	ldr	r3, [pc, #356]	; (80090f0 <propulsion_followBezier+0x238>)
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7f7 fafb 	bl	8000588 <__aeabi_f2d>
 8008f92:	a355      	add	r3, pc, #340	; (adr r3, 80090e8 <propulsion_followBezier+0x230>)
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f7f7 fc78 	bl	800088c <__aeabi_ddiv>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	f04f 0200 	mov.w	r2, #0
 8008fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008fac:	f7f7 fc6e 	bl	800088c <__aeabi_ddiv>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	4b4f      	ldr	r3, [pc, #316]	; (80090fc <propulsion_followBezier+0x244>)
 8008fbe:	f7f7 fb3b 	bl	8000638 <__aeabi_dmul>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	ec43 2b18 	vmov	d8, r2, r3
 8008fca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008fcc:	f7f7 fadc 	bl	8000588 <__aeabi_f2d>
 8008fd0:	a345      	add	r3, pc, #276	; (adr r3, 80090e8 <propulsion_followBezier+0x230>)
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f7f7 fc59 	bl	800088c <__aeabi_ddiv>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008fea:	f7f7 fc4f 	bl	800088c <__aeabi_ddiv>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	f04f 0200 	mov.w	r2, #0
 8008ffa:	4b40      	ldr	r3, [pc, #256]	; (80090fc <propulsion_followBezier+0x244>)
 8008ffc:	f7f7 fb1c 	bl	8000638 <__aeabi_dmul>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4614      	mov	r4, r2
 8009006:	461d      	mov	r5, r3
 8009008:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800900a:	f7f7 fabd 	bl	8000588 <__aeabi_f2d>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009016:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800901a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800901e:	ed97 7b00 	vldr	d7, [r7]
 8009022:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009026:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800902a:	e9cd 8900 	strd	r8, r9, [sp]
 800902e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009032:	4833      	ldr	r0, [pc, #204]	; (8009100 <propulsion_followBezier+0x248>)
 8009034:	f001 fc32 	bl	800a89c <iprintf>

    if (reverse) {
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <propulsion_followBezier+0x18c>
    	angleError = 0;
 800903e:	f04f 0300 	mov.w	r3, #0
 8009042:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    // Vitesse globale du robot
    float speed = getRobotSpeed(b, t, angleError, dir, initialSpeed, finalSpeed);
 8009044:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009048:	edd7 1a06 	vldr	s3, [r7, #24]
 800904c:	ed97 1a07 	vldr	s2, [r7, #28]
 8009050:	4619      	mov	r1, r3
 8009052:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8009056:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800905a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800905c:	f7ff fc44 	bl	80088e8 <getRobotSpeed>
 8009060:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    if (reverse) {
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <propulsion_followBezier+0x1be>
    	speed *= -1;
 800906a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800906e:	eef1 7a67 	vneg.f32	s15, s15
 8009072:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    }

    float leftSpeed, rightSpeed;

    // Boucle ouverte
    calculateMotorSpeeds(&leftSpeed, &rightSpeed, b, t, dir, speed);
 8009076:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800907a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800907e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009082:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8009086:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800908a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908c:	f7ff fdcc 	bl	8008c28 <calculateMotorSpeeds>

    // Boucle fermée
    addCorrection(&leftSpeed, &rightSpeed, angleError, &angleErrorIntegral, &angleError0, &correction, speed,dt);
 8009090:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009094:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009098:	4b1a      	ldr	r3, [pc, #104]	; (8009104 <propulsion_followBezier+0x24c>)
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 80090a0:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 80090a4:	4b18      	ldr	r3, [pc, #96]	; (8009108 <propulsion_followBezier+0x250>)
 80090a6:	4a19      	ldr	r2, [pc, #100]	; (800910c <propulsion_followBezier+0x254>)
 80090a8:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80090ac:	f7ff fe0c 	bl	8008cc8 <addCorrection>

    // Commande des moteurs
    propulsion_setSpeeds(leftSpeed, rightSpeed, k);
 80090b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80090b4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80090b8:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 80090bc:	eef0 0a47 	vmov.f32	s1, s14
 80090c0:	eeb0 0a67 	vmov.f32	s0, s15
 80090c4:	f7ff fa08 	bl	80084d8 <propulsion_setSpeeds>
    t0 = t;
 80090c8:	4a0b      	ldr	r2, [pc, #44]	; (80090f8 <propulsion_followBezier+0x240>)
 80090ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090cc:	6013      	str	r3, [r2, #0]
    return t;
 80090ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090d0:	ee07 3a90 	vmov	s15, r3
}
 80090d4:	eeb0 0a67 	vmov.f32	s0, s15
 80090d8:	3750      	adds	r7, #80	; 0x50
 80090da:	46bd      	mov	sp, r7
 80090dc:	ecbd 8b02 	vpop	{d8}
 80090e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090e4:	f3af 8000 	nop.w
 80090e8:	54442d18 	.word	0x54442d18
 80090ec:	400921fb 	.word	0x400921fb
 80090f0:	20000d38 	.word	0x20000d38
 80090f4:	38d1b717 	.word	0x38d1b717
 80090f8:	20000d80 	.word	0x20000d80
 80090fc:	40768000 	.word	0x40768000
 8009100:	0800efd0 	.word	0x0800efd0
 8009104:	20000d70 	.word	0x20000d70
 8009108:	20000d6c 	.word	0x20000d6c
 800910c:	20000d64 	.word	0x20000d64

08009110 <standardAngle>:


float standardAngle(float angle) {
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	ed87 0a01 	vstr	s0, [r7, #4]
    return fmod(fmod(angle + M_PI, M_TWOPI) + M_TWOPI, M_TWOPI) - M_PI;
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7f7 fa34 	bl	8000588 <__aeabi_f2d>
 8009120:	a31f      	add	r3, pc, #124	; (adr r3, 80091a0 <standardAngle+0x90>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 f8d1 	bl	80002cc <__adddf3>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	ec43 2b17 	vmov	d7, r2, r3
 8009132:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009198 <standardAngle+0x88>
 8009136:	eeb0 0a47 	vmov.f32	s0, s14
 800913a:	eef0 0a67 	vmov.f32	s1, s15
 800913e:	f003 fae7 	bl	800c710 <fmod>
 8009142:	ec51 0b10 	vmov	r0, r1, d0
 8009146:	a314      	add	r3, pc, #80	; (adr r3, 8009198 <standardAngle+0x88>)
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f7f7 f8be 	bl	80002cc <__adddf3>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	ec43 2b17 	vmov	d7, r2, r3
 8009158:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8009198 <standardAngle+0x88>
 800915c:	eeb0 0a47 	vmov.f32	s0, s14
 8009160:	eef0 0a67 	vmov.f32	s1, s15
 8009164:	f003 fad4 	bl	800c710 <fmod>
 8009168:	ec51 0b10 	vmov	r0, r1, d0
 800916c:	a30c      	add	r3, pc, #48	; (adr r3, 80091a0 <standardAngle+0x90>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 f8a9 	bl	80002c8 <__aeabi_dsub>
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4610      	mov	r0, r2
 800917c:	4619      	mov	r1, r3
 800917e:	f7f7 fd33 	bl	8000be8 <__aeabi_d2f>
 8009182:	4603      	mov	r3, r0
 8009184:	ee07 3a90 	vmov	s15, r3
}
 8009188:	eeb0 0a67 	vmov.f32	s0, s15
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	f3af 8000 	nop.w
 8009198:	54442d18 	.word	0x54442d18
 800919c:	401921fb 	.word	0x401921fb
 80091a0:	54442d18 	.word	0x54442d18
 80091a4:	400921fb 	.word	0x400921fb

080091a8 <serial_send>:

		}*/
	serial_send(&byte7No4,1,1);
}

int serial_send(uint8_t *ptr, int len, int uartPort) {
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
	if (uartPort == 4)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d108      	bne.n	80091cc <serial_send+0x24>
		HAL_UART_Transmit(&huart4, ptr, len, HAL_MAX_DELAY);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	b29a      	uxth	r2, r3
 80091be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091c2:	68f9      	ldr	r1, [r7, #12]
 80091c4:	481c      	ldr	r0, [pc, #112]	; (8009238 <serial_send+0x90>)
 80091c6:	f7fc fb40 	bl	800584a <HAL_UART_Transmit>
 80091ca:	e030      	b.n	800922e <serial_send+0x86>
	else if (uartPort == 5)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b05      	cmp	r3, #5
 80091d0:	d108      	bne.n	80091e4 <serial_send+0x3c>
		HAL_UART_Transmit(&huart5, ptr, len, HAL_MAX_DELAY);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091da:	68f9      	ldr	r1, [r7, #12]
 80091dc:	4817      	ldr	r0, [pc, #92]	; (800923c <serial_send+0x94>)
 80091de:	f7fc fb34 	bl	800584a <HAL_UART_Transmit>
 80091e2:	e024      	b.n	800922e <serial_send+0x86>
	else if (uartPort == 1){
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d108      	bne.n	80091fc <serial_send+0x54>
		HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	4812      	ldr	r0, [pc, #72]	; (8009240 <serial_send+0x98>)
 80091f6:	f7fc fb28 	bl	800584a <HAL_UART_Transmit>
 80091fa:	e018      	b.n	800922e <serial_send+0x86>
	}
	else if (uartPort == 6) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b06      	cmp	r3, #6
 8009200:	d115      	bne.n	800922e <serial_send+0x86>
		uint8_t action = *ptr;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	75fb      	strb	r3, [r7, #23]
		if(action == 0x69)
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	2b69      	cmp	r3, #105	; 0x69
 800920c:	d106      	bne.n	800921c <serial_send+0x74>
		{
			HAL_UART_Transmit(&huart6, "1021", 4, 1);
 800920e:	2301      	movs	r3, #1
 8009210:	2204      	movs	r2, #4
 8009212:	490c      	ldr	r1, [pc, #48]	; (8009244 <serial_send+0x9c>)
 8009214:	480c      	ldr	r0, [pc, #48]	; (8009248 <serial_send+0xa0>)
 8009216:	f7fc fb18 	bl	800584a <HAL_UART_Transmit>
 800921a:	e008      	b.n	800922e <serial_send+0x86>
		}
		else if(action == 0x70)
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	2b70      	cmp	r3, #112	; 0x70
 8009220:	d105      	bne.n	800922e <serial_send+0x86>
		{
			HAL_UART_Transmit(&huart6, "1010", 4, 1);
 8009222:	2301      	movs	r3, #1
 8009224:	2204      	movs	r2, #4
 8009226:	4909      	ldr	r1, [pc, #36]	; (800924c <serial_send+0xa4>)
 8009228:	4807      	ldr	r0, [pc, #28]	; (8009248 <serial_send+0xa0>)
 800922a:	f7fc fb0e 	bl	800584a <HAL_UART_Transmit>
			}
		}*/
		//HAL_UART_Transmit(&huart6, &action, len, HAL_MAX_DELAY);
		//printf("Sending %x\r\n", *ptr);
	}
	return len;
 800922e:	68bb      	ldr	r3, [r7, #8]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3718      	adds	r7, #24
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20000490 	.word	0x20000490
 800923c:	200004d4 	.word	0x200004d4
 8009240:	20000518 	.word	0x20000518
 8009244:	0800f028 	.word	0x0800f028
 8009248:	200005a0 	.word	0x200005a0
 800924c:	0800f030 	.word	0x0800f030

08009250 <WifiUartTXActivation>:

void WifiUartTXActivation(){//activate USART1 as print port and enable ESP to send text
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
	wifiDataTX=0x7F;
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <WifiUartTXActivation+0x20>)
 8009256:	227f      	movs	r2, #127	; 0x7f
 8009258:	701a      	strb	r2, [r3, #0]
	globalUSARTchange=1;
 800925a:	4b06      	ldr	r3, [pc, #24]	; (8009274 <WifiUartTXActivation+0x24>)
 800925c:	2201      	movs	r2, #1
 800925e:	701a      	strb	r2, [r3, #0]
	serial_send(&wifiDataTX, 1, 1);
 8009260:	2201      	movs	r2, #1
 8009262:	2101      	movs	r1, #1
 8009264:	4802      	ldr	r0, [pc, #8]	; (8009270 <WifiUartTXActivation+0x20>)
 8009266:	f7ff ff9f 	bl	80091a8 <serial_send>
}
 800926a:	bf00      	nop
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20000d8f 	.word	0x20000d8f
 8009274:	20000d8d 	.word	0x20000d8d

08009278 <WifiUartTXDeactivation>:

void WifiUartTXDeactivation(){//deactivate USART1 as print port
 8009278:	b580      	push	{r7, lr}
 800927a:	af00      	add	r7, sp, #0
	wifiDataTX=0x7E;
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <WifiUartTXDeactivation+0x20>)
 800927e:	227e      	movs	r2, #126	; 0x7e
 8009280:	701a      	strb	r2, [r3, #0]
	globalUSARTchange=0;
 8009282:	4b06      	ldr	r3, [pc, #24]	; (800929c <WifiUartTXDeactivation+0x24>)
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]
	serial_send(&wifiDataTX, 1, 1);
 8009288:	2201      	movs	r2, #1
 800928a:	2101      	movs	r1, #1
 800928c:	4802      	ldr	r0, [pc, #8]	; (8009298 <WifiUartTXDeactivation+0x20>)
 800928e:	f7ff ff8b 	bl	80091a8 <serial_send>
}
 8009292:	bf00      	nop
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20000d8f 	.word	0x20000d8f
 800929c:	20000d8d 	.word	0x20000d8d

080092a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART4){
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a3e      	ldr	r2, [pc, #248]	; (80093a8 <HAL_UART_RxCpltCallback+0x108>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d114      	bne.n	80092dc <HAL_UART_RxCpltCallback+0x3c>
		/*int id = lidarData >> 4;
		uint8_t dist = (lidarData & 0xF) << 2;
		lidar_updateDistance(id, dist);
		HAL_UART_Receive_IT(&huart4, &lidarData, 1);*/

		DataAcquiered = 1;
 80092b2:	4b3e      	ldr	r3, [pc, #248]	; (80093ac <HAL_UART_RxCpltCallback+0x10c>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	701a      	strb	r2, [r3, #0]
		bufferIndex += 3;
 80092b8:	4b3d      	ldr	r3, [pc, #244]	; (80093b0 <HAL_UART_RxCpltCallback+0x110>)
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	3303      	adds	r3, #3
 80092be:	b29a      	uxth	r2, r3
 80092c0:	4b3b      	ldr	r3, [pc, #236]	; (80093b0 <HAL_UART_RxCpltCallback+0x110>)
 80092c2:	801a      	strh	r2, [r3, #0]
		frameStatus();
 80092c4:	f7fe fe38 	bl	8007f38 <frameStatus>
		HAL_UART_Receive_DMA(&huart4, &lidarBuf[bufferIndex], 3);
 80092c8:	4b39      	ldr	r3, [pc, #228]	; (80093b0 <HAL_UART_RxCpltCallback+0x110>)
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	4b39      	ldr	r3, [pc, #228]	; (80093b4 <HAL_UART_RxCpltCallback+0x114>)
 80092d0:	4413      	add	r3, r2
 80092d2:	2203      	movs	r2, #3
 80092d4:	4619      	mov	r1, r3
 80092d6:	4838      	ldr	r0, [pc, #224]	; (80093b8 <HAL_UART_RxCpltCallback+0x118>)
 80092d8:	f7fc fb79 	bl	80059ce <HAL_UART_Receive_DMA>
			//printf("Arm: Continue.\r\n");
		}
		HAL_UART_Receive_IT(&huart6, &armData, 1);
	}*/

	if(huart->Instance == USART1){
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a36      	ldr	r2, [pc, #216]	; (80093bc <HAL_UART_RxCpltCallback+0x11c>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d15c      	bne.n	80093a0 <HAL_UART_RxCpltCallback+0x100>
		static int byteCount=0;
		static uint32_t rec=0;
		if(wifiDataRX==0xC0 && byteCount<1){//ping the robot with the host and sendback a byte
 80092e6:	4b36      	ldr	r3, [pc, #216]	; (80093c0 <HAL_UART_RxCpltCallback+0x120>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	2bc0      	cmp	r3, #192	; 0xc0
 80092ec:	d10c      	bne.n	8009308 <HAL_UART_RxCpltCallback+0x68>
 80092ee:	4b35      	ldr	r3, [pc, #212]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dc08      	bgt.n	8009308 <HAL_UART_RxCpltCallback+0x68>
			wifiDataTX=0x10;
 80092f6:	4b34      	ldr	r3, [pc, #208]	; (80093c8 <HAL_UART_RxCpltCallback+0x128>)
 80092f8:	2210      	movs	r2, #16
 80092fa:	701a      	strb	r2, [r3, #0]
			serial_send(&wifiDataTX,1,1);
 80092fc:	2201      	movs	r2, #1
 80092fe:	2101      	movs	r1, #1
 8009300:	4831      	ldr	r0, [pc, #196]	; (80093c8 <HAL_UART_RxCpltCallback+0x128>)
 8009302:	f7ff ff51 	bl	80091a8 <serial_send>
 8009306:	e046      	b.n	8009396 <HAL_UART_RxCpltCallback+0xf6>
		}
		else if(wifiDataRX==0xE0 && byteCount<1){//Activate 32 uint recieving mode
 8009308:	4b2d      	ldr	r3, [pc, #180]	; (80093c0 <HAL_UART_RxCpltCallback+0x120>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2be0      	cmp	r3, #224	; 0xe0
 800930e:	d107      	bne.n	8009320 <HAL_UART_RxCpltCallback+0x80>
 8009310:	4b2c      	ldr	r3, [pc, #176]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	dc03      	bgt.n	8009320 <HAL_UART_RxCpltCallback+0x80>
			byteCount=1;
 8009318:	4b2a      	ldr	r3, [pc, #168]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 800931a:	2201      	movs	r2, #1
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e03a      	b.n	8009396 <HAL_UART_RxCpltCallback+0xf6>
			//wifiDataTX=224+byteCount;
			//serial_send(&wifiDataTX,1,1);
		}
		else if(byteCount>0){//Handle byte parsing to make the 32 uint
 8009320:	4b28      	ldr	r3, [pc, #160]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	dd21      	ble.n	800936c <HAL_UART_RxCpltCallback+0xcc>
			rec += (wifiDataRX & 0x7F) << (byteCount-1)*7;
 8009328:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <HAL_UART_RxCpltCallback+0x120>)
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8009330:	4b24      	ldr	r3, [pc, #144]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	1e5a      	subs	r2, r3, #1
 8009336:	4613      	mov	r3, r2
 8009338:	00db      	lsls	r3, r3, #3
 800933a:	1a9b      	subs	r3, r3, r2
 800933c:	fa01 f303 	lsl.w	r3, r1, r3
 8009340:	461a      	mov	r2, r3
 8009342:	4b22      	ldr	r3, [pc, #136]	; (80093cc <HAL_UART_RxCpltCallback+0x12c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4413      	add	r3, r2
 8009348:	4a20      	ldr	r2, [pc, #128]	; (80093cc <HAL_UART_RxCpltCallback+0x12c>)
 800934a:	6013      	str	r3, [r2, #0]
			//wifiDataTX=224+byteCount+1;
			//serial_send(&wifiDataTX,1,1);
			byteCount++;
 800934c:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3301      	adds	r3, #1
 8009352:	4a1c      	ldr	r2, [pc, #112]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 8009354:	6013      	str	r3, [r2, #0]
			if(byteCount>5){
 8009356:	4b1b      	ldr	r3, [pc, #108]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b05      	cmp	r3, #5
 800935c:	dd1b      	ble.n	8009396 <HAL_UART_RxCpltCallback+0xf6>
				byteCount=0;
 800935e:	4b19      	ldr	r3, [pc, #100]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]

				/*char buf[20];
				uint16_t size = snprintf(buf,20,"%3.3lu\r\n",rec);
				HAL_UART_Transmit(&huart2, buf, size, HAL_MAX_DELAY);*/
				rec=0;
 8009364:	4b19      	ldr	r3, [pc, #100]	; (80093cc <HAL_UART_RxCpltCallback+0x12c>)
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	e014      	b.n	8009396 <HAL_UART_RxCpltCallback+0xf6>
			}
		}
		else if(wifiDataRX==0x8E && byteCount<1){//Deactivate the USART1 as print port
 800936c:	4b14      	ldr	r3, [pc, #80]	; (80093c0 <HAL_UART_RxCpltCallback+0x120>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b8e      	cmp	r3, #142	; 0x8e
 8009372:	d106      	bne.n	8009382 <HAL_UART_RxCpltCallback+0xe2>
 8009374:	4b13      	ldr	r3, [pc, #76]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc02      	bgt.n	8009382 <HAL_UART_RxCpltCallback+0xe2>
			WifiUartTXDeactivation();
 800937c:	f7ff ff7c 	bl	8009278 <WifiUartTXDeactivation>
 8009380:	e009      	b.n	8009396 <HAL_UART_RxCpltCallback+0xf6>
		}
		else if(wifiDataRX==0x8F && byteCount<1){//Deactivate the USART1 as print port
 8009382:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <HAL_UART_RxCpltCallback+0x120>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b8f      	cmp	r3, #143	; 0x8f
 8009388:	d105      	bne.n	8009396 <HAL_UART_RxCpltCallback+0xf6>
 800938a:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <HAL_UART_RxCpltCallback+0x124>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	dc01      	bgt.n	8009396 <HAL_UART_RxCpltCallback+0xf6>
			WifiUartTXActivation();
 8009392:	f7ff ff5d 	bl	8009250 <WifiUartTXActivation>
		}
		HAL_UART_Receive_IT(&huart1, &wifiDataRX, 1);
 8009396:	2201      	movs	r2, #1
 8009398:	4909      	ldr	r1, [pc, #36]	; (80093c0 <HAL_UART_RxCpltCallback+0x120>)
 800939a:	480d      	ldr	r0, [pc, #52]	; (80093d0 <HAL_UART_RxCpltCallback+0x130>)
 800939c:	f7fc fae7 	bl	800596e <HAL_UART_Receive_IT>
	}
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	40004c00 	.word	0x40004c00
 80093ac:	2000194e 	.word	0x2000194e
 80093b0:	2000194c 	.word	0x2000194c
 80093b4:	20000d94 	.word	0x20000d94
 80093b8:	20000490 	.word	0x20000490
 80093bc:	40011000 	.word	0x40011000
 80093c0:	20000d8e 	.word	0x20000d8e
 80093c4:	20001950 	.word	0x20001950
 80093c8:	20000d8f 	.word	0x20000d8f
 80093cc:	20001954 	.word	0x20001954
 80093d0:	20000518 	.word	0x20000518

080093d4 <strategy_initialize>:

#include "strategy.h"

Strategy* strategy_initialize(int num) {
 80093d4:	b590      	push	{r4, r7, lr}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
	if(num == 0 || num == 1)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <strategy_initialize+0x16>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	f040 8141 	bne.w	800966c <strategy_initialize+0x298>
	{
		Strategy* strategy = (Strategy*) malloc(sizeof(Strategy));
 80093ea:	2020      	movs	r0, #32
 80093ec:	f000 fc8c 	bl	8009d08 <malloc>
 80093f0:	4603      	mov	r3, r0
 80093f2:	60fb      	str	r3, [r7, #12]
		    strategy->length = 6;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2206      	movs	r2, #6
 80093f8:	601a      	str	r2, [r3, #0]
		    strategy->path = (Bezier**) malloc(sizeof(Bezier*) * strategy->length);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fc81 	bl	8009d08 <malloc>
 8009406:	4603      	mov	r3, r0
 8009408:	461a      	mov	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	605a      	str	r2, [r3, #4]

		    strategy->directions = (Direction*) malloc(sizeof(Direction) * strategy->length);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fc78 	bl	8009d08 <malloc>
 8009418:	4603      	mov	r3, r0
 800941a:	461a      	mov	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	609a      	str	r2, [r3, #8]
		    strategy->speeds = (float*) calloc(strategy->length+1, sizeof(float));
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3301      	adds	r3, #1
 8009426:	2104      	movs	r1, #4
 8009428:	4618      	mov	r0, r3
 800942a:	f000 fc4f 	bl	8009ccc <calloc>
 800942e:	4603      	mov	r3, r0
 8009430:	461a      	mov	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	60da      	str	r2, [r3, #12]

		    strategy->onSiteActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3301      	adds	r3, #1
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fc62 	bl	8009d08 <malloc>
 8009444:	4603      	mov	r3, r0
 8009446:	461a      	mov	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	611a      	str	r2, [r3, #16]
		    strategy->onSiteActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3301      	adds	r3, #1
 8009452:	2104      	movs	r1, #4
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fc39 	bl	8009ccc <calloc>
 800945a:	4603      	mov	r3, r0
 800945c:	461a      	mov	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	619a      	str	r2, [r3, #24]
		    strategy->onMoveActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3301      	adds	r3, #1
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4618      	mov	r0, r3
 800946c:	f000 fc4c 	bl	8009d08 <malloc>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	615a      	str	r2, [r3, #20]
		    strategy->onMoveActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3301      	adds	r3, #1
 800947e:	2104      	movs	r1, #4
 8009480:	4618      	mov	r0, r3
 8009482:	f000 fc23 	bl	8009ccc <calloc>
 8009486:	4603      	mov	r3, r0
 8009488:	461a      	mov	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	61da      	str	r2, [r3, #28]

		    strategy->path[0] = bezier_new(240, 1000, 482.706, 1000, 889.093, 1000, 1101.350, 1000, 30);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	685c      	ldr	r4, [r3, #4]
 8009492:	201e      	movs	r0, #30
 8009494:	eddf 3a72 	vldr	s7, [pc, #456]	; 8009660 <strategy_initialize+0x28c>
 8009498:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8009630 <strategy_initialize+0x25c>
 800949c:	eddf 2a70 	vldr	s5, [pc, #448]	; 8009660 <strategy_initialize+0x28c>
 80094a0:	ed9f 2a62 	vldr	s4, [pc, #392]	; 800962c <strategy_initialize+0x258>
 80094a4:	eddf 1a6e 	vldr	s3, [pc, #440]	; 8009660 <strategy_initialize+0x28c>
 80094a8:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8009628 <strategy_initialize+0x254>
 80094ac:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8009660 <strategy_initialize+0x28c>
 80094b0:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8009658 <strategy_initialize+0x284>
 80094b4:	f7fd fce2 	bl	8006e7c <bezier_new>
 80094b8:	4603      	mov	r3, r0
 80094ba:	6023      	str	r3, [r4, #0]
		    strategy->path[1] = bezier_new(1101.350, 1000, 1313.608, 1000, 2073.478, 1000, 2073.478, 1000, 30);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	1d1c      	adds	r4, r3, #4
 80094c2:	201e      	movs	r0, #30
 80094c4:	eddf 3a66 	vldr	s7, [pc, #408]	; 8009660 <strategy_initialize+0x28c>
 80094c8:	ed9f 3a5b 	vldr	s6, [pc, #364]	; 8009638 <strategy_initialize+0x264>
 80094cc:	eddf 2a64 	vldr	s5, [pc, #400]	; 8009660 <strategy_initialize+0x28c>
 80094d0:	ed9f 2a59 	vldr	s4, [pc, #356]	; 8009638 <strategy_initialize+0x264>
 80094d4:	eddf 1a62 	vldr	s3, [pc, #392]	; 8009660 <strategy_initialize+0x28c>
 80094d8:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8009634 <strategy_initialize+0x260>
 80094dc:	eddf 0a60 	vldr	s1, [pc, #384]	; 8009660 <strategy_initialize+0x28c>
 80094e0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8009630 <strategy_initialize+0x25c>
 80094e4:	f7fd fcca 	bl	8006e7c <bezier_new>
 80094e8:	4603      	mov	r3, r0
 80094ea:	6023      	str	r3, [r4, #0]
		    strategy->path[2] = bezier_new(2073.478, 1000, 2073.478, 1000, 2619.905, 1000, 2760.723, 1000, 30);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f103 0408 	add.w	r4, r3, #8
 80094f4:	201e      	movs	r0, #30
 80094f6:	eddf 3a5a 	vldr	s7, [pc, #360]	; 8009660 <strategy_initialize+0x28c>
 80094fa:	ed9f 3a52 	vldr	s6, [pc, #328]	; 8009644 <strategy_initialize+0x270>
 80094fe:	eddf 2a58 	vldr	s5, [pc, #352]	; 8009660 <strategy_initialize+0x28c>
 8009502:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 800963c <strategy_initialize+0x268>
 8009506:	eddf 1a56 	vldr	s3, [pc, #344]	; 8009660 <strategy_initialize+0x28c>
 800950a:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8009638 <strategy_initialize+0x264>
 800950e:	eddf 0a54 	vldr	s1, [pc, #336]	; 8009660 <strategy_initialize+0x28c>
 8009512:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8009638 <strategy_initialize+0x264>
 8009516:	f7fd fcb1 	bl	8006e7c <bezier_new>
 800951a:	4603      	mov	r3, r0
 800951c:	6023      	str	r3, [r4, #0]
		    strategy->path[3] = bezier_new(2760.723, 1000, 2619.720, 1000, 2157.587, 1000, 2074.928, 1000, 30);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f103 040c 	add.w	r4, r3, #12
 8009526:	201e      	movs	r0, #30
 8009528:	eddf 3a4d 	vldr	s7, [pc, #308]	; 8009660 <strategy_initialize+0x28c>
 800952c:	ed9f 3a48 	vldr	s6, [pc, #288]	; 8009650 <strategy_initialize+0x27c>
 8009530:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8009660 <strategy_initialize+0x28c>
 8009534:	ed9f 2a44 	vldr	s4, [pc, #272]	; 8009648 <strategy_initialize+0x274>
 8009538:	eddf 1a49 	vldr	s3, [pc, #292]	; 8009660 <strategy_initialize+0x28c>
 800953c:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8009640 <strategy_initialize+0x26c>
 8009540:	eddf 0a47 	vldr	s1, [pc, #284]	; 8009660 <strategy_initialize+0x28c>
 8009544:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8009644 <strategy_initialize+0x270>
 8009548:	f7fd fc98 	bl	8006e7c <bezier_new>
 800954c:	4603      	mov	r3, r0
 800954e:	6023      	str	r3, [r4, #0]
		    strategy->path[4] = bezier_new(2074.928, 1000, 1992.270, 1000, 1192.385, 1000, 1100.334, 1000, 30);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f103 0410 	add.w	r4, r3, #16
 8009558:	201e      	movs	r0, #30
 800955a:	eddf 3a41 	vldr	s7, [pc, #260]	; 8009660 <strategy_initialize+0x28c>
 800955e:	ed9f 3a41 	vldr	s6, [pc, #260]	; 8009664 <strategy_initialize+0x290>
 8009562:	eddf 2a3f 	vldr	s5, [pc, #252]	; 8009660 <strategy_initialize+0x28c>
 8009566:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8009654 <strategy_initialize+0x280>
 800956a:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8009660 <strategy_initialize+0x28c>
 800956e:	ed9f 1a37 	vldr	s2, [pc, #220]	; 800964c <strategy_initialize+0x278>
 8009572:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8009660 <strategy_initialize+0x28c>
 8009576:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8009650 <strategy_initialize+0x27c>
 800957a:	f7fd fc7f 	bl	8006e7c <bezier_new>
 800957e:	4603      	mov	r3, r0
 8009580:	6023      	str	r3, [r4, #0]
		    strategy->path[5] = bezier_new(1100.334, 1000, 1008.283, 1000, 482.664, 1000, 240, 1000, 30);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	f103 0414 	add.w	r4, r3, #20
 800958a:	201e      	movs	r0, #30
 800958c:	eddf 3a34 	vldr	s7, [pc, #208]	; 8009660 <strategy_initialize+0x28c>
 8009590:	ed9f 3a31 	vldr	s6, [pc, #196]	; 8009658 <strategy_initialize+0x284>
 8009594:	eddf 2a32 	vldr	s5, [pc, #200]	; 8009660 <strategy_initialize+0x28c>
 8009598:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8009668 <strategy_initialize+0x294>
 800959c:	eddf 1a30 	vldr	s3, [pc, #192]	; 8009660 <strategy_initialize+0x28c>
 80095a0:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800965c <strategy_initialize+0x288>
 80095a4:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8009660 <strategy_initialize+0x28c>
 80095a8:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8009664 <strategy_initialize+0x290>
 80095ac:	f7fd fc66 	bl	8006e7c <bezier_new>
 80095b0:	4603      	mov	r3, r0
 80095b2:	6023      	str	r3, [r4, #0]

		    strategy->directions[0] = FORWARD;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	2201      	movs	r2, #1
 80095ba:	701a      	strb	r2, [r3, #0]
		    strategy->directions[1] = FORWARD;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	3301      	adds	r3, #1
 80095c2:	2201      	movs	r2, #1
 80095c4:	701a      	strb	r2, [r3, #0]
		    strategy->directions[2] = FORWARD;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	3302      	adds	r3, #2
 80095cc:	2201      	movs	r2, #1
 80095ce:	701a      	strb	r2, [r3, #0]
		    strategy->directions[3] = BACKWARD;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	3303      	adds	r3, #3
 80095d6:	22ff      	movs	r2, #255	; 0xff
 80095d8:	701a      	strb	r2, [r3, #0]
		    strategy->directions[4] = BACKWARD;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	3304      	adds	r3, #4
 80095e0:	22ff      	movs	r2, #255	; 0xff
 80095e2:	701a      	strb	r2, [r3, #0]
		    strategy->directions[5] = BACKWARD;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	3305      	adds	r3, #5
 80095ea:	22ff      	movs	r2, #255	; 0xff
 80095ec:	701a      	strb	r2, [r3, #0]

		    strategy->speeds[0] = 1000;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	4a0c      	ldr	r2, [pc, #48]	; (8009624 <strategy_initialize+0x250>)
 80095f4:	601a      	str	r2, [r3, #0]
		    strategy->speeds[1] = 1000;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	3304      	adds	r3, #4
 80095fc:	4a09      	ldr	r2, [pc, #36]	; (8009624 <strategy_initialize+0x250>)
 80095fe:	601a      	str	r2, [r3, #0]
		    strategy->speeds[2] = 1000;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	3308      	adds	r3, #8
 8009606:	4a07      	ldr	r2, [pc, #28]	; (8009624 <strategy_initialize+0x250>)
 8009608:	601a      	str	r2, [r3, #0]
		    strategy->speeds[4] = 1000;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	3310      	adds	r3, #16
 8009610:	4a04      	ldr	r2, [pc, #16]	; (8009624 <strategy_initialize+0x250>)
 8009612:	601a      	str	r2, [r3, #0]
		    strategy->speeds[5] = 1000;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	3314      	adds	r3, #20
 800961a:	4a02      	ldr	r2, [pc, #8]	; (8009624 <strategy_initialize+0x250>)
 800961c:	601a      	str	r2, [r3, #0]



		    return strategy;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	e1c0      	b.n	80099a4 <strategy_initialize+0x5d0>
 8009622:	bf00      	nop
 8009624:	447a0000 	.word	0x447a0000
 8009628:	43f15a5e 	.word	0x43f15a5e
 800962c:	445e45f4 	.word	0x445e45f4
 8009630:	4489ab33 	.word	0x4489ab33
 8009634:	44a43375 	.word	0x44a43375
 8009638:	450197a6 	.word	0x450197a6
 800963c:	4523be7b 	.word	0x4523be7b
 8009640:	4523bb85 	.word	0x4523bb85
 8009644:	452c8b91 	.word	0x452c8b91
 8009648:	4506d964 	.word	0x4506d964
 800964c:	44f908a4 	.word	0x44f908a4
 8009650:	4501aed9 	.word	0x4501aed9
 8009654:	44950c52 	.word	0x44950c52
 8009658:	43700000 	.word	0x43700000
 800965c:	447c121d 	.word	0x447c121d
 8009660:	447a0000 	.word	0x447a0000
 8009664:	44898ab0 	.word	0x44898ab0
 8009668:	43f154fe 	.word	0x43f154fe

	}
	else if(num == 2 || num == 3)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d003      	beq.n	800967a <strategy_initialize+0x2a6>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b03      	cmp	r3, #3
 8009676:	f040 811c 	bne.w	80098b2 <strategy_initialize+0x4de>
	{
		Strategy* strategy = (Strategy*) malloc(sizeof(Strategy));
 800967a:	2020      	movs	r0, #32
 800967c:	f000 fb44 	bl	8009d08 <malloc>
 8009680:	4603      	mov	r3, r0
 8009682:	613b      	str	r3, [r7, #16]
				    strategy->length = 6;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2206      	movs	r2, #6
 8009688:	601a      	str	r2, [r3, #0]
				    strategy->path = (Bezier**) malloc(sizeof(Bezier*) * strategy->length);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fb39 	bl	8009d08 <malloc>
 8009696:	4603      	mov	r3, r0
 8009698:	461a      	mov	r2, r3
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	605a      	str	r2, [r3, #4]

				    strategy->directions = (Direction*) malloc(sizeof(Direction) * strategy->length);
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 fb30 	bl	8009d08 <malloc>
 80096a8:	4603      	mov	r3, r0
 80096aa:	461a      	mov	r2, r3
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	609a      	str	r2, [r3, #8]
				    strategy->speeds = (float*) calloc(strategy->length+1, sizeof(float));
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3301      	adds	r3, #1
 80096b6:	2104      	movs	r1, #4
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 fb07 	bl	8009ccc <calloc>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	60da      	str	r2, [r3, #12]

				    strategy->onSiteActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3301      	adds	r3, #1
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 fb1a 	bl	8009d08 <malloc>
 80096d4:	4603      	mov	r3, r0
 80096d6:	461a      	mov	r2, r3
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	611a      	str	r2, [r3, #16]
				    strategy->onSiteActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3301      	adds	r3, #1
 80096e2:	2104      	movs	r1, #4
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 faf1 	bl	8009ccc <calloc>
 80096ea:	4603      	mov	r3, r0
 80096ec:	461a      	mov	r2, r3
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	619a      	str	r2, [r3, #24]
				    strategy->onMoveActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3301      	adds	r3, #1
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fb04 	bl	8009d08 <malloc>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	615a      	str	r2, [r3, #20]
				    strategy->onMoveActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3301      	adds	r3, #1
 800970e:	2104      	movs	r1, #4
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fadb 	bl	8009ccc <calloc>
 8009716:	4603      	mov	r3, r0
 8009718:	461a      	mov	r2, r3
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	61da      	str	r2, [r3, #28]

				    strategy->path[0] = bezier_new(240, 1000, 482.706, 1000, 889.093, 1000, 1101.350, 1000, 30);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	685c      	ldr	r4, [r3, #4]
 8009722:	201e      	movs	r0, #30
 8009724:	ed5f 3a32 	vldr	s7, [pc, #-200]	; 8009660 <strategy_initialize+0x28c>
 8009728:	ed1f 3a3f 	vldr	s6, [pc, #-252]	; 8009630 <strategy_initialize+0x25c>
 800972c:	ed5f 2a34 	vldr	s5, [pc, #-208]	; 8009660 <strategy_initialize+0x28c>
 8009730:	ed1f 2a42 	vldr	s4, [pc, #-264]	; 800962c <strategy_initialize+0x258>
 8009734:	ed5f 1a36 	vldr	s3, [pc, #-216]	; 8009660 <strategy_initialize+0x28c>
 8009738:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 8009628 <strategy_initialize+0x254>
 800973c:	ed5f 0a38 	vldr	s1, [pc, #-224]	; 8009660 <strategy_initialize+0x28c>
 8009740:	ed1f 0a3b 	vldr	s0, [pc, #-236]	; 8009658 <strategy_initialize+0x284>
 8009744:	f7fd fb9a 	bl	8006e7c <bezier_new>
 8009748:	4603      	mov	r3, r0
 800974a:	6023      	str	r3, [r4, #0]
				    strategy->path[1] = bezier_new(1101.350, 1000, 1313.608, 1000, 2073.478, 1000, 2073.478, 1000, 30);
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	1d1c      	adds	r4, r3, #4
 8009752:	201e      	movs	r0, #30
 8009754:	ed5f 3a3e 	vldr	s7, [pc, #-248]	; 8009660 <strategy_initialize+0x28c>
 8009758:	ed1f 3a49 	vldr	s6, [pc, #-292]	; 8009638 <strategy_initialize+0x264>
 800975c:	ed5f 2a40 	vldr	s5, [pc, #-256]	; 8009660 <strategy_initialize+0x28c>
 8009760:	ed1f 2a4b 	vldr	s4, [pc, #-300]	; 8009638 <strategy_initialize+0x264>
 8009764:	ed5f 1a42 	vldr	s3, [pc, #-264]	; 8009660 <strategy_initialize+0x28c>
 8009768:	ed1f 1a4e 	vldr	s2, [pc, #-312]	; 8009634 <strategy_initialize+0x260>
 800976c:	ed5f 0a44 	vldr	s1, [pc, #-272]	; 8009660 <strategy_initialize+0x28c>
 8009770:	ed1f 0a51 	vldr	s0, [pc, #-324]	; 8009630 <strategy_initialize+0x25c>
 8009774:	f7fd fb82 	bl	8006e7c <bezier_new>
 8009778:	4603      	mov	r3, r0
 800977a:	6023      	str	r3, [r4, #0]
				    strategy->path[2] = bezier_new(2073.478, 1000, 2073.478, 1000, 2619.905, 1000, 2760.723, 1000, 30);
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f103 0408 	add.w	r4, r3, #8
 8009784:	201e      	movs	r0, #30
 8009786:	ed5f 3a4a 	vldr	s7, [pc, #-296]	; 8009660 <strategy_initialize+0x28c>
 800978a:	ed1f 3a52 	vldr	s6, [pc, #-328]	; 8009644 <strategy_initialize+0x270>
 800978e:	ed5f 2a4c 	vldr	s5, [pc, #-304]	; 8009660 <strategy_initialize+0x28c>
 8009792:	ed1f 2a56 	vldr	s4, [pc, #-344]	; 800963c <strategy_initialize+0x268>
 8009796:	ed5f 1a4e 	vldr	s3, [pc, #-312]	; 8009660 <strategy_initialize+0x28c>
 800979a:	ed1f 1a59 	vldr	s2, [pc, #-356]	; 8009638 <strategy_initialize+0x264>
 800979e:	ed5f 0a50 	vldr	s1, [pc, #-320]	; 8009660 <strategy_initialize+0x28c>
 80097a2:	ed1f 0a5b 	vldr	s0, [pc, #-364]	; 8009638 <strategy_initialize+0x264>
 80097a6:	f7fd fb69 	bl	8006e7c <bezier_new>
 80097aa:	4603      	mov	r3, r0
 80097ac:	6023      	str	r3, [r4, #0]
				    strategy->path[3] = bezier_new(2760.723, 1000, 2619.720, 1000, 2157.587, 1000, 2074.928, 1000, 30);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f103 040c 	add.w	r4, r3, #12
 80097b6:	201e      	movs	r0, #30
 80097b8:	ed5f 3a57 	vldr	s7, [pc, #-348]	; 8009660 <strategy_initialize+0x28c>
 80097bc:	ed1f 3a5c 	vldr	s6, [pc, #-368]	; 8009650 <strategy_initialize+0x27c>
 80097c0:	ed5f 2a59 	vldr	s5, [pc, #-356]	; 8009660 <strategy_initialize+0x28c>
 80097c4:	ed1f 2a60 	vldr	s4, [pc, #-384]	; 8009648 <strategy_initialize+0x274>
 80097c8:	ed5f 1a5b 	vldr	s3, [pc, #-364]	; 8009660 <strategy_initialize+0x28c>
 80097cc:	ed1f 1a64 	vldr	s2, [pc, #-400]	; 8009640 <strategy_initialize+0x26c>
 80097d0:	ed5f 0a5d 	vldr	s1, [pc, #-372]	; 8009660 <strategy_initialize+0x28c>
 80097d4:	ed1f 0a65 	vldr	s0, [pc, #-404]	; 8009644 <strategy_initialize+0x270>
 80097d8:	f7fd fb50 	bl	8006e7c <bezier_new>
 80097dc:	4603      	mov	r3, r0
 80097de:	6023      	str	r3, [r4, #0]
				    strategy->path[4] = bezier_new(2074.928, 1000, 1992.270, 1000, 1192.385, 1000, 1100.334, 1000, 30);
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f103 0410 	add.w	r4, r3, #16
 80097e8:	201e      	movs	r0, #30
 80097ea:	ed5f 3a63 	vldr	s7, [pc, #-396]	; 8009660 <strategy_initialize+0x28c>
 80097ee:	ed1f 3a63 	vldr	s6, [pc, #-396]	; 8009664 <strategy_initialize+0x290>
 80097f2:	ed5f 2a65 	vldr	s5, [pc, #-404]	; 8009660 <strategy_initialize+0x28c>
 80097f6:	ed1f 2a69 	vldr	s4, [pc, #-420]	; 8009654 <strategy_initialize+0x280>
 80097fa:	ed5f 1a67 	vldr	s3, [pc, #-412]	; 8009660 <strategy_initialize+0x28c>
 80097fe:	ed1f 1a6d 	vldr	s2, [pc, #-436]	; 800964c <strategy_initialize+0x278>
 8009802:	ed5f 0a69 	vldr	s1, [pc, #-420]	; 8009660 <strategy_initialize+0x28c>
 8009806:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 8009650 <strategy_initialize+0x27c>
 800980a:	f7fd fb37 	bl	8006e7c <bezier_new>
 800980e:	4603      	mov	r3, r0
 8009810:	6023      	str	r3, [r4, #0]
				    strategy->path[5] = bezier_new(1100.334, 1000, 1008.283, 1000, 482.664, 1000, 240, 1000, 30);
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f103 0414 	add.w	r4, r3, #20
 800981a:	201e      	movs	r0, #30
 800981c:	ed5f 3a70 	vldr	s7, [pc, #-448]	; 8009660 <strategy_initialize+0x28c>
 8009820:	ed1f 3a73 	vldr	s6, [pc, #-460]	; 8009658 <strategy_initialize+0x284>
 8009824:	ed5f 2a72 	vldr	s5, [pc, #-456]	; 8009660 <strategy_initialize+0x28c>
 8009828:	ed1f 2a71 	vldr	s4, [pc, #-452]	; 8009668 <strategy_initialize+0x294>
 800982c:	ed5f 1a74 	vldr	s3, [pc, #-464]	; 8009660 <strategy_initialize+0x28c>
 8009830:	ed1f 1a76 	vldr	s2, [pc, #-472]	; 800965c <strategy_initialize+0x288>
 8009834:	ed5f 0a76 	vldr	s1, [pc, #-472]	; 8009660 <strategy_initialize+0x28c>
 8009838:	ed1f 0a76 	vldr	s0, [pc, #-472]	; 8009664 <strategy_initialize+0x290>
 800983c:	f7fd fb1e 	bl	8006e7c <bezier_new>
 8009840:	4603      	mov	r3, r0
 8009842:	6023      	str	r3, [r4, #0]

				    strategy->directions[0] = FORWARD;
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	2201      	movs	r2, #1
 800984a:	701a      	strb	r2, [r3, #0]
				    strategy->directions[1] = FORWARD;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	3301      	adds	r3, #1
 8009852:	2201      	movs	r2, #1
 8009854:	701a      	strb	r2, [r3, #0]
				    strategy->directions[2] = FORWARD;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	3302      	adds	r3, #2
 800985c:	2201      	movs	r2, #1
 800985e:	701a      	strb	r2, [r3, #0]
				    strategy->directions[3] = BACKWARD;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	3303      	adds	r3, #3
 8009866:	22ff      	movs	r2, #255	; 0xff
 8009868:	701a      	strb	r2, [r3, #0]
				    strategy->directions[4] = BACKWARD;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	3304      	adds	r3, #4
 8009870:	22ff      	movs	r2, #255	; 0xff
 8009872:	701a      	strb	r2, [r3, #0]
				    strategy->directions[5] = BACKWARD;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	3305      	adds	r3, #5
 800987a:	22ff      	movs	r2, #255	; 0xff
 800987c:	701a      	strb	r2, [r3, #0]

				    strategy->speeds[0] = 1000;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	4a4a      	ldr	r2, [pc, #296]	; (80099ac <strategy_initialize+0x5d8>)
 8009884:	601a      	str	r2, [r3, #0]
				    strategy->speeds[1] = 1000;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	3304      	adds	r3, #4
 800988c:	4a47      	ldr	r2, [pc, #284]	; (80099ac <strategy_initialize+0x5d8>)
 800988e:	601a      	str	r2, [r3, #0]
				    strategy->speeds[2] = 1000;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	3308      	adds	r3, #8
 8009896:	4a45      	ldr	r2, [pc, #276]	; (80099ac <strategy_initialize+0x5d8>)
 8009898:	601a      	str	r2, [r3, #0]
				    strategy->speeds[4] = 1000;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	3310      	adds	r3, #16
 80098a0:	4a42      	ldr	r2, [pc, #264]	; (80099ac <strategy_initialize+0x5d8>)
 80098a2:	601a      	str	r2, [r3, #0]
				    strategy->speeds[5] = 1000;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	3314      	adds	r3, #20
 80098aa:	4a40      	ldr	r2, [pc, #256]	; (80099ac <strategy_initialize+0x5d8>)
 80098ac:	601a      	str	r2, [r3, #0]



				    return strategy;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	e078      	b.n	80099a4 <strategy_initialize+0x5d0>
	}
	else if(num == 5 || num == 4)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b05      	cmp	r3, #5
 80098b6:	d002      	beq.n	80098be <strategy_initialize+0x4ea>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d172      	bne.n	80099a4 <strategy_initialize+0x5d0>
	{
		Strategy* strategy = (Strategy*) malloc(sizeof(Strategy));
 80098be:	2020      	movs	r0, #32
 80098c0:	f000 fa22 	bl	8009d08 <malloc>
 80098c4:	4603      	mov	r3, r0
 80098c6:	617b      	str	r3, [r7, #20]
		    strategy->length = 1;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	2201      	movs	r2, #1
 80098cc:	601a      	str	r2, [r3, #0]
		    strategy->path = (Bezier**) malloc(sizeof(Bezier*) * strategy->length);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fa17 	bl	8009d08 <malloc>
 80098da:	4603      	mov	r3, r0
 80098dc:	461a      	mov	r2, r3
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	605a      	str	r2, [r3, #4]

		    strategy->directions = (Direction*) malloc(sizeof(Direction) * strategy->length);
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fa0e 	bl	8009d08 <malloc>
 80098ec:	4603      	mov	r3, r0
 80098ee:	461a      	mov	r2, r3
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	609a      	str	r2, [r3, #8]
		    strategy->speeds = (float*) calloc(strategy->length+1, sizeof(float));
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3301      	adds	r3, #1
 80098fa:	2104      	movs	r1, #4
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 f9e5 	bl	8009ccc <calloc>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	60da      	str	r2, [r3, #12]

		    strategy->onSiteActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3301      	adds	r3, #1
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4618      	mov	r0, r3
 8009914:	f000 f9f8 	bl	8009d08 <malloc>
 8009918:	4603      	mov	r3, r0
 800991a:	461a      	mov	r2, r3
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	611a      	str	r2, [r3, #16]
		    strategy->onSiteActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3301      	adds	r3, #1
 8009926:	2104      	movs	r1, #4
 8009928:	4618      	mov	r0, r3
 800992a:	f000 f9cf 	bl	8009ccc <calloc>
 800992e:	4603      	mov	r3, r0
 8009930:	461a      	mov	r2, r3
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	619a      	str	r2, [r3, #24]
		    strategy->onMoveActions = (uint8_t**) malloc(sizeof(uint8_t*) * (strategy->length+1));
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3301      	adds	r3, #1
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4618      	mov	r0, r3
 8009940:	f000 f9e2 	bl	8009d08 <malloc>
 8009944:	4603      	mov	r3, r0
 8009946:	461a      	mov	r2, r3
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	615a      	str	r2, [r3, #20]
		    strategy->onMoveActionsLengths = (int*) calloc((strategy->length+1), sizeof(int));
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3301      	adds	r3, #1
 8009952:	2104      	movs	r1, #4
 8009954:	4618      	mov	r0, r3
 8009956:	f000 f9b9 	bl	8009ccc <calloc>
 800995a:	4603      	mov	r3, r0
 800995c:	461a      	mov	r2, r3
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	61da      	str	r2, [r3, #28]

		    strategy->path[0] = bezier_new(167.536, 1778.613, 250.934, 1778.613, 1165.555, 1771.648, 1265.555, 1771.648, 30);
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	685c      	ldr	r4, [r3, #4]
 8009966:	201e      	movs	r0, #30
 8009968:	eddf 3a11 	vldr	s7, [pc, #68]	; 80099b0 <strategy_initialize+0x5dc>
 800996c:	ed9f 3a11 	vldr	s6, [pc, #68]	; 80099b4 <strategy_initialize+0x5e0>
 8009970:	eddf 2a0f 	vldr	s5, [pc, #60]	; 80099b0 <strategy_initialize+0x5dc>
 8009974:	ed9f 2a10 	vldr	s4, [pc, #64]	; 80099b8 <strategy_initialize+0x5e4>
 8009978:	eddf 1a10 	vldr	s3, [pc, #64]	; 80099bc <strategy_initialize+0x5e8>
 800997c:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80099c0 <strategy_initialize+0x5ec>
 8009980:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80099bc <strategy_initialize+0x5e8>
 8009984:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80099c4 <strategy_initialize+0x5f0>
 8009988:	f7fd fa78 	bl	8006e7c <bezier_new>
 800998c:	4603      	mov	r3, r0
 800998e:	6023      	str	r3, [r4, #0]

		    strategy->directions[0] = FORWARD;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	2201      	movs	r2, #1
 8009996:	701a      	strb	r2, [r3, #0]

		    strategy->speeds[0] = 468;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	4a0a      	ldr	r2, [pc, #40]	; (80099c8 <strategy_initialize+0x5f4>)
 800999e:	601a      	str	r2, [r3, #0]



		    return strategy;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	e7ff      	b.n	80099a4 <strategy_initialize+0x5d0>
	}
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	371c      	adds	r7, #28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd90      	pop	{r4, r7, pc}
 80099ac:	447a0000 	.word	0x447a0000
 80099b0:	44dd74bc 	.word	0x44dd74bc
 80099b4:	449e31c3 	.word	0x449e31c3
 80099b8:	4491b1c3 	.word	0x4491b1c3
 80099bc:	44de539e 	.word	0x44de539e
 80099c0:	437aef1b 	.word	0x437aef1b
 80099c4:	43278937 	.word	0x43278937
 80099c8:	43ea0000 	.word	0x43ea0000

080099cc <switchTeam>:
#include "symetry.h"

void switchTeam(Strategy* strategy) {
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	robot.team = (robot.team == YELLOW)?PURPLE:YELLOW;
 80099d4:	4b2f      	ldr	r3, [pc, #188]	; (8009a94 <switchTeam+0xc8>)
 80099d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bf0c      	ite	eq
 80099de:	2301      	moveq	r3, #1
 80099e0:	2300      	movne	r3, #0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	461a      	mov	r2, r3
 80099e6:	4b2b      	ldr	r3, [pc, #172]	; (8009a94 <switchTeam+0xc8>)
 80099e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	for (int i=0; i<strategy->length; i++) {
 80099ec:	2300      	movs	r3, #0
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	e045      	b.n	8009a7e <switchTeam+0xb2>
		Bezier* b = strategy->path[i];
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60bb      	str	r3, [r7, #8]
		bezier_set(
			b,
		    3000 - b->p1.x, b->p1.y,
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	edd3 7a00 	vldr	s15, [r3]
		bezier_set(
 8009a06:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8009a98 <switchTeam+0xcc>
 8009a0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	edd3 6a01 	vldr	s13, [r3, #4]
			3000 - b->p2.x, b->p2.y,
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	edd3 7a02 	vldr	s15, [r3, #8]
		bezier_set(
 8009a1a:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8009a98 <switchTeam+0xcc>
 8009a1e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	edd3 5a03 	vldr	s11, [r3, #12]
			3000 - b->p3.x, b->p3.y,
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	edd3 7a04 	vldr	s15, [r3, #16]
		bezier_set(
 8009a2e:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 8009a98 <switchTeam+0xcc>
 8009a32:	ee35 5a67 	vsub.f32	s10, s10, s15
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	edd3 4a05 	vldr	s9, [r3, #20]
			3000 - b->p4.x, b->p4.y,
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	edd3 7a06 	vldr	s15, [r3, #24]
		bezier_set(
 8009a42:	ed9f 4a15 	vldr	s8, [pc, #84]	; 8009a98 <switchTeam+0xcc>
 8009a46:	ee74 7a67 	vsub.f32	s15, s8, s15
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	ed93 4a07 	vldr	s8, [r3, #28]
 8009a50:	211e      	movs	r1, #30
 8009a52:	eef0 3a44 	vmov.f32	s7, s8
 8009a56:	eeb0 3a67 	vmov.f32	s6, s15
 8009a5a:	eef0 2a64 	vmov.f32	s5, s9
 8009a5e:	eeb0 2a45 	vmov.f32	s4, s10
 8009a62:	eef0 1a65 	vmov.f32	s3, s11
 8009a66:	eeb0 1a46 	vmov.f32	s2, s12
 8009a6a:	eef0 0a66 	vmov.f32	s1, s13
 8009a6e:	eeb0 0a47 	vmov.f32	s0, s14
 8009a72:	68b8      	ldr	r0, [r7, #8]
 8009a74:	f7fd fa41 	bl	8006efa <bezier_set>
	for (int i=0; i<strategy->length; i++) {
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	dbb4      	blt.n	80099f2 <switchTeam+0x26>

			if (strategy->onMoveActions[i][j] == 0xCB)
				strategy->onMoveActions[i][j] = 0xCA;
		}*/
	}
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000d38 	.word	0x20000d38
 8009a98:	453b8000 	.word	0x453b8000

08009a9c <vector2_new>:
#include "vector2.h"


Vector2 vector2_new(float x, float y) {
 8009a9c:	b480      	push	{r7}
 8009a9e:	b089      	sub	sp, #36	; 0x24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	ed87 0a03 	vstr	s0, [r7, #12]
 8009aa6:	edc7 0a02 	vstr	s1, [r7, #8]
    Vector2 u = { x, y };
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	617b      	str	r3, [r7, #20]
    return u;
 8009ab2:	f107 0318 	add.w	r3, r7, #24
 8009ab6:	f107 0210 	add.w	r2, r7, #16
 8009aba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009abe:	e883 0003 	stmia.w	r3, {r0, r1}
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	ee07 2a10 	vmov	s14, r2
 8009aca:	ee07 3a90 	vmov	s15, r3
}
 8009ace:	eeb0 0a47 	vmov.f32	s0, s14
 8009ad2:	eef0 0a67 	vmov.f32	s1, s15
 8009ad6:	3724      	adds	r7, #36	; 0x24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <vector2_norm>:
void vector2_display(Vector2 u) {
    printf("{ x: %f, y: %f }\r\n", u.x, u.y);
}


float vector2_norm(Vector2 u) {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	eeb0 7a40 	vmov.f32	s14, s0
 8009aea:	eef0 7a60 	vmov.f32	s15, s1
 8009aee:	ed87 7a00 	vstr	s14, [r7]
 8009af2:	edc7 7a01 	vstr	s15, [r7, #4]
    return sqrt(u.x*u.x + u.y*u.y);
 8009af6:	ed97 7a00 	vldr	s14, [r7]
 8009afa:	edd7 7a00 	vldr	s15, [r7]
 8009afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b02:	edd7 6a01 	vldr	s13, [r7, #4]
 8009b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b12:	ee17 0a90 	vmov	r0, s15
 8009b16:	f7f6 fd37 	bl	8000588 <__aeabi_f2d>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	ec43 2b10 	vmov	d0, r2, r3
 8009b22:	f002 fe93 	bl	800c84c <sqrt>
 8009b26:	ec53 2b10 	vmov	r2, r3, d0
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	f7f7 f85b 	bl	8000be8 <__aeabi_d2f>
 8009b32:	4603      	mov	r3, r0
 8009b34:	ee07 3a90 	vmov	s15, r3
}
 8009b38:	eeb0 0a67 	vmov.f32	s0, s15
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <vector2_angle>:


float vector2_angle(Vector2 u) {
 8009b42:	b5b0      	push	{r4, r5, r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	eeb0 7a40 	vmov.f32	s14, s0
 8009b4c:	eef0 7a60 	vmov.f32	s15, s1
 8009b50:	ed87 7a00 	vstr	s14, [r7]
 8009b54:	edc7 7a01 	vstr	s15, [r7, #4]
    return atan2(u.y, u.x);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7f6 fd14 	bl	8000588 <__aeabi_f2d>
 8009b60:	4604      	mov	r4, r0
 8009b62:	460d      	mov	r5, r1
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7f6 fd0e 	bl	8000588 <__aeabi_f2d>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	ec43 2b11 	vmov	d1, r2, r3
 8009b74:	ec45 4b10 	vmov	d0, r4, r5
 8009b78:	f002 fdc8 	bl	800c70c <atan2>
 8009b7c:	ec53 2b10 	vmov	r2, r3, d0
 8009b80:	4610      	mov	r0, r2
 8009b82:	4619      	mov	r1, r3
 8009b84:	f7f7 f830 	bl	8000be8 <__aeabi_d2f>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	ee07 3a90 	vmov	s15, r3
}
 8009b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bdb0      	pop	{r4, r5, r7, pc}

08009b98 <vector2_dist2>:
    Vector2 diff = { v.x - u.x, v.y - u.y };
    return vector2_norm(diff);
}


float vector2_dist2(Vector2 u, Vector2 v) {
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	eeb0 6a40 	vmov.f32	s12, s0
 8009ba2:	eef0 6a60 	vmov.f32	s13, s1
 8009ba6:	eeb0 7a41 	vmov.f32	s14, s2
 8009baa:	eef0 7a61 	vmov.f32	s15, s3
 8009bae:	ed87 6a02 	vstr	s12, [r7, #8]
 8009bb2:	edc7 6a03 	vstr	s13, [r7, #12]
 8009bb6:	ed87 7a00 	vstr	s14, [r7]
 8009bba:	edc7 7a01 	vstr	s15, [r7, #4]
    Vector2 diff = { v.x - u.x, v.y - u.y };
 8009bbe:	ed97 7a00 	vldr	s14, [r7]
 8009bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8009bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bca:	edc7 7a04 	vstr	s15, [r7, #16]
 8009bce:	ed97 7a01 	vldr	s14, [r7, #4]
 8009bd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8009bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bda:	edc7 7a05 	vstr	s15, [r7, #20]
    return diff.x*diff.x + diff.y*diff.y;
 8009bde:	ed97 7a04 	vldr	s14, [r7, #16]
 8009be2:	edd7 7a04 	vldr	s15, [r7, #16]
 8009be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bea:	edd7 6a05 	vldr	s13, [r7, #20]
 8009bee:	edd7 7a05 	vldr	s15, [r7, #20]
 8009bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8009bfe:	371c      	adds	r7, #28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <vector2_diff>:
    Vector2 sum = { v.x + u.x, v.y + u.y };
    return sum;
}


Vector2 vector2_diff(Vector2 u, Vector2 v) {
 8009c08:	b480      	push	{r7}
 8009c0a:	b08b      	sub	sp, #44	; 0x2c
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	eeb0 6a40 	vmov.f32	s12, s0
 8009c12:	eef0 6a60 	vmov.f32	s13, s1
 8009c16:	eeb0 7a41 	vmov.f32	s14, s2
 8009c1a:	eef0 7a61 	vmov.f32	s15, s3
 8009c1e:	ed87 6a04 	vstr	s12, [r7, #16]
 8009c22:	edc7 6a05 	vstr	s13, [r7, #20]
 8009c26:	ed87 7a02 	vstr	s14, [r7, #8]
 8009c2a:	edc7 7a03 	vstr	s15, [r7, #12]
    Vector2 diff = { u.x - v.x, u.y - v.y };
 8009c2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8009c32:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c3a:	edc7 7a06 	vstr	s15, [r7, #24]
 8009c3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8009c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c4a:	edc7 7a07 	vstr	s15, [r7, #28]
    return diff;
 8009c4e:	f107 0320 	add.w	r3, r7, #32
 8009c52:	f107 0218 	add.w	r2, r7, #24
 8009c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c5a:	e883 0003 	stmia.w	r3, {r0, r1}
 8009c5e:	6a3a      	ldr	r2, [r7, #32]
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	ee07 2a10 	vmov	s14, r2
 8009c66:	ee07 3a90 	vmov	s15, r3
}
 8009c6a:	eeb0 0a47 	vmov.f32	s0, s14
 8009c6e:	eef0 0a67 	vmov.f32	s1, s15
 8009c72:	372c      	adds	r7, #44	; 0x2c
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <vector2_cross>:
float vector2_dot(Vector2 u, Vector2 v) {
    return u.x * v.x + u.y * v.y;
}


float vector2_cross(Vector2 u, Vector2 v) {
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	eeb0 6a40 	vmov.f32	s12, s0
 8009c86:	eef0 6a60 	vmov.f32	s13, s1
 8009c8a:	eeb0 7a41 	vmov.f32	s14, s2
 8009c8e:	eef0 7a61 	vmov.f32	s15, s3
 8009c92:	ed87 6a02 	vstr	s12, [r7, #8]
 8009c96:	edc7 6a03 	vstr	s13, [r7, #12]
 8009c9a:	ed87 7a00 	vstr	s14, [r7]
 8009c9e:	edc7 7a01 	vstr	s15, [r7, #4]
    return u.x * v.y - u.y * v.x;
 8009ca2:	ed97 7a02 	vldr	s14, [r7, #8]
 8009ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8009caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cae:	edd7 6a03 	vldr	s13, [r7, #12]
 8009cb2:	edd7 7a00 	vldr	s15, [r7]
 8009cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cba:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8009cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <calloc>:
 8009ccc:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <calloc+0xc>)
 8009cce:	460a      	mov	r2, r1
 8009cd0:	4601      	mov	r1, r0
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	f000 b802 	b.w	8009cdc <_calloc_r>
 8009cd8:	20000064 	.word	0x20000064

08009cdc <_calloc_r>:
 8009cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cde:	fba1 2402 	umull	r2, r4, r1, r2
 8009ce2:	b94c      	cbnz	r4, 8009cf8 <_calloc_r+0x1c>
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	9201      	str	r2, [sp, #4]
 8009ce8:	f000 f836 	bl	8009d58 <_malloc_r>
 8009cec:	9a01      	ldr	r2, [sp, #4]
 8009cee:	4605      	mov	r5, r0
 8009cf0:	b930      	cbnz	r0, 8009d00 <_calloc_r+0x24>
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	b003      	add	sp, #12
 8009cf6:	bd30      	pop	{r4, r5, pc}
 8009cf8:	220c      	movs	r2, #12
 8009cfa:	6002      	str	r2, [r0, #0]
 8009cfc:	2500      	movs	r5, #0
 8009cfe:	e7f8      	b.n	8009cf2 <_calloc_r+0x16>
 8009d00:	4621      	mov	r1, r4
 8009d02:	f000 ff11 	bl	800ab28 <memset>
 8009d06:	e7f4      	b.n	8009cf2 <_calloc_r+0x16>

08009d08 <malloc>:
 8009d08:	4b02      	ldr	r3, [pc, #8]	; (8009d14 <malloc+0xc>)
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	6818      	ldr	r0, [r3, #0]
 8009d0e:	f000 b823 	b.w	8009d58 <_malloc_r>
 8009d12:	bf00      	nop
 8009d14:	20000064 	.word	0x20000064

08009d18 <sbrk_aligned>:
 8009d18:	b570      	push	{r4, r5, r6, lr}
 8009d1a:	4e0e      	ldr	r6, [pc, #56]	; (8009d54 <sbrk_aligned+0x3c>)
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	6831      	ldr	r1, [r6, #0]
 8009d20:	4605      	mov	r5, r0
 8009d22:	b911      	cbnz	r1, 8009d2a <sbrk_aligned+0x12>
 8009d24:	f000 ff40 	bl	800aba8 <_sbrk_r>
 8009d28:	6030      	str	r0, [r6, #0]
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f000 ff3b 	bl	800aba8 <_sbrk_r>
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	d00a      	beq.n	8009d4c <sbrk_aligned+0x34>
 8009d36:	1cc4      	adds	r4, r0, #3
 8009d38:	f024 0403 	bic.w	r4, r4, #3
 8009d3c:	42a0      	cmp	r0, r4
 8009d3e:	d007      	beq.n	8009d50 <sbrk_aligned+0x38>
 8009d40:	1a21      	subs	r1, r4, r0
 8009d42:	4628      	mov	r0, r5
 8009d44:	f000 ff30 	bl	800aba8 <_sbrk_r>
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d101      	bne.n	8009d50 <sbrk_aligned+0x38>
 8009d4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d50:	4620      	mov	r0, r4
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	2000195c 	.word	0x2000195c

08009d58 <_malloc_r>:
 8009d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d5c:	1ccd      	adds	r5, r1, #3
 8009d5e:	f025 0503 	bic.w	r5, r5, #3
 8009d62:	3508      	adds	r5, #8
 8009d64:	2d0c      	cmp	r5, #12
 8009d66:	bf38      	it	cc
 8009d68:	250c      	movcc	r5, #12
 8009d6a:	2d00      	cmp	r5, #0
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	db01      	blt.n	8009d74 <_malloc_r+0x1c>
 8009d70:	42a9      	cmp	r1, r5
 8009d72:	d905      	bls.n	8009d80 <_malloc_r+0x28>
 8009d74:	230c      	movs	r3, #12
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	2600      	movs	r6, #0
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e54 <_malloc_r+0xfc>
 8009d84:	f000 f868 	bl	8009e58 <__malloc_lock>
 8009d88:	f8d8 3000 	ldr.w	r3, [r8]
 8009d8c:	461c      	mov	r4, r3
 8009d8e:	bb5c      	cbnz	r4, 8009de8 <_malloc_r+0x90>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4638      	mov	r0, r7
 8009d94:	f7ff ffc0 	bl	8009d18 <sbrk_aligned>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	d155      	bne.n	8009e4a <_malloc_r+0xf2>
 8009d9e:	f8d8 4000 	ldr.w	r4, [r8]
 8009da2:	4626      	mov	r6, r4
 8009da4:	2e00      	cmp	r6, #0
 8009da6:	d145      	bne.n	8009e34 <_malloc_r+0xdc>
 8009da8:	2c00      	cmp	r4, #0
 8009daa:	d048      	beq.n	8009e3e <_malloc_r+0xe6>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	4631      	mov	r1, r6
 8009db0:	4638      	mov	r0, r7
 8009db2:	eb04 0903 	add.w	r9, r4, r3
 8009db6:	f000 fef7 	bl	800aba8 <_sbrk_r>
 8009dba:	4581      	cmp	r9, r0
 8009dbc:	d13f      	bne.n	8009e3e <_malloc_r+0xe6>
 8009dbe:	6821      	ldr	r1, [r4, #0]
 8009dc0:	1a6d      	subs	r5, r5, r1
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	f7ff ffa7 	bl	8009d18 <sbrk_aligned>
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d037      	beq.n	8009e3e <_malloc_r+0xe6>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	442b      	add	r3, r5
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d038      	beq.n	8009e4e <_malloc_r+0xf6>
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	42a2      	cmp	r2, r4
 8009de0:	d12b      	bne.n	8009e3a <_malloc_r+0xe2>
 8009de2:	2200      	movs	r2, #0
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	e00f      	b.n	8009e08 <_malloc_r+0xb0>
 8009de8:	6822      	ldr	r2, [r4, #0]
 8009dea:	1b52      	subs	r2, r2, r5
 8009dec:	d41f      	bmi.n	8009e2e <_malloc_r+0xd6>
 8009dee:	2a0b      	cmp	r2, #11
 8009df0:	d917      	bls.n	8009e22 <_malloc_r+0xca>
 8009df2:	1961      	adds	r1, r4, r5
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	6025      	str	r5, [r4, #0]
 8009df8:	bf18      	it	ne
 8009dfa:	6059      	strne	r1, [r3, #4]
 8009dfc:	6863      	ldr	r3, [r4, #4]
 8009dfe:	bf08      	it	eq
 8009e00:	f8c8 1000 	streq.w	r1, [r8]
 8009e04:	5162      	str	r2, [r4, r5]
 8009e06:	604b      	str	r3, [r1, #4]
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f104 060b 	add.w	r6, r4, #11
 8009e0e:	f000 f829 	bl	8009e64 <__malloc_unlock>
 8009e12:	f026 0607 	bic.w	r6, r6, #7
 8009e16:	1d23      	adds	r3, r4, #4
 8009e18:	1af2      	subs	r2, r6, r3
 8009e1a:	d0ae      	beq.n	8009d7a <_malloc_r+0x22>
 8009e1c:	1b9b      	subs	r3, r3, r6
 8009e1e:	50a3      	str	r3, [r4, r2]
 8009e20:	e7ab      	b.n	8009d7a <_malloc_r+0x22>
 8009e22:	42a3      	cmp	r3, r4
 8009e24:	6862      	ldr	r2, [r4, #4]
 8009e26:	d1dd      	bne.n	8009de4 <_malloc_r+0x8c>
 8009e28:	f8c8 2000 	str.w	r2, [r8]
 8009e2c:	e7ec      	b.n	8009e08 <_malloc_r+0xb0>
 8009e2e:	4623      	mov	r3, r4
 8009e30:	6864      	ldr	r4, [r4, #4]
 8009e32:	e7ac      	b.n	8009d8e <_malloc_r+0x36>
 8009e34:	4634      	mov	r4, r6
 8009e36:	6876      	ldr	r6, [r6, #4]
 8009e38:	e7b4      	b.n	8009da4 <_malloc_r+0x4c>
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	e7cc      	b.n	8009dd8 <_malloc_r+0x80>
 8009e3e:	230c      	movs	r3, #12
 8009e40:	603b      	str	r3, [r7, #0]
 8009e42:	4638      	mov	r0, r7
 8009e44:	f000 f80e 	bl	8009e64 <__malloc_unlock>
 8009e48:	e797      	b.n	8009d7a <_malloc_r+0x22>
 8009e4a:	6025      	str	r5, [r4, #0]
 8009e4c:	e7dc      	b.n	8009e08 <_malloc_r+0xb0>
 8009e4e:	605b      	str	r3, [r3, #4]
 8009e50:	deff      	udf	#255	; 0xff
 8009e52:	bf00      	nop
 8009e54:	20001958 	.word	0x20001958

08009e58 <__malloc_lock>:
 8009e58:	4801      	ldr	r0, [pc, #4]	; (8009e60 <__malloc_lock+0x8>)
 8009e5a:	f000 bef1 	b.w	800ac40 <__retarget_lock_acquire_recursive>
 8009e5e:	bf00      	nop
 8009e60:	20001aa0 	.word	0x20001aa0

08009e64 <__malloc_unlock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	; (8009e6c <__malloc_unlock+0x8>)
 8009e66:	f000 beec 	b.w	800ac42 <__retarget_lock_release_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	20001aa0 	.word	0x20001aa0

08009e70 <__cvt>:
 8009e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	ec55 4b10 	vmov	r4, r5, d0
 8009e78:	2d00      	cmp	r5, #0
 8009e7a:	460e      	mov	r6, r1
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	462b      	mov	r3, r5
 8009e80:	bfbb      	ittet	lt
 8009e82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e86:	461d      	movlt	r5, r3
 8009e88:	2300      	movge	r3, #0
 8009e8a:	232d      	movlt	r3, #45	; 0x2d
 8009e8c:	700b      	strb	r3, [r1, #0]
 8009e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e94:	4691      	mov	r9, r2
 8009e96:	f023 0820 	bic.w	r8, r3, #32
 8009e9a:	bfbc      	itt	lt
 8009e9c:	4622      	movlt	r2, r4
 8009e9e:	4614      	movlt	r4, r2
 8009ea0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ea4:	d005      	beq.n	8009eb2 <__cvt+0x42>
 8009ea6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009eaa:	d100      	bne.n	8009eae <__cvt+0x3e>
 8009eac:	3601      	adds	r6, #1
 8009eae:	2102      	movs	r1, #2
 8009eb0:	e000      	b.n	8009eb4 <__cvt+0x44>
 8009eb2:	2103      	movs	r1, #3
 8009eb4:	ab03      	add	r3, sp, #12
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	ab02      	add	r3, sp, #8
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	ec45 4b10 	vmov	d0, r4, r5
 8009ec0:	4653      	mov	r3, sl
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	f000 ff48 	bl	800ad58 <_dtoa_r>
 8009ec8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ecc:	4607      	mov	r7, r0
 8009ece:	d102      	bne.n	8009ed6 <__cvt+0x66>
 8009ed0:	f019 0f01 	tst.w	r9, #1
 8009ed4:	d022      	beq.n	8009f1c <__cvt+0xac>
 8009ed6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009eda:	eb07 0906 	add.w	r9, r7, r6
 8009ede:	d110      	bne.n	8009f02 <__cvt+0x92>
 8009ee0:	783b      	ldrb	r3, [r7, #0]
 8009ee2:	2b30      	cmp	r3, #48	; 0x30
 8009ee4:	d10a      	bne.n	8009efc <__cvt+0x8c>
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4620      	mov	r0, r4
 8009eec:	4629      	mov	r1, r5
 8009eee:	f7f6 fe0b 	bl	8000b08 <__aeabi_dcmpeq>
 8009ef2:	b918      	cbnz	r0, 8009efc <__cvt+0x8c>
 8009ef4:	f1c6 0601 	rsb	r6, r6, #1
 8009ef8:	f8ca 6000 	str.w	r6, [sl]
 8009efc:	f8da 3000 	ldr.w	r3, [sl]
 8009f00:	4499      	add	r9, r3
 8009f02:	2200      	movs	r2, #0
 8009f04:	2300      	movs	r3, #0
 8009f06:	4620      	mov	r0, r4
 8009f08:	4629      	mov	r1, r5
 8009f0a:	f7f6 fdfd 	bl	8000b08 <__aeabi_dcmpeq>
 8009f0e:	b108      	cbz	r0, 8009f14 <__cvt+0xa4>
 8009f10:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f14:	2230      	movs	r2, #48	; 0x30
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	454b      	cmp	r3, r9
 8009f1a:	d307      	bcc.n	8009f2c <__cvt+0xbc>
 8009f1c:	9b03      	ldr	r3, [sp, #12]
 8009f1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f20:	1bdb      	subs	r3, r3, r7
 8009f22:	4638      	mov	r0, r7
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	b004      	add	sp, #16
 8009f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2c:	1c59      	adds	r1, r3, #1
 8009f2e:	9103      	str	r1, [sp, #12]
 8009f30:	701a      	strb	r2, [r3, #0]
 8009f32:	e7f0      	b.n	8009f16 <__cvt+0xa6>

08009f34 <__exponent>:
 8009f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f36:	4603      	mov	r3, r0
 8009f38:	2900      	cmp	r1, #0
 8009f3a:	bfb8      	it	lt
 8009f3c:	4249      	neglt	r1, r1
 8009f3e:	f803 2b02 	strb.w	r2, [r3], #2
 8009f42:	bfb4      	ite	lt
 8009f44:	222d      	movlt	r2, #45	; 0x2d
 8009f46:	222b      	movge	r2, #43	; 0x2b
 8009f48:	2909      	cmp	r1, #9
 8009f4a:	7042      	strb	r2, [r0, #1]
 8009f4c:	dd2a      	ble.n	8009fa4 <__exponent+0x70>
 8009f4e:	f10d 0207 	add.w	r2, sp, #7
 8009f52:	4617      	mov	r7, r2
 8009f54:	260a      	movs	r6, #10
 8009f56:	4694      	mov	ip, r2
 8009f58:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f5c:	fb06 1415 	mls	r4, r6, r5, r1
 8009f60:	3430      	adds	r4, #48	; 0x30
 8009f62:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009f66:	460c      	mov	r4, r1
 8009f68:	2c63      	cmp	r4, #99	; 0x63
 8009f6a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009f6e:	4629      	mov	r1, r5
 8009f70:	dcf1      	bgt.n	8009f56 <__exponent+0x22>
 8009f72:	3130      	adds	r1, #48	; 0x30
 8009f74:	f1ac 0402 	sub.w	r4, ip, #2
 8009f78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f7c:	1c41      	adds	r1, r0, #1
 8009f7e:	4622      	mov	r2, r4
 8009f80:	42ba      	cmp	r2, r7
 8009f82:	d30a      	bcc.n	8009f9a <__exponent+0x66>
 8009f84:	f10d 0209 	add.w	r2, sp, #9
 8009f88:	eba2 020c 	sub.w	r2, r2, ip
 8009f8c:	42bc      	cmp	r4, r7
 8009f8e:	bf88      	it	hi
 8009f90:	2200      	movhi	r2, #0
 8009f92:	4413      	add	r3, r2
 8009f94:	1a18      	subs	r0, r3, r0
 8009f96:	b003      	add	sp, #12
 8009f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009f9e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009fa2:	e7ed      	b.n	8009f80 <__exponent+0x4c>
 8009fa4:	2330      	movs	r3, #48	; 0x30
 8009fa6:	3130      	adds	r1, #48	; 0x30
 8009fa8:	7083      	strb	r3, [r0, #2]
 8009faa:	70c1      	strb	r1, [r0, #3]
 8009fac:	1d03      	adds	r3, r0, #4
 8009fae:	e7f1      	b.n	8009f94 <__exponent+0x60>

08009fb0 <_printf_float>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	ed2d 8b02 	vpush	{d8}
 8009fb8:	b08d      	sub	sp, #52	; 0x34
 8009fba:	460c      	mov	r4, r1
 8009fbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009fc0:	4616      	mov	r6, r2
 8009fc2:	461f      	mov	r7, r3
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	f000 fdb7 	bl	800ab38 <_localeconv_r>
 8009fca:	f8d0 a000 	ldr.w	sl, [r0]
 8009fce:	4650      	mov	r0, sl
 8009fd0:	f7f6 f96e 	bl	80002b0 <strlen>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009fe4:	3307      	adds	r3, #7
 8009fe6:	f023 0307 	bic.w	r3, r3, #7
 8009fea:	f103 0208 	add.w	r2, r3, #8
 8009fee:	f8c8 2000 	str.w	r2, [r8]
 8009ff2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ff6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ffa:	9307      	str	r3, [sp, #28]
 8009ffc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a000:	ee08 0a10 	vmov	s16, r0
 800a004:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a00c:	4b9e      	ldr	r3, [pc, #632]	; (800a288 <_printf_float+0x2d8>)
 800a00e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a012:	f7f6 fdab 	bl	8000b6c <__aeabi_dcmpun>
 800a016:	bb88      	cbnz	r0, 800a07c <_printf_float+0xcc>
 800a018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a01c:	4b9a      	ldr	r3, [pc, #616]	; (800a288 <_printf_float+0x2d8>)
 800a01e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a022:	f7f6 fd85 	bl	8000b30 <__aeabi_dcmple>
 800a026:	bb48      	cbnz	r0, 800a07c <_printf_float+0xcc>
 800a028:	2200      	movs	r2, #0
 800a02a:	2300      	movs	r3, #0
 800a02c:	4640      	mov	r0, r8
 800a02e:	4649      	mov	r1, r9
 800a030:	f7f6 fd74 	bl	8000b1c <__aeabi_dcmplt>
 800a034:	b110      	cbz	r0, 800a03c <_printf_float+0x8c>
 800a036:	232d      	movs	r3, #45	; 0x2d
 800a038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a03c:	4a93      	ldr	r2, [pc, #588]	; (800a28c <_printf_float+0x2dc>)
 800a03e:	4b94      	ldr	r3, [pc, #592]	; (800a290 <_printf_float+0x2e0>)
 800a040:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a044:	bf94      	ite	ls
 800a046:	4690      	movls	r8, r2
 800a048:	4698      	movhi	r8, r3
 800a04a:	2303      	movs	r3, #3
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	9b05      	ldr	r3, [sp, #20]
 800a050:	f023 0304 	bic.w	r3, r3, #4
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	f04f 0900 	mov.w	r9, #0
 800a05a:	9700      	str	r7, [sp, #0]
 800a05c:	4633      	mov	r3, r6
 800a05e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a060:	4621      	mov	r1, r4
 800a062:	4628      	mov	r0, r5
 800a064:	f000 f9da 	bl	800a41c <_printf_common>
 800a068:	3001      	adds	r0, #1
 800a06a:	f040 8090 	bne.w	800a18e <_printf_float+0x1de>
 800a06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a072:	b00d      	add	sp, #52	; 0x34
 800a074:	ecbd 8b02 	vpop	{d8}
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	4642      	mov	r2, r8
 800a07e:	464b      	mov	r3, r9
 800a080:	4640      	mov	r0, r8
 800a082:	4649      	mov	r1, r9
 800a084:	f7f6 fd72 	bl	8000b6c <__aeabi_dcmpun>
 800a088:	b140      	cbz	r0, 800a09c <_printf_float+0xec>
 800a08a:	464b      	mov	r3, r9
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bfbc      	itt	lt
 800a090:	232d      	movlt	r3, #45	; 0x2d
 800a092:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a096:	4a7f      	ldr	r2, [pc, #508]	; (800a294 <_printf_float+0x2e4>)
 800a098:	4b7f      	ldr	r3, [pc, #508]	; (800a298 <_printf_float+0x2e8>)
 800a09a:	e7d1      	b.n	800a040 <_printf_float+0x90>
 800a09c:	6863      	ldr	r3, [r4, #4]
 800a09e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a0a2:	9206      	str	r2, [sp, #24]
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	d13f      	bne.n	800a128 <_printf_float+0x178>
 800a0a8:	2306      	movs	r3, #6
 800a0aa:	6063      	str	r3, [r4, #4]
 800a0ac:	9b05      	ldr	r3, [sp, #20]
 800a0ae:	6861      	ldr	r1, [r4, #4]
 800a0b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9303      	str	r3, [sp, #12]
 800a0b8:	ab0a      	add	r3, sp, #40	; 0x28
 800a0ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a0be:	ab09      	add	r3, sp, #36	; 0x24
 800a0c0:	ec49 8b10 	vmov	d0, r8, r9
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	6022      	str	r2, [r4, #0]
 800a0c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f7ff fecf 	bl	8009e70 <__cvt>
 800a0d2:	9b06      	ldr	r3, [sp, #24]
 800a0d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0d6:	2b47      	cmp	r3, #71	; 0x47
 800a0d8:	4680      	mov	r8, r0
 800a0da:	d108      	bne.n	800a0ee <_printf_float+0x13e>
 800a0dc:	1cc8      	adds	r0, r1, #3
 800a0de:	db02      	blt.n	800a0e6 <_printf_float+0x136>
 800a0e0:	6863      	ldr	r3, [r4, #4]
 800a0e2:	4299      	cmp	r1, r3
 800a0e4:	dd41      	ble.n	800a16a <_printf_float+0x1ba>
 800a0e6:	f1ab 0302 	sub.w	r3, fp, #2
 800a0ea:	fa5f fb83 	uxtb.w	fp, r3
 800a0ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0f2:	d820      	bhi.n	800a136 <_printf_float+0x186>
 800a0f4:	3901      	subs	r1, #1
 800a0f6:	465a      	mov	r2, fp
 800a0f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a0fc:	9109      	str	r1, [sp, #36]	; 0x24
 800a0fe:	f7ff ff19 	bl	8009f34 <__exponent>
 800a102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a104:	1813      	adds	r3, r2, r0
 800a106:	2a01      	cmp	r2, #1
 800a108:	4681      	mov	r9, r0
 800a10a:	6123      	str	r3, [r4, #16]
 800a10c:	dc02      	bgt.n	800a114 <_printf_float+0x164>
 800a10e:	6822      	ldr	r2, [r4, #0]
 800a110:	07d2      	lsls	r2, r2, #31
 800a112:	d501      	bpl.n	800a118 <_printf_float+0x168>
 800a114:	3301      	adds	r3, #1
 800a116:	6123      	str	r3, [r4, #16]
 800a118:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d09c      	beq.n	800a05a <_printf_float+0xaa>
 800a120:	232d      	movs	r3, #45	; 0x2d
 800a122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a126:	e798      	b.n	800a05a <_printf_float+0xaa>
 800a128:	9a06      	ldr	r2, [sp, #24]
 800a12a:	2a47      	cmp	r2, #71	; 0x47
 800a12c:	d1be      	bne.n	800a0ac <_printf_float+0xfc>
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1bc      	bne.n	800a0ac <_printf_float+0xfc>
 800a132:	2301      	movs	r3, #1
 800a134:	e7b9      	b.n	800a0aa <_printf_float+0xfa>
 800a136:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a13a:	d118      	bne.n	800a16e <_printf_float+0x1be>
 800a13c:	2900      	cmp	r1, #0
 800a13e:	6863      	ldr	r3, [r4, #4]
 800a140:	dd0b      	ble.n	800a15a <_printf_float+0x1aa>
 800a142:	6121      	str	r1, [r4, #16]
 800a144:	b913      	cbnz	r3, 800a14c <_printf_float+0x19c>
 800a146:	6822      	ldr	r2, [r4, #0]
 800a148:	07d0      	lsls	r0, r2, #31
 800a14a:	d502      	bpl.n	800a152 <_printf_float+0x1a2>
 800a14c:	3301      	adds	r3, #1
 800a14e:	440b      	add	r3, r1
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	65a1      	str	r1, [r4, #88]	; 0x58
 800a154:	f04f 0900 	mov.w	r9, #0
 800a158:	e7de      	b.n	800a118 <_printf_float+0x168>
 800a15a:	b913      	cbnz	r3, 800a162 <_printf_float+0x1b2>
 800a15c:	6822      	ldr	r2, [r4, #0]
 800a15e:	07d2      	lsls	r2, r2, #31
 800a160:	d501      	bpl.n	800a166 <_printf_float+0x1b6>
 800a162:	3302      	adds	r3, #2
 800a164:	e7f4      	b.n	800a150 <_printf_float+0x1a0>
 800a166:	2301      	movs	r3, #1
 800a168:	e7f2      	b.n	800a150 <_printf_float+0x1a0>
 800a16a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a170:	4299      	cmp	r1, r3
 800a172:	db05      	blt.n	800a180 <_printf_float+0x1d0>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	6121      	str	r1, [r4, #16]
 800a178:	07d8      	lsls	r0, r3, #31
 800a17a:	d5ea      	bpl.n	800a152 <_printf_float+0x1a2>
 800a17c:	1c4b      	adds	r3, r1, #1
 800a17e:	e7e7      	b.n	800a150 <_printf_float+0x1a0>
 800a180:	2900      	cmp	r1, #0
 800a182:	bfd4      	ite	le
 800a184:	f1c1 0202 	rsble	r2, r1, #2
 800a188:	2201      	movgt	r2, #1
 800a18a:	4413      	add	r3, r2
 800a18c:	e7e0      	b.n	800a150 <_printf_float+0x1a0>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	055a      	lsls	r2, r3, #21
 800a192:	d407      	bmi.n	800a1a4 <_printf_float+0x1f4>
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	4642      	mov	r2, r8
 800a198:	4631      	mov	r1, r6
 800a19a:	4628      	mov	r0, r5
 800a19c:	47b8      	blx	r7
 800a19e:	3001      	adds	r0, #1
 800a1a0:	d12c      	bne.n	800a1fc <_printf_float+0x24c>
 800a1a2:	e764      	b.n	800a06e <_printf_float+0xbe>
 800a1a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1a8:	f240 80e0 	bls.w	800a36c <_printf_float+0x3bc>
 800a1ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f7f6 fca8 	bl	8000b08 <__aeabi_dcmpeq>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d034      	beq.n	800a226 <_printf_float+0x276>
 800a1bc:	4a37      	ldr	r2, [pc, #220]	; (800a29c <_printf_float+0x2ec>)
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4631      	mov	r1, r6
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	47b8      	blx	r7
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	f43f af51 	beq.w	800a06e <_printf_float+0xbe>
 800a1cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	db02      	blt.n	800a1da <_printf_float+0x22a>
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	07d8      	lsls	r0, r3, #31
 800a1d8:	d510      	bpl.n	800a1fc <_printf_float+0x24c>
 800a1da:	ee18 3a10 	vmov	r3, s16
 800a1de:	4652      	mov	r2, sl
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	47b8      	blx	r7
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	f43f af41 	beq.w	800a06e <_printf_float+0xbe>
 800a1ec:	f04f 0800 	mov.w	r8, #0
 800a1f0:	f104 091a 	add.w	r9, r4, #26
 800a1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	4543      	cmp	r3, r8
 800a1fa:	dc09      	bgt.n	800a210 <_printf_float+0x260>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	079b      	lsls	r3, r3, #30
 800a200:	f100 8107 	bmi.w	800a412 <_printf_float+0x462>
 800a204:	68e0      	ldr	r0, [r4, #12]
 800a206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a208:	4298      	cmp	r0, r3
 800a20a:	bfb8      	it	lt
 800a20c:	4618      	movlt	r0, r3
 800a20e:	e730      	b.n	800a072 <_printf_float+0xc2>
 800a210:	2301      	movs	r3, #1
 800a212:	464a      	mov	r2, r9
 800a214:	4631      	mov	r1, r6
 800a216:	4628      	mov	r0, r5
 800a218:	47b8      	blx	r7
 800a21a:	3001      	adds	r0, #1
 800a21c:	f43f af27 	beq.w	800a06e <_printf_float+0xbe>
 800a220:	f108 0801 	add.w	r8, r8, #1
 800a224:	e7e6      	b.n	800a1f4 <_printf_float+0x244>
 800a226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	dc39      	bgt.n	800a2a0 <_printf_float+0x2f0>
 800a22c:	4a1b      	ldr	r2, [pc, #108]	; (800a29c <_printf_float+0x2ec>)
 800a22e:	2301      	movs	r3, #1
 800a230:	4631      	mov	r1, r6
 800a232:	4628      	mov	r0, r5
 800a234:	47b8      	blx	r7
 800a236:	3001      	adds	r0, #1
 800a238:	f43f af19 	beq.w	800a06e <_printf_float+0xbe>
 800a23c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a240:	4313      	orrs	r3, r2
 800a242:	d102      	bne.n	800a24a <_printf_float+0x29a>
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	07d9      	lsls	r1, r3, #31
 800a248:	d5d8      	bpl.n	800a1fc <_printf_float+0x24c>
 800a24a:	ee18 3a10 	vmov	r3, s16
 800a24e:	4652      	mov	r2, sl
 800a250:	4631      	mov	r1, r6
 800a252:	4628      	mov	r0, r5
 800a254:	47b8      	blx	r7
 800a256:	3001      	adds	r0, #1
 800a258:	f43f af09 	beq.w	800a06e <_printf_float+0xbe>
 800a25c:	f04f 0900 	mov.w	r9, #0
 800a260:	f104 0a1a 	add.w	sl, r4, #26
 800a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a266:	425b      	negs	r3, r3
 800a268:	454b      	cmp	r3, r9
 800a26a:	dc01      	bgt.n	800a270 <_printf_float+0x2c0>
 800a26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a26e:	e792      	b.n	800a196 <_printf_float+0x1e6>
 800a270:	2301      	movs	r3, #1
 800a272:	4652      	mov	r2, sl
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	f43f aef7 	beq.w	800a06e <_printf_float+0xbe>
 800a280:	f109 0901 	add.w	r9, r9, #1
 800a284:	e7ee      	b.n	800a264 <_printf_float+0x2b4>
 800a286:	bf00      	nop
 800a288:	7fefffff 	.word	0x7fefffff
 800a28c:	0800f058 	.word	0x0800f058
 800a290:	0800f05c 	.word	0x0800f05c
 800a294:	0800f060 	.word	0x0800f060
 800a298:	0800f064 	.word	0x0800f064
 800a29c:	0800f068 	.word	0x0800f068
 800a2a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	bfa8      	it	ge
 800a2a8:	461a      	movge	r2, r3
 800a2aa:	2a00      	cmp	r2, #0
 800a2ac:	4691      	mov	r9, r2
 800a2ae:	dc37      	bgt.n	800a320 <_printf_float+0x370>
 800a2b0:	f04f 0b00 	mov.w	fp, #0
 800a2b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2b8:	f104 021a 	add.w	r2, r4, #26
 800a2bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2be:	9305      	str	r3, [sp, #20]
 800a2c0:	eba3 0309 	sub.w	r3, r3, r9
 800a2c4:	455b      	cmp	r3, fp
 800a2c6:	dc33      	bgt.n	800a330 <_printf_float+0x380>
 800a2c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	db3b      	blt.n	800a348 <_printf_float+0x398>
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	07da      	lsls	r2, r3, #31
 800a2d4:	d438      	bmi.n	800a348 <_printf_float+0x398>
 800a2d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a2da:	eba2 0903 	sub.w	r9, r2, r3
 800a2de:	9b05      	ldr	r3, [sp, #20]
 800a2e0:	1ad2      	subs	r2, r2, r3
 800a2e2:	4591      	cmp	r9, r2
 800a2e4:	bfa8      	it	ge
 800a2e6:	4691      	movge	r9, r2
 800a2e8:	f1b9 0f00 	cmp.w	r9, #0
 800a2ec:	dc35      	bgt.n	800a35a <_printf_float+0x3aa>
 800a2ee:	f04f 0800 	mov.w	r8, #0
 800a2f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2f6:	f104 0a1a 	add.w	sl, r4, #26
 800a2fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2fe:	1a9b      	subs	r3, r3, r2
 800a300:	eba3 0309 	sub.w	r3, r3, r9
 800a304:	4543      	cmp	r3, r8
 800a306:	f77f af79 	ble.w	800a1fc <_printf_float+0x24c>
 800a30a:	2301      	movs	r3, #1
 800a30c:	4652      	mov	r2, sl
 800a30e:	4631      	mov	r1, r6
 800a310:	4628      	mov	r0, r5
 800a312:	47b8      	blx	r7
 800a314:	3001      	adds	r0, #1
 800a316:	f43f aeaa 	beq.w	800a06e <_printf_float+0xbe>
 800a31a:	f108 0801 	add.w	r8, r8, #1
 800a31e:	e7ec      	b.n	800a2fa <_printf_float+0x34a>
 800a320:	4613      	mov	r3, r2
 800a322:	4631      	mov	r1, r6
 800a324:	4642      	mov	r2, r8
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	d1c0      	bne.n	800a2b0 <_printf_float+0x300>
 800a32e:	e69e      	b.n	800a06e <_printf_float+0xbe>
 800a330:	2301      	movs	r3, #1
 800a332:	4631      	mov	r1, r6
 800a334:	4628      	mov	r0, r5
 800a336:	9205      	str	r2, [sp, #20]
 800a338:	47b8      	blx	r7
 800a33a:	3001      	adds	r0, #1
 800a33c:	f43f ae97 	beq.w	800a06e <_printf_float+0xbe>
 800a340:	9a05      	ldr	r2, [sp, #20]
 800a342:	f10b 0b01 	add.w	fp, fp, #1
 800a346:	e7b9      	b.n	800a2bc <_printf_float+0x30c>
 800a348:	ee18 3a10 	vmov	r3, s16
 800a34c:	4652      	mov	r2, sl
 800a34e:	4631      	mov	r1, r6
 800a350:	4628      	mov	r0, r5
 800a352:	47b8      	blx	r7
 800a354:	3001      	adds	r0, #1
 800a356:	d1be      	bne.n	800a2d6 <_printf_float+0x326>
 800a358:	e689      	b.n	800a06e <_printf_float+0xbe>
 800a35a:	9a05      	ldr	r2, [sp, #20]
 800a35c:	464b      	mov	r3, r9
 800a35e:	4442      	add	r2, r8
 800a360:	4631      	mov	r1, r6
 800a362:	4628      	mov	r0, r5
 800a364:	47b8      	blx	r7
 800a366:	3001      	adds	r0, #1
 800a368:	d1c1      	bne.n	800a2ee <_printf_float+0x33e>
 800a36a:	e680      	b.n	800a06e <_printf_float+0xbe>
 800a36c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a36e:	2a01      	cmp	r2, #1
 800a370:	dc01      	bgt.n	800a376 <_printf_float+0x3c6>
 800a372:	07db      	lsls	r3, r3, #31
 800a374:	d53a      	bpl.n	800a3ec <_printf_float+0x43c>
 800a376:	2301      	movs	r3, #1
 800a378:	4642      	mov	r2, r8
 800a37a:	4631      	mov	r1, r6
 800a37c:	4628      	mov	r0, r5
 800a37e:	47b8      	blx	r7
 800a380:	3001      	adds	r0, #1
 800a382:	f43f ae74 	beq.w	800a06e <_printf_float+0xbe>
 800a386:	ee18 3a10 	vmov	r3, s16
 800a38a:	4652      	mov	r2, sl
 800a38c:	4631      	mov	r1, r6
 800a38e:	4628      	mov	r0, r5
 800a390:	47b8      	blx	r7
 800a392:	3001      	adds	r0, #1
 800a394:	f43f ae6b 	beq.w	800a06e <_printf_float+0xbe>
 800a398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a39c:	2200      	movs	r2, #0
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a3a4:	f7f6 fbb0 	bl	8000b08 <__aeabi_dcmpeq>
 800a3a8:	b9d8      	cbnz	r0, 800a3e2 <_printf_float+0x432>
 800a3aa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a3ae:	f108 0201 	add.w	r2, r8, #1
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b8      	blx	r7
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d10e      	bne.n	800a3da <_printf_float+0x42a>
 800a3bc:	e657      	b.n	800a06e <_printf_float+0xbe>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	4652      	mov	r2, sl
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	47b8      	blx	r7
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	f43f ae50 	beq.w	800a06e <_printf_float+0xbe>
 800a3ce:	f108 0801 	add.w	r8, r8, #1
 800a3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	4543      	cmp	r3, r8
 800a3d8:	dcf1      	bgt.n	800a3be <_printf_float+0x40e>
 800a3da:	464b      	mov	r3, r9
 800a3dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a3e0:	e6da      	b.n	800a198 <_printf_float+0x1e8>
 800a3e2:	f04f 0800 	mov.w	r8, #0
 800a3e6:	f104 0a1a 	add.w	sl, r4, #26
 800a3ea:	e7f2      	b.n	800a3d2 <_printf_float+0x422>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	4642      	mov	r2, r8
 800a3f0:	e7df      	b.n	800a3b2 <_printf_float+0x402>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	464a      	mov	r2, r9
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	47b8      	blx	r7
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	f43f ae36 	beq.w	800a06e <_printf_float+0xbe>
 800a402:	f108 0801 	add.w	r8, r8, #1
 800a406:	68e3      	ldr	r3, [r4, #12]
 800a408:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a40a:	1a5b      	subs	r3, r3, r1
 800a40c:	4543      	cmp	r3, r8
 800a40e:	dcf0      	bgt.n	800a3f2 <_printf_float+0x442>
 800a410:	e6f8      	b.n	800a204 <_printf_float+0x254>
 800a412:	f04f 0800 	mov.w	r8, #0
 800a416:	f104 0919 	add.w	r9, r4, #25
 800a41a:	e7f4      	b.n	800a406 <_printf_float+0x456>

0800a41c <_printf_common>:
 800a41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a420:	4616      	mov	r6, r2
 800a422:	4699      	mov	r9, r3
 800a424:	688a      	ldr	r2, [r1, #8]
 800a426:	690b      	ldr	r3, [r1, #16]
 800a428:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a42c:	4293      	cmp	r3, r2
 800a42e:	bfb8      	it	lt
 800a430:	4613      	movlt	r3, r2
 800a432:	6033      	str	r3, [r6, #0]
 800a434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a438:	4607      	mov	r7, r0
 800a43a:	460c      	mov	r4, r1
 800a43c:	b10a      	cbz	r2, 800a442 <_printf_common+0x26>
 800a43e:	3301      	adds	r3, #1
 800a440:	6033      	str	r3, [r6, #0]
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	0699      	lsls	r1, r3, #26
 800a446:	bf42      	ittt	mi
 800a448:	6833      	ldrmi	r3, [r6, #0]
 800a44a:	3302      	addmi	r3, #2
 800a44c:	6033      	strmi	r3, [r6, #0]
 800a44e:	6825      	ldr	r5, [r4, #0]
 800a450:	f015 0506 	ands.w	r5, r5, #6
 800a454:	d106      	bne.n	800a464 <_printf_common+0x48>
 800a456:	f104 0a19 	add.w	sl, r4, #25
 800a45a:	68e3      	ldr	r3, [r4, #12]
 800a45c:	6832      	ldr	r2, [r6, #0]
 800a45e:	1a9b      	subs	r3, r3, r2
 800a460:	42ab      	cmp	r3, r5
 800a462:	dc26      	bgt.n	800a4b2 <_printf_common+0x96>
 800a464:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a468:	1e13      	subs	r3, r2, #0
 800a46a:	6822      	ldr	r2, [r4, #0]
 800a46c:	bf18      	it	ne
 800a46e:	2301      	movne	r3, #1
 800a470:	0692      	lsls	r2, r2, #26
 800a472:	d42b      	bmi.n	800a4cc <_printf_common+0xb0>
 800a474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a478:	4649      	mov	r1, r9
 800a47a:	4638      	mov	r0, r7
 800a47c:	47c0      	blx	r8
 800a47e:	3001      	adds	r0, #1
 800a480:	d01e      	beq.n	800a4c0 <_printf_common+0xa4>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	6922      	ldr	r2, [r4, #16]
 800a486:	f003 0306 	and.w	r3, r3, #6
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	bf02      	ittt	eq
 800a48e:	68e5      	ldreq	r5, [r4, #12]
 800a490:	6833      	ldreq	r3, [r6, #0]
 800a492:	1aed      	subeq	r5, r5, r3
 800a494:	68a3      	ldr	r3, [r4, #8]
 800a496:	bf0c      	ite	eq
 800a498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a49c:	2500      	movne	r5, #0
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	bfc4      	itt	gt
 800a4a2:	1a9b      	subgt	r3, r3, r2
 800a4a4:	18ed      	addgt	r5, r5, r3
 800a4a6:	2600      	movs	r6, #0
 800a4a8:	341a      	adds	r4, #26
 800a4aa:	42b5      	cmp	r5, r6
 800a4ac:	d11a      	bne.n	800a4e4 <_printf_common+0xc8>
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	e008      	b.n	800a4c4 <_printf_common+0xa8>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4652      	mov	r2, sl
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	47c0      	blx	r8
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d103      	bne.n	800a4c8 <_printf_common+0xac>
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c8:	3501      	adds	r5, #1
 800a4ca:	e7c6      	b.n	800a45a <_printf_common+0x3e>
 800a4cc:	18e1      	adds	r1, r4, r3
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	2030      	movs	r0, #48	; 0x30
 800a4d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4d6:	4422      	add	r2, r4
 800a4d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4e0:	3302      	adds	r3, #2
 800a4e2:	e7c7      	b.n	800a474 <_printf_common+0x58>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	47c0      	blx	r8
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	d0e6      	beq.n	800a4c0 <_printf_common+0xa4>
 800a4f2:	3601      	adds	r6, #1
 800a4f4:	e7d9      	b.n	800a4aa <_printf_common+0x8e>
	...

0800a4f8 <_printf_i>:
 800a4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4fc:	7e0f      	ldrb	r7, [r1, #24]
 800a4fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a500:	2f78      	cmp	r7, #120	; 0x78
 800a502:	4691      	mov	r9, r2
 800a504:	4680      	mov	r8, r0
 800a506:	460c      	mov	r4, r1
 800a508:	469a      	mov	sl, r3
 800a50a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a50e:	d807      	bhi.n	800a520 <_printf_i+0x28>
 800a510:	2f62      	cmp	r7, #98	; 0x62
 800a512:	d80a      	bhi.n	800a52a <_printf_i+0x32>
 800a514:	2f00      	cmp	r7, #0
 800a516:	f000 80d4 	beq.w	800a6c2 <_printf_i+0x1ca>
 800a51a:	2f58      	cmp	r7, #88	; 0x58
 800a51c:	f000 80c0 	beq.w	800a6a0 <_printf_i+0x1a8>
 800a520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a528:	e03a      	b.n	800a5a0 <_printf_i+0xa8>
 800a52a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a52e:	2b15      	cmp	r3, #21
 800a530:	d8f6      	bhi.n	800a520 <_printf_i+0x28>
 800a532:	a101      	add	r1, pc, #4	; (adr r1, 800a538 <_printf_i+0x40>)
 800a534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a538:	0800a591 	.word	0x0800a591
 800a53c:	0800a5a5 	.word	0x0800a5a5
 800a540:	0800a521 	.word	0x0800a521
 800a544:	0800a521 	.word	0x0800a521
 800a548:	0800a521 	.word	0x0800a521
 800a54c:	0800a521 	.word	0x0800a521
 800a550:	0800a5a5 	.word	0x0800a5a5
 800a554:	0800a521 	.word	0x0800a521
 800a558:	0800a521 	.word	0x0800a521
 800a55c:	0800a521 	.word	0x0800a521
 800a560:	0800a521 	.word	0x0800a521
 800a564:	0800a6a9 	.word	0x0800a6a9
 800a568:	0800a5d1 	.word	0x0800a5d1
 800a56c:	0800a663 	.word	0x0800a663
 800a570:	0800a521 	.word	0x0800a521
 800a574:	0800a521 	.word	0x0800a521
 800a578:	0800a6cb 	.word	0x0800a6cb
 800a57c:	0800a521 	.word	0x0800a521
 800a580:	0800a5d1 	.word	0x0800a5d1
 800a584:	0800a521 	.word	0x0800a521
 800a588:	0800a521 	.word	0x0800a521
 800a58c:	0800a66b 	.word	0x0800a66b
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	1d1a      	adds	r2, r3, #4
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	602a      	str	r2, [r5, #0]
 800a598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a59c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e09f      	b.n	800a6e4 <_printf_i+0x1ec>
 800a5a4:	6820      	ldr	r0, [r4, #0]
 800a5a6:	682b      	ldr	r3, [r5, #0]
 800a5a8:	0607      	lsls	r7, r0, #24
 800a5aa:	f103 0104 	add.w	r1, r3, #4
 800a5ae:	6029      	str	r1, [r5, #0]
 800a5b0:	d501      	bpl.n	800a5b6 <_printf_i+0xbe>
 800a5b2:	681e      	ldr	r6, [r3, #0]
 800a5b4:	e003      	b.n	800a5be <_printf_i+0xc6>
 800a5b6:	0646      	lsls	r6, r0, #25
 800a5b8:	d5fb      	bpl.n	800a5b2 <_printf_i+0xba>
 800a5ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a5be:	2e00      	cmp	r6, #0
 800a5c0:	da03      	bge.n	800a5ca <_printf_i+0xd2>
 800a5c2:	232d      	movs	r3, #45	; 0x2d
 800a5c4:	4276      	negs	r6, r6
 800a5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5ca:	485a      	ldr	r0, [pc, #360]	; (800a734 <_printf_i+0x23c>)
 800a5cc:	230a      	movs	r3, #10
 800a5ce:	e012      	b.n	800a5f6 <_printf_i+0xfe>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	6820      	ldr	r0, [r4, #0]
 800a5d4:	1d19      	adds	r1, r3, #4
 800a5d6:	6029      	str	r1, [r5, #0]
 800a5d8:	0605      	lsls	r5, r0, #24
 800a5da:	d501      	bpl.n	800a5e0 <_printf_i+0xe8>
 800a5dc:	681e      	ldr	r6, [r3, #0]
 800a5de:	e002      	b.n	800a5e6 <_printf_i+0xee>
 800a5e0:	0641      	lsls	r1, r0, #25
 800a5e2:	d5fb      	bpl.n	800a5dc <_printf_i+0xe4>
 800a5e4:	881e      	ldrh	r6, [r3, #0]
 800a5e6:	4853      	ldr	r0, [pc, #332]	; (800a734 <_printf_i+0x23c>)
 800a5e8:	2f6f      	cmp	r7, #111	; 0x6f
 800a5ea:	bf0c      	ite	eq
 800a5ec:	2308      	moveq	r3, #8
 800a5ee:	230a      	movne	r3, #10
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5f6:	6865      	ldr	r5, [r4, #4]
 800a5f8:	60a5      	str	r5, [r4, #8]
 800a5fa:	2d00      	cmp	r5, #0
 800a5fc:	bfa2      	ittt	ge
 800a5fe:	6821      	ldrge	r1, [r4, #0]
 800a600:	f021 0104 	bicge.w	r1, r1, #4
 800a604:	6021      	strge	r1, [r4, #0]
 800a606:	b90e      	cbnz	r6, 800a60c <_printf_i+0x114>
 800a608:	2d00      	cmp	r5, #0
 800a60a:	d04b      	beq.n	800a6a4 <_printf_i+0x1ac>
 800a60c:	4615      	mov	r5, r2
 800a60e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a612:	fb03 6711 	mls	r7, r3, r1, r6
 800a616:	5dc7      	ldrb	r7, [r0, r7]
 800a618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a61c:	4637      	mov	r7, r6
 800a61e:	42bb      	cmp	r3, r7
 800a620:	460e      	mov	r6, r1
 800a622:	d9f4      	bls.n	800a60e <_printf_i+0x116>
 800a624:	2b08      	cmp	r3, #8
 800a626:	d10b      	bne.n	800a640 <_printf_i+0x148>
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	07de      	lsls	r6, r3, #31
 800a62c:	d508      	bpl.n	800a640 <_printf_i+0x148>
 800a62e:	6923      	ldr	r3, [r4, #16]
 800a630:	6861      	ldr	r1, [r4, #4]
 800a632:	4299      	cmp	r1, r3
 800a634:	bfde      	ittt	le
 800a636:	2330      	movle	r3, #48	; 0x30
 800a638:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a63c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a640:	1b52      	subs	r2, r2, r5
 800a642:	6122      	str	r2, [r4, #16]
 800a644:	f8cd a000 	str.w	sl, [sp]
 800a648:	464b      	mov	r3, r9
 800a64a:	aa03      	add	r2, sp, #12
 800a64c:	4621      	mov	r1, r4
 800a64e:	4640      	mov	r0, r8
 800a650:	f7ff fee4 	bl	800a41c <_printf_common>
 800a654:	3001      	adds	r0, #1
 800a656:	d14a      	bne.n	800a6ee <_printf_i+0x1f6>
 800a658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a65c:	b004      	add	sp, #16
 800a65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	f043 0320 	orr.w	r3, r3, #32
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	4833      	ldr	r0, [pc, #204]	; (800a738 <_printf_i+0x240>)
 800a66c:	2778      	movs	r7, #120	; 0x78
 800a66e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	6829      	ldr	r1, [r5, #0]
 800a676:	061f      	lsls	r7, r3, #24
 800a678:	f851 6b04 	ldr.w	r6, [r1], #4
 800a67c:	d402      	bmi.n	800a684 <_printf_i+0x18c>
 800a67e:	065f      	lsls	r7, r3, #25
 800a680:	bf48      	it	mi
 800a682:	b2b6      	uxthmi	r6, r6
 800a684:	07df      	lsls	r7, r3, #31
 800a686:	bf48      	it	mi
 800a688:	f043 0320 	orrmi.w	r3, r3, #32
 800a68c:	6029      	str	r1, [r5, #0]
 800a68e:	bf48      	it	mi
 800a690:	6023      	strmi	r3, [r4, #0]
 800a692:	b91e      	cbnz	r6, 800a69c <_printf_i+0x1a4>
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	f023 0320 	bic.w	r3, r3, #32
 800a69a:	6023      	str	r3, [r4, #0]
 800a69c:	2310      	movs	r3, #16
 800a69e:	e7a7      	b.n	800a5f0 <_printf_i+0xf8>
 800a6a0:	4824      	ldr	r0, [pc, #144]	; (800a734 <_printf_i+0x23c>)
 800a6a2:	e7e4      	b.n	800a66e <_printf_i+0x176>
 800a6a4:	4615      	mov	r5, r2
 800a6a6:	e7bd      	b.n	800a624 <_printf_i+0x12c>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	6826      	ldr	r6, [r4, #0]
 800a6ac:	6961      	ldr	r1, [r4, #20]
 800a6ae:	1d18      	adds	r0, r3, #4
 800a6b0:	6028      	str	r0, [r5, #0]
 800a6b2:	0635      	lsls	r5, r6, #24
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	d501      	bpl.n	800a6bc <_printf_i+0x1c4>
 800a6b8:	6019      	str	r1, [r3, #0]
 800a6ba:	e002      	b.n	800a6c2 <_printf_i+0x1ca>
 800a6bc:	0670      	lsls	r0, r6, #25
 800a6be:	d5fb      	bpl.n	800a6b8 <_printf_i+0x1c0>
 800a6c0:	8019      	strh	r1, [r3, #0]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	6123      	str	r3, [r4, #16]
 800a6c6:	4615      	mov	r5, r2
 800a6c8:	e7bc      	b.n	800a644 <_printf_i+0x14c>
 800a6ca:	682b      	ldr	r3, [r5, #0]
 800a6cc:	1d1a      	adds	r2, r3, #4
 800a6ce:	602a      	str	r2, [r5, #0]
 800a6d0:	681d      	ldr	r5, [r3, #0]
 800a6d2:	6862      	ldr	r2, [r4, #4]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f7f5 fd9a 	bl	8000210 <memchr>
 800a6dc:	b108      	cbz	r0, 800a6e2 <_printf_i+0x1ea>
 800a6de:	1b40      	subs	r0, r0, r5
 800a6e0:	6060      	str	r0, [r4, #4]
 800a6e2:	6863      	ldr	r3, [r4, #4]
 800a6e4:	6123      	str	r3, [r4, #16]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6ec:	e7aa      	b.n	800a644 <_printf_i+0x14c>
 800a6ee:	6923      	ldr	r3, [r4, #16]
 800a6f0:	462a      	mov	r2, r5
 800a6f2:	4649      	mov	r1, r9
 800a6f4:	4640      	mov	r0, r8
 800a6f6:	47d0      	blx	sl
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d0ad      	beq.n	800a658 <_printf_i+0x160>
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	079b      	lsls	r3, r3, #30
 800a700:	d413      	bmi.n	800a72a <_printf_i+0x232>
 800a702:	68e0      	ldr	r0, [r4, #12]
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	4298      	cmp	r0, r3
 800a708:	bfb8      	it	lt
 800a70a:	4618      	movlt	r0, r3
 800a70c:	e7a6      	b.n	800a65c <_printf_i+0x164>
 800a70e:	2301      	movs	r3, #1
 800a710:	4632      	mov	r2, r6
 800a712:	4649      	mov	r1, r9
 800a714:	4640      	mov	r0, r8
 800a716:	47d0      	blx	sl
 800a718:	3001      	adds	r0, #1
 800a71a:	d09d      	beq.n	800a658 <_printf_i+0x160>
 800a71c:	3501      	adds	r5, #1
 800a71e:	68e3      	ldr	r3, [r4, #12]
 800a720:	9903      	ldr	r1, [sp, #12]
 800a722:	1a5b      	subs	r3, r3, r1
 800a724:	42ab      	cmp	r3, r5
 800a726:	dcf2      	bgt.n	800a70e <_printf_i+0x216>
 800a728:	e7eb      	b.n	800a702 <_printf_i+0x20a>
 800a72a:	2500      	movs	r5, #0
 800a72c:	f104 0619 	add.w	r6, r4, #25
 800a730:	e7f5      	b.n	800a71e <_printf_i+0x226>
 800a732:	bf00      	nop
 800a734:	0800f06a 	.word	0x0800f06a
 800a738:	0800f07b 	.word	0x0800f07b

0800a73c <std>:
 800a73c:	2300      	movs	r3, #0
 800a73e:	b510      	push	{r4, lr}
 800a740:	4604      	mov	r4, r0
 800a742:	e9c0 3300 	strd	r3, r3, [r0]
 800a746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a74a:	6083      	str	r3, [r0, #8]
 800a74c:	8181      	strh	r1, [r0, #12]
 800a74e:	6643      	str	r3, [r0, #100]	; 0x64
 800a750:	81c2      	strh	r2, [r0, #14]
 800a752:	6183      	str	r3, [r0, #24]
 800a754:	4619      	mov	r1, r3
 800a756:	2208      	movs	r2, #8
 800a758:	305c      	adds	r0, #92	; 0x5c
 800a75a:	f000 f9e5 	bl	800ab28 <memset>
 800a75e:	4b05      	ldr	r3, [pc, #20]	; (800a774 <std+0x38>)
 800a760:	6263      	str	r3, [r4, #36]	; 0x24
 800a762:	4b05      	ldr	r3, [pc, #20]	; (800a778 <std+0x3c>)
 800a764:	62a3      	str	r3, [r4, #40]	; 0x28
 800a766:	4b05      	ldr	r3, [pc, #20]	; (800a77c <std+0x40>)
 800a768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a76a:	4b05      	ldr	r3, [pc, #20]	; (800a780 <std+0x44>)
 800a76c:	6224      	str	r4, [r4, #32]
 800a76e:	6323      	str	r3, [r4, #48]	; 0x30
 800a770:	bd10      	pop	{r4, pc}
 800a772:	bf00      	nop
 800a774:	0800a979 	.word	0x0800a979
 800a778:	0800a99b 	.word	0x0800a99b
 800a77c:	0800a9d3 	.word	0x0800a9d3
 800a780:	0800a9f7 	.word	0x0800a9f7

0800a784 <stdio_exit_handler>:
 800a784:	4a02      	ldr	r2, [pc, #8]	; (800a790 <stdio_exit_handler+0xc>)
 800a786:	4903      	ldr	r1, [pc, #12]	; (800a794 <stdio_exit_handler+0x10>)
 800a788:	4803      	ldr	r0, [pc, #12]	; (800a798 <stdio_exit_handler+0x14>)
 800a78a:	f000 b869 	b.w	800a860 <_fwalk_sglue>
 800a78e:	bf00      	nop
 800a790:	2000000c 	.word	0x2000000c
 800a794:	0800c461 	.word	0x0800c461
 800a798:	20000018 	.word	0x20000018

0800a79c <cleanup_stdio>:
 800a79c:	6841      	ldr	r1, [r0, #4]
 800a79e:	4b0c      	ldr	r3, [pc, #48]	; (800a7d0 <cleanup_stdio+0x34>)
 800a7a0:	4299      	cmp	r1, r3
 800a7a2:	b510      	push	{r4, lr}
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	d001      	beq.n	800a7ac <cleanup_stdio+0x10>
 800a7a8:	f001 fe5a 	bl	800c460 <_fflush_r>
 800a7ac:	68a1      	ldr	r1, [r4, #8]
 800a7ae:	4b09      	ldr	r3, [pc, #36]	; (800a7d4 <cleanup_stdio+0x38>)
 800a7b0:	4299      	cmp	r1, r3
 800a7b2:	d002      	beq.n	800a7ba <cleanup_stdio+0x1e>
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f001 fe53 	bl	800c460 <_fflush_r>
 800a7ba:	68e1      	ldr	r1, [r4, #12]
 800a7bc:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <cleanup_stdio+0x3c>)
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	d004      	beq.n	800a7cc <cleanup_stdio+0x30>
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c8:	f001 be4a 	b.w	800c460 <_fflush_r>
 800a7cc:	bd10      	pop	{r4, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20001960 	.word	0x20001960
 800a7d4:	200019c8 	.word	0x200019c8
 800a7d8:	20001a30 	.word	0x20001a30

0800a7dc <global_stdio_init.part.0>:
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <global_stdio_init.part.0+0x30>)
 800a7e0:	4c0b      	ldr	r4, [pc, #44]	; (800a810 <global_stdio_init.part.0+0x34>)
 800a7e2:	4a0c      	ldr	r2, [pc, #48]	; (800a814 <global_stdio_init.part.0+0x38>)
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2104      	movs	r1, #4
 800a7ec:	f7ff ffa6 	bl	800a73c <std>
 800a7f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	2109      	movs	r1, #9
 800a7f8:	f7ff ffa0 	bl	800a73c <std>
 800a7fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a800:	2202      	movs	r2, #2
 800a802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a806:	2112      	movs	r1, #18
 800a808:	f7ff bf98 	b.w	800a73c <std>
 800a80c:	20001a98 	.word	0x20001a98
 800a810:	20001960 	.word	0x20001960
 800a814:	0800a785 	.word	0x0800a785

0800a818 <__sfp_lock_acquire>:
 800a818:	4801      	ldr	r0, [pc, #4]	; (800a820 <__sfp_lock_acquire+0x8>)
 800a81a:	f000 ba11 	b.w	800ac40 <__retarget_lock_acquire_recursive>
 800a81e:	bf00      	nop
 800a820:	20001aa1 	.word	0x20001aa1

0800a824 <__sfp_lock_release>:
 800a824:	4801      	ldr	r0, [pc, #4]	; (800a82c <__sfp_lock_release+0x8>)
 800a826:	f000 ba0c 	b.w	800ac42 <__retarget_lock_release_recursive>
 800a82a:	bf00      	nop
 800a82c:	20001aa1 	.word	0x20001aa1

0800a830 <__sinit>:
 800a830:	b510      	push	{r4, lr}
 800a832:	4604      	mov	r4, r0
 800a834:	f7ff fff0 	bl	800a818 <__sfp_lock_acquire>
 800a838:	6a23      	ldr	r3, [r4, #32]
 800a83a:	b11b      	cbz	r3, 800a844 <__sinit+0x14>
 800a83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a840:	f7ff bff0 	b.w	800a824 <__sfp_lock_release>
 800a844:	4b04      	ldr	r3, [pc, #16]	; (800a858 <__sinit+0x28>)
 800a846:	6223      	str	r3, [r4, #32]
 800a848:	4b04      	ldr	r3, [pc, #16]	; (800a85c <__sinit+0x2c>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1f5      	bne.n	800a83c <__sinit+0xc>
 800a850:	f7ff ffc4 	bl	800a7dc <global_stdio_init.part.0>
 800a854:	e7f2      	b.n	800a83c <__sinit+0xc>
 800a856:	bf00      	nop
 800a858:	0800a79d 	.word	0x0800a79d
 800a85c:	20001a98 	.word	0x20001a98

0800a860 <_fwalk_sglue>:
 800a860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a864:	4607      	mov	r7, r0
 800a866:	4688      	mov	r8, r1
 800a868:	4614      	mov	r4, r2
 800a86a:	2600      	movs	r6, #0
 800a86c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a870:	f1b9 0901 	subs.w	r9, r9, #1
 800a874:	d505      	bpl.n	800a882 <_fwalk_sglue+0x22>
 800a876:	6824      	ldr	r4, [r4, #0]
 800a878:	2c00      	cmp	r4, #0
 800a87a:	d1f7      	bne.n	800a86c <_fwalk_sglue+0xc>
 800a87c:	4630      	mov	r0, r6
 800a87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a882:	89ab      	ldrh	r3, [r5, #12]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d907      	bls.n	800a898 <_fwalk_sglue+0x38>
 800a888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a88c:	3301      	adds	r3, #1
 800a88e:	d003      	beq.n	800a898 <_fwalk_sglue+0x38>
 800a890:	4629      	mov	r1, r5
 800a892:	4638      	mov	r0, r7
 800a894:	47c0      	blx	r8
 800a896:	4306      	orrs	r6, r0
 800a898:	3568      	adds	r5, #104	; 0x68
 800a89a:	e7e9      	b.n	800a870 <_fwalk_sglue+0x10>

0800a89c <iprintf>:
 800a89c:	b40f      	push	{r0, r1, r2, r3}
 800a89e:	b507      	push	{r0, r1, r2, lr}
 800a8a0:	4906      	ldr	r1, [pc, #24]	; (800a8bc <iprintf+0x20>)
 800a8a2:	ab04      	add	r3, sp, #16
 800a8a4:	6808      	ldr	r0, [r1, #0]
 800a8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8aa:	6881      	ldr	r1, [r0, #8]
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	f001 fc37 	bl	800c120 <_vfiprintf_r>
 800a8b2:	b003      	add	sp, #12
 800a8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8b8:	b004      	add	sp, #16
 800a8ba:	4770      	bx	lr
 800a8bc:	20000064 	.word	0x20000064

0800a8c0 <_puts_r>:
 800a8c0:	6a03      	ldr	r3, [r0, #32]
 800a8c2:	b570      	push	{r4, r5, r6, lr}
 800a8c4:	6884      	ldr	r4, [r0, #8]
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	460e      	mov	r6, r1
 800a8ca:	b90b      	cbnz	r3, 800a8d0 <_puts_r+0x10>
 800a8cc:	f7ff ffb0 	bl	800a830 <__sinit>
 800a8d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8d2:	07db      	lsls	r3, r3, #31
 800a8d4:	d405      	bmi.n	800a8e2 <_puts_r+0x22>
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	0598      	lsls	r0, r3, #22
 800a8da:	d402      	bmi.n	800a8e2 <_puts_r+0x22>
 800a8dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8de:	f000 f9af 	bl	800ac40 <__retarget_lock_acquire_recursive>
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	0719      	lsls	r1, r3, #28
 800a8e6:	d513      	bpl.n	800a910 <_puts_r+0x50>
 800a8e8:	6923      	ldr	r3, [r4, #16]
 800a8ea:	b18b      	cbz	r3, 800a910 <_puts_r+0x50>
 800a8ec:	3e01      	subs	r6, #1
 800a8ee:	68a3      	ldr	r3, [r4, #8]
 800a8f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	60a3      	str	r3, [r4, #8]
 800a8f8:	b9e9      	cbnz	r1, 800a936 <_puts_r+0x76>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	da2e      	bge.n	800a95c <_puts_r+0x9c>
 800a8fe:	4622      	mov	r2, r4
 800a900:	210a      	movs	r1, #10
 800a902:	4628      	mov	r0, r5
 800a904:	f000 f87b 	bl	800a9fe <__swbuf_r>
 800a908:	3001      	adds	r0, #1
 800a90a:	d007      	beq.n	800a91c <_puts_r+0x5c>
 800a90c:	250a      	movs	r5, #10
 800a90e:	e007      	b.n	800a920 <_puts_r+0x60>
 800a910:	4621      	mov	r1, r4
 800a912:	4628      	mov	r0, r5
 800a914:	f000 f8b0 	bl	800aa78 <__swsetup_r>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d0e7      	beq.n	800a8ec <_puts_r+0x2c>
 800a91c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a922:	07da      	lsls	r2, r3, #31
 800a924:	d405      	bmi.n	800a932 <_puts_r+0x72>
 800a926:	89a3      	ldrh	r3, [r4, #12]
 800a928:	059b      	lsls	r3, r3, #22
 800a92a:	d402      	bmi.n	800a932 <_puts_r+0x72>
 800a92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a92e:	f000 f988 	bl	800ac42 <__retarget_lock_release_recursive>
 800a932:	4628      	mov	r0, r5
 800a934:	bd70      	pop	{r4, r5, r6, pc}
 800a936:	2b00      	cmp	r3, #0
 800a938:	da04      	bge.n	800a944 <_puts_r+0x84>
 800a93a:	69a2      	ldr	r2, [r4, #24]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	dc06      	bgt.n	800a94e <_puts_r+0x8e>
 800a940:	290a      	cmp	r1, #10
 800a942:	d004      	beq.n	800a94e <_puts_r+0x8e>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	6022      	str	r2, [r4, #0]
 800a94a:	7019      	strb	r1, [r3, #0]
 800a94c:	e7cf      	b.n	800a8ee <_puts_r+0x2e>
 800a94e:	4622      	mov	r2, r4
 800a950:	4628      	mov	r0, r5
 800a952:	f000 f854 	bl	800a9fe <__swbuf_r>
 800a956:	3001      	adds	r0, #1
 800a958:	d1c9      	bne.n	800a8ee <_puts_r+0x2e>
 800a95a:	e7df      	b.n	800a91c <_puts_r+0x5c>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	250a      	movs	r5, #10
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	6022      	str	r2, [r4, #0]
 800a964:	701d      	strb	r5, [r3, #0]
 800a966:	e7db      	b.n	800a920 <_puts_r+0x60>

0800a968 <puts>:
 800a968:	4b02      	ldr	r3, [pc, #8]	; (800a974 <puts+0xc>)
 800a96a:	4601      	mov	r1, r0
 800a96c:	6818      	ldr	r0, [r3, #0]
 800a96e:	f7ff bfa7 	b.w	800a8c0 <_puts_r>
 800a972:	bf00      	nop
 800a974:	20000064 	.word	0x20000064

0800a978 <__sread>:
 800a978:	b510      	push	{r4, lr}
 800a97a:	460c      	mov	r4, r1
 800a97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a980:	f000 f900 	bl	800ab84 <_read_r>
 800a984:	2800      	cmp	r0, #0
 800a986:	bfab      	itete	ge
 800a988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a98a:	89a3      	ldrhlt	r3, [r4, #12]
 800a98c:	181b      	addge	r3, r3, r0
 800a98e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a992:	bfac      	ite	ge
 800a994:	6563      	strge	r3, [r4, #84]	; 0x54
 800a996:	81a3      	strhlt	r3, [r4, #12]
 800a998:	bd10      	pop	{r4, pc}

0800a99a <__swrite>:
 800a99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99e:	461f      	mov	r7, r3
 800a9a0:	898b      	ldrh	r3, [r1, #12]
 800a9a2:	05db      	lsls	r3, r3, #23
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	4616      	mov	r6, r2
 800a9aa:	d505      	bpl.n	800a9b8 <__swrite+0x1e>
 800a9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f000 f8d4 	bl	800ab60 <_lseek_r>
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	4632      	mov	r2, r6
 800a9c6:	463b      	mov	r3, r7
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ce:	f000 b8fb 	b.w	800abc8 <_write_r>

0800a9d2 <__sseek>:
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9da:	f000 f8c1 	bl	800ab60 <_lseek_r>
 800a9de:	1c43      	adds	r3, r0, #1
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	bf15      	itete	ne
 800a9e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ee:	81a3      	strheq	r3, [r4, #12]
 800a9f0:	bf18      	it	ne
 800a9f2:	81a3      	strhne	r3, [r4, #12]
 800a9f4:	bd10      	pop	{r4, pc}

0800a9f6 <__sclose>:
 800a9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fa:	f000 b8a1 	b.w	800ab40 <_close_r>

0800a9fe <__swbuf_r>:
 800a9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa00:	460e      	mov	r6, r1
 800aa02:	4614      	mov	r4, r2
 800aa04:	4605      	mov	r5, r0
 800aa06:	b118      	cbz	r0, 800aa10 <__swbuf_r+0x12>
 800aa08:	6a03      	ldr	r3, [r0, #32]
 800aa0a:	b90b      	cbnz	r3, 800aa10 <__swbuf_r+0x12>
 800aa0c:	f7ff ff10 	bl	800a830 <__sinit>
 800aa10:	69a3      	ldr	r3, [r4, #24]
 800aa12:	60a3      	str	r3, [r4, #8]
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	071a      	lsls	r2, r3, #28
 800aa18:	d525      	bpl.n	800aa66 <__swbuf_r+0x68>
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	b31b      	cbz	r3, 800aa66 <__swbuf_r+0x68>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	6922      	ldr	r2, [r4, #16]
 800aa22:	1a98      	subs	r0, r3, r2
 800aa24:	6963      	ldr	r3, [r4, #20]
 800aa26:	b2f6      	uxtb	r6, r6
 800aa28:	4283      	cmp	r3, r0
 800aa2a:	4637      	mov	r7, r6
 800aa2c:	dc04      	bgt.n	800aa38 <__swbuf_r+0x3a>
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4628      	mov	r0, r5
 800aa32:	f001 fd15 	bl	800c460 <_fflush_r>
 800aa36:	b9e0      	cbnz	r0, 800aa72 <__swbuf_r+0x74>
 800aa38:	68a3      	ldr	r3, [r4, #8]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	60a3      	str	r3, [r4, #8]
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	6022      	str	r2, [r4, #0]
 800aa44:	701e      	strb	r6, [r3, #0]
 800aa46:	6962      	ldr	r2, [r4, #20]
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d004      	beq.n	800aa58 <__swbuf_r+0x5a>
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	07db      	lsls	r3, r3, #31
 800aa52:	d506      	bpl.n	800aa62 <__swbuf_r+0x64>
 800aa54:	2e0a      	cmp	r6, #10
 800aa56:	d104      	bne.n	800aa62 <__swbuf_r+0x64>
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f001 fd00 	bl	800c460 <_fflush_r>
 800aa60:	b938      	cbnz	r0, 800aa72 <__swbuf_r+0x74>
 800aa62:	4638      	mov	r0, r7
 800aa64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa66:	4621      	mov	r1, r4
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f000 f805 	bl	800aa78 <__swsetup_r>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d0d5      	beq.n	800aa1e <__swbuf_r+0x20>
 800aa72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aa76:	e7f4      	b.n	800aa62 <__swbuf_r+0x64>

0800aa78 <__swsetup_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4b2a      	ldr	r3, [pc, #168]	; (800ab24 <__swsetup_r+0xac>)
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	460c      	mov	r4, r1
 800aa82:	b118      	cbz	r0, 800aa8c <__swsetup_r+0x14>
 800aa84:	6a03      	ldr	r3, [r0, #32]
 800aa86:	b90b      	cbnz	r3, 800aa8c <__swsetup_r+0x14>
 800aa88:	f7ff fed2 	bl	800a830 <__sinit>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa92:	0718      	lsls	r0, r3, #28
 800aa94:	d422      	bmi.n	800aadc <__swsetup_r+0x64>
 800aa96:	06d9      	lsls	r1, r3, #27
 800aa98:	d407      	bmi.n	800aaaa <__swsetup_r+0x32>
 800aa9a:	2309      	movs	r3, #9
 800aa9c:	602b      	str	r3, [r5, #0]
 800aa9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaa8:	e034      	b.n	800ab14 <__swsetup_r+0x9c>
 800aaaa:	0758      	lsls	r0, r3, #29
 800aaac:	d512      	bpl.n	800aad4 <__swsetup_r+0x5c>
 800aaae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aab0:	b141      	cbz	r1, 800aac4 <__swsetup_r+0x4c>
 800aab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aab6:	4299      	cmp	r1, r3
 800aab8:	d002      	beq.n	800aac0 <__swsetup_r+0x48>
 800aaba:	4628      	mov	r0, r5
 800aabc:	f000 ff3e 	bl	800b93c <_free_r>
 800aac0:	2300      	movs	r3, #0
 800aac2:	6363      	str	r3, [r4, #52]	; 0x34
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaca:	81a3      	strh	r3, [r4, #12]
 800aacc:	2300      	movs	r3, #0
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	6923      	ldr	r3, [r4, #16]
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f043 0308 	orr.w	r3, r3, #8
 800aada:	81a3      	strh	r3, [r4, #12]
 800aadc:	6923      	ldr	r3, [r4, #16]
 800aade:	b94b      	cbnz	r3, 800aaf4 <__swsetup_r+0x7c>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaea:	d003      	beq.n	800aaf4 <__swsetup_r+0x7c>
 800aaec:	4621      	mov	r1, r4
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f001 fd04 	bl	800c4fc <__smakebuf_r>
 800aaf4:	89a0      	ldrh	r0, [r4, #12]
 800aaf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aafa:	f010 0301 	ands.w	r3, r0, #1
 800aafe:	d00a      	beq.n	800ab16 <__swsetup_r+0x9e>
 800ab00:	2300      	movs	r3, #0
 800ab02:	60a3      	str	r3, [r4, #8]
 800ab04:	6963      	ldr	r3, [r4, #20]
 800ab06:	425b      	negs	r3, r3
 800ab08:	61a3      	str	r3, [r4, #24]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	b943      	cbnz	r3, 800ab20 <__swsetup_r+0xa8>
 800ab0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab12:	d1c4      	bne.n	800aa9e <__swsetup_r+0x26>
 800ab14:	bd38      	pop	{r3, r4, r5, pc}
 800ab16:	0781      	lsls	r1, r0, #30
 800ab18:	bf58      	it	pl
 800ab1a:	6963      	ldrpl	r3, [r4, #20]
 800ab1c:	60a3      	str	r3, [r4, #8]
 800ab1e:	e7f4      	b.n	800ab0a <__swsetup_r+0x92>
 800ab20:	2000      	movs	r0, #0
 800ab22:	e7f7      	b.n	800ab14 <__swsetup_r+0x9c>
 800ab24:	20000064 	.word	0x20000064

0800ab28 <memset>:
 800ab28:	4402      	add	r2, r0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d100      	bne.n	800ab32 <memset+0xa>
 800ab30:	4770      	bx	lr
 800ab32:	f803 1b01 	strb.w	r1, [r3], #1
 800ab36:	e7f9      	b.n	800ab2c <memset+0x4>

0800ab38 <_localeconv_r>:
 800ab38:	4800      	ldr	r0, [pc, #0]	; (800ab3c <_localeconv_r+0x4>)
 800ab3a:	4770      	bx	lr
 800ab3c:	20000158 	.word	0x20000158

0800ab40 <_close_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4d06      	ldr	r5, [pc, #24]	; (800ab5c <_close_r+0x1c>)
 800ab44:	2300      	movs	r3, #0
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	602b      	str	r3, [r5, #0]
 800ab4c:	f7f6 ff1f 	bl	800198e <_close>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_close_r+0x1a>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_close_r+0x1a>
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	20001a9c 	.word	0x20001a9c

0800ab60 <_lseek_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d07      	ldr	r5, [pc, #28]	; (800ab80 <_lseek_r+0x20>)
 800ab64:	4604      	mov	r4, r0
 800ab66:	4608      	mov	r0, r1
 800ab68:	4611      	mov	r1, r2
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	602a      	str	r2, [r5, #0]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f7f6 ff34 	bl	80019dc <_lseek>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d102      	bne.n	800ab7e <_lseek_r+0x1e>
 800ab78:	682b      	ldr	r3, [r5, #0]
 800ab7a:	b103      	cbz	r3, 800ab7e <_lseek_r+0x1e>
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	20001a9c 	.word	0x20001a9c

0800ab84 <_read_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4d07      	ldr	r5, [pc, #28]	; (800aba4 <_read_r+0x20>)
 800ab88:	4604      	mov	r4, r0
 800ab8a:	4608      	mov	r0, r1
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	2200      	movs	r2, #0
 800ab90:	602a      	str	r2, [r5, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	f7f6 fede 	bl	8001954 <_read>
 800ab98:	1c43      	adds	r3, r0, #1
 800ab9a:	d102      	bne.n	800aba2 <_read_r+0x1e>
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	b103      	cbz	r3, 800aba2 <_read_r+0x1e>
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	20001a9c 	.word	0x20001a9c

0800aba8 <_sbrk_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d06      	ldr	r5, [pc, #24]	; (800abc4 <_sbrk_r+0x1c>)
 800abac:	2300      	movs	r3, #0
 800abae:	4604      	mov	r4, r0
 800abb0:	4608      	mov	r0, r1
 800abb2:	602b      	str	r3, [r5, #0]
 800abb4:	f7f6 ff20 	bl	80019f8 <_sbrk>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_sbrk_r+0x1a>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_sbrk_r+0x1a>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	20001a9c 	.word	0x20001a9c

0800abc8 <_write_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d07      	ldr	r5, [pc, #28]	; (800abe8 <_write_r+0x20>)
 800abcc:	4604      	mov	r4, r0
 800abce:	4608      	mov	r0, r1
 800abd0:	4611      	mov	r1, r2
 800abd2:	2200      	movs	r2, #0
 800abd4:	602a      	str	r2, [r5, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	f7f6 fa9a 	bl	8001110 <_write>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d102      	bne.n	800abe6 <_write_r+0x1e>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	b103      	cbz	r3, 800abe6 <_write_r+0x1e>
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	20001a9c 	.word	0x20001a9c

0800abec <__errno>:
 800abec:	4b01      	ldr	r3, [pc, #4]	; (800abf4 <__errno+0x8>)
 800abee:	6818      	ldr	r0, [r3, #0]
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	20000064 	.word	0x20000064

0800abf8 <__libc_init_array>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	4d0d      	ldr	r5, [pc, #52]	; (800ac30 <__libc_init_array+0x38>)
 800abfc:	4c0d      	ldr	r4, [pc, #52]	; (800ac34 <__libc_init_array+0x3c>)
 800abfe:	1b64      	subs	r4, r4, r5
 800ac00:	10a4      	asrs	r4, r4, #2
 800ac02:	2600      	movs	r6, #0
 800ac04:	42a6      	cmp	r6, r4
 800ac06:	d109      	bne.n	800ac1c <__libc_init_array+0x24>
 800ac08:	4d0b      	ldr	r5, [pc, #44]	; (800ac38 <__libc_init_array+0x40>)
 800ac0a:	4c0c      	ldr	r4, [pc, #48]	; (800ac3c <__libc_init_array+0x44>)
 800ac0c:	f004 f89c 	bl	800ed48 <_init>
 800ac10:	1b64      	subs	r4, r4, r5
 800ac12:	10a4      	asrs	r4, r4, #2
 800ac14:	2600      	movs	r6, #0
 800ac16:	42a6      	cmp	r6, r4
 800ac18:	d105      	bne.n	800ac26 <__libc_init_array+0x2e>
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
 800ac1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac20:	4798      	blx	r3
 800ac22:	3601      	adds	r6, #1
 800ac24:	e7ee      	b.n	800ac04 <__libc_init_array+0xc>
 800ac26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac2a:	4798      	blx	r3
 800ac2c:	3601      	adds	r6, #1
 800ac2e:	e7f2      	b.n	800ac16 <__libc_init_array+0x1e>
 800ac30:	0800f660 	.word	0x0800f660
 800ac34:	0800f660 	.word	0x0800f660
 800ac38:	0800f660 	.word	0x0800f660
 800ac3c:	0800f664 	.word	0x0800f664

0800ac40 <__retarget_lock_acquire_recursive>:
 800ac40:	4770      	bx	lr

0800ac42 <__retarget_lock_release_recursive>:
 800ac42:	4770      	bx	lr

0800ac44 <quorem>:
 800ac44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac48:	6903      	ldr	r3, [r0, #16]
 800ac4a:	690c      	ldr	r4, [r1, #16]
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	4607      	mov	r7, r0
 800ac50:	db7e      	blt.n	800ad50 <quorem+0x10c>
 800ac52:	3c01      	subs	r4, #1
 800ac54:	f101 0814 	add.w	r8, r1, #20
 800ac58:	f100 0514 	add.w	r5, r0, #20
 800ac5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac76:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac7a:	d331      	bcc.n	800ace0 <quorem+0x9c>
 800ac7c:	f04f 0e00 	mov.w	lr, #0
 800ac80:	4640      	mov	r0, r8
 800ac82:	46ac      	mov	ip, r5
 800ac84:	46f2      	mov	sl, lr
 800ac86:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac8a:	b293      	uxth	r3, r2
 800ac8c:	fb06 e303 	mla	r3, r6, r3, lr
 800ac90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac94:	0c1a      	lsrs	r2, r3, #16
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	ebaa 0303 	sub.w	r3, sl, r3
 800ac9c:	f8dc a000 	ldr.w	sl, [ip]
 800aca0:	fa13 f38a 	uxtah	r3, r3, sl
 800aca4:	fb06 220e 	mla	r2, r6, lr, r2
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	9b00      	ldr	r3, [sp, #0]
 800acac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800acb0:	b292      	uxth	r2, r2
 800acb2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800acb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acba:	f8bd 3000 	ldrh.w	r3, [sp]
 800acbe:	4581      	cmp	r9, r0
 800acc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acc4:	f84c 3b04 	str.w	r3, [ip], #4
 800acc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800accc:	d2db      	bcs.n	800ac86 <quorem+0x42>
 800acce:	f855 300b 	ldr.w	r3, [r5, fp]
 800acd2:	b92b      	cbnz	r3, 800ace0 <quorem+0x9c>
 800acd4:	9b01      	ldr	r3, [sp, #4]
 800acd6:	3b04      	subs	r3, #4
 800acd8:	429d      	cmp	r5, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	d32c      	bcc.n	800ad38 <quorem+0xf4>
 800acde:	613c      	str	r4, [r7, #16]
 800ace0:	4638      	mov	r0, r7
 800ace2:	f001 f8f3 	bl	800becc <__mcmp>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	db22      	blt.n	800ad30 <quorem+0xec>
 800acea:	3601      	adds	r6, #1
 800acec:	4629      	mov	r1, r5
 800acee:	2000      	movs	r0, #0
 800acf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800acf4:	f8d1 c000 	ldr.w	ip, [r1]
 800acf8:	b293      	uxth	r3, r2
 800acfa:	1ac3      	subs	r3, r0, r3
 800acfc:	0c12      	lsrs	r2, r2, #16
 800acfe:	fa13 f38c 	uxtah	r3, r3, ip
 800ad02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ad06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad10:	45c1      	cmp	r9, r8
 800ad12:	f841 3b04 	str.w	r3, [r1], #4
 800ad16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad1a:	d2e9      	bcs.n	800acf0 <quorem+0xac>
 800ad1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad24:	b922      	cbnz	r2, 800ad30 <quorem+0xec>
 800ad26:	3b04      	subs	r3, #4
 800ad28:	429d      	cmp	r5, r3
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	d30a      	bcc.n	800ad44 <quorem+0x100>
 800ad2e:	613c      	str	r4, [r7, #16]
 800ad30:	4630      	mov	r0, r6
 800ad32:	b003      	add	sp, #12
 800ad34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad38:	6812      	ldr	r2, [r2, #0]
 800ad3a:	3b04      	subs	r3, #4
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	d1ce      	bne.n	800acde <quorem+0x9a>
 800ad40:	3c01      	subs	r4, #1
 800ad42:	e7c9      	b.n	800acd8 <quorem+0x94>
 800ad44:	6812      	ldr	r2, [r2, #0]
 800ad46:	3b04      	subs	r3, #4
 800ad48:	2a00      	cmp	r2, #0
 800ad4a:	d1f0      	bne.n	800ad2e <quorem+0xea>
 800ad4c:	3c01      	subs	r4, #1
 800ad4e:	e7eb      	b.n	800ad28 <quorem+0xe4>
 800ad50:	2000      	movs	r0, #0
 800ad52:	e7ee      	b.n	800ad32 <quorem+0xee>
 800ad54:	0000      	movs	r0, r0
	...

0800ad58 <_dtoa_r>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	ed2d 8b04 	vpush	{d8-d9}
 800ad60:	69c5      	ldr	r5, [r0, #28]
 800ad62:	b093      	sub	sp, #76	; 0x4c
 800ad64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad68:	ec57 6b10 	vmov	r6, r7, d0
 800ad6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad70:	9107      	str	r1, [sp, #28]
 800ad72:	4604      	mov	r4, r0
 800ad74:	920a      	str	r2, [sp, #40]	; 0x28
 800ad76:	930d      	str	r3, [sp, #52]	; 0x34
 800ad78:	b975      	cbnz	r5, 800ad98 <_dtoa_r+0x40>
 800ad7a:	2010      	movs	r0, #16
 800ad7c:	f7fe ffc4 	bl	8009d08 <malloc>
 800ad80:	4602      	mov	r2, r0
 800ad82:	61e0      	str	r0, [r4, #28]
 800ad84:	b920      	cbnz	r0, 800ad90 <_dtoa_r+0x38>
 800ad86:	4bae      	ldr	r3, [pc, #696]	; (800b040 <_dtoa_r+0x2e8>)
 800ad88:	21ef      	movs	r1, #239	; 0xef
 800ad8a:	48ae      	ldr	r0, [pc, #696]	; (800b044 <_dtoa_r+0x2ec>)
 800ad8c:	f001 fc22 	bl	800c5d4 <__assert_func>
 800ad90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad94:	6005      	str	r5, [r0, #0]
 800ad96:	60c5      	str	r5, [r0, #12]
 800ad98:	69e3      	ldr	r3, [r4, #28]
 800ad9a:	6819      	ldr	r1, [r3, #0]
 800ad9c:	b151      	cbz	r1, 800adb4 <_dtoa_r+0x5c>
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	604a      	str	r2, [r1, #4]
 800ada2:	2301      	movs	r3, #1
 800ada4:	4093      	lsls	r3, r2
 800ada6:	608b      	str	r3, [r1, #8]
 800ada8:	4620      	mov	r0, r4
 800adaa:	f000 fe53 	bl	800ba54 <_Bfree>
 800adae:	69e3      	ldr	r3, [r4, #28]
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	1e3b      	subs	r3, r7, #0
 800adb6:	bfbb      	ittet	lt
 800adb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800adbc:	9303      	strlt	r3, [sp, #12]
 800adbe:	2300      	movge	r3, #0
 800adc0:	2201      	movlt	r2, #1
 800adc2:	bfac      	ite	ge
 800adc4:	f8c8 3000 	strge.w	r3, [r8]
 800adc8:	f8c8 2000 	strlt.w	r2, [r8]
 800adcc:	4b9e      	ldr	r3, [pc, #632]	; (800b048 <_dtoa_r+0x2f0>)
 800adce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800add2:	ea33 0308 	bics.w	r3, r3, r8
 800add6:	d11b      	bne.n	800ae10 <_dtoa_r+0xb8>
 800add8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adda:	f242 730f 	movw	r3, #9999	; 0x270f
 800adde:	6013      	str	r3, [r2, #0]
 800ade0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ade4:	4333      	orrs	r3, r6
 800ade6:	f000 8593 	beq.w	800b910 <_dtoa_r+0xbb8>
 800adea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adec:	b963      	cbnz	r3, 800ae08 <_dtoa_r+0xb0>
 800adee:	4b97      	ldr	r3, [pc, #604]	; (800b04c <_dtoa_r+0x2f4>)
 800adf0:	e027      	b.n	800ae42 <_dtoa_r+0xea>
 800adf2:	4b97      	ldr	r3, [pc, #604]	; (800b050 <_dtoa_r+0x2f8>)
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	3308      	adds	r3, #8
 800adf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	9800      	ldr	r0, [sp, #0]
 800adfe:	b013      	add	sp, #76	; 0x4c
 800ae00:	ecbd 8b04 	vpop	{d8-d9}
 800ae04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae08:	4b90      	ldr	r3, [pc, #576]	; (800b04c <_dtoa_r+0x2f4>)
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	3303      	adds	r3, #3
 800ae0e:	e7f3      	b.n	800adf8 <_dtoa_r+0xa0>
 800ae10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae14:	2200      	movs	r2, #0
 800ae16:	ec51 0b17 	vmov	r0, r1, d7
 800ae1a:	eeb0 8a47 	vmov.f32	s16, s14
 800ae1e:	eef0 8a67 	vmov.f32	s17, s15
 800ae22:	2300      	movs	r3, #0
 800ae24:	f7f5 fe70 	bl	8000b08 <__aeabi_dcmpeq>
 800ae28:	4681      	mov	r9, r0
 800ae2a:	b160      	cbz	r0, 800ae46 <_dtoa_r+0xee>
 800ae2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae2e:	2301      	movs	r3, #1
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 8568 	beq.w	800b90a <_dtoa_r+0xbb2>
 800ae3a:	4b86      	ldr	r3, [pc, #536]	; (800b054 <_dtoa_r+0x2fc>)
 800ae3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	9300      	str	r3, [sp, #0]
 800ae44:	e7da      	b.n	800adfc <_dtoa_r+0xa4>
 800ae46:	aa10      	add	r2, sp, #64	; 0x40
 800ae48:	a911      	add	r1, sp, #68	; 0x44
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae50:	eef0 0a68 	vmov.f32	s1, s17
 800ae54:	f001 f8e0 	bl	800c018 <__d2b>
 800ae58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	2d00      	cmp	r5, #0
 800ae60:	d07f      	beq.n	800af62 <_dtoa_r+0x20a>
 800ae62:	ee18 3a90 	vmov	r3, s17
 800ae66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ae6e:	ec51 0b18 	vmov	r0, r1, d8
 800ae72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ae7e:	4619      	mov	r1, r3
 800ae80:	2200      	movs	r2, #0
 800ae82:	4b75      	ldr	r3, [pc, #468]	; (800b058 <_dtoa_r+0x300>)
 800ae84:	f7f5 fa20 	bl	80002c8 <__aeabi_dsub>
 800ae88:	a367      	add	r3, pc, #412	; (adr r3, 800b028 <_dtoa_r+0x2d0>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 fbd3 	bl	8000638 <__aeabi_dmul>
 800ae92:	a367      	add	r3, pc, #412	; (adr r3, 800b030 <_dtoa_r+0x2d8>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f7f5 fa18 	bl	80002cc <__adddf3>
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	4628      	mov	r0, r5
 800aea0:	460f      	mov	r7, r1
 800aea2:	f7f5 fb5f 	bl	8000564 <__aeabi_i2d>
 800aea6:	a364      	add	r3, pc, #400	; (adr r3, 800b038 <_dtoa_r+0x2e0>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f7f5 fbc4 	bl	8000638 <__aeabi_dmul>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	f7f5 fa08 	bl	80002cc <__adddf3>
 800aebc:	4606      	mov	r6, r0
 800aebe:	460f      	mov	r7, r1
 800aec0:	f7f5 fe6a 	bl	8000b98 <__aeabi_d2iz>
 800aec4:	2200      	movs	r2, #0
 800aec6:	4683      	mov	fp, r0
 800aec8:	2300      	movs	r3, #0
 800aeca:	4630      	mov	r0, r6
 800aecc:	4639      	mov	r1, r7
 800aece:	f7f5 fe25 	bl	8000b1c <__aeabi_dcmplt>
 800aed2:	b148      	cbz	r0, 800aee8 <_dtoa_r+0x190>
 800aed4:	4658      	mov	r0, fp
 800aed6:	f7f5 fb45 	bl	8000564 <__aeabi_i2d>
 800aeda:	4632      	mov	r2, r6
 800aedc:	463b      	mov	r3, r7
 800aede:	f7f5 fe13 	bl	8000b08 <__aeabi_dcmpeq>
 800aee2:	b908      	cbnz	r0, 800aee8 <_dtoa_r+0x190>
 800aee4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aee8:	f1bb 0f16 	cmp.w	fp, #22
 800aeec:	d857      	bhi.n	800af9e <_dtoa_r+0x246>
 800aeee:	4b5b      	ldr	r3, [pc, #364]	; (800b05c <_dtoa_r+0x304>)
 800aef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	ec51 0b18 	vmov	r0, r1, d8
 800aefc:	f7f5 fe0e 	bl	8000b1c <__aeabi_dcmplt>
 800af00:	2800      	cmp	r0, #0
 800af02:	d04e      	beq.n	800afa2 <_dtoa_r+0x24a>
 800af04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800af08:	2300      	movs	r3, #0
 800af0a:	930c      	str	r3, [sp, #48]	; 0x30
 800af0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af0e:	1b5b      	subs	r3, r3, r5
 800af10:	1e5a      	subs	r2, r3, #1
 800af12:	bf45      	ittet	mi
 800af14:	f1c3 0301 	rsbmi	r3, r3, #1
 800af18:	9305      	strmi	r3, [sp, #20]
 800af1a:	2300      	movpl	r3, #0
 800af1c:	2300      	movmi	r3, #0
 800af1e:	9206      	str	r2, [sp, #24]
 800af20:	bf54      	ite	pl
 800af22:	9305      	strpl	r3, [sp, #20]
 800af24:	9306      	strmi	r3, [sp, #24]
 800af26:	f1bb 0f00 	cmp.w	fp, #0
 800af2a:	db3c      	blt.n	800afa6 <_dtoa_r+0x24e>
 800af2c:	9b06      	ldr	r3, [sp, #24]
 800af2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800af32:	445b      	add	r3, fp
 800af34:	9306      	str	r3, [sp, #24]
 800af36:	2300      	movs	r3, #0
 800af38:	9308      	str	r3, [sp, #32]
 800af3a:	9b07      	ldr	r3, [sp, #28]
 800af3c:	2b09      	cmp	r3, #9
 800af3e:	d868      	bhi.n	800b012 <_dtoa_r+0x2ba>
 800af40:	2b05      	cmp	r3, #5
 800af42:	bfc4      	itt	gt
 800af44:	3b04      	subgt	r3, #4
 800af46:	9307      	strgt	r3, [sp, #28]
 800af48:	9b07      	ldr	r3, [sp, #28]
 800af4a:	f1a3 0302 	sub.w	r3, r3, #2
 800af4e:	bfcc      	ite	gt
 800af50:	2500      	movgt	r5, #0
 800af52:	2501      	movle	r5, #1
 800af54:	2b03      	cmp	r3, #3
 800af56:	f200 8085 	bhi.w	800b064 <_dtoa_r+0x30c>
 800af5a:	e8df f003 	tbb	[pc, r3]
 800af5e:	3b2e      	.short	0x3b2e
 800af60:	5839      	.short	0x5839
 800af62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800af66:	441d      	add	r5, r3
 800af68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	bfc1      	itttt	gt
 800af70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af74:	fa08 f803 	lslgt.w	r8, r8, r3
 800af78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800af7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800af80:	bfd6      	itet	le
 800af82:	f1c3 0320 	rsble	r3, r3, #32
 800af86:	ea48 0003 	orrgt.w	r0, r8, r3
 800af8a:	fa06 f003 	lslle.w	r0, r6, r3
 800af8e:	f7f5 fad9 	bl	8000544 <__aeabi_ui2d>
 800af92:	2201      	movs	r2, #1
 800af94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800af98:	3d01      	subs	r5, #1
 800af9a:	920e      	str	r2, [sp, #56]	; 0x38
 800af9c:	e76f      	b.n	800ae7e <_dtoa_r+0x126>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e7b3      	b.n	800af0a <_dtoa_r+0x1b2>
 800afa2:	900c      	str	r0, [sp, #48]	; 0x30
 800afa4:	e7b2      	b.n	800af0c <_dtoa_r+0x1b4>
 800afa6:	9b05      	ldr	r3, [sp, #20]
 800afa8:	eba3 030b 	sub.w	r3, r3, fp
 800afac:	9305      	str	r3, [sp, #20]
 800afae:	f1cb 0300 	rsb	r3, fp, #0
 800afb2:	9308      	str	r3, [sp, #32]
 800afb4:	2300      	movs	r3, #0
 800afb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800afb8:	e7bf      	b.n	800af3a <_dtoa_r+0x1e2>
 800afba:	2300      	movs	r3, #0
 800afbc:	9309      	str	r3, [sp, #36]	; 0x24
 800afbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	dc52      	bgt.n	800b06a <_dtoa_r+0x312>
 800afc4:	2301      	movs	r3, #1
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	9304      	str	r3, [sp, #16]
 800afca:	461a      	mov	r2, r3
 800afcc:	920a      	str	r2, [sp, #40]	; 0x28
 800afce:	e00b      	b.n	800afe8 <_dtoa_r+0x290>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e7f3      	b.n	800afbc <_dtoa_r+0x264>
 800afd4:	2300      	movs	r3, #0
 800afd6:	9309      	str	r3, [sp, #36]	; 0x24
 800afd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afda:	445b      	add	r3, fp
 800afdc:	9301      	str	r3, [sp, #4]
 800afde:	3301      	adds	r3, #1
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	9304      	str	r3, [sp, #16]
 800afe4:	bfb8      	it	lt
 800afe6:	2301      	movlt	r3, #1
 800afe8:	69e0      	ldr	r0, [r4, #28]
 800afea:	2100      	movs	r1, #0
 800afec:	2204      	movs	r2, #4
 800afee:	f102 0614 	add.w	r6, r2, #20
 800aff2:	429e      	cmp	r6, r3
 800aff4:	d93d      	bls.n	800b072 <_dtoa_r+0x31a>
 800aff6:	6041      	str	r1, [r0, #4]
 800aff8:	4620      	mov	r0, r4
 800affa:	f000 fceb 	bl	800b9d4 <_Balloc>
 800affe:	9000      	str	r0, [sp, #0]
 800b000:	2800      	cmp	r0, #0
 800b002:	d139      	bne.n	800b078 <_dtoa_r+0x320>
 800b004:	4b16      	ldr	r3, [pc, #88]	; (800b060 <_dtoa_r+0x308>)
 800b006:	4602      	mov	r2, r0
 800b008:	f240 11af 	movw	r1, #431	; 0x1af
 800b00c:	e6bd      	b.n	800ad8a <_dtoa_r+0x32>
 800b00e:	2301      	movs	r3, #1
 800b010:	e7e1      	b.n	800afd6 <_dtoa_r+0x27e>
 800b012:	2501      	movs	r5, #1
 800b014:	2300      	movs	r3, #0
 800b016:	9307      	str	r3, [sp, #28]
 800b018:	9509      	str	r5, [sp, #36]	; 0x24
 800b01a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	9304      	str	r3, [sp, #16]
 800b022:	2200      	movs	r2, #0
 800b024:	2312      	movs	r3, #18
 800b026:	e7d1      	b.n	800afcc <_dtoa_r+0x274>
 800b028:	636f4361 	.word	0x636f4361
 800b02c:	3fd287a7 	.word	0x3fd287a7
 800b030:	8b60c8b3 	.word	0x8b60c8b3
 800b034:	3fc68a28 	.word	0x3fc68a28
 800b038:	509f79fb 	.word	0x509f79fb
 800b03c:	3fd34413 	.word	0x3fd34413
 800b040:	0800f099 	.word	0x0800f099
 800b044:	0800f0b0 	.word	0x0800f0b0
 800b048:	7ff00000 	.word	0x7ff00000
 800b04c:	0800f095 	.word	0x0800f095
 800b050:	0800f08c 	.word	0x0800f08c
 800b054:	0800f069 	.word	0x0800f069
 800b058:	3ff80000 	.word	0x3ff80000
 800b05c:	0800f1a0 	.word	0x0800f1a0
 800b060:	0800f108 	.word	0x0800f108
 800b064:	2301      	movs	r3, #1
 800b066:	9309      	str	r3, [sp, #36]	; 0x24
 800b068:	e7d7      	b.n	800b01a <_dtoa_r+0x2c2>
 800b06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b06c:	9301      	str	r3, [sp, #4]
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	e7ba      	b.n	800afe8 <_dtoa_r+0x290>
 800b072:	3101      	adds	r1, #1
 800b074:	0052      	lsls	r2, r2, #1
 800b076:	e7ba      	b.n	800afee <_dtoa_r+0x296>
 800b078:	69e3      	ldr	r3, [r4, #28]
 800b07a:	9a00      	ldr	r2, [sp, #0]
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	9b04      	ldr	r3, [sp, #16]
 800b080:	2b0e      	cmp	r3, #14
 800b082:	f200 80a8 	bhi.w	800b1d6 <_dtoa_r+0x47e>
 800b086:	2d00      	cmp	r5, #0
 800b088:	f000 80a5 	beq.w	800b1d6 <_dtoa_r+0x47e>
 800b08c:	f1bb 0f00 	cmp.w	fp, #0
 800b090:	dd38      	ble.n	800b104 <_dtoa_r+0x3ac>
 800b092:	4bc0      	ldr	r3, [pc, #768]	; (800b394 <_dtoa_r+0x63c>)
 800b094:	f00b 020f 	and.w	r2, fp, #15
 800b098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b09c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b0a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b0a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b0a8:	d019      	beq.n	800b0de <_dtoa_r+0x386>
 800b0aa:	4bbb      	ldr	r3, [pc, #748]	; (800b398 <_dtoa_r+0x640>)
 800b0ac:	ec51 0b18 	vmov	r0, r1, d8
 800b0b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0b4:	f7f5 fbea 	bl	800088c <__aeabi_ddiv>
 800b0b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0bc:	f008 080f 	and.w	r8, r8, #15
 800b0c0:	2503      	movs	r5, #3
 800b0c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b398 <_dtoa_r+0x640>
 800b0c6:	f1b8 0f00 	cmp.w	r8, #0
 800b0ca:	d10a      	bne.n	800b0e2 <_dtoa_r+0x38a>
 800b0cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0d0:	4632      	mov	r2, r6
 800b0d2:	463b      	mov	r3, r7
 800b0d4:	f7f5 fbda 	bl	800088c <__aeabi_ddiv>
 800b0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0dc:	e02b      	b.n	800b136 <_dtoa_r+0x3de>
 800b0de:	2502      	movs	r5, #2
 800b0e0:	e7ef      	b.n	800b0c2 <_dtoa_r+0x36a>
 800b0e2:	f018 0f01 	tst.w	r8, #1
 800b0e6:	d008      	beq.n	800b0fa <_dtoa_r+0x3a2>
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b0f0:	f7f5 faa2 	bl	8000638 <__aeabi_dmul>
 800b0f4:	3501      	adds	r5, #1
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460f      	mov	r7, r1
 800b0fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b0fe:	f109 0908 	add.w	r9, r9, #8
 800b102:	e7e0      	b.n	800b0c6 <_dtoa_r+0x36e>
 800b104:	f000 809f 	beq.w	800b246 <_dtoa_r+0x4ee>
 800b108:	f1cb 0600 	rsb	r6, fp, #0
 800b10c:	4ba1      	ldr	r3, [pc, #644]	; (800b394 <_dtoa_r+0x63c>)
 800b10e:	4fa2      	ldr	r7, [pc, #648]	; (800b398 <_dtoa_r+0x640>)
 800b110:	f006 020f 	and.w	r2, r6, #15
 800b114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11c:	ec51 0b18 	vmov	r0, r1, d8
 800b120:	f7f5 fa8a 	bl	8000638 <__aeabi_dmul>
 800b124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b128:	1136      	asrs	r6, r6, #4
 800b12a:	2300      	movs	r3, #0
 800b12c:	2502      	movs	r5, #2
 800b12e:	2e00      	cmp	r6, #0
 800b130:	d17e      	bne.n	800b230 <_dtoa_r+0x4d8>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1d0      	bne.n	800b0d8 <_dtoa_r+0x380>
 800b136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b138:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 8084 	beq.w	800b24a <_dtoa_r+0x4f2>
 800b142:	4b96      	ldr	r3, [pc, #600]	; (800b39c <_dtoa_r+0x644>)
 800b144:	2200      	movs	r2, #0
 800b146:	4640      	mov	r0, r8
 800b148:	4649      	mov	r1, r9
 800b14a:	f7f5 fce7 	bl	8000b1c <__aeabi_dcmplt>
 800b14e:	2800      	cmp	r0, #0
 800b150:	d07b      	beq.n	800b24a <_dtoa_r+0x4f2>
 800b152:	9b04      	ldr	r3, [sp, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d078      	beq.n	800b24a <_dtoa_r+0x4f2>
 800b158:	9b01      	ldr	r3, [sp, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	dd39      	ble.n	800b1d2 <_dtoa_r+0x47a>
 800b15e:	4b90      	ldr	r3, [pc, #576]	; (800b3a0 <_dtoa_r+0x648>)
 800b160:	2200      	movs	r2, #0
 800b162:	4640      	mov	r0, r8
 800b164:	4649      	mov	r1, r9
 800b166:	f7f5 fa67 	bl	8000638 <__aeabi_dmul>
 800b16a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b16e:	9e01      	ldr	r6, [sp, #4]
 800b170:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800b174:	3501      	adds	r5, #1
 800b176:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b17a:	4628      	mov	r0, r5
 800b17c:	f7f5 f9f2 	bl	8000564 <__aeabi_i2d>
 800b180:	4642      	mov	r2, r8
 800b182:	464b      	mov	r3, r9
 800b184:	f7f5 fa58 	bl	8000638 <__aeabi_dmul>
 800b188:	4b86      	ldr	r3, [pc, #536]	; (800b3a4 <_dtoa_r+0x64c>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	f7f5 f89e 	bl	80002cc <__adddf3>
 800b190:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b198:	9303      	str	r3, [sp, #12]
 800b19a:	2e00      	cmp	r6, #0
 800b19c:	d158      	bne.n	800b250 <_dtoa_r+0x4f8>
 800b19e:	4b82      	ldr	r3, [pc, #520]	; (800b3a8 <_dtoa_r+0x650>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f7f5 f88f 	bl	80002c8 <__aeabi_dsub>
 800b1aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	4689      	mov	r9, r1
 800b1b2:	f7f5 fcd1 	bl	8000b58 <__aeabi_dcmpgt>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f040 8296 	bne.w	800b6e8 <_dtoa_r+0x990>
 800b1bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b1c0:	4640      	mov	r0, r8
 800b1c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f7f5 fca8 	bl	8000b1c <__aeabi_dcmplt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f040 8289 	bne.w	800b6e4 <_dtoa_r+0x98c>
 800b1d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b1d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f2c0 814e 	blt.w	800b47a <_dtoa_r+0x722>
 800b1de:	f1bb 0f0e 	cmp.w	fp, #14
 800b1e2:	f300 814a 	bgt.w	800b47a <_dtoa_r+0x722>
 800b1e6:	4b6b      	ldr	r3, [pc, #428]	; (800b394 <_dtoa_r+0x63c>)
 800b1e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b1ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f280 80dc 	bge.w	800b3b0 <_dtoa_r+0x658>
 800b1f8:	9b04      	ldr	r3, [sp, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f300 80d8 	bgt.w	800b3b0 <_dtoa_r+0x658>
 800b200:	f040 826f 	bne.w	800b6e2 <_dtoa_r+0x98a>
 800b204:	4b68      	ldr	r3, [pc, #416]	; (800b3a8 <_dtoa_r+0x650>)
 800b206:	2200      	movs	r2, #0
 800b208:	4640      	mov	r0, r8
 800b20a:	4649      	mov	r1, r9
 800b20c:	f7f5 fa14 	bl	8000638 <__aeabi_dmul>
 800b210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b214:	f7f5 fc96 	bl	8000b44 <__aeabi_dcmpge>
 800b218:	9e04      	ldr	r6, [sp, #16]
 800b21a:	4637      	mov	r7, r6
 800b21c:	2800      	cmp	r0, #0
 800b21e:	f040 8245 	bne.w	800b6ac <_dtoa_r+0x954>
 800b222:	9d00      	ldr	r5, [sp, #0]
 800b224:	2331      	movs	r3, #49	; 0x31
 800b226:	f805 3b01 	strb.w	r3, [r5], #1
 800b22a:	f10b 0b01 	add.w	fp, fp, #1
 800b22e:	e241      	b.n	800b6b4 <_dtoa_r+0x95c>
 800b230:	07f2      	lsls	r2, r6, #31
 800b232:	d505      	bpl.n	800b240 <_dtoa_r+0x4e8>
 800b234:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b238:	f7f5 f9fe 	bl	8000638 <__aeabi_dmul>
 800b23c:	3501      	adds	r5, #1
 800b23e:	2301      	movs	r3, #1
 800b240:	1076      	asrs	r6, r6, #1
 800b242:	3708      	adds	r7, #8
 800b244:	e773      	b.n	800b12e <_dtoa_r+0x3d6>
 800b246:	2502      	movs	r5, #2
 800b248:	e775      	b.n	800b136 <_dtoa_r+0x3de>
 800b24a:	9e04      	ldr	r6, [sp, #16]
 800b24c:	465f      	mov	r7, fp
 800b24e:	e792      	b.n	800b176 <_dtoa_r+0x41e>
 800b250:	9900      	ldr	r1, [sp, #0]
 800b252:	4b50      	ldr	r3, [pc, #320]	; (800b394 <_dtoa_r+0x63c>)
 800b254:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b258:	4431      	add	r1, r6
 800b25a:	9102      	str	r1, [sp, #8]
 800b25c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b25e:	eeb0 9a47 	vmov.f32	s18, s14
 800b262:	eef0 9a67 	vmov.f32	s19, s15
 800b266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b26a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b26e:	2900      	cmp	r1, #0
 800b270:	d044      	beq.n	800b2fc <_dtoa_r+0x5a4>
 800b272:	494e      	ldr	r1, [pc, #312]	; (800b3ac <_dtoa_r+0x654>)
 800b274:	2000      	movs	r0, #0
 800b276:	f7f5 fb09 	bl	800088c <__aeabi_ddiv>
 800b27a:	ec53 2b19 	vmov	r2, r3, d9
 800b27e:	f7f5 f823 	bl	80002c8 <__aeabi_dsub>
 800b282:	9d00      	ldr	r5, [sp, #0]
 800b284:	ec41 0b19 	vmov	d9, r0, r1
 800b288:	4649      	mov	r1, r9
 800b28a:	4640      	mov	r0, r8
 800b28c:	f7f5 fc84 	bl	8000b98 <__aeabi_d2iz>
 800b290:	4606      	mov	r6, r0
 800b292:	f7f5 f967 	bl	8000564 <__aeabi_i2d>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4640      	mov	r0, r8
 800b29c:	4649      	mov	r1, r9
 800b29e:	f7f5 f813 	bl	80002c8 <__aeabi_dsub>
 800b2a2:	3630      	adds	r6, #48	; 0x30
 800b2a4:	f805 6b01 	strb.w	r6, [r5], #1
 800b2a8:	ec53 2b19 	vmov	r2, r3, d9
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	4689      	mov	r9, r1
 800b2b0:	f7f5 fc34 	bl	8000b1c <__aeabi_dcmplt>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d164      	bne.n	800b382 <_dtoa_r+0x62a>
 800b2b8:	4642      	mov	r2, r8
 800b2ba:	464b      	mov	r3, r9
 800b2bc:	4937      	ldr	r1, [pc, #220]	; (800b39c <_dtoa_r+0x644>)
 800b2be:	2000      	movs	r0, #0
 800b2c0:	f7f5 f802 	bl	80002c8 <__aeabi_dsub>
 800b2c4:	ec53 2b19 	vmov	r2, r3, d9
 800b2c8:	f7f5 fc28 	bl	8000b1c <__aeabi_dcmplt>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	f040 80b6 	bne.w	800b43e <_dtoa_r+0x6e6>
 800b2d2:	9b02      	ldr	r3, [sp, #8]
 800b2d4:	429d      	cmp	r5, r3
 800b2d6:	f43f af7c 	beq.w	800b1d2 <_dtoa_r+0x47a>
 800b2da:	4b31      	ldr	r3, [pc, #196]	; (800b3a0 <_dtoa_r+0x648>)
 800b2dc:	ec51 0b19 	vmov	r0, r1, d9
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f7f5 f9a9 	bl	8000638 <__aeabi_dmul>
 800b2e6:	4b2e      	ldr	r3, [pc, #184]	; (800b3a0 <_dtoa_r+0x648>)
 800b2e8:	ec41 0b19 	vmov	d9, r0, r1
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	4649      	mov	r1, r9
 800b2f2:	f7f5 f9a1 	bl	8000638 <__aeabi_dmul>
 800b2f6:	4680      	mov	r8, r0
 800b2f8:	4689      	mov	r9, r1
 800b2fa:	e7c5      	b.n	800b288 <_dtoa_r+0x530>
 800b2fc:	ec51 0b17 	vmov	r0, r1, d7
 800b300:	f7f5 f99a 	bl	8000638 <__aeabi_dmul>
 800b304:	9b02      	ldr	r3, [sp, #8]
 800b306:	9d00      	ldr	r5, [sp, #0]
 800b308:	930f      	str	r3, [sp, #60]	; 0x3c
 800b30a:	ec41 0b19 	vmov	d9, r0, r1
 800b30e:	4649      	mov	r1, r9
 800b310:	4640      	mov	r0, r8
 800b312:	f7f5 fc41 	bl	8000b98 <__aeabi_d2iz>
 800b316:	4606      	mov	r6, r0
 800b318:	f7f5 f924 	bl	8000564 <__aeabi_i2d>
 800b31c:	3630      	adds	r6, #48	; 0x30
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	4640      	mov	r0, r8
 800b324:	4649      	mov	r1, r9
 800b326:	f7f4 ffcf 	bl	80002c8 <__aeabi_dsub>
 800b32a:	f805 6b01 	strb.w	r6, [r5], #1
 800b32e:	9b02      	ldr	r3, [sp, #8]
 800b330:	429d      	cmp	r5, r3
 800b332:	4680      	mov	r8, r0
 800b334:	4689      	mov	r9, r1
 800b336:	f04f 0200 	mov.w	r2, #0
 800b33a:	d124      	bne.n	800b386 <_dtoa_r+0x62e>
 800b33c:	4b1b      	ldr	r3, [pc, #108]	; (800b3ac <_dtoa_r+0x654>)
 800b33e:	ec51 0b19 	vmov	r0, r1, d9
 800b342:	f7f4 ffc3 	bl	80002cc <__adddf3>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	4640      	mov	r0, r8
 800b34c:	4649      	mov	r1, r9
 800b34e:	f7f5 fc03 	bl	8000b58 <__aeabi_dcmpgt>
 800b352:	2800      	cmp	r0, #0
 800b354:	d173      	bne.n	800b43e <_dtoa_r+0x6e6>
 800b356:	ec53 2b19 	vmov	r2, r3, d9
 800b35a:	4914      	ldr	r1, [pc, #80]	; (800b3ac <_dtoa_r+0x654>)
 800b35c:	2000      	movs	r0, #0
 800b35e:	f7f4 ffb3 	bl	80002c8 <__aeabi_dsub>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4640      	mov	r0, r8
 800b368:	4649      	mov	r1, r9
 800b36a:	f7f5 fbd7 	bl	8000b1c <__aeabi_dcmplt>
 800b36e:	2800      	cmp	r0, #0
 800b370:	f43f af2f 	beq.w	800b1d2 <_dtoa_r+0x47a>
 800b374:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b376:	1e6b      	subs	r3, r5, #1
 800b378:	930f      	str	r3, [sp, #60]	; 0x3c
 800b37a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b37e:	2b30      	cmp	r3, #48	; 0x30
 800b380:	d0f8      	beq.n	800b374 <_dtoa_r+0x61c>
 800b382:	46bb      	mov	fp, r7
 800b384:	e04a      	b.n	800b41c <_dtoa_r+0x6c4>
 800b386:	4b06      	ldr	r3, [pc, #24]	; (800b3a0 <_dtoa_r+0x648>)
 800b388:	f7f5 f956 	bl	8000638 <__aeabi_dmul>
 800b38c:	4680      	mov	r8, r0
 800b38e:	4689      	mov	r9, r1
 800b390:	e7bd      	b.n	800b30e <_dtoa_r+0x5b6>
 800b392:	bf00      	nop
 800b394:	0800f1a0 	.word	0x0800f1a0
 800b398:	0800f178 	.word	0x0800f178
 800b39c:	3ff00000 	.word	0x3ff00000
 800b3a0:	40240000 	.word	0x40240000
 800b3a4:	401c0000 	.word	0x401c0000
 800b3a8:	40140000 	.word	0x40140000
 800b3ac:	3fe00000 	.word	0x3fe00000
 800b3b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b3b4:	9d00      	ldr	r5, [sp, #0]
 800b3b6:	4642      	mov	r2, r8
 800b3b8:	464b      	mov	r3, r9
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	4639      	mov	r1, r7
 800b3be:	f7f5 fa65 	bl	800088c <__aeabi_ddiv>
 800b3c2:	f7f5 fbe9 	bl	8000b98 <__aeabi_d2iz>
 800b3c6:	9001      	str	r0, [sp, #4]
 800b3c8:	f7f5 f8cc 	bl	8000564 <__aeabi_i2d>
 800b3cc:	4642      	mov	r2, r8
 800b3ce:	464b      	mov	r3, r9
 800b3d0:	f7f5 f932 	bl	8000638 <__aeabi_dmul>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4630      	mov	r0, r6
 800b3da:	4639      	mov	r1, r7
 800b3dc:	f7f4 ff74 	bl	80002c8 <__aeabi_dsub>
 800b3e0:	9e01      	ldr	r6, [sp, #4]
 800b3e2:	9f04      	ldr	r7, [sp, #16]
 800b3e4:	3630      	adds	r6, #48	; 0x30
 800b3e6:	f805 6b01 	strb.w	r6, [r5], #1
 800b3ea:	9e00      	ldr	r6, [sp, #0]
 800b3ec:	1bae      	subs	r6, r5, r6
 800b3ee:	42b7      	cmp	r7, r6
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	d134      	bne.n	800b460 <_dtoa_r+0x708>
 800b3f6:	f7f4 ff69 	bl	80002cc <__adddf3>
 800b3fa:	4642      	mov	r2, r8
 800b3fc:	464b      	mov	r3, r9
 800b3fe:	4606      	mov	r6, r0
 800b400:	460f      	mov	r7, r1
 800b402:	f7f5 fba9 	bl	8000b58 <__aeabi_dcmpgt>
 800b406:	b9c8      	cbnz	r0, 800b43c <_dtoa_r+0x6e4>
 800b408:	4642      	mov	r2, r8
 800b40a:	464b      	mov	r3, r9
 800b40c:	4630      	mov	r0, r6
 800b40e:	4639      	mov	r1, r7
 800b410:	f7f5 fb7a 	bl	8000b08 <__aeabi_dcmpeq>
 800b414:	b110      	cbz	r0, 800b41c <_dtoa_r+0x6c4>
 800b416:	9b01      	ldr	r3, [sp, #4]
 800b418:	07db      	lsls	r3, r3, #31
 800b41a:	d40f      	bmi.n	800b43c <_dtoa_r+0x6e4>
 800b41c:	4651      	mov	r1, sl
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 fb18 	bl	800ba54 <_Bfree>
 800b424:	2300      	movs	r3, #0
 800b426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b428:	702b      	strb	r3, [r5, #0]
 800b42a:	f10b 0301 	add.w	r3, fp, #1
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b432:	2b00      	cmp	r3, #0
 800b434:	f43f ace2 	beq.w	800adfc <_dtoa_r+0xa4>
 800b438:	601d      	str	r5, [r3, #0]
 800b43a:	e4df      	b.n	800adfc <_dtoa_r+0xa4>
 800b43c:	465f      	mov	r7, fp
 800b43e:	462b      	mov	r3, r5
 800b440:	461d      	mov	r5, r3
 800b442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b446:	2a39      	cmp	r2, #57	; 0x39
 800b448:	d106      	bne.n	800b458 <_dtoa_r+0x700>
 800b44a:	9a00      	ldr	r2, [sp, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d1f7      	bne.n	800b440 <_dtoa_r+0x6e8>
 800b450:	9900      	ldr	r1, [sp, #0]
 800b452:	2230      	movs	r2, #48	; 0x30
 800b454:	3701      	adds	r7, #1
 800b456:	700a      	strb	r2, [r1, #0]
 800b458:	781a      	ldrb	r2, [r3, #0]
 800b45a:	3201      	adds	r2, #1
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	e790      	b.n	800b382 <_dtoa_r+0x62a>
 800b460:	4ba3      	ldr	r3, [pc, #652]	; (800b6f0 <_dtoa_r+0x998>)
 800b462:	2200      	movs	r2, #0
 800b464:	f7f5 f8e8 	bl	8000638 <__aeabi_dmul>
 800b468:	2200      	movs	r2, #0
 800b46a:	2300      	movs	r3, #0
 800b46c:	4606      	mov	r6, r0
 800b46e:	460f      	mov	r7, r1
 800b470:	f7f5 fb4a 	bl	8000b08 <__aeabi_dcmpeq>
 800b474:	2800      	cmp	r0, #0
 800b476:	d09e      	beq.n	800b3b6 <_dtoa_r+0x65e>
 800b478:	e7d0      	b.n	800b41c <_dtoa_r+0x6c4>
 800b47a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b47c:	2a00      	cmp	r2, #0
 800b47e:	f000 80ca 	beq.w	800b616 <_dtoa_r+0x8be>
 800b482:	9a07      	ldr	r2, [sp, #28]
 800b484:	2a01      	cmp	r2, #1
 800b486:	f300 80ad 	bgt.w	800b5e4 <_dtoa_r+0x88c>
 800b48a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b48c:	2a00      	cmp	r2, #0
 800b48e:	f000 80a5 	beq.w	800b5dc <_dtoa_r+0x884>
 800b492:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b496:	9e08      	ldr	r6, [sp, #32]
 800b498:	9d05      	ldr	r5, [sp, #20]
 800b49a:	9a05      	ldr	r2, [sp, #20]
 800b49c:	441a      	add	r2, r3
 800b49e:	9205      	str	r2, [sp, #20]
 800b4a0:	9a06      	ldr	r2, [sp, #24]
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	441a      	add	r2, r3
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	9206      	str	r2, [sp, #24]
 800b4aa:	f000 fb89 	bl	800bbc0 <__i2b>
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	b165      	cbz	r5, 800b4cc <_dtoa_r+0x774>
 800b4b2:	9b06      	ldr	r3, [sp, #24]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dd09      	ble.n	800b4cc <_dtoa_r+0x774>
 800b4b8:	42ab      	cmp	r3, r5
 800b4ba:	9a05      	ldr	r2, [sp, #20]
 800b4bc:	bfa8      	it	ge
 800b4be:	462b      	movge	r3, r5
 800b4c0:	1ad2      	subs	r2, r2, r3
 800b4c2:	9205      	str	r2, [sp, #20]
 800b4c4:	9a06      	ldr	r2, [sp, #24]
 800b4c6:	1aed      	subs	r5, r5, r3
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	9306      	str	r3, [sp, #24]
 800b4cc:	9b08      	ldr	r3, [sp, #32]
 800b4ce:	b1f3      	cbz	r3, 800b50e <_dtoa_r+0x7b6>
 800b4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 80a3 	beq.w	800b61e <_dtoa_r+0x8c6>
 800b4d8:	2e00      	cmp	r6, #0
 800b4da:	dd10      	ble.n	800b4fe <_dtoa_r+0x7a6>
 800b4dc:	4639      	mov	r1, r7
 800b4de:	4632      	mov	r2, r6
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 fc2d 	bl	800bd40 <__pow5mult>
 800b4e6:	4652      	mov	r2, sl
 800b4e8:	4601      	mov	r1, r0
 800b4ea:	4607      	mov	r7, r0
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 fb7d 	bl	800bbec <__multiply>
 800b4f2:	4651      	mov	r1, sl
 800b4f4:	4680      	mov	r8, r0
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f000 faac 	bl	800ba54 <_Bfree>
 800b4fc:	46c2      	mov	sl, r8
 800b4fe:	9b08      	ldr	r3, [sp, #32]
 800b500:	1b9a      	subs	r2, r3, r6
 800b502:	d004      	beq.n	800b50e <_dtoa_r+0x7b6>
 800b504:	4651      	mov	r1, sl
 800b506:	4620      	mov	r0, r4
 800b508:	f000 fc1a 	bl	800bd40 <__pow5mult>
 800b50c:	4682      	mov	sl, r0
 800b50e:	2101      	movs	r1, #1
 800b510:	4620      	mov	r0, r4
 800b512:	f000 fb55 	bl	800bbc0 <__i2b>
 800b516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	4606      	mov	r6, r0
 800b51c:	f340 8081 	ble.w	800b622 <_dtoa_r+0x8ca>
 800b520:	461a      	mov	r2, r3
 800b522:	4601      	mov	r1, r0
 800b524:	4620      	mov	r0, r4
 800b526:	f000 fc0b 	bl	800bd40 <__pow5mult>
 800b52a:	9b07      	ldr	r3, [sp, #28]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	4606      	mov	r6, r0
 800b530:	dd7a      	ble.n	800b628 <_dtoa_r+0x8d0>
 800b532:	f04f 0800 	mov.w	r8, #0
 800b536:	6933      	ldr	r3, [r6, #16]
 800b538:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b53c:	6918      	ldr	r0, [r3, #16]
 800b53e:	f000 faf1 	bl	800bb24 <__hi0bits>
 800b542:	f1c0 0020 	rsb	r0, r0, #32
 800b546:	9b06      	ldr	r3, [sp, #24]
 800b548:	4418      	add	r0, r3
 800b54a:	f010 001f 	ands.w	r0, r0, #31
 800b54e:	f000 8094 	beq.w	800b67a <_dtoa_r+0x922>
 800b552:	f1c0 0320 	rsb	r3, r0, #32
 800b556:	2b04      	cmp	r3, #4
 800b558:	f340 8085 	ble.w	800b666 <_dtoa_r+0x90e>
 800b55c:	9b05      	ldr	r3, [sp, #20]
 800b55e:	f1c0 001c 	rsb	r0, r0, #28
 800b562:	4403      	add	r3, r0
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	9b06      	ldr	r3, [sp, #24]
 800b568:	4403      	add	r3, r0
 800b56a:	4405      	add	r5, r0
 800b56c:	9306      	str	r3, [sp, #24]
 800b56e:	9b05      	ldr	r3, [sp, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	dd05      	ble.n	800b580 <_dtoa_r+0x828>
 800b574:	4651      	mov	r1, sl
 800b576:	461a      	mov	r2, r3
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fc3b 	bl	800bdf4 <__lshift>
 800b57e:	4682      	mov	sl, r0
 800b580:	9b06      	ldr	r3, [sp, #24]
 800b582:	2b00      	cmp	r3, #0
 800b584:	dd05      	ble.n	800b592 <_dtoa_r+0x83a>
 800b586:	4631      	mov	r1, r6
 800b588:	461a      	mov	r2, r3
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 fc32 	bl	800bdf4 <__lshift>
 800b590:	4606      	mov	r6, r0
 800b592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b594:	2b00      	cmp	r3, #0
 800b596:	d072      	beq.n	800b67e <_dtoa_r+0x926>
 800b598:	4631      	mov	r1, r6
 800b59a:	4650      	mov	r0, sl
 800b59c:	f000 fc96 	bl	800becc <__mcmp>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	da6c      	bge.n	800b67e <_dtoa_r+0x926>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	4651      	mov	r1, sl
 800b5a8:	220a      	movs	r2, #10
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 fa74 	bl	800ba98 <__multadd>
 800b5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b5b6:	4682      	mov	sl, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 81b0 	beq.w	800b91e <_dtoa_r+0xbc6>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	220a      	movs	r2, #10
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f000 fa67 	bl	800ba98 <__multadd>
 800b5ca:	9b01      	ldr	r3, [sp, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	f300 8096 	bgt.w	800b700 <_dtoa_r+0x9a8>
 800b5d4:	9b07      	ldr	r3, [sp, #28]
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	dc59      	bgt.n	800b68e <_dtoa_r+0x936>
 800b5da:	e091      	b.n	800b700 <_dtoa_r+0x9a8>
 800b5dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5e2:	e758      	b.n	800b496 <_dtoa_r+0x73e>
 800b5e4:	9b04      	ldr	r3, [sp, #16]
 800b5e6:	1e5e      	subs	r6, r3, #1
 800b5e8:	9b08      	ldr	r3, [sp, #32]
 800b5ea:	42b3      	cmp	r3, r6
 800b5ec:	bfbf      	itttt	lt
 800b5ee:	9b08      	ldrlt	r3, [sp, #32]
 800b5f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b5f2:	9608      	strlt	r6, [sp, #32]
 800b5f4:	1af3      	sublt	r3, r6, r3
 800b5f6:	bfb4      	ite	lt
 800b5f8:	18d2      	addlt	r2, r2, r3
 800b5fa:	1b9e      	subge	r6, r3, r6
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	bfbc      	itt	lt
 800b600:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b602:	2600      	movlt	r6, #0
 800b604:	2b00      	cmp	r3, #0
 800b606:	bfb7      	itett	lt
 800b608:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b60c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b610:	1a9d      	sublt	r5, r3, r2
 800b612:	2300      	movlt	r3, #0
 800b614:	e741      	b.n	800b49a <_dtoa_r+0x742>
 800b616:	9e08      	ldr	r6, [sp, #32]
 800b618:	9d05      	ldr	r5, [sp, #20]
 800b61a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b61c:	e748      	b.n	800b4b0 <_dtoa_r+0x758>
 800b61e:	9a08      	ldr	r2, [sp, #32]
 800b620:	e770      	b.n	800b504 <_dtoa_r+0x7ac>
 800b622:	9b07      	ldr	r3, [sp, #28]
 800b624:	2b01      	cmp	r3, #1
 800b626:	dc19      	bgt.n	800b65c <_dtoa_r+0x904>
 800b628:	9b02      	ldr	r3, [sp, #8]
 800b62a:	b9bb      	cbnz	r3, 800b65c <_dtoa_r+0x904>
 800b62c:	9b03      	ldr	r3, [sp, #12]
 800b62e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b632:	b99b      	cbnz	r3, 800b65c <_dtoa_r+0x904>
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b63a:	0d1b      	lsrs	r3, r3, #20
 800b63c:	051b      	lsls	r3, r3, #20
 800b63e:	b183      	cbz	r3, 800b662 <_dtoa_r+0x90a>
 800b640:	9b05      	ldr	r3, [sp, #20]
 800b642:	3301      	adds	r3, #1
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	9b06      	ldr	r3, [sp, #24]
 800b648:	3301      	adds	r3, #1
 800b64a:	9306      	str	r3, [sp, #24]
 800b64c:	f04f 0801 	mov.w	r8, #1
 800b650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b652:	2b00      	cmp	r3, #0
 800b654:	f47f af6f 	bne.w	800b536 <_dtoa_r+0x7de>
 800b658:	2001      	movs	r0, #1
 800b65a:	e774      	b.n	800b546 <_dtoa_r+0x7ee>
 800b65c:	f04f 0800 	mov.w	r8, #0
 800b660:	e7f6      	b.n	800b650 <_dtoa_r+0x8f8>
 800b662:	4698      	mov	r8, r3
 800b664:	e7f4      	b.n	800b650 <_dtoa_r+0x8f8>
 800b666:	d082      	beq.n	800b56e <_dtoa_r+0x816>
 800b668:	9a05      	ldr	r2, [sp, #20]
 800b66a:	331c      	adds	r3, #28
 800b66c:	441a      	add	r2, r3
 800b66e:	9205      	str	r2, [sp, #20]
 800b670:	9a06      	ldr	r2, [sp, #24]
 800b672:	441a      	add	r2, r3
 800b674:	441d      	add	r5, r3
 800b676:	9206      	str	r2, [sp, #24]
 800b678:	e779      	b.n	800b56e <_dtoa_r+0x816>
 800b67a:	4603      	mov	r3, r0
 800b67c:	e7f4      	b.n	800b668 <_dtoa_r+0x910>
 800b67e:	9b04      	ldr	r3, [sp, #16]
 800b680:	2b00      	cmp	r3, #0
 800b682:	dc37      	bgt.n	800b6f4 <_dtoa_r+0x99c>
 800b684:	9b07      	ldr	r3, [sp, #28]
 800b686:	2b02      	cmp	r3, #2
 800b688:	dd34      	ble.n	800b6f4 <_dtoa_r+0x99c>
 800b68a:	9b04      	ldr	r3, [sp, #16]
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	9b01      	ldr	r3, [sp, #4]
 800b690:	b963      	cbnz	r3, 800b6ac <_dtoa_r+0x954>
 800b692:	4631      	mov	r1, r6
 800b694:	2205      	movs	r2, #5
 800b696:	4620      	mov	r0, r4
 800b698:	f000 f9fe 	bl	800ba98 <__multadd>
 800b69c:	4601      	mov	r1, r0
 800b69e:	4606      	mov	r6, r0
 800b6a0:	4650      	mov	r0, sl
 800b6a2:	f000 fc13 	bl	800becc <__mcmp>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	f73f adbb 	bgt.w	800b222 <_dtoa_r+0x4ca>
 800b6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ae:	9d00      	ldr	r5, [sp, #0]
 800b6b0:	ea6f 0b03 	mvn.w	fp, r3
 800b6b4:	f04f 0800 	mov.w	r8, #0
 800b6b8:	4631      	mov	r1, r6
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 f9ca 	bl	800ba54 <_Bfree>
 800b6c0:	2f00      	cmp	r7, #0
 800b6c2:	f43f aeab 	beq.w	800b41c <_dtoa_r+0x6c4>
 800b6c6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ca:	d005      	beq.n	800b6d8 <_dtoa_r+0x980>
 800b6cc:	45b8      	cmp	r8, r7
 800b6ce:	d003      	beq.n	800b6d8 <_dtoa_r+0x980>
 800b6d0:	4641      	mov	r1, r8
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 f9be 	bl	800ba54 <_Bfree>
 800b6d8:	4639      	mov	r1, r7
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 f9ba 	bl	800ba54 <_Bfree>
 800b6e0:	e69c      	b.n	800b41c <_dtoa_r+0x6c4>
 800b6e2:	2600      	movs	r6, #0
 800b6e4:	4637      	mov	r7, r6
 800b6e6:	e7e1      	b.n	800b6ac <_dtoa_r+0x954>
 800b6e8:	46bb      	mov	fp, r7
 800b6ea:	4637      	mov	r7, r6
 800b6ec:	e599      	b.n	800b222 <_dtoa_r+0x4ca>
 800b6ee:	bf00      	nop
 800b6f0:	40240000 	.word	0x40240000
 800b6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f000 80c8 	beq.w	800b88c <_dtoa_r+0xb34>
 800b6fc:	9b04      	ldr	r3, [sp, #16]
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	2d00      	cmp	r5, #0
 800b702:	dd05      	ble.n	800b710 <_dtoa_r+0x9b8>
 800b704:	4639      	mov	r1, r7
 800b706:	462a      	mov	r2, r5
 800b708:	4620      	mov	r0, r4
 800b70a:	f000 fb73 	bl	800bdf4 <__lshift>
 800b70e:	4607      	mov	r7, r0
 800b710:	f1b8 0f00 	cmp.w	r8, #0
 800b714:	d05b      	beq.n	800b7ce <_dtoa_r+0xa76>
 800b716:	6879      	ldr	r1, [r7, #4]
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 f95b 	bl	800b9d4 <_Balloc>
 800b71e:	4605      	mov	r5, r0
 800b720:	b928      	cbnz	r0, 800b72e <_dtoa_r+0x9d6>
 800b722:	4b83      	ldr	r3, [pc, #524]	; (800b930 <_dtoa_r+0xbd8>)
 800b724:	4602      	mov	r2, r0
 800b726:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b72a:	f7ff bb2e 	b.w	800ad8a <_dtoa_r+0x32>
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	3202      	adds	r2, #2
 800b732:	0092      	lsls	r2, r2, #2
 800b734:	f107 010c 	add.w	r1, r7, #12
 800b738:	300c      	adds	r0, #12
 800b73a:	f000 ff3d 	bl	800c5b8 <memcpy>
 800b73e:	2201      	movs	r2, #1
 800b740:	4629      	mov	r1, r5
 800b742:	4620      	mov	r0, r4
 800b744:	f000 fb56 	bl	800bdf4 <__lshift>
 800b748:	9b00      	ldr	r3, [sp, #0]
 800b74a:	3301      	adds	r3, #1
 800b74c:	9304      	str	r3, [sp, #16]
 800b74e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b752:	4413      	add	r3, r2
 800b754:	9308      	str	r3, [sp, #32]
 800b756:	9b02      	ldr	r3, [sp, #8]
 800b758:	f003 0301 	and.w	r3, r3, #1
 800b75c:	46b8      	mov	r8, r7
 800b75e:	9306      	str	r3, [sp, #24]
 800b760:	4607      	mov	r7, r0
 800b762:	9b04      	ldr	r3, [sp, #16]
 800b764:	4631      	mov	r1, r6
 800b766:	3b01      	subs	r3, #1
 800b768:	4650      	mov	r0, sl
 800b76a:	9301      	str	r3, [sp, #4]
 800b76c:	f7ff fa6a 	bl	800ac44 <quorem>
 800b770:	4641      	mov	r1, r8
 800b772:	9002      	str	r0, [sp, #8]
 800b774:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b778:	4650      	mov	r0, sl
 800b77a:	f000 fba7 	bl	800becc <__mcmp>
 800b77e:	463a      	mov	r2, r7
 800b780:	9005      	str	r0, [sp, #20]
 800b782:	4631      	mov	r1, r6
 800b784:	4620      	mov	r0, r4
 800b786:	f000 fbbd 	bl	800bf04 <__mdiff>
 800b78a:	68c2      	ldr	r2, [r0, #12]
 800b78c:	4605      	mov	r5, r0
 800b78e:	bb02      	cbnz	r2, 800b7d2 <_dtoa_r+0xa7a>
 800b790:	4601      	mov	r1, r0
 800b792:	4650      	mov	r0, sl
 800b794:	f000 fb9a 	bl	800becc <__mcmp>
 800b798:	4602      	mov	r2, r0
 800b79a:	4629      	mov	r1, r5
 800b79c:	4620      	mov	r0, r4
 800b79e:	9209      	str	r2, [sp, #36]	; 0x24
 800b7a0:	f000 f958 	bl	800ba54 <_Bfree>
 800b7a4:	9b07      	ldr	r3, [sp, #28]
 800b7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7a8:	9d04      	ldr	r5, [sp, #16]
 800b7aa:	ea43 0102 	orr.w	r1, r3, r2
 800b7ae:	9b06      	ldr	r3, [sp, #24]
 800b7b0:	4319      	orrs	r1, r3
 800b7b2:	d110      	bne.n	800b7d6 <_dtoa_r+0xa7e>
 800b7b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b7b8:	d029      	beq.n	800b80e <_dtoa_r+0xab6>
 800b7ba:	9b05      	ldr	r3, [sp, #20]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	dd02      	ble.n	800b7c6 <_dtoa_r+0xa6e>
 800b7c0:	9b02      	ldr	r3, [sp, #8]
 800b7c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b7c6:	9b01      	ldr	r3, [sp, #4]
 800b7c8:	f883 9000 	strb.w	r9, [r3]
 800b7cc:	e774      	b.n	800b6b8 <_dtoa_r+0x960>
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	e7ba      	b.n	800b748 <_dtoa_r+0x9f0>
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	e7e1      	b.n	800b79a <_dtoa_r+0xa42>
 800b7d6:	9b05      	ldr	r3, [sp, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	db04      	blt.n	800b7e6 <_dtoa_r+0xa8e>
 800b7dc:	9907      	ldr	r1, [sp, #28]
 800b7de:	430b      	orrs	r3, r1
 800b7e0:	9906      	ldr	r1, [sp, #24]
 800b7e2:	430b      	orrs	r3, r1
 800b7e4:	d120      	bne.n	800b828 <_dtoa_r+0xad0>
 800b7e6:	2a00      	cmp	r2, #0
 800b7e8:	dded      	ble.n	800b7c6 <_dtoa_r+0xa6e>
 800b7ea:	4651      	mov	r1, sl
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f000 fb00 	bl	800bdf4 <__lshift>
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	4682      	mov	sl, r0
 800b7f8:	f000 fb68 	bl	800becc <__mcmp>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	dc03      	bgt.n	800b808 <_dtoa_r+0xab0>
 800b800:	d1e1      	bne.n	800b7c6 <_dtoa_r+0xa6e>
 800b802:	f019 0f01 	tst.w	r9, #1
 800b806:	d0de      	beq.n	800b7c6 <_dtoa_r+0xa6e>
 800b808:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b80c:	d1d8      	bne.n	800b7c0 <_dtoa_r+0xa68>
 800b80e:	9a01      	ldr	r2, [sp, #4]
 800b810:	2339      	movs	r3, #57	; 0x39
 800b812:	7013      	strb	r3, [r2, #0]
 800b814:	462b      	mov	r3, r5
 800b816:	461d      	mov	r5, r3
 800b818:	3b01      	subs	r3, #1
 800b81a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b81e:	2a39      	cmp	r2, #57	; 0x39
 800b820:	d06c      	beq.n	800b8fc <_dtoa_r+0xba4>
 800b822:	3201      	adds	r2, #1
 800b824:	701a      	strb	r2, [r3, #0]
 800b826:	e747      	b.n	800b6b8 <_dtoa_r+0x960>
 800b828:	2a00      	cmp	r2, #0
 800b82a:	dd07      	ble.n	800b83c <_dtoa_r+0xae4>
 800b82c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b830:	d0ed      	beq.n	800b80e <_dtoa_r+0xab6>
 800b832:	9a01      	ldr	r2, [sp, #4]
 800b834:	f109 0301 	add.w	r3, r9, #1
 800b838:	7013      	strb	r3, [r2, #0]
 800b83a:	e73d      	b.n	800b6b8 <_dtoa_r+0x960>
 800b83c:	9b04      	ldr	r3, [sp, #16]
 800b83e:	9a08      	ldr	r2, [sp, #32]
 800b840:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b844:	4293      	cmp	r3, r2
 800b846:	d043      	beq.n	800b8d0 <_dtoa_r+0xb78>
 800b848:	4651      	mov	r1, sl
 800b84a:	2300      	movs	r3, #0
 800b84c:	220a      	movs	r2, #10
 800b84e:	4620      	mov	r0, r4
 800b850:	f000 f922 	bl	800ba98 <__multadd>
 800b854:	45b8      	cmp	r8, r7
 800b856:	4682      	mov	sl, r0
 800b858:	f04f 0300 	mov.w	r3, #0
 800b85c:	f04f 020a 	mov.w	r2, #10
 800b860:	4641      	mov	r1, r8
 800b862:	4620      	mov	r0, r4
 800b864:	d107      	bne.n	800b876 <_dtoa_r+0xb1e>
 800b866:	f000 f917 	bl	800ba98 <__multadd>
 800b86a:	4680      	mov	r8, r0
 800b86c:	4607      	mov	r7, r0
 800b86e:	9b04      	ldr	r3, [sp, #16]
 800b870:	3301      	adds	r3, #1
 800b872:	9304      	str	r3, [sp, #16]
 800b874:	e775      	b.n	800b762 <_dtoa_r+0xa0a>
 800b876:	f000 f90f 	bl	800ba98 <__multadd>
 800b87a:	4639      	mov	r1, r7
 800b87c:	4680      	mov	r8, r0
 800b87e:	2300      	movs	r3, #0
 800b880:	220a      	movs	r2, #10
 800b882:	4620      	mov	r0, r4
 800b884:	f000 f908 	bl	800ba98 <__multadd>
 800b888:	4607      	mov	r7, r0
 800b88a:	e7f0      	b.n	800b86e <_dtoa_r+0xb16>
 800b88c:	9b04      	ldr	r3, [sp, #16]
 800b88e:	9301      	str	r3, [sp, #4]
 800b890:	9d00      	ldr	r5, [sp, #0]
 800b892:	4631      	mov	r1, r6
 800b894:	4650      	mov	r0, sl
 800b896:	f7ff f9d5 	bl	800ac44 <quorem>
 800b89a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b89e:	9b00      	ldr	r3, [sp, #0]
 800b8a0:	f805 9b01 	strb.w	r9, [r5], #1
 800b8a4:	1aea      	subs	r2, r5, r3
 800b8a6:	9b01      	ldr	r3, [sp, #4]
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	dd07      	ble.n	800b8bc <_dtoa_r+0xb64>
 800b8ac:	4651      	mov	r1, sl
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 f8f0 	bl	800ba98 <__multadd>
 800b8b8:	4682      	mov	sl, r0
 800b8ba:	e7ea      	b.n	800b892 <_dtoa_r+0xb3a>
 800b8bc:	9b01      	ldr	r3, [sp, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bfc8      	it	gt
 800b8c2:	461d      	movgt	r5, r3
 800b8c4:	9b00      	ldr	r3, [sp, #0]
 800b8c6:	bfd8      	it	le
 800b8c8:	2501      	movle	r5, #1
 800b8ca:	441d      	add	r5, r3
 800b8cc:	f04f 0800 	mov.w	r8, #0
 800b8d0:	4651      	mov	r1, sl
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f000 fa8d 	bl	800bdf4 <__lshift>
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4682      	mov	sl, r0
 800b8de:	f000 faf5 	bl	800becc <__mcmp>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	dc96      	bgt.n	800b814 <_dtoa_r+0xabc>
 800b8e6:	d102      	bne.n	800b8ee <_dtoa_r+0xb96>
 800b8e8:	f019 0f01 	tst.w	r9, #1
 800b8ec:	d192      	bne.n	800b814 <_dtoa_r+0xabc>
 800b8ee:	462b      	mov	r3, r5
 800b8f0:	461d      	mov	r5, r3
 800b8f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8f6:	2a30      	cmp	r2, #48	; 0x30
 800b8f8:	d0fa      	beq.n	800b8f0 <_dtoa_r+0xb98>
 800b8fa:	e6dd      	b.n	800b6b8 <_dtoa_r+0x960>
 800b8fc:	9a00      	ldr	r2, [sp, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d189      	bne.n	800b816 <_dtoa_r+0xabe>
 800b902:	f10b 0b01 	add.w	fp, fp, #1
 800b906:	2331      	movs	r3, #49	; 0x31
 800b908:	e796      	b.n	800b838 <_dtoa_r+0xae0>
 800b90a:	4b0a      	ldr	r3, [pc, #40]	; (800b934 <_dtoa_r+0xbdc>)
 800b90c:	f7ff ba99 	b.w	800ae42 <_dtoa_r+0xea>
 800b910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b912:	2b00      	cmp	r3, #0
 800b914:	f47f aa6d 	bne.w	800adf2 <_dtoa_r+0x9a>
 800b918:	4b07      	ldr	r3, [pc, #28]	; (800b938 <_dtoa_r+0xbe0>)
 800b91a:	f7ff ba92 	b.w	800ae42 <_dtoa_r+0xea>
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	dcb5      	bgt.n	800b890 <_dtoa_r+0xb38>
 800b924:	9b07      	ldr	r3, [sp, #28]
 800b926:	2b02      	cmp	r3, #2
 800b928:	f73f aeb1 	bgt.w	800b68e <_dtoa_r+0x936>
 800b92c:	e7b0      	b.n	800b890 <_dtoa_r+0xb38>
 800b92e:	bf00      	nop
 800b930:	0800f108 	.word	0x0800f108
 800b934:	0800f068 	.word	0x0800f068
 800b938:	0800f08c 	.word	0x0800f08c

0800b93c <_free_r>:
 800b93c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b93e:	2900      	cmp	r1, #0
 800b940:	d044      	beq.n	800b9cc <_free_r+0x90>
 800b942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b946:	9001      	str	r0, [sp, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f1a1 0404 	sub.w	r4, r1, #4
 800b94e:	bfb8      	it	lt
 800b950:	18e4      	addlt	r4, r4, r3
 800b952:	f7fe fa81 	bl	8009e58 <__malloc_lock>
 800b956:	4a1e      	ldr	r2, [pc, #120]	; (800b9d0 <_free_r+0x94>)
 800b958:	9801      	ldr	r0, [sp, #4]
 800b95a:	6813      	ldr	r3, [r2, #0]
 800b95c:	b933      	cbnz	r3, 800b96c <_free_r+0x30>
 800b95e:	6063      	str	r3, [r4, #4]
 800b960:	6014      	str	r4, [r2, #0]
 800b962:	b003      	add	sp, #12
 800b964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b968:	f7fe ba7c 	b.w	8009e64 <__malloc_unlock>
 800b96c:	42a3      	cmp	r3, r4
 800b96e:	d908      	bls.n	800b982 <_free_r+0x46>
 800b970:	6825      	ldr	r5, [r4, #0]
 800b972:	1961      	adds	r1, r4, r5
 800b974:	428b      	cmp	r3, r1
 800b976:	bf01      	itttt	eq
 800b978:	6819      	ldreq	r1, [r3, #0]
 800b97a:	685b      	ldreq	r3, [r3, #4]
 800b97c:	1949      	addeq	r1, r1, r5
 800b97e:	6021      	streq	r1, [r4, #0]
 800b980:	e7ed      	b.n	800b95e <_free_r+0x22>
 800b982:	461a      	mov	r2, r3
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	b10b      	cbz	r3, 800b98c <_free_r+0x50>
 800b988:	42a3      	cmp	r3, r4
 800b98a:	d9fa      	bls.n	800b982 <_free_r+0x46>
 800b98c:	6811      	ldr	r1, [r2, #0]
 800b98e:	1855      	adds	r5, r2, r1
 800b990:	42a5      	cmp	r5, r4
 800b992:	d10b      	bne.n	800b9ac <_free_r+0x70>
 800b994:	6824      	ldr	r4, [r4, #0]
 800b996:	4421      	add	r1, r4
 800b998:	1854      	adds	r4, r2, r1
 800b99a:	42a3      	cmp	r3, r4
 800b99c:	6011      	str	r1, [r2, #0]
 800b99e:	d1e0      	bne.n	800b962 <_free_r+0x26>
 800b9a0:	681c      	ldr	r4, [r3, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	6053      	str	r3, [r2, #4]
 800b9a6:	440c      	add	r4, r1
 800b9a8:	6014      	str	r4, [r2, #0]
 800b9aa:	e7da      	b.n	800b962 <_free_r+0x26>
 800b9ac:	d902      	bls.n	800b9b4 <_free_r+0x78>
 800b9ae:	230c      	movs	r3, #12
 800b9b0:	6003      	str	r3, [r0, #0]
 800b9b2:	e7d6      	b.n	800b962 <_free_r+0x26>
 800b9b4:	6825      	ldr	r5, [r4, #0]
 800b9b6:	1961      	adds	r1, r4, r5
 800b9b8:	428b      	cmp	r3, r1
 800b9ba:	bf04      	itt	eq
 800b9bc:	6819      	ldreq	r1, [r3, #0]
 800b9be:	685b      	ldreq	r3, [r3, #4]
 800b9c0:	6063      	str	r3, [r4, #4]
 800b9c2:	bf04      	itt	eq
 800b9c4:	1949      	addeq	r1, r1, r5
 800b9c6:	6021      	streq	r1, [r4, #0]
 800b9c8:	6054      	str	r4, [r2, #4]
 800b9ca:	e7ca      	b.n	800b962 <_free_r+0x26>
 800b9cc:	b003      	add	sp, #12
 800b9ce:	bd30      	pop	{r4, r5, pc}
 800b9d0:	20001958 	.word	0x20001958

0800b9d4 <_Balloc>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	69c6      	ldr	r6, [r0, #28]
 800b9d8:	4604      	mov	r4, r0
 800b9da:	460d      	mov	r5, r1
 800b9dc:	b976      	cbnz	r6, 800b9fc <_Balloc+0x28>
 800b9de:	2010      	movs	r0, #16
 800b9e0:	f7fe f992 	bl	8009d08 <malloc>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	61e0      	str	r0, [r4, #28]
 800b9e8:	b920      	cbnz	r0, 800b9f4 <_Balloc+0x20>
 800b9ea:	4b18      	ldr	r3, [pc, #96]	; (800ba4c <_Balloc+0x78>)
 800b9ec:	4818      	ldr	r0, [pc, #96]	; (800ba50 <_Balloc+0x7c>)
 800b9ee:	216b      	movs	r1, #107	; 0x6b
 800b9f0:	f000 fdf0 	bl	800c5d4 <__assert_func>
 800b9f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9f8:	6006      	str	r6, [r0, #0]
 800b9fa:	60c6      	str	r6, [r0, #12]
 800b9fc:	69e6      	ldr	r6, [r4, #28]
 800b9fe:	68f3      	ldr	r3, [r6, #12]
 800ba00:	b183      	cbz	r3, 800ba24 <_Balloc+0x50>
 800ba02:	69e3      	ldr	r3, [r4, #28]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba0a:	b9b8      	cbnz	r0, 800ba3c <_Balloc+0x68>
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	fa01 f605 	lsl.w	r6, r1, r5
 800ba12:	1d72      	adds	r2, r6, #5
 800ba14:	0092      	lsls	r2, r2, #2
 800ba16:	4620      	mov	r0, r4
 800ba18:	f7fe f960 	bl	8009cdc <_calloc_r>
 800ba1c:	b160      	cbz	r0, 800ba38 <_Balloc+0x64>
 800ba1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba22:	e00e      	b.n	800ba42 <_Balloc+0x6e>
 800ba24:	2221      	movs	r2, #33	; 0x21
 800ba26:	2104      	movs	r1, #4
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f7fe f957 	bl	8009cdc <_calloc_r>
 800ba2e:	69e3      	ldr	r3, [r4, #28]
 800ba30:	60f0      	str	r0, [r6, #12]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1e4      	bne.n	800ba02 <_Balloc+0x2e>
 800ba38:	2000      	movs	r0, #0
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	6802      	ldr	r2, [r0, #0]
 800ba3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba42:	2300      	movs	r3, #0
 800ba44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba48:	e7f7      	b.n	800ba3a <_Balloc+0x66>
 800ba4a:	bf00      	nop
 800ba4c:	0800f099 	.word	0x0800f099
 800ba50:	0800f119 	.word	0x0800f119

0800ba54 <_Bfree>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	69c6      	ldr	r6, [r0, #28]
 800ba58:	4605      	mov	r5, r0
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	b976      	cbnz	r6, 800ba7c <_Bfree+0x28>
 800ba5e:	2010      	movs	r0, #16
 800ba60:	f7fe f952 	bl	8009d08 <malloc>
 800ba64:	4602      	mov	r2, r0
 800ba66:	61e8      	str	r0, [r5, #28]
 800ba68:	b920      	cbnz	r0, 800ba74 <_Bfree+0x20>
 800ba6a:	4b09      	ldr	r3, [pc, #36]	; (800ba90 <_Bfree+0x3c>)
 800ba6c:	4809      	ldr	r0, [pc, #36]	; (800ba94 <_Bfree+0x40>)
 800ba6e:	218f      	movs	r1, #143	; 0x8f
 800ba70:	f000 fdb0 	bl	800c5d4 <__assert_func>
 800ba74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba78:	6006      	str	r6, [r0, #0]
 800ba7a:	60c6      	str	r6, [r0, #12]
 800ba7c:	b13c      	cbz	r4, 800ba8e <_Bfree+0x3a>
 800ba7e:	69eb      	ldr	r3, [r5, #28]
 800ba80:	6862      	ldr	r2, [r4, #4]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba88:	6021      	str	r1, [r4, #0]
 800ba8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}
 800ba90:	0800f099 	.word	0x0800f099
 800ba94:	0800f119 	.word	0x0800f119

0800ba98 <__multadd>:
 800ba98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9c:	690d      	ldr	r5, [r1, #16]
 800ba9e:	4607      	mov	r7, r0
 800baa0:	460c      	mov	r4, r1
 800baa2:	461e      	mov	r6, r3
 800baa4:	f101 0c14 	add.w	ip, r1, #20
 800baa8:	2000      	movs	r0, #0
 800baaa:	f8dc 3000 	ldr.w	r3, [ip]
 800baae:	b299      	uxth	r1, r3
 800bab0:	fb02 6101 	mla	r1, r2, r1, r6
 800bab4:	0c1e      	lsrs	r6, r3, #16
 800bab6:	0c0b      	lsrs	r3, r1, #16
 800bab8:	fb02 3306 	mla	r3, r2, r6, r3
 800babc:	b289      	uxth	r1, r1
 800babe:	3001      	adds	r0, #1
 800bac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bac4:	4285      	cmp	r5, r0
 800bac6:	f84c 1b04 	str.w	r1, [ip], #4
 800baca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bace:	dcec      	bgt.n	800baaa <__multadd+0x12>
 800bad0:	b30e      	cbz	r6, 800bb16 <__multadd+0x7e>
 800bad2:	68a3      	ldr	r3, [r4, #8]
 800bad4:	42ab      	cmp	r3, r5
 800bad6:	dc19      	bgt.n	800bb0c <__multadd+0x74>
 800bad8:	6861      	ldr	r1, [r4, #4]
 800bada:	4638      	mov	r0, r7
 800badc:	3101      	adds	r1, #1
 800bade:	f7ff ff79 	bl	800b9d4 <_Balloc>
 800bae2:	4680      	mov	r8, r0
 800bae4:	b928      	cbnz	r0, 800baf2 <__multadd+0x5a>
 800bae6:	4602      	mov	r2, r0
 800bae8:	4b0c      	ldr	r3, [pc, #48]	; (800bb1c <__multadd+0x84>)
 800baea:	480d      	ldr	r0, [pc, #52]	; (800bb20 <__multadd+0x88>)
 800baec:	21ba      	movs	r1, #186	; 0xba
 800baee:	f000 fd71 	bl	800c5d4 <__assert_func>
 800baf2:	6922      	ldr	r2, [r4, #16]
 800baf4:	3202      	adds	r2, #2
 800baf6:	f104 010c 	add.w	r1, r4, #12
 800bafa:	0092      	lsls	r2, r2, #2
 800bafc:	300c      	adds	r0, #12
 800bafe:	f000 fd5b 	bl	800c5b8 <memcpy>
 800bb02:	4621      	mov	r1, r4
 800bb04:	4638      	mov	r0, r7
 800bb06:	f7ff ffa5 	bl	800ba54 <_Bfree>
 800bb0a:	4644      	mov	r4, r8
 800bb0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb10:	3501      	adds	r5, #1
 800bb12:	615e      	str	r6, [r3, #20]
 800bb14:	6125      	str	r5, [r4, #16]
 800bb16:	4620      	mov	r0, r4
 800bb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1c:	0800f108 	.word	0x0800f108
 800bb20:	0800f119 	.word	0x0800f119

0800bb24 <__hi0bits>:
 800bb24:	0c03      	lsrs	r3, r0, #16
 800bb26:	041b      	lsls	r3, r3, #16
 800bb28:	b9d3      	cbnz	r3, 800bb60 <__hi0bits+0x3c>
 800bb2a:	0400      	lsls	r0, r0, #16
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb32:	bf04      	itt	eq
 800bb34:	0200      	lsleq	r0, r0, #8
 800bb36:	3308      	addeq	r3, #8
 800bb38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb3c:	bf04      	itt	eq
 800bb3e:	0100      	lsleq	r0, r0, #4
 800bb40:	3304      	addeq	r3, #4
 800bb42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb46:	bf04      	itt	eq
 800bb48:	0080      	lsleq	r0, r0, #2
 800bb4a:	3302      	addeq	r3, #2
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	db05      	blt.n	800bb5c <__hi0bits+0x38>
 800bb50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb54:	f103 0301 	add.w	r3, r3, #1
 800bb58:	bf08      	it	eq
 800bb5a:	2320      	moveq	r3, #32
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	4770      	bx	lr
 800bb60:	2300      	movs	r3, #0
 800bb62:	e7e4      	b.n	800bb2e <__hi0bits+0xa>

0800bb64 <__lo0bits>:
 800bb64:	6803      	ldr	r3, [r0, #0]
 800bb66:	f013 0207 	ands.w	r2, r3, #7
 800bb6a:	d00c      	beq.n	800bb86 <__lo0bits+0x22>
 800bb6c:	07d9      	lsls	r1, r3, #31
 800bb6e:	d422      	bmi.n	800bbb6 <__lo0bits+0x52>
 800bb70:	079a      	lsls	r2, r3, #30
 800bb72:	bf49      	itett	mi
 800bb74:	085b      	lsrmi	r3, r3, #1
 800bb76:	089b      	lsrpl	r3, r3, #2
 800bb78:	6003      	strmi	r3, [r0, #0]
 800bb7a:	2201      	movmi	r2, #1
 800bb7c:	bf5c      	itt	pl
 800bb7e:	6003      	strpl	r3, [r0, #0]
 800bb80:	2202      	movpl	r2, #2
 800bb82:	4610      	mov	r0, r2
 800bb84:	4770      	bx	lr
 800bb86:	b299      	uxth	r1, r3
 800bb88:	b909      	cbnz	r1, 800bb8e <__lo0bits+0x2a>
 800bb8a:	0c1b      	lsrs	r3, r3, #16
 800bb8c:	2210      	movs	r2, #16
 800bb8e:	b2d9      	uxtb	r1, r3
 800bb90:	b909      	cbnz	r1, 800bb96 <__lo0bits+0x32>
 800bb92:	3208      	adds	r2, #8
 800bb94:	0a1b      	lsrs	r3, r3, #8
 800bb96:	0719      	lsls	r1, r3, #28
 800bb98:	bf04      	itt	eq
 800bb9a:	091b      	lsreq	r3, r3, #4
 800bb9c:	3204      	addeq	r2, #4
 800bb9e:	0799      	lsls	r1, r3, #30
 800bba0:	bf04      	itt	eq
 800bba2:	089b      	lsreq	r3, r3, #2
 800bba4:	3202      	addeq	r2, #2
 800bba6:	07d9      	lsls	r1, r3, #31
 800bba8:	d403      	bmi.n	800bbb2 <__lo0bits+0x4e>
 800bbaa:	085b      	lsrs	r3, r3, #1
 800bbac:	f102 0201 	add.w	r2, r2, #1
 800bbb0:	d003      	beq.n	800bbba <__lo0bits+0x56>
 800bbb2:	6003      	str	r3, [r0, #0]
 800bbb4:	e7e5      	b.n	800bb82 <__lo0bits+0x1e>
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	e7e3      	b.n	800bb82 <__lo0bits+0x1e>
 800bbba:	2220      	movs	r2, #32
 800bbbc:	e7e1      	b.n	800bb82 <__lo0bits+0x1e>
	...

0800bbc0 <__i2b>:
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	f7ff ff05 	bl	800b9d4 <_Balloc>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	b928      	cbnz	r0, 800bbda <__i2b+0x1a>
 800bbce:	4b05      	ldr	r3, [pc, #20]	; (800bbe4 <__i2b+0x24>)
 800bbd0:	4805      	ldr	r0, [pc, #20]	; (800bbe8 <__i2b+0x28>)
 800bbd2:	f240 1145 	movw	r1, #325	; 0x145
 800bbd6:	f000 fcfd 	bl	800c5d4 <__assert_func>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	6144      	str	r4, [r0, #20]
 800bbde:	6103      	str	r3, [r0, #16]
 800bbe0:	bd10      	pop	{r4, pc}
 800bbe2:	bf00      	nop
 800bbe4:	0800f108 	.word	0x0800f108
 800bbe8:	0800f119 	.word	0x0800f119

0800bbec <__multiply>:
 800bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf0:	4691      	mov	r9, r2
 800bbf2:	690a      	ldr	r2, [r1, #16]
 800bbf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	bfb8      	it	lt
 800bbfc:	460b      	movlt	r3, r1
 800bbfe:	460c      	mov	r4, r1
 800bc00:	bfbc      	itt	lt
 800bc02:	464c      	movlt	r4, r9
 800bc04:	4699      	movlt	r9, r3
 800bc06:	6927      	ldr	r7, [r4, #16]
 800bc08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc0c:	68a3      	ldr	r3, [r4, #8]
 800bc0e:	6861      	ldr	r1, [r4, #4]
 800bc10:	eb07 060a 	add.w	r6, r7, sl
 800bc14:	42b3      	cmp	r3, r6
 800bc16:	b085      	sub	sp, #20
 800bc18:	bfb8      	it	lt
 800bc1a:	3101      	addlt	r1, #1
 800bc1c:	f7ff feda 	bl	800b9d4 <_Balloc>
 800bc20:	b930      	cbnz	r0, 800bc30 <__multiply+0x44>
 800bc22:	4602      	mov	r2, r0
 800bc24:	4b44      	ldr	r3, [pc, #272]	; (800bd38 <__multiply+0x14c>)
 800bc26:	4845      	ldr	r0, [pc, #276]	; (800bd3c <__multiply+0x150>)
 800bc28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bc2c:	f000 fcd2 	bl	800c5d4 <__assert_func>
 800bc30:	f100 0514 	add.w	r5, r0, #20
 800bc34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc38:	462b      	mov	r3, r5
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	4543      	cmp	r3, r8
 800bc3e:	d321      	bcc.n	800bc84 <__multiply+0x98>
 800bc40:	f104 0314 	add.w	r3, r4, #20
 800bc44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bc48:	f109 0314 	add.w	r3, r9, #20
 800bc4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bc50:	9202      	str	r2, [sp, #8]
 800bc52:	1b3a      	subs	r2, r7, r4
 800bc54:	3a15      	subs	r2, #21
 800bc56:	f022 0203 	bic.w	r2, r2, #3
 800bc5a:	3204      	adds	r2, #4
 800bc5c:	f104 0115 	add.w	r1, r4, #21
 800bc60:	428f      	cmp	r7, r1
 800bc62:	bf38      	it	cc
 800bc64:	2204      	movcc	r2, #4
 800bc66:	9201      	str	r2, [sp, #4]
 800bc68:	9a02      	ldr	r2, [sp, #8]
 800bc6a:	9303      	str	r3, [sp, #12]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d80c      	bhi.n	800bc8a <__multiply+0x9e>
 800bc70:	2e00      	cmp	r6, #0
 800bc72:	dd03      	ble.n	800bc7c <__multiply+0x90>
 800bc74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d05b      	beq.n	800bd34 <__multiply+0x148>
 800bc7c:	6106      	str	r6, [r0, #16]
 800bc7e:	b005      	add	sp, #20
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	f843 2b04 	str.w	r2, [r3], #4
 800bc88:	e7d8      	b.n	800bc3c <__multiply+0x50>
 800bc8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc8e:	f1ba 0f00 	cmp.w	sl, #0
 800bc92:	d024      	beq.n	800bcde <__multiply+0xf2>
 800bc94:	f104 0e14 	add.w	lr, r4, #20
 800bc98:	46a9      	mov	r9, r5
 800bc9a:	f04f 0c00 	mov.w	ip, #0
 800bc9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bca2:	f8d9 1000 	ldr.w	r1, [r9]
 800bca6:	fa1f fb82 	uxth.w	fp, r2
 800bcaa:	b289      	uxth	r1, r1
 800bcac:	fb0a 110b 	mla	r1, sl, fp, r1
 800bcb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bcb4:	f8d9 2000 	ldr.w	r2, [r9]
 800bcb8:	4461      	add	r1, ip
 800bcba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800bcc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bcc6:	b289      	uxth	r1, r1
 800bcc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bccc:	4577      	cmp	r7, lr
 800bcce:	f849 1b04 	str.w	r1, [r9], #4
 800bcd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bcd6:	d8e2      	bhi.n	800bc9e <__multiply+0xb2>
 800bcd8:	9a01      	ldr	r2, [sp, #4]
 800bcda:	f845 c002 	str.w	ip, [r5, r2]
 800bcde:	9a03      	ldr	r2, [sp, #12]
 800bce0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bce4:	3304      	adds	r3, #4
 800bce6:	f1b9 0f00 	cmp.w	r9, #0
 800bcea:	d021      	beq.n	800bd30 <__multiply+0x144>
 800bcec:	6829      	ldr	r1, [r5, #0]
 800bcee:	f104 0c14 	add.w	ip, r4, #20
 800bcf2:	46ae      	mov	lr, r5
 800bcf4:	f04f 0a00 	mov.w	sl, #0
 800bcf8:	f8bc b000 	ldrh.w	fp, [ip]
 800bcfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd00:	fb09 220b 	mla	r2, r9, fp, r2
 800bd04:	4452      	add	r2, sl
 800bd06:	b289      	uxth	r1, r1
 800bd08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd0c:	f84e 1b04 	str.w	r1, [lr], #4
 800bd10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bd14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd18:	f8be 1000 	ldrh.w	r1, [lr]
 800bd1c:	fb09 110a 	mla	r1, r9, sl, r1
 800bd20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bd24:	4567      	cmp	r7, ip
 800bd26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bd2a:	d8e5      	bhi.n	800bcf8 <__multiply+0x10c>
 800bd2c:	9a01      	ldr	r2, [sp, #4]
 800bd2e:	50a9      	str	r1, [r5, r2]
 800bd30:	3504      	adds	r5, #4
 800bd32:	e799      	b.n	800bc68 <__multiply+0x7c>
 800bd34:	3e01      	subs	r6, #1
 800bd36:	e79b      	b.n	800bc70 <__multiply+0x84>
 800bd38:	0800f108 	.word	0x0800f108
 800bd3c:	0800f119 	.word	0x0800f119

0800bd40 <__pow5mult>:
 800bd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd44:	4615      	mov	r5, r2
 800bd46:	f012 0203 	ands.w	r2, r2, #3
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	d007      	beq.n	800bd60 <__pow5mult+0x20>
 800bd50:	4c25      	ldr	r4, [pc, #148]	; (800bde8 <__pow5mult+0xa8>)
 800bd52:	3a01      	subs	r2, #1
 800bd54:	2300      	movs	r3, #0
 800bd56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd5a:	f7ff fe9d 	bl	800ba98 <__multadd>
 800bd5e:	4607      	mov	r7, r0
 800bd60:	10ad      	asrs	r5, r5, #2
 800bd62:	d03d      	beq.n	800bde0 <__pow5mult+0xa0>
 800bd64:	69f4      	ldr	r4, [r6, #28]
 800bd66:	b97c      	cbnz	r4, 800bd88 <__pow5mult+0x48>
 800bd68:	2010      	movs	r0, #16
 800bd6a:	f7fd ffcd 	bl	8009d08 <malloc>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	61f0      	str	r0, [r6, #28]
 800bd72:	b928      	cbnz	r0, 800bd80 <__pow5mult+0x40>
 800bd74:	4b1d      	ldr	r3, [pc, #116]	; (800bdec <__pow5mult+0xac>)
 800bd76:	481e      	ldr	r0, [pc, #120]	; (800bdf0 <__pow5mult+0xb0>)
 800bd78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bd7c:	f000 fc2a 	bl	800c5d4 <__assert_func>
 800bd80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd84:	6004      	str	r4, [r0, #0]
 800bd86:	60c4      	str	r4, [r0, #12]
 800bd88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bd8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd90:	b94c      	cbnz	r4, 800bda6 <__pow5mult+0x66>
 800bd92:	f240 2171 	movw	r1, #625	; 0x271
 800bd96:	4630      	mov	r0, r6
 800bd98:	f7ff ff12 	bl	800bbc0 <__i2b>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bda2:	4604      	mov	r4, r0
 800bda4:	6003      	str	r3, [r0, #0]
 800bda6:	f04f 0900 	mov.w	r9, #0
 800bdaa:	07eb      	lsls	r3, r5, #31
 800bdac:	d50a      	bpl.n	800bdc4 <__pow5mult+0x84>
 800bdae:	4639      	mov	r1, r7
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f7ff ff1a 	bl	800bbec <__multiply>
 800bdb8:	4639      	mov	r1, r7
 800bdba:	4680      	mov	r8, r0
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f7ff fe49 	bl	800ba54 <_Bfree>
 800bdc2:	4647      	mov	r7, r8
 800bdc4:	106d      	asrs	r5, r5, #1
 800bdc6:	d00b      	beq.n	800bde0 <__pow5mult+0xa0>
 800bdc8:	6820      	ldr	r0, [r4, #0]
 800bdca:	b938      	cbnz	r0, 800bddc <__pow5mult+0x9c>
 800bdcc:	4622      	mov	r2, r4
 800bdce:	4621      	mov	r1, r4
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f7ff ff0b 	bl	800bbec <__multiply>
 800bdd6:	6020      	str	r0, [r4, #0]
 800bdd8:	f8c0 9000 	str.w	r9, [r0]
 800bddc:	4604      	mov	r4, r0
 800bdde:	e7e4      	b.n	800bdaa <__pow5mult+0x6a>
 800bde0:	4638      	mov	r0, r7
 800bde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde6:	bf00      	nop
 800bde8:	0800f268 	.word	0x0800f268
 800bdec:	0800f099 	.word	0x0800f099
 800bdf0:	0800f119 	.word	0x0800f119

0800bdf4 <__lshift>:
 800bdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	6849      	ldr	r1, [r1, #4]
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be02:	68a3      	ldr	r3, [r4, #8]
 800be04:	4607      	mov	r7, r0
 800be06:	4691      	mov	r9, r2
 800be08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be0c:	f108 0601 	add.w	r6, r8, #1
 800be10:	42b3      	cmp	r3, r6
 800be12:	db0b      	blt.n	800be2c <__lshift+0x38>
 800be14:	4638      	mov	r0, r7
 800be16:	f7ff fddd 	bl	800b9d4 <_Balloc>
 800be1a:	4605      	mov	r5, r0
 800be1c:	b948      	cbnz	r0, 800be32 <__lshift+0x3e>
 800be1e:	4602      	mov	r2, r0
 800be20:	4b28      	ldr	r3, [pc, #160]	; (800bec4 <__lshift+0xd0>)
 800be22:	4829      	ldr	r0, [pc, #164]	; (800bec8 <__lshift+0xd4>)
 800be24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800be28:	f000 fbd4 	bl	800c5d4 <__assert_func>
 800be2c:	3101      	adds	r1, #1
 800be2e:	005b      	lsls	r3, r3, #1
 800be30:	e7ee      	b.n	800be10 <__lshift+0x1c>
 800be32:	2300      	movs	r3, #0
 800be34:	f100 0114 	add.w	r1, r0, #20
 800be38:	f100 0210 	add.w	r2, r0, #16
 800be3c:	4618      	mov	r0, r3
 800be3e:	4553      	cmp	r3, sl
 800be40:	db33      	blt.n	800beaa <__lshift+0xb6>
 800be42:	6920      	ldr	r0, [r4, #16]
 800be44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be48:	f104 0314 	add.w	r3, r4, #20
 800be4c:	f019 091f 	ands.w	r9, r9, #31
 800be50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be58:	d02b      	beq.n	800beb2 <__lshift+0xbe>
 800be5a:	f1c9 0e20 	rsb	lr, r9, #32
 800be5e:	468a      	mov	sl, r1
 800be60:	2200      	movs	r2, #0
 800be62:	6818      	ldr	r0, [r3, #0]
 800be64:	fa00 f009 	lsl.w	r0, r0, r9
 800be68:	4310      	orrs	r0, r2
 800be6a:	f84a 0b04 	str.w	r0, [sl], #4
 800be6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be72:	459c      	cmp	ip, r3
 800be74:	fa22 f20e 	lsr.w	r2, r2, lr
 800be78:	d8f3      	bhi.n	800be62 <__lshift+0x6e>
 800be7a:	ebac 0304 	sub.w	r3, ip, r4
 800be7e:	3b15      	subs	r3, #21
 800be80:	f023 0303 	bic.w	r3, r3, #3
 800be84:	3304      	adds	r3, #4
 800be86:	f104 0015 	add.w	r0, r4, #21
 800be8a:	4584      	cmp	ip, r0
 800be8c:	bf38      	it	cc
 800be8e:	2304      	movcc	r3, #4
 800be90:	50ca      	str	r2, [r1, r3]
 800be92:	b10a      	cbz	r2, 800be98 <__lshift+0xa4>
 800be94:	f108 0602 	add.w	r6, r8, #2
 800be98:	3e01      	subs	r6, #1
 800be9a:	4638      	mov	r0, r7
 800be9c:	612e      	str	r6, [r5, #16]
 800be9e:	4621      	mov	r1, r4
 800bea0:	f7ff fdd8 	bl	800ba54 <_Bfree>
 800bea4:	4628      	mov	r0, r5
 800bea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800beae:	3301      	adds	r3, #1
 800beb0:	e7c5      	b.n	800be3e <__lshift+0x4a>
 800beb2:	3904      	subs	r1, #4
 800beb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800beb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bebc:	459c      	cmp	ip, r3
 800bebe:	d8f9      	bhi.n	800beb4 <__lshift+0xc0>
 800bec0:	e7ea      	b.n	800be98 <__lshift+0xa4>
 800bec2:	bf00      	nop
 800bec4:	0800f108 	.word	0x0800f108
 800bec8:	0800f119 	.word	0x0800f119

0800becc <__mcmp>:
 800becc:	b530      	push	{r4, r5, lr}
 800bece:	6902      	ldr	r2, [r0, #16]
 800bed0:	690c      	ldr	r4, [r1, #16]
 800bed2:	1b12      	subs	r2, r2, r4
 800bed4:	d10e      	bne.n	800bef4 <__mcmp+0x28>
 800bed6:	f100 0314 	add.w	r3, r0, #20
 800beda:	3114      	adds	r1, #20
 800bedc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bee0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bee4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bee8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800beec:	42a5      	cmp	r5, r4
 800beee:	d003      	beq.n	800bef8 <__mcmp+0x2c>
 800bef0:	d305      	bcc.n	800befe <__mcmp+0x32>
 800bef2:	2201      	movs	r2, #1
 800bef4:	4610      	mov	r0, r2
 800bef6:	bd30      	pop	{r4, r5, pc}
 800bef8:	4283      	cmp	r3, r0
 800befa:	d3f3      	bcc.n	800bee4 <__mcmp+0x18>
 800befc:	e7fa      	b.n	800bef4 <__mcmp+0x28>
 800befe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf02:	e7f7      	b.n	800bef4 <__mcmp+0x28>

0800bf04 <__mdiff>:
 800bf04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf08:	460c      	mov	r4, r1
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4620      	mov	r0, r4
 800bf10:	4690      	mov	r8, r2
 800bf12:	f7ff ffdb 	bl	800becc <__mcmp>
 800bf16:	1e05      	subs	r5, r0, #0
 800bf18:	d110      	bne.n	800bf3c <__mdiff+0x38>
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7ff fd59 	bl	800b9d4 <_Balloc>
 800bf22:	b930      	cbnz	r0, 800bf32 <__mdiff+0x2e>
 800bf24:	4b3a      	ldr	r3, [pc, #232]	; (800c010 <__mdiff+0x10c>)
 800bf26:	4602      	mov	r2, r0
 800bf28:	f240 2137 	movw	r1, #567	; 0x237
 800bf2c:	4839      	ldr	r0, [pc, #228]	; (800c014 <__mdiff+0x110>)
 800bf2e:	f000 fb51 	bl	800c5d4 <__assert_func>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3c:	bfa4      	itt	ge
 800bf3e:	4643      	movge	r3, r8
 800bf40:	46a0      	movge	r8, r4
 800bf42:	4630      	mov	r0, r6
 800bf44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bf48:	bfa6      	itte	ge
 800bf4a:	461c      	movge	r4, r3
 800bf4c:	2500      	movge	r5, #0
 800bf4e:	2501      	movlt	r5, #1
 800bf50:	f7ff fd40 	bl	800b9d4 <_Balloc>
 800bf54:	b920      	cbnz	r0, 800bf60 <__mdiff+0x5c>
 800bf56:	4b2e      	ldr	r3, [pc, #184]	; (800c010 <__mdiff+0x10c>)
 800bf58:	4602      	mov	r2, r0
 800bf5a:	f240 2145 	movw	r1, #581	; 0x245
 800bf5e:	e7e5      	b.n	800bf2c <__mdiff+0x28>
 800bf60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf64:	6926      	ldr	r6, [r4, #16]
 800bf66:	60c5      	str	r5, [r0, #12]
 800bf68:	f104 0914 	add.w	r9, r4, #20
 800bf6c:	f108 0514 	add.w	r5, r8, #20
 800bf70:	f100 0e14 	add.w	lr, r0, #20
 800bf74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf7c:	f108 0210 	add.w	r2, r8, #16
 800bf80:	46f2      	mov	sl, lr
 800bf82:	2100      	movs	r1, #0
 800bf84:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf8c:	fa11 f88b 	uxtah	r8, r1, fp
 800bf90:	b299      	uxth	r1, r3
 800bf92:	0c1b      	lsrs	r3, r3, #16
 800bf94:	eba8 0801 	sub.w	r8, r8, r1
 800bf98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bfa0:	fa1f f888 	uxth.w	r8, r8
 800bfa4:	1419      	asrs	r1, r3, #16
 800bfa6:	454e      	cmp	r6, r9
 800bfa8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bfac:	f84a 3b04 	str.w	r3, [sl], #4
 800bfb0:	d8e8      	bhi.n	800bf84 <__mdiff+0x80>
 800bfb2:	1b33      	subs	r3, r6, r4
 800bfb4:	3b15      	subs	r3, #21
 800bfb6:	f023 0303 	bic.w	r3, r3, #3
 800bfba:	3304      	adds	r3, #4
 800bfbc:	3415      	adds	r4, #21
 800bfbe:	42a6      	cmp	r6, r4
 800bfc0:	bf38      	it	cc
 800bfc2:	2304      	movcc	r3, #4
 800bfc4:	441d      	add	r5, r3
 800bfc6:	4473      	add	r3, lr
 800bfc8:	469e      	mov	lr, r3
 800bfca:	462e      	mov	r6, r5
 800bfcc:	4566      	cmp	r6, ip
 800bfce:	d30e      	bcc.n	800bfee <__mdiff+0xea>
 800bfd0:	f10c 0203 	add.w	r2, ip, #3
 800bfd4:	1b52      	subs	r2, r2, r5
 800bfd6:	f022 0203 	bic.w	r2, r2, #3
 800bfda:	3d03      	subs	r5, #3
 800bfdc:	45ac      	cmp	ip, r5
 800bfde:	bf38      	it	cc
 800bfe0:	2200      	movcc	r2, #0
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bfe8:	b17a      	cbz	r2, 800c00a <__mdiff+0x106>
 800bfea:	6107      	str	r7, [r0, #16]
 800bfec:	e7a4      	b.n	800bf38 <__mdiff+0x34>
 800bfee:	f856 8b04 	ldr.w	r8, [r6], #4
 800bff2:	fa11 f288 	uxtah	r2, r1, r8
 800bff6:	1414      	asrs	r4, r2, #16
 800bff8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bffc:	b292      	uxth	r2, r2
 800bffe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c002:	f84e 2b04 	str.w	r2, [lr], #4
 800c006:	1421      	asrs	r1, r4, #16
 800c008:	e7e0      	b.n	800bfcc <__mdiff+0xc8>
 800c00a:	3f01      	subs	r7, #1
 800c00c:	e7ea      	b.n	800bfe4 <__mdiff+0xe0>
 800c00e:	bf00      	nop
 800c010:	0800f108 	.word	0x0800f108
 800c014:	0800f119 	.word	0x0800f119

0800c018 <__d2b>:
 800c018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c01c:	460f      	mov	r7, r1
 800c01e:	2101      	movs	r1, #1
 800c020:	ec59 8b10 	vmov	r8, r9, d0
 800c024:	4616      	mov	r6, r2
 800c026:	f7ff fcd5 	bl	800b9d4 <_Balloc>
 800c02a:	4604      	mov	r4, r0
 800c02c:	b930      	cbnz	r0, 800c03c <__d2b+0x24>
 800c02e:	4602      	mov	r2, r0
 800c030:	4b24      	ldr	r3, [pc, #144]	; (800c0c4 <__d2b+0xac>)
 800c032:	4825      	ldr	r0, [pc, #148]	; (800c0c8 <__d2b+0xb0>)
 800c034:	f240 310f 	movw	r1, #783	; 0x30f
 800c038:	f000 facc 	bl	800c5d4 <__assert_func>
 800c03c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c044:	bb2d      	cbnz	r5, 800c092 <__d2b+0x7a>
 800c046:	9301      	str	r3, [sp, #4]
 800c048:	f1b8 0300 	subs.w	r3, r8, #0
 800c04c:	d026      	beq.n	800c09c <__d2b+0x84>
 800c04e:	4668      	mov	r0, sp
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	f7ff fd87 	bl	800bb64 <__lo0bits>
 800c056:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c05a:	b1e8      	cbz	r0, 800c098 <__d2b+0x80>
 800c05c:	f1c0 0320 	rsb	r3, r0, #32
 800c060:	fa02 f303 	lsl.w	r3, r2, r3
 800c064:	430b      	orrs	r3, r1
 800c066:	40c2      	lsrs	r2, r0
 800c068:	6163      	str	r3, [r4, #20]
 800c06a:	9201      	str	r2, [sp, #4]
 800c06c:	9b01      	ldr	r3, [sp, #4]
 800c06e:	61a3      	str	r3, [r4, #24]
 800c070:	2b00      	cmp	r3, #0
 800c072:	bf14      	ite	ne
 800c074:	2202      	movne	r2, #2
 800c076:	2201      	moveq	r2, #1
 800c078:	6122      	str	r2, [r4, #16]
 800c07a:	b1bd      	cbz	r5, 800c0ac <__d2b+0x94>
 800c07c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c080:	4405      	add	r5, r0
 800c082:	603d      	str	r5, [r7, #0]
 800c084:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c088:	6030      	str	r0, [r6, #0]
 800c08a:	4620      	mov	r0, r4
 800c08c:	b003      	add	sp, #12
 800c08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c096:	e7d6      	b.n	800c046 <__d2b+0x2e>
 800c098:	6161      	str	r1, [r4, #20]
 800c09a:	e7e7      	b.n	800c06c <__d2b+0x54>
 800c09c:	a801      	add	r0, sp, #4
 800c09e:	f7ff fd61 	bl	800bb64 <__lo0bits>
 800c0a2:	9b01      	ldr	r3, [sp, #4]
 800c0a4:	6163      	str	r3, [r4, #20]
 800c0a6:	3020      	adds	r0, #32
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	e7e5      	b.n	800c078 <__d2b+0x60>
 800c0ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0b4:	6038      	str	r0, [r7, #0]
 800c0b6:	6918      	ldr	r0, [r3, #16]
 800c0b8:	f7ff fd34 	bl	800bb24 <__hi0bits>
 800c0bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0c0:	e7e2      	b.n	800c088 <__d2b+0x70>
 800c0c2:	bf00      	nop
 800c0c4:	0800f108 	.word	0x0800f108
 800c0c8:	0800f119 	.word	0x0800f119

0800c0cc <__sfputc_r>:
 800c0cc:	6893      	ldr	r3, [r2, #8]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	b410      	push	{r4}
 800c0d4:	6093      	str	r3, [r2, #8]
 800c0d6:	da08      	bge.n	800c0ea <__sfputc_r+0x1e>
 800c0d8:	6994      	ldr	r4, [r2, #24]
 800c0da:	42a3      	cmp	r3, r4
 800c0dc:	db01      	blt.n	800c0e2 <__sfputc_r+0x16>
 800c0de:	290a      	cmp	r1, #10
 800c0e0:	d103      	bne.n	800c0ea <__sfputc_r+0x1e>
 800c0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0e6:	f7fe bc8a 	b.w	800a9fe <__swbuf_r>
 800c0ea:	6813      	ldr	r3, [r2, #0]
 800c0ec:	1c58      	adds	r0, r3, #1
 800c0ee:	6010      	str	r0, [r2, #0]
 800c0f0:	7019      	strb	r1, [r3, #0]
 800c0f2:	4608      	mov	r0, r1
 800c0f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <__sfputs_r>:
 800c0fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	460f      	mov	r7, r1
 800c100:	4614      	mov	r4, r2
 800c102:	18d5      	adds	r5, r2, r3
 800c104:	42ac      	cmp	r4, r5
 800c106:	d101      	bne.n	800c10c <__sfputs_r+0x12>
 800c108:	2000      	movs	r0, #0
 800c10a:	e007      	b.n	800c11c <__sfputs_r+0x22>
 800c10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c110:	463a      	mov	r2, r7
 800c112:	4630      	mov	r0, r6
 800c114:	f7ff ffda 	bl	800c0cc <__sfputc_r>
 800c118:	1c43      	adds	r3, r0, #1
 800c11a:	d1f3      	bne.n	800c104 <__sfputs_r+0xa>
 800c11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c120 <_vfiprintf_r>:
 800c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	460d      	mov	r5, r1
 800c126:	b09d      	sub	sp, #116	; 0x74
 800c128:	4614      	mov	r4, r2
 800c12a:	4698      	mov	r8, r3
 800c12c:	4606      	mov	r6, r0
 800c12e:	b118      	cbz	r0, 800c138 <_vfiprintf_r+0x18>
 800c130:	6a03      	ldr	r3, [r0, #32]
 800c132:	b90b      	cbnz	r3, 800c138 <_vfiprintf_r+0x18>
 800c134:	f7fe fb7c 	bl	800a830 <__sinit>
 800c138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c13a:	07d9      	lsls	r1, r3, #31
 800c13c:	d405      	bmi.n	800c14a <_vfiprintf_r+0x2a>
 800c13e:	89ab      	ldrh	r3, [r5, #12]
 800c140:	059a      	lsls	r2, r3, #22
 800c142:	d402      	bmi.n	800c14a <_vfiprintf_r+0x2a>
 800c144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c146:	f7fe fd7b 	bl	800ac40 <__retarget_lock_acquire_recursive>
 800c14a:	89ab      	ldrh	r3, [r5, #12]
 800c14c:	071b      	lsls	r3, r3, #28
 800c14e:	d501      	bpl.n	800c154 <_vfiprintf_r+0x34>
 800c150:	692b      	ldr	r3, [r5, #16]
 800c152:	b99b      	cbnz	r3, 800c17c <_vfiprintf_r+0x5c>
 800c154:	4629      	mov	r1, r5
 800c156:	4630      	mov	r0, r6
 800c158:	f7fe fc8e 	bl	800aa78 <__swsetup_r>
 800c15c:	b170      	cbz	r0, 800c17c <_vfiprintf_r+0x5c>
 800c15e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c160:	07dc      	lsls	r4, r3, #31
 800c162:	d504      	bpl.n	800c16e <_vfiprintf_r+0x4e>
 800c164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c168:	b01d      	add	sp, #116	; 0x74
 800c16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16e:	89ab      	ldrh	r3, [r5, #12]
 800c170:	0598      	lsls	r0, r3, #22
 800c172:	d4f7      	bmi.n	800c164 <_vfiprintf_r+0x44>
 800c174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c176:	f7fe fd64 	bl	800ac42 <__retarget_lock_release_recursive>
 800c17a:	e7f3      	b.n	800c164 <_vfiprintf_r+0x44>
 800c17c:	2300      	movs	r3, #0
 800c17e:	9309      	str	r3, [sp, #36]	; 0x24
 800c180:	2320      	movs	r3, #32
 800c182:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c186:	f8cd 800c 	str.w	r8, [sp, #12]
 800c18a:	2330      	movs	r3, #48	; 0x30
 800c18c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c340 <_vfiprintf_r+0x220>
 800c190:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c194:	f04f 0901 	mov.w	r9, #1
 800c198:	4623      	mov	r3, r4
 800c19a:	469a      	mov	sl, r3
 800c19c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1a0:	b10a      	cbz	r2, 800c1a6 <_vfiprintf_r+0x86>
 800c1a2:	2a25      	cmp	r2, #37	; 0x25
 800c1a4:	d1f9      	bne.n	800c19a <_vfiprintf_r+0x7a>
 800c1a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c1aa:	d00b      	beq.n	800c1c4 <_vfiprintf_r+0xa4>
 800c1ac:	465b      	mov	r3, fp
 800c1ae:	4622      	mov	r2, r4
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7ff ffa1 	bl	800c0fa <__sfputs_r>
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	f000 80a9 	beq.w	800c310 <_vfiprintf_r+0x1f0>
 800c1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1c0:	445a      	add	r2, fp
 800c1c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f000 80a1 	beq.w	800c310 <_vfiprintf_r+0x1f0>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1d8:	f10a 0a01 	add.w	sl, sl, #1
 800c1dc:	9304      	str	r3, [sp, #16]
 800c1de:	9307      	str	r3, [sp, #28]
 800c1e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c1e6:	4654      	mov	r4, sl
 800c1e8:	2205      	movs	r2, #5
 800c1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ee:	4854      	ldr	r0, [pc, #336]	; (800c340 <_vfiprintf_r+0x220>)
 800c1f0:	f7f4 f80e 	bl	8000210 <memchr>
 800c1f4:	9a04      	ldr	r2, [sp, #16]
 800c1f6:	b9d8      	cbnz	r0, 800c230 <_vfiprintf_r+0x110>
 800c1f8:	06d1      	lsls	r1, r2, #27
 800c1fa:	bf44      	itt	mi
 800c1fc:	2320      	movmi	r3, #32
 800c1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c202:	0713      	lsls	r3, r2, #28
 800c204:	bf44      	itt	mi
 800c206:	232b      	movmi	r3, #43	; 0x2b
 800c208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c20c:	f89a 3000 	ldrb.w	r3, [sl]
 800c210:	2b2a      	cmp	r3, #42	; 0x2a
 800c212:	d015      	beq.n	800c240 <_vfiprintf_r+0x120>
 800c214:	9a07      	ldr	r2, [sp, #28]
 800c216:	4654      	mov	r4, sl
 800c218:	2000      	movs	r0, #0
 800c21a:	f04f 0c0a 	mov.w	ip, #10
 800c21e:	4621      	mov	r1, r4
 800c220:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c224:	3b30      	subs	r3, #48	; 0x30
 800c226:	2b09      	cmp	r3, #9
 800c228:	d94d      	bls.n	800c2c6 <_vfiprintf_r+0x1a6>
 800c22a:	b1b0      	cbz	r0, 800c25a <_vfiprintf_r+0x13a>
 800c22c:	9207      	str	r2, [sp, #28]
 800c22e:	e014      	b.n	800c25a <_vfiprintf_r+0x13a>
 800c230:	eba0 0308 	sub.w	r3, r0, r8
 800c234:	fa09 f303 	lsl.w	r3, r9, r3
 800c238:	4313      	orrs	r3, r2
 800c23a:	9304      	str	r3, [sp, #16]
 800c23c:	46a2      	mov	sl, r4
 800c23e:	e7d2      	b.n	800c1e6 <_vfiprintf_r+0xc6>
 800c240:	9b03      	ldr	r3, [sp, #12]
 800c242:	1d19      	adds	r1, r3, #4
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	9103      	str	r1, [sp, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	bfbb      	ittet	lt
 800c24c:	425b      	neglt	r3, r3
 800c24e:	f042 0202 	orrlt.w	r2, r2, #2
 800c252:	9307      	strge	r3, [sp, #28]
 800c254:	9307      	strlt	r3, [sp, #28]
 800c256:	bfb8      	it	lt
 800c258:	9204      	strlt	r2, [sp, #16]
 800c25a:	7823      	ldrb	r3, [r4, #0]
 800c25c:	2b2e      	cmp	r3, #46	; 0x2e
 800c25e:	d10c      	bne.n	800c27a <_vfiprintf_r+0x15a>
 800c260:	7863      	ldrb	r3, [r4, #1]
 800c262:	2b2a      	cmp	r3, #42	; 0x2a
 800c264:	d134      	bne.n	800c2d0 <_vfiprintf_r+0x1b0>
 800c266:	9b03      	ldr	r3, [sp, #12]
 800c268:	1d1a      	adds	r2, r3, #4
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	9203      	str	r2, [sp, #12]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	bfb8      	it	lt
 800c272:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c276:	3402      	adds	r4, #2
 800c278:	9305      	str	r3, [sp, #20]
 800c27a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c350 <_vfiprintf_r+0x230>
 800c27e:	7821      	ldrb	r1, [r4, #0]
 800c280:	2203      	movs	r2, #3
 800c282:	4650      	mov	r0, sl
 800c284:	f7f3 ffc4 	bl	8000210 <memchr>
 800c288:	b138      	cbz	r0, 800c29a <_vfiprintf_r+0x17a>
 800c28a:	9b04      	ldr	r3, [sp, #16]
 800c28c:	eba0 000a 	sub.w	r0, r0, sl
 800c290:	2240      	movs	r2, #64	; 0x40
 800c292:	4082      	lsls	r2, r0
 800c294:	4313      	orrs	r3, r2
 800c296:	3401      	adds	r4, #1
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c29e:	4829      	ldr	r0, [pc, #164]	; (800c344 <_vfiprintf_r+0x224>)
 800c2a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2a4:	2206      	movs	r2, #6
 800c2a6:	f7f3 ffb3 	bl	8000210 <memchr>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d03f      	beq.n	800c32e <_vfiprintf_r+0x20e>
 800c2ae:	4b26      	ldr	r3, [pc, #152]	; (800c348 <_vfiprintf_r+0x228>)
 800c2b0:	bb1b      	cbnz	r3, 800c2fa <_vfiprintf_r+0x1da>
 800c2b2:	9b03      	ldr	r3, [sp, #12]
 800c2b4:	3307      	adds	r3, #7
 800c2b6:	f023 0307 	bic.w	r3, r3, #7
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	9303      	str	r3, [sp, #12]
 800c2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c0:	443b      	add	r3, r7
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	e768      	b.n	800c198 <_vfiprintf_r+0x78>
 800c2c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	2001      	movs	r0, #1
 800c2ce:	e7a6      	b.n	800c21e <_vfiprintf_r+0xfe>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	3401      	adds	r4, #1
 800c2d4:	9305      	str	r3, [sp, #20]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	f04f 0c0a 	mov.w	ip, #10
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2e2:	3a30      	subs	r2, #48	; 0x30
 800c2e4:	2a09      	cmp	r2, #9
 800c2e6:	d903      	bls.n	800c2f0 <_vfiprintf_r+0x1d0>
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d0c6      	beq.n	800c27a <_vfiprintf_r+0x15a>
 800c2ec:	9105      	str	r1, [sp, #20]
 800c2ee:	e7c4      	b.n	800c27a <_vfiprintf_r+0x15a>
 800c2f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e7f0      	b.n	800c2dc <_vfiprintf_r+0x1bc>
 800c2fa:	ab03      	add	r3, sp, #12
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	462a      	mov	r2, r5
 800c300:	4b12      	ldr	r3, [pc, #72]	; (800c34c <_vfiprintf_r+0x22c>)
 800c302:	a904      	add	r1, sp, #16
 800c304:	4630      	mov	r0, r6
 800c306:	f7fd fe53 	bl	8009fb0 <_printf_float>
 800c30a:	4607      	mov	r7, r0
 800c30c:	1c78      	adds	r0, r7, #1
 800c30e:	d1d6      	bne.n	800c2be <_vfiprintf_r+0x19e>
 800c310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c312:	07d9      	lsls	r1, r3, #31
 800c314:	d405      	bmi.n	800c322 <_vfiprintf_r+0x202>
 800c316:	89ab      	ldrh	r3, [r5, #12]
 800c318:	059a      	lsls	r2, r3, #22
 800c31a:	d402      	bmi.n	800c322 <_vfiprintf_r+0x202>
 800c31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c31e:	f7fe fc90 	bl	800ac42 <__retarget_lock_release_recursive>
 800c322:	89ab      	ldrh	r3, [r5, #12]
 800c324:	065b      	lsls	r3, r3, #25
 800c326:	f53f af1d 	bmi.w	800c164 <_vfiprintf_r+0x44>
 800c32a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c32c:	e71c      	b.n	800c168 <_vfiprintf_r+0x48>
 800c32e:	ab03      	add	r3, sp, #12
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	462a      	mov	r2, r5
 800c334:	4b05      	ldr	r3, [pc, #20]	; (800c34c <_vfiprintf_r+0x22c>)
 800c336:	a904      	add	r1, sp, #16
 800c338:	4630      	mov	r0, r6
 800c33a:	f7fe f8dd 	bl	800a4f8 <_printf_i>
 800c33e:	e7e4      	b.n	800c30a <_vfiprintf_r+0x1ea>
 800c340:	0800f274 	.word	0x0800f274
 800c344:	0800f27e 	.word	0x0800f27e
 800c348:	08009fb1 	.word	0x08009fb1
 800c34c:	0800c0fb 	.word	0x0800c0fb
 800c350:	0800f27a 	.word	0x0800f27a

0800c354 <__sflush_r>:
 800c354:	898a      	ldrh	r2, [r1, #12]
 800c356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c35a:	4605      	mov	r5, r0
 800c35c:	0710      	lsls	r0, r2, #28
 800c35e:	460c      	mov	r4, r1
 800c360:	d458      	bmi.n	800c414 <__sflush_r+0xc0>
 800c362:	684b      	ldr	r3, [r1, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	dc05      	bgt.n	800c374 <__sflush_r+0x20>
 800c368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	dc02      	bgt.n	800c374 <__sflush_r+0x20>
 800c36e:	2000      	movs	r0, #0
 800c370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c376:	2e00      	cmp	r6, #0
 800c378:	d0f9      	beq.n	800c36e <__sflush_r+0x1a>
 800c37a:	2300      	movs	r3, #0
 800c37c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c380:	682f      	ldr	r7, [r5, #0]
 800c382:	6a21      	ldr	r1, [r4, #32]
 800c384:	602b      	str	r3, [r5, #0]
 800c386:	d032      	beq.n	800c3ee <__sflush_r+0x9a>
 800c388:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	075a      	lsls	r2, r3, #29
 800c38e:	d505      	bpl.n	800c39c <__sflush_r+0x48>
 800c390:	6863      	ldr	r3, [r4, #4]
 800c392:	1ac0      	subs	r0, r0, r3
 800c394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c396:	b10b      	cbz	r3, 800c39c <__sflush_r+0x48>
 800c398:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c39a:	1ac0      	subs	r0, r0, r3
 800c39c:	2300      	movs	r3, #0
 800c39e:	4602      	mov	r2, r0
 800c3a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3a2:	6a21      	ldr	r1, [r4, #32]
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	47b0      	blx	r6
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	89a3      	ldrh	r3, [r4, #12]
 800c3ac:	d106      	bne.n	800c3bc <__sflush_r+0x68>
 800c3ae:	6829      	ldr	r1, [r5, #0]
 800c3b0:	291d      	cmp	r1, #29
 800c3b2:	d82b      	bhi.n	800c40c <__sflush_r+0xb8>
 800c3b4:	4a29      	ldr	r2, [pc, #164]	; (800c45c <__sflush_r+0x108>)
 800c3b6:	410a      	asrs	r2, r1
 800c3b8:	07d6      	lsls	r6, r2, #31
 800c3ba:	d427      	bmi.n	800c40c <__sflush_r+0xb8>
 800c3bc:	2200      	movs	r2, #0
 800c3be:	6062      	str	r2, [r4, #4]
 800c3c0:	04d9      	lsls	r1, r3, #19
 800c3c2:	6922      	ldr	r2, [r4, #16]
 800c3c4:	6022      	str	r2, [r4, #0]
 800c3c6:	d504      	bpl.n	800c3d2 <__sflush_r+0x7e>
 800c3c8:	1c42      	adds	r2, r0, #1
 800c3ca:	d101      	bne.n	800c3d0 <__sflush_r+0x7c>
 800c3cc:	682b      	ldr	r3, [r5, #0]
 800c3ce:	b903      	cbnz	r3, 800c3d2 <__sflush_r+0x7e>
 800c3d0:	6560      	str	r0, [r4, #84]	; 0x54
 800c3d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3d4:	602f      	str	r7, [r5, #0]
 800c3d6:	2900      	cmp	r1, #0
 800c3d8:	d0c9      	beq.n	800c36e <__sflush_r+0x1a>
 800c3da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3de:	4299      	cmp	r1, r3
 800c3e0:	d002      	beq.n	800c3e8 <__sflush_r+0x94>
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	f7ff faaa 	bl	800b93c <_free_r>
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	6360      	str	r0, [r4, #52]	; 0x34
 800c3ec:	e7c0      	b.n	800c370 <__sflush_r+0x1c>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	47b0      	blx	r6
 800c3f4:	1c41      	adds	r1, r0, #1
 800c3f6:	d1c8      	bne.n	800c38a <__sflush_r+0x36>
 800c3f8:	682b      	ldr	r3, [r5, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d0c5      	beq.n	800c38a <__sflush_r+0x36>
 800c3fe:	2b1d      	cmp	r3, #29
 800c400:	d001      	beq.n	800c406 <__sflush_r+0xb2>
 800c402:	2b16      	cmp	r3, #22
 800c404:	d101      	bne.n	800c40a <__sflush_r+0xb6>
 800c406:	602f      	str	r7, [r5, #0]
 800c408:	e7b1      	b.n	800c36e <__sflush_r+0x1a>
 800c40a:	89a3      	ldrh	r3, [r4, #12]
 800c40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c410:	81a3      	strh	r3, [r4, #12]
 800c412:	e7ad      	b.n	800c370 <__sflush_r+0x1c>
 800c414:	690f      	ldr	r7, [r1, #16]
 800c416:	2f00      	cmp	r7, #0
 800c418:	d0a9      	beq.n	800c36e <__sflush_r+0x1a>
 800c41a:	0793      	lsls	r3, r2, #30
 800c41c:	680e      	ldr	r6, [r1, #0]
 800c41e:	bf08      	it	eq
 800c420:	694b      	ldreq	r3, [r1, #20]
 800c422:	600f      	str	r7, [r1, #0]
 800c424:	bf18      	it	ne
 800c426:	2300      	movne	r3, #0
 800c428:	eba6 0807 	sub.w	r8, r6, r7
 800c42c:	608b      	str	r3, [r1, #8]
 800c42e:	f1b8 0f00 	cmp.w	r8, #0
 800c432:	dd9c      	ble.n	800c36e <__sflush_r+0x1a>
 800c434:	6a21      	ldr	r1, [r4, #32]
 800c436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c438:	4643      	mov	r3, r8
 800c43a:	463a      	mov	r2, r7
 800c43c:	4628      	mov	r0, r5
 800c43e:	47b0      	blx	r6
 800c440:	2800      	cmp	r0, #0
 800c442:	dc06      	bgt.n	800c452 <__sflush_r+0xfe>
 800c444:	89a3      	ldrh	r3, [r4, #12]
 800c446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c44a:	81a3      	strh	r3, [r4, #12]
 800c44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c450:	e78e      	b.n	800c370 <__sflush_r+0x1c>
 800c452:	4407      	add	r7, r0
 800c454:	eba8 0800 	sub.w	r8, r8, r0
 800c458:	e7e9      	b.n	800c42e <__sflush_r+0xda>
 800c45a:	bf00      	nop
 800c45c:	dfbffffe 	.word	0xdfbffffe

0800c460 <_fflush_r>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	690b      	ldr	r3, [r1, #16]
 800c464:	4605      	mov	r5, r0
 800c466:	460c      	mov	r4, r1
 800c468:	b913      	cbnz	r3, 800c470 <_fflush_r+0x10>
 800c46a:	2500      	movs	r5, #0
 800c46c:	4628      	mov	r0, r5
 800c46e:	bd38      	pop	{r3, r4, r5, pc}
 800c470:	b118      	cbz	r0, 800c47a <_fflush_r+0x1a>
 800c472:	6a03      	ldr	r3, [r0, #32]
 800c474:	b90b      	cbnz	r3, 800c47a <_fflush_r+0x1a>
 800c476:	f7fe f9db 	bl	800a830 <__sinit>
 800c47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d0f3      	beq.n	800c46a <_fflush_r+0xa>
 800c482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c484:	07d0      	lsls	r0, r2, #31
 800c486:	d404      	bmi.n	800c492 <_fflush_r+0x32>
 800c488:	0599      	lsls	r1, r3, #22
 800c48a:	d402      	bmi.n	800c492 <_fflush_r+0x32>
 800c48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c48e:	f7fe fbd7 	bl	800ac40 <__retarget_lock_acquire_recursive>
 800c492:	4628      	mov	r0, r5
 800c494:	4621      	mov	r1, r4
 800c496:	f7ff ff5d 	bl	800c354 <__sflush_r>
 800c49a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c49c:	07da      	lsls	r2, r3, #31
 800c49e:	4605      	mov	r5, r0
 800c4a0:	d4e4      	bmi.n	800c46c <_fflush_r+0xc>
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	059b      	lsls	r3, r3, #22
 800c4a6:	d4e1      	bmi.n	800c46c <_fflush_r+0xc>
 800c4a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4aa:	f7fe fbca 	bl	800ac42 <__retarget_lock_release_recursive>
 800c4ae:	e7dd      	b.n	800c46c <_fflush_r+0xc>

0800c4b0 <__swhatbuf_r>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b8:	2900      	cmp	r1, #0
 800c4ba:	b096      	sub	sp, #88	; 0x58
 800c4bc:	4615      	mov	r5, r2
 800c4be:	461e      	mov	r6, r3
 800c4c0:	da0d      	bge.n	800c4de <__swhatbuf_r+0x2e>
 800c4c2:	89a3      	ldrh	r3, [r4, #12]
 800c4c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c4c8:	f04f 0100 	mov.w	r1, #0
 800c4cc:	bf0c      	ite	eq
 800c4ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c4d2:	2340      	movne	r3, #64	; 0x40
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	6031      	str	r1, [r6, #0]
 800c4d8:	602b      	str	r3, [r5, #0]
 800c4da:	b016      	add	sp, #88	; 0x58
 800c4dc:	bd70      	pop	{r4, r5, r6, pc}
 800c4de:	466a      	mov	r2, sp
 800c4e0:	f000 f848 	bl	800c574 <_fstat_r>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	dbec      	blt.n	800c4c2 <__swhatbuf_r+0x12>
 800c4e8:	9901      	ldr	r1, [sp, #4]
 800c4ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c4ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c4f2:	4259      	negs	r1, r3
 800c4f4:	4159      	adcs	r1, r3
 800c4f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4fa:	e7eb      	b.n	800c4d4 <__swhatbuf_r+0x24>

0800c4fc <__smakebuf_r>:
 800c4fc:	898b      	ldrh	r3, [r1, #12]
 800c4fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c500:	079d      	lsls	r5, r3, #30
 800c502:	4606      	mov	r6, r0
 800c504:	460c      	mov	r4, r1
 800c506:	d507      	bpl.n	800c518 <__smakebuf_r+0x1c>
 800c508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	6123      	str	r3, [r4, #16]
 800c510:	2301      	movs	r3, #1
 800c512:	6163      	str	r3, [r4, #20]
 800c514:	b002      	add	sp, #8
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	ab01      	add	r3, sp, #4
 800c51a:	466a      	mov	r2, sp
 800c51c:	f7ff ffc8 	bl	800c4b0 <__swhatbuf_r>
 800c520:	9900      	ldr	r1, [sp, #0]
 800c522:	4605      	mov	r5, r0
 800c524:	4630      	mov	r0, r6
 800c526:	f7fd fc17 	bl	8009d58 <_malloc_r>
 800c52a:	b948      	cbnz	r0, 800c540 <__smakebuf_r+0x44>
 800c52c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c530:	059a      	lsls	r2, r3, #22
 800c532:	d4ef      	bmi.n	800c514 <__smakebuf_r+0x18>
 800c534:	f023 0303 	bic.w	r3, r3, #3
 800c538:	f043 0302 	orr.w	r3, r3, #2
 800c53c:	81a3      	strh	r3, [r4, #12]
 800c53e:	e7e3      	b.n	800c508 <__smakebuf_r+0xc>
 800c540:	89a3      	ldrh	r3, [r4, #12]
 800c542:	6020      	str	r0, [r4, #0]
 800c544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c548:	81a3      	strh	r3, [r4, #12]
 800c54a:	9b00      	ldr	r3, [sp, #0]
 800c54c:	6163      	str	r3, [r4, #20]
 800c54e:	9b01      	ldr	r3, [sp, #4]
 800c550:	6120      	str	r0, [r4, #16]
 800c552:	b15b      	cbz	r3, 800c56c <__smakebuf_r+0x70>
 800c554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c558:	4630      	mov	r0, r6
 800c55a:	f000 f81d 	bl	800c598 <_isatty_r>
 800c55e:	b128      	cbz	r0, 800c56c <__smakebuf_r+0x70>
 800c560:	89a3      	ldrh	r3, [r4, #12]
 800c562:	f023 0303 	bic.w	r3, r3, #3
 800c566:	f043 0301 	orr.w	r3, r3, #1
 800c56a:	81a3      	strh	r3, [r4, #12]
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	431d      	orrs	r5, r3
 800c570:	81a5      	strh	r5, [r4, #12]
 800c572:	e7cf      	b.n	800c514 <__smakebuf_r+0x18>

0800c574 <_fstat_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4d07      	ldr	r5, [pc, #28]	; (800c594 <_fstat_r+0x20>)
 800c578:	2300      	movs	r3, #0
 800c57a:	4604      	mov	r4, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	4611      	mov	r1, r2
 800c580:	602b      	str	r3, [r5, #0]
 800c582:	f7f5 fa10 	bl	80019a6 <_fstat>
 800c586:	1c43      	adds	r3, r0, #1
 800c588:	d102      	bne.n	800c590 <_fstat_r+0x1c>
 800c58a:	682b      	ldr	r3, [r5, #0]
 800c58c:	b103      	cbz	r3, 800c590 <_fstat_r+0x1c>
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	bd38      	pop	{r3, r4, r5, pc}
 800c592:	bf00      	nop
 800c594:	20001a9c 	.word	0x20001a9c

0800c598 <_isatty_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d06      	ldr	r5, [pc, #24]	; (800c5b4 <_isatty_r+0x1c>)
 800c59c:	2300      	movs	r3, #0
 800c59e:	4604      	mov	r4, r0
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	602b      	str	r3, [r5, #0]
 800c5a4:	f7f5 fa0f 	bl	80019c6 <_isatty>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_isatty_r+0x1a>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_isatty_r+0x1a>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	20001a9c 	.word	0x20001a9c

0800c5b8 <memcpy>:
 800c5b8:	440a      	add	r2, r1
 800c5ba:	4291      	cmp	r1, r2
 800c5bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c5c0:	d100      	bne.n	800c5c4 <memcpy+0xc>
 800c5c2:	4770      	bx	lr
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5ce:	4291      	cmp	r1, r2
 800c5d0:	d1f9      	bne.n	800c5c6 <memcpy+0xe>
 800c5d2:	bd10      	pop	{r4, pc}

0800c5d4 <__assert_func>:
 800c5d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5d6:	4614      	mov	r4, r2
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4b09      	ldr	r3, [pc, #36]	; (800c600 <__assert_func+0x2c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4605      	mov	r5, r0
 800c5e0:	68d8      	ldr	r0, [r3, #12]
 800c5e2:	b14c      	cbz	r4, 800c5f8 <__assert_func+0x24>
 800c5e4:	4b07      	ldr	r3, [pc, #28]	; (800c604 <__assert_func+0x30>)
 800c5e6:	9100      	str	r1, [sp, #0]
 800c5e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5ec:	4906      	ldr	r1, [pc, #24]	; (800c608 <__assert_func+0x34>)
 800c5ee:	462b      	mov	r3, r5
 800c5f0:	f000 f82e 	bl	800c650 <fiprintf>
 800c5f4:	f000 f83e 	bl	800c674 <abort>
 800c5f8:	4b04      	ldr	r3, [pc, #16]	; (800c60c <__assert_func+0x38>)
 800c5fa:	461c      	mov	r4, r3
 800c5fc:	e7f3      	b.n	800c5e6 <__assert_func+0x12>
 800c5fe:	bf00      	nop
 800c600:	20000064 	.word	0x20000064
 800c604:	0800f28f 	.word	0x0800f28f
 800c608:	0800f29c 	.word	0x0800f29c
 800c60c:	0800f2ca 	.word	0x0800f2ca

0800c610 <__ascii_mbtowc>:
 800c610:	b082      	sub	sp, #8
 800c612:	b901      	cbnz	r1, 800c616 <__ascii_mbtowc+0x6>
 800c614:	a901      	add	r1, sp, #4
 800c616:	b142      	cbz	r2, 800c62a <__ascii_mbtowc+0x1a>
 800c618:	b14b      	cbz	r3, 800c62e <__ascii_mbtowc+0x1e>
 800c61a:	7813      	ldrb	r3, [r2, #0]
 800c61c:	600b      	str	r3, [r1, #0]
 800c61e:	7812      	ldrb	r2, [r2, #0]
 800c620:	1e10      	subs	r0, r2, #0
 800c622:	bf18      	it	ne
 800c624:	2001      	movne	r0, #1
 800c626:	b002      	add	sp, #8
 800c628:	4770      	bx	lr
 800c62a:	4610      	mov	r0, r2
 800c62c:	e7fb      	b.n	800c626 <__ascii_mbtowc+0x16>
 800c62e:	f06f 0001 	mvn.w	r0, #1
 800c632:	e7f8      	b.n	800c626 <__ascii_mbtowc+0x16>

0800c634 <__ascii_wctomb>:
 800c634:	b149      	cbz	r1, 800c64a <__ascii_wctomb+0x16>
 800c636:	2aff      	cmp	r2, #255	; 0xff
 800c638:	bf85      	ittet	hi
 800c63a:	238a      	movhi	r3, #138	; 0x8a
 800c63c:	6003      	strhi	r3, [r0, #0]
 800c63e:	700a      	strbls	r2, [r1, #0]
 800c640:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c644:	bf98      	it	ls
 800c646:	2001      	movls	r0, #1
 800c648:	4770      	bx	lr
 800c64a:	4608      	mov	r0, r1
 800c64c:	4770      	bx	lr
	...

0800c650 <fiprintf>:
 800c650:	b40e      	push	{r1, r2, r3}
 800c652:	b503      	push	{r0, r1, lr}
 800c654:	4601      	mov	r1, r0
 800c656:	ab03      	add	r3, sp, #12
 800c658:	4805      	ldr	r0, [pc, #20]	; (800c670 <fiprintf+0x20>)
 800c65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c65e:	6800      	ldr	r0, [r0, #0]
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	f7ff fd5d 	bl	800c120 <_vfiprintf_r>
 800c666:	b002      	add	sp, #8
 800c668:	f85d eb04 	ldr.w	lr, [sp], #4
 800c66c:	b003      	add	sp, #12
 800c66e:	4770      	bx	lr
 800c670:	20000064 	.word	0x20000064

0800c674 <abort>:
 800c674:	b508      	push	{r3, lr}
 800c676:	2006      	movs	r0, #6
 800c678:	f000 f82c 	bl	800c6d4 <raise>
 800c67c:	2001      	movs	r0, #1
 800c67e:	f7f5 f95f 	bl	8001940 <_exit>

0800c682 <_raise_r>:
 800c682:	291f      	cmp	r1, #31
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4604      	mov	r4, r0
 800c688:	460d      	mov	r5, r1
 800c68a:	d904      	bls.n	800c696 <_raise_r+0x14>
 800c68c:	2316      	movs	r3, #22
 800c68e:	6003      	str	r3, [r0, #0]
 800c690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c694:	bd38      	pop	{r3, r4, r5, pc}
 800c696:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c698:	b112      	cbz	r2, 800c6a0 <_raise_r+0x1e>
 800c69a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c69e:	b94b      	cbnz	r3, 800c6b4 <_raise_r+0x32>
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f000 f831 	bl	800c708 <_getpid_r>
 800c6a6:	462a      	mov	r2, r5
 800c6a8:	4601      	mov	r1, r0
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b0:	f000 b818 	b.w	800c6e4 <_kill_r>
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d00a      	beq.n	800c6ce <_raise_r+0x4c>
 800c6b8:	1c59      	adds	r1, r3, #1
 800c6ba:	d103      	bne.n	800c6c4 <_raise_r+0x42>
 800c6bc:	2316      	movs	r3, #22
 800c6be:	6003      	str	r3, [r0, #0]
 800c6c0:	2001      	movs	r0, #1
 800c6c2:	e7e7      	b.n	800c694 <_raise_r+0x12>
 800c6c4:	2400      	movs	r4, #0
 800c6c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	4798      	blx	r3
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	e7e0      	b.n	800c694 <_raise_r+0x12>
	...

0800c6d4 <raise>:
 800c6d4:	4b02      	ldr	r3, [pc, #8]	; (800c6e0 <raise+0xc>)
 800c6d6:	4601      	mov	r1, r0
 800c6d8:	6818      	ldr	r0, [r3, #0]
 800c6da:	f7ff bfd2 	b.w	800c682 <_raise_r>
 800c6de:	bf00      	nop
 800c6e0:	20000064 	.word	0x20000064

0800c6e4 <_kill_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	4d07      	ldr	r5, [pc, #28]	; (800c704 <_kill_r+0x20>)
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	4608      	mov	r0, r1
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	602b      	str	r3, [r5, #0]
 800c6f2:	f7f5 f915 	bl	8001920 <_kill>
 800c6f6:	1c43      	adds	r3, r0, #1
 800c6f8:	d102      	bne.n	800c700 <_kill_r+0x1c>
 800c6fa:	682b      	ldr	r3, [r5, #0]
 800c6fc:	b103      	cbz	r3, 800c700 <_kill_r+0x1c>
 800c6fe:	6023      	str	r3, [r4, #0]
 800c700:	bd38      	pop	{r3, r4, r5, pc}
 800c702:	bf00      	nop
 800c704:	20001a9c 	.word	0x20001a9c

0800c708 <_getpid_r>:
 800c708:	f7f5 b902 	b.w	8001910 <_getpid>

0800c70c <atan2>:
 800c70c:	f000 bd94 	b.w	800d238 <__ieee754_atan2>

0800c710 <fmod>:
 800c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c712:	ed2d 8b02 	vpush	{d8}
 800c716:	ec57 6b10 	vmov	r6, r7, d0
 800c71a:	ec55 4b11 	vmov	r4, r5, d1
 800c71e:	f000 fe51 	bl	800d3c4 <__ieee754_fmod>
 800c722:	4622      	mov	r2, r4
 800c724:	462b      	mov	r3, r5
 800c726:	4630      	mov	r0, r6
 800c728:	4639      	mov	r1, r7
 800c72a:	eeb0 8a40 	vmov.f32	s16, s0
 800c72e:	eef0 8a60 	vmov.f32	s17, s1
 800c732:	f7f4 fa1b 	bl	8000b6c <__aeabi_dcmpun>
 800c736:	b990      	cbnz	r0, 800c75e <fmod+0x4e>
 800c738:	2200      	movs	r2, #0
 800c73a:	2300      	movs	r3, #0
 800c73c:	4620      	mov	r0, r4
 800c73e:	4629      	mov	r1, r5
 800c740:	f7f4 f9e2 	bl	8000b08 <__aeabi_dcmpeq>
 800c744:	b158      	cbz	r0, 800c75e <fmod+0x4e>
 800c746:	f7fe fa51 	bl	800abec <__errno>
 800c74a:	2321      	movs	r3, #33	; 0x21
 800c74c:	6003      	str	r3, [r0, #0]
 800c74e:	2200      	movs	r2, #0
 800c750:	2300      	movs	r3, #0
 800c752:	4610      	mov	r0, r2
 800c754:	4619      	mov	r1, r3
 800c756:	f7f4 f899 	bl	800088c <__aeabi_ddiv>
 800c75a:	ec41 0b18 	vmov	d8, r0, r1
 800c75e:	eeb0 0a48 	vmov.f32	s0, s16
 800c762:	eef0 0a68 	vmov.f32	s1, s17
 800c766:	ecbd 8b02 	vpop	{d8}
 800c76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c76c <pow>:
 800c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76e:	ed2d 8b02 	vpush	{d8}
 800c772:	eeb0 8a40 	vmov.f32	s16, s0
 800c776:	eef0 8a60 	vmov.f32	s17, s1
 800c77a:	ec55 4b11 	vmov	r4, r5, d1
 800c77e:	f000 ff2f 	bl	800d5e0 <__ieee754_pow>
 800c782:	4622      	mov	r2, r4
 800c784:	462b      	mov	r3, r5
 800c786:	4620      	mov	r0, r4
 800c788:	4629      	mov	r1, r5
 800c78a:	ec57 6b10 	vmov	r6, r7, d0
 800c78e:	f7f4 f9ed 	bl	8000b6c <__aeabi_dcmpun>
 800c792:	2800      	cmp	r0, #0
 800c794:	d13b      	bne.n	800c80e <pow+0xa2>
 800c796:	ec51 0b18 	vmov	r0, r1, d8
 800c79a:	2200      	movs	r2, #0
 800c79c:	2300      	movs	r3, #0
 800c79e:	f7f4 f9b3 	bl	8000b08 <__aeabi_dcmpeq>
 800c7a2:	b1b8      	cbz	r0, 800c7d4 <pow+0x68>
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	f7f4 f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d146      	bne.n	800c842 <pow+0xd6>
 800c7b4:	ec45 4b10 	vmov	d0, r4, r5
 800c7b8:	f000 face 	bl	800cd58 <finite>
 800c7bc:	b338      	cbz	r0, 800c80e <pow+0xa2>
 800c7be:	2200      	movs	r2, #0
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7f4 f9a9 	bl	8000b1c <__aeabi_dcmplt>
 800c7ca:	b300      	cbz	r0, 800c80e <pow+0xa2>
 800c7cc:	f7fe fa0e 	bl	800abec <__errno>
 800c7d0:	2322      	movs	r3, #34	; 0x22
 800c7d2:	e01b      	b.n	800c80c <pow+0xa0>
 800c7d4:	ec47 6b10 	vmov	d0, r6, r7
 800c7d8:	f000 fabe 	bl	800cd58 <finite>
 800c7dc:	b9e0      	cbnz	r0, 800c818 <pow+0xac>
 800c7de:	eeb0 0a48 	vmov.f32	s0, s16
 800c7e2:	eef0 0a68 	vmov.f32	s1, s17
 800c7e6:	f000 fab7 	bl	800cd58 <finite>
 800c7ea:	b1a8      	cbz	r0, 800c818 <pow+0xac>
 800c7ec:	ec45 4b10 	vmov	d0, r4, r5
 800c7f0:	f000 fab2 	bl	800cd58 <finite>
 800c7f4:	b180      	cbz	r0, 800c818 <pow+0xac>
 800c7f6:	4632      	mov	r2, r6
 800c7f8:	463b      	mov	r3, r7
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	4639      	mov	r1, r7
 800c7fe:	f7f4 f9b5 	bl	8000b6c <__aeabi_dcmpun>
 800c802:	2800      	cmp	r0, #0
 800c804:	d0e2      	beq.n	800c7cc <pow+0x60>
 800c806:	f7fe f9f1 	bl	800abec <__errno>
 800c80a:	2321      	movs	r3, #33	; 0x21
 800c80c:	6003      	str	r3, [r0, #0]
 800c80e:	ecbd 8b02 	vpop	{d8}
 800c812:	ec47 6b10 	vmov	d0, r6, r7
 800c816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c818:	2200      	movs	r2, #0
 800c81a:	2300      	movs	r3, #0
 800c81c:	4630      	mov	r0, r6
 800c81e:	4639      	mov	r1, r7
 800c820:	f7f4 f972 	bl	8000b08 <__aeabi_dcmpeq>
 800c824:	2800      	cmp	r0, #0
 800c826:	d0f2      	beq.n	800c80e <pow+0xa2>
 800c828:	eeb0 0a48 	vmov.f32	s0, s16
 800c82c:	eef0 0a68 	vmov.f32	s1, s17
 800c830:	f000 fa92 	bl	800cd58 <finite>
 800c834:	2800      	cmp	r0, #0
 800c836:	d0ea      	beq.n	800c80e <pow+0xa2>
 800c838:	ec45 4b10 	vmov	d0, r4, r5
 800c83c:	f000 fa8c 	bl	800cd58 <finite>
 800c840:	e7c3      	b.n	800c7ca <pow+0x5e>
 800c842:	4f01      	ldr	r7, [pc, #4]	; (800c848 <pow+0xdc>)
 800c844:	2600      	movs	r6, #0
 800c846:	e7e2      	b.n	800c80e <pow+0xa2>
 800c848:	3ff00000 	.word	0x3ff00000

0800c84c <sqrt>:
 800c84c:	b538      	push	{r3, r4, r5, lr}
 800c84e:	ed2d 8b02 	vpush	{d8}
 800c852:	ec55 4b10 	vmov	r4, r5, d0
 800c856:	f000 fa8b 	bl	800cd70 <__ieee754_sqrt>
 800c85a:	4622      	mov	r2, r4
 800c85c:	462b      	mov	r3, r5
 800c85e:	4620      	mov	r0, r4
 800c860:	4629      	mov	r1, r5
 800c862:	eeb0 8a40 	vmov.f32	s16, s0
 800c866:	eef0 8a60 	vmov.f32	s17, s1
 800c86a:	f7f4 f97f 	bl	8000b6c <__aeabi_dcmpun>
 800c86e:	b990      	cbnz	r0, 800c896 <sqrt+0x4a>
 800c870:	2200      	movs	r2, #0
 800c872:	2300      	movs	r3, #0
 800c874:	4620      	mov	r0, r4
 800c876:	4629      	mov	r1, r5
 800c878:	f7f4 f950 	bl	8000b1c <__aeabi_dcmplt>
 800c87c:	b158      	cbz	r0, 800c896 <sqrt+0x4a>
 800c87e:	f7fe f9b5 	bl	800abec <__errno>
 800c882:	2321      	movs	r3, #33	; 0x21
 800c884:	6003      	str	r3, [r0, #0]
 800c886:	2200      	movs	r2, #0
 800c888:	2300      	movs	r3, #0
 800c88a:	4610      	mov	r0, r2
 800c88c:	4619      	mov	r1, r3
 800c88e:	f7f3 fffd 	bl	800088c <__aeabi_ddiv>
 800c892:	ec41 0b18 	vmov	d8, r0, r1
 800c896:	eeb0 0a48 	vmov.f32	s0, s16
 800c89a:	eef0 0a68 	vmov.f32	s1, s17
 800c89e:	ecbd 8b02 	vpop	{d8}
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	0000      	movs	r0, r0
	...

0800c8a8 <atan>:
 800c8a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ac:	ec55 4b10 	vmov	r4, r5, d0
 800c8b0:	4bc3      	ldr	r3, [pc, #780]	; (800cbc0 <atan+0x318>)
 800c8b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8b6:	429e      	cmp	r6, r3
 800c8b8:	46ab      	mov	fp, r5
 800c8ba:	dd18      	ble.n	800c8ee <atan+0x46>
 800c8bc:	4bc1      	ldr	r3, [pc, #772]	; (800cbc4 <atan+0x31c>)
 800c8be:	429e      	cmp	r6, r3
 800c8c0:	dc01      	bgt.n	800c8c6 <atan+0x1e>
 800c8c2:	d109      	bne.n	800c8d8 <atan+0x30>
 800c8c4:	b144      	cbz	r4, 800c8d8 <atan+0x30>
 800c8c6:	4622      	mov	r2, r4
 800c8c8:	462b      	mov	r3, r5
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	f7f3 fcfd 	bl	80002cc <__adddf3>
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	e006      	b.n	800c8e6 <atan+0x3e>
 800c8d8:	f1bb 0f00 	cmp.w	fp, #0
 800c8dc:	f300 8131 	bgt.w	800cb42 <atan+0x29a>
 800c8e0:	a59b      	add	r5, pc, #620	; (adr r5, 800cb50 <atan+0x2a8>)
 800c8e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c8e6:	ec45 4b10 	vmov	d0, r4, r5
 800c8ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ee:	4bb6      	ldr	r3, [pc, #728]	; (800cbc8 <atan+0x320>)
 800c8f0:	429e      	cmp	r6, r3
 800c8f2:	dc14      	bgt.n	800c91e <atan+0x76>
 800c8f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c8f8:	429e      	cmp	r6, r3
 800c8fa:	dc0d      	bgt.n	800c918 <atan+0x70>
 800c8fc:	a396      	add	r3, pc, #600	; (adr r3, 800cb58 <atan+0x2b0>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	ee10 0a10 	vmov	r0, s0
 800c906:	4629      	mov	r1, r5
 800c908:	f7f3 fce0 	bl	80002cc <__adddf3>
 800c90c:	4baf      	ldr	r3, [pc, #700]	; (800cbcc <atan+0x324>)
 800c90e:	2200      	movs	r2, #0
 800c910:	f7f4 f922 	bl	8000b58 <__aeabi_dcmpgt>
 800c914:	2800      	cmp	r0, #0
 800c916:	d1e6      	bne.n	800c8e6 <atan+0x3e>
 800c918:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c91c:	e02b      	b.n	800c976 <atan+0xce>
 800c91e:	f000 f9b7 	bl	800cc90 <fabs>
 800c922:	4bab      	ldr	r3, [pc, #684]	; (800cbd0 <atan+0x328>)
 800c924:	429e      	cmp	r6, r3
 800c926:	ec55 4b10 	vmov	r4, r5, d0
 800c92a:	f300 80bf 	bgt.w	800caac <atan+0x204>
 800c92e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c932:	429e      	cmp	r6, r3
 800c934:	f300 80a0 	bgt.w	800ca78 <atan+0x1d0>
 800c938:	ee10 2a10 	vmov	r2, s0
 800c93c:	ee10 0a10 	vmov	r0, s0
 800c940:	462b      	mov	r3, r5
 800c942:	4629      	mov	r1, r5
 800c944:	f7f3 fcc2 	bl	80002cc <__adddf3>
 800c948:	4ba0      	ldr	r3, [pc, #640]	; (800cbcc <atan+0x324>)
 800c94a:	2200      	movs	r2, #0
 800c94c:	f7f3 fcbc 	bl	80002c8 <__aeabi_dsub>
 800c950:	2200      	movs	r2, #0
 800c952:	4606      	mov	r6, r0
 800c954:	460f      	mov	r7, r1
 800c956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c95a:	4620      	mov	r0, r4
 800c95c:	4629      	mov	r1, r5
 800c95e:	f7f3 fcb5 	bl	80002cc <__adddf3>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4630      	mov	r0, r6
 800c968:	4639      	mov	r1, r7
 800c96a:	f7f3 ff8f 	bl	800088c <__aeabi_ddiv>
 800c96e:	f04f 0a00 	mov.w	sl, #0
 800c972:	4604      	mov	r4, r0
 800c974:	460d      	mov	r5, r1
 800c976:	4622      	mov	r2, r4
 800c978:	462b      	mov	r3, r5
 800c97a:	4620      	mov	r0, r4
 800c97c:	4629      	mov	r1, r5
 800c97e:	f7f3 fe5b 	bl	8000638 <__aeabi_dmul>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4680      	mov	r8, r0
 800c988:	4689      	mov	r9, r1
 800c98a:	f7f3 fe55 	bl	8000638 <__aeabi_dmul>
 800c98e:	a374      	add	r3, pc, #464	; (adr r3, 800cb60 <atan+0x2b8>)
 800c990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c994:	4606      	mov	r6, r0
 800c996:	460f      	mov	r7, r1
 800c998:	f7f3 fe4e 	bl	8000638 <__aeabi_dmul>
 800c99c:	a372      	add	r3, pc, #456	; (adr r3, 800cb68 <atan+0x2c0>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fc93 	bl	80002cc <__adddf3>
 800c9a6:	4632      	mov	r2, r6
 800c9a8:	463b      	mov	r3, r7
 800c9aa:	f7f3 fe45 	bl	8000638 <__aeabi_dmul>
 800c9ae:	a370      	add	r3, pc, #448	; (adr r3, 800cb70 <atan+0x2c8>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f3 fc8a 	bl	80002cc <__adddf3>
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	463b      	mov	r3, r7
 800c9bc:	f7f3 fe3c 	bl	8000638 <__aeabi_dmul>
 800c9c0:	a36d      	add	r3, pc, #436	; (adr r3, 800cb78 <atan+0x2d0>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fc81 	bl	80002cc <__adddf3>
 800c9ca:	4632      	mov	r2, r6
 800c9cc:	463b      	mov	r3, r7
 800c9ce:	f7f3 fe33 	bl	8000638 <__aeabi_dmul>
 800c9d2:	a36b      	add	r3, pc, #428	; (adr r3, 800cb80 <atan+0x2d8>)
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f7f3 fc78 	bl	80002cc <__adddf3>
 800c9dc:	4632      	mov	r2, r6
 800c9de:	463b      	mov	r3, r7
 800c9e0:	f7f3 fe2a 	bl	8000638 <__aeabi_dmul>
 800c9e4:	a368      	add	r3, pc, #416	; (adr r3, 800cb88 <atan+0x2e0>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fc6f 	bl	80002cc <__adddf3>
 800c9ee:	4642      	mov	r2, r8
 800c9f0:	464b      	mov	r3, r9
 800c9f2:	f7f3 fe21 	bl	8000638 <__aeabi_dmul>
 800c9f6:	a366      	add	r3, pc, #408	; (adr r3, 800cb90 <atan+0x2e8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	4680      	mov	r8, r0
 800c9fe:	4689      	mov	r9, r1
 800ca00:	4630      	mov	r0, r6
 800ca02:	4639      	mov	r1, r7
 800ca04:	f7f3 fe18 	bl	8000638 <__aeabi_dmul>
 800ca08:	a363      	add	r3, pc, #396	; (adr r3, 800cb98 <atan+0x2f0>)
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	f7f3 fc5b 	bl	80002c8 <__aeabi_dsub>
 800ca12:	4632      	mov	r2, r6
 800ca14:	463b      	mov	r3, r7
 800ca16:	f7f3 fe0f 	bl	8000638 <__aeabi_dmul>
 800ca1a:	a361      	add	r3, pc, #388	; (adr r3, 800cba0 <atan+0x2f8>)
 800ca1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca20:	f7f3 fc52 	bl	80002c8 <__aeabi_dsub>
 800ca24:	4632      	mov	r2, r6
 800ca26:	463b      	mov	r3, r7
 800ca28:	f7f3 fe06 	bl	8000638 <__aeabi_dmul>
 800ca2c:	a35e      	add	r3, pc, #376	; (adr r3, 800cba8 <atan+0x300>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	f7f3 fc49 	bl	80002c8 <__aeabi_dsub>
 800ca36:	4632      	mov	r2, r6
 800ca38:	463b      	mov	r3, r7
 800ca3a:	f7f3 fdfd 	bl	8000638 <__aeabi_dmul>
 800ca3e:	a35c      	add	r3, pc, #368	; (adr r3, 800cbb0 <atan+0x308>)
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f7f3 fc40 	bl	80002c8 <__aeabi_dsub>
 800ca48:	4632      	mov	r2, r6
 800ca4a:	463b      	mov	r3, r7
 800ca4c:	f7f3 fdf4 	bl	8000638 <__aeabi_dmul>
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	4640      	mov	r0, r8
 800ca56:	4649      	mov	r1, r9
 800ca58:	f7f3 fc38 	bl	80002cc <__adddf3>
 800ca5c:	4622      	mov	r2, r4
 800ca5e:	462b      	mov	r3, r5
 800ca60:	f7f3 fdea 	bl	8000638 <__aeabi_dmul>
 800ca64:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	d14b      	bne.n	800cb06 <atan+0x25e>
 800ca6e:	4620      	mov	r0, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	f7f3 fc29 	bl	80002c8 <__aeabi_dsub>
 800ca76:	e72c      	b.n	800c8d2 <atan+0x2a>
 800ca78:	ee10 0a10 	vmov	r0, s0
 800ca7c:	4b53      	ldr	r3, [pc, #332]	; (800cbcc <atan+0x324>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7f3 fc21 	bl	80002c8 <__aeabi_dsub>
 800ca86:	4b51      	ldr	r3, [pc, #324]	; (800cbcc <atan+0x324>)
 800ca88:	4606      	mov	r6, r0
 800ca8a:	460f      	mov	r7, r1
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f3 fc1b 	bl	80002cc <__adddf3>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	4639      	mov	r1, r7
 800ca9e:	f7f3 fef5 	bl	800088c <__aeabi_ddiv>
 800caa2:	f04f 0a01 	mov.w	sl, #1
 800caa6:	4604      	mov	r4, r0
 800caa8:	460d      	mov	r5, r1
 800caaa:	e764      	b.n	800c976 <atan+0xce>
 800caac:	4b49      	ldr	r3, [pc, #292]	; (800cbd4 <atan+0x32c>)
 800caae:	429e      	cmp	r6, r3
 800cab0:	da1d      	bge.n	800caee <atan+0x246>
 800cab2:	ee10 0a10 	vmov	r0, s0
 800cab6:	4b48      	ldr	r3, [pc, #288]	; (800cbd8 <atan+0x330>)
 800cab8:	2200      	movs	r2, #0
 800caba:	4629      	mov	r1, r5
 800cabc:	f7f3 fc04 	bl	80002c8 <__aeabi_dsub>
 800cac0:	4b45      	ldr	r3, [pc, #276]	; (800cbd8 <atan+0x330>)
 800cac2:	4606      	mov	r6, r0
 800cac4:	460f      	mov	r7, r1
 800cac6:	2200      	movs	r2, #0
 800cac8:	4620      	mov	r0, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	f7f3 fdb4 	bl	8000638 <__aeabi_dmul>
 800cad0:	4b3e      	ldr	r3, [pc, #248]	; (800cbcc <atan+0x324>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	f7f3 fbfa 	bl	80002cc <__adddf3>
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	4630      	mov	r0, r6
 800cade:	4639      	mov	r1, r7
 800cae0:	f7f3 fed4 	bl	800088c <__aeabi_ddiv>
 800cae4:	f04f 0a02 	mov.w	sl, #2
 800cae8:	4604      	mov	r4, r0
 800caea:	460d      	mov	r5, r1
 800caec:	e743      	b.n	800c976 <atan+0xce>
 800caee:	462b      	mov	r3, r5
 800caf0:	ee10 2a10 	vmov	r2, s0
 800caf4:	4939      	ldr	r1, [pc, #228]	; (800cbdc <atan+0x334>)
 800caf6:	2000      	movs	r0, #0
 800caf8:	f7f3 fec8 	bl	800088c <__aeabi_ddiv>
 800cafc:	f04f 0a03 	mov.w	sl, #3
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	e737      	b.n	800c976 <atan+0xce>
 800cb06:	4b36      	ldr	r3, [pc, #216]	; (800cbe0 <atan+0x338>)
 800cb08:	4e36      	ldr	r6, [pc, #216]	; (800cbe4 <atan+0x33c>)
 800cb0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	f7f3 fbd9 	bl	80002c8 <__aeabi_dsub>
 800cb16:	4622      	mov	r2, r4
 800cb18:	462b      	mov	r3, r5
 800cb1a:	f7f3 fbd5 	bl	80002c8 <__aeabi_dsub>
 800cb1e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb2a:	f7f3 fbcd 	bl	80002c8 <__aeabi_dsub>
 800cb2e:	f1bb 0f00 	cmp.w	fp, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	460d      	mov	r5, r1
 800cb36:	f6bf aed6 	bge.w	800c8e6 <atan+0x3e>
 800cb3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb3e:	461d      	mov	r5, r3
 800cb40:	e6d1      	b.n	800c8e6 <atan+0x3e>
 800cb42:	a51d      	add	r5, pc, #116	; (adr r5, 800cbb8 <atan+0x310>)
 800cb44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb48:	e6cd      	b.n	800c8e6 <atan+0x3e>
 800cb4a:	bf00      	nop
 800cb4c:	f3af 8000 	nop.w
 800cb50:	54442d18 	.word	0x54442d18
 800cb54:	bff921fb 	.word	0xbff921fb
 800cb58:	8800759c 	.word	0x8800759c
 800cb5c:	7e37e43c 	.word	0x7e37e43c
 800cb60:	e322da11 	.word	0xe322da11
 800cb64:	3f90ad3a 	.word	0x3f90ad3a
 800cb68:	24760deb 	.word	0x24760deb
 800cb6c:	3fa97b4b 	.word	0x3fa97b4b
 800cb70:	a0d03d51 	.word	0xa0d03d51
 800cb74:	3fb10d66 	.word	0x3fb10d66
 800cb78:	c54c206e 	.word	0xc54c206e
 800cb7c:	3fb745cd 	.word	0x3fb745cd
 800cb80:	920083ff 	.word	0x920083ff
 800cb84:	3fc24924 	.word	0x3fc24924
 800cb88:	5555550d 	.word	0x5555550d
 800cb8c:	3fd55555 	.word	0x3fd55555
 800cb90:	2c6a6c2f 	.word	0x2c6a6c2f
 800cb94:	bfa2b444 	.word	0xbfa2b444
 800cb98:	52defd9a 	.word	0x52defd9a
 800cb9c:	3fadde2d 	.word	0x3fadde2d
 800cba0:	af749a6d 	.word	0xaf749a6d
 800cba4:	3fb3b0f2 	.word	0x3fb3b0f2
 800cba8:	fe231671 	.word	0xfe231671
 800cbac:	3fbc71c6 	.word	0x3fbc71c6
 800cbb0:	9998ebc4 	.word	0x9998ebc4
 800cbb4:	3fc99999 	.word	0x3fc99999
 800cbb8:	54442d18 	.word	0x54442d18
 800cbbc:	3ff921fb 	.word	0x3ff921fb
 800cbc0:	440fffff 	.word	0x440fffff
 800cbc4:	7ff00000 	.word	0x7ff00000
 800cbc8:	3fdbffff 	.word	0x3fdbffff
 800cbcc:	3ff00000 	.word	0x3ff00000
 800cbd0:	3ff2ffff 	.word	0x3ff2ffff
 800cbd4:	40038000 	.word	0x40038000
 800cbd8:	3ff80000 	.word	0x3ff80000
 800cbdc:	bff00000 	.word	0xbff00000
 800cbe0:	0800f3f0 	.word	0x0800f3f0
 800cbe4:	0800f3d0 	.word	0x0800f3d0

0800cbe8 <cos>:
 800cbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbea:	ec53 2b10 	vmov	r2, r3, d0
 800cbee:	4826      	ldr	r0, [pc, #152]	; (800cc88 <cos+0xa0>)
 800cbf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbf4:	4281      	cmp	r1, r0
 800cbf6:	dc06      	bgt.n	800cc06 <cos+0x1e>
 800cbf8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cc80 <cos+0x98>
 800cbfc:	b005      	add	sp, #20
 800cbfe:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc02:	f000 b991 	b.w	800cf28 <__kernel_cos>
 800cc06:	4821      	ldr	r0, [pc, #132]	; (800cc8c <cos+0xa4>)
 800cc08:	4281      	cmp	r1, r0
 800cc0a:	dd09      	ble.n	800cc20 <cos+0x38>
 800cc0c:	ee10 0a10 	vmov	r0, s0
 800cc10:	4619      	mov	r1, r3
 800cc12:	f7f3 fb59 	bl	80002c8 <__aeabi_dsub>
 800cc16:	ec41 0b10 	vmov	d0, r0, r1
 800cc1a:	b005      	add	sp, #20
 800cc1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc20:	4668      	mov	r0, sp
 800cc22:	f001 fa09 	bl	800e038 <__ieee754_rem_pio2>
 800cc26:	f000 0003 	and.w	r0, r0, #3
 800cc2a:	2801      	cmp	r0, #1
 800cc2c:	d00b      	beq.n	800cc46 <cos+0x5e>
 800cc2e:	2802      	cmp	r0, #2
 800cc30:	d016      	beq.n	800cc60 <cos+0x78>
 800cc32:	b9e0      	cbnz	r0, 800cc6e <cos+0x86>
 800cc34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc38:	ed9d 0b00 	vldr	d0, [sp]
 800cc3c:	f000 f974 	bl	800cf28 <__kernel_cos>
 800cc40:	ec51 0b10 	vmov	r0, r1, d0
 800cc44:	e7e7      	b.n	800cc16 <cos+0x2e>
 800cc46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc4a:	ed9d 0b00 	vldr	d0, [sp]
 800cc4e:	f000 fa33 	bl	800d0b8 <__kernel_sin>
 800cc52:	ec53 2b10 	vmov	r2, r3, d0
 800cc56:	ee10 0a10 	vmov	r0, s0
 800cc5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cc5e:	e7da      	b.n	800cc16 <cos+0x2e>
 800cc60:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc64:	ed9d 0b00 	vldr	d0, [sp]
 800cc68:	f000 f95e 	bl	800cf28 <__kernel_cos>
 800cc6c:	e7f1      	b.n	800cc52 <cos+0x6a>
 800cc6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc72:	ed9d 0b00 	vldr	d0, [sp]
 800cc76:	2001      	movs	r0, #1
 800cc78:	f000 fa1e 	bl	800d0b8 <__kernel_sin>
 800cc7c:	e7e0      	b.n	800cc40 <cos+0x58>
 800cc7e:	bf00      	nop
	...
 800cc88:	3fe921fb 	.word	0x3fe921fb
 800cc8c:	7fefffff 	.word	0x7fefffff

0800cc90 <fabs>:
 800cc90:	ec51 0b10 	vmov	r0, r1, d0
 800cc94:	ee10 2a10 	vmov	r2, s0
 800cc98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc9c:	ec43 2b10 	vmov	d0, r2, r3
 800cca0:	4770      	bx	lr
 800cca2:	0000      	movs	r0, r0
 800cca4:	0000      	movs	r0, r0
	...

0800cca8 <sin>:
 800cca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccaa:	ec53 2b10 	vmov	r2, r3, d0
 800ccae:	4828      	ldr	r0, [pc, #160]	; (800cd50 <sin+0xa8>)
 800ccb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ccb4:	4281      	cmp	r1, r0
 800ccb6:	dc07      	bgt.n	800ccc8 <sin+0x20>
 800ccb8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800cd48 <sin+0xa0>
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	b005      	add	sp, #20
 800ccc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccc4:	f000 b9f8 	b.w	800d0b8 <__kernel_sin>
 800ccc8:	4822      	ldr	r0, [pc, #136]	; (800cd54 <sin+0xac>)
 800ccca:	4281      	cmp	r1, r0
 800cccc:	dd09      	ble.n	800cce2 <sin+0x3a>
 800ccce:	ee10 0a10 	vmov	r0, s0
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	f7f3 faf8 	bl	80002c8 <__aeabi_dsub>
 800ccd8:	ec41 0b10 	vmov	d0, r0, r1
 800ccdc:	b005      	add	sp, #20
 800ccde:	f85d fb04 	ldr.w	pc, [sp], #4
 800cce2:	4668      	mov	r0, sp
 800cce4:	f001 f9a8 	bl	800e038 <__ieee754_rem_pio2>
 800cce8:	f000 0003 	and.w	r0, r0, #3
 800ccec:	2801      	cmp	r0, #1
 800ccee:	d00c      	beq.n	800cd0a <sin+0x62>
 800ccf0:	2802      	cmp	r0, #2
 800ccf2:	d011      	beq.n	800cd18 <sin+0x70>
 800ccf4:	b9f0      	cbnz	r0, 800cd34 <sin+0x8c>
 800ccf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ccfa:	ed9d 0b00 	vldr	d0, [sp]
 800ccfe:	2001      	movs	r0, #1
 800cd00:	f000 f9da 	bl	800d0b8 <__kernel_sin>
 800cd04:	ec51 0b10 	vmov	r0, r1, d0
 800cd08:	e7e6      	b.n	800ccd8 <sin+0x30>
 800cd0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd0e:	ed9d 0b00 	vldr	d0, [sp]
 800cd12:	f000 f909 	bl	800cf28 <__kernel_cos>
 800cd16:	e7f5      	b.n	800cd04 <sin+0x5c>
 800cd18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd1c:	ed9d 0b00 	vldr	d0, [sp]
 800cd20:	2001      	movs	r0, #1
 800cd22:	f000 f9c9 	bl	800d0b8 <__kernel_sin>
 800cd26:	ec53 2b10 	vmov	r2, r3, d0
 800cd2a:	ee10 0a10 	vmov	r0, s0
 800cd2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cd32:	e7d1      	b.n	800ccd8 <sin+0x30>
 800cd34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd38:	ed9d 0b00 	vldr	d0, [sp]
 800cd3c:	f000 f8f4 	bl	800cf28 <__kernel_cos>
 800cd40:	e7f1      	b.n	800cd26 <sin+0x7e>
 800cd42:	bf00      	nop
 800cd44:	f3af 8000 	nop.w
	...
 800cd50:	3fe921fb 	.word	0x3fe921fb
 800cd54:	7fefffff 	.word	0x7fefffff

0800cd58 <finite>:
 800cd58:	b082      	sub	sp, #8
 800cd5a:	ed8d 0b00 	vstr	d0, [sp]
 800cd5e:	9801      	ldr	r0, [sp, #4]
 800cd60:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cd64:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cd68:	0fc0      	lsrs	r0, r0, #31
 800cd6a:	b002      	add	sp, #8
 800cd6c:	4770      	bx	lr
	...

0800cd70 <__ieee754_sqrt>:
 800cd70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd74:	ec55 4b10 	vmov	r4, r5, d0
 800cd78:	4e67      	ldr	r6, [pc, #412]	; (800cf18 <__ieee754_sqrt+0x1a8>)
 800cd7a:	43ae      	bics	r6, r5
 800cd7c:	ee10 0a10 	vmov	r0, s0
 800cd80:	ee10 2a10 	vmov	r2, s0
 800cd84:	4629      	mov	r1, r5
 800cd86:	462b      	mov	r3, r5
 800cd88:	d10d      	bne.n	800cda6 <__ieee754_sqrt+0x36>
 800cd8a:	f7f3 fc55 	bl	8000638 <__aeabi_dmul>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	4620      	mov	r0, r4
 800cd94:	4629      	mov	r1, r5
 800cd96:	f7f3 fa99 	bl	80002cc <__adddf3>
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	460d      	mov	r5, r1
 800cd9e:	ec45 4b10 	vmov	d0, r4, r5
 800cda2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda6:	2d00      	cmp	r5, #0
 800cda8:	dc0b      	bgt.n	800cdc2 <__ieee754_sqrt+0x52>
 800cdaa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cdae:	4326      	orrs	r6, r4
 800cdb0:	d0f5      	beq.n	800cd9e <__ieee754_sqrt+0x2e>
 800cdb2:	b135      	cbz	r5, 800cdc2 <__ieee754_sqrt+0x52>
 800cdb4:	f7f3 fa88 	bl	80002c8 <__aeabi_dsub>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	f7f3 fd66 	bl	800088c <__aeabi_ddiv>
 800cdc0:	e7eb      	b.n	800cd9a <__ieee754_sqrt+0x2a>
 800cdc2:	1509      	asrs	r1, r1, #20
 800cdc4:	f000 808d 	beq.w	800cee2 <__ieee754_sqrt+0x172>
 800cdc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdcc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cdd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdd4:	07c9      	lsls	r1, r1, #31
 800cdd6:	bf5c      	itt	pl
 800cdd8:	005b      	lslpl	r3, r3, #1
 800cdda:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cdde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cde2:	bf58      	it	pl
 800cde4:	0052      	lslpl	r2, r2, #1
 800cde6:	2500      	movs	r5, #0
 800cde8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cdec:	1076      	asrs	r6, r6, #1
 800cdee:	0052      	lsls	r2, r2, #1
 800cdf0:	f04f 0e16 	mov.w	lr, #22
 800cdf4:	46ac      	mov	ip, r5
 800cdf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdfa:	eb0c 0001 	add.w	r0, ip, r1
 800cdfe:	4298      	cmp	r0, r3
 800ce00:	bfde      	ittt	le
 800ce02:	1a1b      	suble	r3, r3, r0
 800ce04:	eb00 0c01 	addle.w	ip, r0, r1
 800ce08:	186d      	addle	r5, r5, r1
 800ce0a:	005b      	lsls	r3, r3, #1
 800ce0c:	f1be 0e01 	subs.w	lr, lr, #1
 800ce10:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ce14:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ce18:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ce1c:	d1ed      	bne.n	800cdfa <__ieee754_sqrt+0x8a>
 800ce1e:	4674      	mov	r4, lr
 800ce20:	2720      	movs	r7, #32
 800ce22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ce26:	4563      	cmp	r3, ip
 800ce28:	eb01 000e 	add.w	r0, r1, lr
 800ce2c:	dc02      	bgt.n	800ce34 <__ieee754_sqrt+0xc4>
 800ce2e:	d113      	bne.n	800ce58 <__ieee754_sqrt+0xe8>
 800ce30:	4290      	cmp	r0, r2
 800ce32:	d811      	bhi.n	800ce58 <__ieee754_sqrt+0xe8>
 800ce34:	2800      	cmp	r0, #0
 800ce36:	eb00 0e01 	add.w	lr, r0, r1
 800ce3a:	da57      	bge.n	800ceec <__ieee754_sqrt+0x17c>
 800ce3c:	f1be 0f00 	cmp.w	lr, #0
 800ce40:	db54      	blt.n	800ceec <__ieee754_sqrt+0x17c>
 800ce42:	f10c 0801 	add.w	r8, ip, #1
 800ce46:	eba3 030c 	sub.w	r3, r3, ip
 800ce4a:	4290      	cmp	r0, r2
 800ce4c:	bf88      	it	hi
 800ce4e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800ce52:	1a12      	subs	r2, r2, r0
 800ce54:	440c      	add	r4, r1
 800ce56:	46c4      	mov	ip, r8
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	3f01      	subs	r7, #1
 800ce5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ce60:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ce64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ce68:	d1dd      	bne.n	800ce26 <__ieee754_sqrt+0xb6>
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	d01b      	beq.n	800cea6 <__ieee754_sqrt+0x136>
 800ce6e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800cf1c <__ieee754_sqrt+0x1ac>
 800ce72:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cf20 <__ieee754_sqrt+0x1b0>
 800ce76:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce7a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce7e:	f7f3 fa23 	bl	80002c8 <__aeabi_dsub>
 800ce82:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	4649      	mov	r1, r9
 800ce8e:	f7f3 fe4f 	bl	8000b30 <__aeabi_dcmple>
 800ce92:	b140      	cbz	r0, 800cea6 <__ieee754_sqrt+0x136>
 800ce94:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800ce98:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce9c:	e9db 2300 	ldrd	r2, r3, [fp]
 800cea0:	d126      	bne.n	800cef0 <__ieee754_sqrt+0x180>
 800cea2:	3501      	adds	r5, #1
 800cea4:	463c      	mov	r4, r7
 800cea6:	106a      	asrs	r2, r5, #1
 800cea8:	0863      	lsrs	r3, r4, #1
 800ceaa:	07e9      	lsls	r1, r5, #31
 800ceac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ceb0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ceb4:	bf48      	it	mi
 800ceb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ceba:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800cebe:	461c      	mov	r4, r3
 800cec0:	e76d      	b.n	800cd9e <__ieee754_sqrt+0x2e>
 800cec2:	0ad3      	lsrs	r3, r2, #11
 800cec4:	3815      	subs	r0, #21
 800cec6:	0552      	lsls	r2, r2, #21
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d0fa      	beq.n	800cec2 <__ieee754_sqrt+0x152>
 800cecc:	02dc      	lsls	r4, r3, #11
 800cece:	d50a      	bpl.n	800cee6 <__ieee754_sqrt+0x176>
 800ced0:	f1c1 0420 	rsb	r4, r1, #32
 800ced4:	fa22 f404 	lsr.w	r4, r2, r4
 800ced8:	1e4d      	subs	r5, r1, #1
 800ceda:	408a      	lsls	r2, r1
 800cedc:	4323      	orrs	r3, r4
 800cede:	1b41      	subs	r1, r0, r5
 800cee0:	e772      	b.n	800cdc8 <__ieee754_sqrt+0x58>
 800cee2:	4608      	mov	r0, r1
 800cee4:	e7f0      	b.n	800cec8 <__ieee754_sqrt+0x158>
 800cee6:	005b      	lsls	r3, r3, #1
 800cee8:	3101      	adds	r1, #1
 800ceea:	e7ef      	b.n	800cecc <__ieee754_sqrt+0x15c>
 800ceec:	46e0      	mov	r8, ip
 800ceee:	e7aa      	b.n	800ce46 <__ieee754_sqrt+0xd6>
 800cef0:	f7f3 f9ec 	bl	80002cc <__adddf3>
 800cef4:	e9da 8900 	ldrd	r8, r9, [sl]
 800cef8:	4602      	mov	r2, r0
 800cefa:	460b      	mov	r3, r1
 800cefc:	4640      	mov	r0, r8
 800cefe:	4649      	mov	r1, r9
 800cf00:	f7f3 fe0c 	bl	8000b1c <__aeabi_dcmplt>
 800cf04:	b120      	cbz	r0, 800cf10 <__ieee754_sqrt+0x1a0>
 800cf06:	1ca0      	adds	r0, r4, #2
 800cf08:	bf08      	it	eq
 800cf0a:	3501      	addeq	r5, #1
 800cf0c:	3402      	adds	r4, #2
 800cf0e:	e7ca      	b.n	800cea6 <__ieee754_sqrt+0x136>
 800cf10:	3401      	adds	r4, #1
 800cf12:	f024 0401 	bic.w	r4, r4, #1
 800cf16:	e7c6      	b.n	800cea6 <__ieee754_sqrt+0x136>
 800cf18:	7ff00000 	.word	0x7ff00000
 800cf1c:	200001d8 	.word	0x200001d8
 800cf20:	200001e0 	.word	0x200001e0
 800cf24:	00000000 	.word	0x00000000

0800cf28 <__kernel_cos>:
 800cf28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	ec57 6b10 	vmov	r6, r7, d0
 800cf30:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cf34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800cf38:	ed8d 1b00 	vstr	d1, [sp]
 800cf3c:	da07      	bge.n	800cf4e <__kernel_cos+0x26>
 800cf3e:	ee10 0a10 	vmov	r0, s0
 800cf42:	4639      	mov	r1, r7
 800cf44:	f7f3 fe28 	bl	8000b98 <__aeabi_d2iz>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	f000 8088 	beq.w	800d05e <__kernel_cos+0x136>
 800cf4e:	4632      	mov	r2, r6
 800cf50:	463b      	mov	r3, r7
 800cf52:	4630      	mov	r0, r6
 800cf54:	4639      	mov	r1, r7
 800cf56:	f7f3 fb6f 	bl	8000638 <__aeabi_dmul>
 800cf5a:	4b51      	ldr	r3, [pc, #324]	; (800d0a0 <__kernel_cos+0x178>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	4604      	mov	r4, r0
 800cf60:	460d      	mov	r5, r1
 800cf62:	f7f3 fb69 	bl	8000638 <__aeabi_dmul>
 800cf66:	a340      	add	r3, pc, #256	; (adr r3, 800d068 <__kernel_cos+0x140>)
 800cf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6c:	4682      	mov	sl, r0
 800cf6e:	468b      	mov	fp, r1
 800cf70:	4620      	mov	r0, r4
 800cf72:	4629      	mov	r1, r5
 800cf74:	f7f3 fb60 	bl	8000638 <__aeabi_dmul>
 800cf78:	a33d      	add	r3, pc, #244	; (adr r3, 800d070 <__kernel_cos+0x148>)
 800cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7e:	f7f3 f9a5 	bl	80002cc <__adddf3>
 800cf82:	4622      	mov	r2, r4
 800cf84:	462b      	mov	r3, r5
 800cf86:	f7f3 fb57 	bl	8000638 <__aeabi_dmul>
 800cf8a:	a33b      	add	r3, pc, #236	; (adr r3, 800d078 <__kernel_cos+0x150>)
 800cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf90:	f7f3 f99a 	bl	80002c8 <__aeabi_dsub>
 800cf94:	4622      	mov	r2, r4
 800cf96:	462b      	mov	r3, r5
 800cf98:	f7f3 fb4e 	bl	8000638 <__aeabi_dmul>
 800cf9c:	a338      	add	r3, pc, #224	; (adr r3, 800d080 <__kernel_cos+0x158>)
 800cf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa2:	f7f3 f993 	bl	80002cc <__adddf3>
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	462b      	mov	r3, r5
 800cfaa:	f7f3 fb45 	bl	8000638 <__aeabi_dmul>
 800cfae:	a336      	add	r3, pc, #216	; (adr r3, 800d088 <__kernel_cos+0x160>)
 800cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb4:	f7f3 f988 	bl	80002c8 <__aeabi_dsub>
 800cfb8:	4622      	mov	r2, r4
 800cfba:	462b      	mov	r3, r5
 800cfbc:	f7f3 fb3c 	bl	8000638 <__aeabi_dmul>
 800cfc0:	a333      	add	r3, pc, #204	; (adr r3, 800d090 <__kernel_cos+0x168>)
 800cfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc6:	f7f3 f981 	bl	80002cc <__adddf3>
 800cfca:	4622      	mov	r2, r4
 800cfcc:	462b      	mov	r3, r5
 800cfce:	f7f3 fb33 	bl	8000638 <__aeabi_dmul>
 800cfd2:	4622      	mov	r2, r4
 800cfd4:	462b      	mov	r3, r5
 800cfd6:	f7f3 fb2f 	bl	8000638 <__aeabi_dmul>
 800cfda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfde:	4604      	mov	r4, r0
 800cfe0:	460d      	mov	r5, r1
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	f7f3 fb27 	bl	8000638 <__aeabi_dmul>
 800cfea:	460b      	mov	r3, r1
 800cfec:	4602      	mov	r2, r0
 800cfee:	4629      	mov	r1, r5
 800cff0:	4620      	mov	r0, r4
 800cff2:	f7f3 f969 	bl	80002c8 <__aeabi_dsub>
 800cff6:	4b2b      	ldr	r3, [pc, #172]	; (800d0a4 <__kernel_cos+0x17c>)
 800cff8:	4598      	cmp	r8, r3
 800cffa:	4606      	mov	r6, r0
 800cffc:	460f      	mov	r7, r1
 800cffe:	dc10      	bgt.n	800d022 <__kernel_cos+0xfa>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	4650      	mov	r0, sl
 800d006:	4659      	mov	r1, fp
 800d008:	f7f3 f95e 	bl	80002c8 <__aeabi_dsub>
 800d00c:	460b      	mov	r3, r1
 800d00e:	4926      	ldr	r1, [pc, #152]	; (800d0a8 <__kernel_cos+0x180>)
 800d010:	4602      	mov	r2, r0
 800d012:	2000      	movs	r0, #0
 800d014:	f7f3 f958 	bl	80002c8 <__aeabi_dsub>
 800d018:	ec41 0b10 	vmov	d0, r0, r1
 800d01c:	b003      	add	sp, #12
 800d01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d022:	4b22      	ldr	r3, [pc, #136]	; (800d0ac <__kernel_cos+0x184>)
 800d024:	4920      	ldr	r1, [pc, #128]	; (800d0a8 <__kernel_cos+0x180>)
 800d026:	4598      	cmp	r8, r3
 800d028:	bfcc      	ite	gt
 800d02a:	4d21      	ldrgt	r5, [pc, #132]	; (800d0b0 <__kernel_cos+0x188>)
 800d02c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d030:	2400      	movs	r4, #0
 800d032:	4622      	mov	r2, r4
 800d034:	462b      	mov	r3, r5
 800d036:	2000      	movs	r0, #0
 800d038:	f7f3 f946 	bl	80002c8 <__aeabi_dsub>
 800d03c:	4622      	mov	r2, r4
 800d03e:	4680      	mov	r8, r0
 800d040:	4689      	mov	r9, r1
 800d042:	462b      	mov	r3, r5
 800d044:	4650      	mov	r0, sl
 800d046:	4659      	mov	r1, fp
 800d048:	f7f3 f93e 	bl	80002c8 <__aeabi_dsub>
 800d04c:	4632      	mov	r2, r6
 800d04e:	463b      	mov	r3, r7
 800d050:	f7f3 f93a 	bl	80002c8 <__aeabi_dsub>
 800d054:	4602      	mov	r2, r0
 800d056:	460b      	mov	r3, r1
 800d058:	4640      	mov	r0, r8
 800d05a:	4649      	mov	r1, r9
 800d05c:	e7da      	b.n	800d014 <__kernel_cos+0xec>
 800d05e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d098 <__kernel_cos+0x170>
 800d062:	e7db      	b.n	800d01c <__kernel_cos+0xf4>
 800d064:	f3af 8000 	nop.w
 800d068:	be8838d4 	.word	0xbe8838d4
 800d06c:	bda8fae9 	.word	0xbda8fae9
 800d070:	bdb4b1c4 	.word	0xbdb4b1c4
 800d074:	3e21ee9e 	.word	0x3e21ee9e
 800d078:	809c52ad 	.word	0x809c52ad
 800d07c:	3e927e4f 	.word	0x3e927e4f
 800d080:	19cb1590 	.word	0x19cb1590
 800d084:	3efa01a0 	.word	0x3efa01a0
 800d088:	16c15177 	.word	0x16c15177
 800d08c:	3f56c16c 	.word	0x3f56c16c
 800d090:	5555554c 	.word	0x5555554c
 800d094:	3fa55555 	.word	0x3fa55555
 800d098:	00000000 	.word	0x00000000
 800d09c:	3ff00000 	.word	0x3ff00000
 800d0a0:	3fe00000 	.word	0x3fe00000
 800d0a4:	3fd33332 	.word	0x3fd33332
 800d0a8:	3ff00000 	.word	0x3ff00000
 800d0ac:	3fe90000 	.word	0x3fe90000
 800d0b0:	3fd20000 	.word	0x3fd20000
 800d0b4:	00000000 	.word	0x00000000

0800d0b8 <__kernel_sin>:
 800d0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0bc:	ed2d 8b04 	vpush	{d8-d9}
 800d0c0:	eeb0 8a41 	vmov.f32	s16, s2
 800d0c4:	eef0 8a61 	vmov.f32	s17, s3
 800d0c8:	ec55 4b10 	vmov	r4, r5, d0
 800d0cc:	b083      	sub	sp, #12
 800d0ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d0d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d0d6:	9001      	str	r0, [sp, #4]
 800d0d8:	da06      	bge.n	800d0e8 <__kernel_sin+0x30>
 800d0da:	ee10 0a10 	vmov	r0, s0
 800d0de:	4629      	mov	r1, r5
 800d0e0:	f7f3 fd5a 	bl	8000b98 <__aeabi_d2iz>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d051      	beq.n	800d18c <__kernel_sin+0xd4>
 800d0e8:	4622      	mov	r2, r4
 800d0ea:	462b      	mov	r3, r5
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	4629      	mov	r1, r5
 800d0f0:	f7f3 faa2 	bl	8000638 <__aeabi_dmul>
 800d0f4:	4682      	mov	sl, r0
 800d0f6:	468b      	mov	fp, r1
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	4629      	mov	r1, r5
 800d100:	f7f3 fa9a 	bl	8000638 <__aeabi_dmul>
 800d104:	a341      	add	r3, pc, #260	; (adr r3, 800d20c <__kernel_sin+0x154>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	4680      	mov	r8, r0
 800d10c:	4689      	mov	r9, r1
 800d10e:	4650      	mov	r0, sl
 800d110:	4659      	mov	r1, fp
 800d112:	f7f3 fa91 	bl	8000638 <__aeabi_dmul>
 800d116:	a33f      	add	r3, pc, #252	; (adr r3, 800d214 <__kernel_sin+0x15c>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	f7f3 f8d4 	bl	80002c8 <__aeabi_dsub>
 800d120:	4652      	mov	r2, sl
 800d122:	465b      	mov	r3, fp
 800d124:	f7f3 fa88 	bl	8000638 <__aeabi_dmul>
 800d128:	a33c      	add	r3, pc, #240	; (adr r3, 800d21c <__kernel_sin+0x164>)
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	f7f3 f8cd 	bl	80002cc <__adddf3>
 800d132:	4652      	mov	r2, sl
 800d134:	465b      	mov	r3, fp
 800d136:	f7f3 fa7f 	bl	8000638 <__aeabi_dmul>
 800d13a:	a33a      	add	r3, pc, #232	; (adr r3, 800d224 <__kernel_sin+0x16c>)
 800d13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d140:	f7f3 f8c2 	bl	80002c8 <__aeabi_dsub>
 800d144:	4652      	mov	r2, sl
 800d146:	465b      	mov	r3, fp
 800d148:	f7f3 fa76 	bl	8000638 <__aeabi_dmul>
 800d14c:	a337      	add	r3, pc, #220	; (adr r3, 800d22c <__kernel_sin+0x174>)
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	f7f3 f8bb 	bl	80002cc <__adddf3>
 800d156:	9b01      	ldr	r3, [sp, #4]
 800d158:	4606      	mov	r6, r0
 800d15a:	460f      	mov	r7, r1
 800d15c:	b9eb      	cbnz	r3, 800d19a <__kernel_sin+0xe2>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	4650      	mov	r0, sl
 800d164:	4659      	mov	r1, fp
 800d166:	f7f3 fa67 	bl	8000638 <__aeabi_dmul>
 800d16a:	a325      	add	r3, pc, #148	; (adr r3, 800d200 <__kernel_sin+0x148>)
 800d16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d170:	f7f3 f8aa 	bl	80002c8 <__aeabi_dsub>
 800d174:	4642      	mov	r2, r8
 800d176:	464b      	mov	r3, r9
 800d178:	f7f3 fa5e 	bl	8000638 <__aeabi_dmul>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4620      	mov	r0, r4
 800d182:	4629      	mov	r1, r5
 800d184:	f7f3 f8a2 	bl	80002cc <__adddf3>
 800d188:	4604      	mov	r4, r0
 800d18a:	460d      	mov	r5, r1
 800d18c:	ec45 4b10 	vmov	d0, r4, r5
 800d190:	b003      	add	sp, #12
 800d192:	ecbd 8b04 	vpop	{d8-d9}
 800d196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19a:	4b1b      	ldr	r3, [pc, #108]	; (800d208 <__kernel_sin+0x150>)
 800d19c:	ec51 0b18 	vmov	r0, r1, d8
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f7f3 fa49 	bl	8000638 <__aeabi_dmul>
 800d1a6:	4632      	mov	r2, r6
 800d1a8:	ec41 0b19 	vmov	d9, r0, r1
 800d1ac:	463b      	mov	r3, r7
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	f7f3 fa41 	bl	8000638 <__aeabi_dmul>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	ec51 0b19 	vmov	r0, r1, d9
 800d1be:	f7f3 f883 	bl	80002c8 <__aeabi_dsub>
 800d1c2:	4652      	mov	r2, sl
 800d1c4:	465b      	mov	r3, fp
 800d1c6:	f7f3 fa37 	bl	8000638 <__aeabi_dmul>
 800d1ca:	ec53 2b18 	vmov	r2, r3, d8
 800d1ce:	f7f3 f87b 	bl	80002c8 <__aeabi_dsub>
 800d1d2:	a30b      	add	r3, pc, #44	; (adr r3, 800d200 <__kernel_sin+0x148>)
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	4606      	mov	r6, r0
 800d1da:	460f      	mov	r7, r1
 800d1dc:	4640      	mov	r0, r8
 800d1de:	4649      	mov	r1, r9
 800d1e0:	f7f3 fa2a 	bl	8000638 <__aeabi_dmul>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	4639      	mov	r1, r7
 800d1ec:	f7f3 f86e 	bl	80002cc <__adddf3>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	f7f3 f866 	bl	80002c8 <__aeabi_dsub>
 800d1fc:	e7c4      	b.n	800d188 <__kernel_sin+0xd0>
 800d1fe:	bf00      	nop
 800d200:	55555549 	.word	0x55555549
 800d204:	3fc55555 	.word	0x3fc55555
 800d208:	3fe00000 	.word	0x3fe00000
 800d20c:	5acfd57c 	.word	0x5acfd57c
 800d210:	3de5d93a 	.word	0x3de5d93a
 800d214:	8a2b9ceb 	.word	0x8a2b9ceb
 800d218:	3e5ae5e6 	.word	0x3e5ae5e6
 800d21c:	57b1fe7d 	.word	0x57b1fe7d
 800d220:	3ec71de3 	.word	0x3ec71de3
 800d224:	19c161d5 	.word	0x19c161d5
 800d228:	3f2a01a0 	.word	0x3f2a01a0
 800d22c:	1110f8a6 	.word	0x1110f8a6
 800d230:	3f811111 	.word	0x3f811111
 800d234:	00000000 	.word	0x00000000

0800d238 <__ieee754_atan2>:
 800d238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d23c:	ec57 6b11 	vmov	r6, r7, d1
 800d240:	4273      	negs	r3, r6
 800d242:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800d3c0 <__ieee754_atan2+0x188>
 800d246:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d24a:	4333      	orrs	r3, r6
 800d24c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d250:	4543      	cmp	r3, r8
 800d252:	ec51 0b10 	vmov	r0, r1, d0
 800d256:	ee11 5a10 	vmov	r5, s2
 800d25a:	d80a      	bhi.n	800d272 <__ieee754_atan2+0x3a>
 800d25c:	4244      	negs	r4, r0
 800d25e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d262:	4304      	orrs	r4, r0
 800d264:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d268:	4544      	cmp	r4, r8
 800d26a:	ee10 9a10 	vmov	r9, s0
 800d26e:	468e      	mov	lr, r1
 800d270:	d907      	bls.n	800d282 <__ieee754_atan2+0x4a>
 800d272:	4632      	mov	r2, r6
 800d274:	463b      	mov	r3, r7
 800d276:	f7f3 f829 	bl	80002cc <__adddf3>
 800d27a:	ec41 0b10 	vmov	d0, r0, r1
 800d27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d282:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d286:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d28a:	4334      	orrs	r4, r6
 800d28c:	d103      	bne.n	800d296 <__ieee754_atan2+0x5e>
 800d28e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d292:	f7ff bb09 	b.w	800c8a8 <atan>
 800d296:	17bc      	asrs	r4, r7, #30
 800d298:	f004 0402 	and.w	r4, r4, #2
 800d29c:	ea53 0909 	orrs.w	r9, r3, r9
 800d2a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d2a4:	d107      	bne.n	800d2b6 <__ieee754_atan2+0x7e>
 800d2a6:	2c02      	cmp	r4, #2
 800d2a8:	d05f      	beq.n	800d36a <__ieee754_atan2+0x132>
 800d2aa:	2c03      	cmp	r4, #3
 800d2ac:	d1e5      	bne.n	800d27a <__ieee754_atan2+0x42>
 800d2ae:	a140      	add	r1, pc, #256	; (adr r1, 800d3b0 <__ieee754_atan2+0x178>)
 800d2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2b4:	e7e1      	b.n	800d27a <__ieee754_atan2+0x42>
 800d2b6:	4315      	orrs	r5, r2
 800d2b8:	d106      	bne.n	800d2c8 <__ieee754_atan2+0x90>
 800d2ba:	f1be 0f00 	cmp.w	lr, #0
 800d2be:	da5f      	bge.n	800d380 <__ieee754_atan2+0x148>
 800d2c0:	a13d      	add	r1, pc, #244	; (adr r1, 800d3b8 <__ieee754_atan2+0x180>)
 800d2c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2c6:	e7d8      	b.n	800d27a <__ieee754_atan2+0x42>
 800d2c8:	4542      	cmp	r2, r8
 800d2ca:	d10f      	bne.n	800d2ec <__ieee754_atan2+0xb4>
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d2d2:	d107      	bne.n	800d2e4 <__ieee754_atan2+0xac>
 800d2d4:	2c02      	cmp	r4, #2
 800d2d6:	d84c      	bhi.n	800d372 <__ieee754_atan2+0x13a>
 800d2d8:	4b33      	ldr	r3, [pc, #204]	; (800d3a8 <__ieee754_atan2+0x170>)
 800d2da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2e2:	e7ca      	b.n	800d27a <__ieee754_atan2+0x42>
 800d2e4:	2c02      	cmp	r4, #2
 800d2e6:	d848      	bhi.n	800d37a <__ieee754_atan2+0x142>
 800d2e8:	4b30      	ldr	r3, [pc, #192]	; (800d3ac <__ieee754_atan2+0x174>)
 800d2ea:	e7f6      	b.n	800d2da <__ieee754_atan2+0xa2>
 800d2ec:	4543      	cmp	r3, r8
 800d2ee:	d0e4      	beq.n	800d2ba <__ieee754_atan2+0x82>
 800d2f0:	1a9b      	subs	r3, r3, r2
 800d2f2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d2f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2fa:	da1e      	bge.n	800d33a <__ieee754_atan2+0x102>
 800d2fc:	2f00      	cmp	r7, #0
 800d2fe:	da01      	bge.n	800d304 <__ieee754_atan2+0xcc>
 800d300:	323c      	adds	r2, #60	; 0x3c
 800d302:	db1e      	blt.n	800d342 <__ieee754_atan2+0x10a>
 800d304:	4632      	mov	r2, r6
 800d306:	463b      	mov	r3, r7
 800d308:	f7f3 fac0 	bl	800088c <__aeabi_ddiv>
 800d30c:	ec41 0b10 	vmov	d0, r0, r1
 800d310:	f7ff fcbe 	bl	800cc90 <fabs>
 800d314:	f7ff fac8 	bl	800c8a8 <atan>
 800d318:	ec51 0b10 	vmov	r0, r1, d0
 800d31c:	2c01      	cmp	r4, #1
 800d31e:	d013      	beq.n	800d348 <__ieee754_atan2+0x110>
 800d320:	2c02      	cmp	r4, #2
 800d322:	d015      	beq.n	800d350 <__ieee754_atan2+0x118>
 800d324:	2c00      	cmp	r4, #0
 800d326:	d0a8      	beq.n	800d27a <__ieee754_atan2+0x42>
 800d328:	a317      	add	r3, pc, #92	; (adr r3, 800d388 <__ieee754_atan2+0x150>)
 800d32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32e:	f7f2 ffcb 	bl	80002c8 <__aeabi_dsub>
 800d332:	a317      	add	r3, pc, #92	; (adr r3, 800d390 <__ieee754_atan2+0x158>)
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	e014      	b.n	800d364 <__ieee754_atan2+0x12c>
 800d33a:	a117      	add	r1, pc, #92	; (adr r1, 800d398 <__ieee754_atan2+0x160>)
 800d33c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d340:	e7ec      	b.n	800d31c <__ieee754_atan2+0xe4>
 800d342:	2000      	movs	r0, #0
 800d344:	2100      	movs	r1, #0
 800d346:	e7e9      	b.n	800d31c <__ieee754_atan2+0xe4>
 800d348:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d34c:	4619      	mov	r1, r3
 800d34e:	e794      	b.n	800d27a <__ieee754_atan2+0x42>
 800d350:	a30d      	add	r3, pc, #52	; (adr r3, 800d388 <__ieee754_atan2+0x150>)
 800d352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d356:	f7f2 ffb7 	bl	80002c8 <__aeabi_dsub>
 800d35a:	4602      	mov	r2, r0
 800d35c:	460b      	mov	r3, r1
 800d35e:	a10c      	add	r1, pc, #48	; (adr r1, 800d390 <__ieee754_atan2+0x158>)
 800d360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d364:	f7f2 ffb0 	bl	80002c8 <__aeabi_dsub>
 800d368:	e787      	b.n	800d27a <__ieee754_atan2+0x42>
 800d36a:	a109      	add	r1, pc, #36	; (adr r1, 800d390 <__ieee754_atan2+0x158>)
 800d36c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d370:	e783      	b.n	800d27a <__ieee754_atan2+0x42>
 800d372:	a10b      	add	r1, pc, #44	; (adr r1, 800d3a0 <__ieee754_atan2+0x168>)
 800d374:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d378:	e77f      	b.n	800d27a <__ieee754_atan2+0x42>
 800d37a:	2000      	movs	r0, #0
 800d37c:	2100      	movs	r1, #0
 800d37e:	e77c      	b.n	800d27a <__ieee754_atan2+0x42>
 800d380:	a105      	add	r1, pc, #20	; (adr r1, 800d398 <__ieee754_atan2+0x160>)
 800d382:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d386:	e778      	b.n	800d27a <__ieee754_atan2+0x42>
 800d388:	33145c07 	.word	0x33145c07
 800d38c:	3ca1a626 	.word	0x3ca1a626
 800d390:	54442d18 	.word	0x54442d18
 800d394:	400921fb 	.word	0x400921fb
 800d398:	54442d18 	.word	0x54442d18
 800d39c:	3ff921fb 	.word	0x3ff921fb
 800d3a0:	54442d18 	.word	0x54442d18
 800d3a4:	3fe921fb 	.word	0x3fe921fb
 800d3a8:	0800f410 	.word	0x0800f410
 800d3ac:	0800f428 	.word	0x0800f428
 800d3b0:	54442d18 	.word	0x54442d18
 800d3b4:	c00921fb 	.word	0xc00921fb
 800d3b8:	54442d18 	.word	0x54442d18
 800d3bc:	bff921fb 	.word	0xbff921fb
 800d3c0:	7ff00000 	.word	0x7ff00000

0800d3c4 <__ieee754_fmod>:
 800d3c4:	ec53 2b11 	vmov	r2, r3, d1
 800d3c8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800d3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d0:	ea5c 0402 	orrs.w	r4, ip, r2
 800d3d4:	ec51 0b10 	vmov	r0, r1, d0
 800d3d8:	ee11 7a10 	vmov	r7, s2
 800d3dc:	ee11 ea10 	vmov	lr, s2
 800d3e0:	461e      	mov	r6, r3
 800d3e2:	d00c      	beq.n	800d3fe <__ieee754_fmod+0x3a>
 800d3e4:	4c78      	ldr	r4, [pc, #480]	; (800d5c8 <__ieee754_fmod+0x204>)
 800d3e6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d3ea:	45a0      	cmp	r8, r4
 800d3ec:	4689      	mov	r9, r1
 800d3ee:	dc06      	bgt.n	800d3fe <__ieee754_fmod+0x3a>
 800d3f0:	4254      	negs	r4, r2
 800d3f2:	4d76      	ldr	r5, [pc, #472]	; (800d5cc <__ieee754_fmod+0x208>)
 800d3f4:	4314      	orrs	r4, r2
 800d3f6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800d3fa:	42ac      	cmp	r4, r5
 800d3fc:	d909      	bls.n	800d412 <__ieee754_fmod+0x4e>
 800d3fe:	f7f3 f91b 	bl	8000638 <__aeabi_dmul>
 800d402:	4602      	mov	r2, r0
 800d404:	460b      	mov	r3, r1
 800d406:	f7f3 fa41 	bl	800088c <__aeabi_ddiv>
 800d40a:	ec41 0b10 	vmov	d0, r0, r1
 800d40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d412:	45e0      	cmp	r8, ip
 800d414:	ee10 aa10 	vmov	sl, s0
 800d418:	ee10 4a10 	vmov	r4, s0
 800d41c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d420:	dc09      	bgt.n	800d436 <__ieee754_fmod+0x72>
 800d422:	dbf2      	blt.n	800d40a <__ieee754_fmod+0x46>
 800d424:	4290      	cmp	r0, r2
 800d426:	d3f0      	bcc.n	800d40a <__ieee754_fmod+0x46>
 800d428:	d105      	bne.n	800d436 <__ieee754_fmod+0x72>
 800d42a:	4b69      	ldr	r3, [pc, #420]	; (800d5d0 <__ieee754_fmod+0x20c>)
 800d42c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800d430:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d434:	e7e9      	b.n	800d40a <__ieee754_fmod+0x46>
 800d436:	4a65      	ldr	r2, [pc, #404]	; (800d5cc <__ieee754_fmod+0x208>)
 800d438:	ea19 0f02 	tst.w	r9, r2
 800d43c:	d148      	bne.n	800d4d0 <__ieee754_fmod+0x10c>
 800d43e:	f1b8 0f00 	cmp.w	r8, #0
 800d442:	d13d      	bne.n	800d4c0 <__ieee754_fmod+0xfc>
 800d444:	4963      	ldr	r1, [pc, #396]	; (800d5d4 <__ieee754_fmod+0x210>)
 800d446:	4653      	mov	r3, sl
 800d448:	2b00      	cmp	r3, #0
 800d44a:	dc36      	bgt.n	800d4ba <__ieee754_fmod+0xf6>
 800d44c:	4216      	tst	r6, r2
 800d44e:	d14f      	bne.n	800d4f0 <__ieee754_fmod+0x12c>
 800d450:	f1bc 0f00 	cmp.w	ip, #0
 800d454:	d144      	bne.n	800d4e0 <__ieee754_fmod+0x11c>
 800d456:	4a5f      	ldr	r2, [pc, #380]	; (800d5d4 <__ieee754_fmod+0x210>)
 800d458:	463b      	mov	r3, r7
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	dc3d      	bgt.n	800d4da <__ieee754_fmod+0x116>
 800d45e:	485e      	ldr	r0, [pc, #376]	; (800d5d8 <__ieee754_fmod+0x214>)
 800d460:	4281      	cmp	r1, r0
 800d462:	db4a      	blt.n	800d4fa <__ieee754_fmod+0x136>
 800d464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d46c:	485a      	ldr	r0, [pc, #360]	; (800d5d8 <__ieee754_fmod+0x214>)
 800d46e:	4282      	cmp	r2, r0
 800d470:	db57      	blt.n	800d522 <__ieee754_fmod+0x15e>
 800d472:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d476:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d47a:	1a89      	subs	r1, r1, r2
 800d47c:	1b98      	subs	r0, r3, r6
 800d47e:	eba4 070e 	sub.w	r7, r4, lr
 800d482:	2900      	cmp	r1, #0
 800d484:	d162      	bne.n	800d54c <__ieee754_fmod+0x188>
 800d486:	4574      	cmp	r4, lr
 800d488:	bf38      	it	cc
 800d48a:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800d48e:	2800      	cmp	r0, #0
 800d490:	bfa4      	itt	ge
 800d492:	463c      	movge	r4, r7
 800d494:	4603      	movge	r3, r0
 800d496:	ea53 0104 	orrs.w	r1, r3, r4
 800d49a:	d0c6      	beq.n	800d42a <__ieee754_fmod+0x66>
 800d49c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4a0:	db69      	blt.n	800d576 <__ieee754_fmod+0x1b2>
 800d4a2:	494d      	ldr	r1, [pc, #308]	; (800d5d8 <__ieee754_fmod+0x214>)
 800d4a4:	428a      	cmp	r2, r1
 800d4a6:	db6c      	blt.n	800d582 <__ieee754_fmod+0x1be>
 800d4a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d4ac:	432b      	orrs	r3, r5
 800d4ae:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800d4b2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	e7a7      	b.n	800d40a <__ieee754_fmod+0x46>
 800d4ba:	3901      	subs	r1, #1
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	e7c3      	b.n	800d448 <__ieee754_fmod+0x84>
 800d4c0:	4945      	ldr	r1, [pc, #276]	; (800d5d8 <__ieee754_fmod+0x214>)
 800d4c2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	ddc0      	ble.n	800d44c <__ieee754_fmod+0x88>
 800d4ca:	3901      	subs	r1, #1
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	e7fa      	b.n	800d4c6 <__ieee754_fmod+0x102>
 800d4d0:	ea4f 5128 	mov.w	r1, r8, asr #20
 800d4d4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d4d8:	e7b8      	b.n	800d44c <__ieee754_fmod+0x88>
 800d4da:	3a01      	subs	r2, #1
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	e7bc      	b.n	800d45a <__ieee754_fmod+0x96>
 800d4e0:	4a3d      	ldr	r2, [pc, #244]	; (800d5d8 <__ieee754_fmod+0x214>)
 800d4e2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	ddb9      	ble.n	800d45e <__ieee754_fmod+0x9a>
 800d4ea:	3a01      	subs	r2, #1
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	e7fa      	b.n	800d4e6 <__ieee754_fmod+0x122>
 800d4f0:	ea4f 522c 	mov.w	r2, ip, asr #20
 800d4f4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d4f8:	e7b1      	b.n	800d45e <__ieee754_fmod+0x9a>
 800d4fa:	1a40      	subs	r0, r0, r1
 800d4fc:	281f      	cmp	r0, #31
 800d4fe:	dc0a      	bgt.n	800d516 <__ieee754_fmod+0x152>
 800d500:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800d504:	fa08 f800 	lsl.w	r8, r8, r0
 800d508:	fa2a f303 	lsr.w	r3, sl, r3
 800d50c:	ea43 0308 	orr.w	r3, r3, r8
 800d510:	fa0a f400 	lsl.w	r4, sl, r0
 800d514:	e7aa      	b.n	800d46c <__ieee754_fmod+0xa8>
 800d516:	4b31      	ldr	r3, [pc, #196]	; (800d5dc <__ieee754_fmod+0x218>)
 800d518:	1a5b      	subs	r3, r3, r1
 800d51a:	fa0a f303 	lsl.w	r3, sl, r3
 800d51e:	2400      	movs	r4, #0
 800d520:	e7a4      	b.n	800d46c <__ieee754_fmod+0xa8>
 800d522:	1a80      	subs	r0, r0, r2
 800d524:	281f      	cmp	r0, #31
 800d526:	dc0a      	bgt.n	800d53e <__ieee754_fmod+0x17a>
 800d528:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800d52c:	fa0c fc00 	lsl.w	ip, ip, r0
 800d530:	fa27 f606 	lsr.w	r6, r7, r6
 800d534:	ea46 060c 	orr.w	r6, r6, ip
 800d538:	fa07 fe00 	lsl.w	lr, r7, r0
 800d53c:	e79d      	b.n	800d47a <__ieee754_fmod+0xb6>
 800d53e:	4e27      	ldr	r6, [pc, #156]	; (800d5dc <__ieee754_fmod+0x218>)
 800d540:	1ab6      	subs	r6, r6, r2
 800d542:	fa07 f606 	lsl.w	r6, r7, r6
 800d546:	f04f 0e00 	mov.w	lr, #0
 800d54a:	e796      	b.n	800d47a <__ieee754_fmod+0xb6>
 800d54c:	4574      	cmp	r4, lr
 800d54e:	bf38      	it	cc
 800d550:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800d554:	2800      	cmp	r0, #0
 800d556:	da05      	bge.n	800d564 <__ieee754_fmod+0x1a0>
 800d558:	0fe0      	lsrs	r0, r4, #31
 800d55a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d55e:	0064      	lsls	r4, r4, #1
 800d560:	3901      	subs	r1, #1
 800d562:	e78b      	b.n	800d47c <__ieee754_fmod+0xb8>
 800d564:	ea50 0307 	orrs.w	r3, r0, r7
 800d568:	f43f af5f 	beq.w	800d42a <__ieee754_fmod+0x66>
 800d56c:	0ffb      	lsrs	r3, r7, #31
 800d56e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d572:	007c      	lsls	r4, r7, #1
 800d574:	e7f4      	b.n	800d560 <__ieee754_fmod+0x19c>
 800d576:	0fe1      	lsrs	r1, r4, #31
 800d578:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d57c:	0064      	lsls	r4, r4, #1
 800d57e:	3a01      	subs	r2, #1
 800d580:	e78c      	b.n	800d49c <__ieee754_fmod+0xd8>
 800d582:	1a89      	subs	r1, r1, r2
 800d584:	2914      	cmp	r1, #20
 800d586:	dc0a      	bgt.n	800d59e <__ieee754_fmod+0x1da>
 800d588:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d58c:	fa03 f202 	lsl.w	r2, r3, r2
 800d590:	40cc      	lsrs	r4, r1
 800d592:	4322      	orrs	r2, r4
 800d594:	410b      	asrs	r3, r1
 800d596:	ea43 0105 	orr.w	r1, r3, r5
 800d59a:	4610      	mov	r0, r2
 800d59c:	e735      	b.n	800d40a <__ieee754_fmod+0x46>
 800d59e:	291f      	cmp	r1, #31
 800d5a0:	dc07      	bgt.n	800d5b2 <__ieee754_fmod+0x1ee>
 800d5a2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d5a6:	40cc      	lsrs	r4, r1
 800d5a8:	fa03 f202 	lsl.w	r2, r3, r2
 800d5ac:	4322      	orrs	r2, r4
 800d5ae:	462b      	mov	r3, r5
 800d5b0:	e7f1      	b.n	800d596 <__ieee754_fmod+0x1d2>
 800d5b2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d5b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d5ba:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d5be:	32e2      	adds	r2, #226	; 0xe2
 800d5c0:	fa43 f202 	asr.w	r2, r3, r2
 800d5c4:	e7f3      	b.n	800d5ae <__ieee754_fmod+0x1ea>
 800d5c6:	bf00      	nop
 800d5c8:	7fefffff 	.word	0x7fefffff
 800d5cc:	7ff00000 	.word	0x7ff00000
 800d5d0:	0800f440 	.word	0x0800f440
 800d5d4:	fffffbed 	.word	0xfffffbed
 800d5d8:	fffffc02 	.word	0xfffffc02
 800d5dc:	fffffbe2 	.word	0xfffffbe2

0800d5e0 <__ieee754_pow>:
 800d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	ed2d 8b06 	vpush	{d8-d10}
 800d5e8:	b089      	sub	sp, #36	; 0x24
 800d5ea:	ed8d 1b00 	vstr	d1, [sp]
 800d5ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d5f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d5f6:	ea58 0102 	orrs.w	r1, r8, r2
 800d5fa:	ec57 6b10 	vmov	r6, r7, d0
 800d5fe:	d115      	bne.n	800d62c <__ieee754_pow+0x4c>
 800d600:	19b3      	adds	r3, r6, r6
 800d602:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d606:	4152      	adcs	r2, r2
 800d608:	4299      	cmp	r1, r3
 800d60a:	4b89      	ldr	r3, [pc, #548]	; (800d830 <__ieee754_pow+0x250>)
 800d60c:	4193      	sbcs	r3, r2
 800d60e:	f080 84d1 	bcs.w	800dfb4 <__ieee754_pow+0x9d4>
 800d612:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d616:	4630      	mov	r0, r6
 800d618:	4639      	mov	r1, r7
 800d61a:	f7f2 fe57 	bl	80002cc <__adddf3>
 800d61e:	ec41 0b10 	vmov	d0, r0, r1
 800d622:	b009      	add	sp, #36	; 0x24
 800d624:	ecbd 8b06 	vpop	{d8-d10}
 800d628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62c:	4b81      	ldr	r3, [pc, #516]	; (800d834 <__ieee754_pow+0x254>)
 800d62e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d632:	429c      	cmp	r4, r3
 800d634:	ee10 aa10 	vmov	sl, s0
 800d638:	463d      	mov	r5, r7
 800d63a:	dc06      	bgt.n	800d64a <__ieee754_pow+0x6a>
 800d63c:	d101      	bne.n	800d642 <__ieee754_pow+0x62>
 800d63e:	2e00      	cmp	r6, #0
 800d640:	d1e7      	bne.n	800d612 <__ieee754_pow+0x32>
 800d642:	4598      	cmp	r8, r3
 800d644:	dc01      	bgt.n	800d64a <__ieee754_pow+0x6a>
 800d646:	d10f      	bne.n	800d668 <__ieee754_pow+0x88>
 800d648:	b172      	cbz	r2, 800d668 <__ieee754_pow+0x88>
 800d64a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d64e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d652:	ea55 050a 	orrs.w	r5, r5, sl
 800d656:	d1dc      	bne.n	800d612 <__ieee754_pow+0x32>
 800d658:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d65c:	18db      	adds	r3, r3, r3
 800d65e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d662:	4152      	adcs	r2, r2
 800d664:	429d      	cmp	r5, r3
 800d666:	e7d0      	b.n	800d60a <__ieee754_pow+0x2a>
 800d668:	2d00      	cmp	r5, #0
 800d66a:	da3b      	bge.n	800d6e4 <__ieee754_pow+0x104>
 800d66c:	4b72      	ldr	r3, [pc, #456]	; (800d838 <__ieee754_pow+0x258>)
 800d66e:	4598      	cmp	r8, r3
 800d670:	dc51      	bgt.n	800d716 <__ieee754_pow+0x136>
 800d672:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d676:	4598      	cmp	r8, r3
 800d678:	f340 84ab 	ble.w	800dfd2 <__ieee754_pow+0x9f2>
 800d67c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d680:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d684:	2b14      	cmp	r3, #20
 800d686:	dd0f      	ble.n	800d6a8 <__ieee754_pow+0xc8>
 800d688:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d68c:	fa22 f103 	lsr.w	r1, r2, r3
 800d690:	fa01 f303 	lsl.w	r3, r1, r3
 800d694:	4293      	cmp	r3, r2
 800d696:	f040 849c 	bne.w	800dfd2 <__ieee754_pow+0x9f2>
 800d69a:	f001 0101 	and.w	r1, r1, #1
 800d69e:	f1c1 0302 	rsb	r3, r1, #2
 800d6a2:	9304      	str	r3, [sp, #16]
 800d6a4:	b182      	cbz	r2, 800d6c8 <__ieee754_pow+0xe8>
 800d6a6:	e05f      	b.n	800d768 <__ieee754_pow+0x188>
 800d6a8:	2a00      	cmp	r2, #0
 800d6aa:	d15b      	bne.n	800d764 <__ieee754_pow+0x184>
 800d6ac:	f1c3 0314 	rsb	r3, r3, #20
 800d6b0:	fa48 f103 	asr.w	r1, r8, r3
 800d6b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d6b8:	4543      	cmp	r3, r8
 800d6ba:	f040 8487 	bne.w	800dfcc <__ieee754_pow+0x9ec>
 800d6be:	f001 0101 	and.w	r1, r1, #1
 800d6c2:	f1c1 0302 	rsb	r3, r1, #2
 800d6c6:	9304      	str	r3, [sp, #16]
 800d6c8:	4b5c      	ldr	r3, [pc, #368]	; (800d83c <__ieee754_pow+0x25c>)
 800d6ca:	4598      	cmp	r8, r3
 800d6cc:	d132      	bne.n	800d734 <__ieee754_pow+0x154>
 800d6ce:	f1b9 0f00 	cmp.w	r9, #0
 800d6d2:	f280 8477 	bge.w	800dfc4 <__ieee754_pow+0x9e4>
 800d6d6:	4959      	ldr	r1, [pc, #356]	; (800d83c <__ieee754_pow+0x25c>)
 800d6d8:	4632      	mov	r2, r6
 800d6da:	463b      	mov	r3, r7
 800d6dc:	2000      	movs	r0, #0
 800d6de:	f7f3 f8d5 	bl	800088c <__aeabi_ddiv>
 800d6e2:	e79c      	b.n	800d61e <__ieee754_pow+0x3e>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	9304      	str	r3, [sp, #16]
 800d6e8:	2a00      	cmp	r2, #0
 800d6ea:	d13d      	bne.n	800d768 <__ieee754_pow+0x188>
 800d6ec:	4b51      	ldr	r3, [pc, #324]	; (800d834 <__ieee754_pow+0x254>)
 800d6ee:	4598      	cmp	r8, r3
 800d6f0:	d1ea      	bne.n	800d6c8 <__ieee754_pow+0xe8>
 800d6f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d6f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d6fa:	ea53 030a 	orrs.w	r3, r3, sl
 800d6fe:	f000 8459 	beq.w	800dfb4 <__ieee754_pow+0x9d4>
 800d702:	4b4f      	ldr	r3, [pc, #316]	; (800d840 <__ieee754_pow+0x260>)
 800d704:	429c      	cmp	r4, r3
 800d706:	dd08      	ble.n	800d71a <__ieee754_pow+0x13a>
 800d708:	f1b9 0f00 	cmp.w	r9, #0
 800d70c:	f2c0 8456 	blt.w	800dfbc <__ieee754_pow+0x9dc>
 800d710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d714:	e783      	b.n	800d61e <__ieee754_pow+0x3e>
 800d716:	2302      	movs	r3, #2
 800d718:	e7e5      	b.n	800d6e6 <__ieee754_pow+0x106>
 800d71a:	f1b9 0f00 	cmp.w	r9, #0
 800d71e:	f04f 0000 	mov.w	r0, #0
 800d722:	f04f 0100 	mov.w	r1, #0
 800d726:	f6bf af7a 	bge.w	800d61e <__ieee754_pow+0x3e>
 800d72a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d72e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d732:	e774      	b.n	800d61e <__ieee754_pow+0x3e>
 800d734:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d738:	d106      	bne.n	800d748 <__ieee754_pow+0x168>
 800d73a:	4632      	mov	r2, r6
 800d73c:	463b      	mov	r3, r7
 800d73e:	4630      	mov	r0, r6
 800d740:	4639      	mov	r1, r7
 800d742:	f7f2 ff79 	bl	8000638 <__aeabi_dmul>
 800d746:	e76a      	b.n	800d61e <__ieee754_pow+0x3e>
 800d748:	4b3e      	ldr	r3, [pc, #248]	; (800d844 <__ieee754_pow+0x264>)
 800d74a:	4599      	cmp	r9, r3
 800d74c:	d10c      	bne.n	800d768 <__ieee754_pow+0x188>
 800d74e:	2d00      	cmp	r5, #0
 800d750:	db0a      	blt.n	800d768 <__ieee754_pow+0x188>
 800d752:	ec47 6b10 	vmov	d0, r6, r7
 800d756:	b009      	add	sp, #36	; 0x24
 800d758:	ecbd 8b06 	vpop	{d8-d10}
 800d75c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d760:	f7ff bb06 	b.w	800cd70 <__ieee754_sqrt>
 800d764:	2300      	movs	r3, #0
 800d766:	9304      	str	r3, [sp, #16]
 800d768:	ec47 6b10 	vmov	d0, r6, r7
 800d76c:	f7ff fa90 	bl	800cc90 <fabs>
 800d770:	ec51 0b10 	vmov	r0, r1, d0
 800d774:	f1ba 0f00 	cmp.w	sl, #0
 800d778:	d129      	bne.n	800d7ce <__ieee754_pow+0x1ee>
 800d77a:	b124      	cbz	r4, 800d786 <__ieee754_pow+0x1a6>
 800d77c:	4b2f      	ldr	r3, [pc, #188]	; (800d83c <__ieee754_pow+0x25c>)
 800d77e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d782:	429a      	cmp	r2, r3
 800d784:	d123      	bne.n	800d7ce <__ieee754_pow+0x1ee>
 800d786:	f1b9 0f00 	cmp.w	r9, #0
 800d78a:	da05      	bge.n	800d798 <__ieee754_pow+0x1b8>
 800d78c:	4602      	mov	r2, r0
 800d78e:	460b      	mov	r3, r1
 800d790:	2000      	movs	r0, #0
 800d792:	492a      	ldr	r1, [pc, #168]	; (800d83c <__ieee754_pow+0x25c>)
 800d794:	f7f3 f87a 	bl	800088c <__aeabi_ddiv>
 800d798:	2d00      	cmp	r5, #0
 800d79a:	f6bf af40 	bge.w	800d61e <__ieee754_pow+0x3e>
 800d79e:	9b04      	ldr	r3, [sp, #16]
 800d7a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d7a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d7a8:	431c      	orrs	r4, r3
 800d7aa:	d108      	bne.n	800d7be <__ieee754_pow+0x1de>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4610      	mov	r0, r2
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f7f2 fd88 	bl	80002c8 <__aeabi_dsub>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	e78f      	b.n	800d6de <__ieee754_pow+0xfe>
 800d7be:	9b04      	ldr	r3, [sp, #16]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	f47f af2c 	bne.w	800d61e <__ieee754_pow+0x3e>
 800d7c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	e727      	b.n	800d61e <__ieee754_pow+0x3e>
 800d7ce:	0feb      	lsrs	r3, r5, #31
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	9306      	str	r3, [sp, #24]
 800d7d4:	9a06      	ldr	r2, [sp, #24]
 800d7d6:	9b04      	ldr	r3, [sp, #16]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	d102      	bne.n	800d7e2 <__ieee754_pow+0x202>
 800d7dc:	4632      	mov	r2, r6
 800d7de:	463b      	mov	r3, r7
 800d7e0:	e7e6      	b.n	800d7b0 <__ieee754_pow+0x1d0>
 800d7e2:	4b19      	ldr	r3, [pc, #100]	; (800d848 <__ieee754_pow+0x268>)
 800d7e4:	4598      	cmp	r8, r3
 800d7e6:	f340 80fb 	ble.w	800d9e0 <__ieee754_pow+0x400>
 800d7ea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d7ee:	4598      	cmp	r8, r3
 800d7f0:	4b13      	ldr	r3, [pc, #76]	; (800d840 <__ieee754_pow+0x260>)
 800d7f2:	dd0c      	ble.n	800d80e <__ieee754_pow+0x22e>
 800d7f4:	429c      	cmp	r4, r3
 800d7f6:	dc0f      	bgt.n	800d818 <__ieee754_pow+0x238>
 800d7f8:	f1b9 0f00 	cmp.w	r9, #0
 800d7fc:	da0f      	bge.n	800d81e <__ieee754_pow+0x23e>
 800d7fe:	2000      	movs	r0, #0
 800d800:	b009      	add	sp, #36	; 0x24
 800d802:	ecbd 8b06 	vpop	{d8-d10}
 800d806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d80a:	f000 bec2 	b.w	800e592 <__math_oflow>
 800d80e:	429c      	cmp	r4, r3
 800d810:	dbf2      	blt.n	800d7f8 <__ieee754_pow+0x218>
 800d812:	4b0a      	ldr	r3, [pc, #40]	; (800d83c <__ieee754_pow+0x25c>)
 800d814:	429c      	cmp	r4, r3
 800d816:	dd19      	ble.n	800d84c <__ieee754_pow+0x26c>
 800d818:	f1b9 0f00 	cmp.w	r9, #0
 800d81c:	dcef      	bgt.n	800d7fe <__ieee754_pow+0x21e>
 800d81e:	2000      	movs	r0, #0
 800d820:	b009      	add	sp, #36	; 0x24
 800d822:	ecbd 8b06 	vpop	{d8-d10}
 800d826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82a:	f000 bea9 	b.w	800e580 <__math_uflow>
 800d82e:	bf00      	nop
 800d830:	fff00000 	.word	0xfff00000
 800d834:	7ff00000 	.word	0x7ff00000
 800d838:	433fffff 	.word	0x433fffff
 800d83c:	3ff00000 	.word	0x3ff00000
 800d840:	3fefffff 	.word	0x3fefffff
 800d844:	3fe00000 	.word	0x3fe00000
 800d848:	41e00000 	.word	0x41e00000
 800d84c:	4b60      	ldr	r3, [pc, #384]	; (800d9d0 <__ieee754_pow+0x3f0>)
 800d84e:	2200      	movs	r2, #0
 800d850:	f7f2 fd3a 	bl	80002c8 <__aeabi_dsub>
 800d854:	a354      	add	r3, pc, #336	; (adr r3, 800d9a8 <__ieee754_pow+0x3c8>)
 800d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85a:	4604      	mov	r4, r0
 800d85c:	460d      	mov	r5, r1
 800d85e:	f7f2 feeb 	bl	8000638 <__aeabi_dmul>
 800d862:	a353      	add	r3, pc, #332	; (adr r3, 800d9b0 <__ieee754_pow+0x3d0>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	4606      	mov	r6, r0
 800d86a:	460f      	mov	r7, r1
 800d86c:	4620      	mov	r0, r4
 800d86e:	4629      	mov	r1, r5
 800d870:	f7f2 fee2 	bl	8000638 <__aeabi_dmul>
 800d874:	4b57      	ldr	r3, [pc, #348]	; (800d9d4 <__ieee754_pow+0x3f4>)
 800d876:	4682      	mov	sl, r0
 800d878:	468b      	mov	fp, r1
 800d87a:	2200      	movs	r2, #0
 800d87c:	4620      	mov	r0, r4
 800d87e:	4629      	mov	r1, r5
 800d880:	f7f2 feda 	bl	8000638 <__aeabi_dmul>
 800d884:	4602      	mov	r2, r0
 800d886:	460b      	mov	r3, r1
 800d888:	a14b      	add	r1, pc, #300	; (adr r1, 800d9b8 <__ieee754_pow+0x3d8>)
 800d88a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d88e:	f7f2 fd1b 	bl	80002c8 <__aeabi_dsub>
 800d892:	4622      	mov	r2, r4
 800d894:	462b      	mov	r3, r5
 800d896:	f7f2 fecf 	bl	8000638 <__aeabi_dmul>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	2000      	movs	r0, #0
 800d8a0:	494d      	ldr	r1, [pc, #308]	; (800d9d8 <__ieee754_pow+0x3f8>)
 800d8a2:	f7f2 fd11 	bl	80002c8 <__aeabi_dsub>
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	4680      	mov	r8, r0
 800d8aa:	4689      	mov	r9, r1
 800d8ac:	462b      	mov	r3, r5
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	4629      	mov	r1, r5
 800d8b2:	f7f2 fec1 	bl	8000638 <__aeabi_dmul>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	4649      	mov	r1, r9
 800d8be:	f7f2 febb 	bl	8000638 <__aeabi_dmul>
 800d8c2:	a33f      	add	r3, pc, #252	; (adr r3, 800d9c0 <__ieee754_pow+0x3e0>)
 800d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c8:	f7f2 feb6 	bl	8000638 <__aeabi_dmul>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	4650      	mov	r0, sl
 800d8d2:	4659      	mov	r1, fp
 800d8d4:	f7f2 fcf8 	bl	80002c8 <__aeabi_dsub>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	4680      	mov	r8, r0
 800d8de:	4689      	mov	r9, r1
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	4639      	mov	r1, r7
 800d8e4:	f7f2 fcf2 	bl	80002cc <__adddf3>
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	4632      	mov	r2, r6
 800d8ec:	463b      	mov	r3, r7
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	460d      	mov	r5, r1
 800d8f2:	f7f2 fce9 	bl	80002c8 <__aeabi_dsub>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4640      	mov	r0, r8
 800d8fc:	4649      	mov	r1, r9
 800d8fe:	f7f2 fce3 	bl	80002c8 <__aeabi_dsub>
 800d902:	9b04      	ldr	r3, [sp, #16]
 800d904:	9a06      	ldr	r2, [sp, #24]
 800d906:	3b01      	subs	r3, #1
 800d908:	4313      	orrs	r3, r2
 800d90a:	4682      	mov	sl, r0
 800d90c:	468b      	mov	fp, r1
 800d90e:	f040 81e7 	bne.w	800dce0 <__ieee754_pow+0x700>
 800d912:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d9c8 <__ieee754_pow+0x3e8>
 800d916:	eeb0 8a47 	vmov.f32	s16, s14
 800d91a:	eef0 8a67 	vmov.f32	s17, s15
 800d91e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d922:	2600      	movs	r6, #0
 800d924:	4632      	mov	r2, r6
 800d926:	463b      	mov	r3, r7
 800d928:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d92c:	f7f2 fccc 	bl	80002c8 <__aeabi_dsub>
 800d930:	4622      	mov	r2, r4
 800d932:	462b      	mov	r3, r5
 800d934:	f7f2 fe80 	bl	8000638 <__aeabi_dmul>
 800d938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d93c:	4680      	mov	r8, r0
 800d93e:	4689      	mov	r9, r1
 800d940:	4650      	mov	r0, sl
 800d942:	4659      	mov	r1, fp
 800d944:	f7f2 fe78 	bl	8000638 <__aeabi_dmul>
 800d948:	4602      	mov	r2, r0
 800d94a:	460b      	mov	r3, r1
 800d94c:	4640      	mov	r0, r8
 800d94e:	4649      	mov	r1, r9
 800d950:	f7f2 fcbc 	bl	80002cc <__adddf3>
 800d954:	4632      	mov	r2, r6
 800d956:	463b      	mov	r3, r7
 800d958:	4680      	mov	r8, r0
 800d95a:	4689      	mov	r9, r1
 800d95c:	4620      	mov	r0, r4
 800d95e:	4629      	mov	r1, r5
 800d960:	f7f2 fe6a 	bl	8000638 <__aeabi_dmul>
 800d964:	460b      	mov	r3, r1
 800d966:	4604      	mov	r4, r0
 800d968:	460d      	mov	r5, r1
 800d96a:	4602      	mov	r2, r0
 800d96c:	4649      	mov	r1, r9
 800d96e:	4640      	mov	r0, r8
 800d970:	f7f2 fcac 	bl	80002cc <__adddf3>
 800d974:	4b19      	ldr	r3, [pc, #100]	; (800d9dc <__ieee754_pow+0x3fc>)
 800d976:	4299      	cmp	r1, r3
 800d978:	ec45 4b19 	vmov	d9, r4, r5
 800d97c:	4606      	mov	r6, r0
 800d97e:	460f      	mov	r7, r1
 800d980:	468b      	mov	fp, r1
 800d982:	f340 82f0 	ble.w	800df66 <__ieee754_pow+0x986>
 800d986:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d98a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d98e:	4303      	orrs	r3, r0
 800d990:	f000 81e4 	beq.w	800dd5c <__ieee754_pow+0x77c>
 800d994:	ec51 0b18 	vmov	r0, r1, d8
 800d998:	2200      	movs	r2, #0
 800d99a:	2300      	movs	r3, #0
 800d99c:	f7f3 f8be 	bl	8000b1c <__aeabi_dcmplt>
 800d9a0:	3800      	subs	r0, #0
 800d9a2:	bf18      	it	ne
 800d9a4:	2001      	movne	r0, #1
 800d9a6:	e72b      	b.n	800d800 <__ieee754_pow+0x220>
 800d9a8:	60000000 	.word	0x60000000
 800d9ac:	3ff71547 	.word	0x3ff71547
 800d9b0:	f85ddf44 	.word	0xf85ddf44
 800d9b4:	3e54ae0b 	.word	0x3e54ae0b
 800d9b8:	55555555 	.word	0x55555555
 800d9bc:	3fd55555 	.word	0x3fd55555
 800d9c0:	652b82fe 	.word	0x652b82fe
 800d9c4:	3ff71547 	.word	0x3ff71547
 800d9c8:	00000000 	.word	0x00000000
 800d9cc:	bff00000 	.word	0xbff00000
 800d9d0:	3ff00000 	.word	0x3ff00000
 800d9d4:	3fd00000 	.word	0x3fd00000
 800d9d8:	3fe00000 	.word	0x3fe00000
 800d9dc:	408fffff 	.word	0x408fffff
 800d9e0:	4bd5      	ldr	r3, [pc, #852]	; (800dd38 <__ieee754_pow+0x758>)
 800d9e2:	402b      	ands	r3, r5
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	b92b      	cbnz	r3, 800d9f4 <__ieee754_pow+0x414>
 800d9e8:	4bd4      	ldr	r3, [pc, #848]	; (800dd3c <__ieee754_pow+0x75c>)
 800d9ea:	f7f2 fe25 	bl	8000638 <__aeabi_dmul>
 800d9ee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d9f2:	460c      	mov	r4, r1
 800d9f4:	1523      	asrs	r3, r4, #20
 800d9f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d9fa:	4413      	add	r3, r2
 800d9fc:	9305      	str	r3, [sp, #20]
 800d9fe:	4bd0      	ldr	r3, [pc, #832]	; (800dd40 <__ieee754_pow+0x760>)
 800da00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800da04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800da08:	429c      	cmp	r4, r3
 800da0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800da0e:	dd08      	ble.n	800da22 <__ieee754_pow+0x442>
 800da10:	4bcc      	ldr	r3, [pc, #816]	; (800dd44 <__ieee754_pow+0x764>)
 800da12:	429c      	cmp	r4, r3
 800da14:	f340 8162 	ble.w	800dcdc <__ieee754_pow+0x6fc>
 800da18:	9b05      	ldr	r3, [sp, #20]
 800da1a:	3301      	adds	r3, #1
 800da1c:	9305      	str	r3, [sp, #20]
 800da1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800da22:	2400      	movs	r4, #0
 800da24:	00e3      	lsls	r3, r4, #3
 800da26:	9307      	str	r3, [sp, #28]
 800da28:	4bc7      	ldr	r3, [pc, #796]	; (800dd48 <__ieee754_pow+0x768>)
 800da2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da2e:	ed93 7b00 	vldr	d7, [r3]
 800da32:	4629      	mov	r1, r5
 800da34:	ec53 2b17 	vmov	r2, r3, d7
 800da38:	eeb0 9a47 	vmov.f32	s18, s14
 800da3c:	eef0 9a67 	vmov.f32	s19, s15
 800da40:	4682      	mov	sl, r0
 800da42:	f7f2 fc41 	bl	80002c8 <__aeabi_dsub>
 800da46:	4652      	mov	r2, sl
 800da48:	4606      	mov	r6, r0
 800da4a:	460f      	mov	r7, r1
 800da4c:	462b      	mov	r3, r5
 800da4e:	ec51 0b19 	vmov	r0, r1, d9
 800da52:	f7f2 fc3b 	bl	80002cc <__adddf3>
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	2000      	movs	r0, #0
 800da5c:	49bb      	ldr	r1, [pc, #748]	; (800dd4c <__ieee754_pow+0x76c>)
 800da5e:	f7f2 ff15 	bl	800088c <__aeabi_ddiv>
 800da62:	ec41 0b1a 	vmov	d10, r0, r1
 800da66:	4602      	mov	r2, r0
 800da68:	460b      	mov	r3, r1
 800da6a:	4630      	mov	r0, r6
 800da6c:	4639      	mov	r1, r7
 800da6e:	f7f2 fde3 	bl	8000638 <__aeabi_dmul>
 800da72:	2300      	movs	r3, #0
 800da74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da78:	9302      	str	r3, [sp, #8]
 800da7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da7e:	46ab      	mov	fp, r5
 800da80:	106d      	asrs	r5, r5, #1
 800da82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800da86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800da8a:	ec41 0b18 	vmov	d8, r0, r1
 800da8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800da92:	2200      	movs	r2, #0
 800da94:	4640      	mov	r0, r8
 800da96:	4649      	mov	r1, r9
 800da98:	4614      	mov	r4, r2
 800da9a:	461d      	mov	r5, r3
 800da9c:	f7f2 fdcc 	bl	8000638 <__aeabi_dmul>
 800daa0:	4602      	mov	r2, r0
 800daa2:	460b      	mov	r3, r1
 800daa4:	4630      	mov	r0, r6
 800daa6:	4639      	mov	r1, r7
 800daa8:	f7f2 fc0e 	bl	80002c8 <__aeabi_dsub>
 800daac:	ec53 2b19 	vmov	r2, r3, d9
 800dab0:	4606      	mov	r6, r0
 800dab2:	460f      	mov	r7, r1
 800dab4:	4620      	mov	r0, r4
 800dab6:	4629      	mov	r1, r5
 800dab8:	f7f2 fc06 	bl	80002c8 <__aeabi_dsub>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	4650      	mov	r0, sl
 800dac2:	4659      	mov	r1, fp
 800dac4:	f7f2 fc00 	bl	80002c8 <__aeabi_dsub>
 800dac8:	4642      	mov	r2, r8
 800daca:	464b      	mov	r3, r9
 800dacc:	f7f2 fdb4 	bl	8000638 <__aeabi_dmul>
 800dad0:	4602      	mov	r2, r0
 800dad2:	460b      	mov	r3, r1
 800dad4:	4630      	mov	r0, r6
 800dad6:	4639      	mov	r1, r7
 800dad8:	f7f2 fbf6 	bl	80002c8 <__aeabi_dsub>
 800dadc:	ec53 2b1a 	vmov	r2, r3, d10
 800dae0:	f7f2 fdaa 	bl	8000638 <__aeabi_dmul>
 800dae4:	ec53 2b18 	vmov	r2, r3, d8
 800dae8:	ec41 0b19 	vmov	d9, r0, r1
 800daec:	ec51 0b18 	vmov	r0, r1, d8
 800daf0:	f7f2 fda2 	bl	8000638 <__aeabi_dmul>
 800daf4:	a37c      	add	r3, pc, #496	; (adr r3, 800dce8 <__ieee754_pow+0x708>)
 800daf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafa:	4604      	mov	r4, r0
 800dafc:	460d      	mov	r5, r1
 800dafe:	f7f2 fd9b 	bl	8000638 <__aeabi_dmul>
 800db02:	a37b      	add	r3, pc, #492	; (adr r3, 800dcf0 <__ieee754_pow+0x710>)
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	f7f2 fbe0 	bl	80002cc <__adddf3>
 800db0c:	4622      	mov	r2, r4
 800db0e:	462b      	mov	r3, r5
 800db10:	f7f2 fd92 	bl	8000638 <__aeabi_dmul>
 800db14:	a378      	add	r3, pc, #480	; (adr r3, 800dcf8 <__ieee754_pow+0x718>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fbd7 	bl	80002cc <__adddf3>
 800db1e:	4622      	mov	r2, r4
 800db20:	462b      	mov	r3, r5
 800db22:	f7f2 fd89 	bl	8000638 <__aeabi_dmul>
 800db26:	a376      	add	r3, pc, #472	; (adr r3, 800dd00 <__ieee754_pow+0x720>)
 800db28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2c:	f7f2 fbce 	bl	80002cc <__adddf3>
 800db30:	4622      	mov	r2, r4
 800db32:	462b      	mov	r3, r5
 800db34:	f7f2 fd80 	bl	8000638 <__aeabi_dmul>
 800db38:	a373      	add	r3, pc, #460	; (adr r3, 800dd08 <__ieee754_pow+0x728>)
 800db3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3e:	f7f2 fbc5 	bl	80002cc <__adddf3>
 800db42:	4622      	mov	r2, r4
 800db44:	462b      	mov	r3, r5
 800db46:	f7f2 fd77 	bl	8000638 <__aeabi_dmul>
 800db4a:	a371      	add	r3, pc, #452	; (adr r3, 800dd10 <__ieee754_pow+0x730>)
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	f7f2 fbbc 	bl	80002cc <__adddf3>
 800db54:	4622      	mov	r2, r4
 800db56:	4606      	mov	r6, r0
 800db58:	460f      	mov	r7, r1
 800db5a:	462b      	mov	r3, r5
 800db5c:	4620      	mov	r0, r4
 800db5e:	4629      	mov	r1, r5
 800db60:	f7f2 fd6a 	bl	8000638 <__aeabi_dmul>
 800db64:	4602      	mov	r2, r0
 800db66:	460b      	mov	r3, r1
 800db68:	4630      	mov	r0, r6
 800db6a:	4639      	mov	r1, r7
 800db6c:	f7f2 fd64 	bl	8000638 <__aeabi_dmul>
 800db70:	4642      	mov	r2, r8
 800db72:	4604      	mov	r4, r0
 800db74:	460d      	mov	r5, r1
 800db76:	464b      	mov	r3, r9
 800db78:	ec51 0b18 	vmov	r0, r1, d8
 800db7c:	f7f2 fba6 	bl	80002cc <__adddf3>
 800db80:	ec53 2b19 	vmov	r2, r3, d9
 800db84:	f7f2 fd58 	bl	8000638 <__aeabi_dmul>
 800db88:	4622      	mov	r2, r4
 800db8a:	462b      	mov	r3, r5
 800db8c:	f7f2 fb9e 	bl	80002cc <__adddf3>
 800db90:	4642      	mov	r2, r8
 800db92:	4682      	mov	sl, r0
 800db94:	468b      	mov	fp, r1
 800db96:	464b      	mov	r3, r9
 800db98:	4640      	mov	r0, r8
 800db9a:	4649      	mov	r1, r9
 800db9c:	f7f2 fd4c 	bl	8000638 <__aeabi_dmul>
 800dba0:	4b6b      	ldr	r3, [pc, #428]	; (800dd50 <__ieee754_pow+0x770>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	4606      	mov	r6, r0
 800dba6:	460f      	mov	r7, r1
 800dba8:	f7f2 fb90 	bl	80002cc <__adddf3>
 800dbac:	4652      	mov	r2, sl
 800dbae:	465b      	mov	r3, fp
 800dbb0:	f7f2 fb8c 	bl	80002cc <__adddf3>
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	460d      	mov	r5, r1
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4640      	mov	r0, r8
 800dbc0:	4649      	mov	r1, r9
 800dbc2:	f7f2 fd39 	bl	8000638 <__aeabi_dmul>
 800dbc6:	4b62      	ldr	r3, [pc, #392]	; (800dd50 <__ieee754_pow+0x770>)
 800dbc8:	4680      	mov	r8, r0
 800dbca:	4689      	mov	r9, r1
 800dbcc:	2200      	movs	r2, #0
 800dbce:	4620      	mov	r0, r4
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	f7f2 fb79 	bl	80002c8 <__aeabi_dsub>
 800dbd6:	4632      	mov	r2, r6
 800dbd8:	463b      	mov	r3, r7
 800dbda:	f7f2 fb75 	bl	80002c8 <__aeabi_dsub>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	4650      	mov	r0, sl
 800dbe4:	4659      	mov	r1, fp
 800dbe6:	f7f2 fb6f 	bl	80002c8 <__aeabi_dsub>
 800dbea:	ec53 2b18 	vmov	r2, r3, d8
 800dbee:	f7f2 fd23 	bl	8000638 <__aeabi_dmul>
 800dbf2:	4622      	mov	r2, r4
 800dbf4:	4606      	mov	r6, r0
 800dbf6:	460f      	mov	r7, r1
 800dbf8:	462b      	mov	r3, r5
 800dbfa:	ec51 0b19 	vmov	r0, r1, d9
 800dbfe:	f7f2 fd1b 	bl	8000638 <__aeabi_dmul>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	4630      	mov	r0, r6
 800dc08:	4639      	mov	r1, r7
 800dc0a:	f7f2 fb5f 	bl	80002cc <__adddf3>
 800dc0e:	4606      	mov	r6, r0
 800dc10:	460f      	mov	r7, r1
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4640      	mov	r0, r8
 800dc18:	4649      	mov	r1, r9
 800dc1a:	f7f2 fb57 	bl	80002cc <__adddf3>
 800dc1e:	a33e      	add	r3, pc, #248	; (adr r3, 800dd18 <__ieee754_pow+0x738>)
 800dc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc24:	2000      	movs	r0, #0
 800dc26:	4604      	mov	r4, r0
 800dc28:	460d      	mov	r5, r1
 800dc2a:	f7f2 fd05 	bl	8000638 <__aeabi_dmul>
 800dc2e:	4642      	mov	r2, r8
 800dc30:	ec41 0b18 	vmov	d8, r0, r1
 800dc34:	464b      	mov	r3, r9
 800dc36:	4620      	mov	r0, r4
 800dc38:	4629      	mov	r1, r5
 800dc3a:	f7f2 fb45 	bl	80002c8 <__aeabi_dsub>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	460b      	mov	r3, r1
 800dc42:	4630      	mov	r0, r6
 800dc44:	4639      	mov	r1, r7
 800dc46:	f7f2 fb3f 	bl	80002c8 <__aeabi_dsub>
 800dc4a:	a335      	add	r3, pc, #212	; (adr r3, 800dd20 <__ieee754_pow+0x740>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	f7f2 fcf2 	bl	8000638 <__aeabi_dmul>
 800dc54:	a334      	add	r3, pc, #208	; (adr r3, 800dd28 <__ieee754_pow+0x748>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	460f      	mov	r7, r1
 800dc5e:	4620      	mov	r0, r4
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 fce9 	bl	8000638 <__aeabi_dmul>
 800dc66:	4602      	mov	r2, r0
 800dc68:	460b      	mov	r3, r1
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	4639      	mov	r1, r7
 800dc6e:	f7f2 fb2d 	bl	80002cc <__adddf3>
 800dc72:	9a07      	ldr	r2, [sp, #28]
 800dc74:	4b37      	ldr	r3, [pc, #220]	; (800dd54 <__ieee754_pow+0x774>)
 800dc76:	4413      	add	r3, r2
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	f7f2 fb26 	bl	80002cc <__adddf3>
 800dc80:	4682      	mov	sl, r0
 800dc82:	9805      	ldr	r0, [sp, #20]
 800dc84:	468b      	mov	fp, r1
 800dc86:	f7f2 fc6d 	bl	8000564 <__aeabi_i2d>
 800dc8a:	9a07      	ldr	r2, [sp, #28]
 800dc8c:	4b32      	ldr	r3, [pc, #200]	; (800dd58 <__ieee754_pow+0x778>)
 800dc8e:	4413      	add	r3, r2
 800dc90:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc94:	4606      	mov	r6, r0
 800dc96:	460f      	mov	r7, r1
 800dc98:	4652      	mov	r2, sl
 800dc9a:	465b      	mov	r3, fp
 800dc9c:	ec51 0b18 	vmov	r0, r1, d8
 800dca0:	f7f2 fb14 	bl	80002cc <__adddf3>
 800dca4:	4642      	mov	r2, r8
 800dca6:	464b      	mov	r3, r9
 800dca8:	f7f2 fb10 	bl	80002cc <__adddf3>
 800dcac:	4632      	mov	r2, r6
 800dcae:	463b      	mov	r3, r7
 800dcb0:	f7f2 fb0c 	bl	80002cc <__adddf3>
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	4632      	mov	r2, r6
 800dcb8:	463b      	mov	r3, r7
 800dcba:	4604      	mov	r4, r0
 800dcbc:	460d      	mov	r5, r1
 800dcbe:	f7f2 fb03 	bl	80002c8 <__aeabi_dsub>
 800dcc2:	4642      	mov	r2, r8
 800dcc4:	464b      	mov	r3, r9
 800dcc6:	f7f2 faff 	bl	80002c8 <__aeabi_dsub>
 800dcca:	ec53 2b18 	vmov	r2, r3, d8
 800dcce:	f7f2 fafb 	bl	80002c8 <__aeabi_dsub>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	4650      	mov	r0, sl
 800dcd8:	4659      	mov	r1, fp
 800dcda:	e610      	b.n	800d8fe <__ieee754_pow+0x31e>
 800dcdc:	2401      	movs	r4, #1
 800dcde:	e6a1      	b.n	800da24 <__ieee754_pow+0x444>
 800dce0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800dd30 <__ieee754_pow+0x750>
 800dce4:	e617      	b.n	800d916 <__ieee754_pow+0x336>
 800dce6:	bf00      	nop
 800dce8:	4a454eef 	.word	0x4a454eef
 800dcec:	3fca7e28 	.word	0x3fca7e28
 800dcf0:	93c9db65 	.word	0x93c9db65
 800dcf4:	3fcd864a 	.word	0x3fcd864a
 800dcf8:	a91d4101 	.word	0xa91d4101
 800dcfc:	3fd17460 	.word	0x3fd17460
 800dd00:	518f264d 	.word	0x518f264d
 800dd04:	3fd55555 	.word	0x3fd55555
 800dd08:	db6fabff 	.word	0xdb6fabff
 800dd0c:	3fdb6db6 	.word	0x3fdb6db6
 800dd10:	33333303 	.word	0x33333303
 800dd14:	3fe33333 	.word	0x3fe33333
 800dd18:	e0000000 	.word	0xe0000000
 800dd1c:	3feec709 	.word	0x3feec709
 800dd20:	dc3a03fd 	.word	0xdc3a03fd
 800dd24:	3feec709 	.word	0x3feec709
 800dd28:	145b01f5 	.word	0x145b01f5
 800dd2c:	be3e2fe0 	.word	0xbe3e2fe0
 800dd30:	00000000 	.word	0x00000000
 800dd34:	3ff00000 	.word	0x3ff00000
 800dd38:	7ff00000 	.word	0x7ff00000
 800dd3c:	43400000 	.word	0x43400000
 800dd40:	0003988e 	.word	0x0003988e
 800dd44:	000bb679 	.word	0x000bb679
 800dd48:	0800f450 	.word	0x0800f450
 800dd4c:	3ff00000 	.word	0x3ff00000
 800dd50:	40080000 	.word	0x40080000
 800dd54:	0800f470 	.word	0x0800f470
 800dd58:	0800f460 	.word	0x0800f460
 800dd5c:	a3b3      	add	r3, pc, #716	; (adr r3, 800e02c <__ieee754_pow+0xa4c>)
 800dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd62:	4640      	mov	r0, r8
 800dd64:	4649      	mov	r1, r9
 800dd66:	f7f2 fab1 	bl	80002cc <__adddf3>
 800dd6a:	4622      	mov	r2, r4
 800dd6c:	ec41 0b1a 	vmov	d10, r0, r1
 800dd70:	462b      	mov	r3, r5
 800dd72:	4630      	mov	r0, r6
 800dd74:	4639      	mov	r1, r7
 800dd76:	f7f2 faa7 	bl	80002c8 <__aeabi_dsub>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	ec51 0b1a 	vmov	r0, r1, d10
 800dd82:	f7f2 fee9 	bl	8000b58 <__aeabi_dcmpgt>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	f47f ae04 	bne.w	800d994 <__ieee754_pow+0x3b4>
 800dd8c:	4aa2      	ldr	r2, [pc, #648]	; (800e018 <__ieee754_pow+0xa38>)
 800dd8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd92:	4293      	cmp	r3, r2
 800dd94:	f340 8107 	ble.w	800dfa6 <__ieee754_pow+0x9c6>
 800dd98:	151b      	asrs	r3, r3, #20
 800dd9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dd9e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dda2:	fa4a fa03 	asr.w	sl, sl, r3
 800dda6:	44da      	add	sl, fp
 800dda8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ddac:	489b      	ldr	r0, [pc, #620]	; (800e01c <__ieee754_pow+0xa3c>)
 800ddae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ddb2:	4108      	asrs	r0, r1
 800ddb4:	ea00 030a 	and.w	r3, r0, sl
 800ddb8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ddbc:	f1c1 0114 	rsb	r1, r1, #20
 800ddc0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ddc4:	fa4a fa01 	asr.w	sl, sl, r1
 800ddc8:	f1bb 0f00 	cmp.w	fp, #0
 800ddcc:	f04f 0200 	mov.w	r2, #0
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	bfb8      	it	lt
 800ddd6:	f1ca 0a00 	rsblt	sl, sl, #0
 800ddda:	f7f2 fa75 	bl	80002c8 <__aeabi_dsub>
 800ddde:	ec41 0b19 	vmov	d9, r0, r1
 800dde2:	4642      	mov	r2, r8
 800dde4:	464b      	mov	r3, r9
 800dde6:	ec51 0b19 	vmov	r0, r1, d9
 800ddea:	f7f2 fa6f 	bl	80002cc <__adddf3>
 800ddee:	a37a      	add	r3, pc, #488	; (adr r3, 800dfd8 <__ieee754_pow+0x9f8>)
 800ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	460d      	mov	r5, r1
 800ddfa:	f7f2 fc1d 	bl	8000638 <__aeabi_dmul>
 800ddfe:	ec53 2b19 	vmov	r2, r3, d9
 800de02:	4606      	mov	r6, r0
 800de04:	460f      	mov	r7, r1
 800de06:	4620      	mov	r0, r4
 800de08:	4629      	mov	r1, r5
 800de0a:	f7f2 fa5d 	bl	80002c8 <__aeabi_dsub>
 800de0e:	4602      	mov	r2, r0
 800de10:	460b      	mov	r3, r1
 800de12:	4640      	mov	r0, r8
 800de14:	4649      	mov	r1, r9
 800de16:	f7f2 fa57 	bl	80002c8 <__aeabi_dsub>
 800de1a:	a371      	add	r3, pc, #452	; (adr r3, 800dfe0 <__ieee754_pow+0xa00>)
 800de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de20:	f7f2 fc0a 	bl	8000638 <__aeabi_dmul>
 800de24:	a370      	add	r3, pc, #448	; (adr r3, 800dfe8 <__ieee754_pow+0xa08>)
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	4680      	mov	r8, r0
 800de2c:	4689      	mov	r9, r1
 800de2e:	4620      	mov	r0, r4
 800de30:	4629      	mov	r1, r5
 800de32:	f7f2 fc01 	bl	8000638 <__aeabi_dmul>
 800de36:	4602      	mov	r2, r0
 800de38:	460b      	mov	r3, r1
 800de3a:	4640      	mov	r0, r8
 800de3c:	4649      	mov	r1, r9
 800de3e:	f7f2 fa45 	bl	80002cc <__adddf3>
 800de42:	4604      	mov	r4, r0
 800de44:	460d      	mov	r5, r1
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4630      	mov	r0, r6
 800de4c:	4639      	mov	r1, r7
 800de4e:	f7f2 fa3d 	bl	80002cc <__adddf3>
 800de52:	4632      	mov	r2, r6
 800de54:	463b      	mov	r3, r7
 800de56:	4680      	mov	r8, r0
 800de58:	4689      	mov	r9, r1
 800de5a:	f7f2 fa35 	bl	80002c8 <__aeabi_dsub>
 800de5e:	4602      	mov	r2, r0
 800de60:	460b      	mov	r3, r1
 800de62:	4620      	mov	r0, r4
 800de64:	4629      	mov	r1, r5
 800de66:	f7f2 fa2f 	bl	80002c8 <__aeabi_dsub>
 800de6a:	4642      	mov	r2, r8
 800de6c:	4606      	mov	r6, r0
 800de6e:	460f      	mov	r7, r1
 800de70:	464b      	mov	r3, r9
 800de72:	4640      	mov	r0, r8
 800de74:	4649      	mov	r1, r9
 800de76:	f7f2 fbdf 	bl	8000638 <__aeabi_dmul>
 800de7a:	a35d      	add	r3, pc, #372	; (adr r3, 800dff0 <__ieee754_pow+0xa10>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	4604      	mov	r4, r0
 800de82:	460d      	mov	r5, r1
 800de84:	f7f2 fbd8 	bl	8000638 <__aeabi_dmul>
 800de88:	a35b      	add	r3, pc, #364	; (adr r3, 800dff8 <__ieee754_pow+0xa18>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	f7f2 fa1b 	bl	80002c8 <__aeabi_dsub>
 800de92:	4622      	mov	r2, r4
 800de94:	462b      	mov	r3, r5
 800de96:	f7f2 fbcf 	bl	8000638 <__aeabi_dmul>
 800de9a:	a359      	add	r3, pc, #356	; (adr r3, 800e000 <__ieee754_pow+0xa20>)
 800de9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea0:	f7f2 fa14 	bl	80002cc <__adddf3>
 800dea4:	4622      	mov	r2, r4
 800dea6:	462b      	mov	r3, r5
 800dea8:	f7f2 fbc6 	bl	8000638 <__aeabi_dmul>
 800deac:	a356      	add	r3, pc, #344	; (adr r3, 800e008 <__ieee754_pow+0xa28>)
 800deae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb2:	f7f2 fa09 	bl	80002c8 <__aeabi_dsub>
 800deb6:	4622      	mov	r2, r4
 800deb8:	462b      	mov	r3, r5
 800deba:	f7f2 fbbd 	bl	8000638 <__aeabi_dmul>
 800debe:	a354      	add	r3, pc, #336	; (adr r3, 800e010 <__ieee754_pow+0xa30>)
 800dec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec4:	f7f2 fa02 	bl	80002cc <__adddf3>
 800dec8:	4622      	mov	r2, r4
 800deca:	462b      	mov	r3, r5
 800decc:	f7f2 fbb4 	bl	8000638 <__aeabi_dmul>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	4640      	mov	r0, r8
 800ded6:	4649      	mov	r1, r9
 800ded8:	f7f2 f9f6 	bl	80002c8 <__aeabi_dsub>
 800dedc:	4604      	mov	r4, r0
 800dede:	460d      	mov	r5, r1
 800dee0:	4602      	mov	r2, r0
 800dee2:	460b      	mov	r3, r1
 800dee4:	4640      	mov	r0, r8
 800dee6:	4649      	mov	r1, r9
 800dee8:	f7f2 fba6 	bl	8000638 <__aeabi_dmul>
 800deec:	2200      	movs	r2, #0
 800deee:	ec41 0b19 	vmov	d9, r0, r1
 800def2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800def6:	4620      	mov	r0, r4
 800def8:	4629      	mov	r1, r5
 800defa:	f7f2 f9e5 	bl	80002c8 <__aeabi_dsub>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	ec51 0b19 	vmov	r0, r1, d9
 800df06:	f7f2 fcc1 	bl	800088c <__aeabi_ddiv>
 800df0a:	4632      	mov	r2, r6
 800df0c:	4604      	mov	r4, r0
 800df0e:	460d      	mov	r5, r1
 800df10:	463b      	mov	r3, r7
 800df12:	4640      	mov	r0, r8
 800df14:	4649      	mov	r1, r9
 800df16:	f7f2 fb8f 	bl	8000638 <__aeabi_dmul>
 800df1a:	4632      	mov	r2, r6
 800df1c:	463b      	mov	r3, r7
 800df1e:	f7f2 f9d5 	bl	80002cc <__adddf3>
 800df22:	4602      	mov	r2, r0
 800df24:	460b      	mov	r3, r1
 800df26:	4620      	mov	r0, r4
 800df28:	4629      	mov	r1, r5
 800df2a:	f7f2 f9cd 	bl	80002c8 <__aeabi_dsub>
 800df2e:	4642      	mov	r2, r8
 800df30:	464b      	mov	r3, r9
 800df32:	f7f2 f9c9 	bl	80002c8 <__aeabi_dsub>
 800df36:	460b      	mov	r3, r1
 800df38:	4602      	mov	r2, r0
 800df3a:	4939      	ldr	r1, [pc, #228]	; (800e020 <__ieee754_pow+0xa40>)
 800df3c:	2000      	movs	r0, #0
 800df3e:	f7f2 f9c3 	bl	80002c8 <__aeabi_dsub>
 800df42:	ec41 0b10 	vmov	d0, r0, r1
 800df46:	ee10 3a90 	vmov	r3, s1
 800df4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800df4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df52:	da2b      	bge.n	800dfac <__ieee754_pow+0x9cc>
 800df54:	4650      	mov	r0, sl
 800df56:	f000 fa77 	bl	800e448 <scalbn>
 800df5a:	ec51 0b10 	vmov	r0, r1, d0
 800df5e:	ec53 2b18 	vmov	r2, r3, d8
 800df62:	f7ff bbee 	b.w	800d742 <__ieee754_pow+0x162>
 800df66:	4b2f      	ldr	r3, [pc, #188]	; (800e024 <__ieee754_pow+0xa44>)
 800df68:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800df6c:	429e      	cmp	r6, r3
 800df6e:	f77f af0d 	ble.w	800dd8c <__ieee754_pow+0x7ac>
 800df72:	4b2d      	ldr	r3, [pc, #180]	; (800e028 <__ieee754_pow+0xa48>)
 800df74:	440b      	add	r3, r1
 800df76:	4303      	orrs	r3, r0
 800df78:	d009      	beq.n	800df8e <__ieee754_pow+0x9ae>
 800df7a:	ec51 0b18 	vmov	r0, r1, d8
 800df7e:	2200      	movs	r2, #0
 800df80:	2300      	movs	r3, #0
 800df82:	f7f2 fdcb 	bl	8000b1c <__aeabi_dcmplt>
 800df86:	3800      	subs	r0, #0
 800df88:	bf18      	it	ne
 800df8a:	2001      	movne	r0, #1
 800df8c:	e448      	b.n	800d820 <__ieee754_pow+0x240>
 800df8e:	4622      	mov	r2, r4
 800df90:	462b      	mov	r3, r5
 800df92:	f7f2 f999 	bl	80002c8 <__aeabi_dsub>
 800df96:	4642      	mov	r2, r8
 800df98:	464b      	mov	r3, r9
 800df9a:	f7f2 fdd3 	bl	8000b44 <__aeabi_dcmpge>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	f43f aef4 	beq.w	800dd8c <__ieee754_pow+0x7ac>
 800dfa4:	e7e9      	b.n	800df7a <__ieee754_pow+0x99a>
 800dfa6:	f04f 0a00 	mov.w	sl, #0
 800dfaa:	e71a      	b.n	800dde2 <__ieee754_pow+0x802>
 800dfac:	ec51 0b10 	vmov	r0, r1, d0
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	e7d4      	b.n	800df5e <__ieee754_pow+0x97e>
 800dfb4:	491a      	ldr	r1, [pc, #104]	; (800e020 <__ieee754_pow+0xa40>)
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	f7ff bb31 	b.w	800d61e <__ieee754_pow+0x3e>
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	f7ff bb2d 	b.w	800d61e <__ieee754_pow+0x3e>
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	4639      	mov	r1, r7
 800dfc8:	f7ff bb29 	b.w	800d61e <__ieee754_pow+0x3e>
 800dfcc:	9204      	str	r2, [sp, #16]
 800dfce:	f7ff bb7b 	b.w	800d6c8 <__ieee754_pow+0xe8>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	f7ff bb65 	b.w	800d6a2 <__ieee754_pow+0xc2>
 800dfd8:	00000000 	.word	0x00000000
 800dfdc:	3fe62e43 	.word	0x3fe62e43
 800dfe0:	fefa39ef 	.word	0xfefa39ef
 800dfe4:	3fe62e42 	.word	0x3fe62e42
 800dfe8:	0ca86c39 	.word	0x0ca86c39
 800dfec:	be205c61 	.word	0xbe205c61
 800dff0:	72bea4d0 	.word	0x72bea4d0
 800dff4:	3e663769 	.word	0x3e663769
 800dff8:	c5d26bf1 	.word	0xc5d26bf1
 800dffc:	3ebbbd41 	.word	0x3ebbbd41
 800e000:	af25de2c 	.word	0xaf25de2c
 800e004:	3f11566a 	.word	0x3f11566a
 800e008:	16bebd93 	.word	0x16bebd93
 800e00c:	3f66c16c 	.word	0x3f66c16c
 800e010:	5555553e 	.word	0x5555553e
 800e014:	3fc55555 	.word	0x3fc55555
 800e018:	3fe00000 	.word	0x3fe00000
 800e01c:	fff00000 	.word	0xfff00000
 800e020:	3ff00000 	.word	0x3ff00000
 800e024:	4090cbff 	.word	0x4090cbff
 800e028:	3f6f3400 	.word	0x3f6f3400
 800e02c:	652b82fe 	.word	0x652b82fe
 800e030:	3c971547 	.word	0x3c971547
 800e034:	00000000 	.word	0x00000000

0800e038 <__ieee754_rem_pio2>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	ed2d 8b02 	vpush	{d8}
 800e040:	ec55 4b10 	vmov	r4, r5, d0
 800e044:	4bca      	ldr	r3, [pc, #808]	; (800e370 <__ieee754_rem_pio2+0x338>)
 800e046:	b08b      	sub	sp, #44	; 0x2c
 800e048:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e04c:	4598      	cmp	r8, r3
 800e04e:	4682      	mov	sl, r0
 800e050:	9502      	str	r5, [sp, #8]
 800e052:	dc08      	bgt.n	800e066 <__ieee754_rem_pio2+0x2e>
 800e054:	2200      	movs	r2, #0
 800e056:	2300      	movs	r3, #0
 800e058:	ed80 0b00 	vstr	d0, [r0]
 800e05c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e060:	f04f 0b00 	mov.w	fp, #0
 800e064:	e028      	b.n	800e0b8 <__ieee754_rem_pio2+0x80>
 800e066:	4bc3      	ldr	r3, [pc, #780]	; (800e374 <__ieee754_rem_pio2+0x33c>)
 800e068:	4598      	cmp	r8, r3
 800e06a:	dc78      	bgt.n	800e15e <__ieee754_rem_pio2+0x126>
 800e06c:	9b02      	ldr	r3, [sp, #8]
 800e06e:	4ec2      	ldr	r6, [pc, #776]	; (800e378 <__ieee754_rem_pio2+0x340>)
 800e070:	2b00      	cmp	r3, #0
 800e072:	ee10 0a10 	vmov	r0, s0
 800e076:	a3b0      	add	r3, pc, #704	; (adr r3, 800e338 <__ieee754_rem_pio2+0x300>)
 800e078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07c:	4629      	mov	r1, r5
 800e07e:	dd39      	ble.n	800e0f4 <__ieee754_rem_pio2+0xbc>
 800e080:	f7f2 f922 	bl	80002c8 <__aeabi_dsub>
 800e084:	45b0      	cmp	r8, r6
 800e086:	4604      	mov	r4, r0
 800e088:	460d      	mov	r5, r1
 800e08a:	d01b      	beq.n	800e0c4 <__ieee754_rem_pio2+0x8c>
 800e08c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e092:	f7f2 f919 	bl	80002c8 <__aeabi_dsub>
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	e9ca 2300 	strd	r2, r3, [sl]
 800e09e:	4620      	mov	r0, r4
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	f7f2 f911 	bl	80002c8 <__aeabi_dsub>
 800e0a6:	a3a6      	add	r3, pc, #664	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ac:	f7f2 f90c 	bl	80002c8 <__aeabi_dsub>
 800e0b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e0b4:	f04f 0b01 	mov.w	fp, #1
 800e0b8:	4658      	mov	r0, fp
 800e0ba:	b00b      	add	sp, #44	; 0x2c
 800e0bc:	ecbd 8b02 	vpop	{d8}
 800e0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c4:	a3a0      	add	r3, pc, #640	; (adr r3, 800e348 <__ieee754_rem_pio2+0x310>)
 800e0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ca:	f7f2 f8fd 	bl	80002c8 <__aeabi_dsub>
 800e0ce:	a3a0      	add	r3, pc, #640	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	460d      	mov	r5, r1
 800e0d8:	f7f2 f8f6 	bl	80002c8 <__aeabi_dsub>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	460b      	mov	r3, r1
 800e0e0:	e9ca 2300 	strd	r2, r3, [sl]
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	f7f2 f8ee 	bl	80002c8 <__aeabi_dsub>
 800e0ec:	a398      	add	r3, pc, #608	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	e7db      	b.n	800e0ac <__ieee754_rem_pio2+0x74>
 800e0f4:	f7f2 f8ea 	bl	80002cc <__adddf3>
 800e0f8:	45b0      	cmp	r8, r6
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	460d      	mov	r5, r1
 800e0fe:	d016      	beq.n	800e12e <__ieee754_rem_pio2+0xf6>
 800e100:	a38f      	add	r3, pc, #572	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e106:	f7f2 f8e1 	bl	80002cc <__adddf3>
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	e9ca 2300 	strd	r2, r3, [sl]
 800e112:	4620      	mov	r0, r4
 800e114:	4629      	mov	r1, r5
 800e116:	f7f2 f8d7 	bl	80002c8 <__aeabi_dsub>
 800e11a:	a389      	add	r3, pc, #548	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	f7f2 f8d4 	bl	80002cc <__adddf3>
 800e124:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e128:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e12c:	e7c4      	b.n	800e0b8 <__ieee754_rem_pio2+0x80>
 800e12e:	a386      	add	r3, pc, #536	; (adr r3, 800e348 <__ieee754_rem_pio2+0x310>)
 800e130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e134:	f7f2 f8ca 	bl	80002cc <__adddf3>
 800e138:	a385      	add	r3, pc, #532	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	4604      	mov	r4, r0
 800e140:	460d      	mov	r5, r1
 800e142:	f7f2 f8c3 	bl	80002cc <__adddf3>
 800e146:	4602      	mov	r2, r0
 800e148:	460b      	mov	r3, r1
 800e14a:	e9ca 2300 	strd	r2, r3, [sl]
 800e14e:	4620      	mov	r0, r4
 800e150:	4629      	mov	r1, r5
 800e152:	f7f2 f8b9 	bl	80002c8 <__aeabi_dsub>
 800e156:	a37e      	add	r3, pc, #504	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15c:	e7e0      	b.n	800e120 <__ieee754_rem_pio2+0xe8>
 800e15e:	4b87      	ldr	r3, [pc, #540]	; (800e37c <__ieee754_rem_pio2+0x344>)
 800e160:	4598      	cmp	r8, r3
 800e162:	f300 80d8 	bgt.w	800e316 <__ieee754_rem_pio2+0x2de>
 800e166:	f7fe fd93 	bl	800cc90 <fabs>
 800e16a:	ec55 4b10 	vmov	r4, r5, d0
 800e16e:	ee10 0a10 	vmov	r0, s0
 800e172:	a379      	add	r3, pc, #484	; (adr r3, 800e358 <__ieee754_rem_pio2+0x320>)
 800e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e178:	4629      	mov	r1, r5
 800e17a:	f7f2 fa5d 	bl	8000638 <__aeabi_dmul>
 800e17e:	4b80      	ldr	r3, [pc, #512]	; (800e380 <__ieee754_rem_pio2+0x348>)
 800e180:	2200      	movs	r2, #0
 800e182:	f7f2 f8a3 	bl	80002cc <__adddf3>
 800e186:	f7f2 fd07 	bl	8000b98 <__aeabi_d2iz>
 800e18a:	4683      	mov	fp, r0
 800e18c:	f7f2 f9ea 	bl	8000564 <__aeabi_i2d>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	ec43 2b18 	vmov	d8, r2, r3
 800e198:	a367      	add	r3, pc, #412	; (adr r3, 800e338 <__ieee754_rem_pio2+0x300>)
 800e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19e:	f7f2 fa4b 	bl	8000638 <__aeabi_dmul>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7f2 f88d 	bl	80002c8 <__aeabi_dsub>
 800e1ae:	a364      	add	r3, pc, #400	; (adr r3, 800e340 <__ieee754_rem_pio2+0x308>)
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	4606      	mov	r6, r0
 800e1b6:	460f      	mov	r7, r1
 800e1b8:	ec51 0b18 	vmov	r0, r1, d8
 800e1bc:	f7f2 fa3c 	bl	8000638 <__aeabi_dmul>
 800e1c0:	f1bb 0f1f 	cmp.w	fp, #31
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	460d      	mov	r5, r1
 800e1c8:	dc0d      	bgt.n	800e1e6 <__ieee754_rem_pio2+0x1ae>
 800e1ca:	4b6e      	ldr	r3, [pc, #440]	; (800e384 <__ieee754_rem_pio2+0x34c>)
 800e1cc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1d4:	4543      	cmp	r3, r8
 800e1d6:	d006      	beq.n	800e1e6 <__ieee754_rem_pio2+0x1ae>
 800e1d8:	4622      	mov	r2, r4
 800e1da:	462b      	mov	r3, r5
 800e1dc:	4630      	mov	r0, r6
 800e1de:	4639      	mov	r1, r7
 800e1e0:	f7f2 f872 	bl	80002c8 <__aeabi_dsub>
 800e1e4:	e00e      	b.n	800e204 <__ieee754_rem_pio2+0x1cc>
 800e1e6:	462b      	mov	r3, r5
 800e1e8:	4622      	mov	r2, r4
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	4639      	mov	r1, r7
 800e1ee:	f7f2 f86b 	bl	80002c8 <__aeabi_dsub>
 800e1f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e1f6:	9303      	str	r3, [sp, #12]
 800e1f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e1fc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e200:	2b10      	cmp	r3, #16
 800e202:	dc02      	bgt.n	800e20a <__ieee754_rem_pio2+0x1d2>
 800e204:	e9ca 0100 	strd	r0, r1, [sl]
 800e208:	e039      	b.n	800e27e <__ieee754_rem_pio2+0x246>
 800e20a:	a34f      	add	r3, pc, #316	; (adr r3, 800e348 <__ieee754_rem_pio2+0x310>)
 800e20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e210:	ec51 0b18 	vmov	r0, r1, d8
 800e214:	f7f2 fa10 	bl	8000638 <__aeabi_dmul>
 800e218:	4604      	mov	r4, r0
 800e21a:	460d      	mov	r5, r1
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	4630      	mov	r0, r6
 800e222:	4639      	mov	r1, r7
 800e224:	f7f2 f850 	bl	80002c8 <__aeabi_dsub>
 800e228:	4602      	mov	r2, r0
 800e22a:	460b      	mov	r3, r1
 800e22c:	4680      	mov	r8, r0
 800e22e:	4689      	mov	r9, r1
 800e230:	4630      	mov	r0, r6
 800e232:	4639      	mov	r1, r7
 800e234:	f7f2 f848 	bl	80002c8 <__aeabi_dsub>
 800e238:	4622      	mov	r2, r4
 800e23a:	462b      	mov	r3, r5
 800e23c:	f7f2 f844 	bl	80002c8 <__aeabi_dsub>
 800e240:	a343      	add	r3, pc, #268	; (adr r3, 800e350 <__ieee754_rem_pio2+0x318>)
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	4604      	mov	r4, r0
 800e248:	460d      	mov	r5, r1
 800e24a:	ec51 0b18 	vmov	r0, r1, d8
 800e24e:	f7f2 f9f3 	bl	8000638 <__aeabi_dmul>
 800e252:	4622      	mov	r2, r4
 800e254:	462b      	mov	r3, r5
 800e256:	f7f2 f837 	bl	80002c8 <__aeabi_dsub>
 800e25a:	4602      	mov	r2, r0
 800e25c:	460b      	mov	r3, r1
 800e25e:	4604      	mov	r4, r0
 800e260:	460d      	mov	r5, r1
 800e262:	4640      	mov	r0, r8
 800e264:	4649      	mov	r1, r9
 800e266:	f7f2 f82f 	bl	80002c8 <__aeabi_dsub>
 800e26a:	9a03      	ldr	r2, [sp, #12]
 800e26c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	2b31      	cmp	r3, #49	; 0x31
 800e274:	dc24      	bgt.n	800e2c0 <__ieee754_rem_pio2+0x288>
 800e276:	e9ca 0100 	strd	r0, r1, [sl]
 800e27a:	4646      	mov	r6, r8
 800e27c:	464f      	mov	r7, r9
 800e27e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e282:	4630      	mov	r0, r6
 800e284:	4642      	mov	r2, r8
 800e286:	464b      	mov	r3, r9
 800e288:	4639      	mov	r1, r7
 800e28a:	f7f2 f81d 	bl	80002c8 <__aeabi_dsub>
 800e28e:	462b      	mov	r3, r5
 800e290:	4622      	mov	r2, r4
 800e292:	f7f2 f819 	bl	80002c8 <__aeabi_dsub>
 800e296:	9b02      	ldr	r3, [sp, #8]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e29e:	f6bf af0b 	bge.w	800e0b8 <__ieee754_rem_pio2+0x80>
 800e2a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e2a6:	f8ca 3004 	str.w	r3, [sl, #4]
 800e2aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2ae:	f8ca 8000 	str.w	r8, [sl]
 800e2b2:	f8ca 0008 	str.w	r0, [sl, #8]
 800e2b6:	f8ca 300c 	str.w	r3, [sl, #12]
 800e2ba:	f1cb 0b00 	rsb	fp, fp, #0
 800e2be:	e6fb      	b.n	800e0b8 <__ieee754_rem_pio2+0x80>
 800e2c0:	a327      	add	r3, pc, #156	; (adr r3, 800e360 <__ieee754_rem_pio2+0x328>)
 800e2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c6:	ec51 0b18 	vmov	r0, r1, d8
 800e2ca:	f7f2 f9b5 	bl	8000638 <__aeabi_dmul>
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	460d      	mov	r5, r1
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	4640      	mov	r0, r8
 800e2d8:	4649      	mov	r1, r9
 800e2da:	f7f1 fff5 	bl	80002c8 <__aeabi_dsub>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	460f      	mov	r7, r1
 800e2e6:	4640      	mov	r0, r8
 800e2e8:	4649      	mov	r1, r9
 800e2ea:	f7f1 ffed 	bl	80002c8 <__aeabi_dsub>
 800e2ee:	4622      	mov	r2, r4
 800e2f0:	462b      	mov	r3, r5
 800e2f2:	f7f1 ffe9 	bl	80002c8 <__aeabi_dsub>
 800e2f6:	a31c      	add	r3, pc, #112	; (adr r3, 800e368 <__ieee754_rem_pio2+0x330>)
 800e2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	460d      	mov	r5, r1
 800e300:	ec51 0b18 	vmov	r0, r1, d8
 800e304:	f7f2 f998 	bl	8000638 <__aeabi_dmul>
 800e308:	4622      	mov	r2, r4
 800e30a:	462b      	mov	r3, r5
 800e30c:	f7f1 ffdc 	bl	80002c8 <__aeabi_dsub>
 800e310:	4604      	mov	r4, r0
 800e312:	460d      	mov	r5, r1
 800e314:	e760      	b.n	800e1d8 <__ieee754_rem_pio2+0x1a0>
 800e316:	4b1c      	ldr	r3, [pc, #112]	; (800e388 <__ieee754_rem_pio2+0x350>)
 800e318:	4598      	cmp	r8, r3
 800e31a:	dd37      	ble.n	800e38c <__ieee754_rem_pio2+0x354>
 800e31c:	ee10 2a10 	vmov	r2, s0
 800e320:	462b      	mov	r3, r5
 800e322:	4620      	mov	r0, r4
 800e324:	4629      	mov	r1, r5
 800e326:	f7f1 ffcf 	bl	80002c8 <__aeabi_dsub>
 800e32a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e32e:	e9ca 0100 	strd	r0, r1, [sl]
 800e332:	e695      	b.n	800e060 <__ieee754_rem_pio2+0x28>
 800e334:	f3af 8000 	nop.w
 800e338:	54400000 	.word	0x54400000
 800e33c:	3ff921fb 	.word	0x3ff921fb
 800e340:	1a626331 	.word	0x1a626331
 800e344:	3dd0b461 	.word	0x3dd0b461
 800e348:	1a600000 	.word	0x1a600000
 800e34c:	3dd0b461 	.word	0x3dd0b461
 800e350:	2e037073 	.word	0x2e037073
 800e354:	3ba3198a 	.word	0x3ba3198a
 800e358:	6dc9c883 	.word	0x6dc9c883
 800e35c:	3fe45f30 	.word	0x3fe45f30
 800e360:	2e000000 	.word	0x2e000000
 800e364:	3ba3198a 	.word	0x3ba3198a
 800e368:	252049c1 	.word	0x252049c1
 800e36c:	397b839a 	.word	0x397b839a
 800e370:	3fe921fb 	.word	0x3fe921fb
 800e374:	4002d97b 	.word	0x4002d97b
 800e378:	3ff921fb 	.word	0x3ff921fb
 800e37c:	413921fb 	.word	0x413921fb
 800e380:	3fe00000 	.word	0x3fe00000
 800e384:	0800f480 	.word	0x0800f480
 800e388:	7fefffff 	.word	0x7fefffff
 800e38c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e390:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e394:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e398:	4620      	mov	r0, r4
 800e39a:	460d      	mov	r5, r1
 800e39c:	f7f2 fbfc 	bl	8000b98 <__aeabi_d2iz>
 800e3a0:	f7f2 f8e0 	bl	8000564 <__aeabi_i2d>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	4629      	mov	r1, r5
 800e3ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3b0:	f7f1 ff8a 	bl	80002c8 <__aeabi_dsub>
 800e3b4:	4b21      	ldr	r3, [pc, #132]	; (800e43c <__ieee754_rem_pio2+0x404>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f7f2 f93e 	bl	8000638 <__aeabi_dmul>
 800e3bc:	460d      	mov	r5, r1
 800e3be:	4604      	mov	r4, r0
 800e3c0:	f7f2 fbea 	bl	8000b98 <__aeabi_d2iz>
 800e3c4:	f7f2 f8ce 	bl	8000564 <__aeabi_i2d>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	460b      	mov	r3, r1
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3d4:	f7f1 ff78 	bl	80002c8 <__aeabi_dsub>
 800e3d8:	4b18      	ldr	r3, [pc, #96]	; (800e43c <__ieee754_rem_pio2+0x404>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f7f2 f92c 	bl	8000638 <__aeabi_dmul>
 800e3e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e3e4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e3e8:	2703      	movs	r7, #3
 800e3ea:	2400      	movs	r4, #0
 800e3ec:	2500      	movs	r5, #0
 800e3ee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e3f2:	4622      	mov	r2, r4
 800e3f4:	462b      	mov	r3, r5
 800e3f6:	46b9      	mov	r9, r7
 800e3f8:	3f01      	subs	r7, #1
 800e3fa:	f7f2 fb85 	bl	8000b08 <__aeabi_dcmpeq>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d1f5      	bne.n	800e3ee <__ieee754_rem_pio2+0x3b6>
 800e402:	4b0f      	ldr	r3, [pc, #60]	; (800e440 <__ieee754_rem_pio2+0x408>)
 800e404:	9301      	str	r3, [sp, #4]
 800e406:	2302      	movs	r3, #2
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	4632      	mov	r2, r6
 800e40c:	464b      	mov	r3, r9
 800e40e:	4651      	mov	r1, sl
 800e410:	a804      	add	r0, sp, #16
 800e412:	f000 f8c9 	bl	800e5a8 <__kernel_rem_pio2>
 800e416:	9b02      	ldr	r3, [sp, #8]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	4683      	mov	fp, r0
 800e41c:	f6bf ae4c 	bge.w	800e0b8 <__ieee754_rem_pio2+0x80>
 800e420:	e9da 2100 	ldrd	r2, r1, [sl]
 800e424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e428:	e9ca 2300 	strd	r2, r3, [sl]
 800e42c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e430:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e434:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e438:	e73f      	b.n	800e2ba <__ieee754_rem_pio2+0x282>
 800e43a:	bf00      	nop
 800e43c:	41700000 	.word	0x41700000
 800e440:	0800f500 	.word	0x0800f500
 800e444:	00000000 	.word	0x00000000

0800e448 <scalbn>:
 800e448:	b570      	push	{r4, r5, r6, lr}
 800e44a:	ec55 4b10 	vmov	r4, r5, d0
 800e44e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e452:	4606      	mov	r6, r0
 800e454:	462b      	mov	r3, r5
 800e456:	b999      	cbnz	r1, 800e480 <scalbn+0x38>
 800e458:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e45c:	4323      	orrs	r3, r4
 800e45e:	d03f      	beq.n	800e4e0 <scalbn+0x98>
 800e460:	4b35      	ldr	r3, [pc, #212]	; (800e538 <scalbn+0xf0>)
 800e462:	4629      	mov	r1, r5
 800e464:	ee10 0a10 	vmov	r0, s0
 800e468:	2200      	movs	r2, #0
 800e46a:	f7f2 f8e5 	bl	8000638 <__aeabi_dmul>
 800e46e:	4b33      	ldr	r3, [pc, #204]	; (800e53c <scalbn+0xf4>)
 800e470:	429e      	cmp	r6, r3
 800e472:	4604      	mov	r4, r0
 800e474:	460d      	mov	r5, r1
 800e476:	da10      	bge.n	800e49a <scalbn+0x52>
 800e478:	a327      	add	r3, pc, #156	; (adr r3, 800e518 <scalbn+0xd0>)
 800e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47e:	e01f      	b.n	800e4c0 <scalbn+0x78>
 800e480:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e484:	4291      	cmp	r1, r2
 800e486:	d10c      	bne.n	800e4a2 <scalbn+0x5a>
 800e488:	ee10 2a10 	vmov	r2, s0
 800e48c:	4620      	mov	r0, r4
 800e48e:	4629      	mov	r1, r5
 800e490:	f7f1 ff1c 	bl	80002cc <__adddf3>
 800e494:	4604      	mov	r4, r0
 800e496:	460d      	mov	r5, r1
 800e498:	e022      	b.n	800e4e0 <scalbn+0x98>
 800e49a:	460b      	mov	r3, r1
 800e49c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e4a0:	3936      	subs	r1, #54	; 0x36
 800e4a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e4a6:	4296      	cmp	r6, r2
 800e4a8:	dd0d      	ble.n	800e4c6 <scalbn+0x7e>
 800e4aa:	2d00      	cmp	r5, #0
 800e4ac:	a11c      	add	r1, pc, #112	; (adr r1, 800e520 <scalbn+0xd8>)
 800e4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4b2:	da02      	bge.n	800e4ba <scalbn+0x72>
 800e4b4:	a11c      	add	r1, pc, #112	; (adr r1, 800e528 <scalbn+0xe0>)
 800e4b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4ba:	a319      	add	r3, pc, #100	; (adr r3, 800e520 <scalbn+0xd8>)
 800e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c0:	f7f2 f8ba 	bl	8000638 <__aeabi_dmul>
 800e4c4:	e7e6      	b.n	800e494 <scalbn+0x4c>
 800e4c6:	1872      	adds	r2, r6, r1
 800e4c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e4cc:	428a      	cmp	r2, r1
 800e4ce:	dcec      	bgt.n	800e4aa <scalbn+0x62>
 800e4d0:	2a00      	cmp	r2, #0
 800e4d2:	dd08      	ble.n	800e4e6 <scalbn+0x9e>
 800e4d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4e0:	ec45 4b10 	vmov	d0, r4, r5
 800e4e4:	bd70      	pop	{r4, r5, r6, pc}
 800e4e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e4ea:	da08      	bge.n	800e4fe <scalbn+0xb6>
 800e4ec:	2d00      	cmp	r5, #0
 800e4ee:	a10a      	add	r1, pc, #40	; (adr r1, 800e518 <scalbn+0xd0>)
 800e4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4f4:	dac0      	bge.n	800e478 <scalbn+0x30>
 800e4f6:	a10e      	add	r1, pc, #56	; (adr r1, 800e530 <scalbn+0xe8>)
 800e4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4fc:	e7bc      	b.n	800e478 <scalbn+0x30>
 800e4fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e502:	3236      	adds	r2, #54	; 0x36
 800e504:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e508:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e50c:	4620      	mov	r0, r4
 800e50e:	4b0c      	ldr	r3, [pc, #48]	; (800e540 <scalbn+0xf8>)
 800e510:	2200      	movs	r2, #0
 800e512:	e7d5      	b.n	800e4c0 <scalbn+0x78>
 800e514:	f3af 8000 	nop.w
 800e518:	c2f8f359 	.word	0xc2f8f359
 800e51c:	01a56e1f 	.word	0x01a56e1f
 800e520:	8800759c 	.word	0x8800759c
 800e524:	7e37e43c 	.word	0x7e37e43c
 800e528:	8800759c 	.word	0x8800759c
 800e52c:	fe37e43c 	.word	0xfe37e43c
 800e530:	c2f8f359 	.word	0xc2f8f359
 800e534:	81a56e1f 	.word	0x81a56e1f
 800e538:	43500000 	.word	0x43500000
 800e53c:	ffff3cb0 	.word	0xffff3cb0
 800e540:	3c900000 	.word	0x3c900000

0800e544 <with_errno>:
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	4604      	mov	r4, r0
 800e548:	460d      	mov	r5, r1
 800e54a:	4616      	mov	r6, r2
 800e54c:	f7fc fb4e 	bl	800abec <__errno>
 800e550:	4629      	mov	r1, r5
 800e552:	6006      	str	r6, [r0, #0]
 800e554:	4620      	mov	r0, r4
 800e556:	bd70      	pop	{r4, r5, r6, pc}

0800e558 <xflow>:
 800e558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e55a:	4614      	mov	r4, r2
 800e55c:	461d      	mov	r5, r3
 800e55e:	b108      	cbz	r0, 800e564 <xflow+0xc>
 800e560:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e564:	e9cd 2300 	strd	r2, r3, [sp]
 800e568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e56c:	4620      	mov	r0, r4
 800e56e:	4629      	mov	r1, r5
 800e570:	f7f2 f862 	bl	8000638 <__aeabi_dmul>
 800e574:	2222      	movs	r2, #34	; 0x22
 800e576:	b003      	add	sp, #12
 800e578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e57c:	f7ff bfe2 	b.w	800e544 <with_errno>

0800e580 <__math_uflow>:
 800e580:	b508      	push	{r3, lr}
 800e582:	2200      	movs	r2, #0
 800e584:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e588:	f7ff ffe6 	bl	800e558 <xflow>
 800e58c:	ec41 0b10 	vmov	d0, r0, r1
 800e590:	bd08      	pop	{r3, pc}

0800e592 <__math_oflow>:
 800e592:	b508      	push	{r3, lr}
 800e594:	2200      	movs	r2, #0
 800e596:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e59a:	f7ff ffdd 	bl	800e558 <xflow>
 800e59e:	ec41 0b10 	vmov	d0, r0, r1
 800e5a2:	bd08      	pop	{r3, pc}
 800e5a4:	0000      	movs	r0, r0
	...

0800e5a8 <__kernel_rem_pio2>:
 800e5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ac:	ed2d 8b02 	vpush	{d8}
 800e5b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e5b4:	f112 0f14 	cmn.w	r2, #20
 800e5b8:	9306      	str	r3, [sp, #24]
 800e5ba:	9104      	str	r1, [sp, #16]
 800e5bc:	4bc2      	ldr	r3, [pc, #776]	; (800e8c8 <__kernel_rem_pio2+0x320>)
 800e5be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e5c0:	9009      	str	r0, [sp, #36]	; 0x24
 800e5c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5c6:	9300      	str	r3, [sp, #0]
 800e5c8:	9b06      	ldr	r3, [sp, #24]
 800e5ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e5ce:	bfa8      	it	ge
 800e5d0:	1ed4      	subge	r4, r2, #3
 800e5d2:	9305      	str	r3, [sp, #20]
 800e5d4:	bfb2      	itee	lt
 800e5d6:	2400      	movlt	r4, #0
 800e5d8:	2318      	movge	r3, #24
 800e5da:	fb94 f4f3 	sdivge	r4, r4, r3
 800e5de:	f06f 0317 	mvn.w	r3, #23
 800e5e2:	fb04 3303 	mla	r3, r4, r3, r3
 800e5e6:	eb03 0a02 	add.w	sl, r3, r2
 800e5ea:	9b00      	ldr	r3, [sp, #0]
 800e5ec:	9a05      	ldr	r2, [sp, #20]
 800e5ee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e8b8 <__kernel_rem_pio2+0x310>
 800e5f2:	eb03 0802 	add.w	r8, r3, r2
 800e5f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e5f8:	1aa7      	subs	r7, r4, r2
 800e5fa:	ae20      	add	r6, sp, #128	; 0x80
 800e5fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e600:	2500      	movs	r5, #0
 800e602:	4545      	cmp	r5, r8
 800e604:	dd13      	ble.n	800e62e <__kernel_rem_pio2+0x86>
 800e606:	9b06      	ldr	r3, [sp, #24]
 800e608:	aa20      	add	r2, sp, #128	; 0x80
 800e60a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e60e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e612:	f04f 0800 	mov.w	r8, #0
 800e616:	9b00      	ldr	r3, [sp, #0]
 800e618:	4598      	cmp	r8, r3
 800e61a:	dc31      	bgt.n	800e680 <__kernel_rem_pio2+0xd8>
 800e61c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e8b8 <__kernel_rem_pio2+0x310>
 800e620:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e624:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e628:	462f      	mov	r7, r5
 800e62a:	2600      	movs	r6, #0
 800e62c:	e01b      	b.n	800e666 <__kernel_rem_pio2+0xbe>
 800e62e:	42ef      	cmn	r7, r5
 800e630:	d407      	bmi.n	800e642 <__kernel_rem_pio2+0x9a>
 800e632:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e636:	f7f1 ff95 	bl	8000564 <__aeabi_i2d>
 800e63a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e63e:	3501      	adds	r5, #1
 800e640:	e7df      	b.n	800e602 <__kernel_rem_pio2+0x5a>
 800e642:	ec51 0b18 	vmov	r0, r1, d8
 800e646:	e7f8      	b.n	800e63a <__kernel_rem_pio2+0x92>
 800e648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e64c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e650:	f7f1 fff2 	bl	8000638 <__aeabi_dmul>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e65c:	f7f1 fe36 	bl	80002cc <__adddf3>
 800e660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e664:	3601      	adds	r6, #1
 800e666:	9b05      	ldr	r3, [sp, #20]
 800e668:	429e      	cmp	r6, r3
 800e66a:	f1a7 0708 	sub.w	r7, r7, #8
 800e66e:	ddeb      	ble.n	800e648 <__kernel_rem_pio2+0xa0>
 800e670:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e674:	f108 0801 	add.w	r8, r8, #1
 800e678:	ecab 7b02 	vstmia	fp!, {d7}
 800e67c:	3508      	adds	r5, #8
 800e67e:	e7ca      	b.n	800e616 <__kernel_rem_pio2+0x6e>
 800e680:	9b00      	ldr	r3, [sp, #0]
 800e682:	aa0c      	add	r2, sp, #48	; 0x30
 800e684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e688:	930b      	str	r3, [sp, #44]	; 0x2c
 800e68a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e68c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e690:	9c00      	ldr	r4, [sp, #0]
 800e692:	930a      	str	r3, [sp, #40]	; 0x28
 800e694:	00e3      	lsls	r3, r4, #3
 800e696:	9308      	str	r3, [sp, #32]
 800e698:	ab98      	add	r3, sp, #608	; 0x260
 800e69a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e69e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e6a2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e6a6:	ab70      	add	r3, sp, #448	; 0x1c0
 800e6a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e6ac:	46c3      	mov	fp, r8
 800e6ae:	46a1      	mov	r9, r4
 800e6b0:	f1b9 0f00 	cmp.w	r9, #0
 800e6b4:	f1a5 0508 	sub.w	r5, r5, #8
 800e6b8:	dc77      	bgt.n	800e7aa <__kernel_rem_pio2+0x202>
 800e6ba:	ec47 6b10 	vmov	d0, r6, r7
 800e6be:	4650      	mov	r0, sl
 800e6c0:	f7ff fec2 	bl	800e448 <scalbn>
 800e6c4:	ec57 6b10 	vmov	r6, r7, d0
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e6ce:	ee10 0a10 	vmov	r0, s0
 800e6d2:	4639      	mov	r1, r7
 800e6d4:	f7f1 ffb0 	bl	8000638 <__aeabi_dmul>
 800e6d8:	ec41 0b10 	vmov	d0, r0, r1
 800e6dc:	f000 fab4 	bl	800ec48 <floor>
 800e6e0:	4b7a      	ldr	r3, [pc, #488]	; (800e8cc <__kernel_rem_pio2+0x324>)
 800e6e2:	ec51 0b10 	vmov	r0, r1, d0
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f7f1 ffa6 	bl	8000638 <__aeabi_dmul>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	4639      	mov	r1, r7
 800e6f4:	f7f1 fde8 	bl	80002c8 <__aeabi_dsub>
 800e6f8:	460f      	mov	r7, r1
 800e6fa:	4606      	mov	r6, r0
 800e6fc:	f7f2 fa4c 	bl	8000b98 <__aeabi_d2iz>
 800e700:	9002      	str	r0, [sp, #8]
 800e702:	f7f1 ff2f 	bl	8000564 <__aeabi_i2d>
 800e706:	4602      	mov	r2, r0
 800e708:	460b      	mov	r3, r1
 800e70a:	4630      	mov	r0, r6
 800e70c:	4639      	mov	r1, r7
 800e70e:	f7f1 fddb 	bl	80002c8 <__aeabi_dsub>
 800e712:	f1ba 0f00 	cmp.w	sl, #0
 800e716:	4606      	mov	r6, r0
 800e718:	460f      	mov	r7, r1
 800e71a:	dd6d      	ble.n	800e7f8 <__kernel_rem_pio2+0x250>
 800e71c:	1e61      	subs	r1, r4, #1
 800e71e:	ab0c      	add	r3, sp, #48	; 0x30
 800e720:	9d02      	ldr	r5, [sp, #8]
 800e722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e726:	f1ca 0018 	rsb	r0, sl, #24
 800e72a:	fa43 f200 	asr.w	r2, r3, r0
 800e72e:	4415      	add	r5, r2
 800e730:	4082      	lsls	r2, r0
 800e732:	1a9b      	subs	r3, r3, r2
 800e734:	aa0c      	add	r2, sp, #48	; 0x30
 800e736:	9502      	str	r5, [sp, #8]
 800e738:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e73c:	f1ca 0217 	rsb	r2, sl, #23
 800e740:	fa43 fb02 	asr.w	fp, r3, r2
 800e744:	f1bb 0f00 	cmp.w	fp, #0
 800e748:	dd65      	ble.n	800e816 <__kernel_rem_pio2+0x26e>
 800e74a:	9b02      	ldr	r3, [sp, #8]
 800e74c:	2200      	movs	r2, #0
 800e74e:	3301      	adds	r3, #1
 800e750:	9302      	str	r3, [sp, #8]
 800e752:	4615      	mov	r5, r2
 800e754:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e758:	4294      	cmp	r4, r2
 800e75a:	f300 809f 	bgt.w	800e89c <__kernel_rem_pio2+0x2f4>
 800e75e:	f1ba 0f00 	cmp.w	sl, #0
 800e762:	dd07      	ble.n	800e774 <__kernel_rem_pio2+0x1cc>
 800e764:	f1ba 0f01 	cmp.w	sl, #1
 800e768:	f000 80c1 	beq.w	800e8ee <__kernel_rem_pio2+0x346>
 800e76c:	f1ba 0f02 	cmp.w	sl, #2
 800e770:	f000 80c7 	beq.w	800e902 <__kernel_rem_pio2+0x35a>
 800e774:	f1bb 0f02 	cmp.w	fp, #2
 800e778:	d14d      	bne.n	800e816 <__kernel_rem_pio2+0x26e>
 800e77a:	4632      	mov	r2, r6
 800e77c:	463b      	mov	r3, r7
 800e77e:	4954      	ldr	r1, [pc, #336]	; (800e8d0 <__kernel_rem_pio2+0x328>)
 800e780:	2000      	movs	r0, #0
 800e782:	f7f1 fda1 	bl	80002c8 <__aeabi_dsub>
 800e786:	4606      	mov	r6, r0
 800e788:	460f      	mov	r7, r1
 800e78a:	2d00      	cmp	r5, #0
 800e78c:	d043      	beq.n	800e816 <__kernel_rem_pio2+0x26e>
 800e78e:	4650      	mov	r0, sl
 800e790:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e8c0 <__kernel_rem_pio2+0x318>
 800e794:	f7ff fe58 	bl	800e448 <scalbn>
 800e798:	4630      	mov	r0, r6
 800e79a:	4639      	mov	r1, r7
 800e79c:	ec53 2b10 	vmov	r2, r3, d0
 800e7a0:	f7f1 fd92 	bl	80002c8 <__aeabi_dsub>
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	460f      	mov	r7, r1
 800e7a8:	e035      	b.n	800e816 <__kernel_rem_pio2+0x26e>
 800e7aa:	4b4a      	ldr	r3, [pc, #296]	; (800e8d4 <__kernel_rem_pio2+0x32c>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	4639      	mov	r1, r7
 800e7b2:	f7f1 ff41 	bl	8000638 <__aeabi_dmul>
 800e7b6:	f7f2 f9ef 	bl	8000b98 <__aeabi_d2iz>
 800e7ba:	f7f1 fed3 	bl	8000564 <__aeabi_i2d>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	ec43 2b18 	vmov	d8, r2, r3
 800e7c6:	4b44      	ldr	r3, [pc, #272]	; (800e8d8 <__kernel_rem_pio2+0x330>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f7f1 ff35 	bl	8000638 <__aeabi_dmul>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	4639      	mov	r1, r7
 800e7d6:	f7f1 fd77 	bl	80002c8 <__aeabi_dsub>
 800e7da:	f7f2 f9dd 	bl	8000b98 <__aeabi_d2iz>
 800e7de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e7e2:	f84b 0b04 	str.w	r0, [fp], #4
 800e7e6:	ec51 0b18 	vmov	r0, r1, d8
 800e7ea:	f7f1 fd6f 	bl	80002cc <__adddf3>
 800e7ee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e7f2:	4606      	mov	r6, r0
 800e7f4:	460f      	mov	r7, r1
 800e7f6:	e75b      	b.n	800e6b0 <__kernel_rem_pio2+0x108>
 800e7f8:	d106      	bne.n	800e808 <__kernel_rem_pio2+0x260>
 800e7fa:	1e63      	subs	r3, r4, #1
 800e7fc:	aa0c      	add	r2, sp, #48	; 0x30
 800e7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e802:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e806:	e79d      	b.n	800e744 <__kernel_rem_pio2+0x19c>
 800e808:	4b34      	ldr	r3, [pc, #208]	; (800e8dc <__kernel_rem_pio2+0x334>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	f7f2 f99a 	bl	8000b44 <__aeabi_dcmpge>
 800e810:	2800      	cmp	r0, #0
 800e812:	d140      	bne.n	800e896 <__kernel_rem_pio2+0x2ee>
 800e814:	4683      	mov	fp, r0
 800e816:	2200      	movs	r2, #0
 800e818:	2300      	movs	r3, #0
 800e81a:	4630      	mov	r0, r6
 800e81c:	4639      	mov	r1, r7
 800e81e:	f7f2 f973 	bl	8000b08 <__aeabi_dcmpeq>
 800e822:	2800      	cmp	r0, #0
 800e824:	f000 80c1 	beq.w	800e9aa <__kernel_rem_pio2+0x402>
 800e828:	1e65      	subs	r5, r4, #1
 800e82a:	462b      	mov	r3, r5
 800e82c:	2200      	movs	r2, #0
 800e82e:	9900      	ldr	r1, [sp, #0]
 800e830:	428b      	cmp	r3, r1
 800e832:	da6d      	bge.n	800e910 <__kernel_rem_pio2+0x368>
 800e834:	2a00      	cmp	r2, #0
 800e836:	f000 808a 	beq.w	800e94e <__kernel_rem_pio2+0x3a6>
 800e83a:	ab0c      	add	r3, sp, #48	; 0x30
 800e83c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e840:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e844:	2b00      	cmp	r3, #0
 800e846:	f000 80ae 	beq.w	800e9a6 <__kernel_rem_pio2+0x3fe>
 800e84a:	4650      	mov	r0, sl
 800e84c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e8c0 <__kernel_rem_pio2+0x318>
 800e850:	f7ff fdfa 	bl	800e448 <scalbn>
 800e854:	1c6b      	adds	r3, r5, #1
 800e856:	00da      	lsls	r2, r3, #3
 800e858:	9205      	str	r2, [sp, #20]
 800e85a:	ec57 6b10 	vmov	r6, r7, d0
 800e85e:	aa70      	add	r2, sp, #448	; 0x1c0
 800e860:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e8d4 <__kernel_rem_pio2+0x32c>
 800e864:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e868:	462c      	mov	r4, r5
 800e86a:	f04f 0800 	mov.w	r8, #0
 800e86e:	2c00      	cmp	r4, #0
 800e870:	f280 80d4 	bge.w	800ea1c <__kernel_rem_pio2+0x474>
 800e874:	462c      	mov	r4, r5
 800e876:	2c00      	cmp	r4, #0
 800e878:	f2c0 8102 	blt.w	800ea80 <__kernel_rem_pio2+0x4d8>
 800e87c:	4b18      	ldr	r3, [pc, #96]	; (800e8e0 <__kernel_rem_pio2+0x338>)
 800e87e:	461e      	mov	r6, r3
 800e880:	ab70      	add	r3, sp, #448	; 0x1c0
 800e882:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e886:	1b2b      	subs	r3, r5, r4
 800e888:	f04f 0900 	mov.w	r9, #0
 800e88c:	f04f 0a00 	mov.w	sl, #0
 800e890:	2700      	movs	r7, #0
 800e892:	9306      	str	r3, [sp, #24]
 800e894:	e0e6      	b.n	800ea64 <__kernel_rem_pio2+0x4bc>
 800e896:	f04f 0b02 	mov.w	fp, #2
 800e89a:	e756      	b.n	800e74a <__kernel_rem_pio2+0x1a2>
 800e89c:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a0:	bb05      	cbnz	r5, 800e8e4 <__kernel_rem_pio2+0x33c>
 800e8a2:	b123      	cbz	r3, 800e8ae <__kernel_rem_pio2+0x306>
 800e8a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e8a8:	f8c8 3000 	str.w	r3, [r8]
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	3201      	adds	r2, #1
 800e8b0:	f108 0804 	add.w	r8, r8, #4
 800e8b4:	461d      	mov	r5, r3
 800e8b6:	e74f      	b.n	800e758 <__kernel_rem_pio2+0x1b0>
	...
 800e8c4:	3ff00000 	.word	0x3ff00000
 800e8c8:	0800f648 	.word	0x0800f648
 800e8cc:	40200000 	.word	0x40200000
 800e8d0:	3ff00000 	.word	0x3ff00000
 800e8d4:	3e700000 	.word	0x3e700000
 800e8d8:	41700000 	.word	0x41700000
 800e8dc:	3fe00000 	.word	0x3fe00000
 800e8e0:	0800f608 	.word	0x0800f608
 800e8e4:	1acb      	subs	r3, r1, r3
 800e8e6:	f8c8 3000 	str.w	r3, [r8]
 800e8ea:	462b      	mov	r3, r5
 800e8ec:	e7df      	b.n	800e8ae <__kernel_rem_pio2+0x306>
 800e8ee:	1e62      	subs	r2, r4, #1
 800e8f0:	ab0c      	add	r3, sp, #48	; 0x30
 800e8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e8fa:	a90c      	add	r1, sp, #48	; 0x30
 800e8fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e900:	e738      	b.n	800e774 <__kernel_rem_pio2+0x1cc>
 800e902:	1e62      	subs	r2, r4, #1
 800e904:	ab0c      	add	r3, sp, #48	; 0x30
 800e906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e90a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e90e:	e7f4      	b.n	800e8fa <__kernel_rem_pio2+0x352>
 800e910:	a90c      	add	r1, sp, #48	; 0x30
 800e912:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e916:	3b01      	subs	r3, #1
 800e918:	430a      	orrs	r2, r1
 800e91a:	e788      	b.n	800e82e <__kernel_rem_pio2+0x286>
 800e91c:	3301      	adds	r3, #1
 800e91e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e922:	2900      	cmp	r1, #0
 800e924:	d0fa      	beq.n	800e91c <__kernel_rem_pio2+0x374>
 800e926:	9a08      	ldr	r2, [sp, #32]
 800e928:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e92c:	446a      	add	r2, sp
 800e92e:	3a98      	subs	r2, #152	; 0x98
 800e930:	9208      	str	r2, [sp, #32]
 800e932:	9a06      	ldr	r2, [sp, #24]
 800e934:	a920      	add	r1, sp, #128	; 0x80
 800e936:	18a2      	adds	r2, r4, r2
 800e938:	18e3      	adds	r3, r4, r3
 800e93a:	f104 0801 	add.w	r8, r4, #1
 800e93e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e942:	9302      	str	r3, [sp, #8]
 800e944:	9b02      	ldr	r3, [sp, #8]
 800e946:	4543      	cmp	r3, r8
 800e948:	da04      	bge.n	800e954 <__kernel_rem_pio2+0x3ac>
 800e94a:	461c      	mov	r4, r3
 800e94c:	e6a2      	b.n	800e694 <__kernel_rem_pio2+0xec>
 800e94e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e950:	2301      	movs	r3, #1
 800e952:	e7e4      	b.n	800e91e <__kernel_rem_pio2+0x376>
 800e954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e956:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e95a:	f7f1 fe03 	bl	8000564 <__aeabi_i2d>
 800e95e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e964:	46ab      	mov	fp, r5
 800e966:	461c      	mov	r4, r3
 800e968:	f04f 0900 	mov.w	r9, #0
 800e96c:	2600      	movs	r6, #0
 800e96e:	2700      	movs	r7, #0
 800e970:	9b05      	ldr	r3, [sp, #20]
 800e972:	4599      	cmp	r9, r3
 800e974:	dd06      	ble.n	800e984 <__kernel_rem_pio2+0x3dc>
 800e976:	9b08      	ldr	r3, [sp, #32]
 800e978:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e97c:	f108 0801 	add.w	r8, r8, #1
 800e980:	9308      	str	r3, [sp, #32]
 800e982:	e7df      	b.n	800e944 <__kernel_rem_pio2+0x39c>
 800e984:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e988:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e98c:	f7f1 fe54 	bl	8000638 <__aeabi_dmul>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	4630      	mov	r0, r6
 800e996:	4639      	mov	r1, r7
 800e998:	f7f1 fc98 	bl	80002cc <__adddf3>
 800e99c:	f109 0901 	add.w	r9, r9, #1
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	460f      	mov	r7, r1
 800e9a4:	e7e4      	b.n	800e970 <__kernel_rem_pio2+0x3c8>
 800e9a6:	3d01      	subs	r5, #1
 800e9a8:	e747      	b.n	800e83a <__kernel_rem_pio2+0x292>
 800e9aa:	ec47 6b10 	vmov	d0, r6, r7
 800e9ae:	f1ca 0000 	rsb	r0, sl, #0
 800e9b2:	f7ff fd49 	bl	800e448 <scalbn>
 800e9b6:	ec57 6b10 	vmov	r6, r7, d0
 800e9ba:	4ba0      	ldr	r3, [pc, #640]	; (800ec3c <__kernel_rem_pio2+0x694>)
 800e9bc:	ee10 0a10 	vmov	r0, s0
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	4639      	mov	r1, r7
 800e9c4:	f7f2 f8be 	bl	8000b44 <__aeabi_dcmpge>
 800e9c8:	b1f8      	cbz	r0, 800ea0a <__kernel_rem_pio2+0x462>
 800e9ca:	4b9d      	ldr	r3, [pc, #628]	; (800ec40 <__kernel_rem_pio2+0x698>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	4639      	mov	r1, r7
 800e9d2:	f7f1 fe31 	bl	8000638 <__aeabi_dmul>
 800e9d6:	f7f2 f8df 	bl	8000b98 <__aeabi_d2iz>
 800e9da:	4680      	mov	r8, r0
 800e9dc:	f7f1 fdc2 	bl	8000564 <__aeabi_i2d>
 800e9e0:	4b96      	ldr	r3, [pc, #600]	; (800ec3c <__kernel_rem_pio2+0x694>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f7f1 fe28 	bl	8000638 <__aeabi_dmul>
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f7f1 fc6a 	bl	80002c8 <__aeabi_dsub>
 800e9f4:	f7f2 f8d0 	bl	8000b98 <__aeabi_d2iz>
 800e9f8:	1c65      	adds	r5, r4, #1
 800e9fa:	ab0c      	add	r3, sp, #48	; 0x30
 800e9fc:	f10a 0a18 	add.w	sl, sl, #24
 800ea00:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ea04:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ea08:	e71f      	b.n	800e84a <__kernel_rem_pio2+0x2a2>
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	4639      	mov	r1, r7
 800ea0e:	f7f2 f8c3 	bl	8000b98 <__aeabi_d2iz>
 800ea12:	ab0c      	add	r3, sp, #48	; 0x30
 800ea14:	4625      	mov	r5, r4
 800ea16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ea1a:	e716      	b.n	800e84a <__kernel_rem_pio2+0x2a2>
 800ea1c:	ab0c      	add	r3, sp, #48	; 0x30
 800ea1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ea22:	f7f1 fd9f 	bl	8000564 <__aeabi_i2d>
 800ea26:	4632      	mov	r2, r6
 800ea28:	463b      	mov	r3, r7
 800ea2a:	f7f1 fe05 	bl	8000638 <__aeabi_dmul>
 800ea2e:	4642      	mov	r2, r8
 800ea30:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ea34:	464b      	mov	r3, r9
 800ea36:	4630      	mov	r0, r6
 800ea38:	4639      	mov	r1, r7
 800ea3a:	f7f1 fdfd 	bl	8000638 <__aeabi_dmul>
 800ea3e:	3c01      	subs	r4, #1
 800ea40:	4606      	mov	r6, r0
 800ea42:	460f      	mov	r7, r1
 800ea44:	e713      	b.n	800e86e <__kernel_rem_pio2+0x2c6>
 800ea46:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ea4a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ea4e:	f7f1 fdf3 	bl	8000638 <__aeabi_dmul>
 800ea52:	4602      	mov	r2, r0
 800ea54:	460b      	mov	r3, r1
 800ea56:	4648      	mov	r0, r9
 800ea58:	4651      	mov	r1, sl
 800ea5a:	f7f1 fc37 	bl	80002cc <__adddf3>
 800ea5e:	3701      	adds	r7, #1
 800ea60:	4681      	mov	r9, r0
 800ea62:	468a      	mov	sl, r1
 800ea64:	9b00      	ldr	r3, [sp, #0]
 800ea66:	429f      	cmp	r7, r3
 800ea68:	dc02      	bgt.n	800ea70 <__kernel_rem_pio2+0x4c8>
 800ea6a:	9b06      	ldr	r3, [sp, #24]
 800ea6c:	429f      	cmp	r7, r3
 800ea6e:	ddea      	ble.n	800ea46 <__kernel_rem_pio2+0x49e>
 800ea70:	9a06      	ldr	r2, [sp, #24]
 800ea72:	ab48      	add	r3, sp, #288	; 0x120
 800ea74:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ea78:	e9c6 9a00 	strd	r9, sl, [r6]
 800ea7c:	3c01      	subs	r4, #1
 800ea7e:	e6fa      	b.n	800e876 <__kernel_rem_pio2+0x2ce>
 800ea80:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ea82:	2b02      	cmp	r3, #2
 800ea84:	dc0b      	bgt.n	800ea9e <__kernel_rem_pio2+0x4f6>
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	dc39      	bgt.n	800eafe <__kernel_rem_pio2+0x556>
 800ea8a:	d05d      	beq.n	800eb48 <__kernel_rem_pio2+0x5a0>
 800ea8c:	9b02      	ldr	r3, [sp, #8]
 800ea8e:	f003 0007 	and.w	r0, r3, #7
 800ea92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ea96:	ecbd 8b02 	vpop	{d8}
 800ea9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800eaa0:	2b03      	cmp	r3, #3
 800eaa2:	d1f3      	bne.n	800ea8c <__kernel_rem_pio2+0x4e4>
 800eaa4:	9b05      	ldr	r3, [sp, #20]
 800eaa6:	9500      	str	r5, [sp, #0]
 800eaa8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800eaac:	eb0d 0403 	add.w	r4, sp, r3
 800eab0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800eab4:	46a2      	mov	sl, r4
 800eab6:	9b00      	ldr	r3, [sp, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f1aa 0a08 	sub.w	sl, sl, #8
 800eabe:	dc69      	bgt.n	800eb94 <__kernel_rem_pio2+0x5ec>
 800eac0:	46aa      	mov	sl, r5
 800eac2:	f1ba 0f01 	cmp.w	sl, #1
 800eac6:	f1a4 0408 	sub.w	r4, r4, #8
 800eaca:	f300 8083 	bgt.w	800ebd4 <__kernel_rem_pio2+0x62c>
 800eace:	9c05      	ldr	r4, [sp, #20]
 800ead0:	ab48      	add	r3, sp, #288	; 0x120
 800ead2:	441c      	add	r4, r3
 800ead4:	2000      	movs	r0, #0
 800ead6:	2100      	movs	r1, #0
 800ead8:	2d01      	cmp	r5, #1
 800eada:	f300 809a 	bgt.w	800ec12 <__kernel_rem_pio2+0x66a>
 800eade:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800eae2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800eae6:	f1bb 0f00 	cmp.w	fp, #0
 800eaea:	f040 8098 	bne.w	800ec1e <__kernel_rem_pio2+0x676>
 800eaee:	9b04      	ldr	r3, [sp, #16]
 800eaf0:	e9c3 7800 	strd	r7, r8, [r3]
 800eaf4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800eaf8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800eafc:	e7c6      	b.n	800ea8c <__kernel_rem_pio2+0x4e4>
 800eafe:	9e05      	ldr	r6, [sp, #20]
 800eb00:	ab48      	add	r3, sp, #288	; 0x120
 800eb02:	441e      	add	r6, r3
 800eb04:	462c      	mov	r4, r5
 800eb06:	2000      	movs	r0, #0
 800eb08:	2100      	movs	r1, #0
 800eb0a:	2c00      	cmp	r4, #0
 800eb0c:	da33      	bge.n	800eb76 <__kernel_rem_pio2+0x5ce>
 800eb0e:	f1bb 0f00 	cmp.w	fp, #0
 800eb12:	d036      	beq.n	800eb82 <__kernel_rem_pio2+0x5da>
 800eb14:	4602      	mov	r2, r0
 800eb16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb1a:	9c04      	ldr	r4, [sp, #16]
 800eb1c:	e9c4 2300 	strd	r2, r3, [r4]
 800eb20:	4602      	mov	r2, r0
 800eb22:	460b      	mov	r3, r1
 800eb24:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800eb28:	f7f1 fbce 	bl	80002c8 <__aeabi_dsub>
 800eb2c:	ae4a      	add	r6, sp, #296	; 0x128
 800eb2e:	2401      	movs	r4, #1
 800eb30:	42a5      	cmp	r5, r4
 800eb32:	da29      	bge.n	800eb88 <__kernel_rem_pio2+0x5e0>
 800eb34:	f1bb 0f00 	cmp.w	fp, #0
 800eb38:	d002      	beq.n	800eb40 <__kernel_rem_pio2+0x598>
 800eb3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb3e:	4619      	mov	r1, r3
 800eb40:	9b04      	ldr	r3, [sp, #16]
 800eb42:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eb46:	e7a1      	b.n	800ea8c <__kernel_rem_pio2+0x4e4>
 800eb48:	9c05      	ldr	r4, [sp, #20]
 800eb4a:	ab48      	add	r3, sp, #288	; 0x120
 800eb4c:	441c      	add	r4, r3
 800eb4e:	2000      	movs	r0, #0
 800eb50:	2100      	movs	r1, #0
 800eb52:	2d00      	cmp	r5, #0
 800eb54:	da09      	bge.n	800eb6a <__kernel_rem_pio2+0x5c2>
 800eb56:	f1bb 0f00 	cmp.w	fp, #0
 800eb5a:	d002      	beq.n	800eb62 <__kernel_rem_pio2+0x5ba>
 800eb5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb60:	4619      	mov	r1, r3
 800eb62:	9b04      	ldr	r3, [sp, #16]
 800eb64:	e9c3 0100 	strd	r0, r1, [r3]
 800eb68:	e790      	b.n	800ea8c <__kernel_rem_pio2+0x4e4>
 800eb6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eb6e:	f7f1 fbad 	bl	80002cc <__adddf3>
 800eb72:	3d01      	subs	r5, #1
 800eb74:	e7ed      	b.n	800eb52 <__kernel_rem_pio2+0x5aa>
 800eb76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800eb7a:	f7f1 fba7 	bl	80002cc <__adddf3>
 800eb7e:	3c01      	subs	r4, #1
 800eb80:	e7c3      	b.n	800eb0a <__kernel_rem_pio2+0x562>
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	e7c8      	b.n	800eb1a <__kernel_rem_pio2+0x572>
 800eb88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800eb8c:	f7f1 fb9e 	bl	80002cc <__adddf3>
 800eb90:	3401      	adds	r4, #1
 800eb92:	e7cd      	b.n	800eb30 <__kernel_rem_pio2+0x588>
 800eb94:	e9da 8900 	ldrd	r8, r9, [sl]
 800eb98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800eb9c:	9b00      	ldr	r3, [sp, #0]
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	4632      	mov	r2, r6
 800eba4:	463b      	mov	r3, r7
 800eba6:	4640      	mov	r0, r8
 800eba8:	4649      	mov	r1, r9
 800ebaa:	f7f1 fb8f 	bl	80002cc <__adddf3>
 800ebae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4640      	mov	r0, r8
 800ebb8:	4649      	mov	r1, r9
 800ebba:	f7f1 fb85 	bl	80002c8 <__aeabi_dsub>
 800ebbe:	4632      	mov	r2, r6
 800ebc0:	463b      	mov	r3, r7
 800ebc2:	f7f1 fb83 	bl	80002cc <__adddf3>
 800ebc6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ebca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ebce:	ed8a 7b00 	vstr	d7, [sl]
 800ebd2:	e770      	b.n	800eab6 <__kernel_rem_pio2+0x50e>
 800ebd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ebd8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ebdc:	4640      	mov	r0, r8
 800ebde:	4632      	mov	r2, r6
 800ebe0:	463b      	mov	r3, r7
 800ebe2:	4649      	mov	r1, r9
 800ebe4:	f7f1 fb72 	bl	80002cc <__adddf3>
 800ebe8:	e9cd 0100 	strd	r0, r1, [sp]
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	4640      	mov	r0, r8
 800ebf2:	4649      	mov	r1, r9
 800ebf4:	f7f1 fb68 	bl	80002c8 <__aeabi_dsub>
 800ebf8:	4632      	mov	r2, r6
 800ebfa:	463b      	mov	r3, r7
 800ebfc:	f7f1 fb66 	bl	80002cc <__adddf3>
 800ec00:	ed9d 7b00 	vldr	d7, [sp]
 800ec04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec08:	ed84 7b00 	vstr	d7, [r4]
 800ec0c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ec10:	e757      	b.n	800eac2 <__kernel_rem_pio2+0x51a>
 800ec12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ec16:	f7f1 fb59 	bl	80002cc <__adddf3>
 800ec1a:	3d01      	subs	r5, #1
 800ec1c:	e75c      	b.n	800ead8 <__kernel_rem_pio2+0x530>
 800ec1e:	9b04      	ldr	r3, [sp, #16]
 800ec20:	9a04      	ldr	r2, [sp, #16]
 800ec22:	601f      	str	r7, [r3, #0]
 800ec24:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ec28:	605c      	str	r4, [r3, #4]
 800ec2a:	609d      	str	r5, [r3, #8]
 800ec2c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ec30:	60d3      	str	r3, [r2, #12]
 800ec32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec36:	6110      	str	r0, [r2, #16]
 800ec38:	6153      	str	r3, [r2, #20]
 800ec3a:	e727      	b.n	800ea8c <__kernel_rem_pio2+0x4e4>
 800ec3c:	41700000 	.word	0x41700000
 800ec40:	3e700000 	.word	0x3e700000
 800ec44:	00000000 	.word	0x00000000

0800ec48 <floor>:
 800ec48:	ec51 0b10 	vmov	r0, r1, d0
 800ec4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec54:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800ec58:	2e13      	cmp	r6, #19
 800ec5a:	ee10 5a10 	vmov	r5, s0
 800ec5e:	ee10 8a10 	vmov	r8, s0
 800ec62:	460c      	mov	r4, r1
 800ec64:	dc31      	bgt.n	800ecca <floor+0x82>
 800ec66:	2e00      	cmp	r6, #0
 800ec68:	da14      	bge.n	800ec94 <floor+0x4c>
 800ec6a:	a333      	add	r3, pc, #204	; (adr r3, 800ed38 <floor+0xf0>)
 800ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec70:	f7f1 fb2c 	bl	80002cc <__adddf3>
 800ec74:	2200      	movs	r2, #0
 800ec76:	2300      	movs	r3, #0
 800ec78:	f7f1 ff6e 	bl	8000b58 <__aeabi_dcmpgt>
 800ec7c:	b138      	cbz	r0, 800ec8e <floor+0x46>
 800ec7e:	2c00      	cmp	r4, #0
 800ec80:	da53      	bge.n	800ed2a <floor+0xe2>
 800ec82:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ec86:	4325      	orrs	r5, r4
 800ec88:	d052      	beq.n	800ed30 <floor+0xe8>
 800ec8a:	4c2d      	ldr	r4, [pc, #180]	; (800ed40 <floor+0xf8>)
 800ec8c:	2500      	movs	r5, #0
 800ec8e:	4621      	mov	r1, r4
 800ec90:	4628      	mov	r0, r5
 800ec92:	e024      	b.n	800ecde <floor+0x96>
 800ec94:	4f2b      	ldr	r7, [pc, #172]	; (800ed44 <floor+0xfc>)
 800ec96:	4137      	asrs	r7, r6
 800ec98:	ea01 0307 	and.w	r3, r1, r7
 800ec9c:	4303      	orrs	r3, r0
 800ec9e:	d01e      	beq.n	800ecde <floor+0x96>
 800eca0:	a325      	add	r3, pc, #148	; (adr r3, 800ed38 <floor+0xf0>)
 800eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca6:	f7f1 fb11 	bl	80002cc <__adddf3>
 800ecaa:	2200      	movs	r2, #0
 800ecac:	2300      	movs	r3, #0
 800ecae:	f7f1 ff53 	bl	8000b58 <__aeabi_dcmpgt>
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d0eb      	beq.n	800ec8e <floor+0x46>
 800ecb6:	2c00      	cmp	r4, #0
 800ecb8:	bfbe      	ittt	lt
 800ecba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ecbe:	4133      	asrlt	r3, r6
 800ecc0:	18e4      	addlt	r4, r4, r3
 800ecc2:	ea24 0407 	bic.w	r4, r4, r7
 800ecc6:	2500      	movs	r5, #0
 800ecc8:	e7e1      	b.n	800ec8e <floor+0x46>
 800ecca:	2e33      	cmp	r6, #51	; 0x33
 800eccc:	dd0b      	ble.n	800ece6 <floor+0x9e>
 800ecce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ecd2:	d104      	bne.n	800ecde <floor+0x96>
 800ecd4:	ee10 2a10 	vmov	r2, s0
 800ecd8:	460b      	mov	r3, r1
 800ecda:	f7f1 faf7 	bl	80002cc <__adddf3>
 800ecde:	ec41 0b10 	vmov	d0, r0, r1
 800ece2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ecea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ecee:	40df      	lsrs	r7, r3
 800ecf0:	4238      	tst	r0, r7
 800ecf2:	d0f4      	beq.n	800ecde <floor+0x96>
 800ecf4:	a310      	add	r3, pc, #64	; (adr r3, 800ed38 <floor+0xf0>)
 800ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfa:	f7f1 fae7 	bl	80002cc <__adddf3>
 800ecfe:	2200      	movs	r2, #0
 800ed00:	2300      	movs	r3, #0
 800ed02:	f7f1 ff29 	bl	8000b58 <__aeabi_dcmpgt>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d0c1      	beq.n	800ec8e <floor+0x46>
 800ed0a:	2c00      	cmp	r4, #0
 800ed0c:	da0a      	bge.n	800ed24 <floor+0xdc>
 800ed0e:	2e14      	cmp	r6, #20
 800ed10:	d101      	bne.n	800ed16 <floor+0xce>
 800ed12:	3401      	adds	r4, #1
 800ed14:	e006      	b.n	800ed24 <floor+0xdc>
 800ed16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	40b3      	lsls	r3, r6
 800ed1e:	441d      	add	r5, r3
 800ed20:	45a8      	cmp	r8, r5
 800ed22:	d8f6      	bhi.n	800ed12 <floor+0xca>
 800ed24:	ea25 0507 	bic.w	r5, r5, r7
 800ed28:	e7b1      	b.n	800ec8e <floor+0x46>
 800ed2a:	2500      	movs	r5, #0
 800ed2c:	462c      	mov	r4, r5
 800ed2e:	e7ae      	b.n	800ec8e <floor+0x46>
 800ed30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ed34:	e7ab      	b.n	800ec8e <floor+0x46>
 800ed36:	bf00      	nop
 800ed38:	8800759c 	.word	0x8800759c
 800ed3c:	7e37e43c 	.word	0x7e37e43c
 800ed40:	bff00000 	.word	0xbff00000
 800ed44:	000fffff 	.word	0x000fffff

0800ed48 <_init>:
 800ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4a:	bf00      	nop
 800ed4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed4e:	bc08      	pop	{r3}
 800ed50:	469e      	mov	lr, r3
 800ed52:	4770      	bx	lr

0800ed54 <_fini>:
 800ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed56:	bf00      	nop
 800ed58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed5a:	bc08      	pop	{r3}
 800ed5c:	469e      	mov	lr, r3
 800ed5e:	4770      	bx	lr
